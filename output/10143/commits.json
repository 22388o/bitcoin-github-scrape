[
  {
    "sha": "23e6e64a247ef61388f9b8902bc448f0c6159e0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2U2ZTY0YTI0N2VmNjEzODhmOWI4OTAyYmM0NDhmMGM2MTU5ZTBl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-03T14:03:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:51Z"
      },
      "message": "Allow disconnectnode() to be called with node id\n\ndisconnectnode() can currently only be called with the IP address/port\nof the node the user wishes to connect. This commit allows the node to\nbe disconnected using the nodeid returned by getpeerinfo().",
      "tree": {
        "sha": "05039c20026b8d6c7f12ab3d12a90532517d6461",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05039c20026b8d6c7f12ab3d12a90532517d6461"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23e6e64a247ef61388f9b8902bc448f0c6159e0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e6e64a247ef61388f9b8902bc448f0c6159e0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23e6e64a247ef61388f9b8902bc448f0c6159e0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e6e64a247ef61388f9b8902bc448f0c6159e0e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2584925077f9658b3953ad931b74779006e59807",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2584925077f9658b3953ad931b74779006e59807",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2584925077f9658b3953ad931b74779006e59807"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 28,
      "deletions": 7
    },
    "files": [
      {
        "sha": "941bdd93796252c7fe42055b93a587c8d83c56cc",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e6e64a247ef61388f9b8902bc448f0c6159e0e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e6e64a247ef61388f9b8902bc448f0c6159e0e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=23e6e64a247ef61388f9b8902bc448f0c6159e0e",
        "patch": "@@ -115,6 +115,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"bumpfee\", 1, \"options\" },\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n+    { \"disconnectnode\", 1, \"nodeid\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "cde5ae723bb03d5d843321ecdd79ea8d9e5ac92a",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e6e64a247ef61388f9b8902bc448f0c6159e0e/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e6e64a247ef61388f9b8902bc448f0c6159e0e/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=23e6e64a247ef61388f9b8902bc448f0c6159e0e",
        "patch": "@@ -234,23 +234,43 @@ UniValue addnode(const JSONRPCRequest& request)\n \n UniValue disconnectnode(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() == 0 || request.params.size() >= 3)\n         throw std::runtime_error(\n-            \"disconnectnode \\\"address\\\" \\n\"\n-            \"\\nImmediately disconnects from the specified node.\\n\"\n+            \"disconnectnode \\\"[address]\\\" [nodeid]\\n\"\n+            \"\\nImmediately disconnects from the specified peer node.\\n\"\n+            \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n+            \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The IP address/port of the node\\n\"\n+            \"1. \\\"address\\\"     (string, optional) The IP address/port of the node\\n\"\n+            \"2. \\\"nodeid\\\"      (number, optional) The node ID (see getpeerinfo for node IDs)\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleCli(\"disconnectnode\", \"\\\"\\\" 1\")\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"disconnectnode\", \"\\\"\\\", 1\")\n         );\n \n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    bool ret = g_connman->DisconnectNode(request.params[0].get_str());\n-    if (!ret)\n+    bool success;\n+    const UniValue &address_arg = request.params[0];\n+    const UniValue &id_arg = request.params.size() < 2 ? NullUniValue : request.params[1];\n+\n+    if (!address_arg.isNull() && id_arg.isNull()) {\n+        /* handle disconnect-by-address */\n+        success = g_connman->DisconnectNode(address_arg.get_str());\n+    } else if (!id_arg.isNull() && (address_arg.isNull() || (address_arg.isStr() && address_arg.get_str().empty()))) {\n+        /* handle disconnect-by-id */\n+        NodeId nodeid = (NodeId) id_arg.get_int64();\n+        success = g_connman->DisconnectNode(nodeid);\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMS, \"Only one of address and nodeid should be provided.\");\n+    }\n+\n+    if (!success) {\n         throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n+    }\n \n     return NullUniValue;\n }\n@@ -607,7 +627,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"ping\",                   &ping,                   true,  {} },\n     { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,  {} },\n     { \"network\",            \"addnode\",                &addnode,                true,  {\"node\",\"command\"} },\n-    { \"network\",            \"disconnectnode\",         &disconnectnode,         true,  {\"address\"} },\n+    { \"network\",            \"disconnectnode\",         &disconnectnode,         true,  {\"address\", \"nodeid\"} },\n     { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,  {\"node\"} },\n     { \"network\",            \"getnettotals\",           &getnettotals,           true,  {} },\n     { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,  {} },"
      }
    ]
  },
  {
    "sha": "d6564a26f4afc28d7d1a24b94946916387c9bf24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjU2NGEyNmY0YWZjMjhkN2QxYTI0Yjk0OTQ2OTE2Mzg3YzliZjI0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T15:07:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:56Z"
      },
      "message": "[tests] fix nodehandling.py flake8 warnings",
      "tree": {
        "sha": "2c1dd92e83b475a0868a77cf241c80c407f9e71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c1dd92e83b475a0868a77cf241c80c407f9e71e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6564a26f4afc28d7d1a24b94946916387c9bf24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6564a26f4afc28d7d1a24b94946916387c9bf24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6564a26f4afc28d7d1a24b94946916387c9bf24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6564a26f4afc28d7d1a24b94946916387c9bf24/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23e6e64a247ef61388f9b8902bc448f0c6159e0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e6e64a247ef61388f9b8902bc448f0c6159e0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23e6e64a247ef61388f9b8902bc448f0c6159e0e"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "2124069d0fdac4bd1e4c82921d9de3542366cd4f",
        "filename": "test/functional/nodehandling.py",
        "status": "modified",
        "additions": 26,
        "deletions": 20,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6564a26f4afc28d7d1a24b94946916387c9bf24/test/functional/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6564a26f4afc28d7d1a24b94946916387c9bf24/test/functional/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nodehandling.py?ref=d6564a26f4afc28d7d1a24b94946916387c9bf24",
        "patch": "@@ -3,13 +3,19 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node handling.\"\"\"\n+import time\n+import urllib.parse\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-import urllib.parse\n+from test_framework.util import (assert_equal,\n+                                 assert_raises_jsonrpc,\n+                                 connect_nodes_bi,\n+                                 p2p_port,\n+                                 start_node,\n+                                 stop_node,\n+                                 )\n \n-class NodeHandlingTest (BitcoinTestFramework):\n+class NodeHandlingTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n@@ -20,10 +26,10 @@ def run_test(self):\n         ###########################\n         # setban/listbanned tests #\n         ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4) #we should have 4 nodes at this point\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 4)  # we should have 4 nodes at this point\n         self.nodes[2].setban(\"127.0.0.1\", \"add\")\n-        time.sleep(3) #wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0) #all nodes must be disconnected at this point\n+        time.sleep(3)  # wait till the nodes are disconected\n+        assert_equal(len(self.nodes[2].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n         self.nodes[2].clearbanned()\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n@@ -33,7 +39,7 @@ def run_test(self):\n         assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n         # This will throw an exception because 127.0.0.1/42 is not a real subnet\n         assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1) #still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        assert_equal(len(self.nodes[2].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n         # This will throw an exception because 127.0.0.1 was not added above\n         assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[2].listbanned()), 1)\n@@ -42,16 +48,16 @@ def run_test(self):\n         self.nodes[2].clearbanned()\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n \n-        ##test persisted banlist\n+        # test persisted banlist\n         self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n         self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n-        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n+        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n+        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n         listBeforeShutdown = self.nodes[2].listbanned()\n-        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address']) #must be here\n-        time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n+        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])  # must be here\n+        time.sleep(2)  # make 100% sure we expired 192.168.0.1 node time\n \n-        #stop node\n+        # stop node\n         stop_node(self.nodes[2], 2)\n \n         self.nodes[2] = start_node(2, self.options.tmpdir)\n@@ -64,17 +70,17 @@ def run_test(self):\n         # RPC disconnectnode test #\n         ###########################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n-        self.nodes[0].disconnectnode(url.hostname+\":\"+str(p2p_port(1)))\n-        time.sleep(2) #disconnecting a node needs a little bit of time\n+        self.nodes[0].disconnectnode(url.hostname + \":\" + str(p2p_port(1)))\n+        time.sleep(2)  # disconnecting a node needs a little bit of time\n         for node in self.nodes[0].getpeerinfo():\n-            assert(node['addr'] != url.hostname+\":\"+str(p2p_port(1)))\n+            assert(node['addr'] != url.hostname + \":\" + str(p2p_port(1)))\n \n-        connect_nodes_bi(self.nodes,0,1) #reconnect the node\n+        connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n         found = False\n         for node in self.nodes[0].getpeerinfo():\n-            if node['addr'] == url.hostname+\":\"+str(p2p_port(1)):\n+            if node['addr'] == url.hostname + \":\" + str(p2p_port(1)):\n                 found = True\n         assert(found)\n \n if __name__ == '__main__':\n-    NodeHandlingTest ().main ()\n+    NodeHandlingTest().main()"
      }
    ]
  },
  {
    "sha": "e367ad5b441d44479d40d6b04a270a571d073a65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzY3YWQ1YjQ0MWQ0NDQ3OWQ0MGQ2YjA0YTI3MGE1NzFkMDczYTY1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T15:14:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:56Z"
      },
      "message": "[tests] rename nodehandling to disconnectban",
      "tree": {
        "sha": "c7ba4de0354e8cc7031df4f36681a4d404608103",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7ba4de0354e8cc7031df4f36681a4d404608103"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e367ad5b441d44479d40d6b04a270a571d073a65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e367ad5b441d44479d40d6b04a270a571d073a65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e367ad5b441d44479d40d6b04a270a571d073a65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e367ad5b441d44479d40d6b04a270a571d073a65/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6564a26f4afc28d7d1a24b94946916387c9bf24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6564a26f4afc28d7d1a24b94946916387c9bf24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6564a26f4afc28d7d1a24b94946916387c9bf24"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "458b66af030f70c01609a675113d51e0c6693284",
        "filename": "test/functional/disconnect_ban.py",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e367ad5b441d44479d40d6b04a270a571d073a65/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e367ad5b441d44479d40d6b04a270a571d073a65/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=e367ad5b441d44479d40d6b04a270a571d073a65",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test node handling.\"\"\"\n+\"\"\"Test node disconnect and ban behavior\"\"\"\n import time\n import urllib.parse\n \n@@ -15,7 +15,7 @@\n                                  stop_node,\n                                  )\n \n-class NodeHandlingTest(BitcoinTestFramework):\n+class DisconnectBanTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n@@ -83,4 +83,4 @@ def run_test(self):\n         assert(found)\n \n if __name__ == '__main__':\n-    NodeHandlingTest().main()\n+    DisconnectBanTest().main()",
        "previous_filename": "test/functional/nodehandling.py"
      },
      {
        "sha": "08687003875290d548587c93f12b74983f6d2299",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e367ad5b441d44479d40d6b04a270a571d073a65/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e367ad5b441d44479d40d6b04a270a571d073a65/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e367ad5b441d44479d40d6b04a270a571d073a65",
        "patch": "@@ -80,7 +80,7 @@\n     'multi_rpc.py',\n     'proxy_test.py',\n     'signrawtransactions.py',\n-    'nodehandling.py',\n+    'disconnect_ban.py',\n     'decodescript.py',\n     'blockchain.py',\n     'disablewallet.py',"
      }
    ]
  },
  {
    "sha": "395561becfa612fedec74fd841cb4f28afdc23d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTU1NjFiZWNmYTYxMmZlZGVjNzRmZDg0MWNiNGYyOGFmZGMyM2Q3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T15:25:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:56Z"
      },
      "message": "[tests] disconnectban test - only use two nodes",
      "tree": {
        "sha": "d0ef3dc2fd76266fbd9ab9a555361395f7197532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0ef3dc2fd76266fbd9ab9a555361395f7197532"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/395561becfa612fedec74fd841cb4f28afdc23d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395561becfa612fedec74fd841cb4f28afdc23d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/395561becfa612fedec74fd841cb4f28afdc23d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395561becfa612fedec74fd841cb4f28afdc23d7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e367ad5b441d44479d40d6b04a270a571d073a65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e367ad5b441d44479d40d6b04a270a571d073a65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e367ad5b441d44479d40d6b04a270a571d073a65"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 34,
      "deletions": 26
    },
    "files": [
      {
        "sha": "cb4efc8f45e2248145dd720f552944468b0155a3",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 34,
        "deletions": 26,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395561becfa612fedec74fd841cb4f28afdc23d7/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395561becfa612fedec74fd841cb4f28afdc23d7/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=395561becfa612fedec74fd841cb4f28afdc23d7",
        "patch": "@@ -19,53 +19,61 @@ class DisconnectBanTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 4\n+        self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def setup_network(self):\n+        self.nodes = self.setup_nodes()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n     def run_test(self):\n         ###########################\n         # setban/listbanned tests #\n         ###########################\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 4)  # we should have 4 nodes at this point\n-        self.nodes[2].setban(\"127.0.0.1\", \"add\")\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n+        self.nodes[1].setban(\"127.0.0.1\", \"add\")\n         time.sleep(3)  # wait till the nodes are disconected\n-        assert_equal(len(self.nodes[2].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n+        assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n+        self.nodes[1].clearbanned()\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n         # This will throw an exception because 127.0.0.1 is within range 127.0.0.0/24\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[2].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n         # This will throw an exception because 127.0.0.1/42 is not a real subnet\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[2].setban, \"127.0.0.1/42\", \"add\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n+        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n         # This will throw an exception because 127.0.0.1 was not added above\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[2].setban, \"127.0.0.1\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 1)\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"remove\")\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n-        self.nodes[2].clearbanned()\n-        assert_equal(len(self.nodes[2].listbanned()), 0)\n+        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_equal(len(self.nodes[1].listbanned()), 1)\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"remove\")\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n+        self.nodes[1].clearbanned()\n+        assert_equal(len(self.nodes[1].listbanned()), 0)\n \n         # test persisted banlist\n-        self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n-        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n-        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n-        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n-        listBeforeShutdown = self.nodes[2].listbanned()\n+        self.nodes[1].setban(\"127.0.0.0/32\", \"add\")\n+        self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n+        self.nodes[1].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n+        self.nodes[1].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n+        listBeforeShutdown = self.nodes[1].listbanned()\n         assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])  # must be here\n         time.sleep(2)  # make 100% sure we expired 192.168.0.1 node time\n \n         # stop node\n-        stop_node(self.nodes[2], 2)\n+        stop_node(self.nodes[1], 1)\n \n-        self.nodes[2] = start_node(2, self.options.tmpdir)\n-        listAfterShutdown = self.nodes[2].listbanned()\n+        self.nodes[1] = start_node(1, self.options.tmpdir)\n+        listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])\n         assert_equal(\"/19\" in listAfterShutdown[2]['address'], True)\n \n+        # Clear ban lists\n+        self.nodes[1].clearbanned()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n         ###########################\n         # RPC disconnectnode test #\n         ###########################"
      }
    ]
  },
  {
    "sha": "2077fdacd32adae8d118f019628ecdaa24632550",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDc3ZmRhY2QzMmFkYWU4ZDExOGYwMTk2MjhlY2RhYTI0NjMyNTUw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T15:30:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:56Z"
      },
      "message": "[tests] disconnect_ban: add logging",
      "tree": {
        "sha": "9252678c66cba73fa0764ff17c3166731f833647",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9252678c66cba73fa0764ff17c3166731f833647"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2077fdacd32adae8d118f019628ecdaa24632550",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2077fdacd32adae8d118f019628ecdaa24632550",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2077fdacd32adae8d118f019628ecdaa24632550",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2077fdacd32adae8d118f019628ecdaa24632550/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "395561becfa612fedec74fd841cb4f28afdc23d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395561becfa612fedec74fd841cb4f28afdc23d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/395561becfa612fedec74fd841cb4f28afdc23d7"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4c50f85aee93653ed8ca68721a077181e9bc7a6e",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2077fdacd32adae8d118f019628ecdaa24632550/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2077fdacd32adae8d118f019628ecdaa24632550/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=2077fdacd32adae8d118f019628ecdaa24632550",
        "patch": "@@ -27,32 +27,39 @@ def setup_network(self):\n         connect_nodes_bi(self.nodes, 0, 1)\n \n     def run_test(self):\n-        ###########################\n-        # setban/listbanned tests #\n-        ###########################\n+        self.log.info(\"Test setban and listbanned RPCs\")\n+\n+        self.log.info(\"setban: successfully ban single IP address\")\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n         time.sleep(3)  # wait till the nodes are disconected\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n+\n+        self.log.info(\"clearbanned: successfully clear ban list\")\n         self.nodes[1].clearbanned()\n         assert_equal(len(self.nodes[1].listbanned()), 0)\n         self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n+\n+        self.log.info(\"setban: fail to ban an already banned subnet\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n-        # This will throw an exception because 127.0.0.1 is within range 127.0.0.0/24\n         assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n-        # This will throw an exception because 127.0.0.1/42 is not a real subnet\n+\n+        self.log.info(\"setban: fail to ban an invalid subnet\")\n         assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n-        # This will throw an exception because 127.0.0.1 was not added above\n+\n+        self.log.info(\"setban remove: fail to unban a non-banned subnet\")\n         assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n+\n+        self.log.info(\"setban remove: successfully unban subnet\")\n         self.nodes[1].setban(\"127.0.0.0/24\", \"remove\")\n         assert_equal(len(self.nodes[1].listbanned()), 0)\n         self.nodes[1].clearbanned()\n         assert_equal(len(self.nodes[1].listbanned()), 0)\n \n-        # test persisted banlist\n+        self.log.info(\"setban: test persistence across node restart\")\n         self.nodes[1].setban(\"127.0.0.0/32\", \"add\")\n         self.nodes[1].setban(\"127.0.0.0/24\", \"add\")\n         self.nodes[1].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n@@ -74,15 +81,16 @@ def run_test(self):\n         self.nodes[1].clearbanned()\n         connect_nodes_bi(self.nodes, 0, 1)\n \n-        ###########################\n-        # RPC disconnectnode test #\n-        ###########################\n+        self.log.info(\"Test disconnectrnode RPCs\")\n+\n+        self.log.info(\"disconnectnode: successfully disconnect node\")\n         url = urllib.parse.urlparse(self.nodes[1].url)\n         self.nodes[0].disconnectnode(url.hostname + \":\" + str(p2p_port(1)))\n         time.sleep(2)  # disconnecting a node needs a little bit of time\n         for node in self.nodes[0].getpeerinfo():\n             assert(node['addr'] != url.hostname + \":\" + str(p2p_port(1)))\n \n+        self.log.info(\"disconnectnode: successfully reconnect node\")\n         connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n         found = False\n         for node in self.nodes[0].getpeerinfo():"
      }
    ]
  },
  {
    "sha": "12de2f252c8f48e05c579cb679866a68af8c660e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmRlMmYyNTJjOGY0OGUwNWM1NzljYjY3OTg2NmE2OGFmOGM2NjBl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T16:42:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:56Z"
      },
      "message": "[tests] disconnect_ban: use wait_until instead of sleep",
      "tree": {
        "sha": "ee422b5b099214f9bd87f1d429011dac07c07d87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee422b5b099214f9bd87f1d429011dac07c07d87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12de2f252c8f48e05c579cb679866a68af8c660e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12de2f252c8f48e05c579cb679866a68af8c660e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12de2f252c8f48e05c579cb679866a68af8c660e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12de2f252c8f48e05c579cb679866a68af8c660e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2077fdacd32adae8d118f019628ecdaa24632550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2077fdacd32adae8d118f019628ecdaa24632550",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2077fdacd32adae8d118f019628ecdaa24632550"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c3ca2aee9b9f0f88993464875926f213910e21cf",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12de2f252c8f48e05c579cb679866a68af8c660e/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12de2f252c8f48e05c579cb679866a68af8c660e/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=12de2f252c8f48e05c579cb679866a68af8c660e",
        "patch": "@@ -3,9 +3,9 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node disconnect and ban behavior\"\"\"\n-import time\n import urllib.parse\n \n+from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (assert_equal,\n                                  assert_raises_jsonrpc,\n@@ -32,7 +32,7 @@ def run_test(self):\n         self.log.info(\"setban: successfully ban single IP address\")\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n-        time.sleep(3)  # wait till the nodes are disconected\n+        wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n@@ -65,10 +65,9 @@ def run_test(self):\n         self.nodes[1].setban(\"192.168.0.1\", \"add\", 1)  # ban for 1 seconds\n         self.nodes[1].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000)  # ban for 1000 seconds\n         listBeforeShutdown = self.nodes[1].listbanned()\n-        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])  # must be here\n-        time.sleep(2)  # make 100% sure we expired 192.168.0.1 node time\n+        assert_equal(\"192.168.0.1/32\", listBeforeShutdown[2]['address'])\n+        wait_until(lambda: len(self.nodes[1].listbanned()) == 3)\n \n-        # stop node\n         stop_node(self.nodes[1], 1)\n \n         self.nodes[1] = start_node(1, self.options.tmpdir)\n@@ -86,7 +85,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node\")\n         url = urllib.parse.urlparse(self.nodes[1].url)\n         self.nodes[0].disconnectnode(url.hostname + \":\" + str(p2p_port(1)))\n-        time.sleep(2)  # disconnecting a node needs a little bit of time\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n         for node in self.nodes[0].getpeerinfo():\n             assert(node['addr'] != url.hostname + \":\" + str(p2p_port(1)))\n "
      }
    ]
  },
  {
    "sha": "5cc3ee24d29397737f2746d78b19a2509c0dedbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2MzZWUyNGQyOTM5NzczN2YyNzQ2ZDc4YjE5YTI1MDljMGRlZGJi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:35:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:56Z"
      },
      "message": "[tests] disconnect_ban: remove dependency on urllib",
      "tree": {
        "sha": "ee1bc6fdd64e7d5678a3bdc709db5322e643f603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee1bc6fdd64e7d5678a3bdc709db5322e643f603"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cc3ee24d29397737f2746d78b19a2509c0dedbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc3ee24d29397737f2746d78b19a2509c0dedbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cc3ee24d29397737f2746d78b19a2509c0dedbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc3ee24d29397737f2746d78b19a2509c0dedbb/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12de2f252c8f48e05c579cb679866a68af8c660e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12de2f252c8f48e05c579cb679866a68af8c660e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12de2f252c8f48e05c579cb679866a68af8c660e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 5,
      "deletions": 12
    },
    "files": [
      {
        "sha": "aeb4199c0faff877c38955dd16f98a1a0ed29331",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 5,
        "deletions": 12,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cc3ee24d29397737f2746d78b19a2509c0dedbb/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cc3ee24d29397737f2746d78b19a2509c0dedbb/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=5cc3ee24d29397737f2746d78b19a2509c0dedbb",
        "patch": "@@ -3,14 +3,12 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node disconnect and ban behavior\"\"\"\n-import urllib.parse\n \n from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (assert_equal,\n                                  assert_raises_jsonrpc,\n                                  connect_nodes_bi,\n-                                 p2p_port,\n                                  start_node,\n                                  stop_node,\n                                  )\n@@ -82,20 +80,15 @@ def run_test(self):\n \n         self.log.info(\"Test disconnectrnode RPCs\")\n \n-        self.log.info(\"disconnectnode: successfully disconnect node\")\n-        url = urllib.parse.urlparse(self.nodes[1].url)\n-        self.nodes[0].disconnectnode(url.hostname + \":\" + str(p2p_port(1)))\n+        self.log.info(\"disconnectnode: successfully disconnect node by address\")\n+        address1 = self.nodes[0].getpeerinfo()[0]['addr']\n+        self.nodes[0].disconnectnode(address=address1)\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n-        for node in self.nodes[0].getpeerinfo():\n-            assert(node['addr'] != url.hostname + \":\" + str(p2p_port(1)))\n+        assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n         connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n-        found = False\n-        for node in self.nodes[0].getpeerinfo():\n-            if node['addr'] == url.hostname + \":\" + str(p2p_port(1)):\n-                found = True\n-        assert(found)\n+        assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n if __name__ == '__main__':\n     DisconnectBanTest().main()"
      }
    ]
  },
  {
    "sha": "d54297f1a85612dab100c473ad04c4f9d279f473",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTQyOTdmMWE4NTYxMmRhYjEwMGM0NzNhZDA0YzRmOWQyNzlmNDcz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:44:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-19T17:47:56Z"
      },
      "message": "[tests] disconnect_ban: add tests for disconnect-by-nodeid",
      "tree": {
        "sha": "fed8fc3b2d4a731b3d55136c67a1f27a8f4e5cfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed8fc3b2d4a731b3d55136c67a1f27a8f4e5cfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d54297f1a85612dab100c473ad04c4f9d279f473",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d54297f1a85612dab100c473ad04c4f9d279f473",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d54297f1a85612dab100c473ad04c4f9d279f473",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d54297f1a85612dab100c473ad04c4f9d279f473/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cc3ee24d29397737f2746d78b19a2509c0dedbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc3ee24d29397737f2746d78b19a2509c0dedbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cc3ee24d29397737f2746d78b19a2509c0dedbb"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f451d49d23e279b4d4fb02f79bfabb6f5c9c31c",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d54297f1a85612dab100c473ad04c4f9d279f473/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d54297f1a85612dab100c473ad04c4f9d279f473/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=d54297f1a85612dab100c473ad04c4f9d279f473",
        "patch": "@@ -80,6 +80,14 @@ def run_test(self):\n \n         self.log.info(\"Test disconnectrnode RPCs\")\n \n+        self.log.info(\"disconnectnode: fail to disconnect when calling with address and nodeid\")\n+        address1 = self.nodes[0].getpeerinfo()[0]['addr']\n+        node1 = self.nodes[0].getpeerinfo()[0]['addr']\n+        assert_raises_jsonrpc(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n+\n+        self.log.info(\"disconnectnode: fail to disconnect when calling with junk address\")\n+        assert_raises_jsonrpc(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n+\n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         self.nodes[0].disconnectnode(address=address1)\n@@ -88,7 +96,14 @@ def run_test(self):\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n         connect_nodes_bi(self.nodes, 0, 1)  # reconnect the node\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n         assert [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n+        self.log.info(\"disconnectnode: successfully disconnect node by node id\")\n+        id1 = self.nodes[0].getpeerinfo()[0]['id']\n+        self.nodes[0].disconnectnode(nodeid=id1)\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1)\n+        assert not [node for node in self.nodes[0].getpeerinfo() if node['id'] == id1]\n+\n if __name__ == '__main__':\n     DisconnectBanTest().main()"
      }
    ]
  }
]