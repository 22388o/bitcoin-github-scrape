[
  {
    "sha": "3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDgzY2YxMDBhYzc4YzViMmIyZTVlYmRlNWJkYzJjYWM0MGNiNzA2",
    "commit": {
      "author": {
        "name": "Clark Gaebel",
        "email": "cgaebel@csclub.uwaterloo.ca",
        "date": "2011-11-02T08:33:55Z"
      },
      "committer": {
        "name": "Clark Gaebel",
        "email": "cgaebel@csclub.uwaterloo.ca",
        "date": "2011-11-02T08:33:55Z"
      },
      "message": "Cleaned up the critical section macros.",
      "tree": {
        "sha": "bc9969b82652144f02a73f63bdb6793ba55095a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc9969b82652144f02a73f63bdb6793ba55095a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8fb6134aa5606906ce11432ac973f9b9415e3d03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fb6134aa5606906ce11432ac973f9b9415e3d03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fb6134aa5606906ce11432ac973f9b9415e3d03"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 15,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4c966486f7a2f6b8cd581d5c8e3b3692a63c0128",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706",
        "patch": "@@ -243,19 +243,20 @@ class CCriticalBlock\n         pcs = &csIn;\n         pcs->Enter(pszName, pszFile, nLine);\n     }\n+\n+    operator bool() const\n+    {\n+        return true;\n+    }\n+\n     ~CCriticalBlock()\n     {\n         pcs->Leave();\n     }\n };\n \n-// WARNING: This will catch continue and break!\n-// break is caught with an assertion, but there's no way to detect continue.\n-// I'd rather be careful than suffer the other more error prone syntax.\n-// The compiler will optimise away all this loop junk.\n #define CRITICAL_BLOCK(cs)     \\\n-    for (bool fcriticalblockonce=true; fcriticalblockonce; assert((\"break caught by CRITICAL_BLOCK!\" && !fcriticalblockonce)), fcriticalblockonce=false) \\\n-        for (CCriticalBlock criticalblock(cs, #cs, __FILE__, __LINE__); fcriticalblockonce; fcriticalblockonce=false)\n+    if (CCriticalBlock criticalblock = CCriticalBlock(cs, #cs, __FILE__, __LINE__))\n \n class CTryCriticalBlock\n {\n@@ -267,19 +268,24 @@ class CTryCriticalBlock\n     {\n         pcs = (csIn.TryEnter(pszName, pszFile, nLine) ? &csIn : NULL);\n     }\n+\n+    operator bool() const\n+    {\n+        return Entered();\n+    }\n+\n     ~CTryCriticalBlock()\n     {\n         if (pcs)\n         {\n             pcs->Leave();\n         }\n     }\n-    bool Entered() { return pcs != NULL; }\n+    bool Entered() const { return pcs != NULL; }\n };\n \n #define TRY_CRITICAL_BLOCK(cs)     \\\n-    for (bool fcriticalblockonce=true; fcriticalblockonce; assert((\"break caught by TRY_CRITICAL_BLOCK!\" && !fcriticalblockonce)), fcriticalblockonce=false) \\\n-        for (CTryCriticalBlock criticalblock(cs, #cs, __FILE__, __LINE__); fcriticalblockonce && (fcriticalblockonce = criticalblock.Entered()); fcriticalblockonce=false)\n+    if (CTryCriticalBlock criticalblock = CTryCriticalBlock(cs, #cs, __FILE__, __LINE__))\n \n \n "
      }
    ]
  },
  {
    "sha": "f873b84d6e91407cb6c9ea292d16baed6ec07779",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODczYjg0ZDZlOTE0MDdjYjZjOWVhMjkyZDE2YmFlZDZlYzA3Nzc5",
    "commit": {
      "author": {
        "name": "Clark Gaebel",
        "email": "cgaebel@csclub.uwaterloo.ca",
        "date": "2011-11-02T22:10:41Z"
      },
      "committer": {
        "name": "Clark Gaebel",
        "email": "cgaebel@csclub.uwaterloo.ca",
        "date": "2011-11-02T22:10:41Z"
      },
      "message": "Added simple critical section test cases.",
      "tree": {
        "sha": "95ac873a020ee1bc1f8fc4fc59a96fa3e23a8cd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95ac873a020ee1bc1f8fc4fc59a96fa3e23a8cd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f873b84d6e91407cb6c9ea292d16baed6ec07779",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f873b84d6e91407cb6c9ea292d16baed6ec07779",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f873b84d6e91407cb6c9ea292d16baed6ec07779",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f873b84d6e91407cb6c9ea292d16baed6ec07779/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3083cf100ac78c5b2b2e5ebde5bdc2cac40cb706"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c8b99e1b229bb621f8f0dfac915e58dbcfd2c0c",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f873b84d6e91407cb6c9ea292d16baed6ec07779/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f873b84d6e91407cb6c9ea292d16baed6ec07779/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f873b84d6e91407cb6c9ea292d16baed6ec07779",
        "patch": "@@ -8,6 +8,25 @@ using namespace std;\n \n BOOST_AUTO_TEST_SUITE(util_tests)\n \n+BOOST_AUTO_TEST_CASE(util_criticalsection)\n+{\n+    CCriticalSection cs;\n+\n+    do {\n+        CRITICAL_BLOCK(cs)\n+            break;\n+\n+        BOOST_ERROR(\"break was swallowed!\");\n+    } while(0);\n+\n+    do {\n+        TRY_CRITICAL_BLOCK(cs)\n+            break;\n+\n+        BOOST_ERROR(\"break was swallowed!\");\n+    } while(0);\n+}\n+\n BOOST_AUTO_TEST_CASE(util_MedianFilter)\n {    \n     CMedianFilter<int> filter(5, 15);"
      }
    ]
  }
]