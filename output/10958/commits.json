[
  {
    "sha": "b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTNhNjhlMTI5ZjUxYjY2NGUzM2IxODk0ZTMzZWJiN2I5NGNkY2M3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-01T19:40:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-01T19:40:42Z"
      },
      "message": "Squashed 'src/leveldb/' changes from 196962ff0..c521b3ac6\n\nc521b3ac6 Merge #11: fixup define checks. Cleans up some oopses from #5.\n8b1cd3753 fixup define checks. Cleans up some oopses from #5.\n6b1508d6d Merge #6: Fixes typo\nfceb80542 Merge #10: Clean up compile-time warnings (gcc 7.1)\n0ec2a343f Clean up compile-time warnings (gcc 7.1)\nd4c268a35 Merge #5: Move helper functions out of sse4.2 object\n8d4eb0847 Add HasAcceleratedCRC32C to port_win.h\n77cfbfd25 crc32: move helper functions out of port_posix_sse.cc\n4c1e9e016 silence compiler warnings about uninitialized variables\n495316485 Merge #2: Prefer std::atomic over MemoryBarrier\n2953978ef Fixes typo\nf134284a1 Merge #1: Merge upstream LevelDB 1.20\nba8a445fd Prefer std::atomic over MemoryBarrier\n\ngit-subtree-dir: src/leveldb\ngit-subtree-split: c521b3ac654cfbe009c575eacf7e5a6e189bb5bb",
      "tree": {
        "sha": "c461c1652fef37b42ddc18a02cbc28920342270d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c461c1652fef37b42ddc18a02cbc28920342270d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf44e4ca7762742c6c3154447b40869ec9d041db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf44e4ca7762742c6c3154447b40869ec9d041db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf44e4ca7762742c6c3154447b40869ec9d041db"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 64,
      "deletions": 45
    },
    "files": [
      {
        "sha": "287afdbdcb90c7f8ba1dacd3a842660b22bdab0b",
        "filename": "db/memtable.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/db/memtable.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/db/memtable.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/memtable.cc?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -101,7 +101,7 @@ void MemTable::Add(SequenceNumber s, ValueType type,\n   p += 8;\n   p = EncodeVarint32(p, val_size);\n   memcpy(p, value.data(), val_size);\n-  assert((p + val_size) - buf == encoded_len);\n+  assert(p + val_size == buf + encoded_len);\n   table_.Insert(buf);\n }\n "
      },
      {
        "sha": "2cb6d80ed3cf9a14f48dcbd80fc430efaaca3cc0",
        "filename": "db/version_set.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/db/version_set.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/db/version_set.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/version_set.cc?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -20,7 +20,7 @@\n \n namespace leveldb {\n \n-static int TargetFileSize(const Options* options) {\n+static size_t TargetFileSize(const Options* options) {\n   return options->max_file_size;\n }\n "
      },
      {
        "sha": "7935a965a7c9fdd62533a8c13c9b6033675066df",
        "filename": "db/version_set.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/db/version_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/db/version_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/version_set.h?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -376,7 +376,7 @@ class Compaction {\n   // Each compaction reads inputs from \"level_\" and \"level_+1\"\n   std::vector<FileMetaData*> inputs_[2];      // The two sets of inputs\n \n-  // State used to check for number of of overlapping grandparent files\n+  // State used to check for number of overlapping grandparent files\n   // (parent == level_ + 1, grandparent == level_ + 2)\n   std::vector<FileMetaData*> grandparents_;\n   size_t grandparent_index_;  // Index in grandparent_starts_"
      },
      {
        "sha": "d79a02230d57fe085949936b26b9a7af413e07b8",
        "filename": "port/atomic_pointer.h",
        "status": "modified",
        "additions": 25,
        "deletions": 22,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/atomic_pointer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/atomic_pointer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/atomic_pointer.h?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -46,6 +46,30 @@\n namespace leveldb {\n namespace port {\n \n+// AtomicPointer based on <cstdatomic> if available\n+#if defined(LEVELDB_ATOMIC_PRESENT)\n+class AtomicPointer {\n+ private:\n+  std::atomic<void*> rep_;\n+ public:\n+  AtomicPointer() { }\n+  explicit AtomicPointer(void* v) : rep_(v) { }\n+  inline void* Acquire_Load() const {\n+    return rep_.load(std::memory_order_acquire);\n+  }\n+  inline void Release_Store(void* v) {\n+    rep_.store(v, std::memory_order_release);\n+  }\n+  inline void* NoBarrier_Load() const {\n+    return rep_.load(std::memory_order_relaxed);\n+  }\n+  inline void NoBarrier_Store(void* v) {\n+    rep_.store(v, std::memory_order_relaxed);\n+  }\n+};\n+\n+#else\n+\n // Define MemoryBarrier() if available\n // Windows on x86\n #if defined(OS_WIN) && defined(COMPILER_MSVC) && defined(ARCH_CPU_X86_FAMILY)\n@@ -142,28 +166,6 @@ class AtomicPointer {\n   }\n };\n \n-// AtomicPointer based on <cstdatomic>\n-#elif defined(LEVELDB_ATOMIC_PRESENT)\n-class AtomicPointer {\n- private:\n-  std::atomic<void*> rep_;\n- public:\n-  AtomicPointer() { }\n-  explicit AtomicPointer(void* v) : rep_(v) { }\n-  inline void* Acquire_Load() const {\n-    return rep_.load(std::memory_order_acquire);\n-  }\n-  inline void Release_Store(void* v) {\n-    rep_.store(v, std::memory_order_release);\n-  }\n-  inline void* NoBarrier_Load() const {\n-    return rep_.load(std::memory_order_relaxed);\n-  }\n-  inline void NoBarrier_Store(void* v) {\n-    rep_.store(v, std::memory_order_relaxed);\n-  }\n-};\n-\n // Atomic pointer based on sparc memory barriers\n #elif defined(__sparcv9) && defined(__GNUC__)\n class AtomicPointer {\n@@ -228,6 +230,7 @@ class AtomicPointer {\n #else\n #error Please implement AtomicPointer for this platform.\n \n+#endif\n #endif\n \n #undef LEVELDB_HAVE_MEMORY_BARRIER"
      },
      {
        "sha": "5b1d027de556eb6b308dee1ccea88995bcb038d3",
        "filename": "port/port_example.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_example.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_example.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/port_example.h?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -129,6 +129,10 @@ extern bool Snappy_Uncompress(const char* input_data, size_t input_length,\n // The concatenation of all \"data[0,n-1]\" fragments is the heap profile.\n extern bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg);\n \n+// Determine whether a working accelerated crc32 implementation exists\n+// Returns true if AcceleratedCRC32C is safe to call\n+bool HasAcceleratedCRC32C();\n+\n // Extend the CRC to include the first n bytes of buf.\n //\n // Returns zero if the CRC cannot be extended using acceleration, else returns"
      },
      {
        "sha": "ec39e921957f6507e3eb5f5ed5b6e15fea69e527",
        "filename": "port/port_posix.cc",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/port_posix.cc?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -8,6 +8,10 @@\n #include <stdio.h>\n #include <string.h>\n \n+#if (defined(__x86_64__) || defined(__i386__)) && defined(__GNUC__)\n+#include <cpuid.h>\n+#endif\n+\n namespace leveldb {\n namespace port {\n \n@@ -49,5 +53,15 @@ void InitOnce(OnceType* once, void (*initializer)()) {\n   PthreadCall(\"once\", pthread_once(once, initializer));\n }\n \n+bool HasAcceleratedCRC32C() {\n+#if (defined(__x86_64__) || defined(__i386__)) && defined(__GNUC__)\n+  unsigned int eax, ebx, ecx, edx;\n+  __get_cpuid(1, &eax, &ebx, &ecx, &edx);\n+  return (ecx & (1 << 20)) != 0;\n+#else\n+  return false;\n+#endif\n+}\n+\n }  // namespace port\n }  // namespace leveldb"
      },
      {
        "sha": "d85fa5d63fe0fc593cb2c9c12471d884622189b6",
        "filename": "port/port_posix.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_posix.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_posix.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/port_posix.h?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -152,6 +152,7 @@ inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {\n   return false;\n }\n \n+bool HasAcceleratedCRC32C();\n uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size);\n \n } // namespace port"
      },
      {
        "sha": "2d49c21dd8b0eb08fa0fd33411c50f2d277c94d6",
        "filename": "port/port_posix_sse.cc",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_posix_sse.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_posix_sse.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/port_posix_sse.cc?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -19,7 +19,6 @@\n #include <intrin.h>\n #elif defined(__GNUC__) && defined(__SSE4_2__)\n #include <nmmintrin.h>\n-#include <cpuid.h>\n #endif\n \n #endif  // defined(LEVELDB_PLATFORM_POSIX_SSE)\n@@ -48,20 +47,6 @@ static inline uint64_t LE_LOAD64(const uint8_t *p) {\n \n #endif  // defined(_M_X64) || defined(__x86_64__)\n \n-static inline bool HaveSSE42() {\n-#if defined(_MSC_VER)\n-  int cpu_info[4];\n-  __cpuid(cpu_info, 1);\n-  return (cpu_info[2] & (1 << 20)) != 0;\n-#elif defined(__GNUC__)\n-  unsigned int eax, ebx, ecx, edx;\n-  __get_cpuid(1, &eax, &ebx, &ecx, &edx);\n-  return (ecx & (1 << 20)) != 0;\n-#else\n-  return false;\n-#endif\n-}\n-\n #endif  // defined(LEVELDB_PLATFORM_POSIX_SSE)\n \n // For further improvements see Intel publication at:\n@@ -70,10 +55,6 @@ uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size) {\n #if !defined(LEVELDB_PLATFORM_POSIX_SSE)\n   return 0;\n #else\n-  static bool have = HaveSSE42();\n-  if (!have) {\n-    return 0;\n-  }\n \n   const uint8_t *p = reinterpret_cast<const uint8_t *>(buf);\n   const uint8_t *e = p + size;"
      },
      {
        "sha": "1be9e8d5b0b41ea458b42bb17f2e3a18eefac315",
        "filename": "port/port_win.cc",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/port_win.cc?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -32,6 +32,7 @@\n \n #include <windows.h>\n #include <cassert>\n+#include <intrin.h>\n \n namespace leveldb {\n namespace port {\n@@ -143,5 +144,15 @@ void AtomicPointer::NoBarrier_Store(void* v) {\n   rep_ = v;\n }\n \n+bool HasAcceleratedCRC32C() {\n+#if defined(__x86_64__) || defined(__i386__)\n+  int cpu_info[4];\n+  __cpuid(cpu_info, 1);\n+  return (cpu_info[2] & (1 << 20)) != 0;\n+#else\n+  return false;\n+#endif\n+}\n+\n }\n }"
      },
      {
        "sha": "e8bf46ef27cd689912cb910e32385bfc55edf3b5",
        "filename": "port/port_win.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_win.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/port/port_win.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/port/port_win.h?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -168,6 +168,7 @@ inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {\n   return false;\n }\n \n+bool HasAcceleratedCRC32C();\n uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size);\n \n }"
      },
      {
        "sha": "b3f40eeeed45f5b2f1b6fafdceb0bddb5691e2e1",
        "filename": "util/crc32c.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/util/crc32c.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/util/crc32c.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/crc32c.cc?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -288,6 +288,10 @@ static inline uint32_t LE_LOAD32(const uint8_t *p) {\n // Determine if the CPU running this program can accelerate the CRC32C\n // calculation.\n static bool CanAccelerateCRC32C() {\n+  if (!port::HasAcceleratedCRC32C())\n+    return false;\n+\n+  // Double-check that the accelerated implementation functions correctly.\n   // port::AcceleretedCRC32C returns zero when unable to accelerate.\n   static const char kTestCRCBuffer[] = \"TestCRCBuffer\";\n   static const char kBufSize = sizeof(kTestCRCBuffer) - 1;"
      },
      {
        "sha": "db6160c8f19929e9517e371ba2295e0d0e38e421",
        "filename": "util/logging.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/util/logging.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b13a68e129f51b664e33b1894e33ebb7b94cdcc7/util/logging.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/logging.cc?ref=b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "patch": "@@ -49,7 +49,7 @@ bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {\n   uint64_t v = 0;\n   int digits = 0;\n   while (!in->empty()) {\n-    char c = (*in)[0];\n+    unsigned char c = (*in)[0];\n     if (c >= '0' && c <= '9') {\n       ++digits;\n       const int delta = (c - '0');"
      }
    ]
  },
  {
    "sha": "47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2YzZThjNzRkMzkwMTM5OTY3Y2M0MGUzN2NmNWI0MzNmMGIwZjlm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-01T19:40:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-01T19:40:42Z"
      },
      "message": "Update LevelDB with latest Bitcoin-specific patches",
      "tree": {
        "sha": "f43c285be47ec5bc66a25a7fa1c072d2cd32dc97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f43c285be47ec5bc66a25a7fa1c072d2cd32dc97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f66c59650527022b4f7abd98ff0a1a4e4741bd34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66c59650527022b4f7abd98ff0a1a4e4741bd34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66c59650527022b4f7abd98ff0a1a4e4741bd34"
      },
      {
        "sha": "b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b13a68e129f51b664e33b1894e33ebb7b94cdcc7"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 63,
      "deletions": 44
    },
    "files": [
      {
        "sha": "287afdbdcb90c7f8ba1dacd3a842660b22bdab0b",
        "filename": "src/leveldb/db/memtable.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/db/memtable.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/db/memtable.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/memtable.cc?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -101,7 +101,7 @@ void MemTable::Add(SequenceNumber s, ValueType type,\n   p += 8;\n   p = EncodeVarint32(p, val_size);\n   memcpy(p, value.data(), val_size);\n-  assert((p + val_size) - buf == encoded_len);\n+  assert(p + val_size == buf + encoded_len);\n   table_.Insert(buf);\n }\n "
      },
      {
        "sha": "2cb6d80ed3cf9a14f48dcbd80fc430efaaca3cc0",
        "filename": "src/leveldb/db/version_set.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/db/version_set.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/db/version_set.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/version_set.cc?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -20,7 +20,7 @@\n \n namespace leveldb {\n \n-static int TargetFileSize(const Options* options) {\n+static size_t TargetFileSize(const Options* options) {\n   return options->max_file_size;\n }\n "
      },
      {
        "sha": "d79a02230d57fe085949936b26b9a7af413e07b8",
        "filename": "src/leveldb/port/atomic_pointer.h",
        "status": "modified",
        "additions": 25,
        "deletions": 22,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/atomic_pointer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/atomic_pointer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/atomic_pointer.h?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -46,6 +46,30 @@\n namespace leveldb {\n namespace port {\n \n+// AtomicPointer based on <cstdatomic> if available\n+#if defined(LEVELDB_ATOMIC_PRESENT)\n+class AtomicPointer {\n+ private:\n+  std::atomic<void*> rep_;\n+ public:\n+  AtomicPointer() { }\n+  explicit AtomicPointer(void* v) : rep_(v) { }\n+  inline void* Acquire_Load() const {\n+    return rep_.load(std::memory_order_acquire);\n+  }\n+  inline void Release_Store(void* v) {\n+    rep_.store(v, std::memory_order_release);\n+  }\n+  inline void* NoBarrier_Load() const {\n+    return rep_.load(std::memory_order_relaxed);\n+  }\n+  inline void NoBarrier_Store(void* v) {\n+    rep_.store(v, std::memory_order_relaxed);\n+  }\n+};\n+\n+#else\n+\n // Define MemoryBarrier() if available\n // Windows on x86\n #if defined(OS_WIN) && defined(COMPILER_MSVC) && defined(ARCH_CPU_X86_FAMILY)\n@@ -142,28 +166,6 @@ class AtomicPointer {\n   }\n };\n \n-// AtomicPointer based on <cstdatomic>\n-#elif defined(LEVELDB_ATOMIC_PRESENT)\n-class AtomicPointer {\n- private:\n-  std::atomic<void*> rep_;\n- public:\n-  AtomicPointer() { }\n-  explicit AtomicPointer(void* v) : rep_(v) { }\n-  inline void* Acquire_Load() const {\n-    return rep_.load(std::memory_order_acquire);\n-  }\n-  inline void Release_Store(void* v) {\n-    rep_.store(v, std::memory_order_release);\n-  }\n-  inline void* NoBarrier_Load() const {\n-    return rep_.load(std::memory_order_relaxed);\n-  }\n-  inline void NoBarrier_Store(void* v) {\n-    rep_.store(v, std::memory_order_relaxed);\n-  }\n-};\n-\n // Atomic pointer based on sparc memory barriers\n #elif defined(__sparcv9) && defined(__GNUC__)\n class AtomicPointer {\n@@ -228,6 +230,7 @@ class AtomicPointer {\n #else\n #error Please implement AtomicPointer for this platform.\n \n+#endif\n #endif\n \n #undef LEVELDB_HAVE_MEMORY_BARRIER"
      },
      {
        "sha": "5b1d027de556eb6b308dee1ccea88995bcb038d3",
        "filename": "src/leveldb/port/port_example.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_example.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_example.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_example.h?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -129,6 +129,10 @@ extern bool Snappy_Uncompress(const char* input_data, size_t input_length,\n // The concatenation of all \"data[0,n-1]\" fragments is the heap profile.\n extern bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg);\n \n+// Determine whether a working accelerated crc32 implementation exists\n+// Returns true if AcceleratedCRC32C is safe to call\n+bool HasAcceleratedCRC32C();\n+\n // Extend the CRC to include the first n bytes of buf.\n //\n // Returns zero if the CRC cannot be extended using acceleration, else returns"
      },
      {
        "sha": "ec39e921957f6507e3eb5f5ed5b6e15fea69e527",
        "filename": "src/leveldb/port/port_posix.cc",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_posix.cc?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -8,6 +8,10 @@\n #include <stdio.h>\n #include <string.h>\n \n+#if (defined(__x86_64__) || defined(__i386__)) && defined(__GNUC__)\n+#include <cpuid.h>\n+#endif\n+\n namespace leveldb {\n namespace port {\n \n@@ -49,5 +53,15 @@ void InitOnce(OnceType* once, void (*initializer)()) {\n   PthreadCall(\"once\", pthread_once(once, initializer));\n }\n \n+bool HasAcceleratedCRC32C() {\n+#if (defined(__x86_64__) || defined(__i386__)) && defined(__GNUC__)\n+  unsigned int eax, ebx, ecx, edx;\n+  __get_cpuid(1, &eax, &ebx, &ecx, &edx);\n+  return (ecx & (1 << 20)) != 0;\n+#else\n+  return false;\n+#endif\n+}\n+\n }  // namespace port\n }  // namespace leveldb"
      },
      {
        "sha": "d85fa5d63fe0fc593cb2c9c12471d884622189b6",
        "filename": "src/leveldb/port/port_posix.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_posix.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_posix.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_posix.h?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -152,6 +152,7 @@ inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {\n   return false;\n }\n \n+bool HasAcceleratedCRC32C();\n uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size);\n \n } // namespace port"
      },
      {
        "sha": "2d49c21dd8b0eb08fa0fd33411c50f2d277c94d6",
        "filename": "src/leveldb/port/port_posix_sse.cc",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_posix_sse.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_posix_sse.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_posix_sse.cc?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -19,7 +19,6 @@\n #include <intrin.h>\n #elif defined(__GNUC__) && defined(__SSE4_2__)\n #include <nmmintrin.h>\n-#include <cpuid.h>\n #endif\n \n #endif  // defined(LEVELDB_PLATFORM_POSIX_SSE)\n@@ -48,20 +47,6 @@ static inline uint64_t LE_LOAD64(const uint8_t *p) {\n \n #endif  // defined(_M_X64) || defined(__x86_64__)\n \n-static inline bool HaveSSE42() {\n-#if defined(_MSC_VER)\n-  int cpu_info[4];\n-  __cpuid(cpu_info, 1);\n-  return (cpu_info[2] & (1 << 20)) != 0;\n-#elif defined(__GNUC__)\n-  unsigned int eax, ebx, ecx, edx;\n-  __get_cpuid(1, &eax, &ebx, &ecx, &edx);\n-  return (ecx & (1 << 20)) != 0;\n-#else\n-  return false;\n-#endif\n-}\n-\n #endif  // defined(LEVELDB_PLATFORM_POSIX_SSE)\n \n // For further improvements see Intel publication at:\n@@ -70,10 +55,6 @@ uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size) {\n #if !defined(LEVELDB_PLATFORM_POSIX_SSE)\n   return 0;\n #else\n-  static bool have = HaveSSE42();\n-  if (!have) {\n-    return 0;\n-  }\n \n   const uint8_t *p = reinterpret_cast<const uint8_t *>(buf);\n   const uint8_t *e = p + size;"
      },
      {
        "sha": "1be9e8d5b0b41ea458b42bb17f2e3a18eefac315",
        "filename": "src/leveldb/port/port_win.cc",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_win.cc?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -32,6 +32,7 @@\n \n #include <windows.h>\n #include <cassert>\n+#include <intrin.h>\n \n namespace leveldb {\n namespace port {\n@@ -143,5 +144,15 @@ void AtomicPointer::NoBarrier_Store(void* v) {\n   rep_ = v;\n }\n \n+bool HasAcceleratedCRC32C() {\n+#if defined(__x86_64__) || defined(__i386__)\n+  int cpu_info[4];\n+  __cpuid(cpu_info, 1);\n+  return (cpu_info[2] & (1 << 20)) != 0;\n+#else\n+  return false;\n+#endif\n+}\n+\n }\n }"
      },
      {
        "sha": "e8bf46ef27cd689912cb910e32385bfc55edf3b5",
        "filename": "src/leveldb/port/port_win.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_win.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/port/port_win.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_win.h?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -168,6 +168,7 @@ inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {\n   return false;\n }\n \n+bool HasAcceleratedCRC32C();\n uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size);\n \n }"
      },
      {
        "sha": "b3f40eeeed45f5b2f1b6fafdceb0bddb5691e2e1",
        "filename": "src/leveldb/util/crc32c.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/util/crc32c.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/util/crc32c.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/crc32c.cc?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -288,6 +288,10 @@ static inline uint32_t LE_LOAD32(const uint8_t *p) {\n // Determine if the CPU running this program can accelerate the CRC32C\n // calculation.\n static bool CanAccelerateCRC32C() {\n+  if (!port::HasAcceleratedCRC32C())\n+    return false;\n+\n+  // Double-check that the accelerated implementation functions correctly.\n   // port::AcceleretedCRC32C returns zero when unable to accelerate.\n   static const char kTestCRCBuffer[] = \"TestCRCBuffer\";\n   static const char kBufSize = sizeof(kTestCRCBuffer) - 1;"
      },
      {
        "sha": "db6160c8f19929e9517e371ba2295e0d0e38e421",
        "filename": "src/leveldb/util/logging.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/util/logging.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47f3e8c74d390139967cc40e37cf5b433f0b0f9f/src/leveldb/util/logging.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/logging.cc?ref=47f3e8c74d390139967cc40e37cf5b433f0b0f9f",
        "patch": "@@ -49,7 +49,7 @@ bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {\n   uint64_t v = 0;\n   int digits = 0;\n   while (!in->empty()) {\n-    char c = (*in)[0];\n+    unsigned char c = (*in)[0];\n     if (c >= '0' && c <= '9') {\n       ++digits;\n       const int delta = (c - '0');"
      }
    ]
  }
]