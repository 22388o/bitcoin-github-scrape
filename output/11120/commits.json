[
  {
    "sha": "453c28751babe2c0245a5b385b828d2d5c0e5865",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTNjMjg3NTFiYWJlMmMwMjQ1YTViMzg1YjgyOGQyZDVjMGU1ODY1",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-08-23T15:39:43Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-04-16T16:58:06Z"
      },
      "message": "verifytxoutproof returns object including blockhash",
      "tree": {
        "sha": "19642079ae131115d3edac067b94b35791628398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19642079ae131115d3edac067b94b35791628398"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/453c28751babe2c0245a5b385b828d2d5c0e5865",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453c28751babe2c0245a5b385b828d2d5c0e5865",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/453c28751babe2c0245a5b385b828d2d5c0e5865",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453c28751babe2c0245a5b385b828d2d5c0e5865/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf76c23fbfc8500fa494f8cef8068a67a1388c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf76c23fbfc8500fa494f8cef8068a67a1388c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf76c23fbfc8500fa494f8cef8068a67a1388c3"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 39,
      "deletions": 19
    },
    "files": [
      {
        "sha": "f27818dc3e08bd50580c354dd102fb0949729e29",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453c28751babe2c0245a5b385b828d2d5c0e5865/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453c28751babe2c0245a5b385b828d2d5c0e5865/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=453c28751babe2c0245a5b385b828d2d5c0e5865",
        "patch": "@@ -285,24 +285,35 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"verifytxoutproof \\\"proof\\\"\\n\"\n-            \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n-            \"and throwing an RPC error if the block is not in our best chain\\n\"\n+            \"\\nVerifies that a proof points to a transaction in a block, returning the block hash and transactions it commits to,\\n\"\n+            \"throwing an RPC error if the block is not in our best chain\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"proof\\\"    (string, required) The hex-encoded proof generated by gettxoutproof\\n\"\n             \"\\nResult:\\n\"\n-            \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\\n\"\n+            \"{\\n\"\n+            \"    \\\"blockhash\\\"   (string) The blockhash the included proof commits to\\n\"\n+            \"    [\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to\\n\"\n+            \"}\\n\"\n+            \"\\nResult: (DEPRECATED. To see this result, please start bitcoind with -deprecatedrpc=verifytxoutproof. This option will be removed in v0.18. Empty if proof is invalid)\\n\"\n+            \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to\\n\"\n         );\n \n     CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n-    UniValue res(UniValue::VARR);\n+    UniValue res(UniValue::VOBJ);\n+    UniValue txids(UniValue::VARR);\n \n     std::vector<uint256> vMatch;\n     std::vector<unsigned int> vIndex;\n-    if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) != merkleBlock.header.hashMerkleRoot)\n-        return res;\n+    if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) != merkleBlock.header.hashMerkleRoot) {\n+        if (IsDeprecatedRPCEnabled(\"verifytxoutproof\")) {\n+            return txids;\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"No valid transaction commitments are found in the proof\");\n+        }\n+    }\n \n     LOCK(cs_main);\n \n@@ -311,9 +322,17 @@ UniValue verifytxoutproof(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }\n \n-    for (const uint256& hash : vMatch)\n-        res.push_back(hash.GetHex());\n-    return res;\n+    for (const uint256& hash : vMatch) {\n+        txids.push_back(hash.GetHex());\n+    }\n+\n+    if (IsDeprecatedRPCEnabled(\"verifytxoutproof\")) {\n+        return txids;\n+    } else {\n+        res.push_back(Pair(\"blockhash\", merkleBlock.header.GetHash().GetHex()));\n+        res.push_back(Pair(\"txids\", txids));\n+        return res;\n+    }\n }\n \n UniValue createrawtransaction(const JSONRPCRequest& request)"
      },
      {
        "sha": "cc29c86fce5f4d7f2af0cbecaeb3ecc33aee6f29",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453c28751babe2c0245a5b385b828d2d5c0e5865/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453c28751babe2c0245a5b385b828d2d5c0e5865/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=453c28751babe2c0245a5b385b828d2d5c0e5865",
        "patch": "@@ -40,18 +40,17 @@ def run_test(self):\n         # This will raise an exception because the transaction is not yet in a block\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n-        self.nodes[0].generate(1)\n-        blockhash = self.nodes[0].getblockhash(chain_height + 1)\n+        blockhash = self.nodes[0].generate(1)[0]\n         self.sync_all()\n \n         txlist = []\n         blocktxn = self.nodes[0].getblock(blockhash, True)[\"tx\"]\n         txlist.append(blocktxn[1])\n         txlist.append(blocktxn[2])\n \n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1])), [txid1])\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2])), txlist)\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2], blockhash)), txlist)\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1])), {\"txids\":[txid1], \"blockhash\":blockhash})\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2])), {\"txids\":txlist, \"blockhash\":blockhash})\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2], blockhash)), {\"txids\":txlist, \"blockhash\":blockhash})\n \n         txin_spent = self.nodes[1].listunspent(1).pop()\n         tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n@@ -65,18 +64,20 @@ def run_test(self):\n         # We can't find the block from a fully-spent tx\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), {\"txids\":[txid_spent], \"blockhash\":blockhash})\n         # We can't get the proof if we specify a non-existent block\n         assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), {\"txids\":[txid_unspent], \"blockhash\":blockhash})\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter.\n-        assert_equal(sorted(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2]))), sorted(txlist))\n-        assert_equal(sorted(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid2, txid1]))), sorted(txlist))\n+        assert_equal(sorted(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2]))[\"txids\"]), sorted(txlist))\n+        assert_equal(sorted(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid2, txid1]))[\"txids\"]), sorted(txlist))\n         # We can always get a proof if we have a -txindex\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), {\"txids\":[txid_spent], \"blockhash\":blockhash})\n         # We can't get a proof if we specify transactions from different blocks\n         assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n+        # Invalid proof throws an error\n+        assert_raises_rpc_error(-8, \"No valid transaction commitments are found in the proof\", self.nodes[2].verifytxoutproof, \"0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\")\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "674b877fadd0d5641fed1f63c9dfcbc018e8f419",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzRiODc3ZmFkZDBkNTY0MWZlZDFmNjNjOWRmY2JjMDE4ZThmNDE5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-03-06T18:35:02Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-04-16T16:58:41Z"
      },
      "message": "add release notes for verifytxoutproof api break",
      "tree": {
        "sha": "013abfbd67c0d9d0da8989ca7c2eba8837a4da64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/013abfbd67c0d9d0da8989ca7c2eba8837a4da64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/674b877fadd0d5641fed1f63c9dfcbc018e8f419",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/674b877fadd0d5641fed1f63c9dfcbc018e8f419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/674b877fadd0d5641fed1f63c9dfcbc018e8f419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/674b877fadd0d5641fed1f63c9dfcbc018e8f419/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "453c28751babe2c0245a5b385b828d2d5c0e5865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453c28751babe2c0245a5b385b828d2d5c0e5865",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/453c28751babe2c0245a5b385b828d2d5c0e5865"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1c5f09c448d8f1319d82c1bc45c20c4e727dc850",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/674b877fadd0d5641fed1f63c9dfcbc018e8f419/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/674b877fadd0d5641fed1f63c9dfcbc018e8f419/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=674b877fadd0d5641fed1f63c9dfcbc018e8f419",
        "patch": "@@ -63,8 +63,19 @@ RPC changes\n \n - The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n - The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n+- Wallet `getnewaddress` and `addmultisigaddress` RPC `account` named\n+  parameters have been renamed to `label` with no change in behavior.\n+- Wallet `getlabeladdress`, `getreceivedbylabel`, `listreceivedbylabel`, and\n+  `setlabel` RPCs have been added to replace `getaccountaddress`,\n+  `getreceivedbyaccount`, `listreceivedbyaccount`, and `setaccount` RPCs,\n+  which are now deprecated. There is no change in behavior between the\n+  new RPCs and deprecated RPCs.\n+- Wallet `listreceivedbylabel`, `listreceivedbyaccount` and `listunspent` RPCs\n+  add `label` fields to returned JSON objects that previously only had\n+  `account` fields.\n - `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n - The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n+- The `verifytxoutproof` rpc will output an object instead of an array and error with invalid proof unless `-deprecatedrpc=verifytxoutproof` is set.\n \n External wallet files\n ---------------------"
      }
    ]
  }
]