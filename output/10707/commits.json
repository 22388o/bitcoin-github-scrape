[
  {
    "sha": "439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzljNGU4YWQ1ODcxZjU5ZDg3YWUyYWI3N2ZlMDFhYTZmZTQxNDE0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-29T17:57:33Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-17T14:52:14Z"
      },
      "message": "Improve api to estimatesmartfee\n\nChange parameter for conservative estimates to be an estimate_mode string.\nChange to never return a -1 for failure but to instead omit the feerate and\nreturn an error string.  Throw JSONRPC error on invalid nblocks parameter.",
      "tree": {
        "sha": "f2233305929505927b54e090be38488417df8b5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2233305929505927b54e090be38488417df8b5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91edda8f3c81ba5a69f44485f20d74f85ec9cee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91edda8f3c81ba5a69f44485f20d74f85ec9cee1"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 43,
      "deletions": 27
    },
    "files": [
      {
        "sha": "73cc0b4a5e7bceadaac396a9ae0dbe7b3d3e48c5",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "patch": "@@ -839,20 +839,20 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n     EstimationResult tempResult;\n \n     // Return failure if trying to analyze a target we're not tracking\n-    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n-        return CFeeRate(0);\n+    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms()) {\n+        return CFeeRate(0);  // error conditon\n+    }\n \n     // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget == 1)\n-        confTarget = 2;\n+    if (confTarget == 1) confTarget = 2;\n \n     unsigned int maxUsableEstimate = MaxUsableEstimate();\n-    if (maxUsableEstimate <= 1)\n-        return CFeeRate(0);\n-\n     if ((unsigned int)confTarget > maxUsableEstimate) {\n         confTarget = maxUsableEstimate;\n     }\n+    if (feeCalc) feeCalc->returnedTarget = confTarget;\n+\n+    if (confTarget <= 1) return CFeeRate(0); // error conditon\n \n     assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n     /** true is passed to estimateCombined fee for target/2 and target so\n@@ -899,10 +899,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n         }\n     }\n \n-    if (feeCalc) feeCalc->returnedTarget = confTarget;\n-\n-    if (median < 0)\n-        return CFeeRate(0);\n+    if (median < 0) return CFeeRate(0); // error conditon\n \n     return CFeeRate(median);\n }"
      },
      {
        "sha": "1ab195612427b6e103df94ff502145f8d4c0feee",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "patch": "@@ -114,7 +114,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n-    { \"estimatesmartfee\", 1, \"conservative\" },\n     { \"estimaterawfee\", 0, \"nblocks\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },"
      },
      {
        "sha": "caad788591fbbf30a0bbc56d858564e7ea3676e6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 15,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "patch": "@@ -806,42 +806,62 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimatesmartfee nblocks (conservative)\\n\"\n+            \"estimatesmartfee nblocks (\\\"estimate_mode\\\")\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks       (numeric)\\n\"\n-            \"2. conservative  (bool, optional, default=true) Whether to return a more conservative estimate which\\n\"\n-            \"                 also satisfies a longer history. A conservative estimate potentially returns a higher\\n\"\n-            \"                 feerate and is more likely to be sufficient for the desired target, but is not as\\n\"\n-            \"                 responsive to short term drops in the prevailing fee market\\n\"\n+            \"1. nblocks         (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n+            \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n+            \"                   a longer history. A conservative estimate potentially returns a\\n\"\n+            \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n+            \"                   target, but is not as responsive to short term drops in the\\n\"\n+            \"                   prevailing fee market.  Must be one of:\\n\"\n+            \"       \\\"UNSET\\\" (defaults to CONSERVATIVE)\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n             \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"The request target will be clamped between 2 and the highest target\\n\"\n+            \"fee estimation is able to return based on how long it has been running.\\n\"\n+            \"An error is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate for any number of blocks.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM});\n-\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n+    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n+    }\n     bool conservative = true;\n     if (request.params.size() > 1 && !request.params[1].isNull()) {\n-        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n-        conservative = request.params[1].get_bool();\n+        FeeEstimateMode fee_mode;\n+        if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+        if (fee_mode == FeeEstimateMode::ECONOMICAL) conservative = false;\n     }\n \n     UniValue result(UniValue::VOBJ);\n+    UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n-    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    if (feeRate != CFeeRate(0)) {\n+        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+    } else {\n+        errors.push_back(\"Insufficient data or no feerate found\");\n+        result.push_back(Pair(\"errors\", errors));\n+    }\n     result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n     return result;\n }\n@@ -889,7 +909,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n             );\n \n-    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM, UniValue::VNUM}, true);\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n@@ -963,7 +983,7 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"conservative\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"estimate_mode\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n };"
      }
    ]
  },
  {
    "sha": "06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmJjZGI4ZGE2NDUwMmE2NGRmMDNmM2M4OWZiYzZjY2I3MmNkMzQ5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-12T19:10:16Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-17T14:52:14Z"
      },
      "message": "Convert named argument from nblocks to conf_target\n\nin estimatesmartfee and estimaterawfee.  Also reuse existing bounds checking.",
      "tree": {
        "sha": "ae6f407891827b825df577d33a6c0bb1901fbbb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae6f407891827b825df577d33a6c0bb1901fbbb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06bcdb8da64502a64df03f3c89fbc6ccb72cd349/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/439c4e8ad5871f59d87ae2ab77fe01aa6fe41414"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 15,
      "deletions": 21
    },
    "files": [
      {
        "sha": "4fd632dfc5514496f50f0b860dacfa81c9ea653e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 21,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06bcdb8da64502a64df03f3c89fbc6ccb72cd349/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06bcdb8da64502a64df03f3c89fbc6ccb72cd349/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=06bcdb8da64502a64df03f3c89fbc6ccb72cd349",
        "patch": "@@ -806,13 +806,13 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimatesmartfee nblocks (\\\"estimate_mode\\\")\\n\"\n+            \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n+            \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks         (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n             \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n             \"                   a longer history. A conservative estimate potentially returns a\\n\"\n@@ -839,10 +839,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n-    }\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     bool conservative = true;\n     if (request.params.size() > 1 && !request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n@@ -855,7 +852,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n         result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n     } else {\n@@ -870,18 +867,18 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"estimaterawfee nblocks (threshold)\\n\"\n+            \"estimaterawfee conf_target (threshold)\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n             \"         implementation of fee estimation. The parameters it can be called with\\n\"\n             \"         and the results it returns will change if the internal implementation changes.\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n-            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n+            \"defined in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n             \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n-            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.  Default: 0.95\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -911,10 +908,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1 || (unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid nblocks\");\n-    }\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();\n@@ -930,9 +924,9 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         EstimationResult buckets;\n \n         // Only output results for horizons which track the target\n-        if ((unsigned int)nBlocks > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+        if (conf_target > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n \n-        feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+        feeRate = ::feeEstimator.estimateRawFee(conf_target, threshold, horizon, &buckets);\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n@@ -983,9 +977,9 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n \n     { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\", \"estimate_mode\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"conf_target\", \"estimate_mode\"} },\n \n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"nblocks\", \"threshold\"} },\n+    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         true,  {\"conf_target\", \"threshold\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  }
]