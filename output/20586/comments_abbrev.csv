hebasto,2020-12-06 22:03:38,cc @fanquake @MarcoFalke @vasild ,https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-739571963,739571963,
DrahtBot,2020-12-06 22:48:40,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-739578343,739578343,
laanwj,2020-12-07 12:52:38,"I'm a bit divided on whether building on every platform/compiler combination 'with -Werror' is actually a goal of the project. I mean, I think this is impossible, and will result in a lot of warning fixing for the sake of warning fixing.\n\nIn general Werror is a curse.\n",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-739899687,739899687,
MarcoFalke,2020-12-07 13:06:41,"Tend to agree with @laanwj, especially if the workarounds will make already hard to understand files like fs.cpp even more verbose. ",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-739906859,739906859,
hebasto,2020-12-07 13:11:14,"> I'm a bit divided on whether building on every platform/compiler combination 'with -Werror' is actually a goal of the project. I mean, I think this is impossible, and will result in a lot of warning fixing for the sake of warning fixing.\n> \n> In general Werror is a curse.\n\n> Tend to agree with @laanwj, especially if the workarounds will make already hard to understand files like fs.cpp e",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-739909187,739909187,
DrahtBot,2020-12-09 16:09:33,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @practicalswift has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-741874606,741874606,
practicalswift,2020-12-09 16:22:01,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-741882902,741882902,
hebasto,2020-12-10 12:06:56,"Updated 06ff47560ecb1d6a80e9fbd2f169f6ed8f31c464 -> 926f6d82a31b2d2c82b830b2b672fa38890b8590 ([pr20586.01](https://github.com/hebasto/bitcoin/commits/pr20586.01) -> [pr20586.02](https://github.com/hebasto/bitcoin/commits/pr20586.02), [diff](https://github.com/hebasto/bitcoin/compare/pr20586.01..pr20586.02)).\n\n@MarcoFalke \n> Tend to agree with @laanwj, especially if the workarounds will make ",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-742480707,742480707,
hebasto,2020-12-19 17:10:55,"Reverted back 06ff47560ecb1d6a80e9fbd2f169f6ed8f31c464 <- 926f6d82a31b2d2c82b830b2b672fa38890b8590 ([pr20586.01](https://github.com/hebasto/bitcoin/commits/pr20586.01) <- [pr20586.02](https://github.com/hebasto/bitcoin/commits/pr20586.02)) as was [requested](https://github.com/bitcoin/bitcoin/pull/20586#discussion_r542049306) by @luke-jr.\n\nThis variant has been already [ACKed](https://github.c",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-748499647,748499647,
practicalswift,2021-03-06 07:37:40,"cr ACK 06ff47560ecb1d6a80e9fbd2f169f6ed8f31c464: patch looks correct\n\nFWIW, having this in `master` would have prevented the issue #21355 pre-merge :)",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-791890094,791890094,
hebasto,2021-04-13 07:25:42,"Updated 06ff47560ecb1d6a80e9fbd2f169f6ed8f31c464 -> b367745cfe19f6de3f44b3adc90fa08e36e44bb6 ([pr20586.01](https://github.com/hebasto/bitcoin/commits/pr20586.01) -> [pr20586.03](https://github.com/hebasto/bitcoin/commits/pr20586.03)):\n- rebased due to the conflict with #21467 \n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/20586#discussion_r588848569) ",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-818508349,818508349,
practicalswift,2021-06-06 11:09:45,cr ACK b367745cfe19f6de3f44b3adc90fa08e36e44bb6: patch looks correct,https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-855381210,855381210,
hebasto,2021-06-17 16:02:56,"@laanwj @MarcoFalke @luke-jr \n\nDo you mind having another look at this PR?",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-863365839,863365839,
laanwj,2021-08-27 06:20:40,"I'm not a big fan in general of pragmas or fixing warnings for the sake of fixing warnings but this seems minimal enough.\nCode review ACK b367745cfe19f6de3f44b3adc90fa08e36e44bb6",https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-906956029,906956029,
vasild,2020-12-07 09:53:38,This will disable `-Wswitch` for any GCC compiler (even latest on Linux). Shouldn't we restrict that somehow? Maybe check if `WIN32` is defined or for a specific GCC version?,https://github.com/bitcoin/bitcoin/pull/20586#discussion_r537370851,537370851,src/fs.cpp
vasild,2020-12-07 09:55:54,"This is good and will work fine.\n\nI am just curious, does that mingw bug 306 manifest if `assert(false)` is replaced with `abort()`?",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r537372438,537372438,configure.ac
hebasto,2020-12-07 12:21:08,https://github.com/bitcoin/bitcoin/blob/06ff47560ecb1d6a80e9fbd2f169f6ed8f31c464/src/fs.cpp#L147-L148,https://github.com/bitcoin/bitcoin/pull/20586#discussion_r537463830,537463830,src/fs.cpp
hebasto,2020-12-07 12:25:32,"Did not dive in details, but it seems to be dealing with an internal attribute of noreturn.",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r537466385,537466385,configure.ac
vasild,2020-12-07 12:57:37,"Oh, it is already inside `#ifdef WIN32`, sorry for the noise.",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r537486071,537486071,src/fs.cpp
vasild,2020-12-10 13:08:44,`std::ios_base::ate` and friends are defined as `unsigned int` on my platform. What is the warning that this tries to fix?,https://github.com/bitcoin/bitcoin/pull/20586#discussion_r540154653,540154653,src/fs.cpp
hebasto,2020-12-10 13:47:42,"> `std::ios_base::ate` and friends are defined as `unsigned int` on my platform.\n\nhttps://github.com/gcc-mirror/gcc/blob/releases/gcc-7.3.0/libstdc%2B%2B-v3/include/bits/ios_base.h#L111-L122\n\n> What is the warning that this tries to fix?\n\nhttps://gcc.gnu.org/onlinedocs/gcc-9.3.0/gcc/Warning-Options.html#Warning-Options:\n> `-Wswitch`\n> ... `case` labels outside the enumeration range",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r540181319,540181319,src/fs.cpp
vasild,2020-12-10 14:21:28,"Ok, we are fine because if some of the case values is out of the range of `int`, then we would get a warning:\n```cpp\nvoid f(unsigned int x)\n{\n    const unsigned int y = 3000000000U;\n\n    switch (static_cast<int>(x)) { \n    case y:\n        std::cout << ""foo\n"";\n        break;\n    } \n}\n```\n\n```\nerror: case value evaluates to 3000000000, which cannot be narrowed to type ",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r540206459,540206459,src/fs.cpp
luke-jr,2020-12-14 01:03:48,"NACK, the standard doesn't guarantee this fits in an `int`...\n\nCan you use a pragma to disable the warning here?",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r542049306,542049306,src/fs.cpp
hebasto,2020-12-19 17:11:26,[Done](https://github.com/bitcoin/bitcoin/pull/20586#issuecomment-748499647).,https://github.com/bitcoin/bitcoin/pull/20586#discussion_r546260751,546260751,src/fs.cpp
MarcoFalke,2021-03-06 07:40:14,"Is this commit "" Fix Windows build with --enable-werror on Ubuntu Bionic (gcc 7.5) "" still needed?\n\nWe no longer use mingw on bionic (only focal)",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r588848569,588848569,src/fs.cpp
hebasto,2021-03-06 07:53:17,"~Right. #21036 made it possible.~\n\n~Going to rebase the pr and remove that commit.~",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r588849694,588849694,src/fs.cpp
hebasto,2021-03-06 08:20:58,"@MarcoFalke It is still required to prevent `-Werror=switch` warnings on Focal.\n\nTherefore, technically, no changes are required in the patch.",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r588852381,588852381,src/fs.cpp
MarcoFalke,2021-06-23 08:41:48,Will this be needed after the boost::fs removal?,https://github.com/bitcoin/bitcoin/pull/20586#discussion_r656885645,656885645,src/fs.cpp
hebasto,2021-06-23 09:19:22,"I think no, as this bunch of code should go: https://github.com/bitcoin/bitcoin/blob/d6e0d78c31557660274ef53cac912c468eecbe2d/src/fs.h#L66-L69",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r656915219,656915219,src/fs.cpp
laanwj,2021-08-27 06:18:02,"I was about to ask this, but yes, it is already a (temporary, I guess) WIN32-specific workaround.",https://github.com/bitcoin/bitcoin/pull/20586#discussion_r697180299,697180299,src/fs.cpp
