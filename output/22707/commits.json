[
  {
    "sha": "86dbd54ae8a8f9c693c0ea67114bbff24a0754df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmRiZDU0YWU4YThmOWM2OTNjMGVhNjcxMTRiYmZmMjRhMDc1NGRm",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-08-16T12:56:28Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-08-16T12:56:28Z"
      },
      "message": "test: improve mempool_updatefrom efficiency by using getmempoolentry for specific txns",
      "tree": {
        "sha": "4f9360913e5d36dc881845621222a52ce7e43f4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f9360913e5d36dc881845621222a52ce7e43f4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86dbd54ae8a8f9c693c0ea67114bbff24a0754df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmEaYHwACgkQc3/VzfHR\nRrkInRAAovF4Jw2NT0VAbK6SjkRnfAJtQVxVc+bxBsMxQILVjxY/984QEPkHIQJA\nUH26Wso5HgclP0MpLPuK5QcnWU+9kGT3yk5zwuonZ0eJOvPYlVwwqPW5VF8s/L8K\nGRpnzHzEJyC7k2F0G8zFsrEYPekEF2BLSziVIVPyimu48PhU/JrkzOzOLGJ2cKmP\nG+cGrSfL5KVKUbWjDG+cXM93oEOUoK1TZ6yp2iHz5Myd8VzGXMXPjsTrSKRz9U3D\nw/BwyHz2M1N9/cP5et9fodiNwonqwgjQW26Z7JTAESI2zg4EaWIFYTLS5R+mpv03\nXPLM9+r07SJv4ciiQxYKdZq7x6fQI5Dp+GoYH3cAK/Y9K+xWa8ghwvXI/RfRERB6\nJ6ZUOOL9ILqe656c9o1OcVPnGLHmKYk5UdKMgQRbv81N2CkRnrapbZ98g4TPgPu2\n3YYOHesONuWgCZzAzh3gn89ySoo6vfneEp6g4OMCgpP2dueF9+gug5ZXX+cxXvV4\n231boYbj80tzpjuDNTFryHtIKjAX20/zQOsJ0D9zsvfRmk2iLoVON0+9c8G16djx\n84MDCDA29HcBXqscr1W4gyjJ8wmEOgc2hWguqnCB5Rda2kTjC8BdOsOx18TZL20k\nKkrhai253MyHSXGyDPGs0T7MAvZRl40A3Ff2iyc1mbg+fRt45DE=\n=6YpG\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f9360913e5d36dc881845621222a52ce7e43f4a\nparent 803ef70fd9f65ef800567ff9456fac525bc3e3c2\nauthor Michael Dietz <michael.dietz@waya.ai> 1629118588 +0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1629118588 +0500\n\ntest: improve mempool_updatefrom efficiency by using getmempoolentry for specific txns\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86dbd54ae8a8f9c693c0ea67114bbff24a0754df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86dbd54ae8a8f9c693c0ea67114bbff24a0754df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86dbd54ae8a8f9c693c0ea67114bbff24a0754df/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "803ef70fd9f65ef800567ff9456fac525bc3e3c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/803ef70fd9f65ef800567ff9456fac525bc3e3c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/803ef70fd9f65ef800567ff9456fac525bc3e3c2"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4cd11e9d116b805956fe14030d48c7ce3ffaed8e",
        "filename": "test/functional/mempool_updatefromblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86dbd54ae8a8f9c693c0ea67114bbff24a0754df/test/functional/mempool_updatefromblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86dbd54ae8a8f9c693c0ea67114bbff24a0754df/test/functional/mempool_updatefromblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_updatefromblock.py?ref=86dbd54ae8a8f9c693c0ea67114bbff24a0754df",
        "patch": "@@ -86,7 +86,7 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n             signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n             tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n+            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n \n             if tx_count in n_tx_to_mine:\n                 # The created transactions are mined into blocks by batches.\n@@ -109,10 +109,11 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            entry = self.nodes[0].getmempoolentry(tx)\n+            assert_equal(entry['descendantcount'], size - k)\n+            assert_equal(entry['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(entry['ancestorcount'], k + 1)\n+            assert_equal(entry['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n         # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error."
      }
    ]
  },
  {
    "sha": "77349713b189e80f2c140db4df50177353a1cb83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzM0OTcxM2IxODllODBmMmMxNDBkYjRkZjUwMTc3MzUzYTFjYjgz",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-08-16T13:29:07Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-08-16T13:29:07Z"
      },
      "message": "test: use getmempoolentry instead of getrawmempool in functional tests when appropriate",
      "tree": {
        "sha": "8b21b10191f2f75889bf89f436ee175696763fd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b21b10191f2f75889bf89f436ee175696763fd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77349713b189e80f2c140db4df50177353a1cb83",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmEaaCMACgkQc3/VzfHR\nRrnbkQ//WMNhgiej8OGn5+USEEtoynQYk4nDkrGqVr3aOugytCrh1u/A4i0xgCNE\n3utYVPXQGXHS+RwDgBWPDrat1JMOo8N9xItaVq5B0acoolhunKbi+N6VpFpgVhJ0\n6BazawI/mGpJIxFfQikqWWrWvoKsg9o3cwkV6WPKhEFZnWubbgcMv8JFbxldCAjg\n8gIVDmE6DYXv7Ju1m5a41lnecbW7SLFwSFv/hpgyHrbOf4jARn3zE0yhAE9NcoTp\nL47ObQhNfO/ulHwDtUxzRCFz9GQm+Q/Wl5s3gZZc3uYH3uBTTsFClgJXw/bqTGxI\nsXvwG5A722hh//wfy4/P7yJ3sEZhQzyfhLENUD9IqnPYlMlBbt/XaxGfhn//Juti\ndRC04/f2qIqEtd5SxMtKflaqKCG8+YxxJJiAIu/9PgVz6h+rRurEFXjgFBbSs4O1\nFZzmLQH3IGPYma+w+jdxZx2getTR1xCPlZV9oJLosMkn6PRMCZDTZJvlmcM7d5ko\n7jLPphMsasqyAF44cQxr+0iCHzNgZk3RCrHDM16IYYJLp7KgaAjpr2558iAkRCCq\ne/vV8lV/UGlyiowabEbqfSjRjhSZYtXkAzH8bkl7Z+LN9TIGA9hKipT6s3HVNTha\natNtPw0hJoOwdrIft1e9V97i9h8KmljpJmqSRKJNi/+Fj+p3HUw=\n=gUgA\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b21b10191f2f75889bf89f436ee175696763fd7\nparent 86dbd54ae8a8f9c693c0ea67114bbff24a0754df\nauthor Michael Dietz <michael.dietz@waya.ai> 1629120547 +0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1629120547 +0500\n\ntest: use getmempoolentry instead of getrawmempool in functional tests when appropriate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77349713b189e80f2c140db4df50177353a1cb83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77349713b189e80f2c140db4df50177353a1cb83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77349713b189e80f2c140db4df50177353a1cb83/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86dbd54ae8a8f9c693c0ea67114bbff24a0754df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86dbd54ae8a8f9c693c0ea67114bbff24a0754df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86dbd54ae8a8f9c693c0ea67114bbff24a0754df"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 40,
      "deletions": 44
    },
    "files": [
      {
        "sha": "82752f2d709b5da6539479a500b53e29e53fb53c",
        "filename": "test/functional/mempool_accept_wtxid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_accept_wtxid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_accept_wtxid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept_wtxid.py?ref=77349713b189e80f2c140db4df50177353a1cb83",
        "patch": "@@ -90,7 +90,7 @@ def run_test(self):\n \n         self.log.info(\"Submit child_one to the mempool\")\n         txid_submitted = node.sendrawtransaction(child_one.serialize().hex())\n-        assert_equal(node.getrawmempool(True)[txid_submitted]['wtxid'], child_one_wtxid)\n+        assert_equal(node.getmempoolentry(txid_submitted)['wtxid'], child_one_wtxid)\n \n         peer_wtxid_relay.wait_for_broadcast([child_one_wtxid])\n         assert_equal(node.getmempoolinfo()[\"unbroadcastcount\"], 0)"
      },
      {
        "sha": "9a50647a0100582e7f523312de9aa3b50221721c",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=77349713b189e80f2c140db4df50177353a1cb83",
        "patch": "@@ -65,8 +65,7 @@ def run_test(self):\n         self.log.info(\"Add unbroadcasted tx to mempool on new node and shutdown\")\n         unbroadcasted_tx_hash = new_wallet.send_self_transfer(from_node=new_node)['txid']\n         assert unbroadcasted_tx_hash in new_node.getrawmempool()\n-        mempool = new_node.getrawmempool(True)\n-        assert mempool[unbroadcasted_tx_hash]['unbroadcast']\n+        assert new_node.getmempoolentry(unbroadcasted_tx_hash)['unbroadcast']\n         self.stop_node(1)\n \n         self.log.info(\"Move mempool.dat from new to old node\")"
      },
      {
        "sha": "a54c1d0457e9f0e1f574312b472256dc693125a1",
        "filename": "test/functional/mempool_package_limits.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_package_limits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_package_limits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_limits.py?ref=77349713b189e80f2c140db4df50177353a1cb83",
        "patch": "@@ -74,7 +74,7 @@ def test_chain_limits_helper(self, mempool_count, package_count):\n             txid = tx.rehash()\n             if i < mempool_count:\n                 node.sendrawtransaction(txhex)\n-                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+                assert_equal(node.getmempoolentry(txid)[\"ancestorcount\"], i + 1)\n             else:\n                 chain_hex.append(txhex)\n                 chain_txns.append(tx)"
      },
      {
        "sha": "173d1d7493f92a10b92b347db20c36a19310672c",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 31,
        "deletions": 32,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=77349713b189e80f2c140db4df50177353a1cb83",
        "patch": "@@ -89,28 +89,28 @@ def run_test(self):\n             assert_equal(entry, mempool[x])\n \n             # Check that the descendant calculations are correct\n-            assert_equal(mempool[x]['descendantcount'], descendant_count)\n-            descendant_fees += mempool[x]['fee']\n-            assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee'])\n-            assert_equal(mempool[x]['fees']['base'], mempool[x]['fee'])\n-            assert_equal(mempool[x]['fees']['modified'], mempool[x]['modifiedfee'])\n-            assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN)\n-            assert_equal(mempool[x]['fees']['descendant'], descendant_fees)\n-            descendant_vsize += mempool[x]['vsize']\n-            assert_equal(mempool[x]['descendantsize'], descendant_vsize)\n+            assert_equal(entry['descendantcount'], descendant_count)\n+            descendant_fees += entry['fee']\n+            assert_equal(entry['modifiedfee'], entry['fee'])\n+            assert_equal(entry['fees']['base'], entry['fee'])\n+            assert_equal(entry['fees']['modified'], entry['modifiedfee'])\n+            assert_equal(entry['descendantfees'], descendant_fees * COIN)\n+            assert_equal(entry['fees']['descendant'], descendant_fees)\n+            descendant_vsize += entry['vsize']\n+            assert_equal(entry['descendantsize'], descendant_vsize)\n             descendant_count += 1\n \n             # Check that ancestor calculations are correct\n-            assert_equal(mempool[x]['ancestorcount'], ancestor_count)\n-            assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN)\n-            assert_equal(mempool[x]['ancestorsize'], ancestor_vsize)\n-            ancestor_vsize -= mempool[x]['vsize']\n-            ancestor_fees -= mempool[x]['fee']\n+            assert_equal(entry['ancestorcount'], ancestor_count)\n+            assert_equal(entry['ancestorfees'], ancestor_fees * COIN)\n+            assert_equal(entry['ancestorsize'], ancestor_vsize)\n+            ancestor_vsize -= entry['vsize']\n+            ancestor_fees -= entry['fee']\n             ancestor_count -= 1\n \n             # Check that parent/child list is correct\n-            assert_equal(mempool[x]['spentby'], descendants[-1:])\n-            assert_equal(mempool[x]['depends'], ancestors[-2:-1])\n+            assert_equal(entry['spentby'], descendants[-1:])\n+            assert_equal(entry['depends'], ancestors[-2:-1])\n \n             # Check that getmempooldescendants is correct\n             assert_equal(sorted(descendants), sorted(self.nodes[0].getmempooldescendants(x)))\n@@ -153,26 +153,26 @@ def run_test(self):\n         # Check that ancestor modified fees includes fee deltas from\n         # prioritisetransaction\n         self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=1000)\n-        mempool = self.nodes[0].getrawmempool(True)\n         ancestor_fees = 0\n         for x in chain:\n-            ancestor_fees += mempool[x]['fee']\n-            assert_equal(mempool[x]['fees']['ancestor'], ancestor_fees + Decimal('0.00001'))\n-            assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN + 1000)\n+            entry = self.nodes[0].getmempoolentry(x)\n+            ancestor_fees += entry['fee']\n+            assert_equal(entry['fees']['ancestor'], ancestor_fees + Decimal('0.00001'))\n+            assert_equal(entry['ancestorfees'], ancestor_fees * COIN + 1000)\n \n         # Undo the prioritisetransaction for later tests\n         self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=-1000)\n \n         # Check that descendant modified fees includes fee deltas from\n         # prioritisetransaction\n         self.nodes[0].prioritisetransaction(txid=chain[-1], fee_delta=1000)\n-        mempool = self.nodes[0].getrawmempool(True)\n \n         descendant_fees = 0\n         for x in reversed(chain):\n-            descendant_fees += mempool[x]['fee']\n-            assert_equal(mempool[x]['fees']['descendant'], descendant_fees + Decimal('0.00001'))\n-            assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n+            entry = self.nodes[0].getmempoolentry(x)\n+            descendant_fees += entry['fee']\n+            assert_equal(entry['fees']['descendant'], descendant_fees + Decimal('0.00001'))\n+            assert_equal(entry['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain\", chain_transaction, self.nodes[0], [txid], [vout], value, fee, 1)\n@@ -190,16 +190,15 @@ def run_test(self):\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())\n \n         # Now check that the transaction is in the mempool, with the right modified fee\n-        mempool = self.nodes[0].getrawmempool(True)\n-\n         descendant_fees = 0\n         for x in reversed(chain):\n-            descendant_fees += mempool[x]['fee']\n+            entry = self.nodes[0].getmempoolentry(x)\n+            descendant_fees += entry['fee']\n             if (x == chain[-1]):\n-                assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee']+satoshi_round(0.00002))\n-                assert_equal(mempool[x]['fees']['modified'], mempool[x]['fee']+satoshi_round(0.00002))\n-            assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 2000)\n-            assert_equal(mempool[x]['fees']['descendant'], descendant_fees+satoshi_round(0.00002))\n+                assert_equal(entry['modifiedfee'], entry['fee']+satoshi_round(0.00002))\n+                assert_equal(entry['fees']['modified'], entry['fee']+satoshi_round(0.00002))\n+            assert_equal(entry['descendantfees'], descendant_fees * COIN + 2000)\n+            assert_equal(entry['fees']['descendant'], descendant_fees+satoshi_round(0.00002))\n \n         # Check that node1's mempool is as expected (-> custom ancestor limit)\n         mempool0 = self.nodes[0].getrawmempool(False)\n@@ -255,7 +254,7 @@ def run_test(self):\n         # - txs from previous ancestor test (-> custom ancestor limit)\n         # - parent tx for descendant test\n         # - txs chained off parent tx (-> custom descendant limit)\n-        self.wait_until(lambda: len(self.nodes[1].getrawmempool(False)) ==\n+        self.wait_until(lambda: len(self.nodes[1].getrawmempool()) ==\n                                 MAX_ANCESTORS_CUSTOM + 1 + MAX_DESCENDANTS_CUSTOM, timeout=10)\n         mempool0 = self.nodes[0].getrawmempool(False)\n         mempool1 = self.nodes[1].getrawmempool(False)"
      },
      {
        "sha": "5fe20ea9e1dfe7e34b2b30d9faaeda24a0183bd2",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77349713b189e80f2c140db4df50177353a1cb83/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=77349713b189e80f2c140db4df50177353a1cb83",
        "patch": "@@ -94,9 +94,7 @@ def test_broadcast(self):\n \n         self.log.info(\"Rebroadcast transaction and ensure it is not added to unbroadcast set when already in mempool\")\n         rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n-        mempool = node.getrawmempool(True)\n-        assert rpc_tx_hsh in mempool\n-        assert not mempool[rpc_tx_hsh]['unbroadcast']\n+        assert not node.getmempoolentry(rpc_tx_hsh)['unbroadcast']\n \n     def test_txn_removal(self):\n         self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")"
      },
      {
        "sha": "e29d0a73f230f4c27497c75e09efd58861282269",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77349713b189e80f2c140db4df50177353a1cb83/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77349713b189e80f2c140db4df50177353a1cb83/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=77349713b189e80f2c140db4df50177353a1cb83",
        "patch": "@@ -379,7 +379,7 @@ def test_fee_p2pkh(self):\n \n         # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1)\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+        signedFee = self.nodes[0].getmempoolentry(txId)['fee']\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n@@ -402,7 +402,7 @@ def test_fee_p2pkh_multi_out(self):\n \n         # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendmany(\"\", outputs)\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+        signedFee = self.nodes[0].getmempoolentry(txId)['fee']\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n@@ -426,7 +426,7 @@ def test_fee_p2sh(self):\n \n         # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+        signedFee = self.nodes[0].getmempoolentry(txId)['fee']\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n@@ -467,7 +467,7 @@ def test_fee_4of5(self):\n \n         # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n-        signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n+        signedFee = self.nodes[0].getmempoolentry(txId)['fee']\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n@@ -599,7 +599,7 @@ def test_many_inputs_fee(self):\n \n         # Create same transaction over sendtoaddress.\n         txId = self.nodes[1].sendmany(\"\", outputs)\n-        signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']\n+        signedFee = self.nodes[1].getmempoolentry(txId)['fee']\n \n         # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)"
      }
    ]
  },
  {
    "sha": "47c48b5f35b4910fcf87caa6e37407e67d879c80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2M0OGI1ZjM1YjQ5MTBmY2Y4N2NhYTZlMzc0MDdlNjdkODc5Yzgw",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-08-16T13:34:14Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-08-16T13:34:14Z"
      },
      "message": "test: only use verbose for getrawmempool when necessary in functional tests",
      "tree": {
        "sha": "29fcb0c9bf4e84348803ed21d94c7eee8430ab97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29fcb0c9bf4e84348803ed21d94c7eee8430ab97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47c48b5f35b4910fcf87caa6e37407e67d879c80",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmEaaVYACgkQc3/VzfHR\nRrnz3Q//aTsHKvnhIKuvMmAtbN7JF4nqUTnfETMNDd07emM0ku6xIE7aAJJzTb/M\nEk0o2WtTKfSSFIm/aofHBKbfG1Pa4aHYByBmsamlaJCMaNgeiNWp4xrhArSX2COh\nDKL2hLjATu9vzV0TTvkggVkZb4JVqddKM/6t2CAsJGG6OYYV22zcQiswIUBjfl7W\nzWNp93ima8xw6kWWZc7nRi/bYaiSroEQA8Rs6CuMRdiaS0xSmmDRGEiDq47DJgZN\n2IXfotQsQKgB1JH/MstkVkjsXBaF48VoypeowJCNQp/iXs8KsPPm1kGVmDlaJHu2\nh2OzoqtdvQG7Nom/3zVLwLgwdocd12j79Er0RDC7mkk8LPSHLUSwcdHijaDXQMGj\ne4tqmnDZcWvqNGtJMwMUeqbwbKAHIJDnJ/ywoxeiQj/AxYJAJs8RK9MFPNIROPYB\nl8C4tLVWomBDf1v24Go7zjEb1M6SxGhwvLKbHYqxsyme1IV/JXu7y7tr9Tm5iOjo\n4kgwcPjvU1nsiYrNPF/Nn3Ab6Bm5SLmfUrKqsoi+WbfKsdoYECel+JihCrRmNioe\n1WmCSnAafkv0Fdhyqxv5UKwodCWI+w08eotU8pPNRZxlMQPKp2fXtUVgfyDtGoKZ\ni/CqsSuqVulI+HK0iBnnnk/EniYonxdjRtVnlCH2HjDUypdpzxE=\n=dlP/\n-----END PGP SIGNATURE-----",
        "payload": "tree 29fcb0c9bf4e84348803ed21d94c7eee8430ab97\nparent 77349713b189e80f2c140db4df50177353a1cb83\nauthor Michael Dietz <michael.dietz@waya.ai> 1629120854 +0500\ncommitter Michael Dietz <michael.dietz@waya.ai> 1629120854 +0500\n\ntest: only use verbose for getrawmempool when necessary in functional tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47c48b5f35b4910fcf87caa6e37407e67d879c80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47c48b5f35b4910fcf87caa6e37407e67d879c80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47c48b5f35b4910fcf87caa6e37407e67d879c80/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77349713b189e80f2c140db4df50177353a1cb83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77349713b189e80f2c140db4df50177353a1cb83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77349713b189e80f2c140db4df50177353a1cb83"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3ee50f5a8a806a2049b99947032c7f1d47e643bd",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47c48b5f35b4910fcf87caa6e37407e67d879c80/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47c48b5f35b4910fcf87caa6e37407e67d879c80/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=47c48b5f35b4910fcf87caa6e37407e67d879c80",
        "patch": "@@ -51,7 +51,7 @@ def run_test(self):\n         (second_chain, second_chain_value) = chain_transaction(self.nodes[0], [utxo[1]['txid']], [utxo[1]['vout']], utxo[1]['amount'], fee, 1)\n \n         # Check mempool has MAX_ANCESTORS + 1 transactions in it\n-        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 1)\n+        assert_equal(len(self.nodes[0].getrawmempool()), MAX_ANCESTORS + 1)\n \n         # Adding one more transaction on to the chain should fail.\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many unconfirmed ancestors [limit: 25]\", chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n@@ -74,7 +74,7 @@ def run_test(self):\n         self.nodes[0].sendrawtransaction(signed_second_tx['hex'])\n \n         # Finally, check that we added two transactions\n-        assert_equal(len(self.nodes[0].getrawmempool(True)), MAX_ANCESTORS + 3)\n+        assert_equal(len(self.nodes[0].getrawmempool()), MAX_ANCESTORS + 3)\n \n if __name__ == '__main__':\n     MempoolPackagesTest().main()"
      }
    ]
  }
]