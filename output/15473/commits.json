[
  {
    "sha": "fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVkYzM1MzRiZTFkNThiYmNhNjQxYTMyY2Q4N2NkOTdjZTg4ODJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-23T16:04:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T15:12:29Z"
      },
      "message": "rpc: Pass mempool into MempoolToJSON",
      "tree": {
        "sha": "04d695f854abddbc515f7e70301d659b16b7d9e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04d695f854abddbc515f7e70301d659b16b7d9e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdAXdAAoJEM4rdWl+aaVIeq0L/j/9OQ+pWOQtOWUY0BdupvH4\nKkkCtNqE6zYEvxDa0cE2aUohrhaXRmlm5xL2XavHvYSY7tmAA4nESm9b/8uuQVE2\nLT8BCUvtlu22CFB2EqsMwRg4IcBgGAHXnbOY9/+Vvc5JdLsGDsAkvSiV1Cr6aOcn\ndft8SUhYMVAO6UAUaHr2toakaStb4+euuNxWoqqtG5NrdQ7wMb9ablKNZTLCrLix\nR3xAC34JU+UkXIs2ZFeAATfLTAR4vfF87Qd+9vT/ACBgdRlIHmG4P5db7lvP3vPq\nc7C7VZpkui6rIsh5ckxZfxNEiKD6eNgFSRBV7M1SzTfCdSNNfU6Kg9dFUET/vyWJ\neXqojwPAtDeaPR5PiUQazqFKr4607o+IchIErOR5CQbDuBvPbxPUyD+uoJU/ROvU\nyjw1iUS0uWf5iLfSCTeqPDaiFgye27874gRoymJ+HpTurs3sRtJD6hQCfz35GiYJ\n6ofV9jf52EtaoP2o3oCf8Y0c1FQNpKeThPlTS+x1ng==\n=Vkux\n-----END PGP SIGNATURE-----",
        "payload": "tree 04d695f854abddbc515f7e70301d659b16b7d9e0\nparent 169dced9a42bd741b3265adee23e6a8d1f852227\nauthor MarcoFalke <falke.marco@gmail.com> 1550937860 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551107549 -0500\n\nrpc: Pass mempool into MempoolToJSON\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "169dced9a42bd741b3265adee23e6a8d1f852227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169dced9a42bd741b3265adee23e6a8d1f852227",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/169dced9a42bd741b3265adee23e6a8d1f852227"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 34,
      "deletions": 37
    },
    "files": [
      {
        "sha": "c73a97fd7d9c321ea96cb175918ac06f4f70d60b",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "patch": "@@ -14,7 +14,7 @@ bool SignalsOptInRBF(const CTransaction &tx)\n     return false;\n }\n \n-RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool)\n+RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n {\n     AssertLockHeld(pool.cs);\n "
      },
      {
        "sha": "a4f877731094d02ef82c3b0314b682dab1af3e6a",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "patch": "@@ -23,6 +23,6 @@ bool SignalsOptInRBF(const CTransaction &tx);\n // according to BIP 125\n // This involves checking sequence numbers of the transaction, as well\n // as the sequence numbers of all in-mempool ancestors.\n-RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "baad3b2ce9afdf77d8c8e28dc02af1c6e408c69a",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "patch": "@@ -300,7 +300,7 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolInfoObject = mempoolInfoToJSON();\n+        UniValue mempoolInfoObject = MempoolInfoToJSON(::mempool);\n \n         std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n@@ -322,7 +322,7 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        UniValue mempoolObject = mempoolToJSON(true);\n+        UniValue mempoolObject = MempoolToJSON(::mempool, true);\n \n         std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "sha": "27f23921a05a8e703f54b99f6cddcaeb1c2a1102",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 28,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "patch": "@@ -405,9 +405,9 @@ static std::string EntryDescriptionString()\n            \"    \\\"bip125-replaceable\\\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\\n\";\n }\n \n-static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n+static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPoolEntry& e) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n-    AssertLockHeld(mempool.cs);\n+    AssertLockHeld(pool.cs);\n \n     UniValue fees(UniValue::VOBJ);\n     fees.pushKV(\"base\", ValueFromAmount(e.GetFee()));\n@@ -427,12 +427,12 @@ static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCK\n     info.pushKV(\"ancestorcount\", e.GetCountWithAncestors());\n     info.pushKV(\"ancestorsize\", e.GetSizeWithAncestors());\n     info.pushKV(\"ancestorfees\", e.GetModFeesWithAncestors());\n-    info.pushKV(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString());\n+    info.pushKV(\"wtxid\", pool.vTxHashes[e.vTxHashesIdx].first.ToString());\n     const CTransaction& tx = e.GetTx();\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n     {\n-        if (mempool.exists(txin.prevout.hash))\n+        if (pool.exists(txin.prevout.hash))\n             setDepends.insert(txin.prevout.hash.ToString());\n     }\n \n@@ -445,8 +445,8 @@ static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCK\n     info.pushKV(\"depends\", depends);\n \n     UniValue spent(UniValue::VARR);\n-    const CTxMemPool::txiter &it = mempool.mapTx.find(tx.GetHash());\n-    const CTxMemPool::setEntries &setChildren = mempool.GetMemPoolChildren(it);\n+    const CTxMemPool::txiter& it = pool.mapTx.find(tx.GetHash());\n+    const CTxMemPool::setEntries& setChildren = pool.GetMemPoolChildren(it);\n     for (CTxMemPool::txiter childiter : setChildren) {\n         spent.push_back(childiter->GetTx().GetHash().ToString());\n     }\n@@ -455,7 +455,7 @@ static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCK\n \n     // Add opt-in RBF status\n     bool rbfStatus = false;\n-    RBFTransactionState rbfState = IsRBFOptIn(tx, mempool);\n+    RBFTransactionState rbfState = IsRBFOptIn(tx, pool);\n     if (rbfState == RBFTransactionState::UNKNOWN) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction is not in mempool\");\n     } else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125) {\n@@ -465,25 +465,21 @@ static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCK\n     info.pushKV(\"bip125-replaceable\", rbfStatus);\n }\n \n-UniValue mempoolToJSON(bool fVerbose)\n+UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)\n {\n-    if (fVerbose)\n-    {\n-        LOCK(mempool.cs);\n+    if (verbose) {\n+        LOCK(pool.cs);\n         UniValue o(UniValue::VOBJ);\n-        for (const CTxMemPoolEntry& e : mempool.mapTx)\n-        {\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(info, e);\n+            entryToJSON(pool, info, e);\n             o.pushKV(hash.ToString(), info);\n         }\n         return o;\n-    }\n-    else\n-    {\n+    } else {\n         std::vector<uint256> vtxid;\n-        mempool.queryHashes(vtxid);\n+        pool.queryHashes(vtxid);\n \n         UniValue a(UniValue::VARR);\n         for (const uint256& hash : vtxid)\n@@ -525,7 +521,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n-    return mempoolToJSON(fVerbose);\n+    return MempoolToJSON(::mempool, fVerbose);\n }\n \n static UniValue getmempoolancestors(const JSONRPCRequest& request)\n@@ -591,7 +587,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(info, e);\n+            entryToJSON(::mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -661,7 +657,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const CTxMemPoolEntry &e = *descendantIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n-            entryToJSON(info, e);\n+            entryToJSON(::mempool, info, e);\n             o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n@@ -700,7 +696,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n \n     const CTxMemPoolEntry &e = *it;\n     UniValue info(UniValue::VOBJ);\n-    entryToJSON(info, e);\n+    entryToJSON(::mempool, info, e);\n     return info;\n }\n \n@@ -1485,15 +1481,15 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n     return res;\n }\n \n-UniValue mempoolInfoToJSON()\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n {\n     UniValue ret(UniValue::VOBJ);\n-    ret.pushKV(\"size\", (int64_t) mempool.size());\n-    ret.pushKV(\"bytes\", (int64_t) mempool.GetTotalTxSize());\n-    ret.pushKV(\"usage\", (int64_t) mempool.DynamicMemoryUsage());\n+    ret.pushKV(\"size\", (int64_t)pool.size());\n+    ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n+    ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n-    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n     return ret;\n@@ -1522,7 +1518,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    return mempoolInfoToJSON();\n+    return MempoolInfoToJSON(::mempool);\n }\n \n static UniValue preciousblock(const JSONRPCRequest& request)"
      },
      {
        "sha": "55d1de453fcd4ceb0f25fa47aacc610b903cf585",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "patch": "@@ -11,6 +11,7 @@\n \n class CBlock;\n class CBlockIndex;\n+class CTxMemPool;\n class UniValue;\n \n static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;\n@@ -30,10 +31,10 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex *);\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false);\n \n /** Mempool information to JSON */\n-UniValue mempoolInfoToJSON();\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n \n /** Mempool to JSON */\n-UniValue mempoolToJSON(bool fVerbose = false);\n+UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose = false);\n \n /** Block header to JSON */\n UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex);"
      },
      {
        "sha": "ca556bdc7b566c191d34c3fb74706104b8d2c6fc",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "patch": "@@ -764,7 +764,7 @@ std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::Get\n     return iters;\n }\n \n-void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(std::vector<uint256>& vtxid) const\n {\n     LOCK(cs);\n     auto iters = GetSortedDepthAndScore();"
      },
      {
        "sha": "a8a0f7fa45459eafec3451c43f35654534b21a96",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5dc3534be1d58bbca641a32cd87cd97ce8882a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "patch": "@@ -184,7 +184,7 @@ struct update_lock_points\n     const LockPoints& lp;\n };\n \n-// extracts a transaction hash from CTxMempoolEntry or CTransactionRef\n+// extracts a transaction hash from CTxMemPoolEntry or CTransactionRef\n struct mempoolentry_txid\n {\n     typedef uint256 result_type;\n@@ -588,7 +588,7 @@ class CTxMemPool\n     void clear();\n     void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n-    void queryHashes(std::vector<uint256>& vtxid);\n+    void queryHashes(std::vector<uint256>& vtxid) const;\n     bool isSpent(const COutPoint& outpoint) const;\n     unsigned int GetTransactionsUpdated() const;\n     void AddTransactionsUpdated(unsigned int n);"
      }
    ]
  },
  {
    "sha": "fa38535130266896c430d146b05d0069e525dbe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM4NTM1MTMwMjY2ODk2YzQzMGQxNDZiMDVkMDA2OWU1MjVkYmU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-23T16:11:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T15:13:23Z"
      },
      "message": "bench: Benchmark MempoolToJSON",
      "tree": {
        "sha": "4e209c9951d126fc083ccf5b0b803f5c67a9bb9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e209c9951d126fc083ccf5b0b803f5c67a9bb9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa38535130266896c430d146b05d0069e525dbe6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdAYTAAoJEM4rdWl+aaVI9A8MAKsex4ixgGnGBxvHdFZMYH0f\nxBHcH5WLyFRCT9wPDVbfCTV8IjIH5Wn3xtrHYiU3YnXyWp3qYDEDUgnkqFa1wC2R\nj/gYHbS/82bAR89NVG7+HMI0XrCrR/blOWfDJbRB9fmVp8T2zDXtuI2SDpBBeHKk\nidd9pti25HgABGm5j0QmBbYdx5cxl6NU1EoPADAvRpBGvNIEQ3Gbyy24Qd+NiU/q\nWoFRWz5+V7FjdB4QcOQ0OCBPRUgHxj8RzKgtieWqXAcaQbULr01mLcQwpy0yLpVv\nExfW7kAeWv9WFFAbCEyj24atgrlevrbu0h/9GFuyNpx2Ov0m9M3NGBH10att2gte\n0Q2BnL773MZzewICPjABr7h5zXI+MSTpINSG9qY6rkv46hOoVjwpdLWJ5dLteaRR\nH5uNiY79kC5pk/OLqVRVobxrdU3EH8BxD0b3DUTgr2hajcEtz97tNvGN/BEPrFuf\nTU0IDScVQovmCqEEab8ZKmN3A40vZHoUU96LQ2g7Mg==\n=NHyz\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e209c9951d126fc083ccf5b0b803f5c67a9bb9a\nparent fa5dc3534be1d58bbca641a32cd87cd97ce8882a\nauthor MarcoFalke <falke.marco@gmail.com> 1550938274 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551107603 -0500\n\nbench: Benchmark MempoolToJSON\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa38535130266896c430d146b05d0069e525dbe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa38535130266896c430d146b05d0069e525dbe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa38535130266896c430d146b05d0069e525dbe6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5dc3534be1d58bbca641a32cd87cd97ce8882a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5dc3534be1d58bbca641a32cd87cd97ce8882a"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 49,
      "deletions": 1
    },
    "files": [
      {
        "sha": "44152bad7afff9c9114089beeb8f34b90e1795c3",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa38535130266896c430d146b05d0069e525dbe6/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa38535130266896c430d146b05d0069e525dbe6/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj?ref=fa38535130266896c430d146b05d0069e525dbe6",
        "patch": "@@ -32,6 +32,7 @@\n     <ClCompile Include=\"..\\..\\src\\bench\\examples.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\lockedpool.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\mempool_eviction.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\bench\\rpc_mempool.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\merkle_root.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\rollingbloom.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\bench\\verify_script.cpp\" />"
      },
      {
        "sha": "6e4597e2da44677d1e9d0b619364a3b5d51f0237",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa38535130266896c430d146b05d0069e525dbe6/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa38535130266896c430d146b05d0069e525dbe6/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=fa38535130266896c430d146b05d0069e525dbe6",
        "patch": "@@ -26,6 +26,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/gcs_filter.cpp \\\n   bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n+  bench/rpc_mempool.cpp \\\n   bench/verify_script.cpp \\\n   bench/base58.cpp \\\n   bench/bech32.cpp \\\n@@ -37,6 +38,7 @@ nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -47,7 +49,9 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1) \\\n-  $(LIBUNIVALUE)\n+  $(LIBUNIVALUE) \\\n+  $(EVENT_PTHREADS_LIBS) \\\n+  $(EVENT_LIBS)\n \n if ENABLE_ZMQ\n bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)"
      },
      {
        "sha": "67d8a255647b4e5766e7ae7c4649911da3c8199b",
        "filename": "src/bench/rpc_mempool.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa38535130266896c430d146b05d0069e525dbe6/src/bench/rpc_mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa38535130266896c430d146b05d0069e525dbe6/src/bench/rpc_mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_mempool.cpp?ref=fa38535130266896c430d146b05d0069e525dbe6",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <policy/policy.h>\n+#include <rpc/blockchain.h>\n+#include <txmempool.h>\n+\n+#include <univalue.h>\n+\n+#include <list>\n+#include <vector>\n+\n+static void AddTx(const CTransactionRef& tx, const CAmount& fee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n+{\n+    LockPoints lp;\n+    pool.addUnchecked(CTxMemPoolEntry(tx, fee, /* time */ 0, /* height */ 1, /* spendsCoinbase */ false, /* sigOpCost */ 4, lp));\n+}\n+\n+static void RpcMempool(benchmark::State& state)\n+{\n+    CTxMemPool pool;\n+    LOCK2(cs_main, pool.cs);\n+\n+    for (int i = 0; i < 1000; ++i) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(1);\n+        tx.vin[0].scriptSig = CScript() << OP_1;\n+        tx.vin[0].scriptWitness.stack.push_back({1});\n+        tx.vout.resize(1);\n+        tx.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+        tx.vout[0].nValue = i;\n+        const CTransactionRef tx_r{MakeTransactionRef(tx)};\n+        AddTx(tx_r, /* fee */ i, pool);\n+    }\n+\n+    while (state.KeepRunning()) {\n+        (void)MempoolToJSON(pool, /*verbose*/ true);\n+    }\n+}\n+\n+BENCHMARK(RpcMempool, 40);"
      }
    ]
  }
]