glozow,2021-12-06T11:27:25Z,"cc @MarcoFalke, thanks for catching my bug :bug:",https://github.com/bitcoin/bitcoin/pull/23683#issuecomment-986688016,986688016,
naumenkogs,2021-12-07T09:53:08Z,"utACK 28b60ce3122b29ffad2c60790d3bfe9a2ede2471\n\nThe bug is pretty scary, good thing we found it this soon, and the fix is straightforward.\nThe test looks correct.",https://github.com/bitcoin/bitcoin/pull/23683#issuecomment-987752880,987752880,
MarcoFalke,2021-12-07T10:13:32Z,"> Too bad this can't properly be tested on regtest. I guess the only way is via a pre-mined main-chain?\n\nAh no. I don't think this is possible to test at all. The lockpoints are just a cache and if it is outdated, evaluating it will always return false, in which case the lockpoints are re-evaluated. So this is not fixing a behaviour bug, but potentially improving performance a bit?",https://github.com/bitcoin/bitcoin/pull/23683#issuecomment-987771707,987771707,
glozow,2021-12-07T11:18:07Z,"> > Too bad this can't properly be tested on regtest. I guess the only way is via a pre-mined main-chain?\n\n> Ah no. I don't think this is possible to test at all. The lockpoints are just a cache and if it is outdated, evaluating it will always return false, in which case the lockpoints are re-evaluated. So this is not fixing a behaviour bug, but potentially improving performance a bit?\n\nTh",https://github.com/bitcoin/bitcoin/pull/23683#issuecomment-987829408,987829408,
MarcoFalke,2021-12-07T14:52:28Z,"> Since this PR adds assertions for the lockpoints\n\nI was hoping there was a way to test this on current master without modifying the code, but yeah...",https://github.com/bitcoin/bitcoin/pull/23683#issuecomment-987998795,987998795,
MarcoFalke,2021-12-06T11:39:47Z,nit: Why is this needed? The `self.sync_all()` in the next line should take care of that already. I think it should be fine to remove either this line or the next.,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762930383,762930383,test/functional/mempool_reorg.py
MarcoFalke,2021-12-06T11:40:05Z,nit: Why is this needed? Are they not connected already?,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762930557,762930557,test/functional/mempool_reorg.py
MarcoFalke,2021-12-06T11:41:02Z,nit: Why are the asserts needed? The implicit `self.sync_all` in the next line should assert this already.,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762931172,762931172,test/functional/mempool_reorg.py
MarcoFalke,2021-12-06T11:41:37Z,nit: Why is this needed? The wallet will pick a utxo by itself.,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762931588,762931588,test/functional/mempool_reorg.py
MarcoFalke,2021-12-06T11:42:08Z,nit: Why is this needed? You can use `self.no_op`,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762931929,762931929,test/functional/mempool_reorg.py
glozow,2021-12-06T12:32:45Z,"They don't stay in sync if I don't call `connect_nodes` here... it also doesn't work if I call `connect_nodes(1, 0)` instead. So my guess is that this creation of a manual connection from node0 to node1 adds a permission that we need.",https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762965682,762965682,test/functional/mempool_reorg.py
glozow,2021-12-06T12:32:50Z,removed,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762965737,762965737,test/functional/mempool_reorg.py
glozow,2021-12-06T12:32:57Z,removed,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762965821,762965821,test/functional/mempool_reorg.py
glozow,2021-12-06T12:33:11Z,"ahh, didn't know about that - fixed",https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762965966,762965966,test/functional/mempool_reorg.py
glozow,2021-12-06T12:33:28Z,removed,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r762966229,762966229,test/functional/mempool_reorg.py
MarcoFalke,2021-12-06T13:38:44Z,I think this comment can be removed. Mutable iterators in the mempool don't exist and the function name is self-explanatory.,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763013572,763013572,src/txmempool.h
MarcoFalke,2021-12-06T13:41:05Z,in the second commit: Maybe mention that the bug was introduces in commit  bedf246 ?,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763015410,763015410,src/validation.cpp
MarcoFalke,2021-12-06T14:07:54Z,"nit: missing trailing `,`.",https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763037472,763037472,test/functional/mempool_reorg.py
MarcoFalke,2021-12-06T14:24:09Z,"Ah ok, it is not possible to use compact blocks during IBD",https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763051867,763051867,test/functional/mempool_reorg.py
glozow,2021-12-06T15:32:13Z,added,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763115678,763115678,src/validation.cpp
glozow,2021-12-06T15:32:20Z,added,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763115781,763115781,test/functional/mempool_reorg.py
glozow,2021-12-06T15:32:25Z,removed,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763115892,763115892,src/txmempool.h
naumenkogs,2021-12-07T09:21:39Z,"I was thinking ""what if we skip those transactions with `should_remove=true` here?"". I guess, we'll have the same original problem: they won't be cleared because we would mistakenly think they have valid `lp` in `removeForReorg`?\n\nPerhaps this deserves a comment extension, saying that txs to be removed must be updated here.",https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763794040,763794040,src/validation.cpp
glozow,2021-12-07T09:41:07Z,"No, they'll still be cleared - `removeForReorg` just applies `check_final_and_mature` on all entries and removes them if it returns true, it doesn't check whether the `lp` is valid. I'm not 100% sure if we could skip the `should_remove=true` ones, but I think it would be fine. The `CheckSequenceLocks` function doesn't guarantee `lp` to be reliable if it returns false, and the function doesn't even",https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763810771,763810771,src/validation.cpp
MarcoFalke,2021-12-07T10:09:13Z,I agree that it is safe to skip if the tx will be removed anyway. When this was introduced in commit 14d6324a248df50cb79fbeb5b60a978687a3b64e it updates unconditionally.,https://github.com/bitcoin/bitcoin/pull/23683#discussion_r763836593,763836593,src/validation.cpp
