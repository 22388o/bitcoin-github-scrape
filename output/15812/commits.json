[
  {
    "sha": "d3adb935f2882ba5183b5ff009f72de544d2e5fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2FkYjkzNWYyODgyYmE1MTgzYjVmZjAwOWY3MmRlNTQ0ZDJlNWZk",
    "commit": {
      "author": {
        "name": "Your Name",
        "email": "you@example.com",
        "date": "2019-04-08T02:11:13Z"
      },
      "committer": {
        "name": "Your Name",
        "email": "you@example.com",
        "date": "2019-04-13T17:53:24Z"
      },
      "message": "not generate coverage report on test failures",
      "tree": {
        "sha": "169105c8297a40474da127192c60a3f2635ad068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/169105c8297a40474da127192c60a3f2635ad068"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3adb935f2882ba5183b5ff009f72de544d2e5fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3adb935f2882ba5183b5ff009f72de544d2e5fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3adb935f2882ba5183b5ff009f72de544d2e5fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3adb935f2882ba5183b5ff009f72de544d2e5fd/comments",
    "author": {
      "login": "invalid-email-address",
      "id": 148100,
      "node_id": "MDQ6VXNlcjE0ODEwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/invalid-email-address",
      "html_url": "https://github.com/invalid-email-address",
      "followers_url": "https://api.github.com/users/invalid-email-address/followers",
      "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}",
      "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions",
      "organizations_url": "https://api.github.com/users/invalid-email-address/orgs",
      "repos_url": "https://api.github.com/users/invalid-email-address/repos",
      "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}",
      "received_events_url": "https://api.github.com/users/invalid-email-address/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "invalid-email-address",
      "id": 148100,
      "node_id": "MDQ6VXNlcjE0ODEwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/invalid-email-address",
      "html_url": "https://github.com/invalid-email-address",
      "followers_url": "https://api.github.com/users/invalid-email-address/followers",
      "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}",
      "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions",
      "organizations_url": "https://api.github.com/users/invalid-email-address/orgs",
      "repos_url": "https://api.github.com/users/invalid-email-address/repos",
      "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}",
      "received_events_url": "https://api.github.com/users/invalid-email-address/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efbc86733a551f2e1f5c43cd6de4fc730c7cce65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efbc86733a551f2e1f5c43cd6de4fc730c7cce65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efbc86733a551f2e1f5c43cd6de4fc730c7cce65"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fcffe980d6dc9b297109773b520d8a4d85b1e4ac",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3adb935f2882ba5183b5ff009f72de544d2e5fd/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3adb935f2882ba5183b5ff009f72de544d2e5fd/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d3adb935f2882ba5183b5ff009f72de544d2e5fd",
        "patch": "@@ -369,6 +369,7 @@ def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=\n \n     max_len_name = len(max(test_list, key=len))\n     test_count = len(test_list)\n+    all_tests_passed = True\n     for i in range(test_count):\n         test_result, testdir, stdout, stderr = job_queue.get_next()\n         test_results.append(test_result)\n@@ -378,6 +379,7 @@ def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=\n         elif test_result.status == \"Skipped\":\n             logging.debug(\"%s skipped\" % (done_str))\n         else:\n+            all_tests_passed = False\n             print(\"%s failed, Duration: %s s\\n\" % (done_str, test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n@@ -400,10 +402,12 @@ def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=\n     print_results(test_results, max_len_name, (int(time.time() - start_time)))\n \n     if coverage:\n-        coverage.report_rpc_coverage()\n-\n-        logging.debug(\"Cleaning up coverage data\")\n-        coverage.cleanup()\n+        if all_tests_passed:\n+            coverage.report_rpc_coverage()\n+            logging.debug(\"Cleaning up coverage data\")\n+            coverage.cleanup()\n+        else:\n+            print(\"No coverage report generated because there are tests failures\")\n \n     # Clear up the temp directory if all subdirectories are gone\n     if not os.listdir(tmpdir):"
      }
    ]
  }
]