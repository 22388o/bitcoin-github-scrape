[
  {
    "sha": "9ad6746ccd6dc31141fd0144686b641e31bf626b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWQ2NzQ2Y2NkNmRjMzExNDFmZDAxNDQ2ODZiNjQxZTMxYmY2MjZi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-01T14:13:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-09-22T12:59:27Z"
      },
      "message": "Use static_cast instead of C-style casts for non-fundamental types\n\nA C-style cast is equivalent to try casting in the following order:\n\n1. const_cast(...)\n2. static_cast(...)\n3. const_cast(static_cast(...))\n4. reinterpret_cast(...)\n5. const_cast(reinterpret_cast(...))\n\nBy using static_cast<T>(...) explicitly we avoid the possibility\nof an unintentional and dangerous reinterpret_cast. Furthermore\nstatic_cast<T>(...) allows for easier grepping of casts.",
      "tree": {
        "sha": "a5f2a33bef9eae6fde623ba8fd9233f1bb9942a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5f2a33bef9eae6fde623ba8fd9233f1bb9942a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ad6746ccd6dc31141fd0144686b641e31bf626b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad6746ccd6dc31141fd0144686b641e31bf626b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad6746ccd6dc31141fd0144686b641e31bf626b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad6746ccd6dc31141fd0144686b641e31bf626b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98212745c8acb5cc4e688bbb3979bfd46b25f98a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98212745c8acb5cc4e688bbb3979bfd46b25f98a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98212745c8acb5cc4e688bbb3979bfd46b25f98a"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 44,
      "deletions": 44
    },
    "files": [
      {
        "sha": "2775b13b275e71697211b07b0e7e83fda17c66ef",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -59,7 +59,7 @@ class CAddrInfo : public CAddress\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CAddress*)this);\n+        READWRITE(*static_cast<CAddress*>(this));\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n         READWRITE(nAttempts);"
      },
      {
        "sha": "dc29fac0d1dd002828f802a0e912cca64af27ed6",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -33,14 +33,14 @@ CScript ParseScript(const std::string& s)\n             if (op < OP_NOP && op != OP_RESERVED)\n                 continue;\n \n-            const char* name = GetOpName((opcodetype)op);\n+            const char* name = GetOpName(static_cast<opcodetype>(op));\n             if (strcmp(name, \"OP_UNKNOWN\") == 0)\n                 continue;\n             std::string strName(name);\n-            mapOpNames[strName] = (opcodetype)op;\n+            mapOpNames[strName] = static_cast<opcodetype>(op);\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n-            mapOpNames[strName] = (opcodetype)op;\n+            mapOpNames[strName] = static_cast<opcodetype>(op);\n         }\n     }\n "
      },
      {
        "sha": "80183c620f79c45257ca9bef442923280f325af6",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -512,7 +512,7 @@ struct event_base* EventBase()\n static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n {\n     // Static handler: simply call inner handler\n-    HTTPEvent *self = ((HTTPEvent*)data);\n+    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n     self->handler();\n     if (self->deleteWhenTriggered)\n         delete self;"
      },
      {
        "sha": "f0ab6a29538a9f1828066efec3febc7bb84a63c3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -299,7 +299,7 @@ CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if ((CNetAddr)pnode->addr == ip) {\n+      if (static_cast<CNetAddr>(pnode->addr) == ip) {\n             return pnode;\n         }\n     }\n@@ -310,7 +310,7 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if (subNet.Match((CNetAddr)pnode->addr)) {\n+        if (subNet.Match(static_cast<CNetAddr>(pnode->addr))) {\n             return pnode;\n         }\n     }\n@@ -332,7 +332,7 @@ CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if ((CService)pnode->addr == addr) {\n+        if (static_cast<CService>(pnode->addr) == addr) {\n             return pnode;\n         }\n     }\n@@ -372,7 +372,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             return nullptr;\n \n         // Look for an existing connection\n-        CNode* pnode = FindNode((CService)addrConnect);\n+        CNode* pnode = FindNode(static_cast<CService>(addrConnect));\n         if (pnode)\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n@@ -403,7 +403,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n             LOCK(cs_vNodes);\n-            CNode* pnode = FindNode((CService)addrConnect);\n+            CNode* pnode = FindNode(static_cast<CService>(addrConnect));\n             if (pnode)\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n@@ -533,7 +533,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n     {\n         LOCK(cs_vNodes);\n         for (CNode* pnode : vNodes) {\n-            if (subNet.Match((CNetAddr)pnode->addr))\n+            if (subNet.Match(static_cast<CNetAddr>(pnode->addr)))\n                 pnode->fDisconnect = true;\n         }\n     }\n@@ -1946,7 +1946,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n-            FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n+            FindNode(static_cast<CNetAddr>(addrConnect)) || IsBanned(addrConnect) ||\n             FindNode(addrConnect.ToStringIPPort()))\n             return false;\n     } else if (FindNode(std::string(pszDest)))"
      },
      {
        "sha": "a5efba1ae1dd611a01cac387d859200b01095ab9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -2616,7 +2616,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n     CNodeState &state = *State(pnode->GetId());\n \n     for (const CBlockReject& reject : state.rejects) {\n-        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, std::string(NetMsgType::BLOCK), reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n     }\n     state.rejects.clear();\n "
      },
      {
        "sha": "1547d9bcac829fa2ade76a697aec264b662ffa26",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -526,17 +526,17 @@ unsigned short CService::GetPort() const\n \n bool operator==(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a == (CNetAddr)b && a.port == b.port;\n+    return static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port == b.port;\n }\n \n bool operator!=(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a != (CNetAddr)b || a.port != b.port;\n+    return static_cast<CNetAddr>(a) != static_cast<CNetAddr>(b) || a.port != b.port;\n }\n \n bool operator<(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a < (CNetAddr)b || ((CNetAddr)a == (CNetAddr)b && a.port < b.port);\n+    return static_cast<CNetAddr>(a) < static_cast<CNetAddr>(b) || (static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port < b.port);\n }\n \n bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const"
      },
      {
        "sha": "aad3e5cf3a8f76d2aa9bf5754c8d04cd1c065fc2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -528,7 +528,7 @@ bool HaveNameProxy() {\n bool IsProxy(const CNetAddr &addr) {\n     LOCK(cs_proxyInfos);\n     for (int i = 0; i < NET_MAX; i++) {\n-        if (addr == (CNetAddr)proxyInfo[i].proxy)\n+        if (addr == static_cast<CNetAddr>(proxyInfo[i].proxy))\n             return true;\n     }\n     return false;"
      },
      {
        "sha": "ed97c5d4ea3e64954743321a4a363d030c7c9ceb",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -86,14 +86,14 @@ class CBlock : public CBlockHeader\n     CBlock(const CBlockHeader &header)\n     {\n         SetNull();\n-        *((CBlockHeader*)this) = header;\n+        *(static_cast<CBlockHeader*>(this)) = header;\n     }\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(*static_cast<CBlockHeader*>(this));\n         READWRITE(vtx);\n     }\n "
      },
      {
        "sha": "8e974c372a62852572b849efd6399886ea5e523f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -301,8 +301,8 @@ class CAddress : public CService\n             READWRITE(nTime);\n         uint64_t nServicesInt = nServices;\n         READWRITE(nServicesInt);\n-        nServices = (ServiceFlags)nServicesInt;\n-        READWRITE(*(CService*)this);\n+        nServices = static_cast<ServiceFlags>(nServicesInt);\n+        READWRITE(*static_cast<CService*>(this));\n     }\n \n     // TODO: make private (improves encapsulation)"
      },
      {
        "sha": "7ac440c0993620c01b1deb5d68d33c8c00d429e2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -709,7 +709,7 @@ int main(int argc, char *argv[])\n         if (BitcoinCore::baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), static_cast<HWND>(app.getMainWinId()));\n #endif\n             app.exec();\n             app.requestShutdown();"
      },
      {
        "sha": "c86a3d731a0b1a420506632f1b096744c721e7d9",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -598,7 +598,7 @@ void BitcoinGUI::createTrayIconMenu()\n #else\n     // Note: On Mac, the dock icon is used to provide the tray's functionality.\n     MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n-    dockIconHandler->setMainWindow((QMainWindow *)this);\n+    dockIconHandler->setMainWindow(static_cast<QMainWindow*>(this));\n     trayIconMenu = dockIconHandler->dockMenu();\n #endif\n \n@@ -921,13 +921,13 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n             buttons = QMessageBox::Ok;\n \n         showNormalIfMinimized();\n-        QMessageBox mBox((QMessageBox::Icon)nMBoxIcon, strTitle, message, buttons, this);\n+        QMessageBox mBox(static_cast<QMessageBox::Icon>(nMBoxIcon), strTitle, message, buttons, this);\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;\n     }\n     else\n-        notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);\n+        notificator->notify(static_cast<Notificator::Class>(nNotifyIcon), strTitle, message);\n }\n \n void BitcoinGUI::changeEvent(QEvent *e)"
      },
      {
        "sha": "b098a2ec92d8055a576d2d5465b41ffef7e0914d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -145,7 +145,7 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n     if (settings.contains(\"nCoinControlMode\") && !settings.value(\"nCoinControlMode\").toBool())\n         ui->radioTreeMode->click();\n     if (settings.contains(\"nCoinControlSortColumn\") && settings.contains(\"nCoinControlSortOrder\"))\n-        sortView(settings.value(\"nCoinControlSortColumn\").toInt(), ((Qt::SortOrder)settings.value(\"nCoinControlSortOrder\").toInt()));\n+        sortView(settings.value(\"nCoinControlSortColumn\").toInt(), (static_cast<Qt::SortOrder>(settings.value(\"nCoinControlSortOrder\").toInt())));\n }\n \n CoinControlDialog::~CoinControlDialog()\n@@ -431,7 +431,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n             txDummy.vout.push_back(txout);\n             fDust |= IsDust(txout, ::dustRelayFee);\n         }\n@@ -522,7 +522,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n-                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n                 if (IsDust(txout, ::dustRelayFee))\n                 {\n                     nPayFee += nChange;"
      },
      {
        "sha": "31f4739c66c4a2718d7ace32749f834356586ec0",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -24,7 +24,7 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {\n         event->ignore();\n-        CoinControlDialog *coinControlDialog = (CoinControlDialog*)this->parentWidget();\n+        CoinControlDialog *coinControlDialog = static_cast<CoinControlDialog*>(this->parentWidget());\n         coinControlDialog->done(QDialog::Accepted);\n     }\n     else"
      },
      {
        "sha": "90f3ab26adc4a591746fe7f4d1bb41df3d9898b5",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -352,7 +352,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm send coins\"),\n         questionString.arg(formatted.join(\"<br />\")), SEND_CONFIRM_DELAY, this);\n     confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = (QMessageBox::StandardButton)confirmationDialog.result();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n     if(retval != QMessageBox::Yes)\n     {"
      },
      {
        "sha": "4686361605a5f134294d40ad99132d77ae5a20bd",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -38,7 +38,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     float fontFactor            = 1.0;\n     float devicePixelRatio      = 1.0;\n #if QT_VERSION > 0x050100\n-    devicePixelRatio = ((QGuiApplication*)QCoreApplication::instance())->devicePixelRatio();\n+    devicePixelRatio = static_cast<QGuiApplication*>(QCoreApplication::instance())->devicePixelRatio();\n #endif\n \n     // define text to place"
      },
      {
        "sha": "7e771c428770f2838ff2e27cde351b0b010f03a6",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -309,7 +309,7 @@ void TransactionView::chooseWatchonly(int idx)\n     if(!transactionProxyModel)\n         return;\n     transactionProxyModel->setWatchOnlyFilter(\n-        (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n+        static_cast<TransactionFilterProxy::WatchOnlyFilter>(watchOnlyWidget->itemData(idx).toInt()));\n }\n \n void TransactionView::changedPrefix(const QString &prefix)"
      },
      {
        "sha": "f5ea65db72f1a097f6ebb94a537df266367312d8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -701,7 +701,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     questionString.append(\"</td></tr></table>\");\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm fee bump\"), questionString);\n     confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = (QMessageBox::StandardButton)confirmationDialog.result();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n     // cancel sign&broadcast if users doesn't want to bump the fee\n     if (retval != QMessageBox::Yes) {"
      },
      {
        "sha": "23e0bf72763eaef7dc89755008b9201f1dc82632",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -56,7 +56,7 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)\n {\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n-    PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n+    PSHUTDOWNBRCREATE shutdownBRCreate = static_cast<PSHUTDOWNBRCREATE>(GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\"));\n     if (shutdownBRCreate == nullptr) {\n         qWarning() << \"registerShutdownBlockReason: GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;"
      },
      {
        "sha": "ca1212fb808825231d8e9035bed5060f0779e8fe",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -567,7 +567,7 @@ class CScript : public CScriptBase\n             pc += nSize;\n         }\n \n-        opcodeRet = (opcodetype)opcode;\n+        opcodeRet = static_cast<opcodetype>(opcode);\n         return true;\n     }\n "
      },
      {
        "sha": "9239bb95167d1a4f30a61d557a32de377ad82955",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n+        uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)j) == bitmask) {\n+            if (VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n                 BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n                         mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n             }"
      },
      {
        "sha": "86237cd62c69724018401fadbaf44800e8b669bc",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -133,7 +133,7 @@ TorControlConnection::~TorControlConnection()\n \n void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n {\n-    TorControlConnection *self = (TorControlConnection*)ctx;\n+    TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n     struct evbuffer *input = bufferevent_get_input(bev);\n     size_t n_read_out = 0;\n     char *line;\n@@ -178,7 +178,7 @@ void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n \n void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ctx)\n {\n-    TorControlConnection *self = (TorControlConnection*)ctx;\n+    TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n     if (what & BEV_EVENT_CONNECTED) {\n         LogPrint(BCLog::TOR, \"tor: Successfully connected!\\n\");\n         self->connected(*self);\n@@ -725,7 +725,7 @@ fs::path TorController::GetPrivateKeyFile()\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n {\n-    TorController *self = (TorController*)arg;\n+    TorController *self = static_cast<TorController*>(arg);\n     self->Reconnect();\n }\n "
      },
      {
        "sha": "ec7513f9db6a6599722f5be278f6fe6d8f753b7d",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -46,7 +46,7 @@ struct CDiskTxPos : public CDiskBlockPos\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CDiskBlockPos*)this);\n+        READWRITE(*static_cast<CDiskBlockPos*>(this));\n         READWRITE(VARINT(nTxOffset));\n     }\n "
      },
      {
        "sha": "c79804074324fe846ac3c01ef5bf584c79424484",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -1549,9 +1549,9 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, (Consensus::DeploymentPos)i, versionbitscache);\n+        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n         if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_STARTED) {\n-            nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n+            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n "
      },
      {
        "sha": "cd38d279ed28c97e8ce6f88fe9a54fa0dd8ed454",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad6746ccd6dc31141fd0144686b641e31bf626b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "patch": "@@ -399,7 +399,7 @@ class CWalletTx : public CMerkleTx\n                 mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        READWRITE(*static_cast<CMerkleTx*>(this));\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n         READWRITE(vUnused);\n         READWRITE(mapValue);"
      }
    ]
  },
  {
    "sha": "d6f3a737361d8fb562f08763f613a6529b870d1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmYzYTczNzM2MWQ4ZmI1NjJmMDg3NjNmNjEzYTY1MjliODcwZDFl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T09:17:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T09:17:39Z"
      },
      "message": "Remove redundant locks\n\n* SetAddressBook(...) is locking cs_wallet internally\n* DelAddressBook(...) is locking cs_wallet internally",
      "tree": {
        "sha": "a66d7b301bbd9f6e84a4ae89089f138bfd319f23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a66d7b301bbd9f6e84a4ae89089f138bfd319f23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6f3a737361d8fb562f08763f613a6529b870d1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6f3a737361d8fb562f08763f613a6529b870d1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6f3a737361d8fb562f08763f613a6529b870d1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6f3a737361d8fb562f08763f613a6529b870d1e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5197100704b87ee41c1605c0bd9ad89a2ef50c5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5197100704b87ee41c1605c0bd9ad89a2ef50c5e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ca71590c1265e3e562f6852650178f1ffceb08d0",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6f3a737361d8fb562f08763f613a6529b870d1e/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6f3a737361d8fb562f08763f613a6529b870d1e/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=d6f3a737361d8fb562f08763f613a6529b870d1e",
        "patch": "@@ -392,11 +392,8 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     }\n \n     // Add entry\n-    {\n-        LOCK(wallet->cs_wallet);\n-        wallet->SetAddressBook(DecodeDestination(strAddress), strLabel,\n-                               (type == Send ? \"send\" : \"receive\"));\n-    }\n+    wallet->SetAddressBook(DecodeDestination(strAddress), strLabel,\n+                           (type == Send ? \"send\" : \"receive\"));\n     return QString::fromStdString(strAddress);\n }\n \n@@ -410,10 +407,7 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent\n         // Also refuse to remove receiving addresses.\n         return false;\n     }\n-    {\n-        LOCK(wallet->cs_wallet);\n-        wallet->DelAddressBook(DecodeDestination(rec->address.toStdString()));\n-    }\n+    wallet->DelAddressBook(DecodeDestination(rec->address.toStdString()));\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWY4NmM5MmU3ZmNiYTg2NjE2MGQ3YTM0NmZiMjYwZDdlNGFiNWJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-11T15:38:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-12-11T15:38:16Z"
      },
      "message": "Do not un-mark fInMempool on wallet txn if ATMP fails.\n\nIrrespective of the failure reason, un-marking fInMempool\nout-of-order is incorrect - it should be unmarked when\nTransactionRemovedFromMempool fires.",
      "tree": {
        "sha": "bbab9b6865a55e61322d19babbdde45919eae972",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbab9b6865a55e61322d19babbdde45919eae972"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab6c0b09e4e734e3033d81fe0a25f09ca74ba26"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "080bfffd5fbcef4645588550290a1c1c60a36477",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
        "patch": "@@ -4114,18 +4114,13 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    // Quick check to avoid re-setting fInMempool to false\n-    if (mempool.exists(tx->GetHash())) {\n-        return false;\n-    }\n-\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that the transaction they just generated's change is\n     // unavailable as we're not yet aware its in mempool.\n     bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n-    fInMempool = ret;\n+    fInMempool |= ret;\n     return ret;\n }"
      }
    ]
  },
  {
    "sha": "faeab66f884767c7d96e70e9bdd285621ec8d6cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWVhYjY2Zjg4NDc2N2M3ZDk2ZTcwZTliZGQyODU2MjFlYzhkNmNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-15T18:16:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-18T04:08:34Z"
      },
      "message": "contrib: Replace developer keys with list of pgp fingerprints",
      "tree": {
        "sha": "510091edfa13656881c8f901d5fe527e96354879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/510091edfa13656881c8f901d5fe527e96354879"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faeab66f884767c7d96e70e9bdd285621ec8d6cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faeab66f884767c7d96e70e9bdd285621ec8d6cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faeab66f884767c7d96e70e9bdd285621ec8d6cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faeab66f884767c7d96e70e9bdd285621ec8d6cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c66adb286a89738a6a5218be2ecfea8e398878dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c66adb286a89738a6a5218be2ecfea8e398878dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c66adb286a89738a6a5218be2ecfea8e398878dd"
      }
    ],
    "stats": {
      "total": 2922,
      "additions": 46,
      "deletions": 2876
    },
    "files": [
      {
        "sha": "e3a45be1294475a240949bdc22027fafe48dfadb",
        "filename": "contrib/gitian-keys/README.md",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeab66f884767c7d96e70e9bdd285621ec8d6cc/contrib/gitian-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeab66f884767c7d96e70e9bdd285621ec8d6cc/contrib/gitian-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/README.md?ref=faeab66f884767c7d96e70e9bdd285621ec8d6cc",
        "patch": "@@ -1,16 +1,26 @@\n-PGP keys\n-========\n+## PGP keys of Gitian builders and Developers\n \n-This folder contains the public keys of developers and active contributors.\n+This list contains the public keys of Gitian builders and active developers.\n \n The keys are mainly used to sign git commits or the build results of Gitian\n builds.\n \n-You can import the keys into gpg as follows. Also, make sure to fetch the\n-latest version from the key server to see if any key was revoked in the\n-meantime.\n+The most recent version of each pgp key can be found on most pgp key servers.\n+\n+Fetch the latest version from the key server to see if any key was revoked in\n+the meantime.\n+To fetch the latest version of all pgp keys in your gpg homedir,\n \n ```sh\n-gpg --import ./*.pgp\n gpg --refresh-keys\n ```\n+\n+To fetch keys of Gitian builders and active developers, feed the list of\n+fingerprints of the primary keys into gpg:\n+\n+```sh\n+while read fingerprint keyholder_name; do gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys ${fingerprint}; done < ./keys.txt\n+```\n+\n+Add your key to the list if you provided Gitian signatures for two major or\n+minor releases of Bitcoin Core."
      },
      {
        "sha": "030fd5cf3cd389976b9d07e6e48bb8d3524442fe",
        "filename": "contrib/gitian-keys/achow101-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/achow101-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/achow101-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/achow101-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,52 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1\n-\n-mQINBFT4snkBEACx90Wf5XLo1Xv09p81eaOXc+8bbkSYzqx3ThDNUPRzjYpex9A9\n-8FxfBenAykD3EgYuBTco4cbn7Dw11ppyXUw0VjWaagnnAVGxt3SDeY3ADwPss6xg\n-78FZXxT06xSHZXq1X6pOqhwTAnx3VGx+tR/A2DCsX0vHE6IVThZqyUq2Ei2C0Chc\n-od8y6JZ1CGNzlRkEgL9A0Zp0If6Uq4tXFxnLL6PtiS1b9V5rNfCSC7l99kIkG5oy\n-+SPsGRwVqTE2kqtuzkt9qVn6v8KKoZr0BY4IO3KMfJJ4eidOkB+OZK9REEQguDvv\n-tJfkF2HcMYa1efvQObyvVIfS5gxs7+kcSJxgDVZI5YxRV1OOfI7+w3EW3G+bPBQF\n-gSBwEaLbD+udr9lDZ4NZc7vTeoZtYVNZ+EQtG+6I9GzxJwEgO5LIwZ3//vh/R4iy\n-z9W91r7TrlkHUuOGg1hXMCI9sRa65NJtP4BWD0xO07zDKj0JHzeyKwgxB/ixZF2V\n-kc8EzJSKzRfr+638BMXONcf6NW8n6qIlJT2U2qIwiixjM8AUujGKb8DEgU1vIAn9\n-7esOhceOtU/6iLuJrlK+TzMe97NoZCtt6ktmiAp8fu6l9uk3mr8JYLzIMtK+Asf4\n-np5YLizABwbt9gEretnGpHrdKMN88mPYwsLjjCh9wiM0bHZNL52JQRkt3QARAQAB\n-tDNBbmRyZXcgQ2hvdyAoT2ZmaWNpYWwgTmV3IEtleSkgPGFjaG93MTAxQGdtYWls\n-LmNvbT6JAjYEEwEKACAFAlT4snkCGwMFCwkIBwMFFQoJCAsEFgIBAAIeAQIXgAAK\n-CRAXVlcy4I5eQfyGD/9idtVjybuXl+LXS4ph4M738PrZfQeLDmnwhVjfZiEOLLs2\n-sAwGtL/CC0t9f7K7y+n5HtQoMX52jfVehnTDzeKCjRMs+5ssou+L9zadIAz68beU\n-7BZ0J1rR3n1kzwsFE3vx3IRno0VCTOgfL48AuuzMPxvEaLMxWQX8mL0PCV5/8Yxx\n-ftqg4kQ1JKMt5UTxE9/w0cBMphLTwV1Rx6lZILPJgOxYSQ0oOzQYSmucwzH1uOqH\n-wpgZ7SZIHfRWyi4TjQpU/5T2kMOlN/XdyWsj5+Eq+Y6zI6hq2se1vU3TOc8xN2S3\n-7YOza1onUj4if0rWtkJZ2yDnR4lIASUD+/VP2NoWtoy7rB0vIfzbojfwxAp8WuHT\n-sUTxXd52c3OB+673OlOA+GAg2FfFjR8REojsTbeip35/KmFMpafazVRn+E0c3MfP\n-/iS43UTlcxewRcDrx/gRplmgO0+CLgLstZOon7Dz0msypeSArhX2xEj4tJb/ccKd\n-CR/IQl8q/ULQsHX1LwRj0u9doAlkqgIQdKXou4+EmD1jKF92oJMZ+20AJCqfwYQY\n-9HlCB9SQeCRUtU/fHkAZLPApze6C7a1r0LVIuM6iolWyha5KJ++mj84fAagwy/ag\n-8TU8kHTLSGPYeg5G/TAbr1XU5kbbqfWfQFMK1xtdZd1BaGP2cDC2QGkr2ot1SLkC\n-DQRU+LJ5ARAArDftuFPE+ZhgJRuJK163fsD15aHPfv5s+h8kPFv0AuwVs+D75w3y\n-YGfaRtlwSvK+8EucKOoHI1AQYjTG0dtKJuwEGhQ2qsTWUKe05tEAWu0eN62MOZ/r\n-Awjxqotj4TeFksfyKedVAYSizD0Xj16fizeWFrfUBNND4OgUgD8KM79oRchtzKBE\n-HRBP27JksU8tQWc4YcEJUHV66Pji5OCiXxHXJ+JpqKSKeCrVvrvro+pwsY1I3ARA\n-F4UmLxCcb4GnNq+s76cb2K7XJtWJu5FHeHOsef5ped43pYs35UXI+EvOYNs39XI4\n-emMsI0KmuLME2LHO3CJNBirwRFxui27axZk/CSVE1lglnbb25n3QHvbs/31ASCCT\n-QKZ7+Gce89iow6yG4MkN5W4hLdkGAyNI74b6yAUfugSqPLNSj3YHvVFY3y1acge+\n-H7xDO/owRN1kbz+9VMJZxsxB/oZEyEVAE0szHxXbMBhqOME0Y3O6UBrXr7z6R8NG\n-S20RPet4kxCCTLZOvM/X5FtvimgR2u5qRPHs+zf2VPXIRsJsM3zq9EvmePryGM3r\n-1rEAvYagukuyt68lOWgKP/2wB0/NIFAs69b1QSJS3U4CQVIs2h84Ucvbh9gX9Y0B\n-LbV5mxvDDfC/4Nhf4yMfH/CwZDLOUsaRAjCv/lQuN9mnMz9aYnsPha0AEQEAAYkC\n-HwQYAQoACQUCVPiyeQIbDAAKCRAXVlcy4I5eQec+EACi14L8Vp7tw3tDm/Lrb9fM\n-LHfoOnZiDCGaXhiXqckbTSogp7hU82m1fIy4VwY7DWbs1iIq7QdDJMBuNn174Qd3\n-ZPxHeGwBbR04gEsHkbjXBAA5hMacLvmxYFiPlibz+AO4orUiYu/vlEXhXoFCjSlB\n-pw0kUG8W8yQ/RyE7ryLv5/bT4LkwUWF7/+gdDzLUy1VeaPDKmBupKVSbEACe4QRH\n-dUUqE3suKoJ/GylO2sGtFW8BM7+CffX+nvc8hJWzXdYW5InSh0omYJIypIgnQ1gM\n-MhUdu4gbtYwo44Tlax2mTSg8vSVboYO6pBZVX3IEUnjRHLOCZVZIBFXIFdRrHXO8\n-TTkzx9ZoDmZ/DH+Md1NDnS4QsvFbRO/EeDRQAI4cgGhCc4CTrrJSQv8jtl7x8OTx\n-fnDUbE/n8pLV93j9t1Gd07h0VJSmYj3AR7PiefHS7s2yxS9oOqRayGBqrJFzd2gS\n-+oXvUBC6pUvM68NgNVCKH7HmIM9tFbqgy8kofTsVDkq9TEJRO+X4hn7UDNJhTjVE\n-AVRUdku6CJR6wj3RPCbERSNB8uabuv1lgo41baeepLn+tJNO/4hilJ0zvEoryVnJ\n-ldZ73mHRRRtXoPRXq7OKuDn10AvtYX8y3/q5z6XhLUePFKM91PO8GF0J6bNWrQSq\n-Khvd4+XHE/ecjLOPvLweAg==\n-=+hz7\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "df06e19fa4b109286dbbb7596c86d31fe0f1052f",
        "filename": "contrib/gitian-keys/aschildbach-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/aschildbach-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/aschildbach-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/aschildbach-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "2389d4657fb7f5f225f5d76e08841fd6e21d4be9",
        "filename": "contrib/gitian-keys/bluematt-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/bluematt-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/bluematt-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/bluematt-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "f00dc729d57a2e7b7848324177c605dac9dc8e45",
        "filename": "contrib/gitian-keys/btcdrak-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/btcdrak-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/btcdrak-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/btcdrak-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "928a74b3155da22877d1b6ad32fa2a7cb745e0ba",
        "filename": "contrib/gitian-keys/cdecker-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/cdecker-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/cdecker-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/cdecker-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "71a42e514881bc6383531ea2c82c93998453245e",
        "filename": "contrib/gitian-keys/centaur1-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/centaur1-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/centaur1-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/centaur1-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,30 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.12 (GNU/Linux)\n-\n-mQENBFTjy20BCAC7q/tpPQ9tdEALpDqe8kpVAT5ysOJDLDeFEE1J5O8NuDFuibiN\n-XYkb2nAt4Vdr23in9z0LAiTSgr7znndnab/rOSn6pXbXQfLTHrSnAeClTHVQVPSq\n-m5kNg1vWvNxFtIpZ/fGsc6LLmIHxdgeLn+NOpvNx7RzF/N5ctX51vMxMUeDq3daZ\n-tLneJVRj5tXHRJcjW62cyiNFasYAZ3JC8wjwzr0SOndc7kygbEVCTWNkTAGd1Lax\n-KSJW6TjhBPK7j+RljS5nfx/Tf+OG4AoA7/53593YL7Shfx8rwWVIeF4nS6efFnuf\n-eIj+aS5haGyFvNgw8DE7QUCrPiUxeA8wuXu7ABEBAAG0H2NlbnRhdXIgPGNlbnRh\n-dXJAcGhvbmVib29rLmNvbT6JATgEEwECACIFAlTjy20CGwMGCwkIBwMCBhUIAgkK\n-CwQWAgMBAh4BAheAAAoJEP+V+qlxaXQF8r4IAKnE8D9AOTdM/YvYxpCeI6ndEUUs\n-8NcotpbIBJ67vr1Dsot7Ee0PrmIYOiInA+T81lPUDecJYrnemVefhquiyJ5VJ4/d\n-z2zUKBfxjeOsj/PHgcowVxMco8fNEWQa2fZX6X8RVADIsUnIIwpRFVUcbssK/3xJ\n-k46vjWwYNQywht/ZgFBesOgywyz5GozmwrK6TixJxKk8M69GFz2fHhJjp1bxDZuk\n-Rs3YmWeOcCasoJ6GbvIboKQSPHGyEOCqIuiBL63YMa0n1FU0ooDteNZ04eRinIhc\n-fo9JC66fQrUFn8CmmRTtdZOrZ/efYjQtfLAunCkzSM3p6DE9u4Y7d8E5Ar65AQ0E\n-VOPLbQEIANhxtouZuQmw+k89toBWXw75s+csxKHKZuhw8QntaFyFYq3IOnIeV1sK\n-PRENkWsqDInjEM8k9eZ6pnS11EQ1rrFffss+mprTbL3I4S489tJETYZKHrmmox7h\n-ustRi5eXBEmGeKW0mqpb/9r4okpTaIfs+EJ4C9jj0ghWkqU0acyzanJiUY/0R46F\n-vPfGfHnhZ5TAl3eiL0H2JkF6taG8K1XOLemahdZHE9wJh0ZFWnDDkA1l6j2rtYga\n-jEi/ucOp5GkmumxbFiVgponDBqBpsscRrCV6SbZs9gz3dQNgqe5A3CKGZRuVCY6s\n-djRJelgqCF5+dV0fAT0oF3C/3E5KAgcAEQEAAYkBHwQYAQIACQUCVOPLbQIbDAAK\n-CRD/lfqpcWl0BUSxCACjEFwQSHcfZINWD+KdNMayxyHQlBwsEDX+xQkgnn+/Q3hW\n-9VI3SSSfFV3ustlUa3IaNHwuWzsrSqG6mLG47LAQ6vPAWVh723gVCpyJf42Oms/e\n-qeyn0f/PT/6RuNMXQeHbfddmRp4PFjyKOms5Bmf3oi4t4JSvOS4yABBBKzhDQYC9\n-e+qv6Y1sDYpSiCxstQLzIHKiB5bfZ8Szfk09EyyLdqLGkiB0MFhHoXWwQxKiLVc+\n-xNFj2a/jw0rQVgN5DZgHBWU5WqvS5CWIczi+2S9MFI26iBhCn3urZToaaQ/DObqC\n-qmekFrJ/GOj5vB1Mm014lWjG2X3EovLZ1XkgWI7W\n-=vtNZ\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "6b0bd240ba4cf8df485a8caa689717a12ef6b3c8",
        "filename": "contrib/gitian-keys/cfields-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/cfields-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/cfields-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/cfields-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,52 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.12 (GNU/Linux)\n-\n-mQINBFOHTh4BEADdKsRvmNhX+B+bcPsgMkp8ztwJA5g/rmrOlHQpKOOf4P2tAr6w\n-FmXCChWF9Iq3pDFQ0t0iq5rgisFPyrGVT/VToMmH+/PSLTyIdAlgkRYDMAPsMAFV\n-MaADH4yiAgJ3cdXtysjaNQV5O25ypqq6/obUjZJD5Enn6b/UgHe2+7LTmTNsskOx\n-5s/WPPht79EY1kM4JQfmDx68CsmqeSAlT6yeO3RQcLn/l46cfXiwzMO4h1hsZS1r\n-pgciRp0EHK9uAjF2rjqt8v4SDxwyTnwfpBBulzvH9mBf+HRXWzoTMR4sC/oOZext\n-hKAH/ex47BxN3HU3ftNhCK2c1xcU1UOGSjbf0RdbwuSCxxa7mktEDumvOxAk9EBB\n-+PDPv7jO1FBK3rsJdscYQIL0AiRyO49VfNLARa34OqUi8pOAxKBQ9plO02W1gp7a\n-DVBPI05TZ46Y8dTR2Bc1raAgOyxnXM7jfiQG2gSULiKAJAI4HwOiodaiiHAxDaIo\n-a3mtsmfN25TZUQuA0I0BvHbJvLRlVnyZm3XVOcwReKJpZJV4qRhd3XNrERZdz6ZK\n-cAZnyC/X+Uzo4HfnVSsJk1GpIa4seYyrVCFfHMiAA6SkgAUFbV26KCOv4rNR2GlV\n-l2fVhu1RKOEUJ8nRcEqf93SehRVYdI67LepIPgmIwi0KG4HhoTbIHDAKWQARAQAB\n-tCtDb3J5IEZpZWxkcyA8Y2ZpZWxkc0BiaXRjb2luZm91bmRhdGlvbi5vcmc+iQI4\n-BBMBAgAiBQJTh04eAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAcJJH/\n-6w73cBTiEADIGZSueBFmaOTJCgasKGguHns/n8P94EQBZr07rrgN99Rzp85WvDUN\n-Qa72wj3GNcAffN7aZlIWv4g+fjyr9AzHekjI/7iwwSYIfjfTR/xRUW7czRfKAOrK\n-iwpEzgv440i7PBvkS/AhNdUNkm+cJvaQUej/F2/O52qDLEpHuzvjAUUWlSeF9/oO\n-AjM9dfC24L5k5cVwQvH9noxk3EyuE7BuiGE5a+kKiORrtxiHeUG6GYQxuqrPucLU\n-fI67ETyXa0YSpYm5/O65BKMTMpmkMvv1JC2kqqsYTrO5p158CrKzq2xvpuG4ABsb\n-9KwICUGW31Ndr6TXwQJFa1b7VK4G1g6M1DFkVTOLJnEyOwgYxsXrV5QFpzpAOAji\n-6KcxNGeow1avAFYbqjjLgu9UNuq6b8du13hjkQxVs2NAP1Kd/u2ADwxQHMhZGVEC\n-9LIcLVSP9ShY6fR8m6fwSlJfpiV81uLNVD8KIyvp+pYTQ/FnxoPhPIwalYquBZKi\n-0u38igW75IzZ0fYvJgTumE/8ofSVkutVtrQb21eJclVrJGMNweTlJcJhAWdKkjDC\n-e6mSj8GItKV1ef+eusXSzs/wPyTaqgkELvvAOZdwUq3kobQErE5HOuPEOvcwuY96\n-DcxLexirCGW5wCUq7Db0c0dUjQwzzb5OTW2jdnPVR0qxi29TnOJ2aLkCDQRTh04e\n-ARAAuJKpI6NTCQrjEqe9AYywN8676+fPS5bqXkyb/iub6MXeQdwpH0K42lXAaYMq\n-ow/0aLlvGWCHuJJGozoOWpTzQ+VPbhpdARoLCop5fYTpy8Q17ubLeeODDtr6jtDN\n-lmg+9PBIErIVUnUS2wNZuJRVsfwlLaU3T2v8kQnQ6AEbl/QwyWW9nB8rAWBu6Hvs\n-VdtcBmtHSr9xAGBGfW6rSVhTitikR4lWJPdNJxI3pLaswpLIUIQ1rssKO4glljcp\n-C6nhMvRkDLvDFvDP9QnmwY/A4ch5S6ANPrhOjQuu9njjQ+/ImrJTjAXqHwg5KdTc\n-NKxufgvi9elOQ422o0No3yKdRoRA4kdcUmqA9gNZDyX0ZTd17aNqc42Zt3aYLJ11\n-bLZZp0qnfhkmhbsBZZtaLNkuF+RGPWysxY7KPMm+nHn6f3Wpr18E+T02wi02r4nS\n-HOQI+gppDqy3Vq3ZZNoUZynctiLZVHkqi+WYXqfD2tEn8UJKpht7jrZlNgkHFgT7\n-T0/U4+JmaQ/HltE+IexAIH0GP0Jt6hmRoZimdoy8Q8NY5t/fn9CQNJm5InrHvooN\n-aFmZMvzGTGiTqBqnA/7k9FCUEG98LK11MsIssY8YE/F6HD69R3ISyRvhUbpFvhD8\n-c6zOkEKngTWvyRevrDrDz2yoZ1+T1X350+92rbEc/8WyutcAEQEAAYkCHwQYAQIA\n-CQUCU4dOHgIbDAAKCRAcJJH/6w73cAakEACv4EUEjtFjqnGB0Lru5FKs1obWcf37\n-c4a5yYvOw58dkEZ9hsq34qWGLT128n6R24KEG+3O4CbplAD5Kt2eAPracbPHMAn8\n-TGmC+KjiGlBR5xCY9dD0fn5EbRWOa+Fdcj1DpneaqMl9vLnBbqGp7pa/MwSOc+FB\n-0Ms2rcGJJMNHgITfP22eCf6pvf/xq7kKbUJ3Kjqdc2hWlRMjC/OOeITdrgycfDk/\n-AOzLNqk5q7bYOxna6rWDLGSkCATyQKaBTVK7wRd1VrIhI4vfFqy+BWYXyXJ0pxjS\n-eaCDwbWHX/KW+0qLsmHxFMAyHJPjs8LEwK/DRbmWhe1HzPcBKmpyjqlkuxPjAdSl\n-hP4+IBvVNLf2Kh3uFHehk9A6oCYZGe3lLfQnOxIantXF7IROTmiZZsb+08w6cIXE\n-+r6kWG6vP2aCVtzYNfY+2p5xfg3yMxcxENJki1WSCOq6WVf9IWFzSJu+0+eazD3L\n-3QpZoSX5VvT6x05C0Ay1ert0Q5MyF84Eh8mDqL4PhpWtQhZMp8SG4jqFVgrhM4sl\n-vWGYXGns4tbnNPiiksjBD8TTvG3+mt48sNJIpHThjdWJSZjllYG7jV8oi7HrX8M2\n-LOwWWLYxHkqi9wpmrWHSmniex6ABozcqrb+EgSMnHuSd7glmOJxHToJIudJbKG5D\n-MrD0ofsytfy1LQ==\n-=DE4h\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "71898127ba0d6c9976ab7225d8c71ffc6380b0a2",
        "filename": "contrib/gitian-keys/devrandom-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/devrandom-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/devrandom-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/devrandom-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "9d3f060627ee9cb4143e3b8945a261e90c39ba13",
        "filename": "contrib/gitian-keys/erkmos.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/erkmos.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/erkmos.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/erkmos.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "9c03ff45226c5629d24e5f9925da7210df0760a5",
        "filename": "contrib/gitian-keys/fanquake-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/fanquake-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/fanquake-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/fanquake-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,63 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG/MacGPG2 v2.0.26\n-\n-mQINBFFlV7oBEAC3dRAS7gSWQ1fV4JySD0HMBOtY+Y2oCX8vEuTI4atGcxbwXr4/\n-OElRYhDK6Zirk8rMoKPxmr8OVek5LNnY3gcDffco6NXmZ+wTstQm6oqUxFfgzznG\n-X/ExEVuCqiaPAwdWSKn9tC1GuOqRFcD+p2zmxw5mNH5XdsqaPSEGsKESY1IK+dMv\n-K+YUrfrtexZyb66wCtupYziEeag6iEK/i2x2wewOji6IvtI+wB5FO+YMXw+LKucw\n-PoHUOxjoz6YX3s04UxFaZo4R8x6J9XnJBSB2E5kfsSAzz3xR+zuapXY6H6mo/grq\n-nr3c6ACcbAHnMWwQLYvWzde6iwswhyl0whebsajJH7Rd3G4c1U3L/oj4RwUFmZYU\n-5Prs+Q5PepKAJfBeWCXZtUY2BNFCFj7b2H2NXYFR92Oc2GtoHAYACNeP070I9d3m\n-IeuYhOrOckkunwaijUczq4rb3n3Vaq6YrdwZIzs8fALwc9Th98jj2dCUq0fljpSh\n-UQFnPG83UsNkeWzUSgw+lBeEQqgOqUQQ293MbgRg0mJ8q677Iv+WaFqPKZzXxkwT\n-QCCXhjcBmUKgXIHLFcbfmkR8pCcCToWXBD8CU441cBsootDD7SanPHbpcwZjt74x\n-uLrVoCIyaju0T1jSrsPnm2A/8VkWLSCh1WRAlbjvMr7DwizGnRtzTiB6HQARAQAB\n-tC9NaWNoYWVsIEZvcmQgKGJpdGNvaW4tb3RjKSA8ZmFucXVha2VAZ21haWwuY29t\n-PokCNwQTAQoAIQUCUWVXugIbLwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRCU\n-TTX5rD23agJgEAC0ouDjufjCMHL4DkaVkOnFbHzP+nR2Mq7pcjdiPNIt9tj8B6cI\n-PRh/E+tt2iEJJ4lzlfj0uEqjqexmSBaMgY+pFb6ESg42EPQjRQ95oBoyZfp+uL/0\n-KC3+Hh+EgmZGIFPZy2HneVfusiBUz2/YTOoqFkzmHalJe9Yvl2+dO0SUC7i6TUdJ\n-+ugSr/91hkjQC52LXgHzurH4zOz7ZjzRtZgUIG3oOx8mtEDf46eJ0IUsr+tWJqOp\n-ce5xFh6nkKfS92B7YjGJ4YrkBHC7F9vmbrtIeuWiaxGzVqhHFmLvQe+4xyOpRgHM\n-kcyD5uJNmSMO9gT3udut4hd0yUKg5rdqaUzqsvv19eNL/pZ7aBK2aDAK/yAi1T7X\n-/nrhBJAU49zg1JRS6atRnhKSyd7wRSwVPJAXfVuelHsUgenSdLmSBxRha+9mL6Lb\n-bLK/Dij/0r2fyhBJx4pV6V1n4BpHjv5ivkpgCvOupx8wx3PIxZq/rx+hK+ZBe2EQ\n-7vq8rmLfBkSavHWyNxXEKWQed+mFS3d+Qsoy90bi7gQygIYNZOIBYwsy+qjCZ3om\n-LwkzRjypH23ps7WmiaoenOaCjRYooNL4qtQwNVaDGYwvbMnXJ8Vb4/2j/Riz7+Ui\n-BBVww+Wd72Fml/OFPDFep6HG/PuwFB9m5hmfSzrA01TIdjcWljtTDneufbkCDQRR\n-ZVe6ARAAvi1IAxn9xKQCCqhsoKOiXNbpnmf6lYnoEwGtgI+0a0YQwtzm39P5T8P0\n-esZ65/Re6jCCHLc23/urFPfW9VfrKPmNJncyzlx7OopJ7G1MWdRLEUzwqSaglC6x\n-Zb4r1xR6eq2lBX6CAa5Q+AuAqkoGCEiYBpTyKij4sXE0c+Y9nIDIZhru7EnZvpL3\n-SQvxzFryQLbWCGri0x9GKXZ2ZcDM7jRi/P+iX6yX6sVvOvyKz6NW2BI5OmpI1JbJ\n-3fIXt/R6Wl2xpAFL/pxtYTYbfL6277HWtLDTqIkkRFKh64JdkH8n4G4m6VNUtGEu\n-qP3SxtyShauxY44WzR0YX4rag6tU2Hks6h1JmyF8aQTBAkdP7UrQ0oxZ8f+iG9n6\n-3GtTxgw2NyrqVMx3kBLm8DipyslbA2wCeZLrW6Co0j3pebJsDrMP/3zcmbJqRSLq\n-qnkcxA4gn5j/N0oe8t26Y2WjovndhoR0QQxw8D/BKoMXbl0lvvRAtcnWtyG0COut\n-AGB2PUbGdAX2Ky+uYKrG4uhu1edfV8JZVvB7NIQGzM2P8F9PrDRz7EtG6z7ky/pq\n-HQwRbqwLWGs4QpQmHZchFmXH7pHmLC8i29W+xYhdeUstvx7oESbunICGrPjJOShJ\n-G4191Zg0m/M6jeWV/v+piUXe3YVrgs42UWFusm5ZIduPUfgqUtkAEQEAAYkEPgQY\n-AQoACQUCUWVXugIbLgIpCRCUTTX5rD23asFdIAQZAQoABgUCUWVXugAKCRAu659c\n-wJUmwaduEACCiiRpBeKF5fSaM0cTb97hAHVQJL9Wk3xvA49YuROsSwtCzq9v+js5\n-f/fE+QV/dIQUNwifEPQk8MqUVKpe1lIXwRp23GinzDAnOhfWnECqrMdR0dP99D49\n-Zb7Dd4LDvP9c0mYtnX/78qQilxWmXhzDXcunnPsfCqsrduk9hMwkjmIrWFeSWSAg\n-BEJDuZ4WLuqjni1udth0iZtZYrDaDgX/RWcTFW8QCc5hLsCRcInAxb75AWfWq6i/\n-s3Ibg5tGm4+UfqGbFPuNyy6ow3ggqkovBp6ABMxe8dAYVXSmM2tKWZXBb3L6eho8\n-QKKzyoezqpbQ2YUaYZ8XAdLuumXCtAHKP3/DI1JBefE0mxi1CXjdLK9sE5OO5KNt\n-FXR8Dnot5C4BHrcaF6Iq2sqbhPxnhcDrEwv2mUgruD7n04LKIztAG0A35rcu6A2i\n-IUq/PsXjS/5rX/p4CeYvnTTspXkhXgkvfhWz1cISXyfcNTWBKwOsLW4lY8bi05cv\n-4Axl88tTg2dNYXIxSK7Jtu1YCEsZ8uaT3AAiTp1sKAOcRX8hIOTmPPxMxbIm8yg1\n-jl71ovsV5rAyuVTUouFnljXyuLWXLotUOkmC6DjJUuRaxzt23/eByJ45x94T/A2U\n-iT1oU+voigQGARrDkApXlgSI4oekg3Zgq57y6toV9F7o9A1PMtBq3AvDD/0as1K0\n-wCRZIXinSwW2F6tFnVV+z+vvE0i54yHaskkuJYZRSQ/yJR1VgmW/BtAr7ooXF7l+\n-9g7XOH7D8T28h+m4ABLN5ZDOxfTMZuV5Y4MnELh4dlBIfKGG2kjmW8+y/PUqMMGE\n-BYRmGOD1qtWvFYoZ2ss5yrlvfenRRhQbIYSRz/YiT8OTogaNcYNpArUwT4z+05af\n-kdxx0AaqauHqKRo/XTO5GIZQ6NbtPH6G++2Ie+oP8AyBWEpL3rvjZpzn7jxTBXMc\n-MOMmhnb0Go4hD+BSphgDTZOgMLOLcorjb1Ct2VnajxPZD0aTB13SCgZjJhs9j3on\n-EoI3gTHkRgiBjMBNtw7iaAumIRgrDwGzyuIL6bbyfDnbE02zxCqkYP6P0u48FGLs\n-E4U60GrYSlFxa1MexF+HIPgqWsTOv4D2zXEJYvm1XEu1VOGQUkw7J5RFTDxHgkbh\n-qvmkZ492iW2IC4L9hSdSqiZ5LhD2JwpgrMt8vrCzVitkjYQnXJ6WbWYfCybPsmLb\n-mfQ03i9E+a50UC2SGDf8e3oxImAbbXLP/LyI7oczCxyb0EzcQlIIOtBgl3gI6KAh\n-PTRQGeHCzIOSgUf7B0ihY7qiDeR1OshvTY0wdykdS0c+hzwuS5TZvfY4YM7Tssvt\n-XwbdK0Zpx/oDtRHpuDMGKJBV2LWAZYkEbFsmtg==\n-=3o2I\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "f81f44e874707837c13446858db2fed14ad5c501",
        "filename": "contrib/gitian-keys/gavinandresen-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/gavinandresen-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/gavinandresen-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/gavinandresen-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "b8aad7fd88b42770c4aaab3ca97a115694bcb9c7",
        "filename": "contrib/gitian-keys/jl2012-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 105,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/jl2012-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/jl2012-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jl2012-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,105 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Comment: GPGTools - https://gpgtools.org\n-\n-mQINBFYhRd0BEAC+2VU+8+f9RTPLtl0C815oxaOCA9Tle13xNER8NjFrVwIuFQ64\n-nO8Fbhd5KEEARuMS/lc5G6IV0QxBpDGE1sEjPQXrA6UnX8SDkNGhmoAsV07MP2Xl\n-glN9qqYUEoVD7ueh7Cp3A9rFjg7wcMJCPQDP6lZY4cPgYlE1C31TCrEdAsVVTQg+\n-xIYWnhB92VxOJhk0N0h6xtCQ2MOtYDjYcBndQ5iK7L5jy5LI89YVRfbKtWqWZdwR\n-lgj2JCLeXKauXBI1qbedCJrz5e8nXcdqZt9TXSHo/XhNlqvsLiqBq4aXNU3xRkrv\n-fcweZ9jR9DjyQzefYFGaiCk37R4qLbaqQRm0luUizkCegIuTv44e/zig0im8yPAI\n-WtGnmBPSy4MpvvWiVVb+jHikdQG1T7g9kF6gEmj4kj9UseWnasiq+kkSNE67vLxb\n-uZDfA3QhavRMJbCNEY49/IX6urIsiCLFbe6C7JVWvJ7d5l3MAHE8Sut+ytjX7z7O\n-LFt7YD6loxGAdopEUZm50xs8PswKDajlzWGFXjDZdzQA1tb2CpHUtDkAInYDutR4\n-qA29qtxaBswozzUYiDptGSkBqD1Nus7UAJYkwe2EjeszNPhmIAQXGWx2yWplPOJk\n-ZWDuhQtrDXZikl70q0ekIJ7bxkpMO8xUuhsBCS3Wn6GAtySy0XTttmItfQARAQAB\n-tBZqbDIwMTIgPGpsMjAxMkB4YnQuaGs+iQI3BBMBCgAhBQJWIUXdAhsBBQsJCAcD\n-BRUKCQgLBRYCAwEAAh4BAheAAAoJEMUkKhqzk2UXsbIQAJnXDjhEoKSILJRrKbg+\n-MXP3Rhxc/ThXu5C8yhfYqKblqCaNNfEmrlercJKJVMvjY0tVTXYo8BEJmNN7nSNI\n-su8NheJ9vXacN3XrgkMPuFiUyKj9PGpSsM6Q8MjT0Bzd0pxodk+g0UEjyMktfu/3\n-TqLsnoFPOtIjMOkr/uBzZn5d0AXIZQbAz4Xa2zBW+uR3OSXRRXCRJjCSWGIfDX0Y\n-i/Ea+3Be+y9bMqDa3nPULEkW7+RNuyjLr6QwPZ0/BpTTDcM6Vic2daFPO5B0+o3z\n-PMFmPcEd4nRHTPM9A5SaJtC8MjF/89mjhpxG3v8RqkqCdqdM2cezi/T4YD4jcynE\n-F36Ya3GuuewxEZci/N5ySG5gG8Y+80Wgc1e+sNtvIffHk3Wju2kOvNcBA2TBw36V\n-XCJXHROTA5+Cx4lUxOkQTJoYSVzx852WS6WHeLg1+XnDZvT7ciVIV0ExJQ9C1XOM\n-wjFMRsTWl+vflxmgCeHCIari57Jw3ij7ghRCgeqLp7FIXK5qSI4Tw2eajJpoTKPs\n-wlaO6kvOXtaCDH30FuVhKbPxII01Xi/A2ALtTkpA6mfnf19orQjv+HxX/iwUlpHM\n-UwsuhpZSQYIxIv/BOQnXDfw4TcjnHsqXZbqNzzFEjGurMTlOUX4KeTPscdOLUpnO\n-1FM4JIVybHHfhCH9Mpq+MIwCiQGBBBMBCABrBQJWpym9BYMJZgGAXhSAAAAAABUA\n-QGJsb2NraGFzaEBiaXRjb2luLm9yZzAwMDAwMDAwMDAwMDAwMDAwNWJiZWZkNGM3\n-Mzk5OTE0OGRmZDQ1MjA5ZjA2MTUwMTljMTNjMGVjOWUwYmQ4MzUACgkQf6sRQmfk\n-+gQcZAgApPqnaIIE8Q5sruzua50RFRmmBtQys8sM95ciWYE4QaTXUnlhHl4QR4z/\n-TQTRSBqXpdHQ9HBWrhFb6E0ykDEVx9zdEt0fvtlhHx1ItrZetfiA4PwidnyoDKs/\n-/nt01RGreKSMDGInaQVEQxvEW+A0fwvcCdE8Mh3LcIydohfqUViB0c5zb7rUmize\n-+2Kt4Uth9T+ooo+UE87pHSJcxlcPOv6Dc7KeoUicD8DwWdsT7oxAMk9jj/ut4UNx\n-xOEp9Sa3sFN20tHMqyOZwnl22Py0y4ayJnceawpuka/bx7samg/2uUrO+dNKXObN\n-trebP83+8UFHOo7VGhesuawgwNjWW7kBjQRWIUbHAQwAy6re/3ur/fgNfE9yKivp\n-Bqmjq0eU5l3iT59hvKr7S+6GHUa+YvE9BBsawDSI4UILNQX0YGT1LRa20mC1okBX\n-5SIEpWzoZhybTMVMwS2ZHkUyO6VBAieUVojP3XQHFcDAiBvW7RRhJ2BU+v9DGo88\n-HAYqKEB85P/i/E/a1xUfTWiiIhA8Dd/Hv6pzIG5QvN8XfrMIayLwpOV1G6KvBIJb\n-zyUVUvLyQySiZOyDczrAxzYq7b1qv8xwHDUzyUl6skPqbex1cFWIeiML9EY4DnZ9\n-l3qb31Bhp+EHydv0esclM5XKQriSg/hsnJOLlCS45z/YhqGOCoD8QxXUJ71NhD/H\n-QR/AvGyTDcPr1/U1DJ0lG778wCOEe1Nad0G/8rcpHSY66RZR/Wf318S7uJt0mUw2\n-JMt1BRxfbdgJaleUAqYjNQAMDb8LfPO6jhQnmf0nN99dpdzkwV/drVRcLDEnupDr\n-keBsokcuohzE0gbjUT4cNc0DuUsIELMTApG8KQCgzJy/ABEBAAGJA8QEGAEKAA8C\n-GwIFAlbi67wFCQGu8u4BqcDdIAQZAQoABgUCViFGxwAKCRDunlUgNL4k0qceC/91\n-2ocEDwiu9kpBGCW0HD+VSyMVjLWMiClk+jPngvNEt63ZkYqRiy7fwnPuJrLFlaL0\n-E0JLIweihC5AyPSJT1Q0LnOwbqCHn1s+9RfIodG/v6M48Ez4GffOtmYwW9KqogK7\n-4FwdIx/wOIYDeh4rT7LRaWBNcIXO8J1+v/83u+Vx6TWKZTiZKQMEV8VOJWfSmTCE\n-6HVgUYvLCPB6DI+X4aVead1kayKOSuXlG/l94B5RHlJB/xQXZd1INyrZetTZxYzZ\n-CBhIWaZ/ji5vqFot0xVNYplRkbg1Mc96X+hwee8eiB/ySSWxUV/DDkA5ZzuE8n8R\n-EEjzqazjMNe50P7XKVg/eBE+TpgCDlqv69dqnOF326m6T3+FH/LDOHguQfB7pQKx\n-siviqjO3molBSyMHL39XFWyteVbgbbSaTRkpX//b7dQoFMiVhigcM78qoymBi6yX\n-qwpN13JoNuNJhEOwex5eEEUCVibFReUkBrYoGnWbwuOxiLORx/IbuNYOvsTGYEAJ\n-EMUkKhqzk2UXWScQAIvAgEpQpzuE1CWMBWcM/n4ruUrOVTeo6dYpUGN1LI0758xm\n-4VI47I8wPEy4pAbdPcqoaNnMcA/NpSYa3hV0svQDLqT96qKTrN71N1gNJa+5w+KN\n-rwev8MRpjuze9b4dn3avs4L9f0fkpzjSzezKwVb7loFSZqgKAaI0aSoOUTec9+OU\n-5ymgkYPEEF12ydkyMzLwyKrtEnIqgwQpjYTN/3P1x7Gkhv+E8Lz06TSga84yVy5I\n-5gO1Hklc3MW0J9jPJe3uALUtEh49KxCE2rdbIX7YbkxWaHHfK98Mu998IXr/4eUe\n-Zhf2CLC2cuuYbk1/rOcxPmeIJKa6S5PlWOf3Y2yLRO0VKcjD5pcGxiImoDVXC4VM\n-hztCVLddjU70c1ktSIBQBu9gkpPcECrzjYtpeAavOUgmpP/zQ8X2NGp6+5n9Wwii\n-tAgByNCg0s+PqcAZxup34b3ZY/t475tDlAmIOovH14Aa8g+0Ketj++9rPpmg9kGs\n-sGmn4mVItClaA7L9vZQQFnSxjyfICKsSxBhqded0lsinlzBfXDEh3N6fEXh81/Gg\n-zLUmTlkhcGaFXplYqrUIlkdO9PD4R2h5P6laLhK2dAf7oKavWHZQp02Yb5nVBiDc\n-KiVWKBP4nuTkWZCG5R966wpR1IOQQ3LykSd5SstcZX6iTpv4NZpCxI4CXpaCuQGN\n-BFYhSHABDADHaEJVygBdwU81c4YynyTOnWTZX+BR3EvRW51GcnfvjqkqgmlWNLET\n-JkswQ8+s0mjKGVnz4dkdr4cUbVegj/St7wzoO+m5mYIDMJf1j83Vo6lTo9FJFzbc\n-HrYC9RS7NkQmD7qzJz4KY/h0n5szFIC/JpYECBNzYrJQc8m2kZiSlyUQJve5/I5J\n-iI6QnM0x4kixNe32GITmKw9s3E2iRf6yXVlsrPouNS33lPXKtvmO1ae7R+G8Ve+D\n-JDv+TLxccy2iU9wuz4I3k20+rlmEwk17feDhfleh5Q+qjI4vkaNcXFa5coZE0HyW\n-SwAtLPSOv2vWkuFeYncXRyzg/CvKR57i9wnqMzNTMt3bHY2HezE13bHln5B/Jqr4\n-ihhFQBqPG+UZlGYRfAI60PLh2yftX5xkm/POiLgEKF76/yIZI8wcPzzurAhFaZBp\n-8/MUv2ZJ/OUT4rdEVV+6XnrijNqVBU8mf8BML5CvjyhsU69yf1mvpiLQr34FNEcn\n-JekDGPIk97cAEQEAAYkCJQQYAQoADwIbDAUCVuLr0AUJAa7xWwAKCRDFJCoas5Nl\n-F8NMD/4hRoOKENEq940Z0iJg0TDvRvRnaIYsbneRQ3yg1DGVIQ+4RHmzQdpN9MW0\n-5RTRLqJsW25ydWwh7y0O/oBRjaoDRAkMSIyOo/Fy+E9WWBmAwzeYCi91MyfetKIO\n-ocrXxpXXKnotAFDOgWGF8K+LlTDH/biOrd8ftgOVJWhz3X04ma7xvT2tQTqfFdbt\n-EivA+jFExq3No0Iq+Ctt/e0H2d9np62SeKBVdpbx9xAc2tPKKDSl+FyB7lj5CK5/\n-FKhotl2bJhVXET48P6e+bFVwfRO7o48zuK5CJVbbdjhavQGhQoxfedW2dn9y7QoM\n-qayUuVIhULE/k+y3jsJBUT7p567nSdUGbc3uKt1sfPKYTdsFbHiTRltXmsIiv4bG\n-PslbXSvOQblFOXWrAE22CdKmGzhlEiFnbviZCCl0BFf4CwEVBJ3p9Lcoir1l9Aty\n-HIIFI3z1mmTz4F9BMbe6saNwBzO+Kh4+US5NV/hqvyz0aOLltb6KfI8WF8kOa1Cx\n-Djz/DTHnvMWO/dIOJuKsThfuxZZq3R1w3O36RB8XzDT/8NV86gfQwN07NWz1rdy4\n-60fK36EjOJDqm/434/BDzWh8TqmnSamENxBTbICmWOj/25M26tA2S9zcPLJHTGMA\n-3yL3QlBtjWY2uNqr51cnZHgPKxBWzaRvcrZ+lUq5EG+F4J7q5rkBjQRWIUitAQwA\n-5A2AhW9DFxVsM105WEErD2NuM2rvtq7dTwArBEi2KdWkSGQvCE9xgyH8u5AEWxj8\n-XXHE/rfunW0d9oF7Z9FbOuV+1HQOAj5hQQWLWHERwZ4gOAqG8ZKAbuwTlqitdiXE\n-PZiJYZSq0NXtngyeTx7XqzQSatfFOIQLzIiwPQXX0Tt+JB3B2SN/D2NP7rubzfS2\n-Bg0ErhV20fPDl8YloEJFfj9lpF0ZJnJ5hXYP9Fl4MoPkyBkGPrJPooZ4FqUFHDiw\n-mttzP1BzFlwpAPGpI0NrkBdBlfFAtvhjreeB5Z4VYwt1xqoXgI+jYXAxoMl+rtkK\n-FdWaoT7wHwqDBeBWYXoyXA2dYIY8Ux1jeDBnREck7vaXhln6zXqMAQowE+F9OQnr\n-Wgf/LoOn5MYxsBDY9mPAO8urxUDE+Dq43JBXlS+jybMNZWdtkaBrIde7dw9IT8Fn\n-p8pG78DmgPxmRFH9QoypTqMfB+x7ZuB0fk1ud4ut33qLo78BWZoW0H++13CbSmrZ\n-ABEBAAGJAiUEGAEKAA8CGyAFAlbi690FCQGu8SoACgkQxSQqGrOTZRcNQBAAmeL1\n-8Wr7vuvL5dySoYmWqHFvM8gRUwIGza5c3D29NYZJcPJRRkdGCV2IXEuUSOLtnjAN\n-kTM1TVMMnetqNR8Uryr7z3XjqYLnVwGqOPnFnlkE2zS3pG8AGG6OxxBhuEMvkwcd\n-1s3tWUlJYRWi1XhEjVZ5Km2pHsVxvoXeJCUVsa8nSXzqF8gOLm409NFMiKkp8QOG\n-heEV4yWrHkySi1fVfOdrHfBzu2lUmHGgSbmJIpLcK+cL3TjpJ+DkSNbniI13I/Eb\n-PO4Uai4a3QYz6sspZ7UzF/pjY5v6WpWXiVB5PP2Y5BrMUgWRlFxPYTc3KiIHUYVi\n-IjVtSOsVaRCHL/SYRq/qHs63XxlxKIhhilbR4OO+CvJ6N/vEpSbx69SqlxgDArZy\n-g3QQqerlLGpSFim9iWk3QBGWtQ96Ek6rjLLOn7b34I6bxXtfcOEo7gl0Y1TFkfOp\n-nsXAcRLrrXCpAhgC/vIQRTMKEcC18kj/vY144DwefzYCBhbI/rCSohAq8a/zhq2T\n-E+xlCYy931HWlUAGx/hms/0q+KQ712Zgk4XxXEx4RZiv3zl9Uph6c7SXxAMb8o2v\n-PzAxd3ShNOnng9hAl8zk5O1RZPa5u51ppkO1FsJ9zjb2Kvdg4ZEBtK8jETv9ckuq\n-yj9YmZZSRRQ2dujg81sLQ9CrO7WB3IGpwh+4lHQ=\n-=1irw\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "3831eaea114f77f30f9638e6772f446055f3c68d",
        "filename": "contrib/gitian-keys/jonasschnelli-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 110,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jonasschnelli-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,110 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\r\n-Version: GnuPG v1\r\n-\r\n-mQINBFSBrDIBEACrZEqObmtlTf7fOKttE39qqisFfMg0VeEPS37uETMGYsgTEvzv\r\n-kfMsXCGsGFLQ78XsHqUeW4uQrtpJH3nUP/Sua1Q12K3lNKTSvVQyEpKoPJwXZahp\r\n-jm6GA1ApDxZ/KlmxyobR3X0urnMYNZobl5IKJXlxoKGl4OkGNeFlh42pCXZDnR9n\r\n-1Y17ZcDdybkWcqPbDAz8ilOQcFMhDBFg3Di3IVMAaDZP1uwWFb5vx60YB5NhkOpF\r\n-nZUH09NJx/7u7QdGPSHOdzW4Xo1HUYtYNDkdOvgZtxpbYEFIaBtVBURMUGwAFagA\r\n-3a6qaGnCBWEQftyISLiqcKqKqXudOg/cLa1CAiQFkz+IBhY9BCGDRnB8Dcae6EGI\r\n-Djt2lqZTuMSiheTWeNFMGBioHfPLedcwae8KflrIBC+hNS4ay6HJdIc03WMQ4JKK\r\n-At8Y8CRLym30/RlqZ2v8CHYqg9Ddlz3+g5JkRKaJTQwFRcX46/tAX+I2NZ8Ra1ea\r\n-rF5cRHuCk/oaw5ZXYhj4zJO74rjAoSewAARlrTMSM541atJU1u6aWT7rNiF9QKIj\r\n-i8vEufUxN0YfdmvDD3OXwbO7GnfWXS4sPklFIRACp+Y4ib+QnRY0/qGE0yh3RAG4\r\n-r/dyIQ1m3z7Pc9eyPKAhE4S7SxAwoR4yOqQ5NAfZXgFuqWzkW51gkQgGzQARAQAB\r\n-tCtKb25hcyBTY2huZWxsaSA8am9uYXMuc2NobmVsbGlAaW5jbHVkZTcuY2g+iQI+\r\n-BBMBAgAoBQJUgawyAhsDBQkDwmcABgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAK\r\n-CRAicOMMUic59iKUD/93DF04C3lptLjtrhyd4wgpBMJV8yzagGyG+Wk0UR7elQw4\r\n-F1MIvEtIFpuGrcnNfKcqeGGmnnKFTeBjkmgcYvej2fW9XlRA1HgIS0t0ttDv8uVX\r\n-vy1xVj1qISB+17EiftxJjCOl2pZFEVpLQ7sSgqnVRMsCS45ag6rioGxtq1j3ifQN\r\n-TENnJWhzOXvwzZhLgsyWLjeYvTDbzfAQLpZFowAMibOwu6ObCkn4dhaW+lI3AnPu\r\n-76pLsrOljqGvXes6o2d28vjqMrlmsz2xVEJ4bnRPUbLv3bUl6t+19XpiMj94ZCZX\r\n-/kvepzSNAs+aYvoldFn0/8haU5wIDXO/zgXSlm4KnhaDf1zutVq/Ng6TGb66mZKc\r\n-RoiGHnnuQ45e7VIXRfOmgbbUTUIg+h4YvgCTR8dMoOWpd5AL8lZ3bjYVi1yFd+p1\r\n-dPfrrnN9Yd5ojoZBSrV2j1wLgv7jRIeXL5dWzeAs/JBzltAHWO+9O6NsYXtRTUky\r\n-eQa+oBKG1OsEXf63k8PgQf6Nw+di3gy23tKEiCz8lbA2MtekxaZ9Xu9CSEEPIH7t\r\n-Aoki6Ey6rD1NUZQPuxQ3aCUTRE2JK4b6nPuAsOEv+cZL0VxNENpbedtGPh4aAA8U\r\n-9yvBykWIjRS95k4NDVKIdzhd1geJsUJZq4BKh9Atf/kI+Gb0sqq2Lrf8a1pNX7kC\r\n-DQRUgawyARAAwLiAxqv7PsdtJg8tBO+dAnTYtAtBHn8g5GlXtorymB9Aqy0Nzpd1\r\n-de27dYlBdlWdHZavMh27JieZ4rk++74SMAo0PACp6FDnfuu2PmJZTr/Bzvld+B9+\r\n-lOZrMWwDIVSW1npJGUjF1rjgPjvmcGo/IreVFpJ0A33J1p/qsYZsLTXTDDoz0fq8\r\n-3XvwTlkTOkuk6Z6LPo2feDHYydUmdG+9MrgIMpidvywRHRC8nnkix/aX0S72kZuR\r\n-qvWwSVs229gtfuWHfvmaQgbugZMqANla3ZYdzExhIIizu7qQPXSYfhsCoywWE2So\r\n-9QXZIiVJge2P/hUr2gTiRNTfmhupDeqb1E+i7x9txTrNc40gbTu3qs3/fjKIWrXw\r\n-Dy5tuZsviLQnEQtY4sEnHl7oL1crOuIHjZfgZfoZ5CK+jqb2b0B9uIm/SMl6Kt8S\r\n-m6ZtK0QTjtUSIputPEYdLycdOpWDDtAHrWkTlRzKJoLG4hsywBAgQe7n9nLf7Zmi\r\n-DhXyXRKyJuuuG5mt7UZhjW95loFFVcGXHIxNmxVqNb1YaG3kEa9PdQMoOc0hRZb9\r\n-77yaGfpLV8Vo4CB1eAuVU0UdNRyChrZK5dKXBN/0uZq5HgpI1GiK/C3YUuQI3t9p\r\n-zeJYD3jPGYCI9xxLaqt7whoOILPmZ1KW2UfXTvcMgBUMkFpZrqhTGscAEQEAAYkC\r\n-JQQYAQIADwUCVIGsMgIbDAUJA8JnAAAKCRAicOMMUic59oqeD/9SvgUx60AhyCPl\r\n-1G64eII9M2LU4vmHj8g6wnjh3xaWXvlQU1xnz/5I0XrlbHm31ExEHK+7Zla4AQ/P\r\n-OrJhMNZh9oes3iOh+pAEn/vtixddM/oiivLBxMcIzq31PS8lZWrAjqOX/FFYa8GM\r\n-NZI0bNWu92J7cL/bRVwsIVUXh2DkUu7wXwicNERYkKDTBaK7FE06C/hIGTwmENlR\r\n-b1+H7e00nzWqoHyd0fhG7d8RaF2IF95YH5+r+aS20cHVCTI/0Z32FmlnCA6QlkZx\r\n-JZiXKssHLpegeegAOOR3t2keB5rN4J/8KSzIEWUG5sjXkshMIM7w1a6urc/iE9PW\r\n-YGgbG7Wt1AcEO5cnU72DzoENrOxRKdFLZWemLbncLPTY2GERPutJgDSYvaxmwnQy\r\n-eGsnRIOmAMgN9+8NEs9wZnzrYpkvk/Vw1FwNcCCUYb0ZPYoRVRhP2UXYm7OxdKdk\r\n-zPXfS7Uqs9oto1FiD7iomhtBs+RW8ndaO9wHGoCn2/UAD9fxNIkTQvK61amyjGX3\r\n-gdwrOwt73I+wjgt78jmZsKfnPWYnOIUg2/12P4iB6KhWD8MIIeFLl9TFfZ8f06WV\r\n-WIUTcA4cgSYgGOScxB0En+B3LDCkmVabu/JzBedT9N8rXvgdywk2UR4vKqiyJT1O\r\n-9ArEfToN7J0gclhUoadr0im67BGyMZkCDQRVXu6kARAAwR/cg0kJja6u1YToEM+g\r\n-SOOPZK6Bn745y0cvf6+YFVefLcManUCyI+/DWZhO+D/im569MApbTz1qdaLE54Kh\r\n-z2CtOJBlWP8cjlnVZ95hBK+Z9COuk60dXI7DySRn3DVryNpYjRCe+8SBTQJSj8b0\r\n-JEk5VVYPYUOIc3L6g7LBL2/ycxV3LVFTQ/A9LGBev7y2emgC7lqkPPoDU1vJeO1N\r\n-4G0nFsIxuml81pfgi/2aMbGF8l7LVAI8qMc0c4RAjL/yTPzVX5qq5+zAaXMcyhgy\r\n-yqOvlXlCG9aisnmPCEiShxmLvGfGdPmi+apxZNUW3384vVcOxzl1VcU6sVZT30/a\r\n-Jaa8RxZqC6S5kOr7uPO8CD1wB1rXzD8SA4Adcq9SwOkVE7QfnQi6+BIgdrsLKUfg\r\n-2vBjcgA/IsLETlnp2792m3w01OKe2/w9Uq3N45lWVTNVx2UcbWAIz6bwWoMDJ1DN\r\n-B4XQHb5Ag+VI7lIGr45Ep4ohOfIcpBCMa1WVGyTYoQFc66mPZ2MotADOHtgGpm6v\r\n-ZyJEp2qWj0at+tDepf0bFPHmGGhVj+N4HTBWMzsu3sLCAh3QWStr+gkffUl2CsdG\r\n-Y3RL6kVkCCW0o/o+V0mc8ZV8kAtFPyYGllsP9HEvjeXkHg+DAvRFZhSPI1mxGkGg\r\n-gZlEtHqZ9Lofoco9wedCJPEAEQEAAbQlSm9uYXMgU2NobmVsbGkgPGRldkBqb25h\r\n-c3NjaG5lbGxpLmNoPokCPgQTAQIAKAUCVV7upAIbAwUJCWYBgAYLCQgHAwIGFQgC\r\n-CQoLBBYCAwECHgECF4AACgkQKdS8tkFvU+ytjhAAwQqTK7pSjSSK91QZAvsV+CgN\r\n-AzC8AydcdpWAnJpsE+nw76snAexMctDfae9uPSGSVM9PAgouUg2YJxNd9RzPCv7j\r\n-vx3bevO3ArNZxvdKSXffPVzt01j53z99/Ltmev5rpIcNQk2nqL3iZaZ5O7Vxre8k\r\n-H5KxncFCUxlnX/stLz9WOmnIN1X5qVq3lSzh8xvm7DuyOmi1Z94GHCW4BHN6wxtX\r\n-nXqYeI45jPcbuJWC8P8qtNicZ0N2XLjpAoLSvQ68VTrvvLN0X2HT9Ol9y5t7re8J\r\n-PEY52TvrPCLYz4hQD0fPe3w14LkcdbWTjJwQ3Y7KWd67SOn+l8VDPj2jT0yDBDG2\r\n-YazByLqV29SgXm9WsfYXYF4FB9NSApbrAmhTWVa4K4DFXrLvcIpaIR4Ii3JQZDag\r\n-2tO1VTgxF+10S66qrwXwawBbGfDVchWgSi9T1hNn2wgLypsLN1ZDy7ixPCD+SHHd\r\n-xgTN8yv+/WNRNZ+LtUKNCIBHQmUBesNfN+wOrvOoWPAP6XjlUIlA2RIH6zKcNbDb\r\n-a4jjx1ENiHAlapVxzPTQiTfj0TDRXBdjboiswXfkN76upHdgdMdeFz9hiH0PSbxA\r\n-TmlmA7NrsENHLp89SB/gnGT2I/lLP5/DsoN3Qv8GCoy7aUNDT7abi1AeoBVVye2c\r\n-AL3d+hDPgOzJHjf0eJGJAhwEEAECAAYFAlZFyF4ACgkQInDjDFInOfZtGg//f4xQ\r\n-PvS6gQdIosesV458LtIUnrqdPx/8PGnIbkObSzjevEoj3RQ+D7PHvF57lj6m45aB\r\n-Tr6huXC2RQzOIjRXM9dYi6SVZzQ1xnjMep72ylVYawQS3VBeuQbhU2BgYTeLa55+\r\n-0sHBA/hX9ufH7a3UvSTgvssX44SH5mGg2h4I3O+4cNQIDf/G7xkzkJKcQmATRmIR\r\n-10JaaBKtx4JVNVzCWTOpEqW6/QA8X94LapK8Rh/mhKyd38v3CEHI7hH0ex0o2mOF\r\n-kAsPY1vvfxWzGKMolJp1b/1FPcb7Fl+nCoqlfnv0cCnZYsQvYXrOs/1Kj0anv9yR\r\n-iutEp2DyaAnhadadrFpWjXQNUeYtFlJ1aC+6HO//uw2spKFqcQ4tTvu9HgHJO1gn\r\n-GTsmDskwXqHOYNvH9QjtwlhPhOWQdHgLPrWBiUBvkT9H8uoNRGWg0VGA4J51IkRh\r\n-0ZyoLmRgejpj7SOpwLX6gemprn0Z4fgohKyj6z4/Bop2gliXSPB37qdun6M92g8m\r\n-SkxaEXF2ZyIXdeVRT6Xgp+zoGDNbMG3PlhZiFFCvH3Hk8o9zAz/65de6D+14EHYj\r\n-WBRKfu7jaL2RSwUSRwRAAYKwu6kgRy8G7+4SihuSHT2k/90il6iwpzXdyY7qQXWG\r\n-VxfrmGWZLYT0u7d+EZ1pc02UKYCFptlVCIZtaQK5Ag0EVV7upAEQAKpWFoCqFFqQ\r\n-5xH6+TFvbUFWBb1dWy89GMXCkmqAsoy8Ss2Ru8gNuy7Xt4l1dQhVpN0QWiuVGkEO\r\n-f2PmXQhnLquaSz7XLZjjdO5E3kYzcwOpIbb2TCWH4QQtHEotowRslQAXAZ53jN9u\r\n-NIEQHCPPBNocj0CLQmZl+av1MqRJrRcYzgkPIs34mBo6iVoRrD5CkSohbz01BMWJ\r\n-ZLk0E+JvalML7+ttiwu+gI90uRGiKEz5xsDMtyx0mAcAm+/EjcuQbhGrD6p7dLKv\r\n-9nuUU/T743N2LoDTBMzvX/JXjoQ/uS1nzuiJrc/vYHqy9uucgviuYWFH/Q+LhwMr\r\n-6tjJYUiN4JIQ85OLvq6g71RnpWzy3ce25HL1YWbLNuzi8ZKIB/sL4LXG2iTwwSFk\r\n-tVjfAc4zP/VWpRC5VbxG76atRkPLatgA6b2sawgQ6L/7XB5Wd5F0bJc3ndwPBKos\r\n-FFXgzOBgOkI6kYERQo8h2GzWfU8LWxl0a420ZHEfUZoYmitg/evA3v+23FrCMGg6\r\n-2cdNzU5/mqsQ5HWktTQ5BZQZyn5UT3zpNCOVyeZc/ezzGXcWbEXOLQwDcolxjatL\r\n-ED3eNA1OMQD8S++FPPGCukIzCyYiPq49zJCTMCWd3qTt2Bwea9xOQnoetCTU9goX\r\n-/eEGj/1zQDAXCGOVgdd34VrOX4qtpmp3ABEBAAGJAiUEGAECAA8FAlVe7qQCGwwF\r\n-CQlmAYAACgkQKdS8tkFvU+xj8Q//VNzFYM/kyHSa0xio4e8vBZA2vmR8IEUmtOSR\r\n-zr487Z8W1dapGxR7OLQ52oWdRZVpG1B5rCuJtsWbjdY94Y8RpcO6FBemneGebBhu\r\n-UKc60qwEanYnZva9PEFNyBzpj3xk3Ms7K4O2dZTcXPGj+hlep9Tjo09sklqbKfgW\r\n-2fCUu2EKXWwUrnZ2LZtb/Ya8WPCrsbJFk+WbrLhWt7jIsadVl4AfblcgBGb8aN98\r\n-GxnYOh+TGSMJtq1NSfchQwLHrpTPYm4McAwOBBYDdA+ik3//eLbwRiX9szFk658p\r\n-+4LErMBJAKLreSluBkqOG3AzT22Hdffvl8G2U4WhPPG33NzWomb+wKohjjzMVUlx\r\n-YRCO57wkURqEW9/+a4riuBWGQqqRsW1wHEMu1lYdAhLJ5f0s3vO/fVe43ktaXNjW\r\n-6k+mXDlIdKkQgQ736sBk3DAUc+YcmWmStPr1+TtT91eC23GLWP7gVDnNGEOBOscw\r\n-U+m1bEOJN2duAMJSRK7U0r2ipmRKDcwK9XmVpJcTePfB2l+T3RdHEZIOlaTELEX6\r\n-WJfpU4Kc1KJeKdp+l9gf2JD8eOZAlwxA4r2wxyzoCVg1Bk3XiBfoI7Gl78Wysp+/\r\n-ChQcErPJWEUglBfrESpqmjxH/qSy6yjyNmd4Az2ii7IzWILfuheZR4drjHQj6mCA\r\n-S5rowLE=\r\n-=ZVPf\r\n------END PGP PUBLIC KEY BLOCK-----\n\\ No newline at end of file"
      },
      {
        "sha": "88d0de1503bb6a6bed7710b68b5526e85a855812",
        "filename": "contrib/gitian-keys/jtimon-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/jtimon-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/jtimon-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jtimon-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "e6b4c98f0d8255b49dbc400433a32275c7e70f1e",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeab66f884767c7d96e70e9bdd285621ec8d6cc/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeab66f884767c7d96e70e9bdd285621ec8d6cc/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=faeab66f884767c7d96e70e9bdd285621ec8d6cc",
        "patch": "@@ -0,0 +1,28 @@\n+152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n+E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n+07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n+912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak\n+C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n+F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n+C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n+BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n+9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n+E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n+01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n+D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n+D2D1085B9425F9DEFA06E7932270E30C522739F6 Jonas Schnelli\n+32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n+4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n+71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan\n+E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n+B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n+CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider\n+9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo\n+37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n+D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy\n+D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgium)\n+133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n+ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n+77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n+79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n+AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami"
      },
      {
        "sha": "eed232a8722de569dc75dc97fc926e18b060898a",
        "filename": "contrib/gitian-keys/laanwj-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/laanwj-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/laanwj-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/laanwj-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "a2d34e75e1c16c17cb721633038813800dbe45b3",
        "filename": "contrib/gitian-keys/luke-jr-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/luke-jr-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/luke-jr-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/luke-jr-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "ee626500a482448cb2c7717ba352260262a3422f",
        "filename": "contrib/gitian-keys/marcofalke-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 69,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/marcofalke-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/marcofalke-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/marcofalke-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,69 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1\n-\n-mQINBFZu2toBEADGuBiRutibv2SlW/A7vBGeGA0n58coQaPkmi04QGMeGxdZyvad\n-h8olkPO1q5B0/5E1olEjs1YquHTjSjerLz8nUg8K5OEu14KtCGvFbmtSFW7fOUHD\n-/u+EykJrJczqcJJ31r4B51L8CdS1ODdBbinQRlTjtLq+pE/fJAjHI3iQ2E06vkpc\n-BRVA628fZKHIcd6uXZBrDyAcKtqq1TITlcYoVlYbvMrov9bPz1NW3P6pgnO1S+UK\n-RfkhG+N3bC8ttsTXo0aevz3klaVFEZ4Oo4N8TUcYoYDTZIfu/Gk23r0hBONI75IE\n-pbF8u+r0M5mpXxCHqmrUgmU33CBTeuCZon5r0iEsweF+ldh5rhEOhXWxHcUUz62S\n-64XoqzuOlorpWzIS53oyVTZcH6XszF+iLqSuMQCgOYhF/u47rt3Vh9D+TYJcnvGd\n-0ozRuajLIRGCdVlKt212ER9QLxZ6BTOePbb+g99I2DOx6heSUDzwXWKTxt00Lr89\n-LyBFa9kj2fI0BNuzx9XI0l+GK5M9xkNi5LwL5gaLsPCJHEEPaG2pcBIBbw6hjIka\n-L1fgDWng6MQ/eml5JsyA3G3J07/xxoVPaN9vZ8LLO9BEiz7e3Oss8a3Mw+SfsMcH\n-mJJIFT/CguJCxW3FeKs16XiDpO2Eg2WRoMJMB+psdfgo8e2q7dXIE6kCtwARAQAB\n-tCNNYXJjbyBGYWxrZSA8ZmFsa2UubWFyY29AZ21haWwuY29tPokCOAQTAQIAIgUC\n-Vm7a2gIbAwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQNkiogvQxa5vgkA//\n-Q200J62bnplhyuWMvKmpCNFG7lTtLHmwVtZmvBJiHsRwe42KRWKz6IaQgEHfBMCU\n-tSra4i2KY47j4s/kyTgWeQooH9Zxh7c4EMeyOrxpqPmnKF/0tFnDyk9SCqbrrUQ+\n-VuL9/JrZ3zB74GtRikvWXS43cuBheKPZSwdGrGWtP74Z48eKXa8mOZtDfQJACqpZ\n-lF2Hv0GOFKDNfaol6BkANpeDv3orhnysY5TqE8iA4VuHAL2MDmWg68Rb9sjPoj7U\n-TIYyeqiok/R56SkN+WnGGI7l4+pk8pBqhkjZUjVTEEABR81Vu+Rn8OxTqpKu6gW3\n-YACXnk/kXYY4I3Ri63eK0BQEeZ6Q8nrPhqHYK7fzlbwwL4Id5bDJpBZW+a6Hvlw+\n-zQXpObhMSxtDJZzEonqq5PwJLlkLPU4sbS1tuinCdAII0Qz0Tv3Nwvcrr+KWiNqr\n-vf1ed7CecDcQpSqHfhhibgykLfdAJGNpGxyA4yhOUHax4TbYZctL3ZYXRWGrF//z\n-Gv33w+8DMb3zM+BP2SBR5D7MFTqE2X7bTn/0pRnfYObjgU7+pT0bed4SyEY2mnqb\n-ikPTKfz/g+xLL46lMaJKLgBdS14A6+k3qVUDaBNMb7crSQlutmU3fRhNYq1KW9IX\n-vEI7YuEfMa6vj4rLW+68CKYBu2pNBSQZ9LHedx1UM3u5AQ0EVm7hJQEIAMTDtNiw\n-0WJUO8T7G2vA4WFHbvBoGM4CH9LaOm0JpH3L0DQ+XD5EWGICwlpkoiQiRPpGSmSc\n-KAbAgtfS+a91z4GSWEgL+q9HqVZO22yQSeCbtbnJs44BMJzgMcVxiFOc0JQU0KPR\n-zrT2TtD/Z4ryOvI2nuepv3aRz0RSQEsBnhMx/aNIV9YbRJ0YofC8BPReK5hQ6rYT\n-V2C4P0RoPCdjeGx//0Ilg+xTbPSG1urSKVUEz6UCT21MaCBsyxN5Z+Wa2K9F/894\n-y+TsWMQQcUYZ57DXFHM1dOkfDYorVATNOnv3dIJEjQDU0dYEE0yNUYG5nu+UjluJ\n-LG/ZTiXhkNQla+MAEQEAAYkDRAQYAQIADwUCVm7hJQIbAgUJAO1OAAEpCRA2SKiC\n-9DFrm8BdIAQZAQIABgUCVm7hJQAKCRAtfyNy5Q/hN0XMB/94V+GgGRgCxvwdAT92\n-RCatOJcf1YJuw1aKWjAiib0FVeChZebZYqW+jwvMkXZwxlVFhcpFlUzAqCRwcJx/\n-QoalF7u2yTL6DEEGcC8bUKrhtXQch4/D28BWJAJlR/7bItdWMIuw4WV/8s97t8Ca\n-Fn2Fc1T6/B20VclsxoeaAoXZUcWG9YIKRbEaogt3LxsRjgQLZiIicjRl0C5YpYDt\n-JvnENKuLwSRte6gKkuUi7Xw4iIP1aEwTTdZe0km6If6pVPwCK1cU9xMpsMftT1Fl\n-NdK/dJbfWoYrS24U30XvCxsFMogD5jJ+PiXUoXDBjPJmDiXrGUDR+je/RqsUKBH5\n-zyKaI1oP/A5Dq/EU5ceIfMPaS8iK4DjgwKdh8zuprDQ+JSf4iD1b/HHlwcrXmGFG\n-4uRO0X/V0ybIdYj4U4qXRm2FTA20x7MDEDW0i/cJQKNrVZC7HQnvrdG7ggG0KVok\n-tTvsIWJTmpQ3MY47rTtWQrmRdiiSRWeTFyE4sPUy3XpuPA5ZKGF5vN7A1p1WYSZH\n-gl6NBv2vp3wjwplSpYumzh0q+o7W4bhdy9+BR+K8l5a9LKyCrwL92XKLqp3iAyvq\n-RdbCrTvfppYtNwJ06JBww/b+aO08vTFY08eYbMTOVxNJUtzpq+JUe9QHOzbBNCv5\n-viIVqNRJEQw8ITQQ1AjgN3iWdnbVQEwYv3D6VNkpzDpZD6tzOmJwwbRc5rISCVL3\n-DQQglc7BYIkcI47QHBdf979H8EvA39U4yFHW3DfApHBl/gzHcEbb5RoBYc5yb+02\n-U8xGHxGJ7q4h40N+oLCc4S04gepqtCeIQ8cgCPjRdPKuP8o2O2wzDYvqr3RlzM1M\n-l+GWmv+3em/RWwhWggDIf/XhYkSbC/USJuPjQEYqJRcpx+60HYV7Ro6/RryOoLUA\n-0ZXu6IYs2qT+KEcLQ4D1XKNb0GFnHW+3SXqehl4qI0zdPUOLKpXhCpThhC8BlqV5\n-O1aP/5jnogwcW1HF+tUc4h3nwrgvcajrikjffdBIrUidoDVEN04WuQENBFZu4oYB\n-CADQwtiaFcDxMms3bNyRrfaIA5gNWEhoTRFNXMKY5SacsavamWzlfNRBIlYMl27z\n-oMZK4hpxH568UKhwQyb/qLt7gI9hLBOdgRaWZuOCghNGX3MQCBodDLXTahnvUlXp\n-pXnUOtuQmODPjTDIjNXjcsZUUzSJoanQ+Zt8OWPBYumrFC9Xw5fFRcrNmSbWnllx\n-Nveyrm6mlOydSUXq8D1vh4vkNGtQ/0nrFuSTBGsl2vY+ClX4o8iYunaHmhEboqjp\n-BMEC4WdBql6N5CI64HQ0e2iGXVSTPiMHnpqQlnaOvx3gdaYPW15hjISgjPb6ygdp\n-uyGXyPRa+0X7TlTtGXLLcoB/ABEBAAGJAiUEGAECAA8FAlZu4oYCGwwFCQDtTgAA\n-CgkQNkiogvQxa5sE5w//VrTdVm1ak3RCtZU1D25D6yiSMKZ05j6PDyJfZNI/QubJ\n-5Qq/VKzITa4kr50LNnM/wZzQPxEM5K6HyA5Wk3tt4IXqmqyZ8VUS+55sl1b5Tg6q\n-NSLc2qXmY+BeVGmQZwke4nY8wvTNI3wGDekJTPd5a1rjkw64l8n2Xy5ErVaYlhkW\n-8KyD96PTKhsJgRqGmAtZjJ2i1e64oR/VYR1B9daghGzueV/uvdhD5DxH7UsKSBUZ\n-vb7lCeOK9Fuvs12/ULgMmymFxSvKeD5+etGUPsNA3gRpqwNcipp0QNhiQmm8nRq9\n-vH8Kv9tPmaXL2JHWJB4pMXQXX/DIww3I2gaFfHL60Dr120Ddte3uqdG9KSYQHz7s\n-/bH+vFsvqr17CHflA/Ogto4rfrlL5qo3SaJVRQwI5vhA3Nx/K22WeH7l25Mu6mAw\n-kQo0c76fmSvOTpvCVC8aDvhLlm1nF1ao+dq4QafnCrKU3PTn1SlkZ2hwfFzRy/Ru\n-Vdep6Xd2M3tux3O82UoHLF7Z+4G+NgP69h87rMOSikszRsNiCi80xO3aT2CU8Yt/\n-l3sduhFP5TqvfKjTJAK6EfUIukVC0JEL8ktpYCyxb9tN6DTPHEhCJUTXZI9Y60iT\n-ZIrV7MYY51HatEEJKhpUtLeYSyutj0ubbETfrt2b3cjHNfQh+OLEVUjaQwZXKdU=\n-=GC3s\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "20963e7e259d30d399be1f84a7e4246ff12ea61c",
        "filename": "contrib/gitian-keys/meshcollider-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/meshcollider-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/meshcollider-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/meshcollider-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,51 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-\n-mQINBFlm5UcBEADFhn2Tcfr7gtsLRj9dzHGPoZYjc8Jy7wceqT8918lqaULJKgDW\n-vkEWCVOHRlrr/h1ugldouTRv3k8cdzhCR9YBakVJ3vBmn73CvHQl57jGRSogyqm5\n-hb6IXJkBdualnZVFvCDV37VYeyuSYkJ+DL3c2wEjC2gdQKUsc8ePrJZZEMJVScdD\n-hoXR/sPnu8P5yHOi56XGJi9395GUmmxJKNucD4HXjSq+7yTTs5GXm4niaKfcKyBy\n-kIGN4aEeV8sqzkN8JzNH9fc8i8MPDYLW7SGljpLSnIvIsdBRjXXBHwRnfmGEO7lF\n-sVTyepUUYX3GhLcCNhZjoMkpagVjSpQPj1gylSM4EFkmU2AgK/iEzqB7Ay4WC8EE\n-E2HrcN0ysjyhuyntFwMa1cze99vtfOIQnVJ8E58AvsOs9+xYz8DkbYntCHDD+Zcv\n-y200/knT1jJSZMXkiDciLjGSeFFbh6H+VpaFUKjy3G3yJC4BTXwnACga5/WPsgmK\n-+Y9gpTXRsZ8Op2teiwl8wI85mNF+2QmQw3uvymfojI8YPmjx2LOCbzkFYIJt20nw\n-iP1QMH3vtk+iSbcnexQlOPh03ZtDp3NbkBvBOy7cOc57Nc6IX7TllZicQj0FUjWq\n-ctUAU+f5pQuVgS8H3B4XE+Pk1u6/5zX9H0sTi0LzeQ0OdWFcvmZ8mYK5lQARAQAB\n-tCNNZXNoQ29sbGlkZXIgPGRvYnNvbnNhNjhAZ21haWwuY29tPokCOAQTAQgALAUC\n-WWblRwkQ0wARbhyHWj0CGwMFCR4TOAACGQEECwcJAwUVCAoCAwQWAAECAABJ2Q/8\n-D6FMutVLsz55vwy2FjWojcvSpk+BV50YMGYTCdnXZod7V0dP1iQ5+NMcYfpWgJKM\n-YbJ2eaWpW2TgsBd12LTjA6BKX3FquN8Y3nKZiknGCLiimDiys0+VuO9ieEH0flhC\n-olhGysRmPO5clNmZOzn3yiPgUekw6ejLVUEY8vPCbjojSuLZyjctQR3s/9oOMyvm\n-tldJ0waLi3KSOPEDQ8gXfE0QfDf2eMTdlMkbOHS6BlDIre6P5RZ5IJaLwCdzne+W\n-aS96CUqVcR3aqil4mG+T+kHf1wF99TZwY+tSXtweGENjc+QGEaR30to+catSc0nz\n-KQi3dGCH2Y+rc4VHE1S2Id88M38883mHXUeDMqzV9mHwMA50r/jzcLPybrJA1Qhn\n-ZQNWr8zGilmZfWnf2VyiPqZCIAEEFcwg6uNg9Rwy2N3Q/5+vhAVcVNJamMA/dpHa\n-hnq8HmZjraPWHL5Q9oL3Ggtc1Jahb8skaUMV26PHkXOxNFhVynghw3ujC3mocKqQ\n-stmsg+2m5Wf+TZtmbd8geMWcRpuxovYX2ZmeFPWIU+6p9XpwyiPR4mp5hWn/20dQ\n-YAyN/cQhWjDRU2i/HJB1lVnQIsSVsy3eWUJk4htQNHmk8crYocsXb5hgQ2C+JZ0L\n-gY2AxoGjqtzKkydTd5GbiCmqqFdW9ngmVerZ6yCbyRK5Ag0EWWblRwEQALdMSVUR\n-fCXTW2zCiP7g0Aj6yvyi1Wg1zK0CeRRljXKfgFoAI6IGW9QSSpXPmdsnAQOf7L0Q\n-wTTqwWNhKOLV0IWLenbpgIVwfLMkrwn71q9MBJFHiL+PgZLaRxqF5pmW34ZReUj5\n-k55Bg49kB98rfyz9K6qNxKLzY0j/8zsCvCgDMpr7U61xfz8Xo3Ds8bRdaFoH3RWR\n-wm3ePTe/8Rpm/LWWLlzhnfTpyZCUcOPh5+2yt0twHQ5zlzj7Gp8Il8XNlP6hvfx3\n-QGDuFTQ++Utom7T3QLa5E5Yx2iTD7qaNLdpQLZmcHUvdQV0QWSILccEvSJ+vXiE0\n-NvlgQIAE1pUuyTGpm97+mBeDC+4PvXUxQqFoOTJiwJxCpIAA0yvloUaZyeT0Toar\n-mowVOn0JXfbZRFFdxNUXgz9RbzANB+twGJ/ySh3mQz+Mur/1HqnCpHEjy73yOA9e\n-alN2LNvJt92hMdq+QU7I0bNqUS456h6Ft6mOpqG2y57qpl8ZL/MIvMaw3s45hA6p\n-7gzi7/TOnoqAkDUPf7lRbYjGgLkcGlimRxyL1SAYKuFgpNnhxk6BNPKdly7MRWF5\n-I+oUc5W7HkNefbHw5sdLgYZBQk8JoSwF1K/ES5gvJHWZjCiLAcbyum2W843etfU3\n-Qa/3YNt4Gri5zhAoD7U2kAs1ct3hQ6cLmDrxABEBAAGJAjUEGAEIACkFAllm5UcJ\n-ENMAEW4ch1o9AhsMBQkeEzgABAsHCQMFFQgKAgMEFgABAgAAWWcP/1ErBIqJ+SFZ\n-bL3YyLB9iObLEAUxNQP8bEV6lI9V0XUBhReasxQrMUFEXsFoFU6i/qlyfQFsBN8J\n-2QJFJT1pNE+Pleuz4yMuK5Ddcuuyl9ZklfEclmkLpSEwapFMm9IOgaGhucBMpvkC\n-2FE05oc0dEyTCdt1rBppGXvx2aw1khSiuWU13bWXw4hWfJaYKDKdTQyJLsjKGe0u\n-qjaR6yHWHbjlchQWKGUWLHomTKG6wZx9k5YbEy5LN7HnyCHos4SiWyaSpXSjCtNn\n-15i0JdH68fpKAtaGtkUYtoEJIg8qg7u4B6wM70BK2WCZr8T5yWK0c7NrojMIYjEu\n-HwEA9XPkcF9TF7V1VOZMze1ZOWSNzGOfq1yJf6hpUNrw+B3TbYsqJkuJmVSYoamH\n-0QBy0sHxlUtsALMnuKIQt8Sp20bJZLwpudXF+ZSRwrjmYc2RMc5AWaBHTGz2IGte\n-AvH+SOOaRWj+UvhSFZVKVOZHWqErzKG+NfqQzEaEL4h/6QU64h5GLhocYHCiCbFm\n-X1t01eKoDfOhwQlSlPjpDxxr7yi60ntt1R7DpgwqMNIdyXylxsc4SCvM6NDRXVM1\n-DoaPHI7GRuT1w6zEtkCGQoGsy1OBrnjeIy40mzh8L5q8L7n3jNtN/d6YCYDzP/P6\n-gb52/WPhR6CJQ2/7y3Uj7u8sPNpb7BGI\n-=as33\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "47bc404554b41866c5626384c30a9e4f9261958c",
        "filename": "contrib/gitian-keys/michagogo-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 59,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/michagogo-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/michagogo-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/michagogo-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,59 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.12 (GNU/Linux)\n-\n-mQENBFGeqJ4BCADb7SI3/+q93gIvN0AGRg9Mtz73OLIOzCHeeoyn+tp7JcYNzxkQ\n-9lfeXiEfn72Sh8gHkLtLIqr7HlIMo8DxSS8JPRVjlJGkNyAW4SeEwN2wNa5OV8k0\n-N4jBa9a1csFyCyrEkPKvkUpBkQDvNXjNxyEhHwyZqPanKxy6NXIHOJji8ObOMQXI\n-T9HwJrpjRth3u4uKG968JBTEyAXAmkt0Zidl1Ykgzcedk4mJSE9uZCW8DjSv2wML\n-XcQz8+dYsoskT3KRdkowLHxAfj1BNyNc1+rKLghliM5vSQWi+Lbhi1Bxh4sY1UwA\n-lKnAGqrnAGyIvCtkwTq5QI6ufF2ZY44bvVgpABEBAAG0IU1pY2hhZ29nbyA8bWlj\n-aGFnb2dvQHNlcnZlci5mYWtlPokBOAQTAQIAIgUCUZ6ongIbAwYLCQgHAwIGFQgC\n-CQoLBBYCAwECHgECF4AACgkQgsXACWKOzwzMUAgAuqUmK10xE5C3lUym2f72z0t6\n-a2NM5Wfjr9//Y1/okC36C5XAMEtN2UwckPzzJ5p5D5y5yzwfZq5Jd8Py29VQIMsV\n-7FbC1a0H3D+bCyX+JJ6FAmUbnWOQ/+mydYc74RvD8iwjePNT6kziZNv6dMGctJTl\n-0alwjtQYgyGkeYKnIxbcyjHX/IawLUrunb/6mSKun87T8+NM/omfFCTc3l8TakpM\n-0wyNYRiUkIfUBvB8sDUU3A80qKN/hqRKvlFu3+/kMiAc9ZYQrbmsB+sYWdmM+4zw\n-8NBw3yuYzWyPuoa4PR5ZmS9F11WLMR5vTRCdLudAqYsWu3LtV6vAIvlOUa2LMLRg\n-TWljaGFnb2dvIChSZWdpc3RlcmVkIG5pY2sgbWljaGFnb2dvIG9uIGZyZWVub2Rl\n-IGFzIG9mIE9jdG9iZXIgMTIsIDIwMTMpIDxtaWNoYWdvZ29Ac2VydmVyLmZha2U+\n-iQE4BBMBAgAiBQJSWarzAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRCC\n-xcAJYo7PDA7nB/91wAiaMlU5nHLUu0anhNQbGvUdFgKK1zO90S5KzUdJcY438jcS\n-UJW1az8l9U9JBRIfPRYVhz/Z1TAJ+dCzD7D8BXHFeGEr0zNOh87ly9aB5du7dpN2\n-oSBD6wLcJpqxt4h+XjSS2CX98/2ZIJxXENE2KySaTXP39Xl3eNwvJTUBA4XlcMey\n-J8KMp/IERli4H0O7vRyLgu3yYpUArTqAonzG1g2lfB35PQJfeInrRSniQ336otnZ\n-A8qwJ63kfUtWVDRz0g1fnvtiLGPivDJaI5hyIaUeJPaXU1+sg7YNroDu60o2NGZh\n-F+0IjHlvRfzzA+F9Vw38rpSqR3BmCdjf6Sv3iQEcBBABAgAGBQJSWa9/AAoJEH+r\n-EUJn5PoE/hgH/1T2dAthVucA/hzY0nl4SMjbg+dzNlYBq00Qwx8DRKVjk5et8+kY\n-oPI3DGILcr+ELnxNekeMv9WQBBtJanUh1K5ohZ6ohoR7lG18LXf5HCdspflB5Me6\n-LMA6iMryEP6gIs9GFuoGe2YQavm58YrkqhcPu34dGN7kdurfEXLvDfVlh5ZbKCsP\n-Gyd7Pbz04SpqykgK1udiTsLVjc70Xhv+jAMqeaCugDX6TLEwjVmZH/xsyKk2Uh3V\n-Oib5FXADAtKH+vSqqhFpXrw7R/NaBzvCbas8l61DFHiUg1/bo8vsV8MtGcyZmzXJ\n-C5Gm0njtGOil/g7JF9siUrpxs9Yyt/h+T2W0W01pY2hhZ29nbyAoVXNlciBhY2Nv\n-dW50IG1pY2hhZ29nbyBvbiBHaXRodWIgYXMgb2YgT2N0b2JlciAxMiwgMjAxMykg\n-PG1pY2hhZ29nb0BzZXJ2ZXIuZmFrZT6JATcEEwECACIFAlJZqxkCGwMGCwkIBwMC\n-BhUIAgkKCwQWAgMBAh4BAheAAAoJEILFwAlijs8M+1AH+IU78ARblqTnJeSl0iWH\n-mEsg4IBK30Q6/exDAcqOEm1Yc171uw2WnGmIvPYOQqxrRTvj3LoQ816dU6jrj6vY\n-s+XX0R2hxy7ILh17D/3UKnHcddu7rmc7pNEqZeBXaMughqQaPOWkAIe52+qK5tsl\n-sWllzTYE4jo29uZ3dAtDcKEJjBo/pIXnu1GOslE1+V4X1H9WDlwrS/JXHzyDQAjt\n-maPR+3gNesDanhrRmrnT3ZXW2ZVd3vGBibhia8PWUhU1uwOH23ySWXncgsHH0Zad\n-UMjd4w3YliZP/mLn2ghAxHB70IO7lgAgN3HYZeFoufP3pcK440A+CezfQiRcjHl/\n-oIkBHAQQAQIABgUCUlmvfwAKCRB/qxFCZ+T6BOq9CACItsrUZPKGeWSTkMHknMrV\n-K5vxIXJVCBb+Tppc0Q/J5p4EkW/RFhTwIP2zw8NLDKMh5oO9md4LXhvfIZkqQJFo\n-6ZtLa3Vf+Kj7uyxezBo4QHA+G7tDsRGaMKVrEMiyLCwS1+hg9VaNzsf7zmQW7mYE\n-vTLMHp3cVaSU7Mh2Dl8rnAaM/DpTUZQwZ+32Qrb/Z4HSa4f278iqoFpjEbBE2KCr\n-vT5yEVvpCZ4lwSgA2a+uTlRTvVV6NA/kpsxU64tmhuEOjy+ToDqJ8wv4mqvWZxMv\n-C6OhfVaXBy3U9gG8aQV0ffXGs+TbCtv8ApHd6E1/AVk0oyZGJaBVrEl688bBIWd/\n-uQENBFGeqJ4BCADFmgR7oEGkFFB5qXnuNYFq1nUGDAh0dLNtAD3J6EMxUZEXdmp+\n-DQHJw6/eDRQaG9EbjNZheycbVUoI8K2Y/Z268HQueGuIEIJv6cZYXoXdWCbDD4fn\n-HMNUX2wNlpDqWxb7PNUEtfU9hI3gmHGlr5OiEh3iV06uiZg4n2rbWPbj45m5LJzv\n-wpCrUA+pLcl9Xjw2cajaSTjdXHk9gvXTCo6s2ZS3/3Q4l+xuzZp1MGNzPQHASMKs\n-wecSJKkYg6W8I5WsVlPd9a8oQCc/Nfz7BPw31MRVR/SF5FAMqaXx5uLwghVdHB2i\n-cLURsOtJlCfP8W06gB7yS+MH45Jq/oxBRiJBABEBAAGJAR8EGAECAAkFAlGeqJ4C\n-GwwACgkQgsXACWKOzwwT4wgAy6ICcnBZ9l2jSu+ldy57F6jf5kpKZgB9NV8V2mMA\n-NeY1wMQ4VTVpU4t3s4E2LYtGNJNkPQVHbt1Pf4dGPasvMPaHMamgwgyqgYixqs0x\n-D5PdKzVrfnjwTTr/ZAFdccSPmvy5/hbY0geQ/+mzdbL07+xaT58JIoG5nySDKhmC\n-VeOvhDZtXMVAhEWBDPEgh/H9sEuBgMgZrzfE1j3q802qiXeQs6WtadWlQ1RN9Iq1\n-ZzIi6u9/BifEIRI0pO/WwKOZdXLTemFUoakoe7uT3A74N96t0G9LZVihYbEoO+Pc\n-5IaHPBV5VLeR3TB1LnnjHVf/Fwi8cnGy50kNWjcbMyEDag==\n-=jyQ4\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "5ee82a6f7ea42f0f4ecacbfc0b2541b3d98a48d7",
        "filename": "contrib/gitian-keys/petertodd-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 1901,
        "changes": 1901,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/petertodd-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/petertodd-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/petertodd-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "0870c88b9b3608b761565063dcbdc33536250227",
        "filename": "contrib/gitian-keys/prab-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 81,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/prab-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/prab-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/prab-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,81 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v2\n-\n-mQINBFYHMLQBEADLpvMbTQZ28jaV/tEcHpt/a2YiIqBdNreh6rE2MkTTjdkZJ5Mp\n-RAFOTrRYRWyBL9jmCjvjt4TToiV4quv9ubRWdTKn0cKaqcl8kwZ5rtoX6EEhcLJO\n-CAL13kDzkBrG3OqRxM7VWn/0IGf++Eq0yT2eqBi7Ae3FvC4m64TKLI2NK7GB/MQD\n-JqcXuh/0yMsPiCNZrTDBX+3SzTuSLjWt2Le1Ap2nWXf68cWqP6nhT+f76epZyA4D\n-NI48/KeylUzPSJtqBmBM+YLg/XGcxDpbIotnr7D27ThJQIXDzut9O9f7RjdlKaeh\n-G73W/hDqTqLpkR5LMa7K3unUuvlyQqYGXfHINjJibNUTLCi7YcJtuDv/DJwQxu45\n-/UUYS2xH6HpgOTdWs6VjHRCDzeAoKzkdDB+8Mvi2lZXxY0iFQeQtRNkmN9D3M4oT\n-voG0cZWjPGeKSalGVSRS3TGhdf+IqOPhOl9yrwEArlZ8HtsTUFdx/jAsWHsycCVb\n-LjkD8Mdgit39UZCln3e0bY862wF7Gm7P3ITMnTofO9w6Pqffh9WWQBtLrxIXrgII\n-vstC8H9ajIl1FDuYs1Mf8u7iq1zHh6GNzoxkm+FEvYc3mkSfx6KJD3STWqSrJcQK\n-q/1SsjBb+RiuqeFdY8krWfm2xkuUoGLEQnr14UQz1hQTTLEgSoHBSHxuHwARAQAB\n-tB9QYXVsIFJhYmFoeSA8UFJhYmFoeUBnbWFpbC5jb20+iQI5BBMBCAAjBQJWBzC0\n-AhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQvNBNjpzMrCp8dA//Yaob\n-cnFuzLjIeWyz996DPJvU62WmAE4GkZot/wk+dtIAnOCxO9YbhWVU/b1WG2PjGdqt\n-LiB6COG28/HzJoUh2zjG0lDcjvu060Bdw9rQ/kJWW22ylNAoKiY9jd3Abde5nBGK\n-0wwJ8+aMMDrO6euwgcJymJ+yZ6ZiWyG4TXXCbSdCDSsBtaaAugMlzZWeyEBEgUK4\n-nX3ZCoNiF3s2bYojr6VcgG2clM9gsSBW03XLW3lRLOvDFmdEAFp8KSJNSkGBlcOS\n-iba6zAKTY80W/+D3soBP6Lr2uP0AOFr+ZnfxvaH9YvXIFDq/jT3CH2RxiZLd1m59\n-ehUbU878ebOMlJCJYiUBY6H+vChytqy51o1np+KTQtpxKzigWiPbtyJ9zYoVVczI\n-Ds8APCqL729BPMhhTDm8I9jeEhjXNmmiJjGVJGVB5X/3w+7jQrEz6f1Ebi+cCrgN\n-tfN22bMs9hh5KkQ4JhRVfDM0DOXCvokXjdo9yXUf+Doc96ruCJKH0qR9L7qIASiD\n-hSEK3CNGY1G05Bb4wCS+FrexL11whAxlX7HCwbgjgHu07QJBYITdn3J4fUFYGsyS\n-G/2D5aLASiKGfq2TL1G9e/qI49/TksDQ6Xy4ue4cQYbf6JigfYjDcSDOZmkHPuXG\n-kSd60WPWJT6OqLrhq2c7exYCUGZaKrWBoie5yoGJAhwEEAEIAAYFAlYHcWAACgkQ\n-0cuiohvNiPY3BQ//TVOxm3UncyGyXOs+ss3fBSPE5q3lR71H4uo4CxE5pi9Y10tK\n-Qf0ULe0gRpnF2FMUkCCE5hu2oG+kPpqKON8/jwcnRCO9h2AndIZ3NRPAOXO2pn9f\n-bkDHMlInhPUxDk5zCHMTOdCONDvhocZ69gYHJdgt4w3Joji1YxTkHr2n8dFyNY7Q\n-LgqT1tpuXgopjKsUcYRhDCRN/iFsMa4D+XZR+rflvX5hkee19DzUIWmaHitfHZlo\n-VsJ7uVZKqUevS3rbBr3i+tpvvlrqDXAGksGWOdK7QFD6GtRgOD91IB82K0NvyX6t\n-M0TMh/aAAslxfH3YeTIGnETuBkp9QBCa1c966ipoHyzItmK9sF/ONPEfYR/ad3gB\n-Nc4G5w0UEROX0v4AWMfYc2CD+un3beH6rkWnopsIRJcQ71XvufqweWsPFALuBBzR\n-PTiugTi0SSSr/ayA543s90Ko2Fxrg20UYJZj1u/DEukpNJwjRSS/yyjk0hMWtzW8\n-rY1Br4Djbq3uQQj8EQojHgg3vlpHcbO77kXIJAlWYIzfHY69RGXCQG6Y7tavIiXm\n-vveP54CPFCs8Kl9t8Pq0IrWKnBGklE/KwfMzkzvrKFmi+nk9yRgwyN9G/geQt4Vo\n-W2mHmO1lvY8Zu2zpzLkvkYGXpL1VkIefmBYV/SWgyYGhLOJIFodJcMrrnje5AQ0E\n-Vgc1VQEIALsxaGYOnwWdgE2e7zX4uFz7jY5fZh0+RqGOe+Sk2g/QVKEDSLDgVF/V\n-tneG8AFgYukHPFCm0IZdKrewrkzdQOwxjyxiyFxOV/LYPesElVe8OWIs0lrMrWlL\n-ZLDguF63wnxWhjolfBzQAG29UTXYaJt6onEB59R2l426LBl3W9wvq19jolOECISw\n-r9z2IRUJ3poqBckT9j11p8yuPjGyht90dvg4htGPBV7nHDIijUnqLfk9mnAj8NwW\n-2Gf7TwW2uNA2rHV6riFzYVe2t1sB5Gdlx5ostJzo67yIc5Dffca901VhmpJTUPox\n-W2KmTpl3ObvaS0U0mkAyVObVHSuT6UsAEQEAAYkDRAQYAQgADwUCVgc1VQIbAgUJ\n-A8JnAAEpCRC80E2OnMysKsBdIAQZAQgABgUCVgc1VQAKCRAyXl7AXCempkrrB/9H\n-tOAstawkJ1IflUztgknEDE7MWuNR5XGqN7ROJAZvL8YfB5J7a4HJxTzCWft2QQUu\n-x3uwSfBpm+hRftBjm4aACrhDS6OOH4eFOUIdDASb2lgnhLmygKhAO9LW2z8jSrRs\n-tKNj9nyCo56mtd2awFESgpskavv/ilc9wU830C82FFdyBqgy5OBdWBurnb3SV5F7\n-23uD1t1n8b9gseIxNdF6Q//szAeHa4VRzzqykExXqHCEFCtH2gs9EjiZ3YeCyygK\n-cPbe6/+FP6UD810PBqnWaCShOIeT56JsOu2gMZ5+epWB+piUTn38N2Znu3EA3Q64\n-Gc7P8AtrNUCv56bof5NoTuwP/0rP4n1bsTy7siBuPqc9YvYkVCxNsGmg1Qs5h2Jr\n-ZmQlAnz8JXfi/TRxarUNQTZEsXVQzq+4C9eEMey440kXvDE2sd3p4MKnbtkDmahJ\n-XcMG5lsMMAQTpmyBf1EBEIFOwjZBqUqEkHl4FGRpEx/Q2p9/pVlogGW7SE5Ck6W/\n-A63ClJUJLsHaWiv9zJ23tzT+ooNy/iO1Y+GfV6MY1tBfLd4ZHHd2n1urFB362sgY\n-2x1TfvfXN0Myw7m1X0l9bYFycuuWfSo6qK+LCU/4P3jm21+i9lWBYX5l+NLz5mlC\n-V5aN57zmtGK7QMSp+6VY8mwG1TuhUt91S2fEScLax6qEASiEChB8m3YJOjKycP27\n-Sq9WactijiVTPslHjCNfyM4BbE9crAbDWGkIbzbka8ix3t4uBWt0YO0Ug9S3eZBt\n-w1OVxUI+LWjF5XlkfXn8W+pZ/C+M9Cs6QsAXEbfHXVZKwlAGZfvYE25UTr11RRnY\n-pl8JZglq0Z2Gip3YzJewC1pjjQTnnPoPT79elBuPmiGwNm5L8HsKUZ1IMf1k5mQB\n-FX0CilHMF/JAO+r8Obs1l7FHXvO0a95tStcjpFodZjHARi5B3VGghcypy2J9hWfH\n-YF23EcE4GzpqqSEO/SJoxuLNNtj5ZVJOxmeRz2CKCe1sI8xO7wY7ckjRaGmrvK+c\n-dAxeuQENBFYHOocBCACxVJwkGbqcgKTrg6APMxWO77ielcac8FOVpd0ns1h4TGZM\n-iCwwTR5WPRiIA6zuS3VTuPAntnK3VF9fQsLBORHIb4CzMeU3F/64SPt8NFajEQ+P\n-vPsZlyv29RSVmvhIRDTDry3Z/KQxnZ3rzazrBqGVuLBgsG45n97MQ8Xq0gkY42jU\n-VDldULYGMco5zHj/MFSQ6L3z0j1lL+aiX2xIdRyDNzOhRqaA1ByZvsRSsqW2JWox\n-78c6AbclWw0QLdQd4Pxk8k5hpeN/EtneVnFDX3hOq/C9fZs6f5aAKn81WXqPPPk6\n-G0b7KzlUoCWGlO7M5LzEzWmWvGPs7W8y2Uil99CVABEBAAGJAiUEGAEIAA8FAlYH\n-OocCGwwFCQPCZwAACgkQvNBNjpzMrCr50BAApY22DRYqmtALFieREu78BvjQT/DY\n-f9Smkga1YVr9/Ph9NJ5iSVeM8mrVkwZnGRK1UCjk16rsmB70IqlnJnyJGXqPMj7M\n-3ioOWY8fCL8fmLI2g0TbXXKl3e0nGByGXW4pwyLYa/hR7XJMco/PxqIGhEKcCIRP\n-dxq/6U9T9SYe2IkfXBYZAxfUTE2FkRpw1zSfZN3z32LM7ICZ26NRHRWo4Kv5sij4\n-0mYYecFmWdf6ib5pPCI0HmPGpblbmZgR1LoJNmuNxfpgEnPe8BbxtO4mueNW5A39\n-y7gLCmDZ8MaOGxvjGByBoXxXP62BiU910iZZZurjSD+3FD+NUX0m4yxVIZCkuInY\n-QzLxFACr26IYpcsPHIYGnEjDBFw9hHdP6tzKbjzgVSZESheQf2zwit0YYSjwHQN/\n-XGnBy8+p66As61jg8mcAN2Zd8vwFKZOvfEnSsaoK5ssAh8jixhPj+Ujgs0/PB8t/\n-ON20yr+YRAwU+RVnC/vfvrM83mjoz4mbmSLapFz/xWNhoS0ZczYEI5CyxE8peGPX\n-gd/7tim2OqUuZ3SlH5TZP3pdJcqxTNN7iNaWy1wAY/sb8As3Pge/Vv5hSYmHNjQy\n-h/62SSbTf6OZCuUGjy8fvVj51SclVKqGNprmAqVrIy0J+VeTKj4r7PGesPWJavRc\n-RFdDYRHByRDDL1I=\n-=dOwX\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "a1930ddee905f688dcb3a189a88e1317e7006a0f",
        "filename": "contrib/gitian-keys/sipa-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/sipa-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/sipa-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/sipa-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "2b5acc82aa47c6804a0b89ad426e26f9bad751a5",
        "filename": "contrib/gitian-keys/sjors-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/sjors-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/sjors-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/sjors-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,76 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-\n-mQINBFWSwMoBEADG31O8+ex+xpgzVKQgF4iVRE5uBPT0+GM6FnwqIIhXVKiBLQh8\n-YDhhgk6joh+vsLrFzKZ9kXwoiHN8y/AiNCQ0xjAUdpznD5xvHAaGIAlT/sodRNT+\n-869WgT9G1uiVp0P4ucEeilmhCn9o51LqkS3roXkj0ec52b1pslUl2WKdu1ZD+Bj4\n-3/oVZm7mmjkDwl0RHJQmqlK0bunq0jlVlgH5sdQfmLbCZaq3LhVPf73zt5qHH+J6\n-ZbU7A4cqm2eN5SyH+Nno+cq3+vXmvVI+x/jPe/dPDCXaGWf5fWI/Lbk/mMP7JAl1\n-6X44CN+hZHUnNuzeZt2/ROWZ0s0JJcjQkSe9noUQedjBAHX82s886vsFzOHvDtul\n-EuV/XAjUlkhMbhZkZaIq9ucqHmUBI4+OcFEIbbKc9TrKtJe+CYuWTNlomVk/iFr8\n-zSm/S64NiqKi/BeQGgcsDZIaJDYfDP83esOOaaxFswHnJNtHnU1PwntrJtXft0dK\n-ydtlQZ6r96SYxLDTeGfC2SNk0zbnKAGvjj04vzQeN+JSRZ75tNKmgdbJdNL8wvPh\n-879TpCwMhNDvSRG+YqCe6whaJV76a+Doxg48HCJYaj6bnRn41/QGJEyL31I8l/7S\n-YsLLmAEbqwG7erYi7WZS3cRrGJI8RwohGMZf7yraqoaOgMKmtE/Sq0tLtwARAQAB\n-tCNTam9ycyBQcm92b29zdCA8c2pvcnNAc3Byb3Zvb3N0Lm5sPokCQAQTAQoAKgIb\n-AwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAUCWWXcoAIZAQAKCRBX/5vb\n-zDAQCeYJD/47XDMfEMg4g4spo7k92XsNkvjlAhWvvxd+kxow/V8c64WQXody32FZ\n-HRSmK8dVjf9mIJMKkX4lpKpim7cQxsdTcorcdu+yk4TK+Wah61vsMhbSSllfHs1U\n-+q8jYMGnXTD+CY0aeTMrTfJcR2yN98jmNSWIL1qWmJ51RSTL6BQKb6eYtR7pWRkW\n-uMR6oFC09Db4fiKa4zhH81+/t0g+6pMY391gSluaS+OfNqGORCo+/IdG5IDzh5Vp\n-f19qXjd5oMsZQf6/P4b4XUktgl8RVRcNzdYGoXpcd8LpeHtEOh5I93ODmCwqd67b\n-YDlhDNN7iGhPndPEF6P4CNO/rXLPCZyMhRyt1dflu0KPCr+0AgR31cdhH/p7eCyj\n-FTE9gUgUHOG9OHdRoVXrwHYXwAiDBr2pp2giLpBsAwa4d2hXNDJ6wfMMCSOXKQlS\n-lHq06y/v/049DammkqW0XnEsU4qvsdteZ0jQu7Ob3LyGoytBIj8fn1OioT21W7wc\n-ns3/Tt4cQsn2ICBYB4PzqwkvGUp7fDwwHYw7rq6kvCEVDUDWMtVgQ8kjsh2OoU75\n-eeteM1Q1fV06Wfn2Qct9bn0NKRGrA8mm3lrCWYCeGqJeBvC6kna1QgV53vYRLJod\n-w3Ql4+M9tUIi9uiGLvVaGZWO9wU1EwL+EAO+6D85h6QiJN7H8gcwUokCPQQTAQoA\n-JwUCVZLAygIbAwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRBX/5vb\n-zDAQCauuD/9IDWhf/fTseA1Rt5i4gwK+8dCQjTlRS2cZtGc2aMX8w5XruDWnna1P\n-Mj/aVUncDrprRx9rxgEqIDyPheuJ6r7v6D8GjrpAjcG/BPNFtPaxQccbZbAYdzoj\n-Rrs+ttVIqS+wO7qLmQkKA4oGRMmgYh3VX8EBZNcvxaGCcJx0PfoqS8cPXTnCRHcg\n-Wx6kaFyuWtrTX+kCpDraB1KGtxedR4rzuOtUOLoqFOOfsQuOxPlKNNr9Zjc8x2o4\n-5TtwbuoEog8FIEttY6NOywpsSsvYvNB4gq1fxO49H0pQopmJlOMatMH6IRT7BJJZ\n-cOoHOh4X/zItOJZtuCOT4u+Y2XOuyLcW83X5ymIR3ZCxedsLzjyiCWm61/znJVON\n-Ws8I+gShbvauahBCB9rOHqwM0QioJMc36hUPB21KghQS8RJpGwmtk1WhFFMtAsSJ\n-w+wRfy2d6u+lSGdlA+2hEyKVm/DNQMDCQVFx3lQ6YBwAwkSiLMylrPKvs56fUjRr\n-74qoPyDxuRMC+q+TThHsy5O9r31G+Dc3+H5k4iTk354Jshjltx/k2O732e9Vxyar\n-/U5P7UZqHHuJKXDihUFrcJZq+gk8sGEWzGG/wocce7ezrTnHqR8YA04BTA4PXQqZ\n-4N42f422YYGIH/3Nm6drQkbigekLw6wx+NrxtTsYg4eCtSsaUd/RjLQhU2pvcnMg\n-UHJvdm9vc3QgPHNqb3JzQGZyZWVkb20ubmw+iQI9BBMBCgAnBQJZZdyfAhsDBQkH\n-hh+ABQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEFf/m9vMMBAJEsIQAK4ihgRB\n-05QqETpWNeV/XSGBHQINuwwEDz/k8dAJ5Uo6OoSpDULa16fs/EgAV46wTSxfWuci\n-n2Fc1AWLeLDWOax/NlycL00VDHEwT2PCjcc5uMuwR4RUTciKyByT1u7BFToZ6PyL\n-mbU6u6whcQejl6Ci2kw0Mu4n4bKTS7OL4/w/EbdfMSpRi8wWmTPMB/aMjtS2Mxi/\n-N+yQhJ9pReHADeCBoAjq0cUy+QbzvBwDCK4XWRzF7kiFuA7UW2r7/dX6l31mPfi/\n-GLA5+ftPxJ6EH8cxToF70OWiSfhOTleaqZaHUOG0V7wV2lr/bwAYzpVlxeZSCIta\n-lAA9ZLzUD2hiHYcei6kc/YjIhmlml7O0FK1eBk7+bt5wr0nvWt4Lbha4y5LxBX8C\n-d7InvB3xUYHz+S5Ul4vp0Rzx97MBL4oX2ltBEDpc1CcOgzv4dcWMG9bbh9/SaI/G\n-RehAzwkbpVUl9AEUNKO0dNlZUdu8CkehHdPdz5sJyS/9zE0A7yIECDFP9Nrht0nK\n-MahBijm4K+jOiLOZ2xyfOX1pVWLqIXGQHKjfcD3oI3qvGrQYtxB5Dffb9ACFMpZO\n-z3jM8h2UAa2/KqA4MZiZG9N6uWHKkIAMMuXWs1s439WePvbQ+5aw/qPUAMyqA3XZ\n-dkfn8QWaJPR4nRM+McYBYuS4fKK9HRJWQgcQuQINBFWSwMoBEACzmkabZ8oHWJUE\n-beU7rJF/TMbwV1IFtFxJ/QlY8rE4VnHekPMvkLi/gjx3WY5nmMe+d4JYoK/uPNdt\n-y5u0QYgH2MB/jebk4gYXCAHIPpU38h9UgHRb6qV8OaqHhmoXvKwyz+1QPzyJpmgg\n-oCUN+OAroNjl7zhunE7w7EEddFQftfPoGKEUnTjv84QOCuAb46JsYyiNAc3h6okq\n-74hY7PKCv8IRGclMPjemhBT2LEenn1t4yi7a8W/hjIe44PmQiqQEXR17keqcP/ls\n-EH9xSST1v/70ieiPqb6zbHGWzjQxqpFUJxRU6OluBCy5pHVd8wfFGYrrbTpoxaUC\n-jyA2SLr1oZZ9gaGprt6X7FC5gpE5LV9essq3O5wwvoPbyMe1F5uFaxIPhlt55oEu\n-rwVWecFJ8tSjniF/WSkTcILrOmiQZ4mylXfOP9Wk38seZReCs799KEfKFlXHk89a\n-Sj3ZvaJQxwVCnvsAsbVKmmHZ5wPt+G2KfhOkkv2A1I/UyeTT7aXvt2vxDqGuG0su\n-Eo6QknM/2Sr5Uv7BwBeSIQ6llH5ZnqKz34+HjriP8YPWzvsC959GXsxS01dCSvUM\n-92j5PvTZzf5dt1CWHMeufAY5XIH+nftkRniuScRhJ7xK3tJ7wngg7UvdeZwJWqmK\n-lJ7GI38V8HIMnd2x28yiGpj1ue6T+QARAQABiQIlBBgBCgAPBQJVksDKAhsMBQkH\n-hh+AAAoJEFf/m9vMMBAJjeIP/1UBCi6gSXzpGJBLD2u4PcZJjXBJAImZdf1aCqfS\n-YZBCaA65UrM3uaVa7h8MGAJc9kDjpqHurjDmG3YWf33KvHWYmReQvX43pZmfF12s\n-X7FZgcCfgZJKKj+ri6oHQonZzUMrecEcAJLLaQoD3Du3iZpETiyRLL7sJ1lZSaCJ\n-gYKnN4WV5GypvdFvb8vSUBST2h0D6AewGKMNh8ruRlkIxI+YSlywgYIH+O0qNKqW\n-wBlZc/5f+JZ3hu+cjx/+Zn+w+saIb6SgySg0UzN35b2WM2YzrfQep4ah3NIxuC7e\n-qzmfV6GnRtuUrBLVJ8qyjif1JSM9tZfinnmAB4/U5Qfc+YYViIXMTljmHWvbokas\n-tTBfVAw74yWnkv4ZuXf5SkTmGwEMJUOat0TSr085Ck5y394bRepdI1Y+1cdqpwMQ\n-QmkKyvcBlREQ7Xk1UnDDR3o/2ieVuGGHRp8jmoWBWGq4Cm43fYOlVe+PcaX0tDns\n-Tmmh2uwEU/TXe5qGil51OlSM7qhAMqhWUIYphSOcdvApNXuiWMfnTdjsNygE4HVh\n-Jq4efJ/nlx5N+PNAK2GpzeUJQGyxiVsXybq+h8UlvytBsdz1X6ZYzBv1yYwANThU\n-rMB1s4tMaEugX0aNByLcsxuS4ixd2qzwkYVz25Aeko/U1v2/j2cIRtrTNgja3BKE\n-N5Ug\n-=80Es\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "baaec76b8c656a04beb4a91155dff40658c87bd7",
        "filename": "contrib/gitian-keys/tcatm-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/tcatm-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/tcatm-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/tcatm-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd"
      },
      {
        "sha": "a3b58ad9940200a4f9157a5b4dc10357b284dc29",
        "filename": "contrib/gitian-keys/willyko-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 85,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/willyko-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/willyko-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/willyko-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,85 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1\n-\n-mQINBFgs/RoBEADFxycJTUvwqzBZZ0aBZXbmr8Ppd3EPrgBRd47k7uwanf7UFmvY\n-Xt4gMEI+EdV0GuoQ0SeoAmQqc5Fxu3AQe2XFbiF+ZNNYT3+V/5GAzWsAH22ncQr0\n-AuK95pPi+PZ+M2h669cq/RzFUXZDew0NobR2oBS5h6g3rgmmejVLRqnUpWkkSrqi\n-aNgD2GSn8g820wM6LpdxcjTqmMpHHT5owAbv0UP3IcdtpBaS5McoUXK+OAdKK/Zw\n-JQ0J1kx4vIyNwuPD3klziGQw8Izb/gFpWg8XaJmMhD5BxNuXJC58Bj9/sFTc0GDQ\n-VKMFpYpNi8a6hLPFb4hMjYF77awoz57HtyOOsS03KO/57QE1htx+2NeDm4XkZSBk\n-+wrU3zgbtmOBcfzEHS/HrROksYDi+Qw3HZL98nfDEWNfsDzfhMZ9wHdM3NsR2xk6\n-oNtX0CprS1n2Xr2AY9X1oNgiZCJaSftU67j3lr+9gHOH61ktxt3cUCDodUFjkpKn\n-r1CQ2LB63AoUbwGMAeozdXZWzbXJAJbcH9G77zEi9rW0WA2yMSxTXHlpE9MS0UcE\n-BVkIMv2b9iQzlhiS8jh8AiKFO1PuT26Cw52N/lSPhA81zw79pZfSYwKFICGHYfvw\n-ozZeN9Q+PPl5tqi/3SExxlZKe8EmaveTrUfKMBS4lQO2gWe0bCFgLOIzIwARAQAB\n-tB1XaWxseSBLbyA8d2lsbHlrQHN5c2NvaW4ub3JnPokCOAQTAQIAIgUCWCz9GgIb\n-AwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQjjqPMkfby7+0wA//cX7Tc3Nz\n-19ApwSbGfC8pJA/nSybcVivroJRftpzeOmYrVM084T9REvYwugl89djvxn6m96iQ\n-kqoUGWhBVBtDReVCL7z53G42lHjemaFcxBhIazKxO0qvcc/UXUVOs2OdUbzObDFL\n-dHO5xBVqEnW3sq+r4blsXR8U79B9IIri4+2hy4OoEjYv9DzBaaoaqU+F3mudXbmo\n-R+hsWc+mklV++TX/kuw6EWT8tusFjXrfqqKcKPRPhbn48OSGWsEPc7yELf7pYFR8\n-uDU40faJqkvQ83h5WMTDAhLxd/918ZitqBhjSP+7Humf2YhSto7YmtEWlbeAW+qy\n-TcBYkK6SJh8Do3xZd/prFBKEu395n5VQKuLjXaOjqMc1oDHQyPJJjXSN5thLHvan\n-z7nNLt2QZO/kxXITDdbWlktVe/WSoive7TuY4dGuX4Si2z9wyhFYxtZDsqE0qmqN\n-jIDAZ7u8Qq/LGqpdjOmYr2fEwHe1yVIS+BtVGvtShkX+J+QPb8qBl1d7Ii5i5Afl\n-GJoLLIUFkPcIRTYPZpppGSuqfyWdNnaasbLH44lxJisSMMw+fxZabt2bykYN/ZXa\n-RP/ItDj81vklg+n6r4f/nZTF1r0UUy4LbSbBY15B4Xm0Tdvh1PMfj/w2q10l7bZB\n-XLi9Z/QPaW7TyzaBuLkVckbVFn2nYnXfzHG5Ag0EWCz9GgEQALCgTibFnw+Q3PEL\n-G5/peQcQqHxrPAB37HV39B1DedGhVUa6aGSUaLoNMyUjUX1HWN3mWFKTYVB4CH5Y\n-xjaXUwxdwCZgBNe4TDglKFPuc+frlSTZxDVE9/fjArmrUP6TPU447ujspyngGLa5\n-et5Uig/LxIX/+Mm0ZiYJxb1rMJwK998U1Ev1aHxgNjwTI2ehcKu8CAGOyflzh6a2\n-iTBUmLfnQMv5248P2d4P8WDiPq61CWTYTMCFqHqkYKy7h9BYIuMajw3KsgOUNfL2\n-1e9Ue8yv5UchZ+GDlBjidIkoK1nd2uJ0kPJkafLGWbcliJfvXxKliZnSbz1Cd4A0\n-HDKKCwiuwSLy2aYbs7IRtAOyDER4+fjBcqtf0QTIvoAdNZ9gL64DKVaB58vuSixj\n-K1i83XbTOt3q821HxxBrX9u6HP2E5kFdxT2KHDbisAWNP0rFnHVpjugehKFfZb6q\n-jbDt3nQL5uCQ8gTNCd4fsoSK6KhCDjamDXlKmaGlxqwOV4W8ZwihoeGt690h7NIH\n-h4eiSmMOej3or32lcDETEwrjA2PxvcFsikFc56hRkTaSyyBEH2xhkRrjXMqiQfH0\n-j7iOY2PWpFEuu2HVzqe5dBXzn9sMIwxeNCxR/P+xHMqPUlgD1SXEYCNLvvzD6p0+\n-kqSe7PiJoEIv351T3hnBhQ6rK0ChABEBAAGJAh8EGAECAAkFAlgs/RoCGwwACgkQ\n-jjqPMkfby7/mQA//YsAOdDBl0GscB1PBNXi8VMlI7yG9cqiGrYnZX7h4wUoGEbPI\n-jap/PixIsxBCf1BqBRDJdFyvzH9amLlcaVNdCyh6Yt1Pi8kassmz/kbIYgpbFkIL\n-ES9N24N7BZ94P77OQy5wic+B4WqJnVrtKr9JBalgBSOMqtccYCma5Ew00mqp+FXM\n-suDyBk2HXyl+u6/rRmqZ+BoU8iRpus9F80LFKGEsAgjLjKv68KmApzjunzsBotKk\n-g9AsBk4ygbp+nECAtsxpbLMo4hPr4qWm7G4mU5g4xOK2chpAPeqyf0857RWgsXaO\n-kjrUu/M5Hme2eIlXwBF14ac4QPnY1rlAIaulvXzmQnMYQFZiw9vaTOdqBFHjkh7T\n-XYRAr589Woo25PfMJCbC+Rop6ku6sCFMorbBwojyRhFJnk9xsy5kP5D9IhkPAKu/\n-/ABlei0xPOl/gCUUJP7aIikZgS5lAk1TSe/R+yV6ExNwudtLw1G0K2/sY3B4Xo3X\n-Q1lTAQPlnAIeK/vlbttLZNIBWquw4cPAkPpIyjmE1dd6jGQdUyZE22uPBx+gpq1w\n-AacmVLwvPMe1De0ilJOzj6KpXWBCwt0DWXWztovpBVcAC+qbTrZF9H5dllpqyzKt\n-OvxzGssjrX4rDkOx7MyVa2tnXmeCuSN/RvlOUwPvf5zYM8Wh9g7fc6jcDQu5Ag0E\n-WfkOfAEQAMNkzAQqSenpXtHsnuCqM1oMMF2kRzny/Jqh3q3BxZ8MHLDhoRRaTENu\n-lA4APRXMNM/wlZJUSLX8wWBhufnsPtMf6OOVMZ4AVbXHjUgyJ7lO1zHdj0u6PpYP\n-9gmHthIz7FF+cxHj4ziC4CmtRctrn+/U4MwYtNPhxkTnS26oOZes/HXMYSvQBMgT\n-AP27GNOBiJRthjIEITvSvS0YZOxgLtWgGiks/pGUw5wm1rguuQVyZ1/LfXBooYJo\n-u/v21AEjpuTg7JlwbqXr2k5LojAGq7AxDyWy21IW0E45Gog38zg/hwNll+hjRbSu\n-pipf74WXR6xMMlW6A+XWUvElkicfDx8e9LJUnqWbZ+FL7X4SB54ZHNCvfo/8Ug1V\n-2tiY9WbUZL9n5ZQHNlk3J+UK/KDvwey1VzKPFjpQNlfahhnppDGiCey+mERjI+75\n-gPbk0ctOAEYXgLJjoonGX+iByAfY0YyJF281CtaK/sXQU+TzLLT15WET+gYGsJdY\n-xh1PdPscNdSgYudvbKZoFnqUwEGEfD8dT5bjOphfY5+LvGUR2GuLNZpMidcduTYf\n-SWAY/vQHQIJArXu29BKscm3tg6tzXu3l9p/bGIQUQB7obN91y3xD3BLICIPRGhKE\n-924wxxCuH1vLKmxWDdAAxKo+rEdLJ/rbZnjWQENEFiJ114fBk2NVABEBAAGJBEQE\n-GAEIAA8FAln5DnwCGwIFCQPCZwACKQkQjjqPMkfby7/BXSAEGQEIAAYFAln5DnwA\n-CgkQYFGSo/6YSmANoQ//SbcKxkop2zA2HrWS4THcEJQwSJ0KGAN/VB83JQhoWThX\n-CWxsFNJjBy7+rsoXd3wQG1/aN42nTuj+eh+R6WJJaqqnMqd52l4Kc1kJA6z4DGsy\n-3azCDvyzibM0AkJyMJyYi6HRKjzA4M+xKR1HoT/NdQUP5CBUVfvMblSaOWiw4rja\n-IhWcbgbQ+Zam/VaV5l1O90eaD9tL3twSfPLYZ/wkeO63jJKHBpI8fpMql/bLg9WD\n-Au3h/lU63NWe5lZO1z/jIdfiTSvg8nu162vcOgmUCWo9spkybjJd0Mx6ZId79rVo\n-58lwZ4QoaMgPGoVP67LyLOxJTIXeyG5xr1LxhMPMGbnBhlnMQrboLV9kPEL3raHE\n-EEKDTtZimVK3ZxmfyBd6MDmwcL/K73xu/R8be9TgdwD8/BZJSOTkO87qZ82G9T7E\n-oY5IHU+qd41/Yjbut7AVtAlCr5Lor31EYvZh3gI/H8uZFddOu37Ij7e9Fw2ywv3A\n-wPks89tfOvahkfCOJ29znB+uQYpJ461jjhdkB7EHG4ae07M5rRtkNbIc3dqbnMhz\n-VA3JpRJN77xPXV7uITHo1s+b50RvWmfYW91zvipaSZxbMLuGBMhn/1QaM1djLOYN\n-JordDBwEr2bi5a063yUbZrk6ddECuyxndDHWDNr+Tqx6o7lmAT48UJ199zA4scbf\n-2g/9EiRPGcRovsn1tUdjzfmWDxhrRV6F3rYJB1+i6Mqeg2iHHYxxiNDXcuWYXHQ/\n-WPWLk5+lgh0rQbrE7InzEejoM0FIHzLTm0lSQpau50/PT2FiH6sOEEDyT2IhBtXX\n-eOnKAi1IfGNMzEaPEY8PXH78dEGv0iXIgy4l8Bc57q09Z9R/OUi+Yb1p+S5F/aOi\n-7Jd53GGE1bfBIlsMos092XoiMdvKmAczyCUIempKHUBPoqfJge77qk7zJKkyM3Dk\n-VX0lXLdhj0PfslFrNf2uRF4uZkmfUV7peeD023c0/SVp3ILUAVds52yawi6Exv4a\n-bbvhIw72fc31frCRBqc9HVsBraoozzE9bksG1MdNI3GgKxecOu9lldedlIqi4lO4\n-7kTVDLEmcsQO+sSxkXQz2sMSD01CQndpPuhFNlqvVnfK+Kv8pSG37VzSSQz1nt5K\n-w/fJBo4T/ztR7D9RzbSDxBP8Jjaa+UYabjab5HcE0JI4CpgmzIOB7qPVbYCn+LNX\n-c8Xw5/9iTw+ayawl7PCGRfd14/OPRzI8vS0I9bF8AG84XM46yxAtYieH/9RI3b6/\n-GiQYDkBNi6Kb1LfSzx8oKAkbMgiy4y3vWxLQnE34bAoXjGiYdAMliOsyGcvmnObD\n-GmSTIlIqunq60CyhaUSIkl2VRhjzz0igfS9751XEvnjeXDc=\n-=PVBi\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "e0f6c4c5fdf56ffbd6308d4e0a6624290feadff6",
        "filename": "contrib/gitian-keys/wtogami-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 131,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/wtogami-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c66adb286a89738a6a5218be2ecfea8e398878dd/contrib/gitian-keys/wtogami-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/wtogami-key.pgp?ref=c66adb286a89738a6a5218be2ecfea8e398878dd",
        "patch": "@@ -1,131 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.13 (GNU/Linux)\n-\n-mQQNBFHOzpUBIADYwJ1vC5npnYCthOtiSna/siS6tdol0OXc82QRgK4Q2YeFCkpN\n-Fw/T5YK34BLVGWDHPoafG2+r1nXIuMZnJIiGw6QVOL2sP9f7PrMmzck5KJPHD14Y\n-GRd9BPkhmt3dXzOCjhig7jI6hKEYayfJNUNs9nlZEvl4QWIBMmk+IyqQz3f1HMfl\n-/GkFDShBYF8Ny7Ktlx7AaXymajm4DCrTkbj5V2ZDqJgyQM549EoPSwXBQYrEjye3\n-g2viC8rUFRFWFjdnx7jFEb1uhx71YGuqiLxKihUW9pbSNK2cLweFazHSVmh+B/pz\n-fxHfUn+ijLSIAnprTmc/rq89un/iiPt0O/mspcCZ6hE5pFIyX+SC+9PrGz+bFSmw\n-PkMOZzG489G8k4t/uZsit6helkl0emg6JiXLTmS/oTuT7B9Z9/MeEhOXFcxUb0fr\n-2aZkEmH5d1oxSBis3D5nylmNJXOUSCpJAZ8E5Sr/5FbF9IPR+NSzosVacqCx5Dxj\n-vJ7HpZKn6pJfmwrghVXQv04NRTcxbHNmwd98cofBtWX8yBO8M2M+jZrU+BVDUbb/\n-A1oAyIbUUswBP768Oh11bELhCly774VwBqTojm2yodLGSyysx4zoa6qL7myfor0m\n-a+K29y8WH9XGmKGMdUOg+q9z+ODky9aToGvEo2eVhKIlJsk0aFAGy/8awy6qRIIj\n-UqLMq6XoFcYlE7SmnFUDDDPlBK/NkFFqySpFhKNRyt69Ea9kYXOxDnf/EnBwHn8m\n-PiFQpeZqgnmhyj8Nk1SSQBgUi07NyXdQ/WIYpWmqqqfHRVQgSE9C1920T1zg/E97\n-n5yYjI/gQQwq9wikkJmog6Ny7MSiwIU4LYV0pTUdI4//EJMId2FH8YEUfvG5ds+F\n-H/o/D4CAJ86KjspizfH8jEjhn0Rm/OtrxLz1rwA1gtF//P3TYNWw5qruL4stP3Rx\n-9Gve8Bm7oCBU73UT2ZJomEsWE3oqXinLRl3YCsjGDg/d3ySD6i0/BBROLIeXkh3M\n-M1CNCqREDGLA0vxQi1o7Zi7ZA4gWPSzvi/8KtSzY1iAQODxWUmOICRP7KQODWJmt\n-roTqhKgZ39wlR6eqkO8ZfAvRYsjvkL+EZFbbKbHxVJLhKchd2qHS+/Q3ov4SFzWY\n-/cE0ChOPDM587Jkps2bynKQAzQ6810FXmJc0ztrPeD3PEbuyY4KNJV8HGViRDJXi\n-wvs8eqfvTDGDPl4aLYVCKO9VqZ2OJvqhRhh71LQ2xRrX1LGnYLnUGCMuEQYKvMcI\n-TSssM/VAfeWAPJDklD0lVNJ7d9Z5ugvJHFc01SaaB47Aod2SPWp5DeiY4A8dcy2w\n-7f4Wx6FcdP1RXqaRZKCapBooN04vsvGllCshABEBAAG0KFdhcnJlbiBUb2dhbWkg\n-KDIwMTMpIDx3dG9nYW1pQGdtYWlsLmNvbT6JBDgEEwECACIFAlHOzpUCGwMGCwkI\n-BwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJELEXnrc0fcENY4Ef/23L9iC/39ekJ8Is\n-1IZdCoDD7/DgVaZqydDcy/ha9uaDFY4MQ0h9RZYo1axVBth/Yxzh1XnvitW8HFKn\n-DXn5wJI++KWpdLMUsTrc2iWsjAGgicmN5bkQvfTnRwn2pF17EUUEhZ8YyE3qMSVD\n-rDBECLAswT4Oiq9r9yw3VCFsRaxz5bhk9AAzWjam4H7mAfaEAOUvuX221v+KGSDM\n-UsGAAe+GjMPL8KnGgEbISlSUF1Ubcw3EChcqjf3BID2gMLkAnGAoxlCZSYievytg\n-71mcHyIf9yF861QrGcrCh6/objtRdt4IDUVwo9wapunRmYCdZux4ApD0Hit8nAsm\n-QtxftSK6FWBTOCIRoOQTjwE8qj9GYTIbUFppX66Dzh00td5NKkWz0PVze7YSk2hC\n-KCVBYyUYHgkQYVlYLZw7dBrXSXv7ph95vc93RDS031cU7tPOrthqnMmhtg1WAwzH\n-xc2v3az9Gsw1RyxBAOVpkB0AFODiEiVg46xqmxaBPXfQOg/buZA2l4gK4U/pVUZH\n-72lle2CbBw6FoSx40Y3GYZWB2uEdXBTNLlhX7q2Jvo8WdeTxEv5ACZsjI7K/wrzt\n-nmvCHefOmVf4tefkXy1MyEvBt2+Ek9bHmHDL1BSk/JdJzJtam2uaP5pGum/PwIUW\n-KBatmHKZUKwgOIml9btB413C4zSK3GQmC5Y/+TxYybACIdxTDqPSczVZ5Q+jSywX\n-shdOoLXDRyrYhT2sHjZ1W29B8ebokqwousF77EA94sqfQvDDnmFpvfq9+m0WYtOh\n-PFF/yxOtlbPJYX7mnC8+dUgobSA4AR5Yrclt+levgivIyNuBwzevHRDMreMZKl2J\n-uiOT8tkuu66fAwEltIowjjV7TBRfij4QLXl/zfFo8jKU8efL3xluXoRn7g+E5FZ3\n-19KTF/DWMcttfeTUYVnv0QTnstb1RGnVj7w8JMy90mKdMQFpl7IzHd2n6LrhEw1V\n-1AaPF7EcQBOlvsvlZdIFQrFyhKozKoGi3wRrl/bNdebxjIjPzfN9GgbiufFjz2d7\n-DMR9GFXfUMVxLncaqBBy1X7MV17ZF7K4uw6DET4fRoecb4N5mJVUxvYq4iZApnNP\n-npgGdmlcyPD6o3ynx/vkw78m13Gfgw8i2OaUY7xBdOyNVEvkJZBLaC2hw+TKLaZa\n-v0RExtAO0i0QO4Y1eo78Pl9jOpz0wkJ4KG0270l1Jza4IyaIhYRDWagWOfOp/cXU\n-cvKKiuJhLOsX1Bapz+O2Aor9+EwWRdPd3BzE2ABdmKHPwrKobNp75wrCpQ5mZifn\n-DSTJRMPQQJV3wGfB2sP0NE47U8w5CCmVK8gEuqYr6wBl/CCq5tjiRc63VM+to5V4\n-tVNTCJWIRgQQEQIABgUCUc7PqwAKCRBr3f6OVKKs8cYAAKCFCLJ5wc+iAVCFRevh\n-xTcJct0fiQCePHpY37CIeP8s9BH8GqCDftUqh8SIRgQQEQIABgUCUc7YwAAKCRDd\n-f+mrhdawLOVxAJ9Tjud26LtbM2mWcPj2eT7dhqgZrQCdGyMwMMVzp40lsCK44PrV\n-+mpFO7KJAhwEEAECAAYFAlHO0BkACgkQw35HI5aSdvXfLw//c2zZxXg4bI2W7gkB\n-ZQJIOWnmPZfhrXQNeFuetyGoWTm4ZWxW362AdDGiQSGNNkXqeBPOitKOkRyZP/Z3\n-h1vwkLkwdFZyWXK00BzYBKfjThWV1BAnArQLewSiLlE7qSnsPEY6FW0PNv711cbL\n-lXSUP1/lW25Nx7L76GAF6sHreoIdglE8YH5y310JuFnqPa0uaJG+qDo8Mb+WkyLy\n-Q2A3Atws1tIB9vHsq2FCt9ACyAEA3AqtHR4uMFmIWpUYy77fJAZdzLZTWf0X5XYw\n-XILNPOl/I0iZrq3LYQAvJfIwjWAC/lm6uTLlvkIJHKyhcIT+RocjMV7bY9ezrC5i\n-Cag3gaOZ7USMt0h59KdmBaHHNa32n3PSHg9XWljqoWMRjuaRdcA7ofK0BHDJbHWE\n-cldKXC09laWOXbyNmJsfug/23vNE7fS/cAKSIgEWszEwHJCahB2i/HqOQF0DUGpq\n-3s5oIXs2xIuN0yT6yIIiQnTU/FkWDDu4D1OZNrDW6QG3cde0PRak/0fr4Kv4iB3E\n-CAzlsRBlWKNu/eE4QBx6cbvLqjriijhGAF+8Y1zvRKNKPr96hSsETfVytuKDTp6F\n-u7PAarrSATGXI92Hy3ThAZla0VOYUyeWPktqUMDNq90tIBZbwKpOMMqvJmZfgdOU\n-4ldDq1f5+2WhAt1aTL1GJVCuYcCJAhwEEAECAAYFAlHO3MQACgkQnSOpPExjO3Gi\n-jxAAsD+luooqqoz3A28ZxwfCDV+ovazQ4Bw6hVU0zKKZIz/2H4jwmLtLSHtucCRM\n-xRksZmnqf1p2nn+BKBXDInx9vI9HziMu7fWkzhuovAIf9+X/l6EYV1kQx0bIM1qU\n-BxXWPgGdrgSZZHl9Qff/BOBnrI8NJmVBDzOh3BSs0BrSR7aFbkSNbjk/JcP0JEyk\n-j6wDKQsop/Ca5AboLL0uQPgTvhxCu4VROKjhu7o3s7G3xlxTpimwYklDQuYFaGKj\n-ZNIGFq2orfIMBnj7ZEQVXzhWltlHcgPVP5TDfgd4pVUbyUB6ras7odJWWIHnUFmj\n-1l5bGidIwRXGFusE4iR8pR528LG2KxNDNQYipsKRY9m+wH+N7gbSgK8DxmocvieV\n-vcILFS5VrPLbEO2oC13NMljmvua3ovDB0CEh9rybaH+/oA+VDS2L3pkgATTju+Vx\n-6+mVdlvnrA4mJ5BoLHzrleKybS4ZkbtVBh1KOYmo95NgVifRvpVPB6hKzwqcjYFV\n-fVYBxTryTBRyd9MLsqpPKnGLBENTFvKDxRCK3iioNyVhXdS0z/UyF1C2hwNTpnjY\n-pGCu+Es3SILJg2TvQcwLM0OoYBA1bcONm2XbkTrdCpTOtQcSewQSkijREunx14iu\n-pvNSWeNmbjQU7gNYhvwcBgh90tWgNCfqTtSa5xSe46tmv0SJAhwEEAECAAYFAlHQ\n-1hgACgkQZwn/QC8Dr2hT/g/+OFUYPXfWo0+ILdxyTGP/v2mSw/X3dBCEYUqefWxD\n-umcwnksey+thEGFBlxbwpyOfAoTzZLUupaG6BacVgRUvv8bTne4v2H1d22aBXyjC\n-HMtQPhupn/giamu8q8hCPFrDp6inIAeFuz1GmQaH6xWO5eYBuYXQtxlvZLWBsuMT\n-74en4e3vjczxGmJu/nvM9ugcYsexA/zcN6SRGr7t2pV4ZElPzPBRyAzhYqhP1YlB\n-Rydz60OjgcWYEoJKWhJOfmFJ3ZoNGAz4TGoBkDIq4olCF0/cxqrtHN+ZnEOLwiZ7\n-4ZX90avcjEFtM+Wb5dBHNpni4ISoHcVI1X0ye6tuAOOt7RywbET/0oIW5iSNMgJ0\n-X4XYgOIQ2+a8yjGBjo9I57k0vp1mL6Ji/eaa0dlppcCGnzvSHss+O0qO212pg5Yk\n-GGfjX1y1ZeSP3ca9C2XyOGIVw2d2Iu7OyqAv/N81xt6ZgG3qixQC0nmgOmn7Kh2B\n-20W12KpLxKS8RQdHawGau3MBGKeqbfK6/eAzm22yD4/yJAoW4hKgm84z3FbKUN8w\n-ulYMK9hS2c4egpoDAOJ/QZLLXFWiyi7/sHZz69G2AweWCjOJh28Otg0cUHoLo7jw\n-oO/L0rCsOQMbUuIumYXBPHNnDwv1xfv2lT8tVzf6GksFJBAw0DybxOMTaOg45Lhz\n-jGS5BA0EUc7OlQEgAN6t+BV705uoCsdHtQBq/HKGGD5tBiOzy7Wd4nF/c6EWzET4\n-QUnmw6bDnqjxrk9MWniPDf1O9MvuB4qIY6g9kEjZ+VSQpWUZpZ5bMXCNHrfh9J2Q\n-6oLWqDmpeZv2OI0O9wxT62QaFei2qBtimSnBudLSCnvmU3S0h1PflmJsbj+tVcko\n-w2yOh2bjH1jkVAODHvEbxqyD6fiZhbfUVbPC49SBmXv8Gv0UywNSkP+iqJdwZAb0\n-XtjRx4WjZCkTwJAnbM4CJ63+5Hd83BtWZAZbGAh76XY/cSkDirXtXC+2LNUmP5W2\n-QY+ur5Bvz8LHaqJMXLAtePdkv5kpd+jXBrZieXUtqovxZaQTinl7C3L2TZd/ivxD\n-F3Rko9BFDuXXcdZrxBY5b3146IvSPp1y0WmHRxhAPb+RuiHQMt8K92nOhPyvtWXB\n-mWz0GnW9L6+CW4LKSPRSnE057hyxYNP/DcDd+fWFH+MmhU9noqHfJXSaLVzdI5PI\n-L8N44AndPIojnlxrxRs7Ik/nW6cTV9H3agg+24yyTdFkACbfIS6wWXOHeHuBzmO6\n-VI7pXOZJ9vZT7zI7M/hVci0R3putsGqgRfByRWWQ2DNeyrwUHexZNR/NYz1uhvA6\n-dBfKcuAwqxbdSrW/BxJ+iJWdkgYGCV67VLlO6S9sO33HgOanpPr5R9V1KsFVh4dN\n-j6BjZ4ALE5FPNW+iONnuXvtZbN2cBlBzMDeFC9oZoYCs1Pkmk8xUY2sAXPUt1R0G\n-D/miIb7ig1N52j9P6vv6fPs1ghmc/hGkhaXyjS54B5T33V6M9g+yba9mIgi8ZxZa\n-G+4rlFFKA4HS7wYYRJoqMvnc/qBYvoWLaPu3Xq6AXrJyuAaN+e3L8++cWbYHBXF9\n-qt+Q2RFL0FNiYUQuwkiaerysnm1a0H7ZtJ4zjl4ZgA1Ej7QcylTIbgFW3L7FnyMH\n-/5weLLN2wdjAtzjhRPYJLbV6V/gFbbpCpr+caDUaxSNizQuhhzVI5UrJegaHCCrx\n-DCiwWRFYzN5pqhtgzcaImK76DmPIk+Yrsum5KJZQeGfzKxvF0YnwxU0bxFzcDZJD\n-X2oCJn828Aw2j0nIlVlrrao0JMkvTBeZehO/11U68M2vKGEqrsQOb/BTXyLCeZwn\n-UGow1WvYfRxEZTrhhiYw94EH06gbqmKG1xsuV4LDI5z63/6ACcQW3orMbMymJCky\n-4HiNVZ7SNeGoYe380CJCwv6GN1opKTAWp84cr2KzhAzONGqNWNpUhznAXlI+GzCc\n-D2H330L1atMqZHjgpEfrkowvJ7WBM5KFKDfylaTKhYvfZcTOZs5OmRZSW3U54wRD\n-RMP0d2+k3vRililNhHIErHbjhYFc6zubVbBhvUMAEQEAAYkEHwQYAQIACQUCUc7O\n-lQIbDAAKCRCxF563NH3BDSX2IACugAdZqX+o/+pTkSrj+NEAcP0ZMci8w5nm/yOP\n-VlGyY6PXGuQKcBtvz3LWtIDdddMc/bD/zmZPwSzTx1MMOWc+gjR0azXe2RrdMHYk\n-8pb4X4Op2Nkasoc/8hNsRKaU24WUAQMqrRREIVBEOuHGl1A52Lj+aFB04rRHrkMl\n-AqjB5bwArPorIBdM417EEl4hjEZ9BpQxbUgBhTgGTZuc1u9PsKz1YvQ79YJIRmSH\n-n72Zaf35zY55eOQeoVBzGmFPq+/UFqtRNWA7jmRhHvMz/yR33B/RSxyTJuPb79zi\n-2mIZOrViG3X/UNL4qtOc1cKXQBi+FjHAMlGrCc+D5lnyOhEvqoEuvQic7V6C8Pvk\n-9q+jngn2Gs4pdJO8FOnwaC5xp/ZNE0v7x/KtAHyBA6iKcaepgoRQPSt1ONiHyfh1\n-iGgJn+Y6IHx4YDYKEY0UIzHhCfWUl8XZWcf4wLGEbGztkRbkCFqrsja5IeaO7umB\n-i6C4f95uSGjV7SiIMJOE8xo/m2g4VCnnmk7U996JwtBMKREMMqa3ABK4trfBL3Kq\n-P6I6ZTlA/C5svkVUVwWOMZau9kLDsxv8keGrFteZtfYa1KPAROFwNuBU82UW0KtX\n-QQbZoBKt1o3LhqEu+hXU3iKocYWSbBThH8u6vPNgSnW2Qcv3gcUU3jGmYeHrGiUO\n-SuEWxwlKUxCxBNfmz1FGswlwve1LsS3RTz/XB/L6Ubhq5L7FevrXz8152kuMqnpy\n-m93sXkL1eJVo07hH+otcRnMzy4vUar9z/N12t3hfTffx29PBKUCc2PKPVpLfJX2i\n-hieHk23fhLnptjc3lm9S+bHO3rqEWHqgNgNp9bpuwiLRsIy6qTtmC8jxXkGXvQrS\n-+2Hv6+jRfDcqEAK3vqi1XL7Td81KRjnheBtsKpjS2PFatK3uTo6v1oRWJCdRCxg1\n-HT6a9KvZ+DNKcxlQISKAOLX72qpziaDl4CpBdQy4Zg2pr9oYkLdlfkaDK/OH4J3M\n-wJiVf/uNPPd+yy6xZXK0SPZHf+mf5Yt+Sim93hIbdS9AMdvHKB5n3DR27H+/okPj\n-w3J9z85hxgP5KspizQR6t77AWddPRy/l3BBZeb+HiaeKGBJeSNWXpkPXHkdjLW8U\n-QStzFR8r15FWJTmamIknjJ3XNbytMCpu8cj2ZVZdyjPcHEBL3WbNYYtauSuYmyUO\n-yXBaecM/KoTdvHiERU/mMuf7f1ftftCHehZoNaP+BeIbIud9IHIdrSQBCW+RC1Y1\n-8opDLMtnIOX3OnyCN38ELYcuNLMJxBqnQgi7MVDVcT1+BN/+lFQtG44+rPUkK+T1\n-Jk1/tIJqcyc1BfY6uFHFXWWnqQnjl0XpZo+/bMDxTVy8yND2\n-=icdI\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "dd0132e1dfb449d1e7df702101a8e7a568eb8ef7",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeab66f884767c7d96e70e9bdd285621ec8d6cc/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeab66f884767c7d96e70e9bdd285621ec8d6cc/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=faeab66f884767c7d96e70e9bdd285621ec8d6cc",
        "patch": "@@ -136,10 +136,7 @@ Build output expected:\n \n ### Verify other gitian builders signatures to your own. (Optional)\n \n-Add other gitian builders keys to your gpg keyring, and/or refresh keys.\n-\n-    gpg --import bitcoin/contrib/gitian-keys/*.pgp\n-    gpg --refresh-keys\n+Add other gitian builders keys to your gpg keyring, and/or refresh keys: See `../bitcoin/contrib/gitian-keys/README.md`.\n \n Verify the signatures\n "
      }
    ]
  },
  {
    "sha": "fabb72baa2fad62b6632dcb4be4f7a65135439cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJiNzJiYWEyZmFkNjJiNjYzMmRjYjRiZTRmN2E2NTEzNTQzOWNk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-19T12:22:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-19T12:18:57Z"
      },
      "message": "contrib: Remove xpired 522739F6 key",
      "tree": {
        "sha": "57c58227dae2805aa03f90f76f2ed43bb39f6bee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57c58227dae2805aa03f90f76f2ed43bb39f6bee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabb72baa2fad62b6632dcb4be4f7a65135439cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabb72baa2fad62b6632dcb4be4f7a65135439cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabb72baa2fad62b6632dcb4be4f7a65135439cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabb72baa2fad62b6632dcb4be4f7a65135439cd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faeab66f884767c7d96e70e9bdd285621ec8d6cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faeab66f884767c7d96e70e9bdd285621ec8d6cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faeab66f884767c7d96e70e9bdd285621ec8d6cc"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a9339c8bdababb0880e97622004caddd9aea40c5",
        "filename": "contrib/gitian-keys/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabb72baa2fad62b6632dcb4be4f7a65135439cd/contrib/gitian-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabb72baa2fad62b6632dcb4be4f7a65135439cd/contrib/gitian-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/README.md?ref=fabb72baa2fad62b6632dcb4be4f7a65135439cd",
        "patch": "@@ -1,6 +1,6 @@\n ## PGP keys of Gitian builders and Developers\n \n-This list contains the public keys of Gitian builders and active developers.\n+The keys.txt contains the public keys of Gitian builders and active developers.\n \n The keys are mainly used to sign git commits or the build results of Gitian\n builds."
      },
      {
        "sha": "32f2973b72211157c9d6bb12ca5b396a1845f85e",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabb72baa2fad62b6632dcb4be4f7a65135439cd/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabb72baa2fad62b6632dcb4be4f7a65135439cd/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=fabb72baa2fad62b6632dcb4be4f7a65135439cd",
        "patch": "@@ -10,7 +10,6 @@ BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n-D2D1085B9425F9DEFA06E7932270E30C522739F6 Jonas Schnelli\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n 4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n 71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan"
      }
    ]
  },
  {
    "sha": "c8edc2c3cb79a1ae15622059004981c70f3775d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGVkYzJjM2NiNzlhMWFlMTU2MjIwNTkwMDQ5ODFjNzBmMzc3NWQ4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-12-19T15:48:06Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2017-12-19T15:48:07Z"
      },
      "message": "[docs] initial QT documentation, move Qt Creator instructions",
      "tree": {
        "sha": "59baaf92d0ed3f6216b533c3357f15d985bfec43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59baaf92d0ed3f6216b533c3357f15d985bfec43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8edc2c3cb79a1ae15622059004981c70f3775d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlo5NPITHHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCQqlD/97cFxL6h8h8DOqyXJEHmqk5mh92/G1\nwpIIkCMSaOWFlb/SecLg37Bn1hAU1k1+pZrdxPimNW2/tGNjgwKnPJOG4HXfBOLC\nxueVZMy+AO0QRYLZHV2y9xMsPlD2u1HFhGaboD/6vJYbVjz7NWJGDUvVbXr3Fjwr\nMty/LG3x05SOoINHuzc2361A31M/WL0Y+sKM08hESqXx9uoowDEBRbZrv/JtewTq\nqaQW2mfWIcBgg/iAqsqQYZYUqCP5Ry/hvDa1vfEN5HctPG0EN0SgWdhp/iuk0DIQ\nHUvYOT9KDbxqPfWNiB/S9IQ+wO9bQz0Wc9sdBJEwq6zdgIR25W+HPw2cZ3+XxehW\ndMy3JS9Pl77TxtxjU8gd7j2H9D/VL+UNjejsNSI4KhNHRmTv8zOTaL0rwsZoi2Xf\nz+dyIpRkzJDTYJf+rCrQOy5epFfwE5MSiz3wuLrXbOvbXdZabhKCP2X8C7IjQiVF\nj8p8p6xo6zydOOKlnNH3Yr5V+IqQau579hOmzVpt3Bfau1l+7PSWMWqprztYoKkl\n8F76Uk9VLrjnPbcdK93OPj4cyYiW50flBzhu/Q3y+WAe7RW+begAM3H8uAHNVYHr\nUNeIL0TUY/uCWsFloAhaOFmufnABC3rwHA+esJhfqHLDifg+N4FW5vQ5AERV2gt1\nIQl87Kx9k/6txg==\n=7a4c\n-----END PGP SIGNATURE-----",
        "payload": "tree 59baaf92d0ed3f6216b533c3357f15d985bfec43\nparent a933cb14c75b9c79a02f8de8397a8eae405a264f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1513698486 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1513698487 +0100\n\n[docs] initial QT documentation, move Qt Creator instructions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8edc2c3cb79a1ae15622059004981c70f3775d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8edc2c3cb79a1ae15622059004981c70f3775d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8edc2c3cb79a1ae15622059004981c70f3775d8/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a933cb14c75b9c79a02f8de8397a8eae405a264f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a933cb14c75b9c79a02f8de8397a8eae405a264f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a933cb14c75b9c79a02f8de8397a8eae405a264f"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 95,
      "deletions": 17
    },
    "files": [
      {
        "sha": "5098f699f16a4bb414232a9dc7f263165c6967b1",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8edc2c3cb79a1ae15622059004981c70f3775d8/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8edc2c3cb79a1ae15622059004981c70f3775d8/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=c8edc2c3cb79a1ae15622059004981c70f3775d8",
        "patch": "@@ -90,23 +90,6 @@ Other commands:\n     ./src/bitcoin-cli --help # Outputs a list of command-line options.\n     ./src/bitcoin-cli help # Outputs a list of RPC commands when the daemon is running.\n \n-Using Qt Creator as IDE\n-------------------------\n-You can use Qt Creator as an IDE, for bitcoin development.\n-Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n-Uncheck everything except Qt Creator during the installation process.\n-\n-1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --enable-debug\n-3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n-4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n-5. Leave the file selection as it is\n-6. Confirm the \"summary page\"\n-7. In the \"Projects\" tab select \"Manage Kits...\"\n-8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n-9. Select LLDB as debugger (you might need to set the path to your installation)\n-10. Start debugging with Qt Creator\n-\n Notes\n -----\n "
      },
      {
        "sha": "7ffea98170ebdc5166f405168eb83f2ec5a2e932",
        "filename": "src/qt/README.md",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8edc2c3cb79a1ae15622059004981c70f3775d8/src/qt/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8edc2c3cb79a1ae15622059004981c70f3775d8/src/qt/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/README.md?ref=c8edc2c3cb79a1ae15622059004981c70f3775d8",
        "patch": "@@ -0,0 +1,95 @@\n+This directory contains the BitcoinQT graphical user interface (GUI). It uses the cross platform framework [QT](https://www1.qt.io/developers/).\n+\n+The current precise version for QT 5 is specified in [qt.mk](/depends/packages/qt.mk). QT 4 is also supported (see [#8263](https://github.com/bitcoin/bitcoin/issues/8263)).\n+\n+## Compile and run\n+\n+See build instructions ([OSX](/doc/build-osx.md), [Windows](/doc/build-windows.md), [Unix](/doc/build-unix.md), etc).\n+\n+To run:\n+\n+```sh\n+./src/qt/bitcoin-qt\n+```\n+\n+## Files and directories\n+\n+### forms\n+\n+Contains [Designer UI](http://doc.qt.io/qt-5.9/designer-using-a-ui-file.html) files. They are created with [Qt Creator](#use-qt-Creator-as IDE), but can be edited using any text editor.\n+\n+### locale\n+\n+Contains translations. They are periodically updated. The process is described [here](/doc/translation_process.md).\n+\n+### res\n+\n+Resources such as the icon.\n+\n+### test\n+\n+Tests.\n+\n+### bitcoingui.(h/cpp)\n+\n+Represents the main window of the Bitcoin UI.\n+\n+### \\*model.(h/cpp)\n+\n+The model. When it has a corresponding controller, it generally inherits from  [QAbstractTableModel](http://doc.qt.io/qt-5/qabstracttablemodel.html). Models that are used by controllers as helpers inherit from other QT classes like [QValidator](http://doc.qt.io/qt-5/qvalidator.html).\n+\n+ClientModel is used by the main application `bitcoingui` and several models like `peertablemodel`.\n+\n+### \\*page.(h/cpp)\n+\n+A controller. `:NAMEpage.cpp` generally includes `:NAMEmodel.h` and `forms/:NAME.page.ui` with a similar `:NAME`.\n+\n+### \\*dialog.(h/cpp)\n+\n+Various dialogs, e.g. to open a URL. Inherit from [QDialog](http://doc.qt.io/qt-4.8/qdialog.html).\n+\n+### paymentserver.(h/cpp)\n+\n+Used to process BIP21 and BIP70 (see https://github.com/bitcoin/bitcoin/pull/11622) payment URI / requests. Also handles URI based application switching (e.g. when following a bitcoin:... link from a browser).\n+\n+### walletview.(h/cpp)\n+\n+Represents the view to a single wallet.\n+\n+### Other .h/cpp files\n+\n+* UI elements like BitcoinAmountField, which inherit from QWidget.\n+* `bitcoinstrings.cpp`: automatically generated\n+* `bitcoinunits.(h/cpp)`: BTC / mBTC / etc handling\n+* `callback.h`\n+* `guiconstants.h`: UI colors, app name, etc\n+* `guiutil.h`: several helper functions\n+* `macdockiconhandler.(h/cpp)`\n+* `macdockiconhandler.(h/cpp)`: display notifications in OSX\n+\n+## Contribute\n+\n+See [CONTRIBUTING.md](/CONTRIBUTING.md) for general guidelines. Specifically for QT:\n+\n+* don't change `local/bitcoin_en.ts`; this happens [automatically](/doc/translation_process.md#writing-code-with-translations)\n+\n+## Using Qt Creator as IDE\n+\n+You can use Qt Creator as an IDE. This is especially useful if you want to change\n+the UI layout.\n+\n+Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n+Uncheck everything except Qt Creator during the installation process.\n+\n+Instructions for OSX:\n+\n+1. Make sure you installed everything through Homebrew mentioned in the [OSX build instructions](/docs/build-osx.md)\n+2. Use `./configure` with the `--enable-debug` flag\n+3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n+4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n+5. Leave the file selection as it is\n+6. Confirm the \"summary page\"\n+7. In the \"Projects\" tab select \"Manage Kits...\"\n+8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n+9. Select LLDB as debugger (you might need to set the path to your installation)\n+10. Start debugging with Qt Creator (you might need to the executable to \"bitcoin-qt\" under \"Run\", which is where you can also add command line arguments)"
      }
    ]
  },
  {
    "sha": "a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzFjNTZhZWJiZDkzYjI1ZmNkYmMxNzBiZDhiNDUxZTUyYTZiNGRk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-12-20T20:51:20Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-12-20T20:53:38Z"
      },
      "message": "clientversion: Use full commit hash for commit-based version descriptions\n\ngit keeps changing the number of digits in abbreviated hashes, resulting in the GitHub archive hash changing because we include it here.\nTo workaround this and avoid hashes that become increasingly ambiguous later on, just include the full commit hash when building from git.\nThis has no effect on tagged releases.",
      "tree": {
        "sha": "99536062f42e316bbbcd8cc40fbd74926d0a38e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99536062f42e316bbbcd8cc40fbd74926d0a38e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41cced21063a89992ef393dda4fffc44ff60c7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cced21063a89992ef393dda4fffc44ff60c7c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41cced21063a89992ef393dda4fffc44ff60c7c3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0d070c45e22a733c5f733f727b5283e42f2c2c55",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
        "patch": "@@ -44,7 +44,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n //! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n #ifdef GIT_ARCHIVE\n-#define GIT_COMMIT_ID \"$Format:%h$\"\n+#define GIT_COMMIT_ID \"$Format:%H$\"\n #define GIT_COMMIT_DATE \"$Format:%cD$\"\n #endif\n "
      }
    ]
  },
  {
    "sha": "bdb3231bee7a729a94045133fc4335226b2b0bb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGIzMjMxYmVlN2E3MjlhOTQwNDUxMzNmYzQzMzUyMjZiMmIwYmI5",
    "commit": {
      "author": {
        "name": "251",
        "email": "13120787+251Labs@users.noreply.github.com",
        "date": "2017-12-29T15:20:28Z"
      },
      "committer": {
        "name": "251",
        "email": "13120787+251Labs@users.noreply.github.com",
        "date": "2017-12-29T15:20:28Z"
      },
      "message": "Implements a virtual destructor on the BaseRequestHandler class.\n\nImplements a virtual destructor on the BaseRequestHandler class to protect against undefined behavior in\nthe event that a derived BaseRequestHandler class has a destructor and an object of such derived class\nis destroyed through a pointer to its base class.",
      "tree": {
        "sha": "fed5b8e08fe8c0cd7b6721ee48b733df9b642a2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed5b8e08fe8c0cd7b6721ee48b733df9b642a2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdb3231bee7a729a94045133fc4335226b2b0bb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb3231bee7a729a94045133fc4335226b2b0bb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdb3231bee7a729a94045133fc4335226b2b0bb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb3231bee7a729a94045133fc4335226b2b0bb9/comments",
    "author": {
      "login": "l2a5b1",
      "id": 13120787,
      "node_id": "MDQ6VXNlcjEzMTIwNzg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13120787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l2a5b1",
      "html_url": "https://github.com/l2a5b1",
      "followers_url": "https://api.github.com/users/l2a5b1/followers",
      "following_url": "https://api.github.com/users/l2a5b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/l2a5b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l2a5b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l2a5b1/subscriptions",
      "organizations_url": "https://api.github.com/users/l2a5b1/orgs",
      "repos_url": "https://api.github.com/users/l2a5b1/repos",
      "events_url": "https://api.github.com/users/l2a5b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l2a5b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "l2a5b1",
      "id": 13120787,
      "node_id": "MDQ6VXNlcjEzMTIwNzg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13120787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l2a5b1",
      "html_url": "https://github.com/l2a5b1",
      "followers_url": "https://api.github.com/users/l2a5b1/followers",
      "following_url": "https://api.github.com/users/l2a5b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/l2a5b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l2a5b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l2a5b1/subscriptions",
      "organizations_url": "https://api.github.com/users/l2a5b1/orgs",
      "repos_url": "https://api.github.com/users/l2a5b1/repos",
      "events_url": "https://api.github.com/users/l2a5b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l2a5b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9fdac130a5ed1d96fcac6bb87c10bec9d596b17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fdac130a5ed1d96fcac6bb87c10bec9d596b17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9fdac130a5ed1d96fcac6bb87c10bec9d596b17"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1fe93180f0b24a22dbeb602d38f0ff3c7b71e435",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdb3231bee7a729a94045133fc4335226b2b0bb9/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdb3231bee7a729a94045133fc4335226b2b0bb9/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bdb3231bee7a729a94045133fc4335226b2b0bb9",
        "patch": "@@ -198,6 +198,7 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n class BaseRequestHandler\n {\n public:\n+    virtual ~BaseRequestHandler() {}\n     virtual UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) = 0;\n     virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n };"
      }
    ]
  },
  {
    "sha": "65682da7e57af544abb46a7d8a7f4fdca0c73f56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTY4MmRhN2U1N2FmNTQ0YWJiNDZhN2Q4YTdmNGZkY2EwYzczZjU2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-01-16T15:46:57Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-01-16T15:46:57Z"
      },
      "message": "[tests] bind functional test nodes to 127.0.0.1",
      "tree": {
        "sha": "958da68f22af1b6af2653873e01c131a1e8f5da1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/958da68f22af1b6af2653873e01c131a1e8f5da1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65682da7e57af544abb46a7d8a7f4fdca0c73f56",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCgAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlpeHnETHHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCeulD/9P+6x1tDaS9iFcGviJxG+QozNYgk7B\n3oCg1hboaTFtAAw7+AbCOXog4BsLowaDJPMgoCdGlfO0yN01LsDpv0nRNVOqP6/n\nsi4QIl5yQJe14lmo6MOVXbV3lmbqF/cAzWfOHV15dAebBGtL8u+inwjk03P4jeLI\n5cDYrh72F/SihFNQBw3Oe3KttSkDz5Z1H+XWMvHOxEPfCYQ+owBd7xShJozexL5G\n5+luA77irzj6KGzqopZj9RK8YMRKS6hGOW6SfulP25vQpP7ZZ68WP3JPQeabMFO3\nspEQHQY9tb1YppKgVJVl9B1UXGyc5iKr2ZBmc+grGQlNC72gznzwYiRaKkd6Eb6W\nPi0cI70Cq39zMwyPsk9Q7+ZHOR2dLw3WmkSKwItaR+A1/jiQwDDjsFWJKCiUmOfy\nX59q9E6U9VYtkuY15Bz8wts+SpzvGDphaQ2zPEh8NpuMMcoSu6GA5T/YSNQa3Xi8\nlcYztxGaN71I5uFOjI0bNcpRG3LlkViAi9K/h2Ohf+MCNc+7fMnUZAwGrYkg2OIR\nJjOrR4jczJN0S45HE3rJ/EJt+nAmaHhP+LThDQ1GmJzRp7lfZHBCnyH35DyGTU/Q\nkpMSDqVP8xwe6IXsFP9t+qeJZWusbLaDL+w+W3fAY36owrREabpjZr6U29OLImUB\nmgDfsoaqtNJnBg==\n=t7El\n-----END PGP SIGNATURE-----",
        "payload": "tree 958da68f22af1b6af2653873e01c131a1e8f5da1\nparent cad504bf4c302f7a72e0a0e191f3fdbafda7340f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1516117617 +0000\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1516117617 +0000\n\n[tests] bind functional test nodes to 127.0.0.1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65682da7e57af544abb46a7d8a7f4fdca0c73f56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65682da7e57af544abb46a7d8a7f4fdca0c73f56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65682da7e57af544abb46a7d8a7f4fdca0c73f56/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cad504bf4c302f7a72e0a0e191f3fdbafda7340f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad504bf4c302f7a72e0a0e191f3fdbafda7340f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cad504bf4c302f7a72e0a0e191f3fdbafda7340f"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "62c4e46af1637a0a960c4e3c8456e0adf1d72e6f",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65682da7e57af544abb46a7d8a7f4fdca0c73f56/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65682da7e57af544abb46a7d8a7f4fdca0c73f56/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=65682da7e57af544abb46a7d8a7f4fdca0c73f56",
        "patch": "@@ -292,6 +292,7 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n+        f.write(\"bind=127.0.0.1\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "09754063e0605429680f4c58a85967777ad87cc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTc1NDA2M2UwNjA1NDI5NjgwZjRjNThhODU5Njc3NzdhZDg3Y2Mx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-01-19T14:58:21Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-01-19T14:58:21Z"
      },
      "message": "Correct mempool mapTx comment",
      "tree": {
        "sha": "beee32fa4e312ad4b4361403c8481c61f4d1bb75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beee32fa4e312ad4b4361403c8481c61f4d1bb75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09754063e0605429680f4c58a85967777ad87cc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09754063e0605429680f4c58a85967777ad87cc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09754063e0605429680f4c58a85967777ad87cc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09754063e0605429680f4c58a85967777ad87cc1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a97f39afaa890caa7987c6bc001b9a66e3e74e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a97f39afaa890caa7987c6bc001b9a66e3e74e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a97f39afaa890caa7987c6bc001b9a66e3e74e8"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d25d9c50bb90b9b0b18380993a0a12f4968e9020",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09754063e0605429680f4c58a85967777ad87cc1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09754063e0605429680f4c58a85967777ad87cc1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=09754063e0605429680f4c58a85967777ad87cc1",
        "patch": "@@ -379,8 +379,9 @@ class SaltedTxidHasher\n  *\n  * mapTx is a boost::multi_index that sorts the mempool on 4 criteria:\n  * - transaction hash\n- * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n+ * - descendant feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n  * - time in mempool\n+ * - ancestor feerate [we use min(feerate of tx, feerate of tx with all unconfirmed ancestors)]\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given"
      }
    ]
  },
  {
    "sha": "718f05cab5fe632c5dc4e3c689d5e4cd51331089",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MThmMDVjYWI1ZmU2MzJjNWRjNGUzYzY4OWQ1ZTRjZDUxMzMxMDg5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-01-23T18:57:10Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-01-23T19:50:37Z"
      },
      "message": "move more bumpfee prechecks to feebumper::PreconditionChecks",
      "tree": {
        "sha": "20e4c6afd905aff0beb5afab5bb343471a300399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20e4c6afd905aff0beb5afab5bb343471a300399"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/718f05cab5fe632c5dc4e3c689d5e4cd51331089",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/718f05cab5fe632c5dc4e3c689d5e4cd51331089",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/718f05cab5fe632c5dc4e3c689d5e4cd51331089",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/718f05cab5fe632c5dc4e3c689d5e4cd51331089/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5e4b9b5100ec15217d43edb5f4149439f4b20a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e4b9b5100ec15217d43edb5f4149439f4b20a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e4b9b5100ec15217d43edb5f4149439f4b20a5"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 20,
      "deletions": 17
    },
    "files": [
      {
        "sha": "e78095bf74c0ac985ef4b8bb97d0c7d0cf3315f5",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 17,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/718f05cab5fe632c5dc4e3c689d5e4cd51331089/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/718f05cab5fe632c5dc4e3c689d5e4cd51331089/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=718f05cab5fe632c5dc4e3c689d5e4cd51331089",
        "patch": "@@ -65,6 +65,25 @@ static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWallet\n         errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n+\n+    if (!SignalsOptInRBF(*wtx.tx)) {\n+        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", wtx.GetHash().ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+\n     return feebumper::Result::OK;\n }\n \n@@ -94,23 +113,6 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         return result;\n     }\n \n-    if (!SignalsOptInRBF(*wtx.tx)) {\n-        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    // check that original tx consists entirely of our inputs\n-    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n-        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n     // figure out which output was change\n     // if there was no change output or multiple change outputs, fail\n     int nOutput = -1;\n@@ -228,6 +230,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         }\n     }\n \n+\n     return Result::OK;\n }\n "
      }
    ]
  },
  {
    "sha": "d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2ExODVhMzNiN2JjMDllNGNhOTk4ZjQyZjFmOWFlYTgxNzdlZjhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-18T16:21:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-24T11:18:29Z"
      },
      "message": "net: Move misbehaving logging to net logging category\n\nThis moves the error messages for misbehavior (when available) into the\nline that reports the misbehavior, as well as moves the logging to the\n`net` category.\n\nThis is a continuation of #11583 and avoids serious-looking errors due\nto misbehaving peers.\n\nTo do this, Misbehaving() gains an optional `message` argument.\n\nE.g. change:\n\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\n    2018-01-18 16:02:27 ERROR: non-continuous headers sequence\n\nto\n\n    2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence",
      "tree": {
        "sha": "03951b5ebc0b7302b4399d066e688eb7fbfc4372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03951b5ebc0b7302b4399d066e688eb7fbfc4372"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "898f560b55aba2070f188b0223ef2beefcdede8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898f560b55aba2070f188b0223ef2beefcdede8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/898f560b55aba2070f188b0223ef2beefcdede8b"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "edebccfb31f2c8b2177171f1b613573588c8d2ab",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
        "patch": "@@ -750,7 +750,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n }\n \n // Requires cs_main.\n-void Misbehaving(NodeId pnode, int howmuch)\n+void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n {\n     if (howmuch == 0)\n         return;\n@@ -761,12 +761,13 @@ void Misbehaving(NodeId pnode, int howmuch)\n \n     state->nMisbehavior += howmuch;\n     int banscore = gArgs.GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n+    std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrintf(\"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n         state->fShouldBan = true;\n     } else\n-        LogPrintf(\"%s: %s peer=%d (%d -> %d)\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n \n@@ -1260,8 +1261,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->GetId());\n+            Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->GetId()));\n             return;\n         }\n         resp.txn[i] = block.vtx[req.indexes[i]];\n@@ -1318,8 +1318,8 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         uint256 hashLastBlock;\n         for (const CBlockHeader& header : headers) {\n             if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n+                Misbehaving(pfrom->GetId(), 20, \"non-continuous headers sequence\");\n+                return false;\n             }\n             hashLastBlock = header.GetHash();\n         }\n@@ -1338,7 +1338,9 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         if (state.IsInvalid(nDoS)) {\n             LOCK(cs_main);\n             if (nDoS > 0) {\n-                Misbehaving(pfrom->GetId(), nDoS);\n+                Misbehaving(pfrom->GetId(), nDoS, \"invalid header received\");\n+            } else {\n+                LogPrint(BCLog::NET, \"peer=%d: invalid header received\\n\", pfrom->GetId());\n             }\n             if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {\n                 // Goal: don't allow outbound peers to use up our outbound\n@@ -1374,7 +1376,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 // etc), and not just the duplicate-invalid case.\n                 pfrom->fDisconnect = true;\n             }\n-            return error(\"invalid header received\");\n+            return false;\n         }\n     }\n \n@@ -1783,8 +1785,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vAddr.size() > 1000)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message addr size() = %u\", vAddr.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message addr size() = %u\", vAddr.size()));\n+            return false;\n         }\n \n         // Store the new addresses\n@@ -1859,8 +1861,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message inv size() = %u\", vInv.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message inv size() = %u\", vInv.size()));\n+            return false;\n         }\n \n         bool fBlocksOnly = !fRelayTxes;\n@@ -1920,8 +1922,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message getdata size() = %u\", vInv.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message getdata size() = %u\", vInv.size()));\n+            return false;\n         }\n \n         LogPrint(BCLog::NET, \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->GetId());\n@@ -2323,9 +2325,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0) {\n-                    LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                     LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n+                    Misbehaving(pfrom->GetId(), nDoS, strprintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId()));\n                 } else {\n                     LogPrint(BCLog::NET, \"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 }\n@@ -2411,8 +2412,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 ReadStatus status = partialBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status == READ_STATUS_INVALID) {\n                     MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case of whitelist\n-                    Misbehaving(pfrom->GetId(), 100);\n-                    LogPrintf(\"Peer %d sent us invalid compact block\\n\", pfrom->GetId());\n+                    Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block\\n\", pfrom->GetId()));\n                     return true;\n                 } else if (status == READ_STATUS_FAILED) {\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n@@ -2539,8 +2539,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadStatus status = partialBlock.FillBlock(*pblock, resp.txn);\n             if (status == READ_STATUS_INVALID) {\n                 MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n-                Misbehaving(pfrom->GetId(), 100);\n-                LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->GetId());\n+                Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->GetId()));\n                 return true;\n             } else if (status == READ_STATUS_FAILED) {\n                 // Might have collided, fall back to getdata now :(\n@@ -2602,8 +2601,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         unsigned int nCount = ReadCompactSize(vRecv);\n         if (nCount > MAX_HEADERS_RESULTS) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"headers message size = %u\", nCount);\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"headers message size = %u\", nCount));\n+            return false;\n         }\n         headers.resize(nCount);\n         for (unsigned int n = 0; n < nCount; n++) {"
      },
      {
        "sha": "b534ef01c345269742343eafea477f9810c1810e",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
        "patch": "@@ -79,6 +79,6 @@ struct CNodeStateStats {\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch);\n+void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "faefd2923a00e82be794f090b4bd861c5c58c95a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWVmZDI5MjNhMDBlODJiZTc5NGYwOTBiNGJkODYxYzVjNThjOTVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-12-09T23:39:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-24T20:52:07Z"
      },
      "message": "qa: Prepare functional tests for Windows\n\n* Pass `sys.executable` when calling a python script via the subprocess\n  module\n* Don't remove the log file while it is still open and written to\n* Properly use os.pathsep and os.path.sep when modifying the PATH\n  environment variable\n* util-tests: Use os.path.join for Windows compatibility",
      "tree": {
        "sha": "4d151dcc68a8bcb8e3617b1c4084d0bdfe9d1dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d151dcc68a8bcb8e3617b1c4084d0bdfe9d1dd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faefd2923a00e82be794f090b4bd861c5c58c95a",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaaPH3AAoJEM4rdWl+aaVIbqgMAJI9r07JygO3Z69B0UUKvXvb\n4ITa+2aPw/J1vgglJu9ip0R/Sdrmd3gouN253PfYjdikO3GZO04nxWlGfVLg4GiA\nK+SXH9vT2v686bn11Zu+JKmVdq5xnmn+GZvPst9uNlhmBrOsHUFk9qHUmoaY3CcB\nWA0bg/v7HEyFHfMqehsqc0AxBf/Oi58QxaoBPuDeRkXQVtXBRw7PduEGvyYpJEvm\nW9UVZOQ0suLuL7ekpc1ykxZ6FyVGDs3j/ubBOftENVyE+Px7f7azC96o4Y5M92Hi\nfKq6Fumyb+YPZggoniWhqs0aAHWW+GMhTEWRYWL6N8sq8F29UAvD1YzM3bIpbjlL\ne5NSih8+X+RE9LT6ugS5hL3voEhB48F2nEaVkl0XLp9b/l4iQMJvc2iJ5LupTtI7\n83T7Wf8WOPJTMCXrB1xRVizDiezdZ2wSuQLoqQZZiXLk9obUucP/veb2f8suguqh\nAf8UD24xz+r4FYFzR7AcSGrt+ZOKS0/OIJ0/UTnR+A==\n=oLXC\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d151dcc68a8bcb8e3617b1c4084d0bdfe9d1dd7\nparent 7abb0f0929bd2cd413087f602f9bb5cebab898f8\nauthor MarcoFalke <falke.marco@gmail.com> 1512862746 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1516827127 -0500\n\nqa: Prepare functional tests for Windows\n\n* Pass `sys.executable` when calling a python script via the subprocess\n  module\n* Don't remove the log file while it is still open and written to\n* Properly use os.pathsep and os.path.sep when modifying the PATH\n  environment variable\n* util-tests: Use os.path.join for Windows compatibility\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faefd2923a00e82be794f090b4bd861c5c58c95a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faefd2923a00e82be794f090b4bd861c5c58c95a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faefd2923a00e82be794f090b4bd861c5c58c95a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7abb0f0929bd2cd413087f602f9bb5cebab898f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7abb0f0929bd2cd413087f602f9bb5cebab898f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7abb0f0929bd2cd413087f602f9bb5cebab898f8"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a5e66bd9593d9d8366286fd0c661422558903c26",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faefd2923a00e82be794f090b4bd861c5c58c95a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faefd2923a00e82be794f090b4bd861c5c58c95a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faefd2923a00e82be794f090b4bd861c5c58c95a",
        "patch": "@@ -99,7 +99,9 @@ def main(self):\n \n         PortSeed.n = self.options.port_seed\n \n-        os.environ['PATH'] = self.options.srcdir + \":\" + self.options.srcdir + \"/qt:\" + os.environ['PATH']\n+        os.environ['PATH'] = self.options.srcdir + os.pathsep + \\\n+                             self.options.srcdir + os.path.sep + \"qt\" + os.pathsep + \\\n+                             os.environ['PATH']\n \n         check_json_precision()\n \n@@ -148,10 +150,11 @@ def main(self):\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n         if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n-            self.log.info(\"Cleaning up\")\n-            shutil.rmtree(self.options.tmpdir)\n+            self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n+            cleanup_tree_on_exit = True\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n+            cleanup_tree_on_exit = False\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n@@ -164,6 +167,8 @@ def main(self):\n             self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n             exit_code = TEST_EXIT_FAILED\n         logging.shutdown()\n+        if cleanup_tree_on_exit:\n+            shutil.rmtree(self.options.tmpdir)\n         sys.exit(exit_code)\n \n     # Methods to override in subclass test scripts."
      },
      {
        "sha": "ba4d06000903243fda7d5c350d9bb71488676018",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faefd2923a00e82be794f090b4bd861c5c58c95a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faefd2923a00e82be794f090b4bd861c5c58c95a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=faefd2923a00e82be794f090b4bd861c5c58c95a",
        "patch": "@@ -268,7 +268,7 @@ def main():\n     if args.help:\n         # Print help for test_runner.py, then print help of the first script (with args removed) and exit.\n         parser.print_help()\n-        subprocess.check_call([(config[\"environment\"][\"SRCDIR\"] + '/test/functional/' + test_list[0].split()[0])] + ['-h'])\n+        subprocess.check_call([sys.executable, os.path.join(config[\"environment\"][\"SRCDIR\"], 'test', 'functional', test_list[0].split()[0]), '-h'])\n         sys.exit(0)\n \n     check_script_list(config[\"environment\"][\"SRCDIR\"])\n@@ -312,7 +312,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n         try:\n-            subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+            subprocess.check_output([sys.executable, tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n         except subprocess.CalledProcessError as e:\n             sys.stdout.buffer.write(e.output)\n             raise\n@@ -342,7 +342,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs, _ = subprocess.Popen([sys.executble, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n@@ -412,7 +412,7 @@ def get_next(self):\n             tmpdir_arg = [\"--tmpdir={}\".format(testdir)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n+                              subprocess.Popen([sys.executable, self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),"
      },
      {
        "sha": "30bd13d0dc47d07a944d57f686bea20c1d20de2b",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faefd2923a00e82be794f090b4bd861c5c58c95a/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faefd2923a00e82be794f090b4bd861c5c58c95a/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=faefd2923a00e82be794f090b4bd861c5c58c95a",
        "patch": "@@ -44,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test\", \"util\", \"data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "a777244e48227db6d3fd06cd2500cc007dacfb10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzc3MjQ0ZTQ4MjI3ZGI2ZDNmZDA2Y2QyNTAwY2MwMDdkYWNmYjEw",
    "commit": {
      "author": {
        "name": "Andrea Comand",
        "email": "andrea@comand.me",
        "date": "2017-12-26T17:12:04Z"
      },
      "committer": {
        "name": "Andrea Comand",
        "email": "andrea@comand.me",
        "date": "2018-01-25T18:43:19Z"
      },
      "message": "Build: Add a makefile target for Doxygen documentation\n\nYou can now build the doxygen documentation with `make docs` and clean it with `make clean-docs`.\n\nFixes: #11949",
      "tree": {
        "sha": "05cc6087e08c492f207670d99f6f66505f14c63b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05cc6087e08c492f207670d99f6f66505f14c63b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a777244e48227db6d3fd06cd2500cc007dacfb10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a777244e48227db6d3fd06cd2500cc007dacfb10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a777244e48227db6d3fd06cd2500cc007dacfb10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a777244e48227db6d3fd06cd2500cc007dacfb10/comments",
    "author": {
      "login": "Ov3rlo4d",
      "id": 5066664,
      "node_id": "MDQ6VXNlcjUwNjY2NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5066664?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ov3rlo4d",
      "html_url": "https://github.com/Ov3rlo4d",
      "followers_url": "https://api.github.com/users/Ov3rlo4d/followers",
      "following_url": "https://api.github.com/users/Ov3rlo4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ov3rlo4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ov3rlo4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ov3rlo4d/subscriptions",
      "organizations_url": "https://api.github.com/users/Ov3rlo4d/orgs",
      "repos_url": "https://api.github.com/users/Ov3rlo4d/repos",
      "events_url": "https://api.github.com/users/Ov3rlo4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ov3rlo4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Ov3rlo4d",
      "id": 5066664,
      "node_id": "MDQ6VXNlcjUwNjY2NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5066664?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ov3rlo4d",
      "html_url": "https://github.com/Ov3rlo4d",
      "followers_url": "https://api.github.com/users/Ov3rlo4d/followers",
      "following_url": "https://api.github.com/users/Ov3rlo4d/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ov3rlo4d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ov3rlo4d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ov3rlo4d/subscriptions",
      "organizations_url": "https://api.github.com/users/Ov3rlo4d/orgs",
      "repos_url": "https://api.github.com/users/Ov3rlo4d/repos",
      "events_url": "https://api.github.com/users/Ov3rlo4d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ov3rlo4d/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ae7cf8ef5be67e085abc1b1dc71bc44865a71b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ae7cf8ef5be67e085abc1b1dc71bc44865a71b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ae7cf8ef5be67e085abc1b1dc71bc44865a71b3"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f345760f2d91ca27fa75facb75da1b792a7f43d5",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a777244e48227db6d3fd06cd2500cc007dacfb10/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a777244e48227db6d3fd06cd2500cc007dacfb10/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=a777244e48227db6d3fd06cd2500cc007dacfb10",
        "patch": "@@ -277,6 +277,22 @@ CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n-clean-local:\n+doc/doxygen/.stamp: doc/Doxyfile FORCE\n+\t$(MKDIR_P) $(@D)\n+\t$(DOXYGEN) $^\n+\t$(AM_V_at) touch $@\n+\n+if HAVE_DOXYGEN\n+docs: doc/doxygen/.stamp\n+else\n+docs:\n+\t@echo \"error: doxygen not found\"\n+endif\n+\n+clean-docs:\n+\trm -rf doc/doxygen\n+\n+clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache\n+"
      },
      {
        "sha": "aaa76681956c1fe32048461d8577bb12fa669bd9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a777244e48227db6d3fd06cd2500cc007dacfb10/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a777244e48227db6d3fd06cd2500cc007dacfb10/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a777244e48227db6d3fd06cd2500cc007dacfb10",
        "patch": "@@ -93,6 +93,11 @@ AC_PATH_PROG(HEXDUMP,hexdump)\n AC_PATH_TOOL(READELF, readelf)\n AC_PATH_TOOL(CPPFILT, c++filt)\n AC_PATH_TOOL(OBJCOPY, objcopy)\n+AC_PATH_PROG(DOXYGEN, doxygen)\n+if test -z \"$DOXYGEN\"; then\n+   AC_MSG_WARN([Doxygen not found])\n+fi\n+AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n \n@@ -1257,7 +1262,7 @@ AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n-AC_CONFIG_FILES([doc/Doxyfile])\n+AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])"
      },
      {
        "sha": "2ebfb59c086fd7f41cf0c71167fd03fabf292266",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a777244e48227db6d3fd06cd2500cc007dacfb10/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a777244e48227db6d3fd06cd2500cc007dacfb10/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=a777244e48227db6d3fd06cd2500cc007dacfb10",
        "patch": "@@ -132,6 +132,8 @@ Not OK (used plenty in the current source, but not picked up):\n A full list of comment syntaxes picked up by doxygen can be found at http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html,\n but if possible use one of the above styles.\n \n+Documentation can be generated with `make docs` and cleaned up with `make clean-docs`.\n+\n Development tips and tricks\n ---------------------------\n "
      }
    ]
  },
  {
    "sha": "e868b22917aee4c888f843bd86a2bf8ea29530eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODY4YjIyOTE3YWVlNGM4ODhmODQzYmQ4NmEyYmY4ZWEyOTUzMGVi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-01-19T15:38:58Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-01-25T23:02:24Z"
      },
      "message": "fee estimator: avoid sorting mempool on shutdown",
      "tree": {
        "sha": "c559264548ee7734ad583af45329688fbf88e21e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c559264548ee7734ad583af45329688fbf88e21e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e868b22917aee4c888f843bd86a2bf8ea29530eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e868b22917aee4c888f843bd86a2bf8ea29530eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e868b22917aee4c888f843bd86a2bf8ea29530eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e868b22917aee4c888f843bd86a2bf8ea29530eb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09754063e0605429680f4c58a85967777ad87cc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09754063e0605429680f4c58a85967777ad87cc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09754063e0605429680f4c58a85967777ad87cc1"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "564b2b3328100ae08c42dec7f9fde9e72bf0fd68",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e868b22917aee4c888f843bd86a2bf8ea29530eb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e868b22917aee4c888f843bd86a2bf8ea29530eb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e868b22917aee4c888f843bd86a2bf8ea29530eb",
        "patch": "@@ -205,7 +205,7 @@ void Shutdown()\n \n     if (fFeeEstimatesInitialized)\n     {\n-        ::feeEstimator.FlushUnconfirmed(::mempool);\n+        ::feeEstimator.FlushUnconfirmed();\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())"
      },
      {
        "sha": "79b450e3e674d249d0fd2631e266f41bdba191da",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e868b22917aee4c888f843bd86a2bf8ea29530eb/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e868b22917aee4c888f843bd86a2bf8ea29530eb/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=e868b22917aee4c888f843bd86a2bf8ea29530eb",
        "patch": "@@ -981,16 +981,17 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n     return true;\n }\n \n-void CBlockPolicyEstimator::FlushUnconfirmed(CTxMemPool& pool) {\n+void CBlockPolicyEstimator::FlushUnconfirmed() {\n     int64_t startclear = GetTimeMicros();\n-    std::vector<uint256> txids;\n-    pool.queryHashes(txids);\n     LOCK(cs_feeEstimator);\n-    for (auto& txid : txids) {\n-        removeTx(txid, false);\n+    size_t num_entries = mapMemPoolTxs.size();\n+    // Remove every entry in mapMemPoolTxs\n+    while (!mapMemPoolTxs.empty()) {\n+        auto mi = mapMemPoolTxs.begin();\n+        removeTx(mi->first, false); // this calls erase() on mapMemPoolTxs\n     }\n     int64_t endclear = GetTimeMicros();\n-    LogPrint(BCLog::ESTIMATEFEE, \"Recorded %u unconfirmed txs from mempool in %gs\\n\",txids.size(), (endclear - startclear)*0.000001);\n+    LogPrint(BCLog::ESTIMATEFEE, \"Recorded %u unconfirmed txs from mempool in %gs\\n\", num_entries, (endclear - startclear)*0.000001);\n }\n \n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)"
      },
      {
        "sha": "5f69e989c17180b81085c119e4b62ad3d28a0df4",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e868b22917aee4c888f843bd86a2bf8ea29530eb/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e868b22917aee4c888f843bd86a2bf8ea29530eb/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e868b22917aee4c888f843bd86a2bf8ea29530eb",
        "patch": "@@ -223,7 +223,7 @@ class CBlockPolicyEstimator\n     bool Read(CAutoFile& filein);\n \n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n-    void FlushUnconfirmed(CTxMemPool& pool);\n+    void FlushUnconfirmed();\n \n     /** Calculation of highest target that estimates are tracked for */\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;"
      }
    ]
  },
  {
    "sha": "669c9433cfbc6bc25243fcdb550009b2d4180cc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjljOTQzM2NmYmM2YmMyNTI0M2ZjZGI1NTAwMDliMmQ0MTgwY2M5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-01-19T15:53:55Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-01-25T23:02:24Z"
      },
      "message": "Avoid leaking prioritization information when relaying transactions",
      "tree": {
        "sha": "164c8ab2d48325d96a903877fd6b722e5d2dc1c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/164c8ab2d48325d96a903877fd6b722e5d2dc1c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/669c9433cfbc6bc25243fcdb550009b2d4180cc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/669c9433cfbc6bc25243fcdb550009b2d4180cc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/669c9433cfbc6bc25243fcdb550009b2d4180cc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/669c9433cfbc6bc25243fcdb550009b2d4180cc9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e868b22917aee4c888f843bd86a2bf8ea29530eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e868b22917aee4c888f843bd86a2bf8ea29530eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e868b22917aee4c888f843bd86a2bf8ea29530eb"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c6a1bf08ce1eb181a408c27742e8e0611fe82339",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/669c9433cfbc6bc25243fcdb550009b2d4180cc9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/669c9433cfbc6bc25243fcdb550009b2d4180cc9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=669c9433cfbc6bc25243fcdb550009b2d4180cc9",
        "patch": "@@ -241,15 +241,18 @@ class CompareTxMemPoolEntryByDescendantScore\n \n /** \\class CompareTxMemPoolEntryByScore\n  *\n- *  Sort by score of entry ((fee+delta)/size) in descending order\n+ *  Sort by feerate of entry (fee/size) in descending order\n+ *  This is only used for transaction relay, so we use GetFee()\n+ *  instead of GetModifiedFee() to avoid leaking prioritization\n+ *  information via the sort order.\n  */\n class CompareTxMemPoolEntryByScore\n {\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n-        double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n-        double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n+        double f1 = (double)a.GetFee() * b.GetTxSize();\n+        double f2 = (double)b.GetFee() * a.GetTxSize();\n         if (f1 == f2) {\n             return b.GetTx().GetHash() < a.GetTx().GetHash();\n         }"
      }
    ]
  },
  {
    "sha": "1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzQwZWRhM2I3YjZjYTI3ODlkNmVjNjVkYWQ3MmVlNGMzODQ0NjYx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-28T12:14:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-28T12:21:25Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "8e1ef2755ead1bd1de86ccc28387767326d381e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e1ef2755ead1bd1de86ccc28387767326d381e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cf6393a4f82b9c81d3b4b468a17a89db10531a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf6393a4f82b9c81d3b4b468a17a89db10531a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cf6393a4f82b9c81d3b4b468a17a89db10531a2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5430dd8851347c0f17473a19785b517ac0575773",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -931,8 +931,8 @@ if test x$use_pkgconfig = xyes; then\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl  not found.)])\n-      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto  not found.)])\n+      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n       BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])"
      },
      {
        "sha": "219bb18600b7ddab63dd77d10d589e85461fe404",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -13,7 +13,7 @@ Before every minor and major release:\n * Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n-* Update `src/chainparams.cpp` defaultAssumeValid  with information from the getblockhash rpc.\n+* Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n   - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n   - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect"
      },
      {
        "sha": "6eb223171f9bb76f7ca864e480fe1346ecd340b4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -126,7 +126,7 @@ class CMainParams : public CChainParams {\n \n         // Note that of those which support the service bits prefix, most only support a subset of\n         // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they dont support the\n+        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n         // service bits we want, but we should get them updated to support all service bits wanted by any\n         // release ASAP to avoid it where possible.\n         vSeeds.emplace_back(\"seed.bitcoin.sipa.be\"); // Pieter Wuille, only supports x1, x5, x9, and xd"
      },
      {
        "sha": "aaeb90eee212245e38b32b3286a6db238984b938",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -294,7 +294,7 @@ enum ServiceFlags : uint64_t {\n  * Thus, generally, avoid calling with peerServices == NODE_NONE, unless\n  * state-specific flags must absolutely be avoided. When called with\n  * peerServices == NODE_NONE, the returned desirable service flags are\n- * guaranteed to not change dependant on state - ie they are suitable for\n+ * guaranteed to not change dependent on state - ie they are suitable for\n  * use when describing peers which we know to be desirable, but for which\n  * we do not have a confirmed set of service flags.\n  *"
      },
      {
        "sha": "9f86c4a163267daa79bd7581df61cae794ce4b9a",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -82,7 +82,7 @@ class CVectorWriter\n  * @param[in]  nVersionIn Serialization Version (including any flags)\n  * @param[in]  vchDataIn  Referenced byte vector to overwrite/append\n  * @param[in]  nPosIn Starting position. Vector index where writes should start. The vector will initially\n- *                    grow as necessary to  max(nPosIn, vec.size()). So to append, use vec.size().\n+ *                    grow as necessary to max(nPosIn, vec.size()). So to append, use vec.size().\n */\n     CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn) : nType(nTypeIn), nVersion(nVersionIn), vchData(vchDataIn), nPos(nPosIn)\n     {"
      },
      {
        "sha": "bf3d131e4edcbc01e4d1ac2b00315e728fd7ad40",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -25,8 +25,8 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n // Early deadlock detection.\n // Problem being solved:\n-//    Thread 1 locks  A, then B, then C\n-//    Thread 2 locks  D, then C, then A\n+//    Thread 1 locks A, then B, then C\n+//    Thread 2 locks D, then C, then A\n //     --> may result in deadlock between the two threads, depending on when they run.\n // Solution implemented here:\n // Keep track of pairs of locks: (A before B), (A before C), etc."
      },
      {
        "sha": "698ef9181d39bb8ea23190a1b26ec5b5555d42a8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -2577,7 +2577,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         if (GetMainSignals().CallbacksPending() > 10) {\n             // Block until the validation queue drains. This should largely\n             // never happen in normal operation, however may happen during\n-            // reindex, causing memory blowup  if we run too far ahead.\n+            // reindex, causing memory blowup if we run too far ahead.\n             SyncWithValidationInterfaceQueue();\n         }\n "
      },
      {
        "sha": "f39471b8717c21e18d181c5e20f69ec19e1bc967",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // we can't make 3 cents of mature coins\n         BOOST_CHECK(!testWallet.SelectCoinsMinConf( 3 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n \n-        // we can make 3 cents of new  coins\n+        // we can make 3 cents of new coins\n         BOOST_CHECK( testWallet.SelectCoinsMinConf( 3 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n "
      },
      {
        "sha": "4d9661de379b68bc7b18035f74e1d8e93eaa61b4",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -6,7 +6,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Bitcoin P2P network half-a-node.\n \n-This python code was modified from ArtForz' public domain  half-a-node, as\n+This python code was modified from ArtForz' public domain half-a-node, as\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n P2PConnection: A low-level connection object to a node's P2P interface"
      }
    ]
  },
  {
    "sha": "cc046f66a7f3bb8d615998ebce38468d90ad8681",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzA0NmY2NmE3ZjNiYjhkNjE1OTk4ZWJjZTM4NDY4ZDkwYWQ4Njgx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T16:47:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-29T14:48:17Z"
      },
      "message": "[tests] Reduce NodeConn connection logging from info to debug",
      "tree": {
        "sha": "497901cb2be54d90aa404a281000f301a40b0af6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/497901cb2be54d90aa404a281000f301a40b0af6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc046f66a7f3bb8d615998ebce38468d90ad8681",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc046f66a7f3bb8d615998ebce38468d90ad8681",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc046f66a7f3bb8d615998ebce38468d90ad8681",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc046f66a7f3bb8d615998ebce38468d90ad8681/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6378e5c51414b1f084fe01d31003fe8fd66b9501",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6378e5c51414b1f084fe01d31003fe8fd66b9501",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6378e5c51414b1f084fe01d31003fe8fd66b9501"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bdc12de93e1af1a341cd164d3cc7d90d242a576b",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc046f66a7f3bb8d615998ebce38468d90ad8681/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc046f66a7f3bb8d615998ebce38468d90ad8681/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=cc046f66a7f3bb8d615998ebce38468d90ad8681",
        "patch": "@@ -86,7 +86,7 @@ def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n         self.network = net\n         self.disconnect = False\n \n-        logger.info('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n \n         try:\n             self.connect((dstaddr, dstport))"
      }
    ]
  },
  {
    "sha": "0b9207efbe9403225480284298fccc3a2652e895",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjkyMDdlZmJlOTQwMzIyNTQ4MDI4NDI5OGZjY2MzYTI2NTJlODk1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-29T15:04:43Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-29T19:23:58Z"
      },
      "message": "Enable flake8 warning for \"list comprehension redefines 'foo' from line N\" (F812)",
      "tree": {
        "sha": "a1b4e5b2c74193ea7ecb51c6102d3e21ff3e9479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1b4e5b2c74193ea7ecb51c6102d3e21ff3e9479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b9207efbe9403225480284298fccc3a2652e895",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9207efbe9403225480284298fccc3a2652e895",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9207efbe9403225480284298fccc3a2652e895",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9207efbe9403225480284298fccc3a2652e895/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cf6393a4f82b9c81d3b4b468a17a89db10531a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf6393a4f82b9c81d3b4b468a17a89db10531a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cf6393a4f82b9c81d3b4b468a17a89db10531a2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ef7dec769b7d74e2e85cd9c0d7c179965e3028d3",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b9207efbe9403225480284298fccc3a2652e895/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b9207efbe9403225480284298fccc3a2652e895/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=0b9207efbe9403225480284298fccc3a2652e895",
        "patch": "@@ -7,4 +7,5 @@\n # Check for specified flake8 warnings in python files.\n \n # F401: module imported but unused\n-flake8 --ignore=B,C,E,F,I,N,W --select=F401 .\n+# F812 list comprehension redefines 'foo' from line N\n+flake8 --ignore=B,C,E,F,I,N,W --select=F401,F812 ."
      }
    ]
  },
  {
    "sha": "4cbab15e75f231d0dd2c9d39444c131a2b10dbf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2JhYjE1ZTc1ZjIzMWQwZGQyYzlkMzk0NDRjMTMxYTJiMTBkYmYz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-29T19:25:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-29T19:26:43Z"
      },
      "message": "tests: Fix accidental redefinition of previously defined variable via list comprehension",
      "tree": {
        "sha": "b8b13f0ce3b1a9af3edadd08e505a71cb95aeaab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8b13f0ce3b1a9af3edadd08e505a71cb95aeaab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b9207efbe9403225480284298fccc3a2652e895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9207efbe9403225480284298fccc3a2652e895",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9207efbe9403225480284298fccc3a2652e895"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6b9c9c15b77081b2571cb73e94c765b7dba92bee",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=4cbab15e75f231d0dd2c9d39444c131a2b10dbf3",
        "patch": "@@ -223,8 +223,8 @@ def run_test(self):\n         assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': None})\n         assert_raises_rpc_error(-5, \"Unknown change type\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': ''})\n         rawtx = self.nodes[2].fundrawtransaction(rawtx, {'change_type': 'bech32'})\n-        tx  = self.nodes[2].decoderawtransaction(rawtx['hex'])\n-        assert_equal('witness_v0_keyhash', tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n+        dec_tx = self.nodes[2].decoderawtransaction(rawtx['hex'])\n+        assert_equal('witness_v0_keyhash', dec_tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n \n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n@@ -676,7 +676,7 @@ def run_test(self):\n                   self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee}),\n                   self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]})]\n \n-        dec_tx = [self.nodes[3].decoderawtransaction(tx['hex']) for tx in result]\n+        dec_tx = [self.nodes[3].decoderawtransaction(tx_['hex']) for tx_ in result]\n         output = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n         change = [d['vout'][r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n "
      }
    ]
  },
  {
    "sha": "a9d0ebc26207b4771b7c240ca0c516debd330985",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWQwZWJjMjYyMDdiNDc3MWI3YzI0MGNhMGM1MTZkZWJkMzMwOTg1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-29T22:02:28Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-29T22:22:58Z"
      },
      "message": "Enable flake8 warnings for all currently non-violated rules",
      "tree": {
        "sha": "1a1847375c0071078f23249c7a401b5554b08886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a1847375c0071078f23249c7a401b5554b08886"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9d0ebc26207b4771b7c240ca0c516debd330985",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d0ebc26207b4771b7c240ca0c516debd330985",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d0ebc26207b4771b7c240ca0c516debd330985",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d0ebc26207b4771b7c240ca0c516debd330985/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cbab15e75f231d0dd2c9d39444c131a2b10dbf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cbab15e75f231d0dd2c9d39444c131a2b10dbf3"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 54,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e2c9d775a64cda487663c4e51dca48aaac1a2e4c",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "modified",
        "additions": 54,
        "deletions": 2,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9d0ebc26207b4771b7c240ca0c516debd330985/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9d0ebc26207b4771b7c240ca0c516debd330985/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=a9d0ebc26207b4771b7c240ca0c516debd330985",
        "patch": "@@ -6,6 +6,58 @@\n #\n # Check for specified flake8 warnings in python files.\n \n-# F401: module imported but unused\n+# E112 expected an indented block\n+# E113 unexpected indentation\n+# E115 expected an indented block (comment)\n+# E116 unexpected indentation (comment)\n+# E125 continuation line with same indent as next logical line\n+# E131 continuation line unaligned for hanging indent\n+# E133 closing bracket is missing indentation\n+# E223 tab before operator\n+# E224 tab after operator\n+# E271 multiple spaces after keyword\n+# E272 multiple spaces before keyword\n+# E273 tab after keyword\n+# E274 tab before keyword\n+# E275 missing whitespace after keyword\n+# E304 blank lines found after function decorator\n+# E306 expected 1 blank line before a nested definition\n+# E502 the backslash is redundant between brackets\n+# E702 multiple statements on one line (semicolon)\n+# E703 statement ends with a semicolon\n+# E714 test for object identity should be \"is not\"\n+# E721 do not compare types, use \"isinstance()\"\n+# E741 do not use variables named \"l\", \"O\", or \"I\"\n+# E742 do not define classes named \"l\", \"O\", or \"I\"\n+# E743 do not define functions named \"l\", \"O\", or \"I\"\n+# F401 module imported but unused\n+# F402 import module from line N shadowed by loop variable\n+# F404 future import(s) name after other statements\n+# F406 \"from module import *\" only allowed at module level\n+# F407 an undefined __future__ feature name was imported\n+# F601 dictionary key name repeated with different values\n+# F602 dictionary key variable name repeated with different values\n+# F621 too many expressions in an assignment with star-unpacking\n+# F622 two or more starred expressions in an assignment (a, *b, *c = d)\n+# F631 assertion test is a tuple, which are always True\n+# F701 a break statement outside of a while or for loop\n+# F702 a continue statement outside of a while or for loop\n+# F703 a continue statement in a finally block in a loop\n+# F704 a yield or yield from statement outside of a function\n+# F705 a return statement with arguments inside a generator\n+# F706 a return statement outside of a function/method\n+# F707 an except: block as not the last exception handler\n+# F811 redefinition of unused name from line N\n # F812 list comprehension redefines 'foo' from line N\n-flake8 --ignore=B,C,E,F,I,N,W --select=F401,F812 .\n+# F822 undefined name name in __all__\n+# F823 local variable name \u2026 referenced before assignment\n+# F831 duplicate argument name in function definition\n+# W292 no newline at end of file\n+# W504 line break after binary operator\n+# W601 .has_key() is deprecated, use \"in\"\n+# W602 deprecated form of raising exception\n+# W603 \"<>\" is deprecated, use \"!=\"\n+# W604 backticks are deprecated, use \"repr()\"\n+# W605 invalid escape sequence \"x\"\n+\n+flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,W292,W504,W601,W602,W603,W604,W605 ."
      }
    ]
  },
  {
    "sha": "faca18dcf499e36069ce5fcd3e02a5ee86639436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNhMThkY2Y0OTllMzYwNjljZTVmY2QzZTAyYTVlZTg2NjM5NDM2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-29T23:25:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-29T23:31:33Z"
      },
      "message": "feebumper: Use PreconditionChecks to determine bump eligibility",
      "tree": {
        "sha": "5d720fffafaeced0b3f8551900e53747a8f30d0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d720fffafaeced0b3f8551900e53747a8f30d0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faca18dcf499e36069ce5fcd3e02a5ee86639436",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJab67VAAoJEM4rdWl+aaVISH8L/itbLwhzyRZVf373otBiEhyD\nHP6PH7cU6lwl9edPHWBlB2GJT8x3mUDTyykJnLd7Hdw1O/QVZwQJ1lL6vuN0s2gg\nLsA+74Eap8ACCQDDeO314/qypvzi0MN5Rj6H76kxi5nK13ILq/9NxBGj3olkRilw\n2qiYKOljZLUhQnxn/3D+lW1AvRh1AFTxf2Jh/LywovgL+xSkoFOTw+ZvUtK3gBFG\nk7+soxNTkhmMk3M5G5fiaiHwa7pzwoBryqA2M9Ecd++zcJdASjU2aQBJzgUBk7eW\nKHuIfyxmEGC0Huda+hNzD05Ux8zOqaTOgRC8GW1nPzzmp+h30JgJLwpho2oKr6JY\nFNBmtGdSP45Qt2Cy7wxr6msR5361ddmYPTXtC5jtmi0cKg9RU+eZbtDQO8fMT/KQ\nz3sDnZPhT3OqwJ1YW/MEKgFg/9gB+XyQjvMEzutCJNc8u25ZbSF3NKrJzCGto0xL\nvKYCaIubRhpteiEWiE+2w9JVibFPW5BxXCZRyDnY1Q==\n=jl0p\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d720fffafaeced0b3f8551900e53747a8f30d0b\nparent 718f05cab5fe632c5dc4e3c689d5e4cd51331089\nauthor MarcoFalke <falke.marco@gmail.com> 1517268335 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517268693 -0500\n\nfeebumper: Use PreconditionChecks to determine bump eligibility\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faca18dcf499e36069ce5fcd3e02a5ee86639436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faca18dcf499e36069ce5fcd3e02a5ee86639436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faca18dcf499e36069ce5fcd3e02a5ee86639436/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "718f05cab5fe632c5dc4e3c689d5e4cd51331089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/718f05cab5fe632c5dc4e3c689d5e4cd51331089",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/718f05cab5fe632c5dc4e3c689d5e4cd51331089"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5234a697100e70ddc564c431a9847c2f18cebd93",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faca18dcf499e36069ce5fcd3e02a5ee86639436/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faca18dcf499e36069ce5fcd3e02a5ee86639436/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=faca18dcf499e36069ce5fcd3e02a5ee86639436",
        "patch": "@@ -89,11 +89,15 @@ static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWallet\n \n namespace feebumper {\n \n-bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid)\n+bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n {\n     LOCK2(cs_main, wallet->cs_wallet);\n     const CWalletTx* wtx = wallet->GetWalletTx(txid);\n-    return wtx && SignalsOptInRBF(*wtx->tx) && !wtx->mapValue.count(\"replaced_by_txid\");\n+    if (wtx == nullptr) return false;\n+\n+    std::vector<std::string> errors_dummy;\n+    feebumper::Result res = PreconditionChecks(wallet, *wtx, errors_dummy);\n+    return res == feebumper::Result::OK;\n }\n \n Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,"
      },
      {
        "sha": "7e36a9766be7ef50a7009c83d2016119306079be",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faca18dcf499e36069ce5fcd3e02a5ee86639436/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faca18dcf499e36069ce5fcd3e02a5ee86639436/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=faca18dcf499e36069ce5fcd3e02a5ee86639436",
        "patch": "@@ -26,7 +26,7 @@ enum class Result\n };\n \n //! Return whether transaction can be bumped.\n-bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid);\n+bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid);\n \n //! Create bumpfee transaction.\n Result CreateTransaction(const CWallet* wallet,"
      }
    ]
  },
  {
    "sha": "5bdbbdc0967626a763c836a55dc7d018c15c10f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmRiYmRjMDk2NzYyNmE3NjNjODM2YTU1ZGM3ZDAxOGMxNWMxMGYy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-29T23:41:06Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-29T23:45:25Z"
      },
      "message": "Refactor HaveKeys to early return on false result",
      "tree": {
        "sha": "7ec547fbc7ab699a7bdf95483e7530308e558d04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ec547fbc7ab699a7bdf95483e7530308e558d04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bdbbdc0967626a763c836a55dc7d018c15c10f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bdbbdc0967626a763c836a55dc7d018c15c10f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bdbbdc0967626a763c836a55dc7d018c15c10f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bdbbdc0967626a763c836a55dc7d018c15c10f2/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d9c4185fadaf243bb97c226e2fef16b65299699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d9c4185fadaf243bb97c226e2fef16b65299699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d9c4185fadaf243bb97c226e2fef16b65299699"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "35d794b983e581a93727c88d818198afafd463e5",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bdbbdc0967626a763c836a55dc7d018c15c10f2/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bdbbdc0967626a763c836a55dc7d018c15c10f2/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=5bdbbdc0967626a763c836a55dc7d018c15c10f2",
        "patch": "@@ -13,16 +13,13 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-unsigned int HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n+static bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n-    unsigned int nResult = 0;\n-    for (const valtype& pubkey : pubkeys)\n-    {\n+    for (const valtype& pubkey : pubkeys) {\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (keystore.HaveKey(keyID))\n-            ++nResult;\n+        if (!keystore.HaveKey(keyID)) return false;\n     }\n-    return nResult;\n+    return true;\n }\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion sigversion)\n@@ -140,7 +137,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n                 }\n             }\n         }\n-        if (HaveKeys(keys, keystore) == keys.size())\n+        if (HaveKeys(keys, keystore))\n             return ISMINE_SPENDABLE;\n         break;\n     }"
      }
    ]
  },
  {
    "sha": "125f4a49097062dccc7da2825a4e0c891384f588",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjVmNGE0OTA5NzA2MmRjY2M3ZGEyODI1YTRlMGM4OTEzODRmNTg4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-01-23T20:16:20Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-01-30T06:53:45Z"
      },
      "message": "[tests] Require all tests to follow naming convention",
      "tree": {
        "sha": "a012f4d5b183e02835613f7d29ee803f8a54839d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a012f4d5b183e02835613f7d29ee803f8a54839d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/125f4a49097062dccc7da2825a4e0c891384f588",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/125f4a49097062dccc7da2825a4e0c891384f588",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/125f4a49097062dccc7da2825a4e0c891384f588",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/125f4a49097062dccc7da2825a4e0c891384f588/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d9c4185fadaf243bb97c226e2fef16b65299699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d9c4185fadaf243bb97c226e2fef16b65299699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d9c4185fadaf243bb97c226e2fef16b65299699"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 4,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c670878d688a61de86d8048b14a5b27885eed546",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/125f4a49097062dccc7da2825a4e0c891384f588/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/125f4a49097062dccc7da2825a4e0c891384f588/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=125f4a49097062dccc7da2825a4e0c891384f588",
        "patch": "@@ -472,21 +472,15 @@ def was_successful(self):\n \n \n def check_script_prefixes():\n-    \"\"\"Check that at most a handful of the\n-       test scripts don't start with one of the allowed name prefixes.\"\"\"\n-\n-    # LEEWAY is provided as a transition measure, so that pull-requests\n-    # that introduce new tests that don't conform with the naming\n-    # convention don't immediately cause the tests to fail.\n-    LEEWAY = 10\n+    \"\"\"Check that test scripts start with one of the allowed name prefixes.\"\"\"\n \n     good_prefixes_re = re.compile(\"(example|feature|interface|mempool|mining|p2p|rpc|wallet)_\")\n     bad_script_names = [script for script in ALL_SCRIPTS if good_prefixes_re.match(script) is None]\n \n-    if len(bad_script_names) > 0:\n-        print(\"INFO: %d tests not meeting naming conventions:\" % (len(bad_script_names)))\n+    if bad_script_names:\n+        print(\"%sERROR:%s %d tests not meeting naming conventions:\" % (BOLD[1], BOLD[0], len(bad_script_names)))\n         print(\"  %s\" % (\"\\n  \".join(sorted(bad_script_names))))\n-    assert len(bad_script_names) <= LEEWAY, \"Too many tests not following naming convention! (%d found, maximum: %d)\" % (len(bad_script_names), LEEWAY)\n+        raise AssertionError(\"Some tests are not following naming convention!\")\n \n \n def check_script_list(src_dir):"
      }
    ]
  },
  {
    "sha": "8d573198638e52e2dbd9abc609861430f9d2bcc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDU3MzE5ODYzOGU1MmUyZGJkOWFiYzYwOTg2MTQzMGY5ZDJiY2Mz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-30T13:01:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-30T13:01:46Z"
      },
      "message": "Merge #12252: Require all tests to follow naming convention\n\n125f4a4909 [tests] Require all tests to follow naming convention (Anthony Towns)\n\nPull request description:\n\n  Based on top of #11774\n\nTree-SHA512: 1eb156b5a97b30c203b7b0ad3d2055b391ef825e2e57805c7745b5259a9b1caaa115768ec225452f12f354e550f83e071f9c6fee2c36698b4679191895aab8de",
      "tree": {
        "sha": "45fb540deb8dd2642a7b6ee7dbf5d16257cd756d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45fb540deb8dd2642a7b6ee7dbf5d16257cd756d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d573198638e52e2dbd9abc609861430f9d2bcc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJacGy6AAoJENLqSFDnUoslFV0P/iivcGZwcAv0gxV7BlIWdizO\nHWy18g9lCtlNpCzHcDKj1qfaQnznKz9niGes8y5O/hLnIFgQhKMTTdvyaJ/sHU3H\nScatBZ2zOkMzZSjHLtQZo4BItNo9dvKlbcFrQHrapQnK+BBIozWdjoRliiA+qxxz\neVUjhcwvXmpAL+LmHH/oct8a5LidZwkPrNuyaYOqn73ZFHGOisPk5bl6epPCtJm6\n8PfZQIJ8MZyEvan+Fiqi25TjJSqJDRky6417KGvLUC3h337vpIyP1WsR8baaj16V\nqMeKohHuE9ikH+BV9TOgPKySmEpkTxQzO2MZJfglxetHwot74SiD5KJk1w3gEs/v\nLNQkUZb+8ECaWj6psG9LItFfYcMkT7+49Y4EP9MEa9vcvCWchbNEGEwZ/0WHc39S\n2RXcD/JHoWNt24QvXP0WPQ7yWOZtHz+j1m4EoS+g+6RNNGn6aPtfo5/4l9NR0dL8\nvV2m+NN9gNGq1R1Rf3+OvfmzEtyCkscw0m7irjNupe76v1uW/idLUVNYgHrHQ6jM\n2VbtightLMJcEu0fwl2VhH9dLoDmwQyhxl/Kb2dYejMoLNIrUNy81w1TtGt9EQ34\nJkL6O9q/l1h/GZhZliKcmc5SmWk3Re+4AHBgM+fCe3/tI9c69GYUhVmr9ZwVbTjQ\nPDkpcD8Lcrpk1MlaOoaU\n=vvBd\n-----END PGP SIGNATURE-----",
        "payload": "tree 45fb540deb8dd2642a7b6ee7dbf5d16257cd756d\nparent 10847fe2d82bd4ffe5be499fd9ad64b6fee78a33\nparent 125f4a49097062dccc7da2825a4e0c891384f588\nauthor MarcoFalke <falke.marco@gmail.com> 1517317304 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517317306 -0500\n\nMerge #12252: Require all tests to follow naming convention\n\n125f4a4909 [tests] Require all tests to follow naming convention (Anthony Towns)\n\nPull request description:\n\n  Based on top of #11774\n\nTree-SHA512: 1eb156b5a97b30c203b7b0ad3d2055b391ef825e2e57805c7745b5259a9b1caaa115768ec225452f12f354e550f83e071f9c6fee2c36698b4679191895aab8de\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d573198638e52e2dbd9abc609861430f9d2bcc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d573198638e52e2dbd9abc609861430f9d2bcc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d573198638e52e2dbd9abc609861430f9d2bcc3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10847fe2d82bd4ffe5be499fd9ad64b6fee78a33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10847fe2d82bd4ffe5be499fd9ad64b6fee78a33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10847fe2d82bd4ffe5be499fd9ad64b6fee78a33"
      },
      {
        "sha": "125f4a49097062dccc7da2825a4e0c891384f588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/125f4a49097062dccc7da2825a4e0c891384f588",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/125f4a49097062dccc7da2825a4e0c891384f588"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 4,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c670878d688a61de86d8048b14a5b27885eed546",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d573198638e52e2dbd9abc609861430f9d2bcc3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d573198638e52e2dbd9abc609861430f9d2bcc3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=8d573198638e52e2dbd9abc609861430f9d2bcc3",
        "patch": "@@ -472,21 +472,15 @@ def was_successful(self):\n \n \n def check_script_prefixes():\n-    \"\"\"Check that at most a handful of the\n-       test scripts don't start with one of the allowed name prefixes.\"\"\"\n-\n-    # LEEWAY is provided as a transition measure, so that pull-requests\n-    # that introduce new tests that don't conform with the naming\n-    # convention don't immediately cause the tests to fail.\n-    LEEWAY = 10\n+    \"\"\"Check that test scripts start with one of the allowed name prefixes.\"\"\"\n \n     good_prefixes_re = re.compile(\"(example|feature|interface|mempool|mining|p2p|rpc|wallet)_\")\n     bad_script_names = [script for script in ALL_SCRIPTS if good_prefixes_re.match(script) is None]\n \n-    if len(bad_script_names) > 0:\n-        print(\"INFO: %d tests not meeting naming conventions:\" % (len(bad_script_names)))\n+    if bad_script_names:\n+        print(\"%sERROR:%s %d tests not meeting naming conventions:\" % (BOLD[1], BOLD[0], len(bad_script_names)))\n         print(\"  %s\" % (\"\\n  \".join(sorted(bad_script_names))))\n-    assert len(bad_script_names) <= LEEWAY, \"Too many tests not following naming convention! (%d found, maximum: %d)\" % (len(bad_script_names), LEEWAY)\n+        raise AssertionError(\"Some tests are not following naming convention!\")\n \n \n def check_script_list(src_dir):"
      }
    ]
  },
  {
    "sha": "4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjAyZGM3MDRhZTgzYmQwOGQwZDZlODM1Yjc2MGNjOWFiOGZlYTM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-30T12:49:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-30T13:08:53Z"
      },
      "message": "build: Bump version to 0.16.99\n\nAlso clean out release notes.\n\nTree-SHA512: c4d5b52c089e14438be37381e1b0dab3711cc72aa8d345d1024169fff0055f3d021c8ca9d46fb794110694ebcbf7cbca0a12619f650873c9d381530adea7100e",
      "tree": {
        "sha": "7fec883b029fe1c9c79b72f04c8c530fcfdb55ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fec883b029fe1c9c79b72f04c8c530fcfdb55ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJacG5lAAoJEB5K7WKYbNJdr0IH/iefqVZ2Za3P8exDs2oDBC3b\nT2xItK4Pps5PqPBXczFi8IX5wp5n4tJprYIIjWthRfhfeg+o8yWEPrY0KYtNxOrB\nXCMLc290uOWYgNYY3IuskLLwO69t5cRSbBiJhA2gFOKynK0upOEMTf26oC+Rvqv+\n+uYPWogmmHTw84kjvx2W0M2GQtCcDivSZ1ACE742qqmM0D2OvKxEYT5itSzbWfxP\nhyRkFIKx7ldye8eX3w/OyC9W06faygo582Sx/L0JPptfdYRzAGiEpkPehXITZ2N+\n+SCZa1XRdrwpzu1jQHSYl0g8jJuMxeDn0+6uEr5aIlBqUGSJbMHG/VApOEJDFZo=\n=Kh+f\n-----END PGP SIGNATURE-----",
        "payload": "tree 7fec883b029fe1c9c79b72f04c8c530fcfdb55ec\nparent 8d573198638e52e2dbd9abc609861430f9d2bcc3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517316555 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517317733 +0100\n\nbuild: Bump version to 0.16.99\n\nAlso clean out release notes.\n\nTree-SHA512: c4d5b52c089e14438be37381e1b0dab3711cc72aa8d345d1024169fff0055f3d021c8ca9d46fb794110694ebcbf7cbca0a12619f650873c9d381530adea7100e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4602dc704ae83bd08d0d6e835b760cc9ab8fea37/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d573198638e52e2dbd9abc609861430f9d2bcc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d573198638e52e2dbd9abc609861430f9d2bcc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d573198638e52e2dbd9abc609861430f9d2bcc3"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 2,
      "deletions": 67
    },
    "files": [
      {
        "sha": "fea3f95ce392806afe75608aeb2e6c11f8790363",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4602dc704ae83bd08d0d6e835b760cc9ab8fea37/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4602dc704ae83bd08d0d6e835b760cc9ab8fea37/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
        "patch": "@@ -1,7 +1,7 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 15)\n+define(_CLIENT_VERSION_MINOR, 16)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)"
      },
      {
        "sha": "0292eaa4d281106fa196028a6e7fd2a3b067fae1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 66,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4602dc704ae83bd08d0d6e835b760cc9ab8fea37/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4602dc704ae83bd08d0d6e835b760cc9ab8fea37/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
        "patch": "@@ -3,7 +3,7 @@ release-notes at release time)\n \n Bitcoin Core version *version* is now available from:\n \n-  <https://bitcoin.org/bin/bitcoin-core-*version*/>\n+  <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -56,71 +56,6 @@ frequently tested on them.\n Notable changes\n ===============\n \n-GCC 4.8.x\n---------------\n-The minimum version of GCC required to compile Bitcoin Core is now 4.8. No effort will be\n-made to support older versions of GCC. See discussion in issue #11732 for more information.\n-\n-HD-wallets by default\n----------------------\n-Due to a backward-incompatible change in the wallet database, wallets created\n-with version 0.16.0 will be rejected by previous versions. Also, version 0.16.0\n-will only create hierarchical deterministic (HD) wallets.\n-\n-Replace-By-Fee by default in GUI\n---------------------------------\n-The send screen now uses BIP-125 RBF by default, regardless of `-walletrbf`.\n-There is a checkbox to mark the transaction as final.\n-\n-The RPC default remains unchanged: to use RBF, launch with `-walletrbf=1` or\n-use the `replaceable` argument for individual transactions.\n-\n-Wallets directory configuration (`-walletdir`)\n-----------------------------------------------\n-\n-Bitcoin Core now has more flexibility in where the wallets directory can be\n-located. Previously wallet database files were stored at the top level of the\n-bitcoin data directory. The behavior is now:\n-\n-- For new installations (where the data directory doesn't already exist),\n-  wallets will now be stored in a new `wallets/` subdirectory inside the data\n-  directory by default.\n-- For existing nodes (where the data directory already exists), wallets will be\n-  stored in the data directory root by default. If a `wallets/` subdirectory\n-  already exists in the data directory root, then wallets will be stored in the\n-  `wallets/` subdirectory by default.\n-- The location of the wallets directory can be overridden by specifying a\n-  `-walletdir=<path>` option where `<path>` can be an absolute path to a\n-  directory or directory symlink.\n-\n-Care should be taken when choosing the wallets directory location, as if it\n-becomes unavailable during operation, funds may be lost.\n-\n-Low-level RPC changes\n-----------------------\n-- The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:\n-  * `getblockchaininfo`\n-  * `getnetworkinfo`\n-  * `getwalletinfo`\n-  * `getmininginfo`\n-- The wallet RPC `getreceivedbyaddress` will return an error if called with an address not in the wallet.\n-- The wallet RPC `addwitnessaddress` was deprecated and will be removed in version 0.17,\n-  set the `address_type` argument of `getnewaddress`, or option `-addresstype=[bech32|p2sh-segwit]` instead.\n-\n-Changed command-line options\n------------------------------\n-- `-debuglogfile=<file>` can be used to specify an alternative debug logging file.\n-\n-Renamed script for creating JSON-RPC credentials\n------------------------------\n-The `share/rpcuser/rpcuser.py` script was renamed to `share/rpcauth/rpcauth.py`. This script can be\n-used to create `rpcauth` credentials for a JSON-RPC user.\n-\n-\n-- `dumpwallet` now includes hex-encoded scripts from the wallet in the dumpfile, and\n-  `importwallet` now imports these scripts, but corresponding addresses may not be added\n-  correctly or a manual rescan may be required to find relevant transactions.\n-\n Credits\n =======\n "
      }
    ]
  },
  {
    "sha": "9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2IyMzA5MDUwODgwYzI4ODdiNGI1ZjdhNzIzMWU0ZmM2ZGMzZjQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-30T13:23:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-30T13:24:59Z"
      },
      "message": "doc: Update manpages to 0.16.99\n\nMaster was bumped to 0.16.99, so update the man pages too to avoid\nconfusion.\n\nTree-SHA512: 63622d6ebea2fb052ffe05fb80fe08bd627c34310a7ca22b2bc1af74003b20ab1a1fde51746ee69d401379d65232981b68541a9fc7f329e04b854507f836b19e",
      "tree": {
        "sha": "73dd2b7d05156c1d10dcf21c1f77bfe1d50f97b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73dd2b7d05156c1d10dcf21c1f77bfe1d50f97b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJacHIrAAoJEB5K7WKYbNJdJ90IAKatKvIsquSZZ44HxB1ts//u\noNzXL6HitbMMvB3zTxL0fnmnLv32v8Jd8NTYKn8B9l4WucJ71xdSwGEQQEtZw6K9\nlTelDiauhd2Kj17JavS4OYf12X8pvWEgbM3mpz2eb+tk+UXWRex1YEC0GtpUDjD4\nXsUHhvIOoZi4Yt1k/qpqzaElrw9ykggIqmrvKFAo+Xw9hQ0iPDFdzhrKL1k/trDu\naKrAyAcm6jwNdUj96CR7oBSEVg5jLENkig6diToTJclx1TN58xG5u3LKZvUd9Uzr\n7E2w9ZjS8Xcb2G9+YwiCZ5gQ/CL9GIDeWiuNduz4z569i8Mq6nQsJYuq643zcnQ=\n=kPMH\n-----END PGP SIGNATURE-----",
        "payload": "tree 73dd2b7d05156c1d10dcf21c1f77bfe1d50f97b5\nparent 4602dc704ae83bd08d0d6e835b760cc9ab8fea37\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517318616 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517318699 +0100\n\ndoc: Update manpages to 0.16.99\n\nMaster was bumped to 0.16.99, so update the man pages too to avoid\nconfusion.\n\nTree-SHA512: 63622d6ebea2fb052ffe05fb80fe08bd627c34310a7ca22b2bc1af74003b20ab1a1fde51746ee69d401379d65232981b68541a9fc7f329e04b854507f836b19e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4602dc704ae83bd08d0d6e835b760cc9ab8fea37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4602dc704ae83bd08d0d6e835b760cc9ab8fea37"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 86,
      "deletions": 30
    },
    "files": [
      {
        "sha": "168a68cb30f57902b4d2ffdb360548d2c97c35cc",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIN-CLI \"1\" \"September 2017\" \"bitcoin-cli v0.15.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIN-CLI \"1\" \"January 2018\" \"bitcoin-cli v0.16.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.15.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.16.99.0\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.15.99.0\n+Bitcoin Core RPC client version v0.16.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-cli [options] <command> [params]\n@@ -25,6 +25,14 @@ Specify configuration file (default: bitcoin.conf)\n \\fB\\-datadir=\\fR<dir>\n .IP\n Specify data directory\n+.HP\n+\\fB\\-getinfo\\fR\n+.IP\n+Get general information from the remote server. Note that unlike\n+server\\-side RPC calls, the results of \\fB\\-getinfo\\fR is the result of\n+multiple non\\-atomic requests. Some entries in the result may\n+represent results from different states (e.g. wallet balance may\n+be as of a different block from the chain state reported)\n .PP\n Chain selection options:\n .HP\n@@ -88,7 +96,7 @@ Send RPC for non\\-default wallet on RPC server (argument is wallet\n filename in bitcoind directory, required if bitcoind/\\-Qt runs\n with multiple wallets)\n .SH COPYRIGHT\n-Copyright (C) 2009-2017 The Bitcoin Core developers\n+Copyright (C) 2009-2018 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "a8c55fb0b35e312214b37a85557508baec041518",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIN-QT \"1\" \"September 2017\" \"bitcoin-qt v0.15.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIN-QT \"1\" \"January 2018\" \"bitcoin-qt v0.16.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.15.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.16.99.0\n .SH DESCRIPTION\n-Bitcoin Core version v0.15.99.0 (64\\-bit)\n+Bitcoin Core version v0.16.99.0 (64\\-bit)\n Usage:\n .IP\n bitcoin\\-qt [command\\-line options]\n@@ -32,7 +32,7 @@ block hash)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a,\n+0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n testnet:\n 0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n .HP\n@@ -52,6 +52,11 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n .IP\n Imports blocks from external blk000??.dat file on startup\n .HP\n+\\fB\\-debuglogfile=\\fR<file>\n+.IP\n+Specify location of debug log file: this can be an absolute path or a\n+path relative to the data directory (default: debug.log)\n+.HP\n \\fB\\-maxorphantx=\\fR<n>\n .IP\n Keep at most <n> unconnectable transactions in memory (default: 100)\n@@ -76,7 +81,7 @@ Extra transactions to keep in memory for compact block reconstructions\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -117,7 +122,8 @@ Connection options:\n .HP\n \\fB\\-addnode=\\fR<ip>\n .IP\n-Add a node to connect to and attempt to keep the connection open\n+Add a node to connect to and attempt to keep the connection open (see\n+the `addnode` RPC command help for more info)\n .HP\n \\fB\\-banscore=\\fR<n>\n .IP\n@@ -136,7 +142,8 @@ for IPv6\n \\fB\\-connect=\\fR<ip>\n .IP\n Connect only to the specified node(s); \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n-connections\n+connections (the rules for this peer are the same as for\n+\\fB\\-addnode\\fR)\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -258,6 +265,18 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .PP\n Wallet options:\n .HP\n+\\fB\\-addresstype\\fR\n+.IP\n+What type of addresses to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\",\n+default: \"p2sh\\-segwit\")\n+.HP\n+\\fB\\-changetype\\fR\n+.IP\n+What type of change to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\").\n+Default is same as \\fB\\-addresstype\\fR, except when\n+\\fB\\-addresstype\\fR=\\fI\\,p2sh\\-segwit\\/\\fR a native segwit output is used when\n+sending to a native segwit address)\n+.HP\n \\fB\\-disablewallet\\fR\n .IP\n Do not load the wallet and disable wallet RPC calls\n@@ -307,7 +326,7 @@ confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-walletrbf\\fR\n .IP\n-Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+Send transactions with full\\-RBF opt\\-in enabled (RPC only, default: 0)\n .HP\n \\fB\\-upgradewallet\\fR\n .IP\n@@ -321,6 +340,11 @@ Specify wallet file (within data directory) (default: wallet.dat)\n .IP\n Make the wallet broadcast transactions (default: 1)\n .HP\n+\\fB\\-walletdir=\\fR<dir>\n+.IP\n+Specify directory to hold wallets (default: <datadir>/wallets if it\n+exists, otherwise <datadir>)\n+.HP\n \\fB\\-walletnotify=\\fR<cmd>\n .IP\n Execute command when a wallet transaction changes (%s in cmd is replaced\n@@ -542,7 +566,7 @@ Show splash screen on startup (default: 1)\n .IP\n Reset all settings changed in the GUI\n .SH COPYRIGHT\n-Copyright (C) 2009-2017 The Bitcoin Core developers\n+Copyright (C) 2009-2018 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "8e6994ac07c8efb98d884c966ac43c6199d24cc5",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIN-TX \"1\" \"September 2017\" \"bitcoin-tx v0.15.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIN-TX \"1\" \"January 2018\" \"bitcoin-tx v0.16.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.15.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.16.99.0\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.15.99.0\n+Bitcoin Core bitcoin\\-tx utility version v0.16.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-tx [options] <hex\\-tx> [commands]\n@@ -112,7 +112,7 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2017 The Bitcoin Core developers\n+Copyright (C) 2009-2018 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "8728965b2a8eb5cea627769647ea361f0fb2c7d1",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIND \"1\" \"September 2017\" \"bitcoind v0.15.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIND \"1\" \"January 2018\" \"bitcoind v0.16.99.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.15.99.0\n+bitcoind \\- manual page for bitcoind v0.16.99.0\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.15.99.0\n+Bitcoin Core Daemon version v0.16.99.0\n .SS \"Usage:\"\n .TP\n bitcoind [options]\n@@ -33,7 +33,7 @@ block hash)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a,\n+0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n testnet:\n 0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n .HP\n@@ -57,6 +57,11 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n .IP\n Imports blocks from external blk000??.dat file on startup\n .HP\n+\\fB\\-debuglogfile=\\fR<file>\n+.IP\n+Specify location of debug log file: this can be an absolute path or a\n+path relative to the data directory (default: debug.log)\n+.HP\n \\fB\\-maxorphantx=\\fR<n>\n .IP\n Keep at most <n> unconnectable transactions in memory (default: 100)\n@@ -81,7 +86,7 @@ Extra transactions to keep in memory for compact block reconstructions\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -122,7 +127,8 @@ Connection options:\n .HP\n \\fB\\-addnode=\\fR<ip>\n .IP\n-Add a node to connect to and attempt to keep the connection open\n+Add a node to connect to and attempt to keep the connection open (see\n+the `addnode` RPC command help for more info)\n .HP\n \\fB\\-banscore=\\fR<n>\n .IP\n@@ -141,7 +147,8 @@ for IPv6\n \\fB\\-connect=\\fR<ip>\n .IP\n Connect only to the specified node(s); \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n-connections\n+connections (the rules for this peer are the same as for\n+\\fB\\-addnode\\fR)\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -263,6 +270,18 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .PP\n Wallet options:\n .HP\n+\\fB\\-addresstype\\fR\n+.IP\n+What type of addresses to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\",\n+default: \"p2sh\\-segwit\")\n+.HP\n+\\fB\\-changetype\\fR\n+.IP\n+What type of change to use (\"legacy\", \"p2sh\\-segwit\", or \"bech32\").\n+Default is same as \\fB\\-addresstype\\fR, except when\n+\\fB\\-addresstype\\fR=\\fI\\,p2sh\\-segwit\\/\\fR a native segwit output is used when\n+sending to a native segwit address)\n+.HP\n \\fB\\-disablewallet\\fR\n .IP\n Do not load the wallet and disable wallet RPC calls\n@@ -312,7 +331,7 @@ confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-walletrbf\\fR\n .IP\n-Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+Send transactions with full\\-RBF opt\\-in enabled (RPC only, default: 0)\n .HP\n \\fB\\-upgradewallet\\fR\n .IP\n@@ -326,6 +345,11 @@ Specify wallet file (within data directory) (default: wallet.dat)\n .IP\n Make the wallet broadcast transactions (default: 1)\n .HP\n+\\fB\\-walletdir=\\fR<dir>\n+.IP\n+Specify directory to hold wallets (default: <datadir>/wallets if it\n+exists, otherwise <datadir>)\n+.HP\n \\fB\\-walletnotify=\\fR<cmd>\n .IP\n Execute command when a wallet transaction changes (%s in cmd is replaced\n@@ -521,7 +545,7 @@ non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n .IP\n Set the number of threads to service RPC calls (default: 4)\n .SH COPYRIGHT\n-Copyright (C) 2009-2017 The Bitcoin Core developers\n+Copyright (C) 2009-2018 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      }
    ]
  },
  {
    "sha": "c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzJjZjlmNjIyODViNWNkMThhNTA2NGFlZTkxZjA4MDJmMGY4N2E4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T16:45:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-30T14:31:31Z"
      },
      "message": "[tests] Add P2PDataStore class\n\nP2PDataStore subclasses NodeConnCB. This class keeps a store\nof txs and blocks and responds to getdata requests from\nthe node-under-test.",
      "tree": {
        "sha": "41e9fc0adb4a01c4deb9bf44d95885763f65c04f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41e9fc0adb4a01c4deb9bf44d95885763f65c04f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c32cf9f62285b5cd18a5064aee91f0802f0f87a8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc046f66a7f3bb8d615998ebce38468d90ad8681",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc046f66a7f3bb8d615998ebce38468d90ad8681",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc046f66a7f3bb8d615998ebce38468d90ad8681"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 155,
      "deletions": 3
    },
    "files": [
      {
        "sha": "46ef7521e098e036559788f5842e8d9592f977ad",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c32cf9f62285b5cd18a5064aee91f0802f0f87a8/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c32cf9f62285b5cd18a5064aee91f0802f0f87a8/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
        "patch": "@@ -44,6 +44,11 @@\n NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n+MSG_TX = 1\n+MSG_BLOCK = 2\n+MSG_WITNESS_FLAG = 1 << 30\n+MSG_TYPE_MASK = 0xffffffff >> 2\n+\n # Serialization/deserialization tools\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n@@ -204,8 +209,6 @@ def __repr__(self):\n         return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n                                                          self.ip, self.port)\n \n-MSG_WITNESS_FLAG = 1<<30\n-\n class CInv():\n     typemap = {\n         0: \"Error\","
      },
      {
        "sha": "31aa146a9ee9e6a5a261626f0df7530e41cfb3f3",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 150,
        "deletions": 1,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c32cf9f62285b5cd18a5064aee91f0802f0f87a8/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c32cf9f62285b5cd18a5064aee91f0802f0f87a8/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
        "patch": "@@ -10,7 +10,9 @@\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n P2PConnection: A low-level connection object to a node's P2P interface\n-P2PInterface: A high-level interface object for communicating to a node over P2P\"\"\"\n+P2PInterface: A high-level interface object for communicating to a node over P2P\n+P2PDataStore: A p2p interface class that keeps a store of transactions and blocks\n+              and can respond correctly to getdata and getheaders messages\"\"\"\n import asyncore\n from collections import defaultdict\n from io import BytesIO\n@@ -356,10 +358,22 @@ def wait_for_block(self, blockhash, timeout=60):\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getdata(self, timeout=60):\n+        \"\"\"Waits for a getdata message.\n+\n+        Receiving any getdata message will satisfy the predicate. the last_message[\"getdata\"]\n+        value must be explicitly cleared before calling this method, or this will return\n+        immediately with success. TODO: change this method to take a hash value and only\n+        return true if the correct block/tx has been requested.\"\"\"\n         test_function = lambda: self.last_message.get(\"getdata\")\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getheaders(self, timeout=60):\n+        \"\"\"Waits for a getheaders message.\n+\n+        Receiving any getheaders message will satisfy the predicate. the last_message[\"getheaders\"]\n+        value must be explicitly cleared before calling this method, or this will return\n+        immediately with success. TODO: change this method to take a hash value and only\n+        return true if the correct block header has been requested.\"\"\"\n         test_function = lambda: self.last_message.get(\"getheaders\")\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)\n+        else:\n+            # Check that none of the txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)"
      }
    ]
  },
  {
    "sha": "359d06757249b34b36688eaef31e7626a46bd52a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTlkMDY3NTcyNDliMzRiMzY2ODhlYWVmMzFlNzYyNmE0NmJkNTJh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T17:31:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-30T14:31:31Z"
      },
      "message": "[tests] Fix flake8 warnings in invalidtxrequest",
      "tree": {
        "sha": "fcdce74b27b036e2a6be66ea036cadf16808e360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcdce74b27b036e2a6be66ea036cadf16808e360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/359d06757249b34b36688eaef31e7626a46bd52a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/359d06757249b34b36688eaef31e7626a46bd52a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/359d06757249b34b36688eaef31e7626a46bd52a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/359d06757249b34b36688eaef31e7626a46bd52a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c32cf9f62285b5cd18a5064aee91f0802f0f87a8"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 10,
      "deletions": 19
    },
    "files": [
      {
        "sha": "66505c1ffbfe62108d6a538784ee215072b17c42",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 10,
        "deletions": 19,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/359d06757249b34b36688eaef31e7626a46bd52a/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/359d06757249b34b36688eaef31e7626a46bd52a/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=359d06757249b34b36688eaef31e7626a46bd52a",
        "patch": "@@ -4,21 +4,17 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n import time\n \n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.comptool import RejectResult, TestInstance, TestManager\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start\n+from test_framework.test_framework import ComparisonTestFramework\n \n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n class InvalidTxRequestTest(ComparisonTestFramework):\n \n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n@@ -32,13 +28,10 @@ def run_test(self):\n         test.run()\n \n     def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.block_time = int(time.time()) + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n         block = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n@@ -49,9 +42,7 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        '''\n-        Now we need that block to mature so we can spend the coinbase.\n-        '''\n+        self.log.info(\"Mature the block.\")\n         test = TestInstance(sync_every_block=False)\n         for i in range(100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)"
      }
    ]
  },
  {
    "sha": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWUyZTlhZjEyNDU5NWFhZTQ4MDFmYzk4MTNlZTFjMjk0ZDQwNGNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-10T13:01:22Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-30T14:31:31Z"
      },
      "message": "[tests] Change invalidtxrequest to use BitcoinTestFramework",
      "tree": {
        "sha": "3454e73a7c31e30c1afc4e18aed4d723afa58299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3454e73a7c31e30c1afc4e18aed4d723afa58299"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e2e9af124595aae4801fc9813ee1c294d404cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e2e9af124595aae4801fc9813ee1c294d404cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95e2e9af124595aae4801fc9813ee1c294d404cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e2e9af124595aae4801fc9813ee1c294d404cd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "359d06757249b34b36688eaef31e7626a46bd52a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/359d06757249b34b36688eaef31e7626a46bd52a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/359d06757249b34b36688eaef31e7626a46bd52a"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 21,
      "deletions": 30
    },
    "files": [
      {
        "sha": "64fada38e2cf26c23375d3484e6918e7373367cb",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 21,
        "deletions": 30,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95e2e9af124595aae4801fc9813ee1c294d404cd/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95e2e9af124595aae4801fc9813ee1c294d404cd/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=95e2e9af124595aae4801fc9813ee1c294d404cd",
        "patch": "@@ -5,58 +5,49 @@\n \"\"\"Test node responses to invalid transactions.\n \n In this test we connect to one node over p2p, and test tx requests.\"\"\"\n-import time\n-\n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, success=False, reject_code=16, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\n \n         # TODO: test further transactions...\n "
      }
    ]
  },
  {
    "sha": "aac6bce11219574e097a51da867e736c3d6ad96e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWM2YmNlMTEyMTk1NzRlMDk3YTUxZGE4NjdlNzM2YzNkNmFkOTZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-30T17:55:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-30T20:20:17Z"
      },
      "message": "test: Make ua_comment test pass on 0.16.0\n\nThe specific length of the uacomment is one shorter on `0.16.0` than on\n`0.15.99` causing the (stupid) test to fail.\nJust match the latter part of the message only.",
      "tree": {
        "sha": "0f9b7c53fb059f58dcb6d42a9f7e8eb01b55ed1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f9b7c53fb059f58dcb6d42a9f7e8eb01b55ed1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aac6bce11219574e097a51da867e736c3d6ad96e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac6bce11219574e097a51da867e736c3d6ad96e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aac6bce11219574e097a51da867e736c3d6ad96e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac6bce11219574e097a51da867e736c3d6ad96e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bc3791508ab4f7625b8cea72e84e12ea2c05996c",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aac6bce11219574e097a51da867e736c3d6ad96e/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aac6bce11219574e097a51da867e736c3d6ad96e/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=aac6bce11219574e097a51da867e736c3d6ad96e",
        "patch": "@@ -23,7 +23,7 @@ def run_test(self):\n \n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n-        expected = \"Total length of network version string (286) exceeds maximum length (256). Reduce the number or size of uacomments.\"\n+        expected = \"exceeds maximum length (256). Reduce the number or size of uacomments.\"\n         self.assert_start_raises_init_error(0, [\"-uacomment=\" + 'a' * 256], expected)\n \n         self.log.info(\"test -uacomment unsafe characters\")"
      }
    ]
  },
  {
    "sha": "f0295becbf3ef1fb78095306408789253fe0c114",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDI5NWJlY2JmM2VmMWZiNzgwOTUzMDY0MDg3ODkyNTNmZTBjMTE0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-30T20:53:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-30T20:53:54Z"
      },
      "message": "Merge #12302: test: Make ua_comment test pass on 0.16.0\n\naac6bce112 test: Make ua_comment test pass on 0.16.0 (Wladimir J. van der Laan)\n\nPull request description:\n\n  The specific length of the uacomment is one shorter on `0.16.0` than on `0.15.99` causing the (stupid) test to fail.\n\n  This change makes `assert_start_raises_init_error` optionally take a regexp, so that the error message can be checked without being specific about the reported length.\n\nTree-SHA512: 1c5e9f1d0b36f004f8113c7e211e8281194ce8057869ac3702172d8b021df3c3aa3b8f79b9434678ed0fb7146f848802410647d434fc884aa200b6a5e26afe8b",
      "tree": {
        "sha": "0f9b7c53fb059f58dcb6d42a9f7e8eb01b55ed1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f9b7c53fb059f58dcb6d42a9f7e8eb01b55ed1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0295becbf3ef1fb78095306408789253fe0c114",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJacNtiAAoJENLqSFDnUoslaBwQAJHx2Sku3rLgZrb6M0MhMu87\nJLwFot2XvBENShsYd7FkhuiyZUeWShc96yrmkqYzIbH6y6fumb3dGWLPeFE0opok\nONUY9SE2kS6aPDGO3xaDTXq9uEbsHU1Q15AQBRqBjNYzDoucaaC9LaRrCTV+niyQ\ncIjGuoxB1QDxyj2dObLWLnfMspgPg5+H6EM485fSgydL6oikMLTQkT6ak2UdWRrI\nTX1IzZwiEgNBfcm7ptsiMnRgeFzwAjeV4LxR9wqMvlrN9x0axMpkLXyx7FfOhWsx\nkTgJR5NZb3PUlVj9mIYk7mCOgrJuaMKUlPl/J9MgETWeQ+KeHjfZ/BD/KWEBhy79\nj+ciPAW11mwjxl0fTptkNTz7OtU81MslMi7Z8h56OEUJc391uNmbv1f72M22z29a\nxGOQ3+CQprtI/g5J+vuC7TAjEB6vaAxaq3cFiO+1hQEwlgWhp9UKkymVlXZrGN1z\nJJvRSHrToT4C0HAlZMXm07YSiZAZNoUUjsSEpDIYm9JV81eEXzL8wiwUkIEYz5C6\nIYTqjJ6qr9c2zjzwXMpjz7ly4H6FunEZxZV3xIXXPhPuBT7x4hsj+PzZEziEpCcE\nYD1aU0tajkgGx9uagCQhTNLAODXA0IO62DZVXJE18dKDDgHg1+mxWIhar0ppP0fl\npJ5XhSC2TYFB5X1JCdc7\n=Bpjt\n-----END PGP SIGNATURE-----",
        "payload": "tree 0f9b7c53fb059f58dcb6d42a9f7e8eb01b55ed1a\nparent 9cb2309050880c2887b4b5f7a7231e4fc6dc3f47\nparent aac6bce11219574e097a51da867e736c3d6ad96e\nauthor MarcoFalke <falke.marco@gmail.com> 1517345631 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517345634 -0500\n\nMerge #12302: test: Make ua_comment test pass on 0.16.0\n\naac6bce112 test: Make ua_comment test pass on 0.16.0 (Wladimir J. van der Laan)\n\nPull request description:\n\n  The specific length of the uacomment is one shorter on `0.16.0` than on `0.15.99` causing the (stupid) test to fail.\n\n  This change makes `assert_start_raises_init_error` optionally take a regexp, so that the error message can be checked without being specific about the reported length.\n\nTree-SHA512: 1c5e9f1d0b36f004f8113c7e211e8281194ce8057869ac3702172d8b021df3c3aa3b8f79b9434678ed0fb7146f848802410647d434fc884aa200b6a5e26afe8b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0295becbf3ef1fb78095306408789253fe0c114",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0295becbf3ef1fb78095306408789253fe0c114",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0295becbf3ef1fb78095306408789253fe0c114/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47"
      },
      {
        "sha": "aac6bce11219574e097a51da867e736c3d6ad96e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aac6bce11219574e097a51da867e736c3d6ad96e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aac6bce11219574e097a51da867e736c3d6ad96e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bc3791508ab4f7625b8cea72e84e12ea2c05996c",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0295becbf3ef1fb78095306408789253fe0c114/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0295becbf3ef1fb78095306408789253fe0c114/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=f0295becbf3ef1fb78095306408789253fe0c114",
        "patch": "@@ -23,7 +23,7 @@ def run_test(self):\n \n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n-        expected = \"Total length of network version string (286) exceeds maximum length (256). Reduce the number or size of uacomments.\"\n+        expected = \"exceeds maximum length (256). Reduce the number or size of uacomments.\"\n         self.assert_start_raises_init_error(0, [\"-uacomment=\" + 'a' * 256], expected)\n \n         self.log.info(\"test -uacomment unsafe characters\")"
      }
    ]
  },
  {
    "sha": "4c855174e101b84c67f4b78bc76e3587301dd5a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yzg1NTE3NGUxMDFiODRjNjdmNGI3OGJjNzZlMzU4NzMwMWRkNWEw",
    "commit": {
      "author": {
        "name": "Alex Vear",
        "email": "axvr@users.noreply.github.com",
        "date": "2018-01-30T21:03:58Z"
      },
      "committer": {
        "name": "Alex Vear",
        "email": "axvr@users.noreply.github.com",
        "date": "2018-01-30T21:03:58Z"
      },
      "message": "Add NetBSD build instruction links",
      "tree": {
        "sha": "365970fc5d719c4270ca6d1488c6bc8ff92c5260",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/365970fc5d719c4270ca6d1488c6bc8ff92c5260"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c855174e101b84c67f4b78bc76e3587301dd5a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c855174e101b84c67f4b78bc76e3587301dd5a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c855174e101b84c67f4b78bc76e3587301dd5a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c855174e101b84c67f4b78bc76e3587301dd5a0/comments",
    "author": {
      "login": "axvr",
      "id": 26504626,
      "node_id": "MDQ6VXNlcjI2NTA0NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/26504626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axvr",
      "html_url": "https://github.com/axvr",
      "followers_url": "https://api.github.com/users/axvr/followers",
      "following_url": "https://api.github.com/users/axvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/axvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axvr/subscriptions",
      "organizations_url": "https://api.github.com/users/axvr/orgs",
      "repos_url": "https://api.github.com/users/axvr/repos",
      "events_url": "https://api.github.com/users/axvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "axvr",
      "id": 26504626,
      "node_id": "MDQ6VXNlcjI2NTA0NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/26504626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axvr",
      "html_url": "https://github.com/axvr",
      "followers_url": "https://api.github.com/users/axvr/followers",
      "following_url": "https://api.github.com/users/axvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/axvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axvr/subscriptions",
      "organizations_url": "https://api.github.com/users/axvr/orgs",
      "repos_url": "https://api.github.com/users/axvr/repos",
      "events_url": "https://api.github.com/users/axvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb2309050880c2887b4b5f7a7231e4fc6dc3f47"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ddb239f60c44408bde74dcae901a8e33bdd151f7",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c855174e101b84c67f4b78bc76e3587301dd5a0/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c855174e101b84c67f4b78bc76e3587301dd5a0/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=4c855174e101b84c67f4b78bc76e3587301dd5a0",
        "patch": "@@ -42,6 +42,7 @@ The following are developer notes on how to build Bitcoin on your native platfor\n - [Unix Build Notes](build-unix.md)\n - [Windows Build Notes](build-windows.md)\n - [OpenBSD Build Notes](build-openbsd.md)\n+- [NetBSD Build Notes](build-netbsd.md)\n - [Gitian Building Guide](gitian-building.md)\n \n Development"
      },
      {
        "sha": "f2e1fbe786108c5372b57d41d24741724209abb9",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c855174e101b84c67f4b78bc76e3587301dd5a0/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c855174e101b84c67f4b78bc76e3587301dd5a0/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=4c855174e101b84c67f4b78bc76e3587301dd5a0",
        "patch": "@@ -2,7 +2,8 @@ UNIX BUILD NOTES\n ====================\n Some notes on how to build Bitcoin Core in Unix.\n \n-(for OpenBSD specific instructions, see [build-openbsd.md](build-openbsd.md))\n+(For BSD specific instructions, see [build-openbsd.md](build-openbsd.md) and/or\n+[build-netbsd.md](build-netbsd.md))\n \n Note\n ---------------------"
      }
    ]
  },
  {
    "sha": "ee5e8968b3d86b096e8565f8ed1acf71f0528885",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTVlODk2OGIzZDg2YjA5NmU4NTY1ZjhlZDFhY2Y3MWYwNTI4ODg1",
    "commit": {
      "author": {
        "name": "Alex Vear",
        "email": "axvr@users.noreply.github.com",
        "date": "2018-01-30T21:55:31Z"
      },
      "committer": {
        "name": "Alex Vear",
        "email": "axvr@users.noreply.github.com",
        "date": "2018-01-30T21:55:31Z"
      },
      "message": "Organise Linux build instructions to be categorised by distro",
      "tree": {
        "sha": "54a27c37d82c28b66f89d54cc132b7640f397139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54a27c37d82c28b66f89d54cc132b7640f397139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee5e8968b3d86b096e8565f8ed1acf71f0528885",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5e8968b3d86b096e8565f8ed1acf71f0528885",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5e8968b3d86b096e8565f8ed1acf71f0528885",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5e8968b3d86b096e8565f8ed1acf71f0528885/comments",
    "author": {
      "login": "axvr",
      "id": 26504626,
      "node_id": "MDQ6VXNlcjI2NTA0NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/26504626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axvr",
      "html_url": "https://github.com/axvr",
      "followers_url": "https://api.github.com/users/axvr/followers",
      "following_url": "https://api.github.com/users/axvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/axvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axvr/subscriptions",
      "organizations_url": "https://api.github.com/users/axvr/orgs",
      "repos_url": "https://api.github.com/users/axvr/repos",
      "events_url": "https://api.github.com/users/axvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "axvr",
      "id": 26504626,
      "node_id": "MDQ6VXNlcjI2NTA0NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/26504626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/axvr",
      "html_url": "https://github.com/axvr",
      "followers_url": "https://api.github.com/users/axvr/followers",
      "following_url": "https://api.github.com/users/axvr/following{/other_user}",
      "gists_url": "https://api.github.com/users/axvr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axvr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axvr/subscriptions",
      "organizations_url": "https://api.github.com/users/axvr/orgs",
      "repos_url": "https://api.github.com/users/axvr/repos",
      "events_url": "https://api.github.com/users/axvr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axvr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c855174e101b84c67f4b78bc76e3587301dd5a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c855174e101b84c67f4b78bc76e3587301dd5a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c855174e101b84c67f4b78bc76e3587301dd5a0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b823c23e0c0d7feee8b7d72ea7f11ad71b83d0bc",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee5e8968b3d86b096e8565f8ed1acf71f0528885/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee5e8968b3d86b096e8565f8ed1acf71f0528885/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=ee5e8968b3d86b096e8565f8ed1acf71f0528885",
        "patch": "@@ -62,8 +62,13 @@ tuned to conserve memory with additional CXXFLAGS:\n \n     ./configure CXXFLAGS=\"--param ggc-min-expand=1 --param ggc-min-heapsize=32768\"\n \n-Dependency Build Instructions: Ubuntu & Debian\n-----------------------------------------------\n+\n+## Linux Distribution Specific Instructions\n+\n+### Ubuntu & Debian\n+\n+#### Dependency Build Instructions\n+\n Build requirements:\n \n     sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3\n@@ -105,8 +110,7 @@ ZMQ dependencies (provides ZMQ API 4.x):\n \n     sudo apt-get install libzmq3-dev\n \n-Dependencies for the GUI: Ubuntu & Debian\n------------------------------------------\n+#### Dependencies for the GUI\n \n If you want to build Bitcoin-Qt, make sure that the required packages for Qt development\n are installed. Either Qt 5 or Qt 4 are necessary to build the GUI.\n@@ -128,8 +132,11 @@ libqrencode (optional) can be installed with:\n Once these are installed, they will be found by configure and a bitcoin-qt executable will be\n built by default.\n \n-Dependency Build Instructions: Fedora\n--------------------------------------\n+\n+### Fedora\n+\n+#### Dependency Build Instructions\n+\n Build requirements:\n \n     sudo dnf install gcc-c++ libtool make autoconf automake openssl-devel libevent-devel boost-devel libdb4-devel libdb4-cxx-devel python3"
      }
    ]
  },
  {
    "sha": "90ba2df11b5bc943ac48b49b5da8023864dc842d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGJhMmRmMTFiNWJjOTQzYWM0OGI0OWI1ZGE4MDIzODY0ZGM4NDJk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-28T19:15:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-31T03:49:22Z"
      },
      "message": "Fix missing cs_main lock for GuessVerificationProgress()",
      "tree": {
        "sha": "b5d52238deaabf843c6ee404fe7a632db3f20395",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5d52238deaabf843c6ee404fe7a632db3f20395"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90ba2df11b5bc943ac48b49b5da8023864dc842d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlpxPMMACgkQHrd2uwPH\nki2Hew/9GX5jWnaWrFJnKpbnIp1YJHpPDsv5WuWNCurLB3muLdpQeK1t6UOJS+gM\n2BOuQ1Wdy3TwH5AJJI8D5dCa+icdXKPqio2VEZhzcNbIyV+nVY3l7dTU8XjaKzpX\nxvxTYS5iPtECQvkj9vmWdBQxEQPhilb77kiYXEsIp1o4QIfWYCGQ/7uSIY5mZWdz\nCkRP82c9m6+RAqVQUYCUR3/HVmFr/Ryp8goBjuFDxtpunt7nxCgBsSP1oKtY+GPg\n5/D28hB0o3Mu+4LdIyhiINUQKqtEAp865XlZC3kgKfE5DV+gJxI0yOpzMw/d2oA3\nC2YRYW0J9GJ3/hrdGTl2ob4lq2I7siJwhcvmLptFKzKz8Axgi6e8/PNgSPuutEzb\nfETqfl2ChSS82OVSflbEA+TRX2ARERMtMfPqYzGHkFZd5XUwNuazrZ+ciVyqOCws\n9twY//u9Wp/gByKshF9vKVuipaGET4LNFuIzxjLiLH7YAwLTkM6g7rzM5te4KmCa\n7YvWiDlIrkpnjfEIdrZYvqp9n8T1NYrIZdMxAVQPZ1G0g/mwdT31w6vI9KOPDPWE\nWI0mDfDOWFC253JDSOaGKlVWH5H5gTVbsEZEWXK7/d2p/4TlnX6aKd819dyHBSH4\npjYy+mjvNdNte3PEl9qb8PfDnRr7B75IavZ3fVK1F6PD3qNt2fs=\n=RDTg\n-----END PGP SIGNATURE-----",
        "payload": "tree b5d52238deaabf843c6ee404fe7a632db3f20395\nparent 6970b30c6f1d2be7947295fe18f2390649b17a4b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1517166918 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1517370562 -1000\n\nFix missing cs_main lock for GuessVerificationProgress()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ba2df11b5bc943ac48b49b5da8023864dc842d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90ba2df11b5bc943ac48b49b5da8023864dc842d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ba2df11b5bc943ac48b49b5da8023864dc842d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6970b30c6f1d2be7947295fe18f2390649b17a4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6970b30c6f1d2be7947295fe18f2390649b17a4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6970b30c6f1d2be7947295fe18f2390649b17a4b"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "eaf2896bc38b3ef2cd4307375d31af80aa203043",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90ba2df11b5bc943ac48b49b5da8023864dc842d/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90ba2df11b5bc943ac48b49b5da8023864dc842d/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=90ba2df11b5bc943ac48b49b5da8023864dc842d",
        "patch": "@@ -138,9 +138,9 @@ size_t ClientModel::getMempoolDynamicUsage() const\n double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n {\n     CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    LOCK(cs_main);\n     if (!tip)\n     {\n-        LOCK(cs_main);\n         tip = chainActive.Tip();\n     }\n     return GuessVerificationProgress(Params().TxData(), tip);"
      },
      {
        "sha": "289313b55ce626b59579f393e36f2452be7a55ae",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90ba2df11b5bc943ac48b49b5da8023864dc842d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90ba2df11b5bc943ac48b49b5da8023864dc842d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=90ba2df11b5bc943ac48b49b5da8023864dc842d",
        "patch": "@@ -4659,6 +4659,7 @@ bool DumpMempool(void)\n }\n \n //! Guess how far we are in the verification process at the given block index\n+//! require cs_main if pindex has not been validated yet (because nChainTx might be unset)\n double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {\n     if (pindex == nullptr)\n         return 0.0;"
      },
      {
        "sha": "31894dff14340cf02a259edc20d81adbea29b1ba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90ba2df11b5bc943ac48b49b5da8023864dc842d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90ba2df11b5bc943ac48b49b5da8023864dc842d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=90ba2df11b5bc943ac48b49b5da8023864dc842d",
        "patch": "@@ -1673,20 +1673,15 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n             dProgressTip = GuessVerificationProgress(chainParams.TxData(), tip);\n         }\n+        double gvp = dProgressStart;\n         while (pindex && !fAbortRescan)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0) {\n-                double gvp = 0;\n-                {\n-                    LOCK(cs_main);\n-                    gvp = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                }\n                 ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((gvp - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LOCK(cs_main);\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, gvp);\n             }\n \n             CBlock block;\n@@ -1710,6 +1705,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             {\n                 LOCK(cs_main);\n                 pindex = chainActive.Next(pindex);\n+                gvp = GuessVerificationProgress(chainParams.TxData(), pindex);\n                 if (tip != chainActive.Tip()) {\n                     tip = chainActive.Tip();\n                     // in case the tip has changed, update progress max\n@@ -1718,7 +1714,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             }\n         }\n         if (pindex && fAbortRescan) {\n-            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, gvp);\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n     }"
      }
    ]
  },
  {
    "sha": "216f9a42e689b49a13387efff7a78d0d661b5d12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTZmOWE0MmU2ODliNDlhMTMzODdlZmZmN2E3OGQwZDY2MWI1ZDEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-31T09:34:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-31T09:35:23Z"
      },
      "message": "Merge #12306: Docs: Improvements to UNIX documentation\n\nee5e896 Organise Linux build instructions to be categorised by distro (Alex Vear)\n4c85517 Add NetBSD build instruction links (Alex Vear)\n\nPull request description:\n\n  * Added references to the newly created [`doc/build-netbsd.md`] (#12294) instructions in the [`doc/README.md`] and the [`doc/build-unix.md`] files.\n  * Organise [`doc/build-unix.md`] dependency build instructions by Linux distribution. This will help discoverability of dependency build instructions for specific distros. Future instructions will also be able to be added easier.\n\n  I am not quite sure about the FreeBSD instructions being in the [`doc/build-unix.md`], while both the OpenBSD and NetBSD instructions are contained within separate files ([`doc/build-openbsd.md`] and [`doc/build-netbsd.md`] respectively).\n\n  Feedback is greatly appreciated. \ud83d\ude04\n\n  [`doc/build-netbsd.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/build-netbsd.md\n  [`doc/build-unix.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/build-unix.md\n  [`doc/build-openbsd.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md\n  [`doc/README.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/README.md\n\nTree-SHA512: ebe2604d1802795851bbfce2335f159b53ea696bc9afb309be7825c697b992cc3963270fe945ca3e449b18522046e227fde3fae1b9c01bd49c3a7a513b5bd40c",
      "tree": {
        "sha": "a142df26bb526024aa3faecf91536880dc4eb625",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a142df26bb526024aa3faecf91536880dc4eb625"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/216f9a42e689b49a13387efff7a78d0d661b5d12",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJacY3bAAoJEB5K7WKYbNJdmdgH/1OVnrs+rxpvPy+BsNJg+F0S\nuPK70bJk/djmrruNDSJtoMbahZS9x5ci4cPe18DyM0jFJFa7B7xc5JySIIwhBnPU\nIGcjZuy4whDXpm6j9vLC5+tJYl2t5jE7equvT9hDKSxKwuTrKSnECdvhcsJPTg63\nqQvsN+OxW+H6/RLsmXF8aehHVonKEklvQT6005J041sGaByq53Y1EzEDat4lFhEs\ns5pRBYShpB0/j5nXrbvoQhBAbK7jvmasurHquh0eNDXF+y3VpBYEutmIBsvxfJmL\nzuhcnkmT4seHKntK6UNZIMn7AxGhtaj6UIK1jAmgTJPseBkPJ/Rw9LCbnHlQr/g=\n=yqHl\n-----END PGP SIGNATURE-----",
        "payload": "tree a142df26bb526024aa3faecf91536880dc4eb625\nparent f0295becbf3ef1fb78095306408789253fe0c114\nparent ee5e8968b3d86b096e8565f8ed1acf71f0528885\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517391257 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517391323 +0100\n\nMerge #12306: Docs: Improvements to UNIX documentation\n\nee5e896 Organise Linux build instructions to be categorised by distro (Alex Vear)\n4c85517 Add NetBSD build instruction links (Alex Vear)\n\nPull request description:\n\n  * Added references to the newly created [`doc/build-netbsd.md`] (#12294) instructions in the [`doc/README.md`] and the [`doc/build-unix.md`] files.\n  * Organise [`doc/build-unix.md`] dependency build instructions by Linux distribution. This will help discoverability of dependency build instructions for specific distros. Future instructions will also be able to be added easier.\n\n  I am not quite sure about the FreeBSD instructions being in the [`doc/build-unix.md`], while both the OpenBSD and NetBSD instructions are contained within separate files ([`doc/build-openbsd.md`] and [`doc/build-netbsd.md`] respectively).\n\n  Feedback is greatly appreciated. \ud83d\ude04\n\n  [`doc/build-netbsd.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/build-netbsd.md\n  [`doc/build-unix.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/build-unix.md\n  [`doc/build-openbsd.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md\n  [`doc/README.md`]:https://github.com/bitcoin/bitcoin/blob/master/doc/README.md\n\nTree-SHA512: ebe2604d1802795851bbfce2335f159b53ea696bc9afb309be7825c697b992cc3963270fe945ca3e449b18522046e227fde3fae1b9c01bd49c3a7a513b5bd40c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216f9a42e689b49a13387efff7a78d0d661b5d12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/216f9a42e689b49a13387efff7a78d0d661b5d12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216f9a42e689b49a13387efff7a78d0d661b5d12/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0295becbf3ef1fb78095306408789253fe0c114",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0295becbf3ef1fb78095306408789253fe0c114",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0295becbf3ef1fb78095306408789253fe0c114"
      },
      {
        "sha": "ee5e8968b3d86b096e8565f8ed1acf71f0528885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5e8968b3d86b096e8565f8ed1acf71f0528885",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5e8968b3d86b096e8565f8ed1acf71f0528885"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ddb239f60c44408bde74dcae901a8e33bdd151f7",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/216f9a42e689b49a13387efff7a78d0d661b5d12/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/216f9a42e689b49a13387efff7a78d0d661b5d12/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=216f9a42e689b49a13387efff7a78d0d661b5d12",
        "patch": "@@ -42,6 +42,7 @@ The following are developer notes on how to build Bitcoin on your native platfor\n - [Unix Build Notes](build-unix.md)\n - [Windows Build Notes](build-windows.md)\n - [OpenBSD Build Notes](build-openbsd.md)\n+- [NetBSD Build Notes](build-netbsd.md)\n - [Gitian Building Guide](gitian-building.md)\n \n Development"
      },
      {
        "sha": "b823c23e0c0d7feee8b7d72ea7f11ad71b83d0bc",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/216f9a42e689b49a13387efff7a78d0d661b5d12/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/216f9a42e689b49a13387efff7a78d0d661b5d12/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=216f9a42e689b49a13387efff7a78d0d661b5d12",
        "patch": "@@ -2,7 +2,8 @@ UNIX BUILD NOTES\n ====================\n Some notes on how to build Bitcoin Core in Unix.\n \n-(for OpenBSD specific instructions, see [build-openbsd.md](build-openbsd.md))\n+(For BSD specific instructions, see [build-openbsd.md](build-openbsd.md) and/or\n+[build-netbsd.md](build-netbsd.md))\n \n Note\n ---------------------\n@@ -61,8 +62,13 @@ tuned to conserve memory with additional CXXFLAGS:\n \n     ./configure CXXFLAGS=\"--param ggc-min-expand=1 --param ggc-min-heapsize=32768\"\n \n-Dependency Build Instructions: Ubuntu & Debian\n-----------------------------------------------\n+\n+## Linux Distribution Specific Instructions\n+\n+### Ubuntu & Debian\n+\n+#### Dependency Build Instructions\n+\n Build requirements:\n \n     sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3\n@@ -104,8 +110,7 @@ ZMQ dependencies (provides ZMQ API 4.x):\n \n     sudo apt-get install libzmq3-dev\n \n-Dependencies for the GUI: Ubuntu & Debian\n------------------------------------------\n+#### Dependencies for the GUI\n \n If you want to build Bitcoin-Qt, make sure that the required packages for Qt development\n are installed. Either Qt 5 or Qt 4 are necessary to build the GUI.\n@@ -127,8 +132,11 @@ libqrencode (optional) can be installed with:\n Once these are installed, they will be found by configure and a bitcoin-qt executable will be\n built by default.\n \n-Dependency Build Instructions: Fedora\n--------------------------------------\n+\n+### Fedora\n+\n+#### Dependency Build Instructions\n+\n Build requirements:\n \n     sudo dnf install gcc-c++ libtool make autoconf automake openssl-devel libevent-devel boost-devel libdb4-devel libdb4-cxx-devel python3"
      }
    ]
  },
  {
    "sha": "526e28220a351db2f439793b4a310c8863c123a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjZlMjgyMjBhMzUxZGIyZjQzOTc5M2I0YTMxMGM4ODYzYzEyM2E5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-31T10:22:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-31T10:27:36Z"
      },
      "message": "contrib: Add support for out-of-tree builds in gen-manpages.sh\n\nThis adds support for setting the environment variable `BUILDDIR`\nto point to executables that are outside the source directory.\n\nE.g. to invoke the tool when the build is in $PWD/build:\n\n```bash\nBUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n```",
      "tree": {
        "sha": "0ef7fdb88226ac4e3fe4a5b420d178e64d6b6331",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ef7fdb88226ac4e3fe4a5b420d178e64d6b6331"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/526e28220a351db2f439793b4a310c8863c123a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526e28220a351db2f439793b4a310c8863c123a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/526e28220a351db2f439793b4a310c8863c123a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526e28220a351db2f439793b4a310c8863c123a9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "216f9a42e689b49a13387efff7a78d0d661b5d12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216f9a42e689b49a13387efff7a78d0d661b5d12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/216f9a42e689b49a13387efff7a78d0d661b5d12"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8ca8fa90669abd0081db75c6e4dfbf9bb589b25a",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526e28220a351db2f439793b4a310c8863c123a9/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526e28220a351db2f439793b4a310c8863c123a9/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=526e28220a351db2f439793b4a310c8863c123a9",
        "patch": "@@ -85,6 +85,14 @@ gen-manpages.sh\n A small script to automatically create manpages in ../../doc/man by running the release binaries with the -help option.\n This requires help2man which can be found at: https://www.gnu.org/software/help2man/\n \n+With in-tree builds this tool can be run from any directory within the\n+repostitory. To use this tool with out-of-tree builds set `BUILDDIR`. For\n+example:\n+\n+```bash\n+BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n+```\n+\n git-subtree-check.sh\n ====================\n "
      },
      {
        "sha": "27c80548c1e1769c915261941b7c003d76e15065",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/526e28220a351db2f439793b4a310c8863c123a9/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/526e28220a351db2f439793b4a310c8863c123a9/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=526e28220a351db2f439793b4a310c8863c123a9",
        "patch": "@@ -1,13 +1,15 @@\n #!/bin/bash\n \n TOPDIR=${TOPDIR:-$(git rev-parse --show-toplevel)}\n-SRCDIR=${SRCDIR:-$TOPDIR/src}\n+BUILDDIR=${BUILDDIR:-$TOPDIR}\n+\n+BINDIR=${BINDIR:-$BUILDDIR/src}\n MANDIR=${MANDIR:-$TOPDIR/doc/man}\n \n-BITCOIND=${BITCOIND:-$SRCDIR/bitcoind}\n-BITCOINCLI=${BITCOINCLI:-$SRCDIR/bitcoin-cli}\n-BITCOINTX=${BITCOINTX:-$SRCDIR/bitcoin-tx}\n-BITCOINQT=${BITCOINQT:-$SRCDIR/qt/bitcoin-qt}\n+BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n+BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n+BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n+BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n "
      }
    ]
  },
  {
    "sha": "7f968ae10712d8e4ff3794c59a974d96c6e20f80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Zjk2OGFlMTA3MTJkOGU0ZmYzNzk0YzU5YTk3NGQ5NmM2ZTIwZjgw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-31T11:28:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-01-31T11:30:09Z"
      },
      "message": "doc: Explain how to update chainTxData in release process\n\nAdds a short explanation how to update chainTxData to the release\nprocess. Mention where to get the data, and link to an example.",
      "tree": {
        "sha": "4e7c192b07530b326e53f072366ff9ec959ee00d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e7c192b07530b326e53f072366ff9ec959ee00d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f968ae10712d8e4ff3794c59a974d96c6e20f80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f968ae10712d8e4ff3794c59a974d96c6e20f80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f968ae10712d8e4ff3794c59a974d96c6e20f80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f968ae10712d8e4ff3794c59a974d96c6e20f80/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "216f9a42e689b49a13387efff7a78d0d661b5d12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216f9a42e689b49a13387efff7a78d0d661b5d12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/216f9a42e689b49a13387efff7a78d0d661b5d12"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f09649fe70a20bf415f6bf7dcbeea127fb779776",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f968ae10712d8e4ff3794c59a974d96c6e20f80/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f968ae10712d8e4ff3794c59a974d96c6e20f80/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=7f968ae10712d8e4ff3794c59a974d96c6e20f80",
        "patch": "@@ -23,7 +23,8 @@ Before every major release:\n \n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n * Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n-* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate.\n+* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n+  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example.\n * Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders"
      }
    ]
  },
  {
    "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTVmYmQ3NjhmMGM4OWNlYTNmNzhhY2FjNThiMjMzZDRlM2ExNDVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-31T13:48:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-31T13:48:54Z"
      },
      "message": "Merge #12309: doc: Explain how to update chainTxData in release process\n\n7f968ae107 doc: Explain how to update chainTxData in release process (Wladimir J. van der Laan)\n\nPull request description:\n\n  Adds a short explanation how to update chainTxData to the release process. Mention where to get the data, and link to an example.\n\nTree-SHA512: 66b0eb12a25afb7b1da0788c8f9f9701d566cb7ce55899402440a57bef0e177b55e926442d3c8aa482299abe7c48ab94735d501c37f0a11fefb86e2fc2e33d9b",
      "tree": {
        "sha": "4e7c192b07530b326e53f072366ff9ec959ee00d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e7c192b07530b326e53f072366ff9ec959ee00d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJacclGAAoJENLqSFDnUoslvyEP/0vuhOjB34bQQue7i5/KKWad\n1rDqAS1fmjzRyMFvBslt7Qa/3lHK2U51b12GdnCkKPhfT0azkhEG0tBszoP6Q2mI\nhDwl9itETg3aEJo8FAMmyMdR4qIr3j2jBDJBfuTSS/brMOQmuF2pZkX6i30G8NaC\nObxIFfDbrIom1+GXNaVZxbkMrqrIhh+XKVsTxZHE4GUfZLjUqCPnh8JxLl6+Fyvo\nxTqleDfiQ+HN1gmSBKbvBvixRGBBZk9MwRI7FM1FoTYQ5AZk/aIXT3u81CBt8p/a\nxs174tbSyj2PfdbcaQZLZ9NF3Ec3dNhGj73iOH4CkvQfiJOmTHyF9h48yuILkOfL\ng3OMUZ+PyD2+Zne9oxD8NcBzUHiPH718u0lHYfBNK4VxDczqQc2AuIFkyeHp6azl\nn7SsIWvF+em/K6/O7RzhuVV/1DGOE7lxDY+eQfBd2ViH663N7goawY+Ss6dWzkaW\nXgCQAIZAi0QlRSvev6WE/sUhdIufCYA+9aIVfmKnDEAO8fu9ZmXK3sKZd7rFO2U/\nKM8mxuSuypd+tH4wycmEzq+x7DiLBnQ5p2r87cdj8XX6I5SxGF4SfDTb72S4Lve0\nuSCC4ZD6XFWXBMdyvSa20rzYYDd8WG1P9b5ctwzkDjdkoGBLogg3FnQURQ7PcAn/\n9LUV4gpUAVEl5QKs7vlw\n=M942\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e7c192b07530b326e53f072366ff9ec959ee00d\nparent 216f9a42e689b49a13387efff7a78d0d661b5d12\nparent 7f968ae10712d8e4ff3794c59a974d96c6e20f80\nauthor MarcoFalke <falke.marco@gmail.com> 1517406531 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517406534 -0500\n\nMerge #12309: doc: Explain how to update chainTxData in release process\n\n7f968ae107 doc: Explain how to update chainTxData in release process (Wladimir J. van der Laan)\n\nPull request description:\n\n  Adds a short explanation how to update chainTxData to the release process. Mention where to get the data, and link to an example.\n\nTree-SHA512: 66b0eb12a25afb7b1da0788c8f9f9701d566cb7ce55899402440a57bef0e177b55e926442d3c8aa482299abe7c48ab94735d501c37f0a11fefb86e2fc2e33d9b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "216f9a42e689b49a13387efff7a78d0d661b5d12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216f9a42e689b49a13387efff7a78d0d661b5d12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/216f9a42e689b49a13387efff7a78d0d661b5d12"
      },
      {
        "sha": "7f968ae10712d8e4ff3794c59a974d96c6e20f80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f968ae10712d8e4ff3794c59a974d96c6e20f80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f968ae10712d8e4ff3794c59a974d96c6e20f80"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f09649fe70a20bf415f6bf7dcbeea127fb779776",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/895fbd768f0c89cea3f78acac58b233d4e3a145e/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/895fbd768f0c89cea3f78acac58b233d4e3a145e/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "patch": "@@ -23,7 +23,8 @@ Before every major release:\n \n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n * Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n-* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate.\n+* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n+  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example.\n * Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders"
      }
    ]
  },
  {
    "sha": "9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmI1OWNmN2JhZWEwYjMzZDk3ZWYwYzBlZWVlODhhOGIxMDRiZTNh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-08-31T23:57:45Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-01-31T21:39:58Z"
      },
      "message": "QA: segwit.py: s/find_unspent/find_spendable_utxo/",
      "tree": {
        "sha": "d86de5981a477ab1b95681f9f0c15580b32abc0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d86de5981a477ab1b95681f9f0c15580b32abc0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJacjeuAAoJEIhmwY6hyUSi4csQAJN51jNCoM8jhquw2en5BZwq\n2Uepu9+JmrNxI1BGhrAarVD5QImcz3gsmqGShxNST5+huxeRbrC5aMxSPjmF3Hys\nY9xJfUBmoPZSLMDM6F3zD4QEhuZcMNsZV/gO7TXvTXvQMSwvuyCl+v0VUsuV2qrE\nsYwQVvsKoURdzBdDkRu9h0Yz4EYULX1UhhpkRRyL21UDm4lR07WdY/XoV3WzA/OW\nXq7oGuO3IqLfi3D39PfZP4Sge+P1qcXEBjR4Wet8zT6O+Ilk8CHKmw0rLBcL6rcK\nuJMSUvhD8e+E4zwDYejdnYzLpcI3alnCp4orBrdVKJJukNVzgVriQeXg5EHmub3d\nEJkFPbSj+QcrB3B+h7B89Fh2qOr4yfgGLzszXDOnIQu0YRJqe6ala1Zn4vZ9XWzj\n4/QQeYokjdngFnPerKAiiEkeVrbKslzJhBYnx/pKFr4YIKb+O5DM3bZ2f5aW0ng6\nwP5usLYm3eWjtBtD16e61rp9cOW7iDfwEHlUdsRnCONGxRfdXmYaqjGM+YMJp92n\nn95afEiQWPmx6ccguz/AaxZUc8WncNX5eN/CL09LsThfpkarCvBw3mUpYCkpfXGl\nHX9pANYkM7pz+kP1oUd7x+Okv0cySDzBaNjC1YqBmPj4Chc1OA+atqsv06ynoVQ1\nAd3ntsegPuCFmKzNrTE8\n=TEg8\n-----END PGP SIGNATURE-----",
        "payload": "tree d86de5981a477ab1b95681f9f0c15580b32abc0a\nparent 10847fe2d82bd4ffe5be499fd9ad64b6fee78a33\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1504223865 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1517434798 +0100\n\nQA: segwit.py: s/find_unspent/find_spendable_utxo/\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10847fe2d82bd4ffe5be499fd9ad64b6fee78a33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10847fe2d82bd4ffe5be499fd9ad64b6fee78a33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10847fe2d82bd4ffe5be499fd9ad64b6fee78a33"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7db05077c9ee25966b45d8126990b2b8ebd5f35d",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a",
        "patch": "@@ -30,11 +30,13 @@ def getutxo(txid):\n     utxo[\"txid\"] = txid\n     return utxo\n \n-def find_unspent(node, min_value):\n-    for utxo in node.listunspent():\n-        if utxo['amount'] >= min_value:\n+def find_spendable_utxo(node, min_value):\n+    for utxo in node.listunspent(query_options={'minimumAmount': min_value}):\n+        if utxo['spendable']:\n             return utxo\n \n+    raise AssertionError(\"Unspent output equal or higher than %s not found\" % min_value)\n+\n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -113,8 +115,8 @@ def run_test(self):\n         for i in range(5):\n             for n in range(3):\n                 for v in range(2):\n-                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[n], False, Decimal(\"49.999\")))\n-                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n+                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], False, Decimal(\"49.999\")))\n+                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n \n         self.nodes[0].generate(1) #block 163\n         sync_blocks(self.nodes)\n@@ -209,7 +211,7 @@ def run_test(self):\n         #                      tx2 (segwit input, paying to a non-segwit output) ->\n         #                      tx3 (non-segwit input, paying to a non-segwit output).\n         # tx1 is allowed to appear in the block, but no others.\n-        txid1 = send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n+        txid1 = send_to_witness(1, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n         hex_tx = self.nodes[0].gettransaction(txid)['hex']\n         tx = FromHex(CTransaction(), hex_tx)\n         assert(tx.wit.is_null()) # This should not be a segwit input\n@@ -570,7 +572,7 @@ def run_test(self):\n             assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n \n     def mine_and_test_listunspent(self, script_list, ismine):\n-        utxo = find_unspent(self.nodes[0], 50)\n+        utxo = find_spendable_utxo(self.nodes[0], 50)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int('0x'+utxo['txid'],0), utxo['vout'])))\n         for i in script_list:"
      }
    ]
  },
  {
    "sha": "eeeb416d73789758bdfa6c86cd8791b0c2e3de6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWViNDE2ZDczNzg5NzU4YmRmYTZjODZjZDg3OTFiMGMyZTNkZTZl",
    "commit": {
      "author": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-01T08:41:03Z"
      },
      "committer": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-01T08:41:03Z"
      },
      "message": "Remove suggestion to make cloned repository world-writable for Windows build.",
      "tree": {
        "sha": "cb2edf0b0352f5d67595fe76ff97449369f967e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb2edf0b0352f5d67595fe76ff97449369f967e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e/comments",
    "author": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8d4afdc817253b1ec248a721ea171b65ab54f415",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=eeeb416d73789758bdfa6c86cd8791b0c2e3de6e",
        "patch": "@@ -102,11 +102,9 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n-The next three steps are an example of how to acquire the source in an appropriate way.\n+Acquire the source in the usual way:\n \n-    cd /usr/src\n-    sudo git clone https://github.com/bitcoin/bitcoin.git\n-    sudo chmod -R a+rw bitcoin\n+    git clone https://github.com/bitcoin/bitcoin.git\n \n Once the source code is ready the build steps are below.\n \n@@ -132,11 +130,9 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n-The next three steps are an example of how to acquire the source in an appropriate way.\n+Acquire the source in the usual way:\n \n-    cd /usr/src\n-    sudo git clone https://github.com/bitcoin/bitcoin.git\n-    sudo chmod -R a+rw bitcoin\n+    git clone https://github.com/bitcoin/bitcoin.git\n \n Then build using:\n "
      }
    ]
  },
  {
    "sha": "96dbd381cf0ded169406bab3b1ba911a13d563c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmRiZDM4MWNmMGRlZDE2OTQwNmJhYjNiMWJhOTExYTEzZDU2M2M1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-01T15:29:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-01T16:31:27Z"
      },
      "message": "net: initialize socket to avoid closing random fd's",
      "tree": {
        "sha": "03d9a1dcbe0a5fcef8f18ce5f859f3e57395550a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03d9a1dcbe0a5fcef8f18ce5f859f3e57395550a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96dbd381cf0ded169406bab3b1ba911a13d563c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dbd381cf0ded169406bab3b1ba911a13d563c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96dbd381cf0ded169406bab3b1ba911a13d563c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dbd381cf0ded169406bab3b1ba911a13d563c5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f407add091d6001f771eda6ebe0c6831fb9b4e7c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dbd381cf0ded169406bab3b1ba911a13d563c5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dbd381cf0ded169406bab3b1ba911a13d563c5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=96dbd381cf0ded169406bab3b1ba911a13d563c5",
        "patch": "@@ -410,7 +410,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     // Connect\n     bool connected = false;\n-    SOCKET hSocket;\n+    SOCKET hSocket = INVALID_SOCKET;\n     proxyType proxy;\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;"
      },
      {
        "sha": "d51277c4950d4d49193caf2fa82641663f72fa31",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dbd381cf0ded169406bab3b1ba911a13d563c5/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dbd381cf0ded169406bab3b1ba911a13d563c5/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=96dbd381cf0ded169406bab3b1ba911a13d563c5",
        "patch": "@@ -682,6 +682,9 @@ bool CloseSocket(SOCKET& hSocket)\n #else\n     int ret = close(hSocket);\n #endif\n+    if (ret) {\n+        LogPrintf(\"Socket close failed: %d. Error: %s\\n\", hSocket, NetworkErrorString(WSAGetLastError()));\n+    }\n     hSocket = INVALID_SOCKET;\n     return ret != SOCKET_ERROR;\n }"
      }
    ]
  },
  {
    "sha": "84291d18dd69e0baff766d256a3f45f910be55e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDI5MWQxOGRkNjllMGJhZmY3NjZkMjU2YTNmNDVmOTEwYmU1NWU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-01T18:21:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-01T18:21:49Z"
      },
      "message": "Merge #12326: net: initialize socket to avoid closing random fd's\n\n96dbd38 net: initialize socket to avoid closing random fd's (Cory Fields)\n\nPull request description:\n\n  An excellent spot by @david60.\n\n  Even if it isn't causing the fd issue we're looking for, this should be fixed.\n\nTree-SHA512: 062a8f2cdd39d895213e1263dbd7b8391473ddaea2f93c82c211a9bb6ea6744d48a6c84c8ff804b16b865d14145492635c500a9fd138d0988fee5e4f719ebb91",
      "tree": {
        "sha": "03d9a1dcbe0a5fcef8f18ce5f859f3e57395550a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03d9a1dcbe0a5fcef8f18ce5f859f3e57395550a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84291d18dd69e0baff766d256a3f45f910be55e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJac1q9AAoJEB5K7WKYbNJdyNoH/Ajaa96vqruL4iTThDwxchBc\nP+ZMEXoDaYkIS6mhnckNmDteODBeo7aLTmp1Im2TbEPEqkkwYsuNq7aJT49ql8mF\n5NY0ghigbfgsBtk2lAoVJR6GAO/eYs8AfajF3tqrehjgFSrhfnT/gwYsIBh8F6Fr\nN2Yn+A5mVcmo7MF+l9mg1Kdcm1aaHD+Q3Gu1BIe2YJ20p7apdcR0hqaMgpe0PH9o\nplNw5X5H7R+L5EnAalkmG+Dz1V/Z90F4yozzcqS4RRKt25NS1SQY94sE3iPhFzyp\nhmfFllz3+pI6cSWdAzHQKyD5O74g1ctRaBI2cIBUadEVL7B1UZC0hUAUgwniLzo=\n=OBbT\n-----END PGP SIGNATURE-----",
        "payload": "tree 03d9a1dcbe0a5fcef8f18ce5f859f3e57395550a\nparent 895fbd768f0c89cea3f78acac58b233d4e3a145e\nparent 96dbd381cf0ded169406bab3b1ba911a13d563c5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517509265 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517509309 +0100\n\nMerge #12326: net: initialize socket to avoid closing random fd's\n\n96dbd38 net: initialize socket to avoid closing random fd's (Cory Fields)\n\nPull request description:\n\n  An excellent spot by @david60.\n\n  Even if it isn't causing the fd issue we're looking for, this should be fixed.\n\nTree-SHA512: 062a8f2cdd39d895213e1263dbd7b8391473ddaea2f93c82c211a9bb6ea6744d48a6c84c8ff804b16b865d14145492635c500a9fd138d0988fee5e4f719ebb91\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84291d18dd69e0baff766d256a3f45f910be55e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84291d18dd69e0baff766d256a3f45f910be55e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84291d18dd69e0baff766d256a3f45f910be55e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      },
      {
        "sha": "96dbd381cf0ded169406bab3b1ba911a13d563c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dbd381cf0ded169406bab3b1ba911a13d563c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96dbd381cf0ded169406bab3b1ba911a13d563c5"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f407add091d6001f771eda6ebe0c6831fb9b4e7c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84291d18dd69e0baff766d256a3f45f910be55e9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84291d18dd69e0baff766d256a3f45f910be55e9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=84291d18dd69e0baff766d256a3f45f910be55e9",
        "patch": "@@ -410,7 +410,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n     // Connect\n     bool connected = false;\n-    SOCKET hSocket;\n+    SOCKET hSocket = INVALID_SOCKET;\n     proxyType proxy;\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;"
      },
      {
        "sha": "d51277c4950d4d49193caf2fa82641663f72fa31",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84291d18dd69e0baff766d256a3f45f910be55e9/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84291d18dd69e0baff766d256a3f45f910be55e9/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=84291d18dd69e0baff766d256a3f45f910be55e9",
        "patch": "@@ -682,6 +682,9 @@ bool CloseSocket(SOCKET& hSocket)\n #else\n     int ret = close(hSocket);\n #endif\n+    if (ret) {\n+        LogPrintf(\"Socket close failed: %d. Error: %s\\n\", hSocket, NetworkErrorString(WSAGetLastError()));\n+    }\n     hSocket = INVALID_SOCKET;\n     return ret != SOCKET_ERROR;\n }"
      }
    ]
  },
  {
    "sha": "660f5f19ae74cc81b83540fcb95a33ec437834c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjBmNWYxOWFlNzRjYzgxYjgzNTQwZmNiOTVhMzNlYzQzNzgzNGM4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-01T19:04:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-01T19:04:49Z"
      },
      "message": "net: don't retry failed oneshot connections forever",
      "tree": {
        "sha": "752fb4414ab9edc5f09bcf7c385234da1d496e5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/752fb4414ab9edc5f09bcf7c385234da1d496e5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/660f5f19ae74cc81b83540fcb95a33ec437834c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660f5f19ae74cc81b83540fcb95a33ec437834c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/660f5f19ae74cc81b83540fcb95a33ec437834c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660f5f19ae74cc81b83540fcb95a33ec437834c8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84291d18dd69e0baff766d256a3f45f910be55e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84291d18dd69e0baff766d256a3f45f910be55e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84291d18dd69e0baff766d256a3f45f910be55e9"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 8,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5f4c0eecab5a04d7546eba5019aff1304dc85aae",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660f5f19ae74cc81b83540fcb95a33ec437834c8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660f5f19ae74cc81b83540fcb95a33ec437834c8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=660f5f19ae74cc81b83540fcb95a33ec437834c8",
        "patch": "@@ -1682,8 +1682,7 @@ void CConnman::ProcessOneShot()\n     CAddress addr;\n     CSemaphoreGrant grant(*semOutbound, true);\n     if (grant) {\n-        if (!OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true))\n-            AddOneShot(strDest);\n+        OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true);\n     }\n }\n \n@@ -1953,29 +1952,29 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n {\n     //\n     // Initiate outbound network connection\n     //\n     if (interruptNet) {\n-        return false;\n+        return;\n     }\n     if (!fNetworkActive) {\n-        return false;\n+        return;\n     }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n             FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n             FindNode(addrConnect.ToStringIPPort()))\n-            return false;\n+            return;\n     } else if (FindNode(std::string(pszDest)))\n-        return false;\n+        return;\n \n     CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n \n     if (!pnode)\n-        return false;\n+        return;\n     if (grantOutbound)\n         grantOutbound->MoveTo(pnode->grantOutbound);\n     if (fOneShot)\n@@ -1990,8 +1989,6 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n-\n-    return true;\n }\n \n void CConnman::ThreadMessageHandler()"
      },
      {
        "sha": "0542ec1aaa501fe3f04bd14bf8a85a43362e9e3f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660f5f19ae74cc81b83540fcb95a33ec437834c8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660f5f19ae74cc81b83540fcb95a33ec437834c8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=660f5f19ae74cc81b83540fcb95a33ec437834c8",
        "patch": "@@ -177,7 +177,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);"
      }
    ]
  },
  {
    "sha": "6558f8acc363e1141f2864ee9be2bc7e980842a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTU4ZjhhY2MzNjNlMTE0MWYyODY0ZWU5YmUyYmM3ZTk4MDg0MmEz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-01T16:48:56Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-01T19:40:20Z"
      },
      "message": "[gui] Defer coin control instancing\n\nDefer the GUI coin control instancing so that argument processing\nis taken into account for the default coin control values.",
      "tree": {
        "sha": "8e1ed59bbc56e85bff2dcfd7ad117c0ff3942b5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e1ed59bbc56e85bff2dcfd7ad117c0ff3942b5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6558f8acc363e1141f2864ee9be2bc7e980842a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6558f8acc363e1141f2864ee9be2bc7e980842a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6558f8acc363e1141f2864ee9be2bc7e980842a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6558f8acc363e1141f2864ee9be2bc7e980842a3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 25,
      "deletions": 20
    },
    "files": [
      {
        "sha": "acb3f2346f586abba1547ea4096848b340211472",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6558f8acc363e1141f2864ee9be2bc7e980842a3/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6558f8acc363e1141f2864ee9be2bc7e980842a3/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6558f8acc363e1141f2864ee9be2bc7e980842a3",
        "patch": "@@ -31,7 +31,6 @@\n #include <QTreeWidget>\n \n QList<CAmount> CoinControlDialog::payAmounts;\n-CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n \n bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {\n@@ -193,7 +192,7 @@ void CoinControlDialog::buttonSelectAllClicked()\n                 ui->treeWidget->topLevelItem(i)->setCheckState(COLUMN_CHECKBOX, state);\n     ui->treeWidget->setEnabled(true);\n     if (state == Qt::Unchecked)\n-        coinControl->UnSelectAll(); // just to be sure\n+        coinControl()->UnSelectAll(); // just to be sure\n     CoinControlDialog::updateLabels(model, this);\n }\n \n@@ -379,11 +378,11 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n         COutPoint outpt(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt());\n \n         if (item->checkState(COLUMN_CHECKBOX) == Qt::Unchecked)\n-            coinControl->UnSelect(outpt);\n+            coinControl()->UnSelect(outpt);\n         else if (item->isDisabled()) // locked (this happens if \"check all\" through parent node)\n             item->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         else\n-            coinControl->Select(outpt);\n+            coinControl()->Select(outpt);\n \n         // selection changed -> update labels\n         if (ui->treeWidget->isEnabled()) // do not update on every click for (un)select all\n@@ -446,7 +445,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     std::vector<COutPoint> vCoinControl;\n     std::vector<COutput>   vOutputs;\n-    coinControl->ListSelected(vCoinControl);\n+    coinControl()->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n     for (const COutput& out : vOutputs) {\n@@ -456,7 +455,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         COutPoint outpt(txhash, out.i);\n         if (model->isSpent(outpt))\n         {\n-            coinControl->UnSelect(outpt);\n+            coinControl()->UnSelect(outpt);\n             continue;\n         }\n \n@@ -509,7 +508,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = GetMinimumFee(nBytes, *coinControl, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        nPayFee = GetMinimumFee(nBytes, *coinControl(), ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n \n         if (nPayAmount > 0)\n         {\n@@ -600,6 +599,12 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         label->setVisible(nChange < 0);\n }\n \n+CCoinControl* CoinControlDialog::coinControl()\n+{\n+    static CCoinControl coin_control;\n+    return &coin_control;\n+}\n+\n void CoinControlDialog::updateView()\n {\n     if (!model || !model->getOptionsModel() || !model->getAddressTableModel())\n@@ -703,13 +708,13 @@ void CoinControlDialog::updateView()\n             if (model->isLockedCoin(txhash, out.i))\n             {\n                 COutPoint outpt(txhash, out.i);\n-                coinControl->UnSelect(outpt); // just to be sure\n+                coinControl()->UnSelect(outpt); // just to be sure\n                 itemOutput->setDisabled(true);\n                 itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox\n-            if (coinControl->IsSelected(COutPoint(txhash, out.i)))\n+            if (coinControl()->IsSelected(COutPoint(txhash, out.i)))\n                 itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n         }\n "
      },
      {
        "sha": "a254c555562580460e3a8ef4d111ef6fa5a09cad",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6558f8acc363e1141f2864ee9be2bc7e980842a3/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6558f8acc363e1141f2864ee9be2bc7e980842a3/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=6558f8acc363e1141f2864ee9be2bc7e980842a3",
        "patch": "@@ -52,7 +52,7 @@ class CoinControlDialog : public QDialog\n     static void updateLabels(WalletModel*, QDialog*);\n \n     static QList<CAmount> payAmounts;\n-    static CCoinControl *coinControl;\n+    static CCoinControl *coinControl();\n     static bool fSubtractFeeFromAmount;\n \n private:"
      },
      {
        "sha": "1227e340cec1b3a0f36b805613748a320ac50d2f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6558f8acc363e1141f2864ee9be2bc7e980842a3/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6558f8acc363e1141f2864ee9be2bc7e980842a3/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=6558f8acc363e1141f2864ee9be2bc7e980842a3",
        "patch": "@@ -256,7 +256,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     // Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled\n     CCoinControl ctrl;\n     if (model->getOptionsModel()->getCoinControlFeatures())\n-        ctrl = *CoinControlDialog::coinControl;\n+        ctrl = *CoinControlDialog::coinControl();\n \n     updateCoinControlState(ctrl);\n \n@@ -367,7 +367,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     if (sendStatus.status == WalletModel::OK)\n     {\n         accept();\n-        CoinControlDialog::coinControl->UnSelectAll();\n+        CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n     }\n     fNewRecipientAllowed = true;\n@@ -604,7 +604,7 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n     // Get CCoinControl instance if CoinControl is enabled or create a new one.\n     CCoinControl coin_control;\n     if (model->getOptionsModel()->getCoinControlFeatures()) {\n-        coin_control = *CoinControlDialog::coinControl;\n+        coin_control = *CoinControlDialog::coinControl();\n     }\n \n     // Calculate available amount to send.\n@@ -754,7 +754,7 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     ui->frameCoinControl->setVisible(checked);\n \n     if (!checked && model) // coin control features disabled\n-        CoinControlDialog::coinControl->SetNull();\n+        CoinControlDialog::coinControl()->SetNull();\n \n     coinControlUpdateLabels();\n }\n@@ -773,7 +773,7 @@ void SendCoinsDialog::coinControlChangeChecked(int state)\n {\n     if (state == Qt::Unchecked)\n     {\n-        CoinControlDialog::coinControl->destChange = CNoDestination();\n+        CoinControlDialog::coinControl()->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->clear();\n     }\n     else\n@@ -789,7 +789,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n     if (model && model->getAddressTableModel())\n     {\n         // Default to no change address until verified\n-        CoinControlDialog::coinControl->destChange = CNoDestination();\n+        CoinControlDialog::coinControl()->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->setStyleSheet(\"QLabel{color:red;}\");\n \n         const CTxDestination dest = DecodeDestination(text.toStdString());\n@@ -812,7 +812,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                     QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n                 if(btnRetVal == QMessageBox::Yes)\n-                    CoinControlDialog::coinControl->destChange = dest;\n+                    CoinControlDialog::coinControl()->destChange = dest;\n                 else\n                 {\n                     ui->lineEditCoinControlChange->setText(\"\");\n@@ -831,7 +831,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                 else\n                     ui->labelCoinControlChangeLabel->setText(tr(\"(no label)\"));\n \n-                CoinControlDialog::coinControl->destChange = dest;\n+                CoinControlDialog::coinControl()->destChange = dest;\n             }\n         }\n     }\n@@ -843,7 +843,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     if (!model || !model->getOptionsModel())\n         return;\n \n-    updateCoinControlState(*CoinControlDialog::coinControl);\n+    updateCoinControlState(*CoinControlDialog::coinControl());\n \n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n@@ -861,7 +861,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n         }\n     }\n \n-    if (CoinControlDialog::coinControl->HasSelected())\n+    if (CoinControlDialog::coinControl()->HasSelected())\n     {\n         // actual coin control calculation\n         CoinControlDialog::updateLabels(model, this);"
      }
    ]
  },
  {
    "sha": "41363fe11df529556c2d44132caa86fe8b08cbbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTM2M2ZlMTFkZjUyOTU1NmMyZDQ0MTMyY2FhODZmZThiMDhjYmJm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-01T19:53:28Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-01T19:53:38Z"
      },
      "message": "Merge #12327: [gui] Defer coin control instancing\n\n6558f8acc [gui] Defer coin control instancing (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Defer the GUI coin control instancing so that argument processing\n  is taken into account for the default coin control values.\n\n  Fixes #12312\n\nTree-SHA512: ecda28b94f4709319e9484b01afe763c7c3569097d2afb89db79da8a195c46d20ea77166df7edce0c8ab77627b295def01c072148714503436d27675d5e75d99",
      "tree": {
        "sha": "ca7939673d6c099edbbc280a54088f112963d191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca7939673d6c099edbbc280a54088f112963d191"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41363fe11df529556c2d44132caa86fe8b08cbbf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlpzcEIACgkQHrd2uwPH\nki2l+g//ZmtiSI4fWPEJd3Nd1Uw9Mk7f9uAJqc/ZNcBfjKxOnA0qHFmMVDs3NH2f\nkf4NdX1DhPKUFuVvAt64psCGHIkcYfPge80jzzpMvxUIErCy2lU19yfZPjYamuzJ\nmDjZH4I33c77NbXu+BKz7PpDJPUvVmkNahh2+NH/jmcSPDPupmjwwn1/jkQZcR+F\nGv2g1PrC/JuZwRGDvpvEK1YAKBK5LKIiTZJkEA/SmUEDIrDXV60N4OEtQhvt3B/A\nRIbYiDX3L8xXGNK4hD+q/6Nu4Y0S3KeZvgLy9+abTy3Gb6FIMlePge5jc3Zi/VIL\naHsfdQ16CKT0Z5r3xoI2qAbSQv3ALXDzKEhxjVuEU6LBDotSOJe7b5CPWldQzDcX\nSStqFhUIhKoCJa4d4D1s/HDh8mR5kSwzNIa5ymYxewMhcEf0uOH3cfi0+nXN+uUw\nt5LoDs2XL87BU5g/iH9Ye8G1Lhg8h3zfgEMmbo7jc3qcB7z0LbD6uqgDiEPBXhNf\nk+F6S2wOOTIDNKGtXt3CJ/v9SuscgSPLpnYW7RE+xHVaY8A2DxcbWMgUaid+e/KD\ngxiiR8k1ppxigjP5KucGTEnb7DbmBxhqI1V0NkQk7vgzgsB/yoRQk/Loye9WlouG\n4U9sE7CIPOVMaq37trEhBiRjkKKpObRwW7XpTPdmnt8kFwA7RwE=\n=ytXt\n-----END PGP SIGNATURE-----",
        "payload": "tree ca7939673d6c099edbbc280a54088f112963d191\nparent 84291d18dd69e0baff766d256a3f45f910be55e9\nparent 6558f8acc363e1141f2864ee9be2bc7e980842a3\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1517514808 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1517514818 -1000\n\nMerge #12327: [gui] Defer coin control instancing\n\n6558f8acc [gui] Defer coin control instancing (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Defer the GUI coin control instancing so that argument processing\n  is taken into account for the default coin control values.\n\n  Fixes #12312\n\nTree-SHA512: ecda28b94f4709319e9484b01afe763c7c3569097d2afb89db79da8a195c46d20ea77166df7edce0c8ab77627b295def01c072148714503436d27675d5e75d99\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41363fe11df529556c2d44132caa86fe8b08cbbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41363fe11df529556c2d44132caa86fe8b08cbbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41363fe11df529556c2d44132caa86fe8b08cbbf/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84291d18dd69e0baff766d256a3f45f910be55e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84291d18dd69e0baff766d256a3f45f910be55e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84291d18dd69e0baff766d256a3f45f910be55e9"
      },
      {
        "sha": "6558f8acc363e1141f2864ee9be2bc7e980842a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6558f8acc363e1141f2864ee9be2bc7e980842a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6558f8acc363e1141f2864ee9be2bc7e980842a3"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 25,
      "deletions": 20
    },
    "files": [
      {
        "sha": "acb3f2346f586abba1547ea4096848b340211472",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41363fe11df529556c2d44132caa86fe8b08cbbf/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41363fe11df529556c2d44132caa86fe8b08cbbf/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=41363fe11df529556c2d44132caa86fe8b08cbbf",
        "patch": "@@ -31,7 +31,6 @@\n #include <QTreeWidget>\n \n QList<CAmount> CoinControlDialog::payAmounts;\n-CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n \n bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {\n@@ -193,7 +192,7 @@ void CoinControlDialog::buttonSelectAllClicked()\n                 ui->treeWidget->topLevelItem(i)->setCheckState(COLUMN_CHECKBOX, state);\n     ui->treeWidget->setEnabled(true);\n     if (state == Qt::Unchecked)\n-        coinControl->UnSelectAll(); // just to be sure\n+        coinControl()->UnSelectAll(); // just to be sure\n     CoinControlDialog::updateLabels(model, this);\n }\n \n@@ -379,11 +378,11 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n         COutPoint outpt(uint256S(item->text(COLUMN_TXHASH).toStdString()), item->text(COLUMN_VOUT_INDEX).toUInt());\n \n         if (item->checkState(COLUMN_CHECKBOX) == Qt::Unchecked)\n-            coinControl->UnSelect(outpt);\n+            coinControl()->UnSelect(outpt);\n         else if (item->isDisabled()) // locked (this happens if \"check all\" through parent node)\n             item->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         else\n-            coinControl->Select(outpt);\n+            coinControl()->Select(outpt);\n \n         // selection changed -> update labels\n         if (ui->treeWidget->isEnabled()) // do not update on every click for (un)select all\n@@ -446,7 +445,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     std::vector<COutPoint> vCoinControl;\n     std::vector<COutput>   vOutputs;\n-    coinControl->ListSelected(vCoinControl);\n+    coinControl()->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n     for (const COutput& out : vOutputs) {\n@@ -456,7 +455,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         COutPoint outpt(txhash, out.i);\n         if (model->isSpent(outpt))\n         {\n-            coinControl->UnSelect(outpt);\n+            coinControl()->UnSelect(outpt);\n             continue;\n         }\n \n@@ -509,7 +508,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = GetMinimumFee(nBytes, *coinControl, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        nPayFee = GetMinimumFee(nBytes, *coinControl(), ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n \n         if (nPayAmount > 0)\n         {\n@@ -600,6 +599,12 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         label->setVisible(nChange < 0);\n }\n \n+CCoinControl* CoinControlDialog::coinControl()\n+{\n+    static CCoinControl coin_control;\n+    return &coin_control;\n+}\n+\n void CoinControlDialog::updateView()\n {\n     if (!model || !model->getOptionsModel() || !model->getAddressTableModel())\n@@ -703,13 +708,13 @@ void CoinControlDialog::updateView()\n             if (model->isLockedCoin(txhash, out.i))\n             {\n                 COutPoint outpt(txhash, out.i);\n-                coinControl->UnSelect(outpt); // just to be sure\n+                coinControl()->UnSelect(outpt); // just to be sure\n                 itemOutput->setDisabled(true);\n                 itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox\n-            if (coinControl->IsSelected(COutPoint(txhash, out.i)))\n+            if (coinControl()->IsSelected(COutPoint(txhash, out.i)))\n                 itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n         }\n "
      },
      {
        "sha": "a254c555562580460e3a8ef4d111ef6fa5a09cad",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41363fe11df529556c2d44132caa86fe8b08cbbf/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41363fe11df529556c2d44132caa86fe8b08cbbf/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=41363fe11df529556c2d44132caa86fe8b08cbbf",
        "patch": "@@ -52,7 +52,7 @@ class CoinControlDialog : public QDialog\n     static void updateLabels(WalletModel*, QDialog*);\n \n     static QList<CAmount> payAmounts;\n-    static CCoinControl *coinControl;\n+    static CCoinControl *coinControl();\n     static bool fSubtractFeeFromAmount;\n \n private:"
      },
      {
        "sha": "1227e340cec1b3a0f36b805613748a320ac50d2f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41363fe11df529556c2d44132caa86fe8b08cbbf/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41363fe11df529556c2d44132caa86fe8b08cbbf/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=41363fe11df529556c2d44132caa86fe8b08cbbf",
        "patch": "@@ -256,7 +256,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     // Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled\n     CCoinControl ctrl;\n     if (model->getOptionsModel()->getCoinControlFeatures())\n-        ctrl = *CoinControlDialog::coinControl;\n+        ctrl = *CoinControlDialog::coinControl();\n \n     updateCoinControlState(ctrl);\n \n@@ -367,7 +367,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     if (sendStatus.status == WalletModel::OK)\n     {\n         accept();\n-        CoinControlDialog::coinControl->UnSelectAll();\n+        CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n     }\n     fNewRecipientAllowed = true;\n@@ -604,7 +604,7 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n     // Get CCoinControl instance if CoinControl is enabled or create a new one.\n     CCoinControl coin_control;\n     if (model->getOptionsModel()->getCoinControlFeatures()) {\n-        coin_control = *CoinControlDialog::coinControl;\n+        coin_control = *CoinControlDialog::coinControl();\n     }\n \n     // Calculate available amount to send.\n@@ -754,7 +754,7 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     ui->frameCoinControl->setVisible(checked);\n \n     if (!checked && model) // coin control features disabled\n-        CoinControlDialog::coinControl->SetNull();\n+        CoinControlDialog::coinControl()->SetNull();\n \n     coinControlUpdateLabels();\n }\n@@ -773,7 +773,7 @@ void SendCoinsDialog::coinControlChangeChecked(int state)\n {\n     if (state == Qt::Unchecked)\n     {\n-        CoinControlDialog::coinControl->destChange = CNoDestination();\n+        CoinControlDialog::coinControl()->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->clear();\n     }\n     else\n@@ -789,7 +789,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n     if (model && model->getAddressTableModel())\n     {\n         // Default to no change address until verified\n-        CoinControlDialog::coinControl->destChange = CNoDestination();\n+        CoinControlDialog::coinControl()->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->setStyleSheet(\"QLabel{color:red;}\");\n \n         const CTxDestination dest = DecodeDestination(text.toStdString());\n@@ -812,7 +812,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                     QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n                 if(btnRetVal == QMessageBox::Yes)\n-                    CoinControlDialog::coinControl->destChange = dest;\n+                    CoinControlDialog::coinControl()->destChange = dest;\n                 else\n                 {\n                     ui->lineEditCoinControlChange->setText(\"\");\n@@ -831,7 +831,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                 else\n                     ui->labelCoinControlChangeLabel->setText(tr(\"(no label)\"));\n \n-                CoinControlDialog::coinControl->destChange = dest;\n+                CoinControlDialog::coinControl()->destChange = dest;\n             }\n         }\n     }\n@@ -843,7 +843,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     if (!model || !model->getOptionsModel())\n         return;\n \n-    updateCoinControlState(*CoinControlDialog::coinControl);\n+    updateCoinControlState(*CoinControlDialog::coinControl());\n \n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n@@ -861,7 +861,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n         }\n     }\n \n-    if (CoinControlDialog::coinControl->HasSelected())\n+    if (CoinControlDialog::coinControl()->HasSelected())\n     {\n         // actual coin control calculation\n         CoinControlDialog::updateLabels(model, this);"
      }
    ]
  },
  {
    "sha": "c409b1adac59329b78b8c48f131f8ca032988412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDA5YjFhZGFjNTkzMjliNzhiOGM0OGYxMzFmOGNhMDMyOTg4NDEy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-02T01:57:29Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-02T01:58:24Z"
      },
      "message": "[rpc] Reduce scope of cs_main and cs_wallet locks in listtransactions",
      "tree": {
        "sha": "c971a045e0c28a2e62d04576f358550666d0fe6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c971a045e0c28a2e62d04576f358550666d0fe6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c409b1adac59329b78b8c48f131f8ca032988412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c409b1adac59329b78b8c48f131f8ca032988412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c409b1adac59329b78b8c48f131f8ca032988412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c409b1adac59329b78b8c48f131f8ca032988412/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41363fe11df529556c2d44132caa86fe8b08cbbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41363fe11df529556c2d44132caa86fe8b08cbbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41363fe11df529556c2d44132caa86fe8b08cbbf"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 16,
      "deletions": 13
    },
    "files": [
      {
        "sha": "33790d3490313b74a79d5182e6e9b84e4f388e94",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c409b1adac59329b78b8c48f131f8ca032988412/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c409b1adac59329b78b8c48f131f8ca032988412/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c409b1adac59329b78b8c48f131f8ca032988412",
        "patch": "@@ -1794,8 +1794,6 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n     std::string strAccount = \"*\";\n     if (!request.params[0].isNull())\n         strAccount = request.params[0].get_str();\n@@ -1817,20 +1815,25 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n-\n-    // iterate backwards until we have nCount items to return:\n-    for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n-        CWalletTx *const pwtx = (*it).second.first;\n-        if (pwtx != nullptr)\n-            ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n-        CAccountingEntry *const pacentry = (*it).second.second;\n-        if (pacentry != nullptr)\n-            AcentryToJSON(*pacentry, strAccount, ret);\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n \n-        if ((int)ret.size() >= (nCount+nFrom)) break;\n+        // iterate backwards until we have nCount items to return:\n+        for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+        {\n+            CWalletTx *const pwtx = (*it).second.first;\n+            if (pwtx != nullptr)\n+                ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n+            CAccountingEntry *const pacentry = (*it).second.second;\n+            if (pacentry != nullptr)\n+                AcentryToJSON(*pacentry, strAccount, ret);\n+\n+            if ((int)ret.size() >= (nCount+nFrom)) break;\n+        }\n     }\n+\n     // ret is newest to oldest\n \n     if (nFrom > (int)ret.size())"
      }
    ]
  },
  {
    "sha": "d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2U0Njc1MjBmZWYzZDlkYTFmM2YyZThlNzlkY2RlMzRiZWM0NDRm",
    "commit": {
      "author": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-02T07:19:41Z"
      },
      "committer": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-02T07:19:41Z"
      },
      "message": "Properly alphabetize output of CLI --help option.",
      "tree": {
        "sha": "b467be78c660406d3be528c141c72027902a7bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b467be78c660406d3be528c141c72027902a7bea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/comments",
    "author": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 35,
      "deletions": 35
    },
    "files": [
      {
        "sha": "1214b548cf089d8f279e8f801e75dfa0314a8df5",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "patch": "@@ -40,15 +40,15 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n+    strUsage += HelpMessageOpt(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")));\n-    strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"));\n+    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory, required if bitcoind/-Qt runs with multiple wallets)\"));\n+    strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"));\n+    strUsage += HelpMessageOpt(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")));\n \n     return strUsage;\n }"
      },
      {
        "sha": "a9f7264f688a3de23f06ae49b2ed926a357b74a2",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "patch": "@@ -77,18 +77,18 @@ static int AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", _(\"Add input to TX\"));\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n-        strUsage += HelpMessageOpt(\"replaceable(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", _(\"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS\") + \". \" +\n+            _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n+            _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n         strUsage += HelpMessageOpt(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", _(\"Add pay-to-pubkey output to TX\") + \". \" +\n             _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output\") + \". \" +\n             _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n-        strUsage += HelpMessageOpt(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"));\n         strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT[:FLAGS]\", _(\"Add raw script output to TX\") + \". \" +\n             _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n             _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n-        strUsage += HelpMessageOpt(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", _(\"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS\") + \". \" +\n-            _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n-            _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n+        strUsage += HelpMessageOpt(\"replaceable(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n         strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n             _(\"This command requires JSON registers:\") +\n             _(\"prevtxs=JSON object\") + \", \" +"
      },
      {
        "sha": "89dd8549b9504dde5a16f4e3f219c00c4131e382",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "patch": "@@ -17,11 +17,11 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n     }\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n }\n \n /**"
      },
      {
        "sha": "5e81e05f495db9425b1dd8c98390d121fac9b2b1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "patch": "@@ -331,10 +331,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n+    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -347,28 +348,27 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n     }\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n+    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n-    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n+    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     if (showDebug) {\n         strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n     }\n-    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n-    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n+    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n     strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n+    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n@@ -391,10 +391,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT));\n+    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n@@ -412,7 +413,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n \n #ifdef ENABLE_WALLET\n     strUsage += GetWalletHelpString(showDebug);\n@@ -427,7 +427,6 @@ std::string HelpMessage(HelpMessageMode mode)\n #endif\n \n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n-    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n@@ -464,12 +463,13 @@ std::string HelpMessage(HelpMessageMode mode)\n     }\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n-    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n     }\n+    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n+    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n \n     AppendParamsHelpMessages(strUsage, showDebug);\n \n@@ -485,32 +485,32 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n-    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n     strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n+    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n+    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n-    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n     strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n+    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n+    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n     strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie (default: data dir)\"));\n-    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n-    if (showDebug) {\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    if (showDebug)\n         strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n-        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    }\n+    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "65e7775f2b4e2dce73a050b1ca6365cf7a729b0b",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "patch": "@@ -86,9 +86,9 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(tr(\"Choose data directory on startup (default: %u)\").toStdString(), DEFAULT_CHOOSE_DATADIR));\n         strUsage += HelpMessageOpt(\"-lang=<lang>\", tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\").toStdString());\n         strUsage += HelpMessageOpt(\"-min\", tr(\"Start minimized\").toStdString());\n+        strUsage += HelpMessageOpt(\"-resetguisettings\", tr(\"Reset all settings changed in the GUI\").toStdString());\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", tr(\"Set SSL root certificates for payment request (default: -system-)\").toStdString());\n         strUsage += HelpMessageOpt(\"-splash\", strprintf(tr(\"Show splash screen on startup (default: %u)\").toStdString(), DEFAULT_SPLASHSCREEN));\n-        strUsage += HelpMessageOpt(\"-resetguisettings\", tr(\"Reset all settings changed in the GUI\").toStdString());\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM));\n         }"
      },
      {
        "sha": "74036f4f0f389dad1dca9e0567d9531a38b9c2f0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3e467520fef3d9da1f3f2e8e79dcde34bec444f/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "patch": "@@ -19,12 +19,12 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(OUTPUT_TYPE_DEFAULT)));\n     strUsage += HelpMessageOpt(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\");\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n     strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)));\n+    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n+                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n@@ -33,12 +33,12 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n                                \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n "
      }
    ]
  },
  {
    "sha": "aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTM2MGU3NmE3NGI4ZTNlYjIxYzY0ZjMwYWJmOGU0ZjhjMjdkZWM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-02T08:50:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-02T08:50:38Z"
      },
      "message": "Merge #12329: net: don't retry failed oneshot connections forever\n\n660f5f1 net: don't retry failed oneshot connections forever (Cory Fields)\n\nPull request description:\n\n  As introduced by (my suggestion, sorry, in) #11512, failed dns resolves end up as oneshots. But failed oneshots are re-added as oneshots, so we need to make sure that we're not queuing these up forever after failed resolves.\n\n  Rather than trying to differentiate, I think we should just not re-add failed oneshots and be done with it.\n\n  Maybe @sipa can shed a light on what the original intention was.\n\nTree-SHA512: 2dfe35dabfb6354c315cf6f8ae42971765d36575e685662caae7ed8f9dea9472c6fb1fd5e62ec35301550b74b6613a54265e90fca2a6618544f78dacaac4d4fd",
      "tree": {
        "sha": "f3601483f446c69ba227ce00b70fe3dfe5feeda7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3601483f446c69ba227ce00b70fe3dfe5feeda7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJadCZeAAoJEB5K7WKYbNJdWZkH/31VVY6qiS1N9nBY+iRtCf7o\nDD1VpM0d8YzNKOpdwO6PPTOF10zBBWhPGzs7x93re7eg/h1NLxQsS7NqnF31ronL\nX/wzKhBu8riEPHpGDMTZlFyxCZD/BpUq0m6P3ov8ERsuPYj56Xym/DPJyxTaSlrJ\nNsAmA+fRXeCzUdL6w79niR85F2nCICBmjotaKzkyA0/HKHYr7yFqbZkod4PU/9v+\n+mrZ9duLB7JRgH8ocBMWRzqf76qD35jPM1CsbYaxr0qyoWZf2w8Isf+/ebDb0bY8\nkMxmbL2j/CfzYRvCYbZqbXE5/60mfJkHWPq8FVNLvNcBOz2g3uWviFcFkHdF5+E=\n=2XPq\n-----END PGP SIGNATURE-----",
        "payload": "tree f3601483f446c69ba227ce00b70fe3dfe5feeda7\nparent 41363fe11df529556c2d44132caa86fe8b08cbbf\nparent 660f5f19ae74cc81b83540fcb95a33ec437834c8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517561412 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517561438 +0100\n\nMerge #12329: net: don't retry failed oneshot connections forever\n\n660f5f1 net: don't retry failed oneshot connections forever (Cory Fields)\n\nPull request description:\n\n  As introduced by (my suggestion, sorry, in) #11512, failed dns resolves end up as oneshots. But failed oneshots are re-added as oneshots, so we need to make sure that we're not queuing these up forever after failed resolves.\n\n  Rather than trying to differentiate, I think we should just not re-add failed oneshots and be done with it.\n\n  Maybe @sipa can shed a light on what the original intention was.\n\nTree-SHA512: 2dfe35dabfb6354c315cf6f8ae42971765d36575e685662caae7ed8f9dea9472c6fb1fd5e62ec35301550b74b6613a54265e90fca2a6618544f78dacaac4d4fd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41363fe11df529556c2d44132caa86fe8b08cbbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41363fe11df529556c2d44132caa86fe8b08cbbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41363fe11df529556c2d44132caa86fe8b08cbbf"
      },
      {
        "sha": "660f5f19ae74cc81b83540fcb95a33ec437834c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660f5f19ae74cc81b83540fcb95a33ec437834c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/660f5f19ae74cc81b83540fcb95a33ec437834c8"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 8,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5f4c0eecab5a04d7546eba5019aff1304dc85aae",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
        "patch": "@@ -1682,8 +1682,7 @@ void CConnman::ProcessOneShot()\n     CAddress addr;\n     CSemaphoreGrant grant(*semOutbound, true);\n     if (grant) {\n-        if (!OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true))\n-            AddOneShot(strDest);\n+        OpenNetworkConnection(addr, false, &grant, strDest.c_str(), true);\n     }\n }\n \n@@ -1953,29 +1952,29 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n+void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n {\n     //\n     // Initiate outbound network connection\n     //\n     if (interruptNet) {\n-        return false;\n+        return;\n     }\n     if (!fNetworkActive) {\n-        return false;\n+        return;\n     }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n             FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n             FindNode(addrConnect.ToStringIPPort()))\n-            return false;\n+            return;\n     } else if (FindNode(std::string(pszDest)))\n-        return false;\n+        return;\n \n     CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n \n     if (!pnode)\n-        return false;\n+        return;\n     if (grantOutbound)\n         grantOutbound->MoveTo(pnode->grantOutbound);\n     if (fOneShot)\n@@ -1990,8 +1989,6 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n-\n-    return true;\n }\n \n void CConnman::ThreadMessageHandler()"
      },
      {
        "sha": "0542ec1aaa501fe3f04bd14bf8a85a43362e9e3f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
        "patch": "@@ -177,7 +177,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n+    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);"
      }
    ]
  },
  {
    "sha": "1b06ed136f17b526360617a70026aed5ded5746c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjA2ZWQxMzZmMTdiNTI2MzYwNjE3YTcwMDI2YWVkNWRlZDU3NDZj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-02T10:35:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-02T10:35:51Z"
      },
      "message": "Merge #12283: Fix typos\n\n1340eda3b7 Fix typos (practicalswift)\n\nPull request description:\n\n  Fix typos.\n\nTree-SHA512: 533a136831387ef26e9a74ba078437496bee38cc026da73fa9e6f6e7f4d5665eccac24cf3ef05e6d3af1329a1214f5ce71b039ddb8378b074e6d4408b8701f95",
      "tree": {
        "sha": "113cb8738aecfae49e6d885396abd171420b58d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/113cb8738aecfae49e6d885396abd171420b58d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b06ed136f17b526360617a70026aed5ded5746c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJadD8HAAoJENLqSFDnUoslTOsP/RR60IE5vb4iICYW+PigvO76\nz1dEm2ZRfEglWllEzKKOzNuTBoHf04PEMdYDUVMAg8NZeZ8buZeKgrKBgd5azU3R\noeJylqIqQ5rDzswFdN2jmwEwMp+gWkVmkyH2bW0IWHvRaq0xyH9sTcxOZkPaRW1M\nXZ0QmPd5cNjFropVrf7eVAIzn/mEnJhxMn21PgnUcFoecg5DvbBLQk9iDUFWjxNH\nK6yKqEK/x80aZ4srR6LvqzHutLRlhNmpa4W0WHSjeFZB6w8LtaXUvb87A5uIN0Wd\nYYmzm+bvbtPHwwR+YkT5wCsasZ6RafWctPS1djLYb/y8aMlTiAJa7/hqpkbkDGyI\n5QSmaHWxLw/4jylyjdVb6RhQDnhFd9KYwrs4JcKmwdbwu2GjxemKLKndMJu+zEiY\nTqCm+D1I0smtudwEvS3T+oswXg1j3C5rHF1sBg/cM9W7PEgKvDTuyoKA2fOYglno\n5V66UMWuHTYSLOnlue6I0edlied/0M1nKkwdPNkgMX6+MkSOIRbfcjVfN5UYmoMj\nKewbxAzT/+P0BUS+4zdowqu8HGPWB5TyxqEHi1vsm3n8Y51DdKsghPX6yGFuHE5v\nJFIStZYLiL4sTnTgiNGnbjou47OA7KvHGoHLJU5G+Sdb0YjF1VhK+LUVSJ0EJcV1\nbwVw/rEK0Fa88zupYGog\n=6XIv\n-----END PGP SIGNATURE-----",
        "payload": "tree 113cb8738aecfae49e6d885396abd171420b58d3\nparent aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5\nparent 1340eda3b7b6ca2789d6ec65dad72ee4c3844661\nauthor MarcoFalke <falke.marco@gmail.com> 1517567742 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517567751 -0500\n\nMerge #12283: Fix typos\n\n1340eda3b7 Fix typos (practicalswift)\n\nPull request description:\n\n  Fix typos.\n\nTree-SHA512: 533a136831387ef26e9a74ba078437496bee38cc026da73fa9e6f6e7f4d5665eccac24cf3ef05e6d3af1329a1214f5ce71b039ddb8378b074e6d4408b8701f95\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b06ed136f17b526360617a70026aed5ded5746c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b06ed136f17b526360617a70026aed5ded5746c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b06ed136f17b526360617a70026aed5ded5746c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa360e76a74b8e3eb21c64f30abf8e4f8c27dec5"
      },
      {
        "sha": "1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1340eda3b7b6ca2789d6ec65dad72ee4c3844661"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "2b6ee1dc3f488408d952553ab5a643f6e89c3a29",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -934,8 +934,8 @@ if test x$use_pkgconfig = xyes; then\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl  not found.)])\n-      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto  not found.)])\n+      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n       BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])"
      },
      {
        "sha": "18ff48ea4e2745cdeeb9caad5013fdc7fe9c60fa",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -13,7 +13,7 @@ Before every minor and major release:\n * Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n-* Update `src/chainparams.cpp` defaultAssumeValid  with information from the getblockhash rpc.\n+* Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n   - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n   - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect"
      },
      {
        "sha": "6eb223171f9bb76f7ca864e480fe1346ecd340b4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -126,7 +126,7 @@ class CMainParams : public CChainParams {\n \n         // Note that of those which support the service bits prefix, most only support a subset of\n         // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they dont support the\n+        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n         // service bits we want, but we should get them updated to support all service bits wanted by any\n         // release ASAP to avoid it where possible.\n         vSeeds.emplace_back(\"seed.bitcoin.sipa.be\"); // Pieter Wuille, only supports x1, x5, x9, and xd"
      },
      {
        "sha": "aaeb90eee212245e38b32b3286a6db238984b938",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -294,7 +294,7 @@ enum ServiceFlags : uint64_t {\n  * Thus, generally, avoid calling with peerServices == NODE_NONE, unless\n  * state-specific flags must absolutely be avoided. When called with\n  * peerServices == NODE_NONE, the returned desirable service flags are\n- * guaranteed to not change dependant on state - ie they are suitable for\n+ * guaranteed to not change dependent on state - ie they are suitable for\n  * use when describing peers which we know to be desirable, but for which\n  * we do not have a confirmed set of service flags.\n  *"
      },
      {
        "sha": "9f86c4a163267daa79bd7581df61cae794ce4b9a",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -82,7 +82,7 @@ class CVectorWriter\n  * @param[in]  nVersionIn Serialization Version (including any flags)\n  * @param[in]  vchDataIn  Referenced byte vector to overwrite/append\n  * @param[in]  nPosIn Starting position. Vector index where writes should start. The vector will initially\n- *                    grow as necessary to  max(nPosIn, vec.size()). So to append, use vec.size().\n+ *                    grow as necessary to max(nPosIn, vec.size()). So to append, use vec.size().\n */\n     CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn) : nType(nTypeIn), nVersion(nVersionIn), vchData(vchDataIn), nPos(nPosIn)\n     {"
      },
      {
        "sha": "bf3d131e4edcbc01e4d1ac2b00315e728fd7ad40",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -25,8 +25,8 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n // Early deadlock detection.\n // Problem being solved:\n-//    Thread 1 locks  A, then B, then C\n-//    Thread 2 locks  D, then C, then A\n+//    Thread 1 locks A, then B, then C\n+//    Thread 2 locks D, then C, then A\n //     --> may result in deadlock between the two threads, depending on when they run.\n // Solution implemented here:\n // Keep track of pairs of locks: (A before B), (A before C), etc."
      },
      {
        "sha": "698ef9181d39bb8ea23190a1b26ec5b5555d42a8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -2577,7 +2577,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         if (GetMainSignals().CallbacksPending() > 10) {\n             // Block until the validation queue drains. This should largely\n             // never happen in normal operation, however may happen during\n-            // reindex, causing memory blowup  if we run too far ahead.\n+            // reindex, causing memory blowup if we run too far ahead.\n             SyncWithValidationInterfaceQueue();\n         }\n "
      },
      {
        "sha": "f39471b8717c21e18d181c5e20f69ec19e1bc967",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // we can't make 3 cents of mature coins\n         BOOST_CHECK(!testWallet.SelectCoinsMinConf( 3 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n \n-        // we can make 3 cents of new  coins\n+        // we can make 3 cents of new coins\n         BOOST_CHECK( testWallet.SelectCoinsMinConf( 3 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n "
      },
      {
        "sha": "4d9661de379b68bc7b18035f74e1d8e93eaa61b4",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b06ed136f17b526360617a70026aed5ded5746c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b06ed136f17b526360617a70026aed5ded5746c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=1b06ed136f17b526360617a70026aed5ded5746c",
        "patch": "@@ -6,7 +6,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Bitcoin P2P network half-a-node.\n \n-This python code was modified from ArtForz' public domain  half-a-node, as\n+This python code was modified from ArtForz' public domain half-a-node, as\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n P2PConnection: A low-level connection object to a node's P2P interface"
      }
    ]
  },
  {
    "sha": "4cad91663df381d0dff8526f3b4aa74569dfb626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2FkOTE2NjNkZjM4MWQwZGZmODUyNmYzYjRhYTc0NTY5ZGZiNjI2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-02T10:42:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-02T10:42:51Z"
      },
      "message": "Merge #11869: QA: segwit.py: s/find_unspent/find_spendable_utxo/\n\n9bb59cf7ba QA: segwit.py: s/find_unspent/find_spendable_utxo/ (Jorge Tim\u00f3n)\n\nPull request description:\n\n  Separated from #8994\n  It was found out testing that PR but I think this fix should be done even without #8994 the fix is not necessary by luck. Unless I'm missing something.\n\nTree-SHA512: ba1a970e674878ae2f27ee8bba372fa3b42dafff682374f50e5ddc9896fd8808fef2b2b70c7028f2a7b0dbea9f3e29a757e2cde98970f5761bf414455ba02c09",
      "tree": {
        "sha": "fe1443ada92d24bde166b3598e7c75a5de23e49f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe1443ada92d24bde166b3598e7c75a5de23e49f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cad91663df381d0dff8526f3b4aa74569dfb626",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJadECrAAoJENLqSFDnUoslluMP/RaieRrOHxgoMAlEngFIW9wl\nvA77QOToB0k0qBN8RYJ7keNTa7/Z/+gH/XtNnTGQfHbnDG5VzbOWsrV297bcjpXS\nbp6RJvXL4hEeaHDNDy3zsKf+zY+NQ+Ca8lC9J2cfDeUFcXPMy+Ax/1m5KTwHJG9f\nlVlnsEulyXzrec6dHb8vGVBg27SCcDPzImdyB1qs2YlqkvR365QHnlwPhiNngreg\nXlVy6L7rTy7eiszHa4xX95CVXQGg9jwX0KQT2urJWVqGcSGoyO2SvlbN1S0eBZG2\nMnL8ViPyCTK/Qh3cb8usAWiSWhBR+Ye1xcu0yn5MoBP6RFY6EPm5uJA8JBBYNBNo\n4FiZmCN7KDhc/J6AYFtE8XXR79Qx1CwRZZmyTVNeJnEDNhI6kcaXBlferdKQQ3yu\nXjdKB7kltbv0qurN0eAK/Jza7tl8uX9ovCEuBxXtkGKq+Lm1+EU41Yy4Sk3fi9fI\n/mGOoZwd0aKcdQNCryIAIifAmB0WKK8j6B//yNuo4JvH5jZEyH/Tr28GTf799Neu\nuOWAcdd5YBIZeImxuik8X6rEfgCGttpegLEH/fJKJ0d8Qae58bY9q7+ViayqSBdU\nNIQ5wihLu/4PchlNPEzNliJKGjrzflM45va8sEcaeKW0Go+pBWeoO6B9UIL+ys4H\nxXwCDpOsN7LEKS1ThQKE\n=gs0q\n-----END PGP SIGNATURE-----",
        "payload": "tree fe1443ada92d24bde166b3598e7c75a5de23e49f\nparent 1b06ed136f17b526360617a70026aed5ded5746c\nparent 9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a\nauthor MarcoFalke <falke.marco@gmail.com> 1517568166 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517568171 -0500\n\nMerge #11869: QA: segwit.py: s/find_unspent/find_spendable_utxo/\n\n9bb59cf7ba QA: segwit.py: s/find_unspent/find_spendable_utxo/ (Jorge Tim\u00f3n)\n\nPull request description:\n\n  Separated from #8994\n  It was found out testing that PR but I think this fix should be done even without #8994 the fix is not necessary by luck. Unless I'm missing something.\n\nTree-SHA512: ba1a970e674878ae2f27ee8bba372fa3b42dafff682374f50e5ddc9896fd8808fef2b2b70c7028f2a7b0dbea9f3e29a757e2cde98970f5761bf414455ba02c09\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cad91663df381d0dff8526f3b4aa74569dfb626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cad91663df381d0dff8526f3b4aa74569dfb626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cad91663df381d0dff8526f3b4aa74569dfb626/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b06ed136f17b526360617a70026aed5ded5746c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b06ed136f17b526360617a70026aed5ded5746c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b06ed136f17b526360617a70026aed5ded5746c"
      },
      {
        "sha": "9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb59cf7baea0b33d97ef0c0eeee88a8b104be3a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7db05077c9ee25966b45d8126990b2b8ebd5f35d",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cad91663df381d0dff8526f3b4aa74569dfb626/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cad91663df381d0dff8526f3b4aa74569dfb626/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=4cad91663df381d0dff8526f3b4aa74569dfb626",
        "patch": "@@ -30,11 +30,13 @@ def getutxo(txid):\n     utxo[\"txid\"] = txid\n     return utxo\n \n-def find_unspent(node, min_value):\n-    for utxo in node.listunspent():\n-        if utxo['amount'] >= min_value:\n+def find_spendable_utxo(node, min_value):\n+    for utxo in node.listunspent(query_options={'minimumAmount': min_value}):\n+        if utxo['spendable']:\n             return utxo\n \n+    raise AssertionError(\"Unspent output equal or higher than %s not found\" % min_value)\n+\n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -113,8 +115,8 @@ def run_test(self):\n         for i in range(5):\n             for n in range(3):\n                 for v in range(2):\n-                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[n], False, Decimal(\"49.999\")))\n-                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n+                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], False, Decimal(\"49.999\")))\n+                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n \n         self.nodes[0].generate(1) #block 163\n         sync_blocks(self.nodes)\n@@ -209,7 +211,7 @@ def run_test(self):\n         #                      tx2 (segwit input, paying to a non-segwit output) ->\n         #                      tx3 (non-segwit input, paying to a non-segwit output).\n         # tx1 is allowed to appear in the block, but no others.\n-        txid1 = send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n+        txid1 = send_to_witness(1, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n         hex_tx = self.nodes[0].gettransaction(txid)['hex']\n         tx = FromHex(CTransaction(), hex_tx)\n         assert(tx.wit.is_null()) # This should not be a segwit input\n@@ -570,7 +572,7 @@ def run_test(self):\n             assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n \n     def mine_and_test_listunspent(self, script_list, ismine):\n-        utxo = find_unspent(self.nodes[0], 50)\n+        utxo = find_spendable_utxo(self.nodes[0], 50)\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int('0x'+utxo['txid'],0), utxo['vout'])))\n         for i in script_list:"
      }
    ]
  },
  {
    "sha": "7444149de37a0cce9b28ca92f0af16cac8689873",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDQ0MTQ5ZGUzN2EwY2NlOWIyOGNhOTJmMGFmMTZjYWM4Njg5ODcz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-31T18:47:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T14:29:33Z"
      },
      "message": "Document method for reviewers to verify chainTxData\n\nThis commit adds the final block hash of the window to getchaintxstats\nand documents how reviewers can verify changes to chainTxData.",
      "tree": {
        "sha": "b31c38c2fe9910438dff0ced332f5b2619d1fedf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b31c38c2fe9910438dff0ced332f5b2619d1fedf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7444149de37a0cce9b28ca92f0af16cac8689873",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7444149de37a0cce9b28ca92f0af16cac8689873",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7444149de37a0cce9b28ca92f0af16cac8689873",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7444149de37a0cce9b28ca92f0af16cac8689873/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d203a826725584779a915102b0353a23a4bccb11",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7444149de37a0cce9b28ca92f0af16cac8689873/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7444149de37a0cce9b28ca92f0af16cac8689873/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=7444149de37a0cce9b28ca92f0af16cac8689873",
        "patch": "@@ -24,7 +24,7 @@ Before every major release:\n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n * Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n * Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n-  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example.\n+  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n * Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders"
      },
      {
        "sha": "4276ad9eebfe50bc031ba4a968711752904998d6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7444149de37a0cce9b28ca92f0af16cac8689873/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7444149de37a0cce9b28ca92f0af16cac8689873/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7444149de37a0cce9b28ca92f0af16cac8689873",
        "patch": "@@ -1526,12 +1526,13 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             \"2. \\\"blockhash\\\"  (string, optional) The hash of the block that ends the window.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n-            \"  \\\"txcount\\\": xxxxx,             (numeric) The total number of transactions in the chain up to that point.\\n\"\n-            \"  \\\"window_block_count\\\": xxxxx,  (numeric) Size of the window in number of blocks.\\n\"\n-            \"  \\\"window_tx_count\\\": xxxxx,     (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"window_interval\\\": xxxxx,     (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"txrate\\\": x.xx,               (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n+            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n+            \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n+            \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n+            \"  \\\"window_block_count\\\": xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n+            \"  \\\"window_tx_count\\\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"window_interval\\\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"txrate\\\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getchaintxstats\", \"\")\n@@ -1582,6 +1583,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n     ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n+    ret.push_back(Pair(\"window_final_block_hash\", pindex->GetBlockHash().GetHex()));\n     ret.push_back(Pair(\"window_block_count\", blockcount));\n     if (blockcount > 0) {\n         ret.push_back(Pair(\"window_tx_count\", nTxDiff));"
      },
      {
        "sha": "7cf2abe6f0e2c3ed5ae305fd5fd9cef6ba8ae278",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7444149de37a0cce9b28ca92f0af16cac8689873/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7444149de37a0cce9b28ca92f0af16cac8689873/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=7444149de37a0cce9b28ca92f0af16cac8689873",
        "patch": "@@ -100,28 +100,34 @@ def _test_getblockchaininfo(self):\n         assert_greater_than(res['size_on_disk'], 0)\n \n     def _test_getchaintxstats(self):\n+        self.log.info(\"Test getchaintxstats\")\n+\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n         # tx rate should be 1 per 10 minutes, or 1/600\n         # we have to round because of binary math\n         assert_equal(round(chaintxstats['txrate'] * 600, 10), Decimal(1))\n \n-        b1 = self.nodes[0].getblock(self.nodes[0].getblockhash(1))\n-        b200 = self.nodes[0].getblock(self.nodes[0].getblockhash(200))\n+        b1_hash = self.nodes[0].getblockhash(1)\n+        b1 = self.nodes[0].getblock(b1_hash)\n+        b200_hash = self.nodes[0].getblockhash(200)\n+        b200 = self.nodes[0].getblock(b200_hash)\n         time_diff = b200['mediantime'] - b1['mediantime']\n \n         chaintxstats = self.nodes[0].getchaintxstats()\n         assert_equal(chaintxstats['time'], b200['time'])\n         assert_equal(chaintxstats['txcount'], 201)\n+        assert_equal(chaintxstats['window_final_block_hash'], b200_hash)\n         assert_equal(chaintxstats['window_block_count'], 199)\n         assert_equal(chaintxstats['window_tx_count'], 199)\n         assert_equal(chaintxstats['window_interval'], time_diff)\n         assert_equal(round(chaintxstats['txrate'] * time_diff, 10), Decimal(199))\n \n-        chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1['hash'])\n+        chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1_hash)\n         assert_equal(chaintxstats['time'], b1['time'])\n         assert_equal(chaintxstats['txcount'], 2)\n+        assert_equal(chaintxstats['window_final_block_hash'], b1_hash)\n         assert_equal(chaintxstats['window_block_count'], 0)\n         assert('window_tx_count' not in chaintxstats)\n         assert('window_interval' not in chaintxstats)\n@@ -173,8 +179,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_rpc_error(-5, \"Block not found\",\n-                              node.getblockheader, \"nonsense\")\n+        assert_raises_rpc_error(-5, \"Block not found\", node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()\n         secondbesthash = node.getblockhash(199)"
      }
    ]
  },
  {
    "sha": "d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTE5ZjJlYzFhM2I5MjEzYTc5ZGU5NzJlZDdiOWI3MDIyNjQ1YjNm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:08:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:08:37Z"
      },
      "message": "[tests] Fix style warnings in feature_fee_estimation.py",
      "tree": {
        "sha": "801670418910d0bf6d1d7c6aa020f75faf694bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/801670418910d0bf6d1d7c6aa020f75faf694bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cad91663df381d0dff8526f3b4aa74569dfb626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cad91663df381d0dff8526f3b4aa74569dfb626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cad91663df381d0dff8526f3b4aa74569dfb626"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 60,
      "deletions": 61
    },
    "files": [
      {
        "sha": "936ca94580544465ab063911536ac43852664896",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 60,
        "deletions": 61,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d119f2ec1a3b9213a79de972ed7b9b7022645b3f/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d119f2ec1a3b9213a79de972ed7b9b7022645b3f/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
        "patch": "@@ -3,39 +3,41 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n+from decimal import Decimal\n+import random\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n+from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import satoshi_round, sync_mempools, sync_blocks, connect_nodes, assert_greater_than\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend\n # time signing.\n-redeem_script_1 = CScript([OP_1, OP_DROP])\n-redeem_script_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = CScript([OP_HASH160, hash160(redeem_script_1), OP_EQUAL])\n-P2SH_2 = CScript([OP_HASH160, hash160(redeem_script_2), OP_EQUAL])\n+REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n+REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n+P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])\n+P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])\n \n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n-SCRIPT_SIG = [CScript([OP_TRUE, redeem_script_1]), CScript([OP_TRUE, redeem_script_2])]\n+SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]\n \n global log\n \n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n-    \"\"\"\n-    Create and send a transaction with a random fee.\n+    \"\"\"Create and send a transaction with a random fee.\n+\n     The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n     It adds the newly created outputs to the unconfirmed list.\n-    Returns (raw transaction, fee)\n-    \"\"\"\n+    Returns (raw transaction, fee).\"\"\"\n+\n     # It's best to exponentially distribute our random fees\n     # because the buckets are exponentially spaced.\n     # Exponentially distributed from 1-128 * fee_increment\n-    rand_fee = float(fee_increment)*(1.1892**random.randint(0,28))\n+    rand_fee = float(fee_increment) * (1.1892 ** random.randint(0, 28))\n     # Total fee ranges from min_fee to min_fee + 127*fee_increment\n     fee = min_fee - fee_increment + satoshi_round(rand_fee)\n     tx = CTransaction()\n@@ -50,83 +52,81 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n             total_in += t[\"amount\"]\n             tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n         if total_in <= amount + fee:\n-            raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee, total_in))\n-    tx.vout.append(CTxOut(int((total_in - amount - fee)*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(amount*COIN), P2SH_2))\n+            raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount + fee, total_in))\n+    tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(amount * COIN), P2SH_2))\n     # These transactions don't need to be signed, but we still have to insert\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n         inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n     txid = from_node.sendrawtransaction(ToHex(tx), True)\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : total_in - amount - fee})\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : amount})\n+    unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n+    unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n \n     return (ToHex(tx), fee)\n \n-def split_inputs(from_node, txins, txouts, initial_split = False):\n-    \"\"\"\n-    We need to generate a lot of inputs so we can generate a ton of transactions.\n+def split_inputs(from_node, txins, txouts, initial_split=False):\n+    \"\"\"Generate a lot of inputs so we can generate a ton of transactions.\n+\n     This function takes an input from txins, and creates and sends a transaction\n     which splits the value into 2 outputs which are appended to txouts.\n     Previously this was designed to be small inputs so they wouldn't have\n-    a high coin age when the notion of priority still existed.\n-    \"\"\"\n+    a high coin age when the notion of priority still existed.\"\"\"\n+\n     prevtxout = txins.pop()\n     tx = CTransaction()\n     tx.vin.append(CTxIn(COutPoint(int(prevtxout[\"txid\"], 16), prevtxout[\"vout\"]), b\"\"))\n \n-    half_change = satoshi_round(prevtxout[\"amount\"]/2)\n-    rem_change = prevtxout[\"amount\"] - half_change  - Decimal(\"0.00001000\")\n-    tx.vout.append(CTxOut(int(half_change*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(rem_change*COIN), P2SH_2))\n+    half_change = satoshi_round(prevtxout[\"amount\"] / 2)\n+    rem_change = prevtxout[\"amount\"] - half_change - Decimal(\"0.00001000\")\n+    tx.vout.append(CTxOut(int(half_change * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(rem_change * COIN), P2SH_2))\n \n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n-    if (initial_split) :\n+    if (initial_split):\n         completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n-    else :\n+    else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)\n     txid = from_node.sendrawtransaction(completetx, True)\n-    txouts.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : half_change})\n-    txouts.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : rem_change})\n-\n-def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n-    \"\"\"\n-    This function calls estimatefee and verifies that the estimates\n-    meet certain invariants.\n-    \"\"\"\n-    all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n+    txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n+    txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n+\n+def check_estimates(node, fees_seen, max_invalid, print_estimates=True):\n+    \"\"\"Call estimatefee and verify that the estimates meet certain invariants.\"\"\"\n+\n+    all_estimates = [node.estimatefee(i) for i in range(1, 26)]\n     if print_estimates:\n-        log.info([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n-    delta = 1.0e-6 # account for rounding error\n+        log.info([str(all_estimates[e - 1]) for e in [1, 2, 3, 6, 15, 25]])\n+    delta = 1.0e-6  # account for rounding error\n     last_e = max(fees_seen)\n     for e in [x for x in all_estimates if x >= 0]:\n         # Estimates should be within the bounds of what transactions fees actually were:\n-        if float(e)+delta < min(fees_seen) or float(e)-delta > max(fees_seen):\n+        if float(e) + delta < min(fees_seen) or float(e) - delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 %(float(e), min(fees_seen), max(fees_seen)))\n+                                 % (float(e), min(fees_seen), max(fees_seen)))\n         # Estimates should be monotonically decreasing\n-        if float(e)-delta > last_e:\n+        if float(e) - delta > last_e:\n             raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 %(float(e),float(last_e)))\n+                                 % (float(e), float(last_e)))\n         last_e = e\n     valid_estimate = False\n     invalid_estimates = 0\n-    for i,e in enumerate(all_estimates): # estimate is for i+1\n+    for i, e in enumerate(all_estimates):  # estimate is for i+1\n         if e >= 0:\n             valid_estimate = True\n             if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n-                assert(node.estimatesmartfee((i+1)//2)[\"feerate\"] > float(e) - delta)\n+                assert_greater_than(node.estimatesmartfee((i + 1) // 2)[\"feerate\"], float(e) - delta)\n \n         else:\n             invalid_estimates += 1\n \n             # estimatesmartfee should still be valid\n-            approx_estimate = node.estimatesmartfee(i+1)[\"feerate\"]\n-            answer_found = node.estimatesmartfee(i+1)[\"blocks\"]\n-            assert(approx_estimate > 0)\n-            assert(answer_found > i+1)\n+            approx_estimate = node.estimatesmartfee(i + 1)[\"feerate\"]\n+            answer_found = node.estimatesmartfee(i + 1)[\"blocks\"]\n+            assert_greater_than(approx_estimate, 0)\n+            assert_greater_than(answer_found, i + 1)\n \n             # Once we're at a high enough confirmation count that we can give an estimate\n             # We should have estimates for all higher confirmation counts\n@@ -136,7 +136,7 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n     # Check on the expected number of different confirmation counts\n     # that we might not have valid estimates for\n     if invalid_estimates > max_invalid:\n-        raise AssertionError(\"More than (%d) invalid estimates\"%(max_invalid))\n+        raise AssertionError(\"More than (%d) invalid estimates\" % (max_invalid))\n     return all_estimates\n \n \n@@ -160,7 +160,6 @@ def setup_network(self):\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n \n-\n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n         # We will now mine numblocks blocks generating on average 100 transactions between each block\n@@ -169,14 +168,14 @@ def transact_and_mine(self, numblocks, mining_node):\n         # resorting to tx's that depend on the mempool when those run out\n         for i in range(numblocks):\n             random.shuffle(self.confutxo)\n-            for j in range(random.randrange(100-50,100+50)):\n-                from_index = random.randint(1,2)\n+            for j in range(random.randrange(100 - 50, 100 + 50)):\n+                from_index = random.randint(1, 2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n-                self.fees_per_kb.append(float(fee)/tx_kbytes)\n+                self.fees_per_kb.append(float(fee) / tx_kbytes)\n             sync_mempools(self.nodes[0:3], wait=.1)\n-            mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]\n+            mined = mining_node.getblock(mining_node.generate(1)[0], True)[\"tx\"]\n             sync_blocks(self.nodes[0:3], wait=.1)\n             # update which txouts are confirmed\n             newmem = []\n@@ -210,13 +209,13 @@ def run_test(self):\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n         reps = 0\n         while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n+            # Double txouts to txouts2\n+            while (len(self.txouts) > 0):\n                 split_inputs(self.nodes[0], self.txouts, self.txouts2)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n+            # Double txouts2 to txouts\n+            while (len(self.txouts2) > 0):\n                 split_inputs(self.nodes[0], self.txouts2, self.txouts)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n@@ -235,7 +234,7 @@ def run_test(self):\n \n         self.fees_per_kb = []\n         self.memutxo = []\n-        self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n+        self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n         self.log.info(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n         for i in range(2):"
      }
    ]
  },
  {
    "sha": "a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTYyM2IxNjE1YmRkM2U4YjIzYjYzOWM3YzZhZmYwNGE0NGRhZGY3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:37:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:56:49Z"
      },
      "message": "[tests] Remove tests for deprecated estimatefee RPC",
      "tree": {
        "sha": "012a5126d2752e1fac0a60cbb4ce12bd4daf09ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/012a5126d2752e1fac0a60cbb4ce12bd4daf09ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d119f2ec1a3b9213a79de972ed7b9b7022645b3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d119f2ec1a3b9213a79de972ed7b9b7022645b3f"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 26,
      "deletions": 48
    },
    "files": [
      {
        "sha": "e1263414bde38959e3a973272117f6b07a86359a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 26,
        "deletions": 48,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
        "patch": "@@ -9,7 +9,15 @@\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import satoshi_round, sync_mempools, sync_blocks, connect_nodes, assert_greater_than\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    connect_nodes,\n+    satoshi_round,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend\n@@ -22,8 +30,6 @@\n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]\n \n-global log\n-\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     \"\"\"Create and send a transaction with a random fee.\n \n@@ -93,52 +99,28 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n-def check_estimates(node, fees_seen, max_invalid, print_estimates=True):\n-    \"\"\"Call estimatefee and verify that the estimates meet certain invariants.\"\"\"\n+def check_estimates(node, fees_seen, max_invalid):\n+    \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n \n-    all_estimates = [node.estimatefee(i) for i in range(1, 26)]\n-    if print_estimates:\n-        log.info([str(all_estimates[e - 1]) for e in [1, 2, 3, 6, 15, 25]])\n     delta = 1.0e-6  # account for rounding error\n-    last_e = max(fees_seen)\n-    for e in [x for x in all_estimates if x >= 0]:\n-        # Estimates should be within the bounds of what transactions fees actually were:\n-        if float(e) + delta < min(fees_seen) or float(e) - delta > max(fees_seen):\n+    last_feerate = float(max(fees_seen))\n+    all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n+    for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n+        feerate = float(e[\"feerate\"])\n+        assert_greater_than(feerate, 0)\n+\n+        if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 % (float(e), min(fees_seen), max(fees_seen)))\n-        # Estimates should be monotonically decreasing\n-        if float(e) - delta > last_e:\n+                                 % (feerate, min(fees_seen), max(fees_seen)))\n+        if feerate - delta > last_feerate:\n             raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 % (float(e), float(last_e)))\n-        last_e = e\n-    valid_estimate = False\n-    invalid_estimates = 0\n-    for i, e in enumerate(all_estimates):  # estimate is for i+1\n-        if e >= 0:\n-            valid_estimate = True\n-            if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n-                assert_greater_than(node.estimatesmartfee((i + 1) // 2)[\"feerate\"], float(e) - delta)\n+                                 % (feerate, last_feerate))\n+        last_feerate = feerate\n \n+        if i == 0:\n+            assert_equal(e[\"blocks\"], 2)\n         else:\n-            invalid_estimates += 1\n-\n-            # estimatesmartfee should still be valid\n-            approx_estimate = node.estimatesmartfee(i + 1)[\"feerate\"]\n-            answer_found = node.estimatesmartfee(i + 1)[\"blocks\"]\n-            assert_greater_than(approx_estimate, 0)\n-            assert_greater_than(answer_found, i + 1)\n-\n-            # Once we're at a high enough confirmation count that we can give an estimate\n-            # We should have estimates for all higher confirmation counts\n-            if valid_estimate:\n-                raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n-\n-    # Check on the expected number of different confirmation counts\n-    # that we might not have valid estimates for\n-    if invalid_estimates > max_invalid:\n-        raise AssertionError(\"More than (%d) invalid estimates\" % (max_invalid))\n-    return all_estimates\n-\n+            assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n \n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -151,7 +133,7 @@ def setup_network(self):\n         which we will use to generate our transactions.\n         \"\"\"\n         self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n                                       [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n@@ -190,10 +172,6 @@ def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")\n \n-        # Make log handler available to helper functions\n-        global log\n-        log = self.log\n-\n         # Start node0\n         self.start_node(0)\n         self.txouts = []"
      }
    ]
  },
  {
    "sha": "a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGU0MzdhMDJmMmQzZDljN2NlY2U0ZWM4OTU0M2M3YjgwM2VhMjBm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:59:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T16:34:42Z"
      },
      "message": "[tests] Remove estimatefee from rpc_deprecated.py test",
      "tree": {
        "sha": "9c6ece577ee89ba3ef4882284b85677702a69446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c6ece577ee89ba3ef4882284b85677702a69446"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5623b1615bdd3e8b23b639c7c6aff04a44dadf7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 1,
      "deletions": 7
    },
    "files": [
      {
        "sha": "689afcb09cf51574ce4798182b656e51487b00b1",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
        "patch": "@@ -10,15 +10,9 @@ class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=createmultisig\"]]\n+        self.extra_args = [[], [\"-deprecatedrpc=createmultisig\"]]\n \n     def run_test(self):\n-        self.log.info(\"estimatefee: Shows deprecated message\")\n-        assert_raises_rpc_error(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n-\n-        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n-        self.nodes[1].estimatefee(1)\n-\n         self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n         assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n         self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])"
      }
    ]
  },
  {
    "sha": "85123be78df5a4e9447e70f9ee727416d45843d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTEyM2JlNzhkZjVhNGU5NDQ3ZTcwZjllZTcyNzQxNmQ0NTg0M2Q3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-02T16:57:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-02T17:25:33Z"
      },
      "message": "Merge #12317: Document method for reviewers to verify chainTxData\n\n7444149 Document method for reviewers to verify chainTxData (John Newbery)\n\nPull request description:\n\n  This commit adds the final block hash of the window to getchaintxstats\n  and documents how reviewers can verify changes to chainTxData.\n\nTree-SHA512: d16abb5f47d058e52660f4d495f1e453205b1b83716d7c810ff62a70338db721386c1808ec1fc8468f514e4d80cc58e3c96eeb3184cbbcb1d07830fa5e53f342",
      "tree": {
        "sha": "8fbf7dd659fc4f77555120fd81d347cdce6a2b82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fbf7dd659fc4f77555120fd81d347cdce6a2b82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85123be78df5a4e9447e70f9ee727416d45843d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJadJ8NAAoJEB5K7WKYbNJdFEEH/1TbHr/MW1rBJb91u+RaBfC7\n05/AFv4HFD6PqokiRrQybwUu2v6/VVkiCKfs29FdDQYrAlDVCAqauRsZsRPfCsaK\nSzLMiaTc7h88cbkcmgD0AFuiHOQQOizWNkig9hvYBwteHwA6OIzZbhxGniPLxKKa\n1PJS5bTN+pmAQ3p7zrEKwYGPl1L6MBqyyGHYt1eoDZf/PN3W9Ge3CiIZjEVTfwtM\nC+h1WINd1DY0xIKnQJtEY4nS0WmcyqPVwTwYgLxKCmi2cZV4yVRKQTHWEUnjoujT\nF7cKOzCozzBouTC2Ral/P+3iisG8h240F2KJiuieMQShHiXBJCS1cdNp6DRHdKc=\n=PZQ9\n-----END PGP SIGNATURE-----",
        "payload": "tree 8fbf7dd659fc4f77555120fd81d347cdce6a2b82\nparent 4cad91663df381d0dff8526f3b4aa74569dfb626\nparent 7444149de37a0cce9b28ca92f0af16cac8689873\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517590621 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517592333 +0100\n\nMerge #12317: Document method for reviewers to verify chainTxData\n\n7444149 Document method for reviewers to verify chainTxData (John Newbery)\n\nPull request description:\n\n  This commit adds the final block hash of the window to getchaintxstats\n  and documents how reviewers can verify changes to chainTxData.\n\nTree-SHA512: d16abb5f47d058e52660f4d495f1e453205b1b83716d7c810ff62a70338db721386c1808ec1fc8468f514e4d80cc58e3c96eeb3184cbbcb1d07830fa5e53f342\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85123be78df5a4e9447e70f9ee727416d45843d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85123be78df5a4e9447e70f9ee727416d45843d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85123be78df5a4e9447e70f9ee727416d45843d7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cad91663df381d0dff8526f3b4aa74569dfb626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cad91663df381d0dff8526f3b4aa74569dfb626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cad91663df381d0dff8526f3b4aa74569dfb626"
      },
      {
        "sha": "7444149de37a0cce9b28ca92f0af16cac8689873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7444149de37a0cce9b28ca92f0af16cac8689873",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7444149de37a0cce9b28ca92f0af16cac8689873"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "0f8dadfd1a75ba2b42c4e8c315b588c7ef0f9cbb",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85123be78df5a4e9447e70f9ee727416d45843d7/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85123be78df5a4e9447e70f9ee727416d45843d7/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=85123be78df5a4e9447e70f9ee727416d45843d7",
        "patch": "@@ -24,7 +24,7 @@ Before every major release:\n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n * Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n * Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n-  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example.\n+  [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n * Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders"
      },
      {
        "sha": "4276ad9eebfe50bc031ba4a968711752904998d6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85123be78df5a4e9447e70f9ee727416d45843d7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85123be78df5a4e9447e70f9ee727416d45843d7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=85123be78df5a4e9447e70f9ee727416d45843d7",
        "patch": "@@ -1526,12 +1526,13 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             \"2. \\\"blockhash\\\"  (string, optional) The hash of the block that ends the window.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n-            \"  \\\"txcount\\\": xxxxx,             (numeric) The total number of transactions in the chain up to that point.\\n\"\n-            \"  \\\"window_block_count\\\": xxxxx,  (numeric) Size of the window in number of blocks.\\n\"\n-            \"  \\\"window_tx_count\\\": xxxxx,     (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"window_interval\\\": xxxxx,     (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"txrate\\\": x.xx,               (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n+            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n+            \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n+            \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n+            \"  \\\"window_block_count\\\": xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n+            \"  \\\"window_tx_count\\\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"window_interval\\\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"txrate\\\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getchaintxstats\", \"\")\n@@ -1582,6 +1583,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n     ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n+    ret.push_back(Pair(\"window_final_block_hash\", pindex->GetBlockHash().GetHex()));\n     ret.push_back(Pair(\"window_block_count\", blockcount));\n     if (blockcount > 0) {\n         ret.push_back(Pair(\"window_tx_count\", nTxDiff));"
      },
      {
        "sha": "7cf2abe6f0e2c3ed5ae305fd5fd9cef6ba8ae278",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85123be78df5a4e9447e70f9ee727416d45843d7/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85123be78df5a4e9447e70f9ee727416d45843d7/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=85123be78df5a4e9447e70f9ee727416d45843d7",
        "patch": "@@ -100,28 +100,34 @@ def _test_getblockchaininfo(self):\n         assert_greater_than(res['size_on_disk'], 0)\n \n     def _test_getchaintxstats(self):\n+        self.log.info(\"Test getchaintxstats\")\n+\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n         # tx rate should be 1 per 10 minutes, or 1/600\n         # we have to round because of binary math\n         assert_equal(round(chaintxstats['txrate'] * 600, 10), Decimal(1))\n \n-        b1 = self.nodes[0].getblock(self.nodes[0].getblockhash(1))\n-        b200 = self.nodes[0].getblock(self.nodes[0].getblockhash(200))\n+        b1_hash = self.nodes[0].getblockhash(1)\n+        b1 = self.nodes[0].getblock(b1_hash)\n+        b200_hash = self.nodes[0].getblockhash(200)\n+        b200 = self.nodes[0].getblock(b200_hash)\n         time_diff = b200['mediantime'] - b1['mediantime']\n \n         chaintxstats = self.nodes[0].getchaintxstats()\n         assert_equal(chaintxstats['time'], b200['time'])\n         assert_equal(chaintxstats['txcount'], 201)\n+        assert_equal(chaintxstats['window_final_block_hash'], b200_hash)\n         assert_equal(chaintxstats['window_block_count'], 199)\n         assert_equal(chaintxstats['window_tx_count'], 199)\n         assert_equal(chaintxstats['window_interval'], time_diff)\n         assert_equal(round(chaintxstats['txrate'] * time_diff, 10), Decimal(199))\n \n-        chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1['hash'])\n+        chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1_hash)\n         assert_equal(chaintxstats['time'], b1['time'])\n         assert_equal(chaintxstats['txcount'], 2)\n+        assert_equal(chaintxstats['window_final_block_hash'], b1_hash)\n         assert_equal(chaintxstats['window_block_count'], 0)\n         assert('window_tx_count' not in chaintxstats)\n         assert('window_interval' not in chaintxstats)\n@@ -173,8 +179,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_rpc_error(-5, \"Block not found\",\n-                              node.getblockheader, \"nonsense\")\n+        assert_raises_rpc_error(-5, \"Block not found\", node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()\n         secondbesthash = node.getblockhash(199)"
      }
    ]
  },
  {
    "sha": "c887f87d5960d85299e24f533e22112dcb062e74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODg3Zjg3ZDU5NjBkODUyOTllMjRmNTMzZTIyMTEyZGNiMDYyZTc0",
    "commit": {
      "author": {
        "name": "Clem Taylor",
        "email": "clem@ossifrage.com",
        "date": "2018-02-03T09:08:04Z"
      },
      "committer": {
        "name": "Clem Taylor",
        "email": "clem@ossifrage.com",
        "date": "2018-02-03T09:08:04Z"
      },
      "message": "Extend #11583 to include the most common message generated by non-contributing peers (port scanners?)\n37% of the log default log entries for a node that has been up for ~24hrs was \"version handshake timeout...\"",
      "tree": {
        "sha": "e4894a087362c440bc8f62068da327744270e0f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4894a087362c440bc8f62068da327744270e0f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c887f87d5960d85299e24f533e22112dcb062e74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c887f87d5960d85299e24f533e22112dcb062e74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c887f87d5960d85299e24f533e22112dcb062e74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c887f87d5960d85299e24f533e22112dcb062e74/comments",
    "author": {
      "login": "clemtaylor",
      "id": 1316864,
      "node_id": "MDQ6VXNlcjEzMTY4NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316864?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clemtaylor",
      "html_url": "https://github.com/clemtaylor",
      "followers_url": "https://api.github.com/users/clemtaylor/followers",
      "following_url": "https://api.github.com/users/clemtaylor/following{/other_user}",
      "gists_url": "https://api.github.com/users/clemtaylor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clemtaylor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clemtaylor/subscriptions",
      "organizations_url": "https://api.github.com/users/clemtaylor/orgs",
      "repos_url": "https://api.github.com/users/clemtaylor/repos",
      "events_url": "https://api.github.com/users/clemtaylor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clemtaylor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "clemtaylor",
      "id": 1316864,
      "node_id": "MDQ6VXNlcjEzMTY4NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1316864?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clemtaylor",
      "html_url": "https://github.com/clemtaylor",
      "followers_url": "https://api.github.com/users/clemtaylor/followers",
      "following_url": "https://api.github.com/users/clemtaylor/following{/other_user}",
      "gists_url": "https://api.github.com/users/clemtaylor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clemtaylor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clemtaylor/subscriptions",
      "organizations_url": "https://api.github.com/users/clemtaylor/orgs",
      "repos_url": "https://api.github.com/users/clemtaylor/repos",
      "events_url": "https://api.github.com/users/clemtaylor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clemtaylor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85123be78df5a4e9447e70f9ee727416d45843d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85123be78df5a4e9447e70f9ee727416d45843d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85123be78df5a4e9447e70f9ee727416d45843d7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b5d0b7de957f34ddaa7f7045d7928a975e6a8988",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c887f87d5960d85299e24f533e22112dcb062e74/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c887f87d5960d85299e24f533e22112dcb062e74/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c887f87d5960d85299e24f533e22112dcb062e74",
        "patch": "@@ -1431,7 +1431,7 @@ void CConnman::ThreadSocketHandler()\n                 }\n                 else if (!pnode->fSuccessfullyConnected)\n                 {\n-                    LogPrintf(\"version handshake timeout from %d\\n\", pnode->GetId());\n+                    LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n                     pnode->fDisconnect = true;\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzI1MjhlNzMzZjI3MTFiMzRkYmM0MWZiYjJiYjBmMTUzYmY3ZTlh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-04T19:26:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-04T19:26:27Z"
      },
      "message": "Merge #12331: Docs: Properly alphabetize output of CLI --help option.\n\nd3e467520f Properly alphabetize output of CLI --help option. (murrayn)\n\nPull request description:\n\n  The --help output of bitcoind, bitcoin-cli, bitcoin-tx, qt/bitcoin-qt, et al. is only about 90% alphabetized by option, which is kind of sloppy and occasionally misleading. This change (mostly) organizes the output alphabetically.\n\nTree-SHA512: 3029900dbe99f03397c1cbdb5e4ac09a13bc99bafe73c6855097206e4cdd9ad70d0b5cedb5e1e520005c3e9ef1c4cd32bb9d8c98ce6918d8434fec8bf06e56c8",
      "tree": {
        "sha": "392f733ef539ee357a00846a178a5447584eabbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/392f733ef539ee357a00846a178a5447584eabbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJad15jAAoJENLqSFDnUoslXUMQALQQjMaKd2etQcBIUmw2k0+3\njxhya8dq3bTV+8AkNvDzfNswIqJCEa/h1qlrfciOvtqjQUd8rCeGWGGSSLSvUb+f\nVBDafTOtgY75C63xgp/QKlgqVtyWQtFV0YHXHbWYaCJghlxZ/pTpJXlRlmPlrBTe\nWAs9xeCm+Nwz59q+NlgsNtCB0orvD6snwnwOkVgnZqkkxU28/iapmh1Lu9uJc97C\nDg5dK6o356L12KPlkGySWt5sGIhpfxzL6sL8qblriSL/XdZUcYCdX90BMvmtXE7K\nmBlpFeQxJ49HlYsLZuDnOMREf8s5WFv7l8jc6Q9RQ+OuRA/+/QmWSImWDlHIgWnm\naPHPAj48PfcjjwFGHTqJ6wkRczlnD6UIRtZZzswouVP70VNtfbRdVfW5t8T0xN8z\n/srhMoIXL7EKV9NBY6lgKf99srjeSWWp9ThYeO12ULVzN4c7K1m1mzsEJRdxisNB\nqTSuMjYGfzEibchaPbxuIFDxvYGXxSptQtSciWyUI/tg3q8OvsBlpz/iN3dh7ec+\nUm3ure9/MZOuYXOsxNvY5ax1PY68SagJ1AHHqg1jVyP2FSRBhHjmuxA/BQzmE+cA\nyvELVz5LhXSAhae2z1oyQkhk5R7EQdUmatJc+65j62JlietUD6+T2fCyMtrqq3Lg\nb1BMDsfpIvYZrzbdHfjy\n=A3CO\n-----END PGP SIGNATURE-----",
        "payload": "tree 392f733ef539ee357a00846a178a5447584eabbe\nparent 85123be78df5a4e9447e70f9ee727416d45843d7\nparent d3e467520fef3d9da1f3f2e8e79dcde34bec444f\nauthor MarcoFalke <falke.marco@gmail.com> 1517772377 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517772387 -0500\n\nMerge #12331: Docs: Properly alphabetize output of CLI --help option.\n\nd3e467520f Properly alphabetize output of CLI --help option. (murrayn)\n\nPull request description:\n\n  The --help output of bitcoind, bitcoin-cli, bitcoin-tx, qt/bitcoin-qt, et al. is only about 90% alphabetized by option, which is kind of sloppy and occasionally misleading. This change (mostly) organizes the output alphabetically.\n\nTree-SHA512: 3029900dbe99f03397c1cbdb5e4ac09a13bc99bafe73c6855097206e4cdd9ad70d0b5cedb5e1e520005c3e9ef1c4cd32bb9d8c98ce6918d8434fec8bf06e56c8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85123be78df5a4e9447e70f9ee727416d45843d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85123be78df5a4e9447e70f9ee727416d45843d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85123be78df5a4e9447e70f9ee727416d45843d7"
      },
      {
        "sha": "d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3e467520fef3d9da1f3f2e8e79dcde34bec444f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3e467520fef3d9da1f3f2e8e79dcde34bec444f"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 35,
      "deletions": 35
    },
    "files": [
      {
        "sha": "1214b548cf089d8f279e8f801e75dfa0314a8df5",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "patch": "@@ -40,15 +40,15 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n+    strUsage += HelpMessageOpt(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")));\n-    strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"));\n+    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory, required if bitcoind/-Qt runs with multiple wallets)\"));\n+    strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"));\n+    strUsage += HelpMessageOpt(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")));\n \n     return strUsage;\n }"
      },
      {
        "sha": "a9f7264f688a3de23f06ae49b2ed926a357b74a2",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "patch": "@@ -77,18 +77,18 @@ static int AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", _(\"Add input to TX\"));\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n-        strUsage += HelpMessageOpt(\"replaceable(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", _(\"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS\") + \". \" +\n+            _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n+            _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n         strUsage += HelpMessageOpt(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", _(\"Add pay-to-pubkey output to TX\") + \". \" +\n             _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output\") + \". \" +\n             _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n-        strUsage += HelpMessageOpt(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"));\n         strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT[:FLAGS]\", _(\"Add raw script output to TX\") + \". \" +\n             _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n             _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n-        strUsage += HelpMessageOpt(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", _(\"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS\") + \". \" +\n-            _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n-            _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"));\n+        strUsage += HelpMessageOpt(\"replaceable(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"));\n         strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n             _(\"This command requires JSON registers:\") +\n             _(\"prevtxs=JSON object\") + \", \" +"
      },
      {
        "sha": "89dd8549b9504dde5a16f4e3f219c00c4131e382",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "patch": "@@ -17,11 +17,11 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n     }\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n }\n \n /**"
      },
      {
        "sha": "5e81e05f495db9425b1dd8c98390d121fac9b2b1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "patch": "@@ -331,10 +331,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n+    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -347,28 +348,27 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n     }\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n+    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n-    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n+    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     if (showDebug) {\n         strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n     }\n-    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n-    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n+    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n     strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n+    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n@@ -391,10 +391,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT));\n+    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n@@ -412,7 +413,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n \n #ifdef ENABLE_WALLET\n     strUsage += GetWalletHelpString(showDebug);\n@@ -427,7 +427,6 @@ std::string HelpMessage(HelpMessageMode mode)\n #endif\n \n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n-    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n@@ -464,12 +463,13 @@ std::string HelpMessage(HelpMessageMode mode)\n     }\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n-    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n     }\n+    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n+    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n \n     AppendParamsHelpMessages(strUsage, showDebug);\n \n@@ -485,32 +485,32 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n-    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n     strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n+    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n+    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n-    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n     strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n+    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n+    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n     strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie (default: data dir)\"));\n-    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n-    if (showDebug) {\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    if (showDebug)\n         strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n-        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    }\n+    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "65e7775f2b4e2dce73a050b1ca6365cf7a729b0b",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "patch": "@@ -86,9 +86,9 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(tr(\"Choose data directory on startup (default: %u)\").toStdString(), DEFAULT_CHOOSE_DATADIR));\n         strUsage += HelpMessageOpt(\"-lang=<lang>\", tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\").toStdString());\n         strUsage += HelpMessageOpt(\"-min\", tr(\"Start minimized\").toStdString());\n+        strUsage += HelpMessageOpt(\"-resetguisettings\", tr(\"Reset all settings changed in the GUI\").toStdString());\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", tr(\"Set SSL root certificates for payment request (default: -system-)\").toStdString());\n         strUsage += HelpMessageOpt(\"-splash\", strprintf(tr(\"Show splash screen on startup (default: %u)\").toStdString(), DEFAULT_SPLASHSCREEN));\n-        strUsage += HelpMessageOpt(\"-resetguisettings\", tr(\"Reset all settings changed in the GUI\").toStdString());\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM));\n         }"
      },
      {
        "sha": "74036f4f0f389dad1dca9e0567d9531a38b9c2f0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "patch": "@@ -19,12 +19,12 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(OUTPUT_TYPE_DEFAULT)));\n     strUsage += HelpMessageOpt(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\");\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n     strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)));\n+    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n+                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n@@ -33,12 +33,12 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n                                \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n "
      }
    ]
  },
  {
    "sha": "a25cb0f313315bd987834aa5f500b5682a9c3cd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjVjYjBmMzEzMzE1YmQ5ODc4MzRhYTVmNTAwYjU2ODJhOWMzY2Q1",
    "commit": {
      "author": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-05T10:25:28Z"
      },
      "committer": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-05T10:25:28Z"
      },
      "message": "Use ptrdiff_t type to more precisely indicate usage and avoid compiler warnings.",
      "tree": {
        "sha": "579e14e2f6820e60648a2240b664bbee9b1d8705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/579e14e2f6820e60648a2240b664bbee9b1d8705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a25cb0f313315bd987834aa5f500b5682a9c3cd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25cb0f313315bd987834aa5f500b5682a9c3cd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a25cb0f313315bd987834aa5f500b5682a9c3cd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25cb0f313315bd987834aa5f500b5682a9c3cd5/comments",
    "author": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ffed989be12cae5c081d19e711fec684c7e1cfd1",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25cb0f313315bd987834aa5f500b5682a9c3cd5/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25cb0f313315bd987834aa5f500b5682a9c3cd5/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a25cb0f313315bd987834aa5f500b5682a9c3cd5",
        "patch": "@@ -44,15 +44,15 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     if (end - privkey < 1 || !(*privkey & 0x80u)) {\n         return 0;\n     }\n-    size_t lenb = *privkey & ~0x80u; privkey++;\n+    ptrdiff_t lenb = *privkey & ~0x80u; privkey++;\n     if (lenb < 1 || lenb > 2) {\n         return 0;\n     }\n     if (end - privkey < lenb) {\n         return 0;\n     }\n     /* sequence length */\n-    size_t len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n+    ptrdiff_t len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n     privkey += lenb;\n     if (end - privkey < len) {\n         return 0;\n@@ -66,7 +66,7 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     if (end - privkey < 2 || privkey[0] != 0x04u) {\n         return 0;\n     }\n-    size_t oslen = privkey[1];\n+    ptrdiff_t oslen = privkey[1];\n     privkey += 2;\n     if (oslen > 32 || end - privkey < oslen) {\n         return 0;"
      }
    ]
  },
  {
    "sha": "c6f09c2713333bf335e83bb303e2feec10136751",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmYwOWMyNzEzMzMzYmYzMzVlODNiYjMwM2UyZmVlYzEwMTM2NzUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T15:09:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-05T20:17:31Z"
      },
      "message": "[rpc] remove deprecated estimatefee RPC",
      "tree": {
        "sha": "2187caea2bd1dd987717193fe03dd22422055d95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2187caea2bd1dd987717193fe03dd22422055d95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6f09c2713333bf335e83bb303e2feec10136751",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6f09c2713333bf335e83bb303e2feec10136751",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6f09c2713333bf335e83bb303e2feec10136751",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6f09c2713333bf335e83bb303e2feec10136751/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8e437a02f2d3d9c7cece4ec89543c7b803ea20f"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 5,
      "deletions": 41
    },
    "files": [
      {
        "sha": "99c1242d8ad503e8021d45dd6d0acfa7bce95350",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=c6f09c2713333bf335e83bb303e2feec10136751",
        "patch": "@@ -114,7 +114,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n-    { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },"
      },
      {
        "sha": "6c36c0601716549241fe7ebb224ee9cb00ea1f6e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 38,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6f09c2713333bf335e83bb303e2feec10136751/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c6f09c2713333bf335e83bb303e2feec10136751",
        "patch": "@@ -772,43 +772,8 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n UniValue estimatefee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"estimatefee nblocks\\n\"\n-            \"\\nDEPRECATED. Please use estimatesmartfee for more intelligent estimates.\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks. Uses virtual transaction size of transaction\\n\"\n-            \"as defined in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, required)\\n\"\n-            \"\\nResult:\\n\"\n-            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n-            \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate.\\n\"\n-            \"-1 is always returned for nblocks == 1 as it is impossible to calculate\\n\"\n-            \"a fee that is high enough to get reliably included in the next block.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatefee\", \"6\")\n-            );\n-\n-    if (!IsDeprecatedRPCEnabled(\"estimatefee\")) {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee is deprecated and will be fully removed in v0.17. \"\n-            \"To use estimatefee in v0.16, restart bitcoind with -deprecatedrpc=estimatefee.\\n\"\n-            \"Projects should transition to using estimatesmartfee before upgrading to v0.17\");\n-    }\n-\n-    RPCTypeCheck(request.params, {UniValue::VNUM});\n-\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1)\n-        nBlocks = 1;\n-\n-    CFeeRate feeRate = ::feeEstimator.estimateFee(nBlocks);\n-    if (feeRate == CFeeRate(0))\n-        return -1.0;\n-\n-    return ValueFromAmount(feeRate.GetFeePerK());\n+    throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n+        \"Clients should use estimatesmartfee.\");\n }\n \n UniValue estimatesmartfee(const JSONRPCRequest& request)\n@@ -986,7 +951,7 @@ static const CRPCCommand commands[] =\n \n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n \n-    { \"util\",               \"estimatefee\",            &estimatefee,            {\"nblocks\"} },\n+    { \"hidden\",             \"estimatefee\",            &estimatefee,            {} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },"
      },
      {
        "sha": "bb0106b5432dd8bc7501a3d254ec2c75a8cbac2d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6f09c2713333bf335e83bb303e2feec10136751/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6f09c2713333bf335e83bb303e2feec10136751/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c6f09c2713333bf335e83bb303e2feec10136751",
        "patch": "@@ -3257,8 +3257,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n             \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n             \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n-            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+            \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n             \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n             \"returned by getnetworkinfo) to enter the node's mempool.\\n\""
      }
    ]
  },
  {
    "sha": "d066a1c069e2def43f758a3d24c972f7625d6240",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDY2YTFjMDY5ZTJkZWY0M2Y3NThhM2QyNGM5NzJmNzYyNWQ2MjQw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T17:44:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-05T20:17:35Z"
      },
      "message": "[rpc] Remove deprecated getmininginfo RPC option",
      "tree": {
        "sha": "65be459d933dd91f5334a5657b39ab9a93e010a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65be459d933dd91f5334a5657b39ab9a93e010a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d066a1c069e2def43f758a3d24c972f7625d6240",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d066a1c069e2def43f758a3d24c972f7625d6240",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d066a1c069e2def43f758a3d24c972f7625d6240",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d066a1c069e2def43f758a3d24c972f7625d6240/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6f09c2713333bf335e83bb303e2feec10136751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6f09c2713333bf335e83bb303e2feec10136751",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6f09c2713333bf335e83bb303e2feec10136751"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "69d0d12e864d194c11908c6a07c63327fa1bcc40",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d066a1c069e2def43f758a3d24c972f7625d6240/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d066a1c069e2def43f758a3d24c972f7625d6240/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=d066a1c069e2def43f758a3d24c972f7625d6240",
        "patch": "@@ -201,7 +201,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmininginfo\", \"\")\n@@ -219,11 +218,7 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    if (IsDeprecatedRPCEnabled(\"getmininginfo\")) {\n-        obj.push_back(Pair(\"errors\",       GetWarnings(\"statusbar\")));\n-    } else {\n-        obj.push_back(Pair(\"warnings\",     GetWarnings(\"statusbar\")));\n-    }\n+    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTMwZTY3ZDIwZjc2YmJjZDlhN2Q0NDVmNjE2ZjAwNTMxNmUwYTFh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-05T21:16:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-05T21:17:00Z"
      },
      "message": "Merge #12330: Reduce scope of cs_main and cs_wallet locks in listtransactions\n\nc409b1adac [rpc] Reduce scope of cs_main and cs_wallet locks in listtransactions (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Trivial change, no behaviour change.\n\n  Benchmark done as follow:\n   - run with `-regtest`\n   - wallet with 5000 transactions\n   - measured the time spent with the lock and the total time\n   - times are an average of 100 `listtransactions --count=...` calls\n\n  | `--count` | lock (ms) | total (ms) | saving |\n  |--:|--:|--:|--:|\n  | 10 | 0.2230 | 0.2510 | 11% |\n  | 100 | 2.5150 | 2.8690 | 12% |\n  | 1000 | 20.0320 | 23.3490 | 14% |\n  | 10000 | 105.2070 | 125.5310 | 16% |\n\nTree-SHA512: ebedfeeb4c8ad75c89128e53cae976a82967dbb5ffd129da0f7204ccf9c3c15070b3d509f3767bebd745512e410200cc546147c836e82409f95fc9b8d14fc3ed",
      "tree": {
        "sha": "b3be886f15812b3a31b93a1547d8ace323964d59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3be886f15812b3a31b93a1547d8ace323964d59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaeMnMAAoJENLqSFDnUoslkrkQALdwUMvsO1tDo2NE0mLExskE\nXQt5bS3eXWgHsYu/gHeG6QCl1aCtmSoQlTRQJfkPH2hzkn3GBAxpCfQIII+vl2lO\npmrez/mtc1k2QZUmyBG00NzoHrNxI0fG0r3+mqQ40U7fVI+qIQcaQbX6hU8t/1Ob\nuFbax3YiJ+8EBVXM7gx4QZH1Rv/OL5ms36aCMX1lFSzB0htdg4XedHCiC+kYW+sC\nuiI5I+Hbwdk88LYrPPzospCt9Fgiuv1gdrJmCWoAK0/RZX1YCdZ8FxcJ8pyMUPuC\nMsCoWzI0HEJO62AGL/qnlVeiTr8V4oikDQeZea6gUHHOwWLfg8RFJJJEtuPfSXIf\nPSvfTM5Ycd4UZUdzFRptSWVVaG104WR1a6lXbqiebOSItRYWFYIARC/0OG+5Ty1B\nLux/Cp+2gzfcPgMimb5fT4xpH9aBhC5DY6r84yvF4ho5SOcTVnkMWl3iI53VaPhX\nJRZ4k+BoM4odCv001NyjRWtX/tgVqqkN3dL5pWchmdfqm40NEk+vaTt6f7gENfyq\nc0Yz69mQ4QxWnfkYO06b4kM/EolAJTvOI+1l84AFvxsIRuPlP4kZcDd1XxgGdZeH\neUrAJaR8HlgVhzq5ubNrlEeB2bBmc/uyksgiDG4/r/4Jarwc8lTvatT+Zja+d3tB\nvQ1O1UuHLoHUbRwLtz+4\n=EYxC\n-----END PGP SIGNATURE-----",
        "payload": "tree b3be886f15812b3a31b93a1547d8ace323964d59\nparent d32528e733f2711b34dbc41fbb2bb0f153bf7e9a\nparent c409b1adac59329b78b8c48f131f8ca032988412\nauthor MarcoFalke <falke.marco@gmail.com> 1517865413 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517865420 -0500\n\nMerge #12330: Reduce scope of cs_main and cs_wallet locks in listtransactions\n\nc409b1adac [rpc] Reduce scope of cs_main and cs_wallet locks in listtransactions (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Trivial change, no behaviour change.\n\n  Benchmark done as follow:\n   - run with `-regtest`\n   - wallet with 5000 transactions\n   - measured the time spent with the lock and the total time\n   - times are an average of 100 `listtransactions --count=...` calls\n\n  | `--count` | lock (ms) | total (ms) | saving |\n  |--:|--:|--:|--:|\n  | 10 | 0.2230 | 0.2510 | 11% |\n  | 100 | 2.5150 | 2.8690 | 12% |\n  | 1000 | 20.0320 | 23.3490 | 14% |\n  | 10000 | 105.2070 | 125.5310 | 16% |\n\nTree-SHA512: ebedfeeb4c8ad75c89128e53cae976a82967dbb5ffd129da0f7204ccf9c3c15070b3d509f3767bebd745512e410200cc546147c836e82409f95fc9b8d14fc3ed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a30e67d20f76bbcd9a7d445f616f005316e0a1a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a"
      },
      {
        "sha": "c409b1adac59329b78b8c48f131f8ca032988412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c409b1adac59329b78b8c48f131f8ca032988412",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c409b1adac59329b78b8c48f131f8ca032988412"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 16,
      "deletions": 13
    },
    "files": [
      {
        "sha": "33790d3490313b74a79d5182e6e9b84e4f388e94",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a30e67d20f76bbcd9a7d445f616f005316e0a1a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a30e67d20f76bbcd9a7d445f616f005316e0a1a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
        "patch": "@@ -1794,8 +1794,6 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n     std::string strAccount = \"*\";\n     if (!request.params[0].isNull())\n         strAccount = request.params[0].get_str();\n@@ -1817,20 +1815,25 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n-\n-    // iterate backwards until we have nCount items to return:\n-    for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n-        CWalletTx *const pwtx = (*it).second.first;\n-        if (pwtx != nullptr)\n-            ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n-        CAccountingEntry *const pacentry = (*it).second.second;\n-        if (pacentry != nullptr)\n-            AcentryToJSON(*pacentry, strAccount, ret);\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+\n+        const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n \n-        if ((int)ret.size() >= (nCount+nFrom)) break;\n+        // iterate backwards until we have nCount items to return:\n+        for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+        {\n+            CWalletTx *const pwtx = (*it).second.first;\n+            if (pwtx != nullptr)\n+                ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n+            CAccountingEntry *const pacentry = (*it).second.second;\n+            if (pacentry != nullptr)\n+                AcentryToJSON(*pacentry, strAccount, ret);\n+\n+            if ((int)ret.size() >= (nCount+nFrom)) break;\n+        }\n     }\n+\n     // ret is newest to oldest\n \n     if (nFrom > (int)ret.size())"
      }
    ]
  },
  {
    "sha": "a1e13055c2c57913d8d57ca0978cef2fec1e6148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWUxMzA1NWMyYzU3OTEzZDhkNTdjYTA5NzhjZWYyZmVjMWU2MTQ4",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-02-05T22:46:06Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-02-05T22:48:47Z"
      },
      "message": "Clarify help messages for path args to mention datadir prefix\n\nChange `-conf`'s and others' help messages to indicate that relative path\nvalues will be prefixed by the datadir path. This behavior is confusing when\nattempting to specify a configuration file in the current directory with\n`-conf=bitcoin.conf`, but loading the `bitcoin.conf` file in ~/.bitcoin\ndatadir.",
      "tree": {
        "sha": "7d51432d4768b3b6ce308c2b6ca382b422c6834b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d51432d4768b3b6ce308c2b6ca382b422c6834b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1e13055c2c57913d8d57ca0978cef2fec1e6148",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1e13055c2c57913d8d57ca0978cef2fec1e6148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1e13055c2c57913d8d57ca0978cef2fec1e6148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1e13055c2c57913d8d57ca0978cef2fec1e6148/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a30e67d20f76bbcd9a7d445f616f005316e0a1a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8fc708be6b91acacf15e12b9afa7d1b8d50f9f4d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1e13055c2c57913d8d57ca0978cef2fec1e6148/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1e13055c2c57913d8d57ca0978cef2fec1e6148/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a1e13055c2c57913d8d57ca0978cef2fec1e6148",
        "patch": "@@ -35,7 +35,7 @@ std::string HelpMessageCli()\n     std::string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);"
      },
      {
        "sha": "50643ff96ba8346d3c0a2f655268c8fbec8d58c9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1e13055c2c57913d8d57ca0978cef2fec1e6148/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1e13055c2c57913d8d57ca0978cef2fec1e6148/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a1e13055c2c57913d8d57ca0978cef2fec1e6148",
        "patch": "@@ -336,7 +336,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n #if HAVE_DECL_DAEMON\n@@ -348,7 +348,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n     }\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n+    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n@@ -362,7 +362,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n     strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n@@ -500,7 +500,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n-    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie (default: data dir)\"));\n+    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));"
      }
    ]
  },
  {
    "sha": "54604600c3de6cb18540c0911127173f68ad246c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDYwNDYwMGMzZGU2Y2IxODU0MGMwOTExMTI3MTczZjY4YWQyNDZj",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-01-31T03:33:49Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-02-05T22:48:59Z"
      },
      "message": "Add AbsPathForConfigVal to consolidate datadir prefixing for path args\n\nMost commandline/config args are interpreted as relative to datadir if\nnot passed absolute. Consolidate the logic for this normalization.",
      "tree": {
        "sha": "b778b12ff044d505836aac17225354451e950515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b778b12ff044d505836aac17225354451e950515"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54604600c3de6cb18540c0911127173f68ad246c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54604600c3de6cb18540c0911127173f68ad246c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54604600c3de6cb18540c0911127173f68ad246c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54604600c3de6cb18540c0911127173f68ad246c/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1e13055c2c57913d8d57ca0978cef2fec1e6148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1e13055c2c57913d8d57ca0978cef2fec1e6148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1e13055c2c57913d8d57ca0978cef2fec1e6148"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 20,
      "deletions": 16
    },
    "files": [
      {
        "sha": "cdd2e67a6998f459b594400e0500f9612a1b3e91",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54604600c3de6cb18540c0911127173f68ad246c/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54604600c3de6cb18540c0911127173f68ad246c/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=54604600c3de6cb18540c0911127173f68ad246c",
        "patch": "@@ -72,9 +72,7 @@ static fs::path GetAuthCookieFile(bool temp=false)\n     if (temp) {\n         arg += \".tmp\";\n     }\n-    fs::path path(arg);\n-    if (!path.is_complete()) path = GetDataDir() / path;\n-    return path;\n+    return AbsPathForConfigVal(fs::path(arg));\n }\n \n bool GenerateAuthCookie(std::string *cookie_out)"
      },
      {
        "sha": "6738bbc6e4470aa5904b0cb61e9b273e470a858a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54604600c3de6cb18540c0911127173f68ad246c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54604600c3de6cb18540c0911127173f68ad246c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=54604600c3de6cb18540c0911127173f68ad246c",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <util.h>\n+#include <fs.h>\n \n #include <chainparamsbase.h>\n #include <random.h>\n@@ -188,11 +189,7 @@ static void DebugPrintInit()\n fs::path GetDebugLogPath()\n {\n     fs::path logfile(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n-    if (logfile.is_absolute()) {\n-        return logfile;\n-    } else {\n-        return GetDataDir() / logfile;\n-    }\n+    return AbsPathForConfigVal(logfile);\n }\n \n bool OpenDebugLog()\n@@ -624,11 +621,7 @@ void ClearDatadirCache()\n \n fs::path GetConfigFile(const std::string& confPath)\n {\n-    fs::path pathConfigFile(confPath);\n-    if (!pathConfigFile.is_complete())\n-        pathConfigFile = GetDataDir(false) / pathConfigFile;\n-\n-    return pathConfigFile;\n+    return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n void ArgsManager::ReadConfigFile(const std::string& confPath)\n@@ -663,9 +656,7 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n #ifndef WIN32\n fs::path GetPidFile()\n {\n-    fs::path pathPidFile(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n-    if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n-    return pathPidFile;\n+    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n void CreatePidFile(const fs::path &path, pid_t pid)\n@@ -936,3 +927,8 @@ int64_t GetStartupTime()\n {\n     return nStartupTime;\n }\n+\n+fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n+{\n+    return fs::absolute(path, GetDataDir(net_specific));\n+}"
      },
      {
        "sha": "05138a9bfed958f7850a07b5c52f1fd499d0ff73",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54604600c3de6cb18540c0911127173f68ad246c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54604600c3de6cb18540c0911127173f68ad246c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=54604600c3de6cb18540c0911127173f68ad246c",
        "patch": "@@ -191,6 +191,16 @@ bool OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n \n+/**\n+ * Most paths passed as configuration arguments are treated as relative to\n+ * the datadir if they are not absolute.\n+ *\n+ * @param path The path to be conditionally prefixed with datadir.\n+ * @param net_specific Forwarded to GetDataDir().\n+ * @return The normalized path.\n+ */\n+fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific = true);\n+\n inline bool IsSwitchChar(char c)\n {\n #ifdef WIN32"
      }
    ]
  },
  {
    "sha": "eaeaa2d0b4e8344044c9a566f76f2792c74ca445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWVhYTJkMGI0ZTgzNDQwNDRjOWE1NjZmNzZmMjc5MmM3NGNhNDQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T11:19:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T11:20:38Z"
      },
      "message": "Merge #12342: Extend #11583 to include \"version handshake timeout\" message\n\nc887f87 Extend #11583 to include the most common message generated by non-contributing peers (port scanners?) 37% of the log default log entries for a node that has been up for ~24hrs was \"version handshake timeout...\" (Clem Taylor)\n\nPull request description:\n\n  37% of the default log entries for a node that has been up for ~24hrs was \"version handshake timeout...\"\n\nTree-SHA512: dceeee5d55a9ff7570174aeb63faac9beda239087220522adefef7ed11e0eeffa008ca28726011247c8834c1a222d37817baf895635ab874a95ebc435959070e",
      "tree": {
        "sha": "b24cbe97c4ea7f3960e1ffef3617fa91e7127476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b24cbe97c4ea7f3960e1ffef3617fa91e7127476"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaeaa2d0b4e8344044c9a566f76f2792c74ca445",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaeY+HAAoJEB5K7WKYbNJdHMEIAIEiYJUCOsdNUONlbPlw9c3b\nWusPjhHDy+00FDrEePYbR9pkE/Op56Xw4nGgZz/SgMjn6GYgH4fh9jbTjIKywiax\nZyXRdhBznuQASQccZ7IznMapPGtwjL0u/RlRMP48CVsSTOZXaSzlS1p4Y4wCFcJV\n3TS4FRk0tuIqTvG/ZhqJj8CInddGNPPltI5RKwNAMGISmFlhY7xB2HIzg/BVKCm4\n0FmXAsNAaWQR4hVyqVwQHq5qbnw1MxtuT207lkyV+2BDmOTD058G/OascJakjLlB\niuBgSMbBHsV6yrUb0UosUxb3HlnWdj5FXlbK1x7+hmRv1ts8mP74pDtAERE/kTg=\n=xvDu\n-----END PGP SIGNATURE-----",
        "payload": "tree b24cbe97c4ea7f3960e1ffef3617fa91e7127476\nparent 2a30e67d20f76bbcd9a7d445f616f005316e0a1a\nparent c887f87d5960d85299e24f533e22112dcb062e74\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517915955 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517916038 +0100\n\nMerge #12342: Extend #11583 to include \"version handshake timeout\" message\n\nc887f87 Extend #11583 to include the most common message generated by non-contributing peers (port scanners?) 37% of the log default log entries for a node that has been up for ~24hrs was \"version handshake timeout...\" (Clem Taylor)\n\nPull request description:\n\n  37% of the default log entries for a node that has been up for ~24hrs was \"version handshake timeout...\"\n\nTree-SHA512: dceeee5d55a9ff7570174aeb63faac9beda239087220522adefef7ed11e0eeffa008ca28726011247c8834c1a222d37817baf895635ab874a95ebc435959070e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaeaa2d0b4e8344044c9a566f76f2792c74ca445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaeaa2d0b4e8344044c9a566f76f2792c74ca445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaeaa2d0b4e8344044c9a566f76f2792c74ca445/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a30e67d20f76bbcd9a7d445f616f005316e0a1a"
      },
      {
        "sha": "c887f87d5960d85299e24f533e22112dcb062e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c887f87d5960d85299e24f533e22112dcb062e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c887f87d5960d85299e24f533e22112dcb062e74"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b5d0b7de957f34ddaa7f7045d7928a975e6a8988",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaeaa2d0b4e8344044c9a566f76f2792c74ca445/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaeaa2d0b4e8344044c9a566f76f2792c74ca445/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=eaeaa2d0b4e8344044c9a566f76f2792c74ca445",
        "patch": "@@ -1431,7 +1431,7 @@ void CConnman::ThreadSocketHandler()\n                 }\n                 else if (!pnode->fSuccessfullyConnected)\n                 {\n-                    LogPrintf(\"version handshake timeout from %d\\n\", pnode->GetId());\n+                    LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n                     pnode->fDisconnect = true;\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTMyMTE0NjI2ZmNhMWY0ZDE0Y2I1M2ZjZDU0YjY1ZDJlNDhmZjVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T11:34:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T11:48:59Z"
      },
      "message": "Merge #12218: net: Move misbehaving logging to net logging category\n\nd3a185a net: Move misbehaving logging to net logging category (Wladimir J. van der Laan)\n\nPull request description:\n\n  This moves the error messages for misbehavior (when available) into the line that reports the misbehavior, as well as moves the logging to the `net` category.\n\n  This is a continuation of #11583 and avoids serious-looking errors due to misbehaving peers. As it is impossible to correlate the `peer=X` numbers to specific incoming connections now without enabling the `net` category, it doesn't really help to see these messages by default.\n\n  To do this, Misbehaving() gains an optional `message` argument.\n\n  E.g. change:\n\n      2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\n      2018-01-18 16:02:27 ERROR: non-continuous headers sequence\n\n  to\n\n      2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence\n\n  When there is a category for \"important\" net messages (see #12219 ), we should move it there.\n\nTree-SHA512: 51c97e9a649bf5409f2fd4625fa1243a036e9c9de6037bb064244207408c2e0eb025e3af80866df673cdc006b8f35dc4078d074033f0d4c6a73bbb03949a269f",
      "tree": {
        "sha": "7549e36a33217245aae54e03e3fb161ca9327c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7549e36a33217245aae54e03e3fb161ca9327c55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaeZYsAAoJEB5K7WKYbNJdi0YIAIQ+2l1/kjGCqPTdTy7LqotA\nNTDSOxwf2Rlwwi9xumaeX4XJ8cL7pm69ooYXUUFFdxUadZWHdvVJk50hIT7bWoDT\nsA0NeJ4y1j8ncImYHj26FIvsE+4I2ZUHUjCI46JMmNId2oIOhmfQmrmdXLEUCE3q\n16PpzACM7w/L12yJWYYnyLKWNN+uRZuea/BplHuXWmhGT6qN2VXBy6QQZblgXXG3\nX/aWhwKytZEmjm4gKrTTfRCca0h1ZelYk+BTMraNnSsdukZvEDUe/GnhEEYqe7vx\ndB/ZEyyTNI6/xMYCPQp8LLQxZ+/6LXoxzxmj6lbeuo3re8uz8OhlwKXPCMI7e1A=\n=JpEK\n-----END PGP SIGNATURE-----",
        "payload": "tree 7549e36a33217245aae54e03e3fb161ca9327c55\nparent eaeaa2d0b4e8344044c9a566f76f2792c74ca445\nparent d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517916857 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517917739 +0100\n\nMerge #12218: net: Move misbehaving logging to net logging category\n\nd3a185a net: Move misbehaving logging to net logging category (Wladimir J. van der Laan)\n\nPull request description:\n\n  This moves the error messages for misbehavior (when available) into the line that reports the misbehavior, as well as moves the logging to the `net` category.\n\n  This is a continuation of #11583 and avoids serious-looking errors due to misbehaving peers. As it is impossible to correlate the `peer=X` numbers to specific incoming connections now without enabling the `net` category, it doesn't really help to see these messages by default.\n\n  To do this, Misbehaving() gains an optional `message` argument.\n\n  E.g. change:\n\n      2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED\n      2018-01-18 16:02:27 ERROR: non-continuous headers sequence\n\n  to\n\n      2018-01-18 16:02:27 Misbehaving: x.x.x.x:62174 peer=164603 (80 -> 100) BAN THRESHOLD EXCEEDED: non-continuous headers sequence\n\n  When there is a category for \"important\" net messages (see #12219 ), we should move it there.\n\nTree-SHA512: 51c97e9a649bf5409f2fd4625fa1243a036e9c9de6037bb064244207408c2e0eb025e3af80866df673cdc006b8f35dc4078d074033f0d4c6a73bbb03949a269f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eaeaa2d0b4e8344044c9a566f76f2792c74ca445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaeaa2d0b4e8344044c9a566f76f2792c74ca445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaeaa2d0b4e8344044c9a566f76f2792c74ca445"
      },
      {
        "sha": "d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3a185a33b7bc09e4ca998f42f1f9aea8177ef8a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "edebccfb31f2c8b2177171f1b613573588c8d2ab",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
        "patch": "@@ -750,7 +750,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n }\n \n // Requires cs_main.\n-void Misbehaving(NodeId pnode, int howmuch)\n+void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n {\n     if (howmuch == 0)\n         return;\n@@ -761,12 +761,13 @@ void Misbehaving(NodeId pnode, int howmuch)\n \n     state->nMisbehavior += howmuch;\n     int banscore = gArgs.GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n+    std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrintf(\"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n         state->fShouldBan = true;\n     } else\n-        LogPrintf(\"%s: %s peer=%d (%d -> %d)\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n }\n \n \n@@ -1260,8 +1261,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->GetId());\n+            Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom->GetId()));\n             return;\n         }\n         resp.txn[i] = block.vtx[req.indexes[i]];\n@@ -1318,8 +1318,8 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         uint256 hashLastBlock;\n         for (const CBlockHeader& header : headers) {\n             if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n+                Misbehaving(pfrom->GetId(), 20, \"non-continuous headers sequence\");\n+                return false;\n             }\n             hashLastBlock = header.GetHash();\n         }\n@@ -1338,7 +1338,9 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         if (state.IsInvalid(nDoS)) {\n             LOCK(cs_main);\n             if (nDoS > 0) {\n-                Misbehaving(pfrom->GetId(), nDoS);\n+                Misbehaving(pfrom->GetId(), nDoS, \"invalid header received\");\n+            } else {\n+                LogPrint(BCLog::NET, \"peer=%d: invalid header received\\n\", pfrom->GetId());\n             }\n             if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {\n                 // Goal: don't allow outbound peers to use up our outbound\n@@ -1374,7 +1376,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                 // etc), and not just the duplicate-invalid case.\n                 pfrom->fDisconnect = true;\n             }\n-            return error(\"invalid header received\");\n+            return false;\n         }\n     }\n \n@@ -1783,8 +1785,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vAddr.size() > 1000)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message addr size() = %u\", vAddr.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message addr size() = %u\", vAddr.size()));\n+            return false;\n         }\n \n         // Store the new addresses\n@@ -1859,8 +1861,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message inv size() = %u\", vInv.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message inv size() = %u\", vInv.size()));\n+            return false;\n         }\n \n         bool fBlocksOnly = !fRelayTxes;\n@@ -1920,8 +1922,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (vInv.size() > MAX_INV_SZ)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"message getdata size() = %u\", vInv.size());\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"message getdata size() = %u\", vInv.size()));\n+            return false;\n         }\n \n         LogPrint(BCLog::NET, \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->GetId());\n@@ -2323,9 +2325,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 if (nDoS > 0) {\n-                    LogPrintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                     LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n+                    Misbehaving(pfrom->GetId(), nDoS, strprintf(\"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId()));\n                 } else {\n                     LogPrint(BCLog::NET, \"Peer %d sent us invalid header via cmpctblock\\n\", pfrom->GetId());\n                 }\n@@ -2411,8 +2412,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 ReadStatus status = partialBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status == READ_STATUS_INVALID) {\n                     MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case of whitelist\n-                    Misbehaving(pfrom->GetId(), 100);\n-                    LogPrintf(\"Peer %d sent us invalid compact block\\n\", pfrom->GetId());\n+                    Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block\\n\", pfrom->GetId()));\n                     return true;\n                 } else if (status == READ_STATUS_FAILED) {\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n@@ -2539,8 +2539,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadStatus status = partialBlock.FillBlock(*pblock, resp.txn);\n             if (status == READ_STATUS_INVALID) {\n                 MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n-                Misbehaving(pfrom->GetId(), 100);\n-                LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->GetId());\n+                Misbehaving(pfrom->GetId(), 100, strprintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->GetId()));\n                 return true;\n             } else if (status == READ_STATUS_FAILED) {\n                 // Might have collided, fall back to getdata now :(\n@@ -2602,8 +2601,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         unsigned int nCount = ReadCompactSize(vRecv);\n         if (nCount > MAX_HEADERS_RESULTS) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 20);\n-            return error(\"headers message size = %u\", nCount);\n+            Misbehaving(pfrom->GetId(), 20, strprintf(\"headers message size = %u\", nCount));\n+            return false;\n         }\n         headers.resize(nCount);\n         for (unsigned int n = 0; n < nCount; n++) {"
      },
      {
        "sha": "b534ef01c345269742343eafea477f9810c1810e",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
        "patch": "@@ -79,6 +79,6 @@ struct CNodeStateStats {\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch);\n+void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\");\n \n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "c3451483d28381dd86ed89bfd62f99c6ba979986",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzQ1MTQ4M2QyODM4MWRkODZlZDg5YmZkNjJmOTljNmJhOTc5OTg2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T11:53:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T11:53:56Z"
      },
      "message": "Merge #12322: Docs: Remove step making cloned repository world-writable for Windows build.\n\neeeb416 Remove suggestion to make cloned repository world-writable for Windows build. (murrayn)\n\nPull request description:\n\n  Current documentation for Windows build on Ubuntu suggests cloning the repository into /usr/src, as root, and making the tree world-writable(!). I can see no problem this solves, and it introduces obvious security issues.\n\nTree-SHA512: 05429a64319c046f5506f7d27c64c94f94cfe6d14ec5f01dccf843fc417e954fe96e1abc43126b9204a1178f101e4a8da9eece32b5de4b348c7c9358615c7e0f",
      "tree": {
        "sha": "0f76fd2656822d8e0b5c3bba272544e970e7324d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f76fd2656822d8e0b5c3bba272544e970e7324d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3451483d28381dd86ed89bfd62f99c6ba979986",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaeZdUAAoJEB5K7WKYbNJd/BAIAIempC028oW01c+8PFlGqYy/\nIDZ/YPS4NcVz+kIIAwvDYdU89Pn2Nopv8Vc5cr7Gmi8uarWmP1APuCMeg7GpC7vY\nYOP5oyEItdSEvDWi41+eB2qhxwl87AVNAHmjYVizadVUJo46/OHtIGZV889Z5Xwc\n7dt+reSPMmNWswuhwM8wVPmHkbQIR646G79q1axSCv0313sMDPpfuAS67bisBJxb\noiuZN/ye9mbLJKM0y9WnSciTcALxccMIWny3zYvcu1gDd7gnibumYdT0ZUOt4jLK\nU2JGfP6EL0p8PIz8TI+6KFDJ1E2CT6pd3Ec+hGCgM6Oj4hqzpvYV9X54LAo2HuU=\n=zvpV\n-----END PGP SIGNATURE-----",
        "payload": "tree 0f76fd2656822d8e0b5c3bba272544e970e7324d\nparent 9a32114626fca1f4d14cb53fcd54b65d2e48ff5b\nparent eeeb416d73789758bdfa6c86cd8791b0c2e3de6e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517918027 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517918036 +0100\n\nMerge #12322: Docs: Remove step making cloned repository world-writable for Windows build.\n\neeeb416 Remove suggestion to make cloned repository world-writable for Windows build. (murrayn)\n\nPull request description:\n\n  Current documentation for Windows build on Ubuntu suggests cloning the repository into /usr/src, as root, and making the tree world-writable(!). I can see no problem this solves, and it introduces obvious security issues.\n\nTree-SHA512: 05429a64319c046f5506f7d27c64c94f94cfe6d14ec5f01dccf843fc417e954fe96e1abc43126b9204a1178f101e4a8da9eece32b5de4b348c7c9358615c7e0f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3451483d28381dd86ed89bfd62f99c6ba979986",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3451483d28381dd86ed89bfd62f99c6ba979986",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3451483d28381dd86ed89bfd62f99c6ba979986/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a32114626fca1f4d14cb53fcd54b65d2e48ff5b"
      },
      {
        "sha": "eeeb416d73789758bdfa6c86cd8791b0c2e3de6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeb416d73789758bdfa6c86cd8791b0c2e3de6e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8d4afdc817253b1ec248a721ea171b65ab54f415",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -102,11 +102,9 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n-The next three steps are an example of how to acquire the source in an appropriate way.\n+Acquire the source in the usual way:\n \n-    cd /usr/src\n-    sudo git clone https://github.com/bitcoin/bitcoin.git\n-    sudo chmod -R a+rw bitcoin\n+    git clone https://github.com/bitcoin/bitcoin.git\n \n Once the source code is ready the build steps are below.\n \n@@ -132,11 +130,9 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n-The next three steps are an example of how to acquire the source in an appropriate way.\n+Acquire the source in the usual way:\n \n-    cd /usr/src\n-    sudo git clone https://github.com/bitcoin/bitcoin.git\n-    sudo chmod -R a+rw bitcoin\n+    git clone https://github.com/bitcoin/bitcoin.git\n \n Then build using:\n "
      }
    ]
  },
  {
    "sha": "8a6c62be636fb1bbdc4c5915c1d3bf969524b20a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTZjNjJiZTYzNmZiMWJiZGM0YzU5MTVjMWQzYmY5Njk1MjRiMjBh",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-02-06T13:57:32Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-02-06T13:57:32Z"
      },
      "message": "[tests] Update README after filename change",
      "tree": {
        "sha": "209d2ccfa71e63a42c4138d6ac250aeec4892d34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/209d2ccfa71e63a42c4138d6ac250aeec4892d34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3451483d28381dd86ed89bfd62f99c6ba979986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3451483d28381dd86ed89bfd62f99c6ba979986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3451483d28381dd86ed89bfd62f99c6ba979986"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b522c4469a7ff32d9fc2663bc22ed3740744291f",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=8a6c62be636fb1bbdc4c5915c1d3bf969524b20a",
        "patch": "@@ -33,13 +33,13 @@ The ZMQ functional test requires a python ZMQ library. To install it:\n Individual tests can be run by directly calling the test script, eg:\n \n ```\n-test/functional/replace-by-fee.py\n+test/functional/feature_rbf.py\n ```\n \n or can be run through the test_runner harness, eg:\n \n ```\n-test/functional/test_runner.py replace-by-fee.py\n+test/functional/test_runner.py feature_rbf.py\n ```\n \n You can run any combination (incl. duplicates) of tests by calling:"
      }
    ]
  },
  {
    "sha": "88971352f6106d87156188cc0e29077baa05b86d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODk3MTM1MmY2MTA2ZDg3MTU2MTg4Y2MwZTI5MDc3YmFhMDViODZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T14:48:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T14:54:29Z"
      },
      "message": "Merge #11909: contrib: Replace developer keys with list of pgp fingerprints\n\nfabb72b contrib: Remove xpired 522739F6 key (MarcoFalke)\nfaeab66 contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n\nPull request description:\n\n  Having to host a copy of the keys in this repo was a common source of discussion and distraction, caused by problems such as:\n\n  * Outdated keys. Unclear whether and when to replace by fresh copies.\n  * Unclear when to add a key of a new developer or Gitian builder.\n\n  The problems are solved by\n  * Having no keys but only the fingerprints\n  * Adding a rule of thumb, when to add a new key\n\n  <strike>Moving the keys to a different repo solves none of these issues, but since the keys are not bound to releases or git branches of Bitcoin Core, they should live somewhere else.\n\n  Obviously, all keys are hosted and distributed on key servers, but were added to the repo solely for convenience and redundancy.\n\n  Moving the mirror of those keys to a different repo makes it less distracting to update them -- let's say -- prior to every major release.\n\n  I updated our `doc/release-process.md` to reflect the new location.\n\n  DEPENDS_ON https://github.com/bitcoin-core/gitian.sigs/pull/621\n  </strike>\n\nTree-SHA512: c00795a07603190e26dc4526f6ce11e492fb048dc7ef54b38f859b77dcde25f58ec4449f5cf3f85a5e9c2dd2743bde53f7ff03c8eccf0d75d51784a6b164e47d",
      "tree": {
        "sha": "57fb5b1531a2b8a88a0db611755967c6c4be59c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57fb5b1531a2b8a88a0db611755967c6c4be59c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88971352f6106d87156188cc0e29077baa05b86d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaecGlAAoJEB5K7WKYbNJdPqAH/3kNDPucWEdUoPenQSG5xhXw\niks7bkE5wdiIrodJeZZNVirI3KMMWQbAbPTVSYFB4WEvp/hRIxRLym89FcRbQS3H\nUsjB00M6KH6mMY1USSZ76lcUbKxh54qZjQ57na6ukJw28GmtGP7DcFjxyAH2voLB\nxqFLTppFd1zdfpTdXLvcN+uaMDsH0p0e3a2d+0mIqPIV3yXoYVZobLI5f9EKnILv\nL1ZjzV5mvtg1AvNMfi46lWe8ggZ1uVorGshBiD0XiAreZ6kLNIg9Bd/4RcpCoY+a\nkcnRgPsry8D4FEZm9GivVCnD6MvBDUUXlA+vCGmKrqyIdaiyTCqNqCeAYSvUcos=\n=o7hE\n-----END PGP SIGNATURE-----",
        "payload": "tree 57fb5b1531a2b8a88a0db611755967c6c4be59c2\nparent c3451483d28381dd86ed89bfd62f99c6ba979986\nparent fabb72baa2fad62b6632dcb4be4f7a65135439cd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517928536 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517928869 +0100\n\nMerge #11909: contrib: Replace developer keys with list of pgp fingerprints\n\nfabb72b contrib: Remove xpired 522739F6 key (MarcoFalke)\nfaeab66 contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n\nPull request description:\n\n  Having to host a copy of the keys in this repo was a common source of discussion and distraction, caused by problems such as:\n\n  * Outdated keys. Unclear whether and when to replace by fresh copies.\n  * Unclear when to add a key of a new developer or Gitian builder.\n\n  The problems are solved by\n  * Having no keys but only the fingerprints\n  * Adding a rule of thumb, when to add a new key\n\n  <strike>Moving the keys to a different repo solves none of these issues, but since the keys are not bound to releases or git branches of Bitcoin Core, they should live somewhere else.\n\n  Obviously, all keys are hosted and distributed on key servers, but were added to the repo solely for convenience and redundancy.\n\n  Moving the mirror of those keys to a different repo makes it less distracting to update them -- let's say -- prior to every major release.\n\n  I updated our `doc/release-process.md` to reflect the new location.\n\n  DEPENDS_ON https://github.com/bitcoin-core/gitian.sigs/pull/621\n  </strike>\n\nTree-SHA512: c00795a07603190e26dc4526f6ce11e492fb048dc7ef54b38f859b77dcde25f58ec4449f5cf3f85a5e9c2dd2743bde53f7ff03c8eccf0d75d51784a6b164e47d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88971352f6106d87156188cc0e29077baa05b86d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88971352f6106d87156188cc0e29077baa05b86d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88971352f6106d87156188cc0e29077baa05b86d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3451483d28381dd86ed89bfd62f99c6ba979986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3451483d28381dd86ed89bfd62f99c6ba979986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "fabb72baa2fad62b6632dcb4be4f7a65135439cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabb72baa2fad62b6632dcb4be4f7a65135439cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabb72baa2fad62b6632dcb4be4f7a65135439cd"
      }
    ],
    "stats": {
      "total": 2921,
      "additions": 45,
      "deletions": 2876
    },
    "files": [
      {
        "sha": "a9339c8bdababb0880e97622004caddd9aea40c5",
        "filename": "contrib/gitian-keys/README.md",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88971352f6106d87156188cc0e29077baa05b86d/contrib/gitian-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88971352f6106d87156188cc0e29077baa05b86d/contrib/gitian-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/README.md?ref=88971352f6106d87156188cc0e29077baa05b86d",
        "patch": "@@ -1,16 +1,26 @@\n-PGP keys\n-========\n+## PGP keys of Gitian builders and Developers\n \n-This folder contains the public keys of developers and active contributors.\n+The keys.txt contains the public keys of Gitian builders and active developers.\n \n The keys are mainly used to sign git commits or the build results of Gitian\n builds.\n \n-You can import the keys into gpg as follows. Also, make sure to fetch the\n-latest version from the key server to see if any key was revoked in the\n-meantime.\n+The most recent version of each pgp key can be found on most pgp key servers.\n+\n+Fetch the latest version from the key server to see if any key was revoked in\n+the meantime.\n+To fetch the latest version of all pgp keys in your gpg homedir,\n \n ```sh\n-gpg --import ./*.pgp\n gpg --refresh-keys\n ```\n+\n+To fetch keys of Gitian builders and active developers, feed the list of\n+fingerprints of the primary keys into gpg:\n+\n+```sh\n+while read fingerprint keyholder_name; do gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys ${fingerprint}; done < ./keys.txt\n+```\n+\n+Add your key to the list if you provided Gitian signatures for two major or\n+minor releases of Bitcoin Core."
      },
      {
        "sha": "030fd5cf3cd389976b9d07e6e48bb8d3524442fe",
        "filename": "contrib/gitian-keys/achow101-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/achow101-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/achow101-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/achow101-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,52 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1\n-\n-mQINBFT4snkBEACx90Wf5XLo1Xv09p81eaOXc+8bbkSYzqx3ThDNUPRzjYpex9A9\n-8FxfBenAykD3EgYuBTco4cbn7Dw11ppyXUw0VjWaagnnAVGxt3SDeY3ADwPss6xg\n-78FZXxT06xSHZXq1X6pOqhwTAnx3VGx+tR/A2DCsX0vHE6IVThZqyUq2Ei2C0Chc\n-od8y6JZ1CGNzlRkEgL9A0Zp0If6Uq4tXFxnLL6PtiS1b9V5rNfCSC7l99kIkG5oy\n-+SPsGRwVqTE2kqtuzkt9qVn6v8KKoZr0BY4IO3KMfJJ4eidOkB+OZK9REEQguDvv\n-tJfkF2HcMYa1efvQObyvVIfS5gxs7+kcSJxgDVZI5YxRV1OOfI7+w3EW3G+bPBQF\n-gSBwEaLbD+udr9lDZ4NZc7vTeoZtYVNZ+EQtG+6I9GzxJwEgO5LIwZ3//vh/R4iy\n-z9W91r7TrlkHUuOGg1hXMCI9sRa65NJtP4BWD0xO07zDKj0JHzeyKwgxB/ixZF2V\n-kc8EzJSKzRfr+638BMXONcf6NW8n6qIlJT2U2qIwiixjM8AUujGKb8DEgU1vIAn9\n-7esOhceOtU/6iLuJrlK+TzMe97NoZCtt6ktmiAp8fu6l9uk3mr8JYLzIMtK+Asf4\n-np5YLizABwbt9gEretnGpHrdKMN88mPYwsLjjCh9wiM0bHZNL52JQRkt3QARAQAB\n-tDNBbmRyZXcgQ2hvdyAoT2ZmaWNpYWwgTmV3IEtleSkgPGFjaG93MTAxQGdtYWls\n-LmNvbT6JAjYEEwEKACAFAlT4snkCGwMFCwkIBwMFFQoJCAsEFgIBAAIeAQIXgAAK\n-CRAXVlcy4I5eQfyGD/9idtVjybuXl+LXS4ph4M738PrZfQeLDmnwhVjfZiEOLLs2\n-sAwGtL/CC0t9f7K7y+n5HtQoMX52jfVehnTDzeKCjRMs+5ssou+L9zadIAz68beU\n-7BZ0J1rR3n1kzwsFE3vx3IRno0VCTOgfL48AuuzMPxvEaLMxWQX8mL0PCV5/8Yxx\n-ftqg4kQ1JKMt5UTxE9/w0cBMphLTwV1Rx6lZILPJgOxYSQ0oOzQYSmucwzH1uOqH\n-wpgZ7SZIHfRWyi4TjQpU/5T2kMOlN/XdyWsj5+Eq+Y6zI6hq2se1vU3TOc8xN2S3\n-7YOza1onUj4if0rWtkJZ2yDnR4lIASUD+/VP2NoWtoy7rB0vIfzbojfwxAp8WuHT\n-sUTxXd52c3OB+673OlOA+GAg2FfFjR8REojsTbeip35/KmFMpafazVRn+E0c3MfP\n-/iS43UTlcxewRcDrx/gRplmgO0+CLgLstZOon7Dz0msypeSArhX2xEj4tJb/ccKd\n-CR/IQl8q/ULQsHX1LwRj0u9doAlkqgIQdKXou4+EmD1jKF92oJMZ+20AJCqfwYQY\n-9HlCB9SQeCRUtU/fHkAZLPApze6C7a1r0LVIuM6iolWyha5KJ++mj84fAagwy/ag\n-8TU8kHTLSGPYeg5G/TAbr1XU5kbbqfWfQFMK1xtdZd1BaGP2cDC2QGkr2ot1SLkC\n-DQRU+LJ5ARAArDftuFPE+ZhgJRuJK163fsD15aHPfv5s+h8kPFv0AuwVs+D75w3y\n-YGfaRtlwSvK+8EucKOoHI1AQYjTG0dtKJuwEGhQ2qsTWUKe05tEAWu0eN62MOZ/r\n-Awjxqotj4TeFksfyKedVAYSizD0Xj16fizeWFrfUBNND4OgUgD8KM79oRchtzKBE\n-HRBP27JksU8tQWc4YcEJUHV66Pji5OCiXxHXJ+JpqKSKeCrVvrvro+pwsY1I3ARA\n-F4UmLxCcb4GnNq+s76cb2K7XJtWJu5FHeHOsef5ped43pYs35UXI+EvOYNs39XI4\n-emMsI0KmuLME2LHO3CJNBirwRFxui27axZk/CSVE1lglnbb25n3QHvbs/31ASCCT\n-QKZ7+Gce89iow6yG4MkN5W4hLdkGAyNI74b6yAUfugSqPLNSj3YHvVFY3y1acge+\n-H7xDO/owRN1kbz+9VMJZxsxB/oZEyEVAE0szHxXbMBhqOME0Y3O6UBrXr7z6R8NG\n-S20RPet4kxCCTLZOvM/X5FtvimgR2u5qRPHs+zf2VPXIRsJsM3zq9EvmePryGM3r\n-1rEAvYagukuyt68lOWgKP/2wB0/NIFAs69b1QSJS3U4CQVIs2h84Ucvbh9gX9Y0B\n-LbV5mxvDDfC/4Nhf4yMfH/CwZDLOUsaRAjCv/lQuN9mnMz9aYnsPha0AEQEAAYkC\n-HwQYAQoACQUCVPiyeQIbDAAKCRAXVlcy4I5eQec+EACi14L8Vp7tw3tDm/Lrb9fM\n-LHfoOnZiDCGaXhiXqckbTSogp7hU82m1fIy4VwY7DWbs1iIq7QdDJMBuNn174Qd3\n-ZPxHeGwBbR04gEsHkbjXBAA5hMacLvmxYFiPlibz+AO4orUiYu/vlEXhXoFCjSlB\n-pw0kUG8W8yQ/RyE7ryLv5/bT4LkwUWF7/+gdDzLUy1VeaPDKmBupKVSbEACe4QRH\n-dUUqE3suKoJ/GylO2sGtFW8BM7+CffX+nvc8hJWzXdYW5InSh0omYJIypIgnQ1gM\n-MhUdu4gbtYwo44Tlax2mTSg8vSVboYO6pBZVX3IEUnjRHLOCZVZIBFXIFdRrHXO8\n-TTkzx9ZoDmZ/DH+Md1NDnS4QsvFbRO/EeDRQAI4cgGhCc4CTrrJSQv8jtl7x8OTx\n-fnDUbE/n8pLV93j9t1Gd07h0VJSmYj3AR7PiefHS7s2yxS9oOqRayGBqrJFzd2gS\n-+oXvUBC6pUvM68NgNVCKH7HmIM9tFbqgy8kofTsVDkq9TEJRO+X4hn7UDNJhTjVE\n-AVRUdku6CJR6wj3RPCbERSNB8uabuv1lgo41baeepLn+tJNO/4hilJ0zvEoryVnJ\n-ldZ73mHRRRtXoPRXq7OKuDn10AvtYX8y3/q5z6XhLUePFKM91PO8GF0J6bNWrQSq\n-Khvd4+XHE/ecjLOPvLweAg==\n-=+hz7\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "df06e19fa4b109286dbbb7596c86d31fe0f1052f",
        "filename": "contrib/gitian-keys/aschildbach-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/aschildbach-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/aschildbach-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/aschildbach-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "2389d4657fb7f5f225f5d76e08841fd6e21d4be9",
        "filename": "contrib/gitian-keys/bluematt-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/bluematt-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/bluematt-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/bluematt-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "f00dc729d57a2e7b7848324177c605dac9dc8e45",
        "filename": "contrib/gitian-keys/btcdrak-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/btcdrak-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/btcdrak-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/btcdrak-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "928a74b3155da22877d1b6ad32fa2a7cb745e0ba",
        "filename": "contrib/gitian-keys/cdecker-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/cdecker-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/cdecker-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/cdecker-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "71a42e514881bc6383531ea2c82c93998453245e",
        "filename": "contrib/gitian-keys/centaur1-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/centaur1-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/centaur1-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/centaur1-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,30 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.12 (GNU/Linux)\n-\n-mQENBFTjy20BCAC7q/tpPQ9tdEALpDqe8kpVAT5ysOJDLDeFEE1J5O8NuDFuibiN\n-XYkb2nAt4Vdr23in9z0LAiTSgr7znndnab/rOSn6pXbXQfLTHrSnAeClTHVQVPSq\n-m5kNg1vWvNxFtIpZ/fGsc6LLmIHxdgeLn+NOpvNx7RzF/N5ctX51vMxMUeDq3daZ\n-tLneJVRj5tXHRJcjW62cyiNFasYAZ3JC8wjwzr0SOndc7kygbEVCTWNkTAGd1Lax\n-KSJW6TjhBPK7j+RljS5nfx/Tf+OG4AoA7/53593YL7Shfx8rwWVIeF4nS6efFnuf\n-eIj+aS5haGyFvNgw8DE7QUCrPiUxeA8wuXu7ABEBAAG0H2NlbnRhdXIgPGNlbnRh\n-dXJAcGhvbmVib29rLmNvbT6JATgEEwECACIFAlTjy20CGwMGCwkIBwMCBhUIAgkK\n-CwQWAgMBAh4BAheAAAoJEP+V+qlxaXQF8r4IAKnE8D9AOTdM/YvYxpCeI6ndEUUs\n-8NcotpbIBJ67vr1Dsot7Ee0PrmIYOiInA+T81lPUDecJYrnemVefhquiyJ5VJ4/d\n-z2zUKBfxjeOsj/PHgcowVxMco8fNEWQa2fZX6X8RVADIsUnIIwpRFVUcbssK/3xJ\n-k46vjWwYNQywht/ZgFBesOgywyz5GozmwrK6TixJxKk8M69GFz2fHhJjp1bxDZuk\n-Rs3YmWeOcCasoJ6GbvIboKQSPHGyEOCqIuiBL63YMa0n1FU0ooDteNZ04eRinIhc\n-fo9JC66fQrUFn8CmmRTtdZOrZ/efYjQtfLAunCkzSM3p6DE9u4Y7d8E5Ar65AQ0E\n-VOPLbQEIANhxtouZuQmw+k89toBWXw75s+csxKHKZuhw8QntaFyFYq3IOnIeV1sK\n-PRENkWsqDInjEM8k9eZ6pnS11EQ1rrFffss+mprTbL3I4S489tJETYZKHrmmox7h\n-ustRi5eXBEmGeKW0mqpb/9r4okpTaIfs+EJ4C9jj0ghWkqU0acyzanJiUY/0R46F\n-vPfGfHnhZ5TAl3eiL0H2JkF6taG8K1XOLemahdZHE9wJh0ZFWnDDkA1l6j2rtYga\n-jEi/ucOp5GkmumxbFiVgponDBqBpsscRrCV6SbZs9gz3dQNgqe5A3CKGZRuVCY6s\n-djRJelgqCF5+dV0fAT0oF3C/3E5KAgcAEQEAAYkBHwQYAQIACQUCVOPLbQIbDAAK\n-CRD/lfqpcWl0BUSxCACjEFwQSHcfZINWD+KdNMayxyHQlBwsEDX+xQkgnn+/Q3hW\n-9VI3SSSfFV3ustlUa3IaNHwuWzsrSqG6mLG47LAQ6vPAWVh723gVCpyJf42Oms/e\n-qeyn0f/PT/6RuNMXQeHbfddmRp4PFjyKOms5Bmf3oi4t4JSvOS4yABBBKzhDQYC9\n-e+qv6Y1sDYpSiCxstQLzIHKiB5bfZ8Szfk09EyyLdqLGkiB0MFhHoXWwQxKiLVc+\n-xNFj2a/jw0rQVgN5DZgHBWU5WqvS5CWIczi+2S9MFI26iBhCn3urZToaaQ/DObqC\n-qmekFrJ/GOj5vB1Mm014lWjG2X3EovLZ1XkgWI7W\n-=vtNZ\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "6b0bd240ba4cf8df485a8caa689717a12ef6b3c8",
        "filename": "contrib/gitian-keys/cfields-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/cfields-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/cfields-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/cfields-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,52 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.12 (GNU/Linux)\n-\n-mQINBFOHTh4BEADdKsRvmNhX+B+bcPsgMkp8ztwJA5g/rmrOlHQpKOOf4P2tAr6w\n-FmXCChWF9Iq3pDFQ0t0iq5rgisFPyrGVT/VToMmH+/PSLTyIdAlgkRYDMAPsMAFV\n-MaADH4yiAgJ3cdXtysjaNQV5O25ypqq6/obUjZJD5Enn6b/UgHe2+7LTmTNsskOx\n-5s/WPPht79EY1kM4JQfmDx68CsmqeSAlT6yeO3RQcLn/l46cfXiwzMO4h1hsZS1r\n-pgciRp0EHK9uAjF2rjqt8v4SDxwyTnwfpBBulzvH9mBf+HRXWzoTMR4sC/oOZext\n-hKAH/ex47BxN3HU3ftNhCK2c1xcU1UOGSjbf0RdbwuSCxxa7mktEDumvOxAk9EBB\n-+PDPv7jO1FBK3rsJdscYQIL0AiRyO49VfNLARa34OqUi8pOAxKBQ9plO02W1gp7a\n-DVBPI05TZ46Y8dTR2Bc1raAgOyxnXM7jfiQG2gSULiKAJAI4HwOiodaiiHAxDaIo\n-a3mtsmfN25TZUQuA0I0BvHbJvLRlVnyZm3XVOcwReKJpZJV4qRhd3XNrERZdz6ZK\n-cAZnyC/X+Uzo4HfnVSsJk1GpIa4seYyrVCFfHMiAA6SkgAUFbV26KCOv4rNR2GlV\n-l2fVhu1RKOEUJ8nRcEqf93SehRVYdI67LepIPgmIwi0KG4HhoTbIHDAKWQARAQAB\n-tCtDb3J5IEZpZWxkcyA8Y2ZpZWxkc0BiaXRjb2luZm91bmRhdGlvbi5vcmc+iQI4\n-BBMBAgAiBQJTh04eAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAcJJH/\n-6w73cBTiEADIGZSueBFmaOTJCgasKGguHns/n8P94EQBZr07rrgN99Rzp85WvDUN\n-Qa72wj3GNcAffN7aZlIWv4g+fjyr9AzHekjI/7iwwSYIfjfTR/xRUW7czRfKAOrK\n-iwpEzgv440i7PBvkS/AhNdUNkm+cJvaQUej/F2/O52qDLEpHuzvjAUUWlSeF9/oO\n-AjM9dfC24L5k5cVwQvH9noxk3EyuE7BuiGE5a+kKiORrtxiHeUG6GYQxuqrPucLU\n-fI67ETyXa0YSpYm5/O65BKMTMpmkMvv1JC2kqqsYTrO5p158CrKzq2xvpuG4ABsb\n-9KwICUGW31Ndr6TXwQJFa1b7VK4G1g6M1DFkVTOLJnEyOwgYxsXrV5QFpzpAOAji\n-6KcxNGeow1avAFYbqjjLgu9UNuq6b8du13hjkQxVs2NAP1Kd/u2ADwxQHMhZGVEC\n-9LIcLVSP9ShY6fR8m6fwSlJfpiV81uLNVD8KIyvp+pYTQ/FnxoPhPIwalYquBZKi\n-0u38igW75IzZ0fYvJgTumE/8ofSVkutVtrQb21eJclVrJGMNweTlJcJhAWdKkjDC\n-e6mSj8GItKV1ef+eusXSzs/wPyTaqgkELvvAOZdwUq3kobQErE5HOuPEOvcwuY96\n-DcxLexirCGW5wCUq7Db0c0dUjQwzzb5OTW2jdnPVR0qxi29TnOJ2aLkCDQRTh04e\n-ARAAuJKpI6NTCQrjEqe9AYywN8676+fPS5bqXkyb/iub6MXeQdwpH0K42lXAaYMq\n-ow/0aLlvGWCHuJJGozoOWpTzQ+VPbhpdARoLCop5fYTpy8Q17ubLeeODDtr6jtDN\n-lmg+9PBIErIVUnUS2wNZuJRVsfwlLaU3T2v8kQnQ6AEbl/QwyWW9nB8rAWBu6Hvs\n-VdtcBmtHSr9xAGBGfW6rSVhTitikR4lWJPdNJxI3pLaswpLIUIQ1rssKO4glljcp\n-C6nhMvRkDLvDFvDP9QnmwY/A4ch5S6ANPrhOjQuu9njjQ+/ImrJTjAXqHwg5KdTc\n-NKxufgvi9elOQ422o0No3yKdRoRA4kdcUmqA9gNZDyX0ZTd17aNqc42Zt3aYLJ11\n-bLZZp0qnfhkmhbsBZZtaLNkuF+RGPWysxY7KPMm+nHn6f3Wpr18E+T02wi02r4nS\n-HOQI+gppDqy3Vq3ZZNoUZynctiLZVHkqi+WYXqfD2tEn8UJKpht7jrZlNgkHFgT7\n-T0/U4+JmaQ/HltE+IexAIH0GP0Jt6hmRoZimdoy8Q8NY5t/fn9CQNJm5InrHvooN\n-aFmZMvzGTGiTqBqnA/7k9FCUEG98LK11MsIssY8YE/F6HD69R3ISyRvhUbpFvhD8\n-c6zOkEKngTWvyRevrDrDz2yoZ1+T1X350+92rbEc/8WyutcAEQEAAYkCHwQYAQIA\n-CQUCU4dOHgIbDAAKCRAcJJH/6w73cAakEACv4EUEjtFjqnGB0Lru5FKs1obWcf37\n-c4a5yYvOw58dkEZ9hsq34qWGLT128n6R24KEG+3O4CbplAD5Kt2eAPracbPHMAn8\n-TGmC+KjiGlBR5xCY9dD0fn5EbRWOa+Fdcj1DpneaqMl9vLnBbqGp7pa/MwSOc+FB\n-0Ms2rcGJJMNHgITfP22eCf6pvf/xq7kKbUJ3Kjqdc2hWlRMjC/OOeITdrgycfDk/\n-AOzLNqk5q7bYOxna6rWDLGSkCATyQKaBTVK7wRd1VrIhI4vfFqy+BWYXyXJ0pxjS\n-eaCDwbWHX/KW+0qLsmHxFMAyHJPjs8LEwK/DRbmWhe1HzPcBKmpyjqlkuxPjAdSl\n-hP4+IBvVNLf2Kh3uFHehk9A6oCYZGe3lLfQnOxIantXF7IROTmiZZsb+08w6cIXE\n-+r6kWG6vP2aCVtzYNfY+2p5xfg3yMxcxENJki1WSCOq6WVf9IWFzSJu+0+eazD3L\n-3QpZoSX5VvT6x05C0Ay1ert0Q5MyF84Eh8mDqL4PhpWtQhZMp8SG4jqFVgrhM4sl\n-vWGYXGns4tbnNPiiksjBD8TTvG3+mt48sNJIpHThjdWJSZjllYG7jV8oi7HrX8M2\n-LOwWWLYxHkqi9wpmrWHSmniex6ABozcqrb+EgSMnHuSd7glmOJxHToJIudJbKG5D\n-MrD0ofsytfy1LQ==\n-=DE4h\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "71898127ba0d6c9976ab7225d8c71ffc6380b0a2",
        "filename": "contrib/gitian-keys/devrandom-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/devrandom-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/devrandom-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/devrandom-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "9d3f060627ee9cb4143e3b8945a261e90c39ba13",
        "filename": "contrib/gitian-keys/erkmos.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/erkmos.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/erkmos.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/erkmos.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "9c03ff45226c5629d24e5f9925da7210df0760a5",
        "filename": "contrib/gitian-keys/fanquake-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/fanquake-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/fanquake-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/fanquake-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,63 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG/MacGPG2 v2.0.26\n-\n-mQINBFFlV7oBEAC3dRAS7gSWQ1fV4JySD0HMBOtY+Y2oCX8vEuTI4atGcxbwXr4/\n-OElRYhDK6Zirk8rMoKPxmr8OVek5LNnY3gcDffco6NXmZ+wTstQm6oqUxFfgzznG\n-X/ExEVuCqiaPAwdWSKn9tC1GuOqRFcD+p2zmxw5mNH5XdsqaPSEGsKESY1IK+dMv\n-K+YUrfrtexZyb66wCtupYziEeag6iEK/i2x2wewOji6IvtI+wB5FO+YMXw+LKucw\n-PoHUOxjoz6YX3s04UxFaZo4R8x6J9XnJBSB2E5kfsSAzz3xR+zuapXY6H6mo/grq\n-nr3c6ACcbAHnMWwQLYvWzde6iwswhyl0whebsajJH7Rd3G4c1U3L/oj4RwUFmZYU\n-5Prs+Q5PepKAJfBeWCXZtUY2BNFCFj7b2H2NXYFR92Oc2GtoHAYACNeP070I9d3m\n-IeuYhOrOckkunwaijUczq4rb3n3Vaq6YrdwZIzs8fALwc9Th98jj2dCUq0fljpSh\n-UQFnPG83UsNkeWzUSgw+lBeEQqgOqUQQ293MbgRg0mJ8q677Iv+WaFqPKZzXxkwT\n-QCCXhjcBmUKgXIHLFcbfmkR8pCcCToWXBD8CU441cBsootDD7SanPHbpcwZjt74x\n-uLrVoCIyaju0T1jSrsPnm2A/8VkWLSCh1WRAlbjvMr7DwizGnRtzTiB6HQARAQAB\n-tC9NaWNoYWVsIEZvcmQgKGJpdGNvaW4tb3RjKSA8ZmFucXVha2VAZ21haWwuY29t\n-PokCNwQTAQoAIQUCUWVXugIbLwULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRCU\n-TTX5rD23agJgEAC0ouDjufjCMHL4DkaVkOnFbHzP+nR2Mq7pcjdiPNIt9tj8B6cI\n-PRh/E+tt2iEJJ4lzlfj0uEqjqexmSBaMgY+pFb6ESg42EPQjRQ95oBoyZfp+uL/0\n-KC3+Hh+EgmZGIFPZy2HneVfusiBUz2/YTOoqFkzmHalJe9Yvl2+dO0SUC7i6TUdJ\n-+ugSr/91hkjQC52LXgHzurH4zOz7ZjzRtZgUIG3oOx8mtEDf46eJ0IUsr+tWJqOp\n-ce5xFh6nkKfS92B7YjGJ4YrkBHC7F9vmbrtIeuWiaxGzVqhHFmLvQe+4xyOpRgHM\n-kcyD5uJNmSMO9gT3udut4hd0yUKg5rdqaUzqsvv19eNL/pZ7aBK2aDAK/yAi1T7X\n-/nrhBJAU49zg1JRS6atRnhKSyd7wRSwVPJAXfVuelHsUgenSdLmSBxRha+9mL6Lb\n-bLK/Dij/0r2fyhBJx4pV6V1n4BpHjv5ivkpgCvOupx8wx3PIxZq/rx+hK+ZBe2EQ\n-7vq8rmLfBkSavHWyNxXEKWQed+mFS3d+Qsoy90bi7gQygIYNZOIBYwsy+qjCZ3om\n-LwkzRjypH23ps7WmiaoenOaCjRYooNL4qtQwNVaDGYwvbMnXJ8Vb4/2j/Riz7+Ui\n-BBVww+Wd72Fml/OFPDFep6HG/PuwFB9m5hmfSzrA01TIdjcWljtTDneufbkCDQRR\n-ZVe6ARAAvi1IAxn9xKQCCqhsoKOiXNbpnmf6lYnoEwGtgI+0a0YQwtzm39P5T8P0\n-esZ65/Re6jCCHLc23/urFPfW9VfrKPmNJncyzlx7OopJ7G1MWdRLEUzwqSaglC6x\n-Zb4r1xR6eq2lBX6CAa5Q+AuAqkoGCEiYBpTyKij4sXE0c+Y9nIDIZhru7EnZvpL3\n-SQvxzFryQLbWCGri0x9GKXZ2ZcDM7jRi/P+iX6yX6sVvOvyKz6NW2BI5OmpI1JbJ\n-3fIXt/R6Wl2xpAFL/pxtYTYbfL6277HWtLDTqIkkRFKh64JdkH8n4G4m6VNUtGEu\n-qP3SxtyShauxY44WzR0YX4rag6tU2Hks6h1JmyF8aQTBAkdP7UrQ0oxZ8f+iG9n6\n-3GtTxgw2NyrqVMx3kBLm8DipyslbA2wCeZLrW6Co0j3pebJsDrMP/3zcmbJqRSLq\n-qnkcxA4gn5j/N0oe8t26Y2WjovndhoR0QQxw8D/BKoMXbl0lvvRAtcnWtyG0COut\n-AGB2PUbGdAX2Ky+uYKrG4uhu1edfV8JZVvB7NIQGzM2P8F9PrDRz7EtG6z7ky/pq\n-HQwRbqwLWGs4QpQmHZchFmXH7pHmLC8i29W+xYhdeUstvx7oESbunICGrPjJOShJ\n-G4191Zg0m/M6jeWV/v+piUXe3YVrgs42UWFusm5ZIduPUfgqUtkAEQEAAYkEPgQY\n-AQoACQUCUWVXugIbLgIpCRCUTTX5rD23asFdIAQZAQoABgUCUWVXugAKCRAu659c\n-wJUmwaduEACCiiRpBeKF5fSaM0cTb97hAHVQJL9Wk3xvA49YuROsSwtCzq9v+js5\n-f/fE+QV/dIQUNwifEPQk8MqUVKpe1lIXwRp23GinzDAnOhfWnECqrMdR0dP99D49\n-Zb7Dd4LDvP9c0mYtnX/78qQilxWmXhzDXcunnPsfCqsrduk9hMwkjmIrWFeSWSAg\n-BEJDuZ4WLuqjni1udth0iZtZYrDaDgX/RWcTFW8QCc5hLsCRcInAxb75AWfWq6i/\n-s3Ibg5tGm4+UfqGbFPuNyy6ow3ggqkovBp6ABMxe8dAYVXSmM2tKWZXBb3L6eho8\n-QKKzyoezqpbQ2YUaYZ8XAdLuumXCtAHKP3/DI1JBefE0mxi1CXjdLK9sE5OO5KNt\n-FXR8Dnot5C4BHrcaF6Iq2sqbhPxnhcDrEwv2mUgruD7n04LKIztAG0A35rcu6A2i\n-IUq/PsXjS/5rX/p4CeYvnTTspXkhXgkvfhWz1cISXyfcNTWBKwOsLW4lY8bi05cv\n-4Axl88tTg2dNYXIxSK7Jtu1YCEsZ8uaT3AAiTp1sKAOcRX8hIOTmPPxMxbIm8yg1\n-jl71ovsV5rAyuVTUouFnljXyuLWXLotUOkmC6DjJUuRaxzt23/eByJ45x94T/A2U\n-iT1oU+voigQGARrDkApXlgSI4oekg3Zgq57y6toV9F7o9A1PMtBq3AvDD/0as1K0\n-wCRZIXinSwW2F6tFnVV+z+vvE0i54yHaskkuJYZRSQ/yJR1VgmW/BtAr7ooXF7l+\n-9g7XOH7D8T28h+m4ABLN5ZDOxfTMZuV5Y4MnELh4dlBIfKGG2kjmW8+y/PUqMMGE\n-BYRmGOD1qtWvFYoZ2ss5yrlvfenRRhQbIYSRz/YiT8OTogaNcYNpArUwT4z+05af\n-kdxx0AaqauHqKRo/XTO5GIZQ6NbtPH6G++2Ie+oP8AyBWEpL3rvjZpzn7jxTBXMc\n-MOMmhnb0Go4hD+BSphgDTZOgMLOLcorjb1Ct2VnajxPZD0aTB13SCgZjJhs9j3on\n-EoI3gTHkRgiBjMBNtw7iaAumIRgrDwGzyuIL6bbyfDnbE02zxCqkYP6P0u48FGLs\n-E4U60GrYSlFxa1MexF+HIPgqWsTOv4D2zXEJYvm1XEu1VOGQUkw7J5RFTDxHgkbh\n-qvmkZ492iW2IC4L9hSdSqiZ5LhD2JwpgrMt8vrCzVitkjYQnXJ6WbWYfCybPsmLb\n-mfQ03i9E+a50UC2SGDf8e3oxImAbbXLP/LyI7oczCxyb0EzcQlIIOtBgl3gI6KAh\n-PTRQGeHCzIOSgUf7B0ihY7qiDeR1OshvTY0wdykdS0c+hzwuS5TZvfY4YM7Tssvt\n-XwbdK0Zpx/oDtRHpuDMGKJBV2LWAZYkEbFsmtg==\n-=3o2I\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "f81f44e874707837c13446858db2fed14ad5c501",
        "filename": "contrib/gitian-keys/gavinandresen-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/gavinandresen-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/gavinandresen-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/gavinandresen-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "b8aad7fd88b42770c4aaab3ca97a115694bcb9c7",
        "filename": "contrib/gitian-keys/jl2012-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 105,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/jl2012-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/jl2012-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jl2012-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,105 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Comment: GPGTools - https://gpgtools.org\n-\n-mQINBFYhRd0BEAC+2VU+8+f9RTPLtl0C815oxaOCA9Tle13xNER8NjFrVwIuFQ64\n-nO8Fbhd5KEEARuMS/lc5G6IV0QxBpDGE1sEjPQXrA6UnX8SDkNGhmoAsV07MP2Xl\n-glN9qqYUEoVD7ueh7Cp3A9rFjg7wcMJCPQDP6lZY4cPgYlE1C31TCrEdAsVVTQg+\n-xIYWnhB92VxOJhk0N0h6xtCQ2MOtYDjYcBndQ5iK7L5jy5LI89YVRfbKtWqWZdwR\n-lgj2JCLeXKauXBI1qbedCJrz5e8nXcdqZt9TXSHo/XhNlqvsLiqBq4aXNU3xRkrv\n-fcweZ9jR9DjyQzefYFGaiCk37R4qLbaqQRm0luUizkCegIuTv44e/zig0im8yPAI\n-WtGnmBPSy4MpvvWiVVb+jHikdQG1T7g9kF6gEmj4kj9UseWnasiq+kkSNE67vLxb\n-uZDfA3QhavRMJbCNEY49/IX6urIsiCLFbe6C7JVWvJ7d5l3MAHE8Sut+ytjX7z7O\n-LFt7YD6loxGAdopEUZm50xs8PswKDajlzWGFXjDZdzQA1tb2CpHUtDkAInYDutR4\n-qA29qtxaBswozzUYiDptGSkBqD1Nus7UAJYkwe2EjeszNPhmIAQXGWx2yWplPOJk\n-ZWDuhQtrDXZikl70q0ekIJ7bxkpMO8xUuhsBCS3Wn6GAtySy0XTttmItfQARAQAB\n-tBZqbDIwMTIgPGpsMjAxMkB4YnQuaGs+iQI3BBMBCgAhBQJWIUXdAhsBBQsJCAcD\n-BRUKCQgLBRYCAwEAAh4BAheAAAoJEMUkKhqzk2UXsbIQAJnXDjhEoKSILJRrKbg+\n-MXP3Rhxc/ThXu5C8yhfYqKblqCaNNfEmrlercJKJVMvjY0tVTXYo8BEJmNN7nSNI\n-su8NheJ9vXacN3XrgkMPuFiUyKj9PGpSsM6Q8MjT0Bzd0pxodk+g0UEjyMktfu/3\n-TqLsnoFPOtIjMOkr/uBzZn5d0AXIZQbAz4Xa2zBW+uR3OSXRRXCRJjCSWGIfDX0Y\n-i/Ea+3Be+y9bMqDa3nPULEkW7+RNuyjLr6QwPZ0/BpTTDcM6Vic2daFPO5B0+o3z\n-PMFmPcEd4nRHTPM9A5SaJtC8MjF/89mjhpxG3v8RqkqCdqdM2cezi/T4YD4jcynE\n-F36Ya3GuuewxEZci/N5ySG5gG8Y+80Wgc1e+sNtvIffHk3Wju2kOvNcBA2TBw36V\n-XCJXHROTA5+Cx4lUxOkQTJoYSVzx852WS6WHeLg1+XnDZvT7ciVIV0ExJQ9C1XOM\n-wjFMRsTWl+vflxmgCeHCIari57Jw3ij7ghRCgeqLp7FIXK5qSI4Tw2eajJpoTKPs\n-wlaO6kvOXtaCDH30FuVhKbPxII01Xi/A2ALtTkpA6mfnf19orQjv+HxX/iwUlpHM\n-UwsuhpZSQYIxIv/BOQnXDfw4TcjnHsqXZbqNzzFEjGurMTlOUX4KeTPscdOLUpnO\n-1FM4JIVybHHfhCH9Mpq+MIwCiQGBBBMBCABrBQJWpym9BYMJZgGAXhSAAAAAABUA\n-QGJsb2NraGFzaEBiaXRjb2luLm9yZzAwMDAwMDAwMDAwMDAwMDAwNWJiZWZkNGM3\n-Mzk5OTE0OGRmZDQ1MjA5ZjA2MTUwMTljMTNjMGVjOWUwYmQ4MzUACgkQf6sRQmfk\n-+gQcZAgApPqnaIIE8Q5sruzua50RFRmmBtQys8sM95ciWYE4QaTXUnlhHl4QR4z/\n-TQTRSBqXpdHQ9HBWrhFb6E0ykDEVx9zdEt0fvtlhHx1ItrZetfiA4PwidnyoDKs/\n-/nt01RGreKSMDGInaQVEQxvEW+A0fwvcCdE8Mh3LcIydohfqUViB0c5zb7rUmize\n-+2Kt4Uth9T+ooo+UE87pHSJcxlcPOv6Dc7KeoUicD8DwWdsT7oxAMk9jj/ut4UNx\n-xOEp9Sa3sFN20tHMqyOZwnl22Py0y4ayJnceawpuka/bx7samg/2uUrO+dNKXObN\n-trebP83+8UFHOo7VGhesuawgwNjWW7kBjQRWIUbHAQwAy6re/3ur/fgNfE9yKivp\n-Bqmjq0eU5l3iT59hvKr7S+6GHUa+YvE9BBsawDSI4UILNQX0YGT1LRa20mC1okBX\n-5SIEpWzoZhybTMVMwS2ZHkUyO6VBAieUVojP3XQHFcDAiBvW7RRhJ2BU+v9DGo88\n-HAYqKEB85P/i/E/a1xUfTWiiIhA8Dd/Hv6pzIG5QvN8XfrMIayLwpOV1G6KvBIJb\n-zyUVUvLyQySiZOyDczrAxzYq7b1qv8xwHDUzyUl6skPqbex1cFWIeiML9EY4DnZ9\n-l3qb31Bhp+EHydv0esclM5XKQriSg/hsnJOLlCS45z/YhqGOCoD8QxXUJ71NhD/H\n-QR/AvGyTDcPr1/U1DJ0lG778wCOEe1Nad0G/8rcpHSY66RZR/Wf318S7uJt0mUw2\n-JMt1BRxfbdgJaleUAqYjNQAMDb8LfPO6jhQnmf0nN99dpdzkwV/drVRcLDEnupDr\n-keBsokcuohzE0gbjUT4cNc0DuUsIELMTApG8KQCgzJy/ABEBAAGJA8QEGAEKAA8C\n-GwIFAlbi67wFCQGu8u4BqcDdIAQZAQoABgUCViFGxwAKCRDunlUgNL4k0qceC/91\n-2ocEDwiu9kpBGCW0HD+VSyMVjLWMiClk+jPngvNEt63ZkYqRiy7fwnPuJrLFlaL0\n-E0JLIweihC5AyPSJT1Q0LnOwbqCHn1s+9RfIodG/v6M48Ez4GffOtmYwW9KqogK7\n-4FwdIx/wOIYDeh4rT7LRaWBNcIXO8J1+v/83u+Vx6TWKZTiZKQMEV8VOJWfSmTCE\n-6HVgUYvLCPB6DI+X4aVead1kayKOSuXlG/l94B5RHlJB/xQXZd1INyrZetTZxYzZ\n-CBhIWaZ/ji5vqFot0xVNYplRkbg1Mc96X+hwee8eiB/ySSWxUV/DDkA5ZzuE8n8R\n-EEjzqazjMNe50P7XKVg/eBE+TpgCDlqv69dqnOF326m6T3+FH/LDOHguQfB7pQKx\n-siviqjO3molBSyMHL39XFWyteVbgbbSaTRkpX//b7dQoFMiVhigcM78qoymBi6yX\n-qwpN13JoNuNJhEOwex5eEEUCVibFReUkBrYoGnWbwuOxiLORx/IbuNYOvsTGYEAJ\n-EMUkKhqzk2UXWScQAIvAgEpQpzuE1CWMBWcM/n4ruUrOVTeo6dYpUGN1LI0758xm\n-4VI47I8wPEy4pAbdPcqoaNnMcA/NpSYa3hV0svQDLqT96qKTrN71N1gNJa+5w+KN\n-rwev8MRpjuze9b4dn3avs4L9f0fkpzjSzezKwVb7loFSZqgKAaI0aSoOUTec9+OU\n-5ymgkYPEEF12ydkyMzLwyKrtEnIqgwQpjYTN/3P1x7Gkhv+E8Lz06TSga84yVy5I\n-5gO1Hklc3MW0J9jPJe3uALUtEh49KxCE2rdbIX7YbkxWaHHfK98Mu998IXr/4eUe\n-Zhf2CLC2cuuYbk1/rOcxPmeIJKa6S5PlWOf3Y2yLRO0VKcjD5pcGxiImoDVXC4VM\n-hztCVLddjU70c1ktSIBQBu9gkpPcECrzjYtpeAavOUgmpP/zQ8X2NGp6+5n9Wwii\n-tAgByNCg0s+PqcAZxup34b3ZY/t475tDlAmIOovH14Aa8g+0Ketj++9rPpmg9kGs\n-sGmn4mVItClaA7L9vZQQFnSxjyfICKsSxBhqded0lsinlzBfXDEh3N6fEXh81/Gg\n-zLUmTlkhcGaFXplYqrUIlkdO9PD4R2h5P6laLhK2dAf7oKavWHZQp02Yb5nVBiDc\n-KiVWKBP4nuTkWZCG5R966wpR1IOQQ3LykSd5SstcZX6iTpv4NZpCxI4CXpaCuQGN\n-BFYhSHABDADHaEJVygBdwU81c4YynyTOnWTZX+BR3EvRW51GcnfvjqkqgmlWNLET\n-JkswQ8+s0mjKGVnz4dkdr4cUbVegj/St7wzoO+m5mYIDMJf1j83Vo6lTo9FJFzbc\n-HrYC9RS7NkQmD7qzJz4KY/h0n5szFIC/JpYECBNzYrJQc8m2kZiSlyUQJve5/I5J\n-iI6QnM0x4kixNe32GITmKw9s3E2iRf6yXVlsrPouNS33lPXKtvmO1ae7R+G8Ve+D\n-JDv+TLxccy2iU9wuz4I3k20+rlmEwk17feDhfleh5Q+qjI4vkaNcXFa5coZE0HyW\n-SwAtLPSOv2vWkuFeYncXRyzg/CvKR57i9wnqMzNTMt3bHY2HezE13bHln5B/Jqr4\n-ihhFQBqPG+UZlGYRfAI60PLh2yftX5xkm/POiLgEKF76/yIZI8wcPzzurAhFaZBp\n-8/MUv2ZJ/OUT4rdEVV+6XnrijNqVBU8mf8BML5CvjyhsU69yf1mvpiLQr34FNEcn\n-JekDGPIk97cAEQEAAYkCJQQYAQoADwIbDAUCVuLr0AUJAa7xWwAKCRDFJCoas5Nl\n-F8NMD/4hRoOKENEq940Z0iJg0TDvRvRnaIYsbneRQ3yg1DGVIQ+4RHmzQdpN9MW0\n-5RTRLqJsW25ydWwh7y0O/oBRjaoDRAkMSIyOo/Fy+E9WWBmAwzeYCi91MyfetKIO\n-ocrXxpXXKnotAFDOgWGF8K+LlTDH/biOrd8ftgOVJWhz3X04ma7xvT2tQTqfFdbt\n-EivA+jFExq3No0Iq+Ctt/e0H2d9np62SeKBVdpbx9xAc2tPKKDSl+FyB7lj5CK5/\n-FKhotl2bJhVXET48P6e+bFVwfRO7o48zuK5CJVbbdjhavQGhQoxfedW2dn9y7QoM\n-qayUuVIhULE/k+y3jsJBUT7p567nSdUGbc3uKt1sfPKYTdsFbHiTRltXmsIiv4bG\n-PslbXSvOQblFOXWrAE22CdKmGzhlEiFnbviZCCl0BFf4CwEVBJ3p9Lcoir1l9Aty\n-HIIFI3z1mmTz4F9BMbe6saNwBzO+Kh4+US5NV/hqvyz0aOLltb6KfI8WF8kOa1Cx\n-Djz/DTHnvMWO/dIOJuKsThfuxZZq3R1w3O36RB8XzDT/8NV86gfQwN07NWz1rdy4\n-60fK36EjOJDqm/434/BDzWh8TqmnSamENxBTbICmWOj/25M26tA2S9zcPLJHTGMA\n-3yL3QlBtjWY2uNqr51cnZHgPKxBWzaRvcrZ+lUq5EG+F4J7q5rkBjQRWIUitAQwA\n-5A2AhW9DFxVsM105WEErD2NuM2rvtq7dTwArBEi2KdWkSGQvCE9xgyH8u5AEWxj8\n-XXHE/rfunW0d9oF7Z9FbOuV+1HQOAj5hQQWLWHERwZ4gOAqG8ZKAbuwTlqitdiXE\n-PZiJYZSq0NXtngyeTx7XqzQSatfFOIQLzIiwPQXX0Tt+JB3B2SN/D2NP7rubzfS2\n-Bg0ErhV20fPDl8YloEJFfj9lpF0ZJnJ5hXYP9Fl4MoPkyBkGPrJPooZ4FqUFHDiw\n-mttzP1BzFlwpAPGpI0NrkBdBlfFAtvhjreeB5Z4VYwt1xqoXgI+jYXAxoMl+rtkK\n-FdWaoT7wHwqDBeBWYXoyXA2dYIY8Ux1jeDBnREck7vaXhln6zXqMAQowE+F9OQnr\n-Wgf/LoOn5MYxsBDY9mPAO8urxUDE+Dq43JBXlS+jybMNZWdtkaBrIde7dw9IT8Fn\n-p8pG78DmgPxmRFH9QoypTqMfB+x7ZuB0fk1ud4ut33qLo78BWZoW0H++13CbSmrZ\n-ABEBAAGJAiUEGAEKAA8CGyAFAlbi690FCQGu8SoACgkQxSQqGrOTZRcNQBAAmeL1\n-8Wr7vuvL5dySoYmWqHFvM8gRUwIGza5c3D29NYZJcPJRRkdGCV2IXEuUSOLtnjAN\n-kTM1TVMMnetqNR8Uryr7z3XjqYLnVwGqOPnFnlkE2zS3pG8AGG6OxxBhuEMvkwcd\n-1s3tWUlJYRWi1XhEjVZ5Km2pHsVxvoXeJCUVsa8nSXzqF8gOLm409NFMiKkp8QOG\n-heEV4yWrHkySi1fVfOdrHfBzu2lUmHGgSbmJIpLcK+cL3TjpJ+DkSNbniI13I/Eb\n-PO4Uai4a3QYz6sspZ7UzF/pjY5v6WpWXiVB5PP2Y5BrMUgWRlFxPYTc3KiIHUYVi\n-IjVtSOsVaRCHL/SYRq/qHs63XxlxKIhhilbR4OO+CvJ6N/vEpSbx69SqlxgDArZy\n-g3QQqerlLGpSFim9iWk3QBGWtQ96Ek6rjLLOn7b34I6bxXtfcOEo7gl0Y1TFkfOp\n-nsXAcRLrrXCpAhgC/vIQRTMKEcC18kj/vY144DwefzYCBhbI/rCSohAq8a/zhq2T\n-E+xlCYy931HWlUAGx/hms/0q+KQ712Zgk4XxXEx4RZiv3zl9Uph6c7SXxAMb8o2v\n-PzAxd3ShNOnng9hAl8zk5O1RZPa5u51ppkO1FsJ9zjb2Kvdg4ZEBtK8jETv9ckuq\n-yj9YmZZSRRQ2dujg81sLQ9CrO7WB3IGpwh+4lHQ=\n-=1irw\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "3831eaea114f77f30f9638e6772f446055f3c68d",
        "filename": "contrib/gitian-keys/jonasschnelli-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 110,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/jonasschnelli-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/jonasschnelli-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jonasschnelli-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,110 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\r\n-Version: GnuPG v1\r\n-\r\n-mQINBFSBrDIBEACrZEqObmtlTf7fOKttE39qqisFfMg0VeEPS37uETMGYsgTEvzv\r\n-kfMsXCGsGFLQ78XsHqUeW4uQrtpJH3nUP/Sua1Q12K3lNKTSvVQyEpKoPJwXZahp\r\n-jm6GA1ApDxZ/KlmxyobR3X0urnMYNZobl5IKJXlxoKGl4OkGNeFlh42pCXZDnR9n\r\n-1Y17ZcDdybkWcqPbDAz8ilOQcFMhDBFg3Di3IVMAaDZP1uwWFb5vx60YB5NhkOpF\r\n-nZUH09NJx/7u7QdGPSHOdzW4Xo1HUYtYNDkdOvgZtxpbYEFIaBtVBURMUGwAFagA\r\n-3a6qaGnCBWEQftyISLiqcKqKqXudOg/cLa1CAiQFkz+IBhY9BCGDRnB8Dcae6EGI\r\n-Djt2lqZTuMSiheTWeNFMGBioHfPLedcwae8KflrIBC+hNS4ay6HJdIc03WMQ4JKK\r\n-At8Y8CRLym30/RlqZ2v8CHYqg9Ddlz3+g5JkRKaJTQwFRcX46/tAX+I2NZ8Ra1ea\r\n-rF5cRHuCk/oaw5ZXYhj4zJO74rjAoSewAARlrTMSM541atJU1u6aWT7rNiF9QKIj\r\n-i8vEufUxN0YfdmvDD3OXwbO7GnfWXS4sPklFIRACp+Y4ib+QnRY0/qGE0yh3RAG4\r\n-r/dyIQ1m3z7Pc9eyPKAhE4S7SxAwoR4yOqQ5NAfZXgFuqWzkW51gkQgGzQARAQAB\r\n-tCtKb25hcyBTY2huZWxsaSA8am9uYXMuc2NobmVsbGlAaW5jbHVkZTcuY2g+iQI+\r\n-BBMBAgAoBQJUgawyAhsDBQkDwmcABgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAK\r\n-CRAicOMMUic59iKUD/93DF04C3lptLjtrhyd4wgpBMJV8yzagGyG+Wk0UR7elQw4\r\n-F1MIvEtIFpuGrcnNfKcqeGGmnnKFTeBjkmgcYvej2fW9XlRA1HgIS0t0ttDv8uVX\r\n-vy1xVj1qISB+17EiftxJjCOl2pZFEVpLQ7sSgqnVRMsCS45ag6rioGxtq1j3ifQN\r\n-TENnJWhzOXvwzZhLgsyWLjeYvTDbzfAQLpZFowAMibOwu6ObCkn4dhaW+lI3AnPu\r\n-76pLsrOljqGvXes6o2d28vjqMrlmsz2xVEJ4bnRPUbLv3bUl6t+19XpiMj94ZCZX\r\n-/kvepzSNAs+aYvoldFn0/8haU5wIDXO/zgXSlm4KnhaDf1zutVq/Ng6TGb66mZKc\r\n-RoiGHnnuQ45e7VIXRfOmgbbUTUIg+h4YvgCTR8dMoOWpd5AL8lZ3bjYVi1yFd+p1\r\n-dPfrrnN9Yd5ojoZBSrV2j1wLgv7jRIeXL5dWzeAs/JBzltAHWO+9O6NsYXtRTUky\r\n-eQa+oBKG1OsEXf63k8PgQf6Nw+di3gy23tKEiCz8lbA2MtekxaZ9Xu9CSEEPIH7t\r\n-Aoki6Ey6rD1NUZQPuxQ3aCUTRE2JK4b6nPuAsOEv+cZL0VxNENpbedtGPh4aAA8U\r\n-9yvBykWIjRS95k4NDVKIdzhd1geJsUJZq4BKh9Atf/kI+Gb0sqq2Lrf8a1pNX7kC\r\n-DQRUgawyARAAwLiAxqv7PsdtJg8tBO+dAnTYtAtBHn8g5GlXtorymB9Aqy0Nzpd1\r\n-de27dYlBdlWdHZavMh27JieZ4rk++74SMAo0PACp6FDnfuu2PmJZTr/Bzvld+B9+\r\n-lOZrMWwDIVSW1npJGUjF1rjgPjvmcGo/IreVFpJ0A33J1p/qsYZsLTXTDDoz0fq8\r\n-3XvwTlkTOkuk6Z6LPo2feDHYydUmdG+9MrgIMpidvywRHRC8nnkix/aX0S72kZuR\r\n-qvWwSVs229gtfuWHfvmaQgbugZMqANla3ZYdzExhIIizu7qQPXSYfhsCoywWE2So\r\n-9QXZIiVJge2P/hUr2gTiRNTfmhupDeqb1E+i7x9txTrNc40gbTu3qs3/fjKIWrXw\r\n-Dy5tuZsviLQnEQtY4sEnHl7oL1crOuIHjZfgZfoZ5CK+jqb2b0B9uIm/SMl6Kt8S\r\n-m6ZtK0QTjtUSIputPEYdLycdOpWDDtAHrWkTlRzKJoLG4hsywBAgQe7n9nLf7Zmi\r\n-DhXyXRKyJuuuG5mt7UZhjW95loFFVcGXHIxNmxVqNb1YaG3kEa9PdQMoOc0hRZb9\r\n-77yaGfpLV8Vo4CB1eAuVU0UdNRyChrZK5dKXBN/0uZq5HgpI1GiK/C3YUuQI3t9p\r\n-zeJYD3jPGYCI9xxLaqt7whoOILPmZ1KW2UfXTvcMgBUMkFpZrqhTGscAEQEAAYkC\r\n-JQQYAQIADwUCVIGsMgIbDAUJA8JnAAAKCRAicOMMUic59oqeD/9SvgUx60AhyCPl\r\n-1G64eII9M2LU4vmHj8g6wnjh3xaWXvlQU1xnz/5I0XrlbHm31ExEHK+7Zla4AQ/P\r\n-OrJhMNZh9oes3iOh+pAEn/vtixddM/oiivLBxMcIzq31PS8lZWrAjqOX/FFYa8GM\r\n-NZI0bNWu92J7cL/bRVwsIVUXh2DkUu7wXwicNERYkKDTBaK7FE06C/hIGTwmENlR\r\n-b1+H7e00nzWqoHyd0fhG7d8RaF2IF95YH5+r+aS20cHVCTI/0Z32FmlnCA6QlkZx\r\n-JZiXKssHLpegeegAOOR3t2keB5rN4J/8KSzIEWUG5sjXkshMIM7w1a6urc/iE9PW\r\n-YGgbG7Wt1AcEO5cnU72DzoENrOxRKdFLZWemLbncLPTY2GERPutJgDSYvaxmwnQy\r\n-eGsnRIOmAMgN9+8NEs9wZnzrYpkvk/Vw1FwNcCCUYb0ZPYoRVRhP2UXYm7OxdKdk\r\n-zPXfS7Uqs9oto1FiD7iomhtBs+RW8ndaO9wHGoCn2/UAD9fxNIkTQvK61amyjGX3\r\n-gdwrOwt73I+wjgt78jmZsKfnPWYnOIUg2/12P4iB6KhWD8MIIeFLl9TFfZ8f06WV\r\n-WIUTcA4cgSYgGOScxB0En+B3LDCkmVabu/JzBedT9N8rXvgdywk2UR4vKqiyJT1O\r\n-9ArEfToN7J0gclhUoadr0im67BGyMZkCDQRVXu6kARAAwR/cg0kJja6u1YToEM+g\r\n-SOOPZK6Bn745y0cvf6+YFVefLcManUCyI+/DWZhO+D/im569MApbTz1qdaLE54Kh\r\n-z2CtOJBlWP8cjlnVZ95hBK+Z9COuk60dXI7DySRn3DVryNpYjRCe+8SBTQJSj8b0\r\n-JEk5VVYPYUOIc3L6g7LBL2/ycxV3LVFTQ/A9LGBev7y2emgC7lqkPPoDU1vJeO1N\r\n-4G0nFsIxuml81pfgi/2aMbGF8l7LVAI8qMc0c4RAjL/yTPzVX5qq5+zAaXMcyhgy\r\n-yqOvlXlCG9aisnmPCEiShxmLvGfGdPmi+apxZNUW3384vVcOxzl1VcU6sVZT30/a\r\n-Jaa8RxZqC6S5kOr7uPO8CD1wB1rXzD8SA4Adcq9SwOkVE7QfnQi6+BIgdrsLKUfg\r\n-2vBjcgA/IsLETlnp2792m3w01OKe2/w9Uq3N45lWVTNVx2UcbWAIz6bwWoMDJ1DN\r\n-B4XQHb5Ag+VI7lIGr45Ep4ohOfIcpBCMa1WVGyTYoQFc66mPZ2MotADOHtgGpm6v\r\n-ZyJEp2qWj0at+tDepf0bFPHmGGhVj+N4HTBWMzsu3sLCAh3QWStr+gkffUl2CsdG\r\n-Y3RL6kVkCCW0o/o+V0mc8ZV8kAtFPyYGllsP9HEvjeXkHg+DAvRFZhSPI1mxGkGg\r\n-gZlEtHqZ9Lofoco9wedCJPEAEQEAAbQlSm9uYXMgU2NobmVsbGkgPGRldkBqb25h\r\n-c3NjaG5lbGxpLmNoPokCPgQTAQIAKAUCVV7upAIbAwUJCWYBgAYLCQgHAwIGFQgC\r\n-CQoLBBYCAwECHgECF4AACgkQKdS8tkFvU+ytjhAAwQqTK7pSjSSK91QZAvsV+CgN\r\n-AzC8AydcdpWAnJpsE+nw76snAexMctDfae9uPSGSVM9PAgouUg2YJxNd9RzPCv7j\r\n-vx3bevO3ArNZxvdKSXffPVzt01j53z99/Ltmev5rpIcNQk2nqL3iZaZ5O7Vxre8k\r\n-H5KxncFCUxlnX/stLz9WOmnIN1X5qVq3lSzh8xvm7DuyOmi1Z94GHCW4BHN6wxtX\r\n-nXqYeI45jPcbuJWC8P8qtNicZ0N2XLjpAoLSvQ68VTrvvLN0X2HT9Ol9y5t7re8J\r\n-PEY52TvrPCLYz4hQD0fPe3w14LkcdbWTjJwQ3Y7KWd67SOn+l8VDPj2jT0yDBDG2\r\n-YazByLqV29SgXm9WsfYXYF4FB9NSApbrAmhTWVa4K4DFXrLvcIpaIR4Ii3JQZDag\r\n-2tO1VTgxF+10S66qrwXwawBbGfDVchWgSi9T1hNn2wgLypsLN1ZDy7ixPCD+SHHd\r\n-xgTN8yv+/WNRNZ+LtUKNCIBHQmUBesNfN+wOrvOoWPAP6XjlUIlA2RIH6zKcNbDb\r\n-a4jjx1ENiHAlapVxzPTQiTfj0TDRXBdjboiswXfkN76upHdgdMdeFz9hiH0PSbxA\r\n-TmlmA7NrsENHLp89SB/gnGT2I/lLP5/DsoN3Qv8GCoy7aUNDT7abi1AeoBVVye2c\r\n-AL3d+hDPgOzJHjf0eJGJAhwEEAECAAYFAlZFyF4ACgkQInDjDFInOfZtGg//f4xQ\r\n-PvS6gQdIosesV458LtIUnrqdPx/8PGnIbkObSzjevEoj3RQ+D7PHvF57lj6m45aB\r\n-Tr6huXC2RQzOIjRXM9dYi6SVZzQ1xnjMep72ylVYawQS3VBeuQbhU2BgYTeLa55+\r\n-0sHBA/hX9ufH7a3UvSTgvssX44SH5mGg2h4I3O+4cNQIDf/G7xkzkJKcQmATRmIR\r\n-10JaaBKtx4JVNVzCWTOpEqW6/QA8X94LapK8Rh/mhKyd38v3CEHI7hH0ex0o2mOF\r\n-kAsPY1vvfxWzGKMolJp1b/1FPcb7Fl+nCoqlfnv0cCnZYsQvYXrOs/1Kj0anv9yR\r\n-iutEp2DyaAnhadadrFpWjXQNUeYtFlJ1aC+6HO//uw2spKFqcQ4tTvu9HgHJO1gn\r\n-GTsmDskwXqHOYNvH9QjtwlhPhOWQdHgLPrWBiUBvkT9H8uoNRGWg0VGA4J51IkRh\r\n-0ZyoLmRgejpj7SOpwLX6gemprn0Z4fgohKyj6z4/Bop2gliXSPB37qdun6M92g8m\r\n-SkxaEXF2ZyIXdeVRT6Xgp+zoGDNbMG3PlhZiFFCvH3Hk8o9zAz/65de6D+14EHYj\r\n-WBRKfu7jaL2RSwUSRwRAAYKwu6kgRy8G7+4SihuSHT2k/90il6iwpzXdyY7qQXWG\r\n-VxfrmGWZLYT0u7d+EZ1pc02UKYCFptlVCIZtaQK5Ag0EVV7upAEQAKpWFoCqFFqQ\r\n-5xH6+TFvbUFWBb1dWy89GMXCkmqAsoy8Ss2Ru8gNuy7Xt4l1dQhVpN0QWiuVGkEO\r\n-f2PmXQhnLquaSz7XLZjjdO5E3kYzcwOpIbb2TCWH4QQtHEotowRslQAXAZ53jN9u\r\n-NIEQHCPPBNocj0CLQmZl+av1MqRJrRcYzgkPIs34mBo6iVoRrD5CkSohbz01BMWJ\r\n-ZLk0E+JvalML7+ttiwu+gI90uRGiKEz5xsDMtyx0mAcAm+/EjcuQbhGrD6p7dLKv\r\n-9nuUU/T743N2LoDTBMzvX/JXjoQ/uS1nzuiJrc/vYHqy9uucgviuYWFH/Q+LhwMr\r\n-6tjJYUiN4JIQ85OLvq6g71RnpWzy3ce25HL1YWbLNuzi8ZKIB/sL4LXG2iTwwSFk\r\n-tVjfAc4zP/VWpRC5VbxG76atRkPLatgA6b2sawgQ6L/7XB5Wd5F0bJc3ndwPBKos\r\n-FFXgzOBgOkI6kYERQo8h2GzWfU8LWxl0a420ZHEfUZoYmitg/evA3v+23FrCMGg6\r\n-2cdNzU5/mqsQ5HWktTQ5BZQZyn5UT3zpNCOVyeZc/ezzGXcWbEXOLQwDcolxjatL\r\n-ED3eNA1OMQD8S++FPPGCukIzCyYiPq49zJCTMCWd3qTt2Bwea9xOQnoetCTU9goX\r\n-/eEGj/1zQDAXCGOVgdd34VrOX4qtpmp3ABEBAAGJAiUEGAECAA8FAlVe7qQCGwwF\r\n-CQlmAYAACgkQKdS8tkFvU+xj8Q//VNzFYM/kyHSa0xio4e8vBZA2vmR8IEUmtOSR\r\n-zr487Z8W1dapGxR7OLQ52oWdRZVpG1B5rCuJtsWbjdY94Y8RpcO6FBemneGebBhu\r\n-UKc60qwEanYnZva9PEFNyBzpj3xk3Ms7K4O2dZTcXPGj+hlep9Tjo09sklqbKfgW\r\n-2fCUu2EKXWwUrnZ2LZtb/Ya8WPCrsbJFk+WbrLhWt7jIsadVl4AfblcgBGb8aN98\r\n-GxnYOh+TGSMJtq1NSfchQwLHrpTPYm4McAwOBBYDdA+ik3//eLbwRiX9szFk658p\r\n-+4LErMBJAKLreSluBkqOG3AzT22Hdffvl8G2U4WhPPG33NzWomb+wKohjjzMVUlx\r\n-YRCO57wkURqEW9/+a4riuBWGQqqRsW1wHEMu1lYdAhLJ5f0s3vO/fVe43ktaXNjW\r\n-6k+mXDlIdKkQgQ736sBk3DAUc+YcmWmStPr1+TtT91eC23GLWP7gVDnNGEOBOscw\r\n-U+m1bEOJN2duAMJSRK7U0r2ipmRKDcwK9XmVpJcTePfB2l+T3RdHEZIOlaTELEX6\r\n-WJfpU4Kc1KJeKdp+l9gf2JD8eOZAlwxA4r2wxyzoCVg1Bk3XiBfoI7Gl78Wysp+/\r\n-ChQcErPJWEUglBfrESpqmjxH/qSy6yjyNmd4Az2ii7IzWILfuheZR4drjHQj6mCA\r\n-S5rowLE=\r\n-=ZVPf\r\n------END PGP PUBLIC KEY BLOCK-----\n\\ No newline at end of file"
      },
      {
        "sha": "88d0de1503bb6a6bed7710b68b5526e85a855812",
        "filename": "contrib/gitian-keys/jtimon-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/jtimon-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/jtimon-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jtimon-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "32f2973b72211157c9d6bb12ca5b396a1845f85e",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88971352f6106d87156188cc0e29077baa05b86d/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88971352f6106d87156188cc0e29077baa05b86d/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=88971352f6106d87156188cc0e29077baa05b86d",
        "patch": "@@ -0,0 +1,27 @@\n+152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n+E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n+07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n+912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak\n+C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n+F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n+C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n+BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n+9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n+E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n+01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n+D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n+32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n+4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n+71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan\n+E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n+B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n+CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider\n+9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo\n+37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n+D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy\n+D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgium)\n+133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n+ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n+77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n+79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n+AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami"
      },
      {
        "sha": "eed232a8722de569dc75dc97fc926e18b060898a",
        "filename": "contrib/gitian-keys/laanwj-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/laanwj-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/laanwj-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/laanwj-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "a2d34e75e1c16c17cb721633038813800dbe45b3",
        "filename": "contrib/gitian-keys/luke-jr-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/luke-jr-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/luke-jr-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/luke-jr-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "ee626500a482448cb2c7717ba352260262a3422f",
        "filename": "contrib/gitian-keys/marcofalke-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 69,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/marcofalke-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/marcofalke-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/marcofalke-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,69 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1\n-\n-mQINBFZu2toBEADGuBiRutibv2SlW/A7vBGeGA0n58coQaPkmi04QGMeGxdZyvad\n-h8olkPO1q5B0/5E1olEjs1YquHTjSjerLz8nUg8K5OEu14KtCGvFbmtSFW7fOUHD\n-/u+EykJrJczqcJJ31r4B51L8CdS1ODdBbinQRlTjtLq+pE/fJAjHI3iQ2E06vkpc\n-BRVA628fZKHIcd6uXZBrDyAcKtqq1TITlcYoVlYbvMrov9bPz1NW3P6pgnO1S+UK\n-RfkhG+N3bC8ttsTXo0aevz3klaVFEZ4Oo4N8TUcYoYDTZIfu/Gk23r0hBONI75IE\n-pbF8u+r0M5mpXxCHqmrUgmU33CBTeuCZon5r0iEsweF+ldh5rhEOhXWxHcUUz62S\n-64XoqzuOlorpWzIS53oyVTZcH6XszF+iLqSuMQCgOYhF/u47rt3Vh9D+TYJcnvGd\n-0ozRuajLIRGCdVlKt212ER9QLxZ6BTOePbb+g99I2DOx6heSUDzwXWKTxt00Lr89\n-LyBFa9kj2fI0BNuzx9XI0l+GK5M9xkNi5LwL5gaLsPCJHEEPaG2pcBIBbw6hjIka\n-L1fgDWng6MQ/eml5JsyA3G3J07/xxoVPaN9vZ8LLO9BEiz7e3Oss8a3Mw+SfsMcH\n-mJJIFT/CguJCxW3FeKs16XiDpO2Eg2WRoMJMB+psdfgo8e2q7dXIE6kCtwARAQAB\n-tCNNYXJjbyBGYWxrZSA8ZmFsa2UubWFyY29AZ21haWwuY29tPokCOAQTAQIAIgUC\n-Vm7a2gIbAwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQNkiogvQxa5vgkA//\n-Q200J62bnplhyuWMvKmpCNFG7lTtLHmwVtZmvBJiHsRwe42KRWKz6IaQgEHfBMCU\n-tSra4i2KY47j4s/kyTgWeQooH9Zxh7c4EMeyOrxpqPmnKF/0tFnDyk9SCqbrrUQ+\n-VuL9/JrZ3zB74GtRikvWXS43cuBheKPZSwdGrGWtP74Z48eKXa8mOZtDfQJACqpZ\n-lF2Hv0GOFKDNfaol6BkANpeDv3orhnysY5TqE8iA4VuHAL2MDmWg68Rb9sjPoj7U\n-TIYyeqiok/R56SkN+WnGGI7l4+pk8pBqhkjZUjVTEEABR81Vu+Rn8OxTqpKu6gW3\n-YACXnk/kXYY4I3Ri63eK0BQEeZ6Q8nrPhqHYK7fzlbwwL4Id5bDJpBZW+a6Hvlw+\n-zQXpObhMSxtDJZzEonqq5PwJLlkLPU4sbS1tuinCdAII0Qz0Tv3Nwvcrr+KWiNqr\n-vf1ed7CecDcQpSqHfhhibgykLfdAJGNpGxyA4yhOUHax4TbYZctL3ZYXRWGrF//z\n-Gv33w+8DMb3zM+BP2SBR5D7MFTqE2X7bTn/0pRnfYObjgU7+pT0bed4SyEY2mnqb\n-ikPTKfz/g+xLL46lMaJKLgBdS14A6+k3qVUDaBNMb7crSQlutmU3fRhNYq1KW9IX\n-vEI7YuEfMa6vj4rLW+68CKYBu2pNBSQZ9LHedx1UM3u5AQ0EVm7hJQEIAMTDtNiw\n-0WJUO8T7G2vA4WFHbvBoGM4CH9LaOm0JpH3L0DQ+XD5EWGICwlpkoiQiRPpGSmSc\n-KAbAgtfS+a91z4GSWEgL+q9HqVZO22yQSeCbtbnJs44BMJzgMcVxiFOc0JQU0KPR\n-zrT2TtD/Z4ryOvI2nuepv3aRz0RSQEsBnhMx/aNIV9YbRJ0YofC8BPReK5hQ6rYT\n-V2C4P0RoPCdjeGx//0Ilg+xTbPSG1urSKVUEz6UCT21MaCBsyxN5Z+Wa2K9F/894\n-y+TsWMQQcUYZ57DXFHM1dOkfDYorVATNOnv3dIJEjQDU0dYEE0yNUYG5nu+UjluJ\n-LG/ZTiXhkNQla+MAEQEAAYkDRAQYAQIADwUCVm7hJQIbAgUJAO1OAAEpCRA2SKiC\n-9DFrm8BdIAQZAQIABgUCVm7hJQAKCRAtfyNy5Q/hN0XMB/94V+GgGRgCxvwdAT92\n-RCatOJcf1YJuw1aKWjAiib0FVeChZebZYqW+jwvMkXZwxlVFhcpFlUzAqCRwcJx/\n-QoalF7u2yTL6DEEGcC8bUKrhtXQch4/D28BWJAJlR/7bItdWMIuw4WV/8s97t8Ca\n-Fn2Fc1T6/B20VclsxoeaAoXZUcWG9YIKRbEaogt3LxsRjgQLZiIicjRl0C5YpYDt\n-JvnENKuLwSRte6gKkuUi7Xw4iIP1aEwTTdZe0km6If6pVPwCK1cU9xMpsMftT1Fl\n-NdK/dJbfWoYrS24U30XvCxsFMogD5jJ+PiXUoXDBjPJmDiXrGUDR+je/RqsUKBH5\n-zyKaI1oP/A5Dq/EU5ceIfMPaS8iK4DjgwKdh8zuprDQ+JSf4iD1b/HHlwcrXmGFG\n-4uRO0X/V0ybIdYj4U4qXRm2FTA20x7MDEDW0i/cJQKNrVZC7HQnvrdG7ggG0KVok\n-tTvsIWJTmpQ3MY47rTtWQrmRdiiSRWeTFyE4sPUy3XpuPA5ZKGF5vN7A1p1WYSZH\n-gl6NBv2vp3wjwplSpYumzh0q+o7W4bhdy9+BR+K8l5a9LKyCrwL92XKLqp3iAyvq\n-RdbCrTvfppYtNwJ06JBww/b+aO08vTFY08eYbMTOVxNJUtzpq+JUe9QHOzbBNCv5\n-viIVqNRJEQw8ITQQ1AjgN3iWdnbVQEwYv3D6VNkpzDpZD6tzOmJwwbRc5rISCVL3\n-DQQglc7BYIkcI47QHBdf979H8EvA39U4yFHW3DfApHBl/gzHcEbb5RoBYc5yb+02\n-U8xGHxGJ7q4h40N+oLCc4S04gepqtCeIQ8cgCPjRdPKuP8o2O2wzDYvqr3RlzM1M\n-l+GWmv+3em/RWwhWggDIf/XhYkSbC/USJuPjQEYqJRcpx+60HYV7Ro6/RryOoLUA\n-0ZXu6IYs2qT+KEcLQ4D1XKNb0GFnHW+3SXqehl4qI0zdPUOLKpXhCpThhC8BlqV5\n-O1aP/5jnogwcW1HF+tUc4h3nwrgvcajrikjffdBIrUidoDVEN04WuQENBFZu4oYB\n-CADQwtiaFcDxMms3bNyRrfaIA5gNWEhoTRFNXMKY5SacsavamWzlfNRBIlYMl27z\n-oMZK4hpxH568UKhwQyb/qLt7gI9hLBOdgRaWZuOCghNGX3MQCBodDLXTahnvUlXp\n-pXnUOtuQmODPjTDIjNXjcsZUUzSJoanQ+Zt8OWPBYumrFC9Xw5fFRcrNmSbWnllx\n-Nveyrm6mlOydSUXq8D1vh4vkNGtQ/0nrFuSTBGsl2vY+ClX4o8iYunaHmhEboqjp\n-BMEC4WdBql6N5CI64HQ0e2iGXVSTPiMHnpqQlnaOvx3gdaYPW15hjISgjPb6ygdp\n-uyGXyPRa+0X7TlTtGXLLcoB/ABEBAAGJAiUEGAECAA8FAlZu4oYCGwwFCQDtTgAA\n-CgkQNkiogvQxa5sE5w//VrTdVm1ak3RCtZU1D25D6yiSMKZ05j6PDyJfZNI/QubJ\n-5Qq/VKzITa4kr50LNnM/wZzQPxEM5K6HyA5Wk3tt4IXqmqyZ8VUS+55sl1b5Tg6q\n-NSLc2qXmY+BeVGmQZwke4nY8wvTNI3wGDekJTPd5a1rjkw64l8n2Xy5ErVaYlhkW\n-8KyD96PTKhsJgRqGmAtZjJ2i1e64oR/VYR1B9daghGzueV/uvdhD5DxH7UsKSBUZ\n-vb7lCeOK9Fuvs12/ULgMmymFxSvKeD5+etGUPsNA3gRpqwNcipp0QNhiQmm8nRq9\n-vH8Kv9tPmaXL2JHWJB4pMXQXX/DIww3I2gaFfHL60Dr120Ddte3uqdG9KSYQHz7s\n-/bH+vFsvqr17CHflA/Ogto4rfrlL5qo3SaJVRQwI5vhA3Nx/K22WeH7l25Mu6mAw\n-kQo0c76fmSvOTpvCVC8aDvhLlm1nF1ao+dq4QafnCrKU3PTn1SlkZ2hwfFzRy/Ru\n-Vdep6Xd2M3tux3O82UoHLF7Z+4G+NgP69h87rMOSikszRsNiCi80xO3aT2CU8Yt/\n-l3sduhFP5TqvfKjTJAK6EfUIukVC0JEL8ktpYCyxb9tN6DTPHEhCJUTXZI9Y60iT\n-ZIrV7MYY51HatEEJKhpUtLeYSyutj0ubbETfrt2b3cjHNfQh+OLEVUjaQwZXKdU=\n-=GC3s\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "20963e7e259d30d399be1f84a7e4246ff12ea61c",
        "filename": "contrib/gitian-keys/meshcollider-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/meshcollider-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/meshcollider-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/meshcollider-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,51 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-\n-mQINBFlm5UcBEADFhn2Tcfr7gtsLRj9dzHGPoZYjc8Jy7wceqT8918lqaULJKgDW\n-vkEWCVOHRlrr/h1ugldouTRv3k8cdzhCR9YBakVJ3vBmn73CvHQl57jGRSogyqm5\n-hb6IXJkBdualnZVFvCDV37VYeyuSYkJ+DL3c2wEjC2gdQKUsc8ePrJZZEMJVScdD\n-hoXR/sPnu8P5yHOi56XGJi9395GUmmxJKNucD4HXjSq+7yTTs5GXm4niaKfcKyBy\n-kIGN4aEeV8sqzkN8JzNH9fc8i8MPDYLW7SGljpLSnIvIsdBRjXXBHwRnfmGEO7lF\n-sVTyepUUYX3GhLcCNhZjoMkpagVjSpQPj1gylSM4EFkmU2AgK/iEzqB7Ay4WC8EE\n-E2HrcN0ysjyhuyntFwMa1cze99vtfOIQnVJ8E58AvsOs9+xYz8DkbYntCHDD+Zcv\n-y200/knT1jJSZMXkiDciLjGSeFFbh6H+VpaFUKjy3G3yJC4BTXwnACga5/WPsgmK\n-+Y9gpTXRsZ8Op2teiwl8wI85mNF+2QmQw3uvymfojI8YPmjx2LOCbzkFYIJt20nw\n-iP1QMH3vtk+iSbcnexQlOPh03ZtDp3NbkBvBOy7cOc57Nc6IX7TllZicQj0FUjWq\n-ctUAU+f5pQuVgS8H3B4XE+Pk1u6/5zX9H0sTi0LzeQ0OdWFcvmZ8mYK5lQARAQAB\n-tCNNZXNoQ29sbGlkZXIgPGRvYnNvbnNhNjhAZ21haWwuY29tPokCOAQTAQgALAUC\n-WWblRwkQ0wARbhyHWj0CGwMFCR4TOAACGQEECwcJAwUVCAoCAwQWAAECAABJ2Q/8\n-D6FMutVLsz55vwy2FjWojcvSpk+BV50YMGYTCdnXZod7V0dP1iQ5+NMcYfpWgJKM\n-YbJ2eaWpW2TgsBd12LTjA6BKX3FquN8Y3nKZiknGCLiimDiys0+VuO9ieEH0flhC\n-olhGysRmPO5clNmZOzn3yiPgUekw6ejLVUEY8vPCbjojSuLZyjctQR3s/9oOMyvm\n-tldJ0waLi3KSOPEDQ8gXfE0QfDf2eMTdlMkbOHS6BlDIre6P5RZ5IJaLwCdzne+W\n-aS96CUqVcR3aqil4mG+T+kHf1wF99TZwY+tSXtweGENjc+QGEaR30to+catSc0nz\n-KQi3dGCH2Y+rc4VHE1S2Id88M38883mHXUeDMqzV9mHwMA50r/jzcLPybrJA1Qhn\n-ZQNWr8zGilmZfWnf2VyiPqZCIAEEFcwg6uNg9Rwy2N3Q/5+vhAVcVNJamMA/dpHa\n-hnq8HmZjraPWHL5Q9oL3Ggtc1Jahb8skaUMV26PHkXOxNFhVynghw3ujC3mocKqQ\n-stmsg+2m5Wf+TZtmbd8geMWcRpuxovYX2ZmeFPWIU+6p9XpwyiPR4mp5hWn/20dQ\n-YAyN/cQhWjDRU2i/HJB1lVnQIsSVsy3eWUJk4htQNHmk8crYocsXb5hgQ2C+JZ0L\n-gY2AxoGjqtzKkydTd5GbiCmqqFdW9ngmVerZ6yCbyRK5Ag0EWWblRwEQALdMSVUR\n-fCXTW2zCiP7g0Aj6yvyi1Wg1zK0CeRRljXKfgFoAI6IGW9QSSpXPmdsnAQOf7L0Q\n-wTTqwWNhKOLV0IWLenbpgIVwfLMkrwn71q9MBJFHiL+PgZLaRxqF5pmW34ZReUj5\n-k55Bg49kB98rfyz9K6qNxKLzY0j/8zsCvCgDMpr7U61xfz8Xo3Ds8bRdaFoH3RWR\n-wm3ePTe/8Rpm/LWWLlzhnfTpyZCUcOPh5+2yt0twHQ5zlzj7Gp8Il8XNlP6hvfx3\n-QGDuFTQ++Utom7T3QLa5E5Yx2iTD7qaNLdpQLZmcHUvdQV0QWSILccEvSJ+vXiE0\n-NvlgQIAE1pUuyTGpm97+mBeDC+4PvXUxQqFoOTJiwJxCpIAA0yvloUaZyeT0Toar\n-mowVOn0JXfbZRFFdxNUXgz9RbzANB+twGJ/ySh3mQz+Mur/1HqnCpHEjy73yOA9e\n-alN2LNvJt92hMdq+QU7I0bNqUS456h6Ft6mOpqG2y57qpl8ZL/MIvMaw3s45hA6p\n-7gzi7/TOnoqAkDUPf7lRbYjGgLkcGlimRxyL1SAYKuFgpNnhxk6BNPKdly7MRWF5\n-I+oUc5W7HkNefbHw5sdLgYZBQk8JoSwF1K/ES5gvJHWZjCiLAcbyum2W843etfU3\n-Qa/3YNt4Gri5zhAoD7U2kAs1ct3hQ6cLmDrxABEBAAGJAjUEGAEIACkFAllm5UcJ\n-ENMAEW4ch1o9AhsMBQkeEzgABAsHCQMFFQgKAgMEFgABAgAAWWcP/1ErBIqJ+SFZ\n-bL3YyLB9iObLEAUxNQP8bEV6lI9V0XUBhReasxQrMUFEXsFoFU6i/qlyfQFsBN8J\n-2QJFJT1pNE+Pleuz4yMuK5Ddcuuyl9ZklfEclmkLpSEwapFMm9IOgaGhucBMpvkC\n-2FE05oc0dEyTCdt1rBppGXvx2aw1khSiuWU13bWXw4hWfJaYKDKdTQyJLsjKGe0u\n-qjaR6yHWHbjlchQWKGUWLHomTKG6wZx9k5YbEy5LN7HnyCHos4SiWyaSpXSjCtNn\n-15i0JdH68fpKAtaGtkUYtoEJIg8qg7u4B6wM70BK2WCZr8T5yWK0c7NrojMIYjEu\n-HwEA9XPkcF9TF7V1VOZMze1ZOWSNzGOfq1yJf6hpUNrw+B3TbYsqJkuJmVSYoamH\n-0QBy0sHxlUtsALMnuKIQt8Sp20bJZLwpudXF+ZSRwrjmYc2RMc5AWaBHTGz2IGte\n-AvH+SOOaRWj+UvhSFZVKVOZHWqErzKG+NfqQzEaEL4h/6QU64h5GLhocYHCiCbFm\n-X1t01eKoDfOhwQlSlPjpDxxr7yi60ntt1R7DpgwqMNIdyXylxsc4SCvM6NDRXVM1\n-DoaPHI7GRuT1w6zEtkCGQoGsy1OBrnjeIy40mzh8L5q8L7n3jNtN/d6YCYDzP/P6\n-gb52/WPhR6CJQ2/7y3Uj7u8sPNpb7BGI\n-=as33\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "47bc404554b41866c5626384c30a9e4f9261958c",
        "filename": "contrib/gitian-keys/michagogo-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 59,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/michagogo-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/michagogo-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/michagogo-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,59 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.12 (GNU/Linux)\n-\n-mQENBFGeqJ4BCADb7SI3/+q93gIvN0AGRg9Mtz73OLIOzCHeeoyn+tp7JcYNzxkQ\n-9lfeXiEfn72Sh8gHkLtLIqr7HlIMo8DxSS8JPRVjlJGkNyAW4SeEwN2wNa5OV8k0\n-N4jBa9a1csFyCyrEkPKvkUpBkQDvNXjNxyEhHwyZqPanKxy6NXIHOJji8ObOMQXI\n-T9HwJrpjRth3u4uKG968JBTEyAXAmkt0Zidl1Ykgzcedk4mJSE9uZCW8DjSv2wML\n-XcQz8+dYsoskT3KRdkowLHxAfj1BNyNc1+rKLghliM5vSQWi+Lbhi1Bxh4sY1UwA\n-lKnAGqrnAGyIvCtkwTq5QI6ufF2ZY44bvVgpABEBAAG0IU1pY2hhZ29nbyA8bWlj\n-aGFnb2dvQHNlcnZlci5mYWtlPokBOAQTAQIAIgUCUZ6ongIbAwYLCQgHAwIGFQgC\n-CQoLBBYCAwECHgECF4AACgkQgsXACWKOzwzMUAgAuqUmK10xE5C3lUym2f72z0t6\n-a2NM5Wfjr9//Y1/okC36C5XAMEtN2UwckPzzJ5p5D5y5yzwfZq5Jd8Py29VQIMsV\n-7FbC1a0H3D+bCyX+JJ6FAmUbnWOQ/+mydYc74RvD8iwjePNT6kziZNv6dMGctJTl\n-0alwjtQYgyGkeYKnIxbcyjHX/IawLUrunb/6mSKun87T8+NM/omfFCTc3l8TakpM\n-0wyNYRiUkIfUBvB8sDUU3A80qKN/hqRKvlFu3+/kMiAc9ZYQrbmsB+sYWdmM+4zw\n-8NBw3yuYzWyPuoa4PR5ZmS9F11WLMR5vTRCdLudAqYsWu3LtV6vAIvlOUa2LMLRg\n-TWljaGFnb2dvIChSZWdpc3RlcmVkIG5pY2sgbWljaGFnb2dvIG9uIGZyZWVub2Rl\n-IGFzIG9mIE9jdG9iZXIgMTIsIDIwMTMpIDxtaWNoYWdvZ29Ac2VydmVyLmZha2U+\n-iQE4BBMBAgAiBQJSWarzAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRCC\n-xcAJYo7PDA7nB/91wAiaMlU5nHLUu0anhNQbGvUdFgKK1zO90S5KzUdJcY438jcS\n-UJW1az8l9U9JBRIfPRYVhz/Z1TAJ+dCzD7D8BXHFeGEr0zNOh87ly9aB5du7dpN2\n-oSBD6wLcJpqxt4h+XjSS2CX98/2ZIJxXENE2KySaTXP39Xl3eNwvJTUBA4XlcMey\n-J8KMp/IERli4H0O7vRyLgu3yYpUArTqAonzG1g2lfB35PQJfeInrRSniQ336otnZ\n-A8qwJ63kfUtWVDRz0g1fnvtiLGPivDJaI5hyIaUeJPaXU1+sg7YNroDu60o2NGZh\n-F+0IjHlvRfzzA+F9Vw38rpSqR3BmCdjf6Sv3iQEcBBABAgAGBQJSWa9/AAoJEH+r\n-EUJn5PoE/hgH/1T2dAthVucA/hzY0nl4SMjbg+dzNlYBq00Qwx8DRKVjk5et8+kY\n-oPI3DGILcr+ELnxNekeMv9WQBBtJanUh1K5ohZ6ohoR7lG18LXf5HCdspflB5Me6\n-LMA6iMryEP6gIs9GFuoGe2YQavm58YrkqhcPu34dGN7kdurfEXLvDfVlh5ZbKCsP\n-Gyd7Pbz04SpqykgK1udiTsLVjc70Xhv+jAMqeaCugDX6TLEwjVmZH/xsyKk2Uh3V\n-Oib5FXADAtKH+vSqqhFpXrw7R/NaBzvCbas8l61DFHiUg1/bo8vsV8MtGcyZmzXJ\n-C5Gm0njtGOil/g7JF9siUrpxs9Yyt/h+T2W0W01pY2hhZ29nbyAoVXNlciBhY2Nv\n-dW50IG1pY2hhZ29nbyBvbiBHaXRodWIgYXMgb2YgT2N0b2JlciAxMiwgMjAxMykg\n-PG1pY2hhZ29nb0BzZXJ2ZXIuZmFrZT6JATcEEwECACIFAlJZqxkCGwMGCwkIBwMC\n-BhUIAgkKCwQWAgMBAh4BAheAAAoJEILFwAlijs8M+1AH+IU78ARblqTnJeSl0iWH\n-mEsg4IBK30Q6/exDAcqOEm1Yc171uw2WnGmIvPYOQqxrRTvj3LoQ816dU6jrj6vY\n-s+XX0R2hxy7ILh17D/3UKnHcddu7rmc7pNEqZeBXaMughqQaPOWkAIe52+qK5tsl\n-sWllzTYE4jo29uZ3dAtDcKEJjBo/pIXnu1GOslE1+V4X1H9WDlwrS/JXHzyDQAjt\n-maPR+3gNesDanhrRmrnT3ZXW2ZVd3vGBibhia8PWUhU1uwOH23ySWXncgsHH0Zad\n-UMjd4w3YliZP/mLn2ghAxHB70IO7lgAgN3HYZeFoufP3pcK440A+CezfQiRcjHl/\n-oIkBHAQQAQIABgUCUlmvfwAKCRB/qxFCZ+T6BOq9CACItsrUZPKGeWSTkMHknMrV\n-K5vxIXJVCBb+Tppc0Q/J5p4EkW/RFhTwIP2zw8NLDKMh5oO9md4LXhvfIZkqQJFo\n-6ZtLa3Vf+Kj7uyxezBo4QHA+G7tDsRGaMKVrEMiyLCwS1+hg9VaNzsf7zmQW7mYE\n-vTLMHp3cVaSU7Mh2Dl8rnAaM/DpTUZQwZ+32Qrb/Z4HSa4f278iqoFpjEbBE2KCr\n-vT5yEVvpCZ4lwSgA2a+uTlRTvVV6NA/kpsxU64tmhuEOjy+ToDqJ8wv4mqvWZxMv\n-C6OhfVaXBy3U9gG8aQV0ffXGs+TbCtv8ApHd6E1/AVk0oyZGJaBVrEl688bBIWd/\n-uQENBFGeqJ4BCADFmgR7oEGkFFB5qXnuNYFq1nUGDAh0dLNtAD3J6EMxUZEXdmp+\n-DQHJw6/eDRQaG9EbjNZheycbVUoI8K2Y/Z268HQueGuIEIJv6cZYXoXdWCbDD4fn\n-HMNUX2wNlpDqWxb7PNUEtfU9hI3gmHGlr5OiEh3iV06uiZg4n2rbWPbj45m5LJzv\n-wpCrUA+pLcl9Xjw2cajaSTjdXHk9gvXTCo6s2ZS3/3Q4l+xuzZp1MGNzPQHASMKs\n-wecSJKkYg6W8I5WsVlPd9a8oQCc/Nfz7BPw31MRVR/SF5FAMqaXx5uLwghVdHB2i\n-cLURsOtJlCfP8W06gB7yS+MH45Jq/oxBRiJBABEBAAGJAR8EGAECAAkFAlGeqJ4C\n-GwwACgkQgsXACWKOzwwT4wgAy6ICcnBZ9l2jSu+ldy57F6jf5kpKZgB9NV8V2mMA\n-NeY1wMQ4VTVpU4t3s4E2LYtGNJNkPQVHbt1Pf4dGPasvMPaHMamgwgyqgYixqs0x\n-D5PdKzVrfnjwTTr/ZAFdccSPmvy5/hbY0geQ/+mzdbL07+xaT58JIoG5nySDKhmC\n-VeOvhDZtXMVAhEWBDPEgh/H9sEuBgMgZrzfE1j3q802qiXeQs6WtadWlQ1RN9Iq1\n-ZzIi6u9/BifEIRI0pO/WwKOZdXLTemFUoakoe7uT3A74N96t0G9LZVihYbEoO+Pc\n-5IaHPBV5VLeR3TB1LnnjHVf/Fwi8cnGy50kNWjcbMyEDag==\n-=jyQ4\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "5ee82a6f7ea42f0f4ecacbfc0b2541b3d98a48d7",
        "filename": "contrib/gitian-keys/petertodd-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 1901,
        "changes": 1901,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/petertodd-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/petertodd-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/petertodd-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "0870c88b9b3608b761565063dcbdc33536250227",
        "filename": "contrib/gitian-keys/prab-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 81,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/prab-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/prab-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/prab-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,81 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v2\n-\n-mQINBFYHMLQBEADLpvMbTQZ28jaV/tEcHpt/a2YiIqBdNreh6rE2MkTTjdkZJ5Mp\n-RAFOTrRYRWyBL9jmCjvjt4TToiV4quv9ubRWdTKn0cKaqcl8kwZ5rtoX6EEhcLJO\n-CAL13kDzkBrG3OqRxM7VWn/0IGf++Eq0yT2eqBi7Ae3FvC4m64TKLI2NK7GB/MQD\n-JqcXuh/0yMsPiCNZrTDBX+3SzTuSLjWt2Le1Ap2nWXf68cWqP6nhT+f76epZyA4D\n-NI48/KeylUzPSJtqBmBM+YLg/XGcxDpbIotnr7D27ThJQIXDzut9O9f7RjdlKaeh\n-G73W/hDqTqLpkR5LMa7K3unUuvlyQqYGXfHINjJibNUTLCi7YcJtuDv/DJwQxu45\n-/UUYS2xH6HpgOTdWs6VjHRCDzeAoKzkdDB+8Mvi2lZXxY0iFQeQtRNkmN9D3M4oT\n-voG0cZWjPGeKSalGVSRS3TGhdf+IqOPhOl9yrwEArlZ8HtsTUFdx/jAsWHsycCVb\n-LjkD8Mdgit39UZCln3e0bY862wF7Gm7P3ITMnTofO9w6Pqffh9WWQBtLrxIXrgII\n-vstC8H9ajIl1FDuYs1Mf8u7iq1zHh6GNzoxkm+FEvYc3mkSfx6KJD3STWqSrJcQK\n-q/1SsjBb+RiuqeFdY8krWfm2xkuUoGLEQnr14UQz1hQTTLEgSoHBSHxuHwARAQAB\n-tB9QYXVsIFJhYmFoeSA8UFJhYmFoeUBnbWFpbC5jb20+iQI5BBMBCAAjBQJWBzC0\n-AhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQvNBNjpzMrCp8dA//Yaob\n-cnFuzLjIeWyz996DPJvU62WmAE4GkZot/wk+dtIAnOCxO9YbhWVU/b1WG2PjGdqt\n-LiB6COG28/HzJoUh2zjG0lDcjvu060Bdw9rQ/kJWW22ylNAoKiY9jd3Abde5nBGK\n-0wwJ8+aMMDrO6euwgcJymJ+yZ6ZiWyG4TXXCbSdCDSsBtaaAugMlzZWeyEBEgUK4\n-nX3ZCoNiF3s2bYojr6VcgG2clM9gsSBW03XLW3lRLOvDFmdEAFp8KSJNSkGBlcOS\n-iba6zAKTY80W/+D3soBP6Lr2uP0AOFr+ZnfxvaH9YvXIFDq/jT3CH2RxiZLd1m59\n-ehUbU878ebOMlJCJYiUBY6H+vChytqy51o1np+KTQtpxKzigWiPbtyJ9zYoVVczI\n-Ds8APCqL729BPMhhTDm8I9jeEhjXNmmiJjGVJGVB5X/3w+7jQrEz6f1Ebi+cCrgN\n-tfN22bMs9hh5KkQ4JhRVfDM0DOXCvokXjdo9yXUf+Doc96ruCJKH0qR9L7qIASiD\n-hSEK3CNGY1G05Bb4wCS+FrexL11whAxlX7HCwbgjgHu07QJBYITdn3J4fUFYGsyS\n-G/2D5aLASiKGfq2TL1G9e/qI49/TksDQ6Xy4ue4cQYbf6JigfYjDcSDOZmkHPuXG\n-kSd60WPWJT6OqLrhq2c7exYCUGZaKrWBoie5yoGJAhwEEAEIAAYFAlYHcWAACgkQ\n-0cuiohvNiPY3BQ//TVOxm3UncyGyXOs+ss3fBSPE5q3lR71H4uo4CxE5pi9Y10tK\n-Qf0ULe0gRpnF2FMUkCCE5hu2oG+kPpqKON8/jwcnRCO9h2AndIZ3NRPAOXO2pn9f\n-bkDHMlInhPUxDk5zCHMTOdCONDvhocZ69gYHJdgt4w3Joji1YxTkHr2n8dFyNY7Q\n-LgqT1tpuXgopjKsUcYRhDCRN/iFsMa4D+XZR+rflvX5hkee19DzUIWmaHitfHZlo\n-VsJ7uVZKqUevS3rbBr3i+tpvvlrqDXAGksGWOdK7QFD6GtRgOD91IB82K0NvyX6t\n-M0TMh/aAAslxfH3YeTIGnETuBkp9QBCa1c966ipoHyzItmK9sF/ONPEfYR/ad3gB\n-Nc4G5w0UEROX0v4AWMfYc2CD+un3beH6rkWnopsIRJcQ71XvufqweWsPFALuBBzR\n-PTiugTi0SSSr/ayA543s90Ko2Fxrg20UYJZj1u/DEukpNJwjRSS/yyjk0hMWtzW8\n-rY1Br4Djbq3uQQj8EQojHgg3vlpHcbO77kXIJAlWYIzfHY69RGXCQG6Y7tavIiXm\n-vveP54CPFCs8Kl9t8Pq0IrWKnBGklE/KwfMzkzvrKFmi+nk9yRgwyN9G/geQt4Vo\n-W2mHmO1lvY8Zu2zpzLkvkYGXpL1VkIefmBYV/SWgyYGhLOJIFodJcMrrnje5AQ0E\n-Vgc1VQEIALsxaGYOnwWdgE2e7zX4uFz7jY5fZh0+RqGOe+Sk2g/QVKEDSLDgVF/V\n-tneG8AFgYukHPFCm0IZdKrewrkzdQOwxjyxiyFxOV/LYPesElVe8OWIs0lrMrWlL\n-ZLDguF63wnxWhjolfBzQAG29UTXYaJt6onEB59R2l426LBl3W9wvq19jolOECISw\n-r9z2IRUJ3poqBckT9j11p8yuPjGyht90dvg4htGPBV7nHDIijUnqLfk9mnAj8NwW\n-2Gf7TwW2uNA2rHV6riFzYVe2t1sB5Gdlx5ostJzo67yIc5Dffca901VhmpJTUPox\n-W2KmTpl3ObvaS0U0mkAyVObVHSuT6UsAEQEAAYkDRAQYAQgADwUCVgc1VQIbAgUJ\n-A8JnAAEpCRC80E2OnMysKsBdIAQZAQgABgUCVgc1VQAKCRAyXl7AXCempkrrB/9H\n-tOAstawkJ1IflUztgknEDE7MWuNR5XGqN7ROJAZvL8YfB5J7a4HJxTzCWft2QQUu\n-x3uwSfBpm+hRftBjm4aACrhDS6OOH4eFOUIdDASb2lgnhLmygKhAO9LW2z8jSrRs\n-tKNj9nyCo56mtd2awFESgpskavv/ilc9wU830C82FFdyBqgy5OBdWBurnb3SV5F7\n-23uD1t1n8b9gseIxNdF6Q//szAeHa4VRzzqykExXqHCEFCtH2gs9EjiZ3YeCyygK\n-cPbe6/+FP6UD810PBqnWaCShOIeT56JsOu2gMZ5+epWB+piUTn38N2Znu3EA3Q64\n-Gc7P8AtrNUCv56bof5NoTuwP/0rP4n1bsTy7siBuPqc9YvYkVCxNsGmg1Qs5h2Jr\n-ZmQlAnz8JXfi/TRxarUNQTZEsXVQzq+4C9eEMey440kXvDE2sd3p4MKnbtkDmahJ\n-XcMG5lsMMAQTpmyBf1EBEIFOwjZBqUqEkHl4FGRpEx/Q2p9/pVlogGW7SE5Ck6W/\n-A63ClJUJLsHaWiv9zJ23tzT+ooNy/iO1Y+GfV6MY1tBfLd4ZHHd2n1urFB362sgY\n-2x1TfvfXN0Myw7m1X0l9bYFycuuWfSo6qK+LCU/4P3jm21+i9lWBYX5l+NLz5mlC\n-V5aN57zmtGK7QMSp+6VY8mwG1TuhUt91S2fEScLax6qEASiEChB8m3YJOjKycP27\n-Sq9WactijiVTPslHjCNfyM4BbE9crAbDWGkIbzbka8ix3t4uBWt0YO0Ug9S3eZBt\n-w1OVxUI+LWjF5XlkfXn8W+pZ/C+M9Cs6QsAXEbfHXVZKwlAGZfvYE25UTr11RRnY\n-pl8JZglq0Z2Gip3YzJewC1pjjQTnnPoPT79elBuPmiGwNm5L8HsKUZ1IMf1k5mQB\n-FX0CilHMF/JAO+r8Obs1l7FHXvO0a95tStcjpFodZjHARi5B3VGghcypy2J9hWfH\n-YF23EcE4GzpqqSEO/SJoxuLNNtj5ZVJOxmeRz2CKCe1sI8xO7wY7ckjRaGmrvK+c\n-dAxeuQENBFYHOocBCACxVJwkGbqcgKTrg6APMxWO77ielcac8FOVpd0ns1h4TGZM\n-iCwwTR5WPRiIA6zuS3VTuPAntnK3VF9fQsLBORHIb4CzMeU3F/64SPt8NFajEQ+P\n-vPsZlyv29RSVmvhIRDTDry3Z/KQxnZ3rzazrBqGVuLBgsG45n97MQ8Xq0gkY42jU\n-VDldULYGMco5zHj/MFSQ6L3z0j1lL+aiX2xIdRyDNzOhRqaA1ByZvsRSsqW2JWox\n-78c6AbclWw0QLdQd4Pxk8k5hpeN/EtneVnFDX3hOq/C9fZs6f5aAKn81WXqPPPk6\n-G0b7KzlUoCWGlO7M5LzEzWmWvGPs7W8y2Uil99CVABEBAAGJAiUEGAEIAA8FAlYH\n-OocCGwwFCQPCZwAACgkQvNBNjpzMrCr50BAApY22DRYqmtALFieREu78BvjQT/DY\n-f9Smkga1YVr9/Ph9NJ5iSVeM8mrVkwZnGRK1UCjk16rsmB70IqlnJnyJGXqPMj7M\n-3ioOWY8fCL8fmLI2g0TbXXKl3e0nGByGXW4pwyLYa/hR7XJMco/PxqIGhEKcCIRP\n-dxq/6U9T9SYe2IkfXBYZAxfUTE2FkRpw1zSfZN3z32LM7ICZ26NRHRWo4Kv5sij4\n-0mYYecFmWdf6ib5pPCI0HmPGpblbmZgR1LoJNmuNxfpgEnPe8BbxtO4mueNW5A39\n-y7gLCmDZ8MaOGxvjGByBoXxXP62BiU910iZZZurjSD+3FD+NUX0m4yxVIZCkuInY\n-QzLxFACr26IYpcsPHIYGnEjDBFw9hHdP6tzKbjzgVSZESheQf2zwit0YYSjwHQN/\n-XGnBy8+p66As61jg8mcAN2Zd8vwFKZOvfEnSsaoK5ssAh8jixhPj+Ujgs0/PB8t/\n-ON20yr+YRAwU+RVnC/vfvrM83mjoz4mbmSLapFz/xWNhoS0ZczYEI5CyxE8peGPX\n-gd/7tim2OqUuZ3SlH5TZP3pdJcqxTNN7iNaWy1wAY/sb8As3Pge/Vv5hSYmHNjQy\n-h/62SSbTf6OZCuUGjy8fvVj51SclVKqGNprmAqVrIy0J+VeTKj4r7PGesPWJavRc\n-RFdDYRHByRDDL1I=\n-=dOwX\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "a1930ddee905f688dcb3a189a88e1317e7006a0f",
        "filename": "contrib/gitian-keys/sipa-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/sipa-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/sipa-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/sipa-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "2b5acc82aa47c6804a0b89ad426e26f9bad751a5",
        "filename": "contrib/gitian-keys/sjors-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/sjors-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/sjors-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/sjors-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,76 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-\n-mQINBFWSwMoBEADG31O8+ex+xpgzVKQgF4iVRE5uBPT0+GM6FnwqIIhXVKiBLQh8\n-YDhhgk6joh+vsLrFzKZ9kXwoiHN8y/AiNCQ0xjAUdpznD5xvHAaGIAlT/sodRNT+\n-869WgT9G1uiVp0P4ucEeilmhCn9o51LqkS3roXkj0ec52b1pslUl2WKdu1ZD+Bj4\n-3/oVZm7mmjkDwl0RHJQmqlK0bunq0jlVlgH5sdQfmLbCZaq3LhVPf73zt5qHH+J6\n-ZbU7A4cqm2eN5SyH+Nno+cq3+vXmvVI+x/jPe/dPDCXaGWf5fWI/Lbk/mMP7JAl1\n-6X44CN+hZHUnNuzeZt2/ROWZ0s0JJcjQkSe9noUQedjBAHX82s886vsFzOHvDtul\n-EuV/XAjUlkhMbhZkZaIq9ucqHmUBI4+OcFEIbbKc9TrKtJe+CYuWTNlomVk/iFr8\n-zSm/S64NiqKi/BeQGgcsDZIaJDYfDP83esOOaaxFswHnJNtHnU1PwntrJtXft0dK\n-ydtlQZ6r96SYxLDTeGfC2SNk0zbnKAGvjj04vzQeN+JSRZ75tNKmgdbJdNL8wvPh\n-879TpCwMhNDvSRG+YqCe6whaJV76a+Doxg48HCJYaj6bnRn41/QGJEyL31I8l/7S\n-YsLLmAEbqwG7erYi7WZS3cRrGJI8RwohGMZf7yraqoaOgMKmtE/Sq0tLtwARAQAB\n-tCNTam9ycyBQcm92b29zdCA8c2pvcnNAc3Byb3Zvb3N0Lm5sPokCQAQTAQoAKgIb\n-AwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAUCWWXcoAIZAQAKCRBX/5vb\n-zDAQCeYJD/47XDMfEMg4g4spo7k92XsNkvjlAhWvvxd+kxow/V8c64WQXody32FZ\n-HRSmK8dVjf9mIJMKkX4lpKpim7cQxsdTcorcdu+yk4TK+Wah61vsMhbSSllfHs1U\n-+q8jYMGnXTD+CY0aeTMrTfJcR2yN98jmNSWIL1qWmJ51RSTL6BQKb6eYtR7pWRkW\n-uMR6oFC09Db4fiKa4zhH81+/t0g+6pMY391gSluaS+OfNqGORCo+/IdG5IDzh5Vp\n-f19qXjd5oMsZQf6/P4b4XUktgl8RVRcNzdYGoXpcd8LpeHtEOh5I93ODmCwqd67b\n-YDlhDNN7iGhPndPEF6P4CNO/rXLPCZyMhRyt1dflu0KPCr+0AgR31cdhH/p7eCyj\n-FTE9gUgUHOG9OHdRoVXrwHYXwAiDBr2pp2giLpBsAwa4d2hXNDJ6wfMMCSOXKQlS\n-lHq06y/v/049DammkqW0XnEsU4qvsdteZ0jQu7Ob3LyGoytBIj8fn1OioT21W7wc\n-ns3/Tt4cQsn2ICBYB4PzqwkvGUp7fDwwHYw7rq6kvCEVDUDWMtVgQ8kjsh2OoU75\n-eeteM1Q1fV06Wfn2Qct9bn0NKRGrA8mm3lrCWYCeGqJeBvC6kna1QgV53vYRLJod\n-w3Ql4+M9tUIi9uiGLvVaGZWO9wU1EwL+EAO+6D85h6QiJN7H8gcwUokCPQQTAQoA\n-JwUCVZLAygIbAwUJB4YfgAULCQgHAwUVCgkICwUWAgMBAAIeAQIXgAAKCRBX/5vb\n-zDAQCauuD/9IDWhf/fTseA1Rt5i4gwK+8dCQjTlRS2cZtGc2aMX8w5XruDWnna1P\n-Mj/aVUncDrprRx9rxgEqIDyPheuJ6r7v6D8GjrpAjcG/BPNFtPaxQccbZbAYdzoj\n-Rrs+ttVIqS+wO7qLmQkKA4oGRMmgYh3VX8EBZNcvxaGCcJx0PfoqS8cPXTnCRHcg\n-Wx6kaFyuWtrTX+kCpDraB1KGtxedR4rzuOtUOLoqFOOfsQuOxPlKNNr9Zjc8x2o4\n-5TtwbuoEog8FIEttY6NOywpsSsvYvNB4gq1fxO49H0pQopmJlOMatMH6IRT7BJJZ\n-cOoHOh4X/zItOJZtuCOT4u+Y2XOuyLcW83X5ymIR3ZCxedsLzjyiCWm61/znJVON\n-Ws8I+gShbvauahBCB9rOHqwM0QioJMc36hUPB21KghQS8RJpGwmtk1WhFFMtAsSJ\n-w+wRfy2d6u+lSGdlA+2hEyKVm/DNQMDCQVFx3lQ6YBwAwkSiLMylrPKvs56fUjRr\n-74qoPyDxuRMC+q+TThHsy5O9r31G+Dc3+H5k4iTk354Jshjltx/k2O732e9Vxyar\n-/U5P7UZqHHuJKXDihUFrcJZq+gk8sGEWzGG/wocce7ezrTnHqR8YA04BTA4PXQqZ\n-4N42f422YYGIH/3Nm6drQkbigekLw6wx+NrxtTsYg4eCtSsaUd/RjLQhU2pvcnMg\n-UHJvdm9vc3QgPHNqb3JzQGZyZWVkb20ubmw+iQI9BBMBCgAnBQJZZdyfAhsDBQkH\n-hh+ABQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEFf/m9vMMBAJEsIQAK4ihgRB\n-05QqETpWNeV/XSGBHQINuwwEDz/k8dAJ5Uo6OoSpDULa16fs/EgAV46wTSxfWuci\n-n2Fc1AWLeLDWOax/NlycL00VDHEwT2PCjcc5uMuwR4RUTciKyByT1u7BFToZ6PyL\n-mbU6u6whcQejl6Ci2kw0Mu4n4bKTS7OL4/w/EbdfMSpRi8wWmTPMB/aMjtS2Mxi/\n-N+yQhJ9pReHADeCBoAjq0cUy+QbzvBwDCK4XWRzF7kiFuA7UW2r7/dX6l31mPfi/\n-GLA5+ftPxJ6EH8cxToF70OWiSfhOTleaqZaHUOG0V7wV2lr/bwAYzpVlxeZSCIta\n-lAA9ZLzUD2hiHYcei6kc/YjIhmlml7O0FK1eBk7+bt5wr0nvWt4Lbha4y5LxBX8C\n-d7InvB3xUYHz+S5Ul4vp0Rzx97MBL4oX2ltBEDpc1CcOgzv4dcWMG9bbh9/SaI/G\n-RehAzwkbpVUl9AEUNKO0dNlZUdu8CkehHdPdz5sJyS/9zE0A7yIECDFP9Nrht0nK\n-MahBijm4K+jOiLOZ2xyfOX1pVWLqIXGQHKjfcD3oI3qvGrQYtxB5Dffb9ACFMpZO\n-z3jM8h2UAa2/KqA4MZiZG9N6uWHKkIAMMuXWs1s439WePvbQ+5aw/qPUAMyqA3XZ\n-dkfn8QWaJPR4nRM+McYBYuS4fKK9HRJWQgcQuQINBFWSwMoBEACzmkabZ8oHWJUE\n-beU7rJF/TMbwV1IFtFxJ/QlY8rE4VnHekPMvkLi/gjx3WY5nmMe+d4JYoK/uPNdt\n-y5u0QYgH2MB/jebk4gYXCAHIPpU38h9UgHRb6qV8OaqHhmoXvKwyz+1QPzyJpmgg\n-oCUN+OAroNjl7zhunE7w7EEddFQftfPoGKEUnTjv84QOCuAb46JsYyiNAc3h6okq\n-74hY7PKCv8IRGclMPjemhBT2LEenn1t4yi7a8W/hjIe44PmQiqQEXR17keqcP/ls\n-EH9xSST1v/70ieiPqb6zbHGWzjQxqpFUJxRU6OluBCy5pHVd8wfFGYrrbTpoxaUC\n-jyA2SLr1oZZ9gaGprt6X7FC5gpE5LV9essq3O5wwvoPbyMe1F5uFaxIPhlt55oEu\n-rwVWecFJ8tSjniF/WSkTcILrOmiQZ4mylXfOP9Wk38seZReCs799KEfKFlXHk89a\n-Sj3ZvaJQxwVCnvsAsbVKmmHZ5wPt+G2KfhOkkv2A1I/UyeTT7aXvt2vxDqGuG0su\n-Eo6QknM/2Sr5Uv7BwBeSIQ6llH5ZnqKz34+HjriP8YPWzvsC959GXsxS01dCSvUM\n-92j5PvTZzf5dt1CWHMeufAY5XIH+nftkRniuScRhJ7xK3tJ7wngg7UvdeZwJWqmK\n-lJ7GI38V8HIMnd2x28yiGpj1ue6T+QARAQABiQIlBBgBCgAPBQJVksDKAhsMBQkH\n-hh+AAAoJEFf/m9vMMBAJjeIP/1UBCi6gSXzpGJBLD2u4PcZJjXBJAImZdf1aCqfS\n-YZBCaA65UrM3uaVa7h8MGAJc9kDjpqHurjDmG3YWf33KvHWYmReQvX43pZmfF12s\n-X7FZgcCfgZJKKj+ri6oHQonZzUMrecEcAJLLaQoD3Du3iZpETiyRLL7sJ1lZSaCJ\n-gYKnN4WV5GypvdFvb8vSUBST2h0D6AewGKMNh8ruRlkIxI+YSlywgYIH+O0qNKqW\n-wBlZc/5f+JZ3hu+cjx/+Zn+w+saIb6SgySg0UzN35b2WM2YzrfQep4ah3NIxuC7e\n-qzmfV6GnRtuUrBLVJ8qyjif1JSM9tZfinnmAB4/U5Qfc+YYViIXMTljmHWvbokas\n-tTBfVAw74yWnkv4ZuXf5SkTmGwEMJUOat0TSr085Ck5y394bRepdI1Y+1cdqpwMQ\n-QmkKyvcBlREQ7Xk1UnDDR3o/2ieVuGGHRp8jmoWBWGq4Cm43fYOlVe+PcaX0tDns\n-Tmmh2uwEU/TXe5qGil51OlSM7qhAMqhWUIYphSOcdvApNXuiWMfnTdjsNygE4HVh\n-Jq4efJ/nlx5N+PNAK2GpzeUJQGyxiVsXybq+h8UlvytBsdz1X6ZYzBv1yYwANThU\n-rMB1s4tMaEugX0aNByLcsxuS4ixd2qzwkYVz25Aeko/U1v2/j2cIRtrTNgja3BKE\n-N5Ug\n-=80Es\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "baaec76b8c656a04beb4a91155dff40658c87bd7",
        "filename": "contrib/gitian-keys/tcatm-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/tcatm-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/tcatm-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/tcatm-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986"
      },
      {
        "sha": "a3b58ad9940200a4f9157a5b4dc10357b284dc29",
        "filename": "contrib/gitian-keys/willyko-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 85,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/willyko-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/willyko-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/willyko-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,85 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1\n-\n-mQINBFgs/RoBEADFxycJTUvwqzBZZ0aBZXbmr8Ppd3EPrgBRd47k7uwanf7UFmvY\n-Xt4gMEI+EdV0GuoQ0SeoAmQqc5Fxu3AQe2XFbiF+ZNNYT3+V/5GAzWsAH22ncQr0\n-AuK95pPi+PZ+M2h669cq/RzFUXZDew0NobR2oBS5h6g3rgmmejVLRqnUpWkkSrqi\n-aNgD2GSn8g820wM6LpdxcjTqmMpHHT5owAbv0UP3IcdtpBaS5McoUXK+OAdKK/Zw\n-JQ0J1kx4vIyNwuPD3klziGQw8Izb/gFpWg8XaJmMhD5BxNuXJC58Bj9/sFTc0GDQ\n-VKMFpYpNi8a6hLPFb4hMjYF77awoz57HtyOOsS03KO/57QE1htx+2NeDm4XkZSBk\n-+wrU3zgbtmOBcfzEHS/HrROksYDi+Qw3HZL98nfDEWNfsDzfhMZ9wHdM3NsR2xk6\n-oNtX0CprS1n2Xr2AY9X1oNgiZCJaSftU67j3lr+9gHOH61ktxt3cUCDodUFjkpKn\n-r1CQ2LB63AoUbwGMAeozdXZWzbXJAJbcH9G77zEi9rW0WA2yMSxTXHlpE9MS0UcE\n-BVkIMv2b9iQzlhiS8jh8AiKFO1PuT26Cw52N/lSPhA81zw79pZfSYwKFICGHYfvw\n-ozZeN9Q+PPl5tqi/3SExxlZKe8EmaveTrUfKMBS4lQO2gWe0bCFgLOIzIwARAQAB\n-tB1XaWxseSBLbyA8d2lsbHlrQHN5c2NvaW4ub3JnPokCOAQTAQIAIgUCWCz9GgIb\n-AwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQjjqPMkfby7+0wA//cX7Tc3Nz\n-19ApwSbGfC8pJA/nSybcVivroJRftpzeOmYrVM084T9REvYwugl89djvxn6m96iQ\n-kqoUGWhBVBtDReVCL7z53G42lHjemaFcxBhIazKxO0qvcc/UXUVOs2OdUbzObDFL\n-dHO5xBVqEnW3sq+r4blsXR8U79B9IIri4+2hy4OoEjYv9DzBaaoaqU+F3mudXbmo\n-R+hsWc+mklV++TX/kuw6EWT8tusFjXrfqqKcKPRPhbn48OSGWsEPc7yELf7pYFR8\n-uDU40faJqkvQ83h5WMTDAhLxd/918ZitqBhjSP+7Humf2YhSto7YmtEWlbeAW+qy\n-TcBYkK6SJh8Do3xZd/prFBKEu395n5VQKuLjXaOjqMc1oDHQyPJJjXSN5thLHvan\n-z7nNLt2QZO/kxXITDdbWlktVe/WSoive7TuY4dGuX4Si2z9wyhFYxtZDsqE0qmqN\n-jIDAZ7u8Qq/LGqpdjOmYr2fEwHe1yVIS+BtVGvtShkX+J+QPb8qBl1d7Ii5i5Afl\n-GJoLLIUFkPcIRTYPZpppGSuqfyWdNnaasbLH44lxJisSMMw+fxZabt2bykYN/ZXa\n-RP/ItDj81vklg+n6r4f/nZTF1r0UUy4LbSbBY15B4Xm0Tdvh1PMfj/w2q10l7bZB\n-XLi9Z/QPaW7TyzaBuLkVckbVFn2nYnXfzHG5Ag0EWCz9GgEQALCgTibFnw+Q3PEL\n-G5/peQcQqHxrPAB37HV39B1DedGhVUa6aGSUaLoNMyUjUX1HWN3mWFKTYVB4CH5Y\n-xjaXUwxdwCZgBNe4TDglKFPuc+frlSTZxDVE9/fjArmrUP6TPU447ujspyngGLa5\n-et5Uig/LxIX/+Mm0ZiYJxb1rMJwK998U1Ev1aHxgNjwTI2ehcKu8CAGOyflzh6a2\n-iTBUmLfnQMv5248P2d4P8WDiPq61CWTYTMCFqHqkYKy7h9BYIuMajw3KsgOUNfL2\n-1e9Ue8yv5UchZ+GDlBjidIkoK1nd2uJ0kPJkafLGWbcliJfvXxKliZnSbz1Cd4A0\n-HDKKCwiuwSLy2aYbs7IRtAOyDER4+fjBcqtf0QTIvoAdNZ9gL64DKVaB58vuSixj\n-K1i83XbTOt3q821HxxBrX9u6HP2E5kFdxT2KHDbisAWNP0rFnHVpjugehKFfZb6q\n-jbDt3nQL5uCQ8gTNCd4fsoSK6KhCDjamDXlKmaGlxqwOV4W8ZwihoeGt690h7NIH\n-h4eiSmMOej3or32lcDETEwrjA2PxvcFsikFc56hRkTaSyyBEH2xhkRrjXMqiQfH0\n-j7iOY2PWpFEuu2HVzqe5dBXzn9sMIwxeNCxR/P+xHMqPUlgD1SXEYCNLvvzD6p0+\n-kqSe7PiJoEIv351T3hnBhQ6rK0ChABEBAAGJAh8EGAECAAkFAlgs/RoCGwwACgkQ\n-jjqPMkfby7/mQA//YsAOdDBl0GscB1PBNXi8VMlI7yG9cqiGrYnZX7h4wUoGEbPI\n-jap/PixIsxBCf1BqBRDJdFyvzH9amLlcaVNdCyh6Yt1Pi8kassmz/kbIYgpbFkIL\n-ES9N24N7BZ94P77OQy5wic+B4WqJnVrtKr9JBalgBSOMqtccYCma5Ew00mqp+FXM\n-suDyBk2HXyl+u6/rRmqZ+BoU8iRpus9F80LFKGEsAgjLjKv68KmApzjunzsBotKk\n-g9AsBk4ygbp+nECAtsxpbLMo4hPr4qWm7G4mU5g4xOK2chpAPeqyf0857RWgsXaO\n-kjrUu/M5Hme2eIlXwBF14ac4QPnY1rlAIaulvXzmQnMYQFZiw9vaTOdqBFHjkh7T\n-XYRAr589Woo25PfMJCbC+Rop6ku6sCFMorbBwojyRhFJnk9xsy5kP5D9IhkPAKu/\n-/ABlei0xPOl/gCUUJP7aIikZgS5lAk1TSe/R+yV6ExNwudtLw1G0K2/sY3B4Xo3X\n-Q1lTAQPlnAIeK/vlbttLZNIBWquw4cPAkPpIyjmE1dd6jGQdUyZE22uPBx+gpq1w\n-AacmVLwvPMe1De0ilJOzj6KpXWBCwt0DWXWztovpBVcAC+qbTrZF9H5dllpqyzKt\n-OvxzGssjrX4rDkOx7MyVa2tnXmeCuSN/RvlOUwPvf5zYM8Wh9g7fc6jcDQu5Ag0E\n-WfkOfAEQAMNkzAQqSenpXtHsnuCqM1oMMF2kRzny/Jqh3q3BxZ8MHLDhoRRaTENu\n-lA4APRXMNM/wlZJUSLX8wWBhufnsPtMf6OOVMZ4AVbXHjUgyJ7lO1zHdj0u6PpYP\n-9gmHthIz7FF+cxHj4ziC4CmtRctrn+/U4MwYtNPhxkTnS26oOZes/HXMYSvQBMgT\n-AP27GNOBiJRthjIEITvSvS0YZOxgLtWgGiks/pGUw5wm1rguuQVyZ1/LfXBooYJo\n-u/v21AEjpuTg7JlwbqXr2k5LojAGq7AxDyWy21IW0E45Gog38zg/hwNll+hjRbSu\n-pipf74WXR6xMMlW6A+XWUvElkicfDx8e9LJUnqWbZ+FL7X4SB54ZHNCvfo/8Ug1V\n-2tiY9WbUZL9n5ZQHNlk3J+UK/KDvwey1VzKPFjpQNlfahhnppDGiCey+mERjI+75\n-gPbk0ctOAEYXgLJjoonGX+iByAfY0YyJF281CtaK/sXQU+TzLLT15WET+gYGsJdY\n-xh1PdPscNdSgYudvbKZoFnqUwEGEfD8dT5bjOphfY5+LvGUR2GuLNZpMidcduTYf\n-SWAY/vQHQIJArXu29BKscm3tg6tzXu3l9p/bGIQUQB7obN91y3xD3BLICIPRGhKE\n-924wxxCuH1vLKmxWDdAAxKo+rEdLJ/rbZnjWQENEFiJ114fBk2NVABEBAAGJBEQE\n-GAEIAA8FAln5DnwCGwIFCQPCZwACKQkQjjqPMkfby7/BXSAEGQEIAAYFAln5DnwA\n-CgkQYFGSo/6YSmANoQ//SbcKxkop2zA2HrWS4THcEJQwSJ0KGAN/VB83JQhoWThX\n-CWxsFNJjBy7+rsoXd3wQG1/aN42nTuj+eh+R6WJJaqqnMqd52l4Kc1kJA6z4DGsy\n-3azCDvyzibM0AkJyMJyYi6HRKjzA4M+xKR1HoT/NdQUP5CBUVfvMblSaOWiw4rja\n-IhWcbgbQ+Zam/VaV5l1O90eaD9tL3twSfPLYZ/wkeO63jJKHBpI8fpMql/bLg9WD\n-Au3h/lU63NWe5lZO1z/jIdfiTSvg8nu162vcOgmUCWo9spkybjJd0Mx6ZId79rVo\n-58lwZ4QoaMgPGoVP67LyLOxJTIXeyG5xr1LxhMPMGbnBhlnMQrboLV9kPEL3raHE\n-EEKDTtZimVK3ZxmfyBd6MDmwcL/K73xu/R8be9TgdwD8/BZJSOTkO87qZ82G9T7E\n-oY5IHU+qd41/Yjbut7AVtAlCr5Lor31EYvZh3gI/H8uZFddOu37Ij7e9Fw2ywv3A\n-wPks89tfOvahkfCOJ29znB+uQYpJ461jjhdkB7EHG4ae07M5rRtkNbIc3dqbnMhz\n-VA3JpRJN77xPXV7uITHo1s+b50RvWmfYW91zvipaSZxbMLuGBMhn/1QaM1djLOYN\n-JordDBwEr2bi5a063yUbZrk6ddECuyxndDHWDNr+Tqx6o7lmAT48UJ199zA4scbf\n-2g/9EiRPGcRovsn1tUdjzfmWDxhrRV6F3rYJB1+i6Mqeg2iHHYxxiNDXcuWYXHQ/\n-WPWLk5+lgh0rQbrE7InzEejoM0FIHzLTm0lSQpau50/PT2FiH6sOEEDyT2IhBtXX\n-eOnKAi1IfGNMzEaPEY8PXH78dEGv0iXIgy4l8Bc57q09Z9R/OUi+Yb1p+S5F/aOi\n-7Jd53GGE1bfBIlsMos092XoiMdvKmAczyCUIempKHUBPoqfJge77qk7zJKkyM3Dk\n-VX0lXLdhj0PfslFrNf2uRF4uZkmfUV7peeD023c0/SVp3ILUAVds52yawi6Exv4a\n-bbvhIw72fc31frCRBqc9HVsBraoozzE9bksG1MdNI3GgKxecOu9lldedlIqi4lO4\n-7kTVDLEmcsQO+sSxkXQz2sMSD01CQndpPuhFNlqvVnfK+Kv8pSG37VzSSQz1nt5K\n-w/fJBo4T/ztR7D9RzbSDxBP8Jjaa+UYabjab5HcE0JI4CpgmzIOB7qPVbYCn+LNX\n-c8Xw5/9iTw+ayawl7PCGRfd14/OPRzI8vS0I9bF8AG84XM46yxAtYieH/9RI3b6/\n-GiQYDkBNi6Kb1LfSzx8oKAkbMgiy4y3vWxLQnE34bAoXjGiYdAMliOsyGcvmnObD\n-GmSTIlIqunq60CyhaUSIkl2VRhjzz0igfS9751XEvnjeXDc=\n-=PVBi\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "e0f6c4c5fdf56ffbd6308d4e0a6624290feadff6",
        "filename": "contrib/gitian-keys/wtogami-key.pgp",
        "status": "removed",
        "additions": 0,
        "deletions": 131,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/wtogami-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3451483d28381dd86ed89bfd62f99c6ba979986/contrib/gitian-keys/wtogami-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/wtogami-key.pgp?ref=c3451483d28381dd86ed89bfd62f99c6ba979986",
        "patch": "@@ -1,131 +0,0 @@\n------BEGIN PGP PUBLIC KEY BLOCK-----\n-Version: GnuPG v1.4.13 (GNU/Linux)\n-\n-mQQNBFHOzpUBIADYwJ1vC5npnYCthOtiSna/siS6tdol0OXc82QRgK4Q2YeFCkpN\n-Fw/T5YK34BLVGWDHPoafG2+r1nXIuMZnJIiGw6QVOL2sP9f7PrMmzck5KJPHD14Y\n-GRd9BPkhmt3dXzOCjhig7jI6hKEYayfJNUNs9nlZEvl4QWIBMmk+IyqQz3f1HMfl\n-/GkFDShBYF8Ny7Ktlx7AaXymajm4DCrTkbj5V2ZDqJgyQM549EoPSwXBQYrEjye3\n-g2viC8rUFRFWFjdnx7jFEb1uhx71YGuqiLxKihUW9pbSNK2cLweFazHSVmh+B/pz\n-fxHfUn+ijLSIAnprTmc/rq89un/iiPt0O/mspcCZ6hE5pFIyX+SC+9PrGz+bFSmw\n-PkMOZzG489G8k4t/uZsit6helkl0emg6JiXLTmS/oTuT7B9Z9/MeEhOXFcxUb0fr\n-2aZkEmH5d1oxSBis3D5nylmNJXOUSCpJAZ8E5Sr/5FbF9IPR+NSzosVacqCx5Dxj\n-vJ7HpZKn6pJfmwrghVXQv04NRTcxbHNmwd98cofBtWX8yBO8M2M+jZrU+BVDUbb/\n-A1oAyIbUUswBP768Oh11bELhCly774VwBqTojm2yodLGSyysx4zoa6qL7myfor0m\n-a+K29y8WH9XGmKGMdUOg+q9z+ODky9aToGvEo2eVhKIlJsk0aFAGy/8awy6qRIIj\n-UqLMq6XoFcYlE7SmnFUDDDPlBK/NkFFqySpFhKNRyt69Ea9kYXOxDnf/EnBwHn8m\n-PiFQpeZqgnmhyj8Nk1SSQBgUi07NyXdQ/WIYpWmqqqfHRVQgSE9C1920T1zg/E97\n-n5yYjI/gQQwq9wikkJmog6Ny7MSiwIU4LYV0pTUdI4//EJMId2FH8YEUfvG5ds+F\n-H/o/D4CAJ86KjspizfH8jEjhn0Rm/OtrxLz1rwA1gtF//P3TYNWw5qruL4stP3Rx\n-9Gve8Bm7oCBU73UT2ZJomEsWE3oqXinLRl3YCsjGDg/d3ySD6i0/BBROLIeXkh3M\n-M1CNCqREDGLA0vxQi1o7Zi7ZA4gWPSzvi/8KtSzY1iAQODxWUmOICRP7KQODWJmt\n-roTqhKgZ39wlR6eqkO8ZfAvRYsjvkL+EZFbbKbHxVJLhKchd2qHS+/Q3ov4SFzWY\n-/cE0ChOPDM587Jkps2bynKQAzQ6810FXmJc0ztrPeD3PEbuyY4KNJV8HGViRDJXi\n-wvs8eqfvTDGDPl4aLYVCKO9VqZ2OJvqhRhh71LQ2xRrX1LGnYLnUGCMuEQYKvMcI\n-TSssM/VAfeWAPJDklD0lVNJ7d9Z5ugvJHFc01SaaB47Aod2SPWp5DeiY4A8dcy2w\n-7f4Wx6FcdP1RXqaRZKCapBooN04vsvGllCshABEBAAG0KFdhcnJlbiBUb2dhbWkg\n-KDIwMTMpIDx3dG9nYW1pQGdtYWlsLmNvbT6JBDgEEwECACIFAlHOzpUCGwMGCwkI\n-BwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJELEXnrc0fcENY4Ef/23L9iC/39ekJ8Is\n-1IZdCoDD7/DgVaZqydDcy/ha9uaDFY4MQ0h9RZYo1axVBth/Yxzh1XnvitW8HFKn\n-DXn5wJI++KWpdLMUsTrc2iWsjAGgicmN5bkQvfTnRwn2pF17EUUEhZ8YyE3qMSVD\n-rDBECLAswT4Oiq9r9yw3VCFsRaxz5bhk9AAzWjam4H7mAfaEAOUvuX221v+KGSDM\n-UsGAAe+GjMPL8KnGgEbISlSUF1Ubcw3EChcqjf3BID2gMLkAnGAoxlCZSYievytg\n-71mcHyIf9yF861QrGcrCh6/objtRdt4IDUVwo9wapunRmYCdZux4ApD0Hit8nAsm\n-QtxftSK6FWBTOCIRoOQTjwE8qj9GYTIbUFppX66Dzh00td5NKkWz0PVze7YSk2hC\n-KCVBYyUYHgkQYVlYLZw7dBrXSXv7ph95vc93RDS031cU7tPOrthqnMmhtg1WAwzH\n-xc2v3az9Gsw1RyxBAOVpkB0AFODiEiVg46xqmxaBPXfQOg/buZA2l4gK4U/pVUZH\n-72lle2CbBw6FoSx40Y3GYZWB2uEdXBTNLlhX7q2Jvo8WdeTxEv5ACZsjI7K/wrzt\n-nmvCHefOmVf4tefkXy1MyEvBt2+Ek9bHmHDL1BSk/JdJzJtam2uaP5pGum/PwIUW\n-KBatmHKZUKwgOIml9btB413C4zSK3GQmC5Y/+TxYybACIdxTDqPSczVZ5Q+jSywX\n-shdOoLXDRyrYhT2sHjZ1W29B8ebokqwousF77EA94sqfQvDDnmFpvfq9+m0WYtOh\n-PFF/yxOtlbPJYX7mnC8+dUgobSA4AR5Yrclt+levgivIyNuBwzevHRDMreMZKl2J\n-uiOT8tkuu66fAwEltIowjjV7TBRfij4QLXl/zfFo8jKU8efL3xluXoRn7g+E5FZ3\n-19KTF/DWMcttfeTUYVnv0QTnstb1RGnVj7w8JMy90mKdMQFpl7IzHd2n6LrhEw1V\n-1AaPF7EcQBOlvsvlZdIFQrFyhKozKoGi3wRrl/bNdebxjIjPzfN9GgbiufFjz2d7\n-DMR9GFXfUMVxLncaqBBy1X7MV17ZF7K4uw6DET4fRoecb4N5mJVUxvYq4iZApnNP\n-npgGdmlcyPD6o3ynx/vkw78m13Gfgw8i2OaUY7xBdOyNVEvkJZBLaC2hw+TKLaZa\n-v0RExtAO0i0QO4Y1eo78Pl9jOpz0wkJ4KG0270l1Jza4IyaIhYRDWagWOfOp/cXU\n-cvKKiuJhLOsX1Bapz+O2Aor9+EwWRdPd3BzE2ABdmKHPwrKobNp75wrCpQ5mZifn\n-DSTJRMPQQJV3wGfB2sP0NE47U8w5CCmVK8gEuqYr6wBl/CCq5tjiRc63VM+to5V4\n-tVNTCJWIRgQQEQIABgUCUc7PqwAKCRBr3f6OVKKs8cYAAKCFCLJ5wc+iAVCFRevh\n-xTcJct0fiQCePHpY37CIeP8s9BH8GqCDftUqh8SIRgQQEQIABgUCUc7YwAAKCRDd\n-f+mrhdawLOVxAJ9Tjud26LtbM2mWcPj2eT7dhqgZrQCdGyMwMMVzp40lsCK44PrV\n-+mpFO7KJAhwEEAECAAYFAlHO0BkACgkQw35HI5aSdvXfLw//c2zZxXg4bI2W7gkB\n-ZQJIOWnmPZfhrXQNeFuetyGoWTm4ZWxW362AdDGiQSGNNkXqeBPOitKOkRyZP/Z3\n-h1vwkLkwdFZyWXK00BzYBKfjThWV1BAnArQLewSiLlE7qSnsPEY6FW0PNv711cbL\n-lXSUP1/lW25Nx7L76GAF6sHreoIdglE8YH5y310JuFnqPa0uaJG+qDo8Mb+WkyLy\n-Q2A3Atws1tIB9vHsq2FCt9ACyAEA3AqtHR4uMFmIWpUYy77fJAZdzLZTWf0X5XYw\n-XILNPOl/I0iZrq3LYQAvJfIwjWAC/lm6uTLlvkIJHKyhcIT+RocjMV7bY9ezrC5i\n-Cag3gaOZ7USMt0h59KdmBaHHNa32n3PSHg9XWljqoWMRjuaRdcA7ofK0BHDJbHWE\n-cldKXC09laWOXbyNmJsfug/23vNE7fS/cAKSIgEWszEwHJCahB2i/HqOQF0DUGpq\n-3s5oIXs2xIuN0yT6yIIiQnTU/FkWDDu4D1OZNrDW6QG3cde0PRak/0fr4Kv4iB3E\n-CAzlsRBlWKNu/eE4QBx6cbvLqjriijhGAF+8Y1zvRKNKPr96hSsETfVytuKDTp6F\n-u7PAarrSATGXI92Hy3ThAZla0VOYUyeWPktqUMDNq90tIBZbwKpOMMqvJmZfgdOU\n-4ldDq1f5+2WhAt1aTL1GJVCuYcCJAhwEEAECAAYFAlHO3MQACgkQnSOpPExjO3Gi\n-jxAAsD+luooqqoz3A28ZxwfCDV+ovazQ4Bw6hVU0zKKZIz/2H4jwmLtLSHtucCRM\n-xRksZmnqf1p2nn+BKBXDInx9vI9HziMu7fWkzhuovAIf9+X/l6EYV1kQx0bIM1qU\n-BxXWPgGdrgSZZHl9Qff/BOBnrI8NJmVBDzOh3BSs0BrSR7aFbkSNbjk/JcP0JEyk\n-j6wDKQsop/Ca5AboLL0uQPgTvhxCu4VROKjhu7o3s7G3xlxTpimwYklDQuYFaGKj\n-ZNIGFq2orfIMBnj7ZEQVXzhWltlHcgPVP5TDfgd4pVUbyUB6ras7odJWWIHnUFmj\n-1l5bGidIwRXGFusE4iR8pR528LG2KxNDNQYipsKRY9m+wH+N7gbSgK8DxmocvieV\n-vcILFS5VrPLbEO2oC13NMljmvua3ovDB0CEh9rybaH+/oA+VDS2L3pkgATTju+Vx\n-6+mVdlvnrA4mJ5BoLHzrleKybS4ZkbtVBh1KOYmo95NgVifRvpVPB6hKzwqcjYFV\n-fVYBxTryTBRyd9MLsqpPKnGLBENTFvKDxRCK3iioNyVhXdS0z/UyF1C2hwNTpnjY\n-pGCu+Es3SILJg2TvQcwLM0OoYBA1bcONm2XbkTrdCpTOtQcSewQSkijREunx14iu\n-pvNSWeNmbjQU7gNYhvwcBgh90tWgNCfqTtSa5xSe46tmv0SJAhwEEAECAAYFAlHQ\n-1hgACgkQZwn/QC8Dr2hT/g/+OFUYPXfWo0+ILdxyTGP/v2mSw/X3dBCEYUqefWxD\n-umcwnksey+thEGFBlxbwpyOfAoTzZLUupaG6BacVgRUvv8bTne4v2H1d22aBXyjC\n-HMtQPhupn/giamu8q8hCPFrDp6inIAeFuz1GmQaH6xWO5eYBuYXQtxlvZLWBsuMT\n-74en4e3vjczxGmJu/nvM9ugcYsexA/zcN6SRGr7t2pV4ZElPzPBRyAzhYqhP1YlB\n-Rydz60OjgcWYEoJKWhJOfmFJ3ZoNGAz4TGoBkDIq4olCF0/cxqrtHN+ZnEOLwiZ7\n-4ZX90avcjEFtM+Wb5dBHNpni4ISoHcVI1X0ye6tuAOOt7RywbET/0oIW5iSNMgJ0\n-X4XYgOIQ2+a8yjGBjo9I57k0vp1mL6Ji/eaa0dlppcCGnzvSHss+O0qO212pg5Yk\n-GGfjX1y1ZeSP3ca9C2XyOGIVw2d2Iu7OyqAv/N81xt6ZgG3qixQC0nmgOmn7Kh2B\n-20W12KpLxKS8RQdHawGau3MBGKeqbfK6/eAzm22yD4/yJAoW4hKgm84z3FbKUN8w\n-ulYMK9hS2c4egpoDAOJ/QZLLXFWiyi7/sHZz69G2AweWCjOJh28Otg0cUHoLo7jw\n-oO/L0rCsOQMbUuIumYXBPHNnDwv1xfv2lT8tVzf6GksFJBAw0DybxOMTaOg45Lhz\n-jGS5BA0EUc7OlQEgAN6t+BV705uoCsdHtQBq/HKGGD5tBiOzy7Wd4nF/c6EWzET4\n-QUnmw6bDnqjxrk9MWniPDf1O9MvuB4qIY6g9kEjZ+VSQpWUZpZ5bMXCNHrfh9J2Q\n-6oLWqDmpeZv2OI0O9wxT62QaFei2qBtimSnBudLSCnvmU3S0h1PflmJsbj+tVcko\n-w2yOh2bjH1jkVAODHvEbxqyD6fiZhbfUVbPC49SBmXv8Gv0UywNSkP+iqJdwZAb0\n-XtjRx4WjZCkTwJAnbM4CJ63+5Hd83BtWZAZbGAh76XY/cSkDirXtXC+2LNUmP5W2\n-QY+ur5Bvz8LHaqJMXLAtePdkv5kpd+jXBrZieXUtqovxZaQTinl7C3L2TZd/ivxD\n-F3Rko9BFDuXXcdZrxBY5b3146IvSPp1y0WmHRxhAPb+RuiHQMt8K92nOhPyvtWXB\n-mWz0GnW9L6+CW4LKSPRSnE057hyxYNP/DcDd+fWFH+MmhU9noqHfJXSaLVzdI5PI\n-L8N44AndPIojnlxrxRs7Ik/nW6cTV9H3agg+24yyTdFkACbfIS6wWXOHeHuBzmO6\n-VI7pXOZJ9vZT7zI7M/hVci0R3putsGqgRfByRWWQ2DNeyrwUHexZNR/NYz1uhvA6\n-dBfKcuAwqxbdSrW/BxJ+iJWdkgYGCV67VLlO6S9sO33HgOanpPr5R9V1KsFVh4dN\n-j6BjZ4ALE5FPNW+iONnuXvtZbN2cBlBzMDeFC9oZoYCs1Pkmk8xUY2sAXPUt1R0G\n-D/miIb7ig1N52j9P6vv6fPs1ghmc/hGkhaXyjS54B5T33V6M9g+yba9mIgi8ZxZa\n-G+4rlFFKA4HS7wYYRJoqMvnc/qBYvoWLaPu3Xq6AXrJyuAaN+e3L8++cWbYHBXF9\n-qt+Q2RFL0FNiYUQuwkiaerysnm1a0H7ZtJ4zjl4ZgA1Ej7QcylTIbgFW3L7FnyMH\n-/5weLLN2wdjAtzjhRPYJLbV6V/gFbbpCpr+caDUaxSNizQuhhzVI5UrJegaHCCrx\n-DCiwWRFYzN5pqhtgzcaImK76DmPIk+Yrsum5KJZQeGfzKxvF0YnwxU0bxFzcDZJD\n-X2oCJn828Aw2j0nIlVlrrao0JMkvTBeZehO/11U68M2vKGEqrsQOb/BTXyLCeZwn\n-UGow1WvYfRxEZTrhhiYw94EH06gbqmKG1xsuV4LDI5z63/6ACcQW3orMbMymJCky\n-4HiNVZ7SNeGoYe380CJCwv6GN1opKTAWp84cr2KzhAzONGqNWNpUhznAXlI+GzCc\n-D2H330L1atMqZHjgpEfrkowvJ7WBM5KFKDfylaTKhYvfZcTOZs5OmRZSW3U54wRD\n-RMP0d2+k3vRililNhHIErHbjhYFc6zubVbBhvUMAEQEAAYkEHwQYAQIACQUCUc7O\n-lQIbDAAKCRCxF563NH3BDSX2IACugAdZqX+o/+pTkSrj+NEAcP0ZMci8w5nm/yOP\n-VlGyY6PXGuQKcBtvz3LWtIDdddMc/bD/zmZPwSzTx1MMOWc+gjR0azXe2RrdMHYk\n-8pb4X4Op2Nkasoc/8hNsRKaU24WUAQMqrRREIVBEOuHGl1A52Lj+aFB04rRHrkMl\n-AqjB5bwArPorIBdM417EEl4hjEZ9BpQxbUgBhTgGTZuc1u9PsKz1YvQ79YJIRmSH\n-n72Zaf35zY55eOQeoVBzGmFPq+/UFqtRNWA7jmRhHvMz/yR33B/RSxyTJuPb79zi\n-2mIZOrViG3X/UNL4qtOc1cKXQBi+FjHAMlGrCc+D5lnyOhEvqoEuvQic7V6C8Pvk\n-9q+jngn2Gs4pdJO8FOnwaC5xp/ZNE0v7x/KtAHyBA6iKcaepgoRQPSt1ONiHyfh1\n-iGgJn+Y6IHx4YDYKEY0UIzHhCfWUl8XZWcf4wLGEbGztkRbkCFqrsja5IeaO7umB\n-i6C4f95uSGjV7SiIMJOE8xo/m2g4VCnnmk7U996JwtBMKREMMqa3ABK4trfBL3Kq\n-P6I6ZTlA/C5svkVUVwWOMZau9kLDsxv8keGrFteZtfYa1KPAROFwNuBU82UW0KtX\n-QQbZoBKt1o3LhqEu+hXU3iKocYWSbBThH8u6vPNgSnW2Qcv3gcUU3jGmYeHrGiUO\n-SuEWxwlKUxCxBNfmz1FGswlwve1LsS3RTz/XB/L6Ubhq5L7FevrXz8152kuMqnpy\n-m93sXkL1eJVo07hH+otcRnMzy4vUar9z/N12t3hfTffx29PBKUCc2PKPVpLfJX2i\n-hieHk23fhLnptjc3lm9S+bHO3rqEWHqgNgNp9bpuwiLRsIy6qTtmC8jxXkGXvQrS\n-+2Hv6+jRfDcqEAK3vqi1XL7Td81KRjnheBtsKpjS2PFatK3uTo6v1oRWJCdRCxg1\n-HT6a9KvZ+DNKcxlQISKAOLX72qpziaDl4CpBdQy4Zg2pr9oYkLdlfkaDK/OH4J3M\n-wJiVf/uNPPd+yy6xZXK0SPZHf+mf5Yt+Sim93hIbdS9AMdvHKB5n3DR27H+/okPj\n-w3J9z85hxgP5KspizQR6t77AWddPRy/l3BBZeb+HiaeKGBJeSNWXpkPXHkdjLW8U\n-QStzFR8r15FWJTmamIknjJ3XNbytMCpu8cj2ZVZdyjPcHEBL3WbNYYtauSuYmyUO\n-yXBaecM/KoTdvHiERU/mMuf7f1ftftCHehZoNaP+BeIbIud9IHIdrSQBCW+RC1Y1\n-8opDLMtnIOX3OnyCN38ELYcuNLMJxBqnQgi7MVDVcT1+BN/+lFQtG44+rPUkK+T1\n-Jk1/tIJqcyc1BfY6uFHFXWWnqQnjl0XpZo+/bMDxTVy8yND2\n-=icdI\n------END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "430a5a7ed3031c82e2f73080ecd040b1331011d6",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88971352f6106d87156188cc0e29077baa05b86d/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88971352f6106d87156188cc0e29077baa05b86d/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=88971352f6106d87156188cc0e29077baa05b86d",
        "patch": "@@ -137,10 +137,7 @@ Build output expected:\n \n ### Verify other gitian builders signatures to your own. (Optional)\n \n-Add other gitian builders keys to your gpg keyring, and/or refresh keys.\n-\n-    gpg --import bitcoin/contrib/gitian-keys/*.pgp\n-    gpg --refresh-keys\n+Add other gitian builders keys to your gpg keyring, and/or refresh keys: See `../bitcoin/contrib/gitian-keys/README.md`.\n \n Verify the signatures\n "
      }
    ]
  },
  {
    "sha": "fa795cf9c52b82cc3cccd21483360d6e03f767f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc5NWNmOWM1MmI4MmNjM2NjY2QyMTQ4MzM2MGQ2ZTAzZjc2N2Yw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-01-27T22:45:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-06T14:54:31Z"
      },
      "message": "wallet: Disallow abandon of conflicted txes",
      "tree": {
        "sha": "d06ffc7091c67a6bbd0f9ddfa11d893f1b3afde6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d06ffc7091c67a6bbd0f9ddfa11d893f1b3afde6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaecGnAAoJEM4rdWl+aaVISGcL/0vsns6qYvPqSyOOhyJNjkuZ\nqzwha56/8wyEGTlkRXiy5JUKpJsOQxM/wvrTolV2TclBx4ux5xwPY0QX3hUK/Slk\nOIQtekLNQj1s4hdPBE/xKdYqMIuBgStboPBY9K4m9kKykRYlO2X09PFzgWLnnd+b\nl3DWGMSdiAv0goFNgrpvDktjXu1RM74An0Fxq8RpsJctdHN4L/O2PBa4B2zl/gRb\nNuQc3AhocuPvD+gA3Syy5a1BVdaKXbz1kc0gboC6prWmfzHi//a286432BE2mUfp\nq1rpiMRNerY11pzW2+Euj3R1oJqCe/eFQik7J+sKH5ibFAuDm8EtPpglqnJ0B3TB\nirt1hclwc72qdUGmS8WYdV1Rgl5bWKV8wttH67VTylzqyhX+/TDfaNhJk26uZ3NT\n9RJ2geyFF+gc12wwVdVxKYx5MgOmAxfQrwvCYHFtCzpa7tza9iR7WMMg83vB4GVI\ngKp/K0e69rhfUd5PCwuDIt8OLOTiBspYWyb4RpNtwQ==\n=f2Pl\n-----END PGP SIGNATURE-----",
        "payload": "tree d06ffc7091c67a6bbd0f9ddfa11d893f1b3afde6\nparent 598a9c4e4dcd03c6d80fba005de729a6a3aeba7e\nauthor MarcoFalke <falke.marco@gmail.com> 1517093132 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1517928871 -0500\n\nwallet: Disallow abandon of conflicted txes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "598a9c4e4dcd03c6d80fba005de729a6a3aeba7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598a9c4e4dcd03c6d80fba005de729a6a3aeba7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/598a9c4e4dcd03c6d80fba005de729a6a3aeba7e"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 19,
      "deletions": 9
    },
    "files": [
      {
        "sha": "139c2bf2d5efd93e9087fcf445218ba9b3c69789",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -2190,21 +2190,22 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n             \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n             \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n             \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n-            \"It has no effect on transactions which are already conflicted or abandoned.\\n\"\n+            \"It has no effect on transactions which are already abandoned.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n+    }\n \n     ObserveSafeMode();\n "
      },
      {
        "sha": "258161cffc2000b30ea8c235394c799d09df6812",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -1083,7 +1083,7 @@ bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n {\n     LOCK2(cs_main, cs_wallet);\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n-    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() <= 0 && !wtx->InMempool();\n+    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() == 0 && !wtx->InMempool();\n }\n \n bool CWallet::AbandonTransaction(const uint256& hashTx)\n@@ -1099,7 +1099,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.end());\n     CWalletTx& origtx = it->second;\n-    if (origtx.GetDepthInMainChain() > 0 || origtx.InMempool()) {\n+    if (origtx.GetDepthInMainChain() != 0 || origtx.InMempool()) {\n         return false;\n     }\n "
      },
      {
        "sha": "8fb860cd7e9cfa141ef13ece581ab88b87c1b5e4",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -8,11 +8,12 @@\n  descendants as abandoned which allows their inputs to be respent. It can be\n  used to replace \"stuck\" or evicted transactions. It only works on transactions\n  which are not included in a block and are not currently in the mempool. It has\n- no effect on transactions which are already conflicted or abandoned.\n+ no effect on transactions which are already abandoned.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -28,6 +29,11 @@ def run_test(self):\n         sync_mempools(self.nodes)\n         self.nodes[1].generate(1)\n \n+        # Can not abandon non-wallet transaction\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', lambda: self.nodes[0].abandontransaction(txid='ff' * 32))\n+        # Can not abandon confirmed transaction\n+        assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: self.nodes[0].abandontransaction(txid=txA))\n+\n         sync_blocks(self.nodes)\n         newbalance = self.nodes[0].getbalance()\n         assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost"
      },
      {
        "sha": "f621d41b4e521eb565e024924aeec1300758c9cc",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa795cf9c52b82cc3cccd21483360d6e03f767f0/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "patch": "@@ -231,13 +231,16 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n     assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == bumpid], [])\n \n     # submit a block with the rbf tx to clear the bump tx out of the mempool,\n-    # then call abandon to make sure the wallet doesn't attempt to resubmit the\n-    # bump tx, then invalidate the block so the rbf tx will be put back in the\n-    # mempool. this makes it possible to check whether the rbf tx outputs are\n+    # then invalidate the block so the rbf tx will be put back in the mempool.\n+    # This makes it possible to check whether the rbf tx outputs are\n     # spendable before the rbf tx is confirmed.\n     block = submit_block_with_tx(rbf_node, rbftx)\n-    rbf_node.abandontransaction(bumpid)\n+    # Can not abandon conflicted tx\n+    assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: rbf_node.abandontransaction(txid=bumpid))\n     rbf_node.invalidateblock(block.hash)\n+    # Call abandon to make sure the wallet doesn't attempt to resubmit\n+    # the bump tx and hope the wallet does not rebroadcast before we call.\n+    rbf_node.abandontransaction(bumpid)\n     assert bumpid not in rbf_node.getrawmempool()\n     assert rbfid in rbf_node.getrawmempool()\n "
      }
    ]
  },
  {
    "sha": "f6cd41d93e121466a1b7481324c47c3973d1ede0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmNkNDFkOTNlMTIxNDY2YTFiNzQ4MTMyNGM0N2MzOTczZDFlZGUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T15:00:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T15:14:12Z"
      },
      "message": "Merge #12305: [docs] [refactor] Add help messages for datadir path mangling\n\n5460460 Add AbsPathForConfigVal to consolidate datadir prefixing for path args (James O'Beirne)\na1e1305 Clarify help messages for path args to mention datadir prefix (James O'Beirne)\n\nPull request description:\n\n  Change `-conf`'s help message to indicate that relative path values will be prefixed by the datadir path. This behavior probably merits clarification; it's kind of confusing when attempting to specify a configuration file in the current directory with `-conf=bitcoin.conf`, but instead loading the `bitcoin.conf` file in ~/.bitcoin datadir.\n\n  ### Edit\n\n  This PR has been modified to document all cases where relative path configurations are modified to be under datadir. A small refactoring has also been added which consolidates this normalization.\n\nTree-SHA512: be4fc0595fbeba33d17af08f59898af45e76a44f00719ea0282403b155ac6755584604fab765250a3aa14ed6991882c4d1ccbe601184362c5ba97c886bdda344",
      "tree": {
        "sha": "db5a49a1cf02e8435a5b633ce1e3d270db05dc4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db5a49a1cf02e8435a5b633ce1e3d270db05dc4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6cd41d93e121466a1b7481324c47c3973d1ede0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaecZEAAoJEB5K7WKYbNJdffIH/3fRofwC8nafajy6YQTwQWLF\no1LtKJKsW/uNJxphxOfb/nDHHnwrpID7u5R2IRJf2B+AjMxlBlR5OnGaOU0KjPH4\nZ3oNk9d6WwctTS9ekP91XbeP9AluS7nh/7sH2SmwePbQs4iyO0vRjSj0dGr91CuK\nMUTQOP7MdXam88jciUCzXElxQQy3HqEzjvCd0MLG5gka1BDYboK+eW12kubcESaz\nAWEnTqUMWqZxhr8PmAJ5Wjg/tnCn7VXMnWc81JOWmbJ2GgqcHG2LVTmDylZ0Dapn\naDuo/x9OT2npE3FaszdCvmQ5c1DJv95Pc9DqyMf4t8qlRsUSBl9m+tswcztgYeE=\n=EgQP\n-----END PGP SIGNATURE-----",
        "payload": "tree db5a49a1cf02e8435a5b633ce1e3d270db05dc4c\nparent 88971352f6106d87156188cc0e29077baa05b86d\nparent 54604600c3de6cb18540c0911127173f68ad246c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517929241 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517930052 +0100\n\nMerge #12305: [docs] [refactor] Add help messages for datadir path mangling\n\n5460460 Add AbsPathForConfigVal to consolidate datadir prefixing for path args (James O'Beirne)\na1e1305 Clarify help messages for path args to mention datadir prefix (James O'Beirne)\n\nPull request description:\n\n  Change `-conf`'s help message to indicate that relative path values will be prefixed by the datadir path. This behavior probably merits clarification; it's kind of confusing when attempting to specify a configuration file in the current directory with `-conf=bitcoin.conf`, but instead loading the `bitcoin.conf` file in ~/.bitcoin datadir.\n\n  ### Edit\n\n  This PR has been modified to document all cases where relative path configurations are modified to be under datadir. A small refactoring has also been added which consolidates this normalization.\n\nTree-SHA512: be4fc0595fbeba33d17af08f59898af45e76a44f00719ea0282403b155ac6755584604fab765250a3aa14ed6991882c4d1ccbe601184362c5ba97c886bdda344\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6cd41d93e121466a1b7481324c47c3973d1ede0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6cd41d93e121466a1b7481324c47c3973d1ede0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6cd41d93e121466a1b7481324c47c3973d1ede0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88971352f6106d87156188cc0e29077baa05b86d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88971352f6106d87156188cc0e29077baa05b86d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88971352f6106d87156188cc0e29077baa05b86d"
      },
      {
        "sha": "54604600c3de6cb18540c0911127173f68ad246c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54604600c3de6cb18540c0911127173f68ad246c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54604600c3de6cb18540c0911127173f68ad246c"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 25,
      "deletions": 21
    },
    "files": [
      {
        "sha": "8fc708be6b91acacf15e12b9afa7d1b8d50f9f4d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=f6cd41d93e121466a1b7481324c47c3973d1ede0",
        "patch": "@@ -35,7 +35,7 @@ std::string HelpMessageCli()\n     std::string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);"
      },
      {
        "sha": "50643ff96ba8346d3c0a2f655268c8fbec8d58c9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f6cd41d93e121466a1b7481324c47c3973d1ede0",
        "patch": "@@ -336,7 +336,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n #if HAVE_DECL_DAEMON\n@@ -348,7 +348,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n     }\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file: this can be an absolute path or a path relative to the data directory (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n+    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n@@ -362,7 +362,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n     strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n@@ -500,7 +500,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n-    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie (default: data dir)\"));\n+    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));"
      },
      {
        "sha": "cdd2e67a6998f459b594400e0500f9612a1b3e91",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=f6cd41d93e121466a1b7481324c47c3973d1ede0",
        "patch": "@@ -72,9 +72,7 @@ static fs::path GetAuthCookieFile(bool temp=false)\n     if (temp) {\n         arg += \".tmp\";\n     }\n-    fs::path path(arg);\n-    if (!path.is_complete()) path = GetDataDir() / path;\n-    return path;\n+    return AbsPathForConfigVal(fs::path(arg));\n }\n \n bool GenerateAuthCookie(std::string *cookie_out)"
      },
      {
        "sha": "6738bbc6e4470aa5904b0cb61e9b273e470a858a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f6cd41d93e121466a1b7481324c47c3973d1ede0",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <util.h>\n+#include <fs.h>\n \n #include <chainparamsbase.h>\n #include <random.h>\n@@ -188,11 +189,7 @@ static void DebugPrintInit()\n fs::path GetDebugLogPath()\n {\n     fs::path logfile(gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n-    if (logfile.is_absolute()) {\n-        return logfile;\n-    } else {\n-        return GetDataDir() / logfile;\n-    }\n+    return AbsPathForConfigVal(logfile);\n }\n \n bool OpenDebugLog()\n@@ -624,11 +621,7 @@ void ClearDatadirCache()\n \n fs::path GetConfigFile(const std::string& confPath)\n {\n-    fs::path pathConfigFile(confPath);\n-    if (!pathConfigFile.is_complete())\n-        pathConfigFile = GetDataDir(false) / pathConfigFile;\n-\n-    return pathConfigFile;\n+    return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n void ArgsManager::ReadConfigFile(const std::string& confPath)\n@@ -663,9 +656,7 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n #ifndef WIN32\n fs::path GetPidFile()\n {\n-    fs::path pathPidFile(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n-    if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n-    return pathPidFile;\n+    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n void CreatePidFile(const fs::path &path, pid_t pid)\n@@ -936,3 +927,8 @@ int64_t GetStartupTime()\n {\n     return nStartupTime;\n }\n+\n+fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n+{\n+    return fs::absolute(path, GetDataDir(net_specific));\n+}"
      },
      {
        "sha": "05138a9bfed958f7850a07b5c52f1fd499d0ff73",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6cd41d93e121466a1b7481324c47c3973d1ede0/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f6cd41d93e121466a1b7481324c47c3973d1ede0",
        "patch": "@@ -191,6 +191,16 @@ bool OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n \n+/**\n+ * Most paths passed as configuration arguments are treated as relative to\n+ * the datadir if they are not absolute.\n+ *\n+ * @param path The path to be conditionally prefixed with datadir.\n+ * @param net_specific Forwarded to GetDataDir().\n+ * @return The normalized path.\n+ */\n+fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific = true);\n+\n inline bool IsSwitchChar(char c)\n {\n #ifdef WIN32"
      }
    ]
  },
  {
    "sha": "27736f22d58de56d0ba49d6654d034ccceff47f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzczNmYyMmQ1OGRlNTZkMGJhNDlkNjY1NGQwMzRjY2NlZmY0N2Y0",
    "commit": {
      "author": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-02-05T12:48:05Z"
      },
      "committer": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-02-06T16:14:48Z"
      },
      "message": "add fivepiece key fingerprint",
      "tree": {
        "sha": "73be086dcfe65852b9cfa96ddea5f301c2dc60fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73be086dcfe65852b9cfa96ddea5f301c2dc60fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27736f22d58de56d0ba49d6654d034ccceff47f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27736f22d58de56d0ba49d6654d034ccceff47f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27736f22d58de56d0ba49d6654d034ccceff47f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27736f22d58de56d0ba49d6654d034ccceff47f4/comments",
    "author": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88971352f6106d87156188cc0e29077baa05b86d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88971352f6106d87156188cc0e29077baa05b86d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88971352f6106d87156188cc0e29077baa05b86d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "826902155e47a362df8199f374630dd93015490f",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27736f22d58de56d0ba49d6654d034ccceff47f4/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27736f22d58de56d0ba49d6654d034ccceff47f4/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=27736f22d58de56d0ba49d6654d034ccceff47f4",
        "patch": "@@ -7,6 +7,7 @@ F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n 9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n+D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012"
      }
    ]
  },
  {
    "sha": "5ad320598f06370de65f83b6c6a993123f00b329",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWQzMjA1OThmMDYzNzBkZTY1ZjgzYjZjNmE5OTMxMjNmMDBiMzI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T16:59:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T16:59:57Z"
      },
      "message": "Merge #12363: Update README after filename change\n\n8a6c62b [tests] Update README after filename change (Conor Scott)\n\nPull request description:\n\n  Update test README after filename changes from #11774\n\nTree-SHA512: 2dd2e4d12e9e8bef4e76996f610aea758d221f8da31e14163168a6a0c635d32fc547542112d43c37fa165c289572b12798caf467fd933082f8eb129f8e5d6ca8",
      "tree": {
        "sha": "bf85f5d221dd419cf2074a4d53c82c1fd9835e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf85f5d221dd419cf2074a4d53c82c1fd9835e17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ad320598f06370de65f83b6c6a993123f00b329",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaed8NAAoJEB5K7WKYbNJdGbQH/Aq8+gbkB0vwzQ0KqH1S1xMh\nkL6IFX4NK/BKAbWXzkes8Eka94CjBnEmQU4SLiDP7r2pi7HKcOtqkqLZ/fTa9fT8\nuG0YHSD0kbt9y45TRsJOqUMx/zLIonqM8tc/cnUwWWKCTuK+Ag/A3YqFI6aEXwOP\n9PQ7Cs74VY2qi8cuiwZK4pck689br41neTV5KRcuSacq7/jjAG34aGV6JFZ/Z2pj\nGZLiujZjfDFBMErxVBjD9J/pqPDh+K7vPtWWsI7dUFl+k7/A7MORL86g5A99F8Ip\nRPbplWe9w/JQlYbVJwTEs81Kz+B/X+qoeTTouwLu3QLIkeLMQz4g8NScq0Fjbts=\n=nK6S\n-----END PGP SIGNATURE-----",
        "payload": "tree bf85f5d221dd419cf2074a4d53c82c1fd9835e17\nparent f6cd41d93e121466a1b7481324c47c3973d1ede0\nparent 8a6c62be636fb1bbdc4c5915c1d3bf969524b20a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517936380 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517936397 +0100\n\nMerge #12363: Update README after filename change\n\n8a6c62b [tests] Update README after filename change (Conor Scott)\n\nPull request description:\n\n  Update test README after filename changes from #11774\n\nTree-SHA512: 2dd2e4d12e9e8bef4e76996f610aea758d221f8da31e14163168a6a0c635d32fc547542112d43c37fa165c289572b12798caf467fd933082f8eb129f8e5d6ca8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad320598f06370de65f83b6c6a993123f00b329",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad320598f06370de65f83b6c6a993123f00b329",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad320598f06370de65f83b6c6a993123f00b329/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6cd41d93e121466a1b7481324c47c3973d1ede0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6cd41d93e121466a1b7481324c47c3973d1ede0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6cd41d93e121466a1b7481324c47c3973d1ede0"
      },
      {
        "sha": "8a6c62be636fb1bbdc4c5915c1d3bf969524b20a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a6c62be636fb1bbdc4c5915c1d3bf969524b20a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b522c4469a7ff32d9fc2663bc22ed3740744291f",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ad320598f06370de65f83b6c6a993123f00b329/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ad320598f06370de65f83b6c6a993123f00b329/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=5ad320598f06370de65f83b6c6a993123f00b329",
        "patch": "@@ -33,13 +33,13 @@ The ZMQ functional test requires a python ZMQ library. To install it:\n Individual tests can be run by directly calling the test script, eg:\n \n ```\n-test/functional/replace-by-fee.py\n+test/functional/feature_rbf.py\n ```\n \n or can be run through the test_runner harness, eg:\n \n ```\n-test/functional/test_runner.py replace-by-fee.py\n+test/functional/test_runner.py feature_rbf.py\n ```\n \n You can run any combination (incl. duplicates) of tests by calling:"
      }
    ]
  },
  {
    "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDYyYmRlNzY3YTEyMTIzMzExOGMwNGM1NjI5YmQ5ZGUxYmEwZjE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T17:05:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T17:05:34Z"
      },
      "message": "Merge #12050: [trivial] Implements a virtual destructor on the BaseRequestHandler class.\n\nbdb3231 Implements a virtual destructor on the BaseRequestHandler class. (251)\n\nPull request description:\n\n  Granted that there is no undefined behavior in the current implementation, this PR implements a virtual destructor on the BaseRequestHandler class to protect against undefined behavior in the event that an object of a potential future derived BaseRequestHandler class with a destructor is destroyed through a pointer to this base class.\n\n  This PR also fixes \"_warning: delete called on 'BaseRequestHandler' that is abstract but has non-virtual destructor [-Wdelete-non-virtual-dtor]_\" warnings in environments where the project is built with the `-Wsystem-headers` flag; or environments where the `-Wdelete-non-virtual-dtor` diagnostics flag fires from system headers.\n\nTree-SHA512: 3c3b0797a8dbce8d8c5b244709e8bca41c4e28d5ba554a974bf7fc9128413e1098c457a00e51b21154ce6c11ce5da3071626e71d593b2550d0020bc589406eed",
      "tree": {
        "sha": "814e7e384c9cdf0517ef23fe84d5f4f7a681ed59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/814e7e384c9cdf0517ef23fe84d5f4f7a681ed59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaeeBeAAoJEB5K7WKYbNJdfFkH/j5oud77al4e6oWOuqUfoY5f\nbjcOSutJ2Nvg00eHMjL8UoH6epLX1Mw9w6wuhBmjh1IO5yS/cgAqkvAl7inIMDlJ\nYNmxrYzWgWzzxfnDWi7wNyH5iO3TQHYU/pggdZx/FsKWKaMBPLI6uDx9L1UbTmzq\ndu2c0TNJjQvqOH5DYcUBy9GsVTsnCTLxtTEkuS39KyWJ+EO3SqiSfH+nrHy6XBEo\nKFTksaq9/XJchh4WAWCrBa4daiAdjZHjPp1IEcyaz37PS9MjQw0hiBc/SKNLF3xm\nILJca/q4khzi3ePzNJSm3MRJUBc5vKe21FL18WfoGJKKEyRLUsvbjBBLR4GApiA=\n=zsHs\n-----END PGP SIGNATURE-----",
        "payload": "tree 814e7e384c9cdf0517ef23fe84d5f4f7a681ed59\nparent 5ad320598f06370de65f83b6c6a993123f00b329\nparent bdb3231bee7a729a94045133fc4335226b2b0bb9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1517936711 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1517936734 +0100\n\nMerge #12050: [trivial] Implements a virtual destructor on the BaseRequestHandler class.\n\nbdb3231 Implements a virtual destructor on the BaseRequestHandler class. (251)\n\nPull request description:\n\n  Granted that there is no undefined behavior in the current implementation, this PR implements a virtual destructor on the BaseRequestHandler class to protect against undefined behavior in the event that an object of a potential future derived BaseRequestHandler class with a destructor is destroyed through a pointer to this base class.\n\n  This PR also fixes \"_warning: delete called on 'BaseRequestHandler' that is abstract but has non-virtual destructor [-Wdelete-non-virtual-dtor]_\" warnings in environments where the project is built with the `-Wsystem-headers` flag; or environments where the `-Wdelete-non-virtual-dtor` diagnostics flag fires from system headers.\n\nTree-SHA512: 3c3b0797a8dbce8d8c5b244709e8bca41c4e28d5ba554a974bf7fc9128413e1098c457a00e51b21154ce6c11ce5da3071626e71d593b2550d0020bc589406eed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ad320598f06370de65f83b6c6a993123f00b329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad320598f06370de65f83b6c6a993123f00b329",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad320598f06370de65f83b6c6a993123f00b329"
      },
      {
        "sha": "bdb3231bee7a729a94045133fc4335226b2b0bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb3231bee7a729a94045133fc4335226b2b0bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdb3231bee7a729a94045133fc4335226b2b0bb9"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a60d3b3b6d04204bea6685de30633abbc89ec63c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1462bde767a121233118c04c5629bd9de1ba0f16/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1462bde767a121233118c04c5629bd9de1ba0f16/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=1462bde767a121233118c04c5629bd9de1ba0f16",
        "patch": "@@ -198,6 +198,7 @@ static void http_error_cb(enum evhttp_request_error err, void *ctx)\n class BaseRequestHandler\n {\n public:\n+    virtual ~BaseRequestHandler() {}\n     virtual UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) = 0;\n     virtual UniValue ProcessReply(const UniValue &batch_in) = 0;\n };"
      }
    ]
  },
  {
    "sha": "85aa8398f5d13c659299b81cdae377462b4f8316",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWFhODM5OGY1ZDEzYzY1OTI5OWI4MWNkYWUzNzc0NjJiNGY4MzE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T18:51:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T18:51:44Z"
      },
      "message": "Hold mempool.cs for the duration of ATMP.\n\nThis resolves an issue where getrawmempool() can race mempool\nnotification signals. Intuitively we use mempool.cs as a \"read\nlock\" on the mempool with cs_main being the write lock, so holding\nthe read lock intermittently while doing write operations is\nsomewhat strange.\nThis also avoids the introduction of cs_main in getrawmempool()\nwhich reviewers objected to in the previous fix in #12273",
      "tree": {
        "sha": "2d1fd73c3efdec208b4e607ea403a38275cec668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d1fd73c3efdec208b4e607ea403a38275cec668"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85aa8398f5d13c659299b81cdae377462b4f8316",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aa8398f5d13c659299b81cdae377462b4f8316",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85aa8398f5d13c659299b81cdae377462b4f8316",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aa8398f5d13c659299b81cdae377462b4f8316/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a8b41d16e6a98437b66d6c82a2fd2741a08c4dac",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85aa8398f5d13c659299b81cdae377462b4f8316/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85aa8398f5d13c659299b81cdae377462b4f8316/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=85aa8398f5d13c659299b81cdae377462b4f8316",
        "patch": "@@ -547,6 +547,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n     AssertLockHeld(cs_main);\n+    LOCK(pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n@@ -581,8 +582,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Check for conflicts with in-memory transactions\n     std::set<uint256> setConflicts;\n-    {\n-    LOCK(pool.cs); // protect pool.mapNextTx\n     for (const CTxIn &txin : tx.vin)\n     {\n         auto itConflicting = pool.mapNextTx.find(txin.prevout);\n@@ -623,15 +622,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             }\n         }\n     }\n-    }\n \n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n \n         LockPoints lp;\n-        {\n-        LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(pcoinsTip.get(), pool);\n         view.SetBackend(viewMemPool);\n \n@@ -670,8 +666,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n \n-        } // end LOCK(pool.cs)\n-\n         CAmount nFees = 0;\n         if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n             return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n@@ -768,7 +762,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // If we don't hold the lock allConflicting might be incomplete; the\n         // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n         // mempool consistency for us.\n-        LOCK(pool.cs);\n         const bool fReplacementTransaction = setConflicts.size();\n         if (fReplacementTransaction)\n         {"
      }
    ]
  },
  {
    "sha": "b1c2370dde9ade180c638e5d9a4797f085322b5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWMyMzcwZGRlOWFkZTE4MGM2MzhlNWQ5YTQ3OTdmMDg1MzIyYjVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T18:27:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T19:10:09Z"
      },
      "message": "http: Join worker threads before deleting work queue\n\nThis prevents a potential race condition if control flow ends up in\n`ShutdownHTTPServer` before the thread gets to `queue->Run()`,\ndeleting the work queue while workers are still going to use it.\n\nMeant to fix #12362.\n\nSigned-off-by: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "02ebdb4ac8d4e0903692da747acb4e4b94801b92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02ebdb4ac8d4e0903692da747acb4e4b94801b92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1c2370dde9ade180c638e5d9a4797f085322b5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c2370dde9ade180c638e5d9a4797f085322b5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c2370dde9ade180c638e5d9a4797f085322b5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c2370dde9ade180c638e5d9a4797f085322b5b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a554dcb097166be004e192fd635b81c9d59e1f4b",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c2370dde9ade180c638e5d9a4797f085322b5b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c2370dde9ade180c638e5d9a4797f085322b5b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=b1c2370dde9ade180c638e5d9a4797f085322b5b",
        "patch": "@@ -449,6 +449,7 @@ bool UpdateHTTPServerLogging(bool enable) {\n \n std::thread threadHTTP;\n std::future<bool> threadResult;\n+static std::vector<std::thread> g_thread_http_workers;\n \n bool StartHTTPServer()\n {\n@@ -460,8 +461,7 @@ bool StartHTTPServer()\n     threadHTTP = std::thread(std::move(task), eventBase, eventHTTP);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        std::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n-        rpc_worker.detach();\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue);\n     }\n     return true;\n }\n@@ -487,6 +487,10 @@ void StopHTTPServer()\n     if (workQueue) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n         workQueue->WaitExit();\n+        for (auto& thread: g_thread_http_workers) {\n+            thread.join();\n+        }\n+        g_thread_http_workers.clear();\n         delete workQueue;\n         workQueue = nullptr;\n     }"
      }
    ]
  },
  {
    "sha": "f94665466ed50e868c98b1a1c708ad5767727bb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTQ2NjU0NjZlZDUwZTg2OGM5OGIxYTFjNzA4YWQ1NzY3NzI3YmI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T19:32:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-06T19:32:51Z"
      },
      "message": "http: Remove WaitExit from WorkQueue\n\nThis function, which waits for all threads to exit, is no longer needed\nnow that threads are joined instead.\n\nSigned-off-by: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "cd933a3e7b4e3e3930ec37bb6651dc6523ebb3aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd933a3e7b4e3e3930ec37bb6651dc6523ebb3aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f94665466ed50e868c98b1a1c708ad5767727bb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94665466ed50e868c98b1a1c708ad5767727bb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f94665466ed50e868c98b1a1c708ad5767727bb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94665466ed50e868c98b1a1c708ad5767727bb6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1c2370dde9ade180c638e5d9a4797f085322b5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c2370dde9ade180c638e5d9a4797f085322b5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c2370dde9ade180c638e5d9a4797f085322b5b"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 1,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5000b0e2455df9ae31049903233892539e8d6a8a",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f94665466ed50e868c98b1a1c708ad5767727bb6/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f94665466ed50e868c98b1a1c708ad5767727bb6/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=f94665466ed50e868c98b1a1c708ad5767727bb6",
        "patch": "@@ -99,8 +99,7 @@ class WorkQueue\n                                  numThreads(0)\n     {\n     }\n-    /** Precondition: worker threads have all stopped\n-     * (call WaitExit)\n+    /** Precondition: worker threads have all stopped (they have been joined).\n      */\n     ~WorkQueue()\n     {\n@@ -141,13 +140,6 @@ class WorkQueue\n         running = false;\n         cond.notify_all();\n     }\n-    /** Wait for worker threads to exit */\n-    void WaitExit()\n-    {\n-        std::unique_lock<std::mutex> lock(cs);\n-        while (numThreads > 0)\n-            cond.wait(lock);\n-    }\n };\n \n struct HTTPPathHandler\n@@ -486,7 +478,6 @@ void StopHTTPServer()\n     LogPrint(BCLog::HTTP, \"Stopping HTTP server\\n\");\n     if (workQueue) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        workQueue->WaitExit();\n         for (auto& thread: g_thread_http_workers) {\n             thread.join();\n         }"
      }
    ]
  },
  {
    "sha": "02fc8863630a20e75230f8bc3ba1051c480ae560",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmZjODg2MzYzMGEyMGU3NTIzMGY4YmMzYmExMDUxYzQ4MGFlNTYw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T19:55:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T19:55:36Z"
      },
      "message": "Add braces to meet code style on line-after-the-one-changed.",
      "tree": {
        "sha": "371045b7e7db2765970eed343aa0bed78c93adff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/371045b7e7db2765970eed343aa0bed78c93adff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02fc8863630a20e75230f8bc3ba1051c480ae560",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fc8863630a20e75230f8bc3ba1051c480ae560",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02fc8863630a20e75230f8bc3ba1051c480ae560",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fc8863630a20e75230f8bc3ba1051c480ae560/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85aa8398f5d13c659299b81cdae377462b4f8316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aa8398f5d13c659299b81cdae377462b4f8316",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85aa8398f5d13c659299b81cdae377462b4f8316"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eb8599b7692ea58d09cbff7f74820589445356ed",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02fc8863630a20e75230f8bc3ba1051c480ae560/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02fc8863630a20e75230f8bc3ba1051c480ae560/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=02fc8863630a20e75230f8bc3ba1051c480ae560",
        "patch": "@@ -548,8 +548,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     const uint256 hash = tx.GetHash();\n     AssertLockHeld(cs_main);\n     LOCK(pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n-    if (pfMissingInputs)\n+    if (pfMissingInputs) {\n         *pfMissingInputs = false;\n+    }\n \n     if (!CheckTransaction(tx, state))\n         return false; // state filled in by CheckTransaction"
      }
    ]
  },
  {
    "sha": "1c9394ad477d0c1ca0ab1caa6024a7e70c125d15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzkzOTRhZDQ3N2QwYzFjYTBhYjFjYWE2MDI0YTdlNzBjMTI1ZDE1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T18:32:53Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T20:13:59Z"
      },
      "message": "Fix fast-shutdown hang on ThreadImport+GenesisWait\n\nIf the user somehow manages to get into ShutdownRequested before\nThreadImport gets to ActivateBestChain() we may hang waiting on\ncondvar_GenesisWait forever. A simple wait_for and\nShutdownRequested resolves this case.",
      "tree": {
        "sha": "a5a75ace2bc0447d1b85b03ab4ea9ca8e61f0d33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5a75ace2bc0447d1b85b03ab4ea9ca8e61f0d33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "14dd8fc8ac3df6bb5de4cda6e10761ce81cf1d1e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1c9394ad477d0c1ca0ab1caa6024a7e70c125d15",
        "patch": "@@ -1645,12 +1645,19 @@ bool AppInitMain()\n     // Wait for genesis block to be processed\n     {\n         WaitableLock lock(cs_GenesisWait);\n-        while (!fHaveGenesis) {\n-            condvar_GenesisWait.wait(lock);\n+        // We previously could hang here if StartShutdown() is called prior to\n+        // ThreadImport getting started, so instead we just wait on a timer to\n+        // check ShutdownRequested() regularly.\n+        while (!fHaveGenesis && !ShutdownRequested()) {\n+            condvar_GenesisWait.wait_for(lock, std::chrono::milliseconds(500));\n         }\n         uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n+    if (ShutdownRequested()) {\n+        return false;\n+    }\n+\n     // ********************************************************* Step 11: start node\n \n     int chain_active_height;"
      }
    ]
  },
  {
    "sha": "dd2de47c6288654abb2c3eef29edcd1cc5f39fc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDJkZTQ3YzYyODg2NTRhYmIyYzNlZWYyOWVkY2QxY2M1ZjM5ZmM5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T18:38:54Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-06T20:14:02Z"
      },
      "message": "Fix fast-shutdown crash if genesis block was not loaded\n\nIf the ShutdownRequested() check at the top of ActivateBestChain()\nreturns false during initial genesis block load we will fail an\nassertion in UTXO DB flush as the best block hash IsNull(). To work\naround this, we move the check until after one round of\nActivateBestChainStep(), ensuring the genesis block gets connected.",
      "tree": {
        "sha": "9f20e429cda9976828ac8ffbd30f21d64b025018",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f20e429cda9976828ac8ffbd30f21d64b025018"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c9394ad477d0c1ca0ab1caa6024a7e70c125d15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c9394ad477d0c1ca0ab1caa6024a7e70c125d15"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4315ec1814c2a23ecbda2f5a6524b197f7d78da7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dd2de47c6288654abb2c3eef29edcd1cc5f39fc9",
        "patch": "@@ -2581,9 +2581,6 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             SyncWithValidationInterfaceQueue();\n         }\n \n-        if (ShutdownRequested())\n-            break;\n-\n         const CBlockIndex *pindexFork;\n         bool fInitialDownload;\n         {\n@@ -2630,6 +2627,13 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         }\n \n         if (nStopAtHeight && pindexNewTip && pindexNewTip->nHeight >= nStopAtHeight) StartShutdown();\n+\n+        // We check shutdown only after giving ActivateBestChainStep a chance to run once so that we\n+        // never shutdown before connecting the genesis block during LoadChainTip(). Previously this\n+        // caused an assert() failure during shutdown in such cases as the UTXO DB flushing checks\n+        // that the best block hash is non-null.\n+        if (ShutdownRequested())\n+            break;\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      }
    ]
  },
  {
    "sha": "b947d3811c94d73d739bdc8f614a1671a83a8d28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTQ3ZDM4MTFjOTRkNzNkNzM5YmRjOGY2MTRhMTY3MWE4M2E4ZDI4",
    "commit": {
      "author": {
        "name": "Akira Takizawa",
        "email": "akx20000@protonmail.com",
        "date": "2018-02-06T22:18:23Z"
      },
      "committer": {
        "name": "Akira Takizawa",
        "email": "akx20000@protonmail.com",
        "date": "2018-02-06T22:18:23Z"
      },
      "message": "Add gitian PGP key: akx20000",
      "tree": {
        "sha": "f2220b9600de1b9d15186106707d8c87e9fdde90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2220b9600de1b9d15186106707d8c87e9fdde90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b947d3811c94d73d739bdc8f614a1671a83a8d28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "no_user",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEYXyQAQs703CwrH1CS7QuMceREbgFAlp6Ka8ACgkQS7QuMceR\nEbgLKQf/Q2O8lF9FYV1JRAzELh1zm8o02cFhkh67KafatraStqwgQt1RdpkOL4As\npvtjtRNO/7PK/lZP1XvPbxUfH6FrHY6Tt6bbccYvjLFp+I4acwnzW1a+H7u3zGCh\nm3WnPN3jzHpIEVm8hNcxLksyDPPVikFnkGrz2kqCq27d/C0WXexwxeB5bM1DrS+U\nwnjaes5sjmECa0CZKyE51NzC+vzOTPnxpEckh8GOsMuM90hXTO/JN8wj1ed1cX5r\nD4oiTlVxBH1LKx6eLpwcSR7D3hy0ArDhJ2gu1purC75SFvGggAFz/y/3WsDqlL7R\nECtdNvt9EfQX7Zi2bn5RjiX1IAN9Xw==\n=Dn9k\n-----END PGP SIGNATURE-----",
        "payload": "tree f2220b9600de1b9d15186106707d8c87e9fdde90\nparent 1462bde767a121233118c04c5629bd9de1ba0f16\nauthor Akira Takizawa <akx20000@protonmail.com> 1517955503 +0900\ncommitter Akira Takizawa <akx20000@protonmail.com> 1517955503 +0900\n\nAdd gitian PGP key: akx20000\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b947d3811c94d73d739bdc8f614a1671a83a8d28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b947d3811c94d73d739bdc8f614a1671a83a8d28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b947d3811c94d73d739bdc8f614a1671a83a8d28/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "868051d5459170ef959bb8fddef9789052a2fbd7",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b947d3811c94d73d739bdc8f614a1671a83a8d28/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b947d3811c94d73d739bdc8f614a1671a83a8d28/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=b947d3811c94d73d739bdc8f614a1671a83a8d28",
        "patch": "@@ -1,3 +1,4 @@\n+617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n 152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n 07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)"
      }
    ]
  },
  {
    "sha": "45eea40aa88f047111a9b1151fe4d1bad5c560e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWVlYTQwYWE4OGYwNDcxMTFhOWIxMTUxZmU0ZDFiYWQ1YzU2MGUy",
    "commit": {
      "author": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-01-31T15:48:20Z"
      },
      "committer": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-02-06T23:02:20Z"
      },
      "message": "Bech32 addresses in dumpwallet\n\nOutput bech32 addresses in dumpwallet if address type is not as legacy",
      "tree": {
        "sha": "2f9467f4dca4d6c022fbbf089c6c3cb5585dd775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f9467f4dca4d6c022fbbf089c6c3cb5585dd775"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45eea40aa88f047111a9b1151fe4d1bad5c560e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45eea40aa88f047111a9b1151fe4d1bad5c560e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45eea40aa88f047111a9b1151fe4d1bad5c560e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45eea40aa88f047111a9b1151fe4d1bad5c560e2/comments",
    "author": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 42,
      "deletions": 7
    },
    "files": [
      {
        "sha": "03fb824e7a0b3e1d841279afb7435f3b913f32e2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45eea40aa88f047111a9b1151fe4d1bad5c560e2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45eea40aa88f047111a9b1151fe4d1bad5c560e2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=45eea40aa88f047111a9b1151fe4d1bad5c560e2",
        "patch": "@@ -71,6 +71,28 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std::string &strAddr, std::string &strLabel)\n+{\n+    bool fLabelFound = false;\n+    CKey key;\n+    pwallet->GetKey(keyid, key);\n+    for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey())) {\n+        if (pwallet->mapAddressBook.count(dest)) {\n+            if (!strAddr.empty()) {\n+                strAddr += \",\";\n+            }\n+            strAddr += EncodeDestination(dest);\n+            strLabel = EncodeDumpString(pwallet->mapAddressBook[dest].name);\n+            fLabelFound = true;\n+        }\n+    }\n+    if (!fLabelFound) {\n+        strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), g_address_type));\n+    }\n+    return fLabelFound;\n+}\n+\n+\n UniValue importprivkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -729,12 +751,13 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n-        std::string strAddr = EncodeDestination(keyid);\n+        std::string strAddr;\n+        std::string strLabel;\n         CKey key;\n         if (pwallet->GetKey(keyid, key)) {\n             file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n-            if (pwallet->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"label=%s\", EncodeDumpString(pwallet->mapAddressBook[keyid].name));\n+            if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n+               file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == masterKeyID) {\n                 file << \"hdmaster=1\";\n             } else if (mapKeyPool.count(keyid)) {"
      },
      {
        "sha": "5e943d048d731f4ab2ae7ae1ae5f36dfc6af9880",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45eea40aa88f047111a9b1151fe4d1bad5c560e2/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45eea40aa88f047111a9b1151fe4d1bad5c560e2/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=45eea40aa88f047111a9b1151fe4d1bad5c560e2",
        "patch": "@@ -20,6 +20,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n         found_script_addr = 0\n         found_addr_chg = 0\n         found_addr_rsv = 0\n+        witness_addr_ret = None\n         hd_master_addr_ret = None\n         for line in inputfile:\n             # only read non comment lines\n@@ -47,7 +48,14 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n \n                     # count key types\n                     for addrObj in addrs:\n-                        if addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                            # a labled entry in the wallet should contain both a native address\n+                            # and the p2sh-p2wpkh address that was added at wallet setup\n+                            if len(addr.split(\",\")) == 2:\n+                                addr_list = addr.split(\",\")\n+                                # the entry should be of the first key in the wallet\n+                                assert_equal(addrs[0]['address'], addr_list[0])\n+                                witness_addr_ret = addr_list[1]\n                             found_addr += 1\n                             break\n                         elif keytype == \"change=1\":\n@@ -63,7 +71,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                             found_script_addr += 1\n                             break\n \n-        return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n+        return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -83,6 +91,8 @@ def run_test (self):\n         tmpdir = self.options.tmpdir\n \n         # generate 20 addresses to compare against the dump\n+        # but since we add a p2sh-p2wpkh address for the first pubkey in the\n+        # wallet, we will expect 21 addresses in the dump\n         test_addr_count = 20\n         addrs = []\n         for i in range(0,test_addr_count):\n@@ -101,12 +111,13 @@ def run_test (self):\n         result = self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n         assert_equal(result['filename'], os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n-        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc, witness_addr_ret = \\\n             read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n         assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -116,12 +127,13 @@ def run_test (self):\n         self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _ = \\\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _, witness_addr_ret = \\\n             read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n+        assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail\n         assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")"
      }
    ]
  },
  {
    "sha": "11e01515fe0fbc7823d4111ad6e016a02c485a78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWUwMTUxNWZlMGZiYzc4MjNkNDExMWFkNmUwMTZhMDJjNDg1YTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-07T08:53:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-07T08:53:46Z"
      },
      "message": "http: Remove numThreads and ThreadCounter\n\nThe HTTP worker thread counter, as well as the RAII object that was used\nto maintain it, is unused now, so can be removed.\n\nSigned-off-by: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "62ec46dc08c97ce9c4c619b9c9b2b2b0e5e32fed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62ec46dc08c97ce9c4c619b9c9b2b2b0e5e32fed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11e01515fe0fbc7823d4111ad6e016a02c485a78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11e01515fe0fbc7823d4111ad6e016a02c485a78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11e01515fe0fbc7823d4111ad6e016a02c485a78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11e01515fe0fbc7823d4111ad6e016a02c485a78/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f94665466ed50e868c98b1a1c708ad5767727bb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94665466ed50e868c98b1a1c708ad5767727bb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f94665466ed50e868c98b1a1c708ad5767727bb6"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 1,
      "deletions": 22
    },
    "files": [
      {
        "sha": "f78ce13737256da2dc0c23d55716368caef8aa0f",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 22,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11e01515fe0fbc7823d4111ad6e016a02c485a78/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11e01515fe0fbc7823d4111ad6e016a02c485a78/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=11e01515fe0fbc7823d4111ad6e016a02c485a78",
        "patch": "@@ -73,30 +73,10 @@ class WorkQueue\n     std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n     size_t maxDepth;\n-    int numThreads;\n-\n-    /** RAII object to keep track of number of running worker threads */\n-    class ThreadCounter\n-    {\n-    public:\n-        WorkQueue &wq;\n-        explicit ThreadCounter(WorkQueue &w): wq(w)\n-        {\n-            std::lock_guard<std::mutex> lock(wq.cs);\n-            wq.numThreads += 1;\n-        }\n-        ~ThreadCounter()\n-        {\n-            std::lock_guard<std::mutex> lock(wq.cs);\n-            wq.numThreads -= 1;\n-            wq.cond.notify_all();\n-        }\n-    };\n \n public:\n     explicit WorkQueue(size_t _maxDepth) : running(true),\n-                                 maxDepth(_maxDepth),\n-                                 numThreads(0)\n+                                 maxDepth(_maxDepth)\n     {\n     }\n     /** Precondition: worker threads have all stopped (they have been joined).\n@@ -118,7 +98,6 @@ class WorkQueue\n     /** Thread function */\n     void Run()\n     {\n-        ThreadCounter count(*this);\n         while (true) {\n             std::unique_ptr<WorkItem> i;\n             {"
      }
    ]
  },
  {
    "sha": "f5a4c3ddf48db2119b2b1a438b9462a6236565cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWE0YzNkZGY0OGRiMjExOWIyYjFhNDM4Yjk0NjJhNjIzNjU2NWNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-07T09:30:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-07T09:37:40Z"
      },
      "message": "qt: Make sure splash screen is freed on AppInitMain fail\n\nThe `splashFinished` event was never sent if AppInitMain fails,\ncausing the splash screen to stick around, causing problems\nlater.\n\nThis bug has existed for a while but is now trigging potential crashed\nbecause the splash screen subscribes to wallet events.\n\nMeant to fix #12372.\n\nSigned-off-by: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "48f3ba58e6e06276e6290858a9a57a382ffa4dc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48f3ba58e6e06276e6290858a9a57a382ffa4dc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5a4c3ddf48db2119b2b1a438b9462a6236565cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a4c3ddf48db2119b2b1a438b9462a6236565cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a4c3ddf48db2119b2b1a438b9462a6236565cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a4c3ddf48db2119b2b1a438b9462a6236565cd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1e91d63dd143fa4269717619dcc578b4f34003c1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a4c3ddf48db2119b2b1a438b9462a6236565cd/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a4c3ddf48db2119b2b1a438b9462a6236565cd/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f5a4c3ddf48db2119b2b1a438b9462a6236565cd",
        "patch": "@@ -516,6 +516,7 @@ void BitcoinApplication::initializeResult(bool success)\n         QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n #endif\n     } else {\n+        Q_EMIT splashFinished(window);\n         quit(); // Exit main loop\n     }\n }"
      }
    ]
  },
  {
    "sha": "1e5d14b3f7db814505279d346f0b819443753e66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTVkMTRiM2Y3ZGI4MTQ1MDUyNzlkMzQ2ZjBiODE5NDQzNzUzZTY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-07T09:37:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-07T09:37:45Z"
      },
      "message": "qt: Clarify some comments\n\nSigned-off-by: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "11893d9a55ad6a8aa5760c92b9fa59126d52507a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11893d9a55ad6a8aa5760c92b9fa59126d52507a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e5d14b3f7db814505279d346f0b819443753e66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5d14b3f7db814505279d346f0b819443753e66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5d14b3f7db814505279d346f0b819443753e66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5d14b3f7db814505279d346f0b819443753e66/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a4c3ddf48db2119b2b1a438b9462a6236565cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a4c3ddf48db2119b2b1a438b9462a6236565cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a4c3ddf48db2119b2b1a438b9462a6236565cd"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ae255bcefef6555c01f38e38e268d3f9e52c3d0b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e5d14b3f7db814505279d346f0b819443753e66/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e5d14b3f7db814505279d346f0b819443753e66/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1e5d14b3f7db814505279d346f0b819443753e66",
        "patch": "@@ -516,14 +516,14 @@ void BitcoinApplication::initializeResult(bool success)\n         QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n #endif\n     } else {\n-        Q_EMIT splashFinished(window);\n-        quit(); // Exit main loop\n+        Q_EMIT splashFinished(window); // Make sure splash screen doesn't stick around during shutdown\n+        quit(); // Exit first main loop invocation\n     }\n }\n \n void BitcoinApplication::shutdownResult()\n {\n-    quit(); // Exit main loop after shutdown finished\n+    quit(); // Exit second main loop invocation after shutdown finished\n }\n \n void BitcoinApplication::handleRunawayException(const QString &message)"
      }
    ]
  },
  {
    "sha": "2222bf02c94a10387c318b295982719eb07b8d06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjIyYmYwMmM5NGExMDM4N2MzMThiMjk1OTgyNzE5ZWIwN2I4ZDA2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-07T20:18:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-07T20:15:10Z"
      },
      "message": "qt: Poll ShutdownTimer after init is done",
      "tree": {
        "sha": "fa4e46242d871a3b02e433fc56d92309809a1512",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa4e46242d871a3b02e433fc56d92309809a1512"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2222bf02c94a10387c318b295982719eb07b8d06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJae15OAAoJEM4rdWl+aaVI9XEMAIHiWOQRRCiZFKL6BvxwKZwH\nUewWk2nBvKaiEgxmoJh8riagvY1nH6AZCrOR2kMlH/D+0RY/dJHBm+EO5BsPxtIy\nyLhMIDugmINbzyPcS1nTTzf1Fa9AIsrZZySqo1/MG1I5mKsU/fqTFnrv/fu8VGhw\nSFt9oXna1dJEJ4H85kSaxKrEfqh9mxfpQb8UGKcQnouZhzOIeKzdWvkNXJZTkF0c\nuIO8SIaqWIdiLMwZwWxUqBg29RZVa9TFguFk8h9GpBVCmCZviA0JDM58U5rHYlqg\nZC1NlluTwpsV2EE1rqpJIoOX0SlgueNKiYTvxOF7Roko8shOrmU0CE5F4eREdg1d\nzq5xLpWu0YTVoDLBpVkQqVjWmYhaz/3NJoVEEihm9YDMOriXbSCz1eEocQ5DdtP1\nccjXVS2q0xJhXVeWjemcrl6VMkG/6tg5wH9RCk4vNkD0ZJNMZrrs5oy8GEHrajw3\nIEJ47k53j0A/bbJglg7jRsoQhv75SMfsiSMuXtTYTg==\n=Y4s5\n-----END PGP SIGNATURE-----",
        "payload": "tree fa4e46242d871a3b02e433fc56d92309809a1512\nparent 5ad320598f06370de65f83b6c6a993123f00b329\nauthor MarcoFalke <falke.marco@gmail.com> 1518034734 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518034510 -0500\n\nqt: Poll ShutdownTimer after init is done\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2222bf02c94a10387c318b295982719eb07b8d06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2222bf02c94a10387c318b295982719eb07b8d06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2222bf02c94a10387c318b295982719eb07b8d06/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ad320598f06370de65f83b6c6a993123f00b329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad320598f06370de65f83b6c6a993123f00b329",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad320598f06370de65f83b6c6a993123f00b329"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "09d318efbd74c0b1940515dbfc310514979d1760",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2222bf02c94a10387c318b295982719eb07b8d06/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2222bf02c94a10387c318b295982719eb07b8d06/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=2222bf02c94a10387c318b295982719eb07b8d06",
        "patch": "@@ -388,7 +388,6 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n-    pollShutdownTimer->start(200);\n }\n \n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n@@ -515,6 +514,7 @@ void BitcoinApplication::initializeResult(bool success)\n                          window, SLOT(message(QString,QString,unsigned int)));\n         QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n #endif\n+        pollShutdownTimer->start(200);\n     } else {\n         quit(); // Exit main loop\n     }"
      }
    ]
  },
  {
    "sha": "0277173b1defb63216d40a8d8805ae6d5d563c26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjc3MTczYjFkZWZiNjMyMTZkNDBhOGQ4ODA1YWU2ZDVkNTYzYzI2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-07T21:15:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-07T21:15:28Z"
      },
      "message": "Merge #10498: Use static_cast instead of C-style casts for non-fundamental types\n\n9ad6746ccd Use static_cast instead of C-style casts for non-fundamental types (practicalswift)\n\nPull request description:\n\n  A C-style cast is equivalent to try casting in the following order:\n\n  1. `const_cast(...)`\n  2. `static_cast(...)`\n  3. `const_cast(static_cast(...))`\n  4. `reinterpret_cast(...)`\n  5. `const_cast(reinterpret_cast(...))`\n\n  By using `static_cast<T>(...)` explicitly we avoid the possibility of an unintentional and dangerous `reinterpret_cast`. Furthermore `static_cast<T>(...)` allows for easier grepping of casts.\n\n  For a more thorough discussion, see [\"ES.49: If you must use a cast, use a named cast\"](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast) in the C++ Core Guidelines (Stroustrup & Sutter).\n\nTree-SHA512: bd6349b7ea157da93a47b8cf238932af5dff84731374ccfd69b9f732fabdad1f9b1cdfca67497040f14eaa85346391404f4c0495e22c467f26ca883cd2de4d3c",
      "tree": {
        "sha": "c5e92d61ab80f40c7b31c36976c5ccb729198a8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e92d61ab80f40c7b31c36976c5ccb729198a8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0277173b1defb63216d40a8d8805ae6d5d563c26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJae2xwAAoJENLqSFDnUoslIeQP/1XBiqneEeLZQDJ7UOROpwm2\nAD9C8QFa9wQe6dVvlPrLWav23b1ZzD+4D5xGdKKuJCld/98pWUE+rg/0hmpsw7Eq\nMZob1XJdafp999YHffdZ4TW0xOOYnF0mucFztG9SFeKolYVazfJxRjs+QXlA5rIJ\nE9HPfaTha6qkAkK3kyg//NN/WunsiiY9EoVN0f9FJt3Q6284qukL8k3GmtaMckqC\n8y3xdZPTkno2f2BI2dyKsM4DOpz05v8ogGz6VyhWATt2cr3P/kXqg5a/OHeajGHm\nPb6qTB1MlOWweIOBOJb5euFeo9GBmM9t8lmKR9dWE8D7kvj2owGIHw1E6KqbcvzR\nVKQZfplfCIfm19HVI4VMeN/inRk2XcFeZR/zp6dzwz2ihR4a3DSDpDvsP4itn5Ya\n9YNAGsDMzoY8LXgFpxOzuzOuue4oKgMn5KnKPwjgTumGj0vqbo/WGM5l4brr6w2p\n7vcqB7IxPlcsdZpoysAOmxnC2IwQt5p2Kr4ITG1CCBcgFqB7GKIZRaN6p66j6jNL\nhTPcU8GDWTiJHVe9b2WtzHxq1xKpoT3ga8zY1xlr51bJhRL09G1VwN2z35+WjbWS\nGAyTC3WVT2wwqLLkOWbhoMn94QboRs4S73VOmP54A0mTyjMCMLqsKCjly06hljft\npniW1hHgZqCK1sbx4ozV\n=DiBQ\n-----END PGP SIGNATURE-----",
        "payload": "tree c5e92d61ab80f40c7b31c36976c5ccb729198a8f\nparent 1462bde767a121233118c04c5629bd9de1ba0f16\nparent 9ad6746ccd6dc31141fd0144686b641e31bf626b\nauthor MarcoFalke <falke.marco@gmail.com> 1518038116 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518038128 -0500\n\nMerge #10498: Use static_cast instead of C-style casts for non-fundamental types\n\n9ad6746ccd Use static_cast instead of C-style casts for non-fundamental types (practicalswift)\n\nPull request description:\n\n  A C-style cast is equivalent to try casting in the following order:\n\n  1. `const_cast(...)`\n  2. `static_cast(...)`\n  3. `const_cast(static_cast(...))`\n  4. `reinterpret_cast(...)`\n  5. `const_cast(reinterpret_cast(...))`\n\n  By using `static_cast<T>(...)` explicitly we avoid the possibility of an unintentional and dangerous `reinterpret_cast`. Furthermore `static_cast<T>(...)` allows for easier grepping of casts.\n\n  For a more thorough discussion, see [\"ES.49: If you must use a cast, use a named cast\"](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast) in the C++ Core Guidelines (Stroustrup & Sutter).\n\nTree-SHA512: bd6349b7ea157da93a47b8cf238932af5dff84731374ccfd69b9f732fabdad1f9b1cdfca67497040f14eaa85346391404f4c0495e22c467f26ca883cd2de4d3c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0277173b1defb63216d40a8d8805ae6d5d563c26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0277173b1defb63216d40a8d8805ae6d5d563c26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0277173b1defb63216d40a8d8805ae6d5d563c26/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1462bde767a121233118c04c5629bd9de1ba0f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1462bde767a121233118c04c5629bd9de1ba0f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1462bde767a121233118c04c5629bd9de1ba0f16"
      },
      {
        "sha": "9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad6746ccd6dc31141fd0144686b641e31bf626b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad6746ccd6dc31141fd0144686b641e31bf626b"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 44,
      "deletions": 44
    },
    "files": [
      {
        "sha": "38da754afb18d1fa8b20ccecb09e6032d1db821e",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -59,7 +59,7 @@ class CAddrInfo : public CAddress\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CAddress*)this);\n+        READWRITE(*static_cast<CAddress*>(this));\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n         READWRITE(nAttempts);"
      },
      {
        "sha": "6a8308f8691ee6e419e036e3dd88a768d93b4982",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -33,14 +33,14 @@ CScript ParseScript(const std::string& s)\n             if (op < OP_NOP && op != OP_RESERVED)\n                 continue;\n \n-            const char* name = GetOpName((opcodetype)op);\n+            const char* name = GetOpName(static_cast<opcodetype>(op));\n             if (strcmp(name, \"OP_UNKNOWN\") == 0)\n                 continue;\n             std::string strName(name);\n-            mapOpNames[strName] = (opcodetype)op;\n+            mapOpNames[strName] = static_cast<opcodetype>(op);\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n-            mapOpNames[strName] = (opcodetype)op;\n+            mapOpNames[strName] = static_cast<opcodetype>(op);\n         }\n     }\n "
      },
      {
        "sha": "73dce8d571a9455065f5ec9648c9740b62a3f840",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -525,7 +525,7 @@ struct event_base* EventBase()\n static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n {\n     // Static handler: simply call inner handler\n-    HTTPEvent *self = ((HTTPEvent*)data);\n+    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n     self->handler();\n     if (self->deleteWhenTriggered)\n         delete self;"
      },
      {
        "sha": "03ed7e7fc17075055ac0f2ace502e3fbbb73854f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -297,7 +297,7 @@ CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if ((CNetAddr)pnode->addr == ip) {\n+      if (static_cast<CNetAddr>(pnode->addr) == ip) {\n             return pnode;\n         }\n     }\n@@ -308,7 +308,7 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if (subNet.Match((CNetAddr)pnode->addr)) {\n+        if (subNet.Match(static_cast<CNetAddr>(pnode->addr))) {\n             return pnode;\n         }\n     }\n@@ -330,7 +330,7 @@ CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n-        if ((CService)pnode->addr == addr) {\n+        if (static_cast<CService>(pnode->addr) == addr) {\n             return pnode;\n         }\n     }\n@@ -370,7 +370,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             return nullptr;\n \n         // Look for an existing connection\n-        CNode* pnode = FindNode((CService)addrConnect);\n+        CNode* pnode = FindNode(static_cast<CService>(addrConnect));\n         if (pnode)\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n@@ -398,7 +398,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n             LOCK(cs_vNodes);\n-            CNode* pnode = FindNode((CService)addrConnect);\n+            CNode* pnode = FindNode(static_cast<CService>(addrConnect));\n             if (pnode)\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n@@ -559,7 +559,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n     {\n         LOCK(cs_vNodes);\n         for (CNode* pnode : vNodes) {\n-            if (subNet.Match((CNetAddr)pnode->addr))\n+            if (subNet.Match(static_cast<CNetAddr>(pnode->addr)))\n                 pnode->fDisconnect = true;\n         }\n     }\n@@ -1965,7 +1965,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n-            FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n+            FindNode(static_cast<CNetAddr>(addrConnect)) || IsBanned(addrConnect) ||\n             FindNode(addrConnect.ToStringIPPort()))\n             return;\n     } else if (FindNode(std::string(pszDest)))"
      },
      {
        "sha": "fc0ba82d8b8963158dc1d709dc0118d05b5ff0e1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -2863,7 +2863,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n     CNodeState &state = *State(pnode->GetId());\n \n     for (const CBlockReject& reject : state.rejects) {\n-        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, std::string(NetMsgType::BLOCK), reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n     }\n     state.rejects.clear();\n "
      },
      {
        "sha": "4f231d73c8a0327e6f51b580c4fa558611f122d0",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -522,17 +522,17 @@ unsigned short CService::GetPort() const\n \n bool operator==(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a == (CNetAddr)b && a.port == b.port;\n+    return static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port == b.port;\n }\n \n bool operator!=(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a != (CNetAddr)b || a.port != b.port;\n+    return static_cast<CNetAddr>(a) != static_cast<CNetAddr>(b) || a.port != b.port;\n }\n \n bool operator<(const CService& a, const CService& b)\n {\n-    return (CNetAddr)a < (CNetAddr)b || ((CNetAddr)a == (CNetAddr)b && a.port < b.port);\n+    return static_cast<CNetAddr>(a) < static_cast<CNetAddr>(b) || (static_cast<CNetAddr>(a) == static_cast<CNetAddr>(b) && a.port < b.port);\n }\n \n bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const"
      },
      {
        "sha": "5be3fe34f874d25eb3999be27248e4a1f63ba5e3",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -572,7 +572,7 @@ bool HaveNameProxy() {\n bool IsProxy(const CNetAddr &addr) {\n     LOCK(cs_proxyInfos);\n     for (int i = 0; i < NET_MAX; i++) {\n-        if (addr == (CNetAddr)proxyInfo[i].proxy)\n+        if (addr == static_cast<CNetAddr>(proxyInfo[i].proxy))\n             return true;\n     }\n     return false;"
      },
      {
        "sha": "5d6d44ac766dd7298b2914ab38a537c50a00dc46",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -86,14 +86,14 @@ class CBlock : public CBlockHeader\n     CBlock(const CBlockHeader &header)\n     {\n         SetNull();\n-        *((CBlockHeader*)this) = header;\n+        *(static_cast<CBlockHeader*>(this)) = header;\n     }\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(*static_cast<CBlockHeader*>(this));\n         READWRITE(vtx);\n     }\n "
      },
      {
        "sha": "42eb57e4f0fc9bc9a1a5e43c8fca023ec2ff8028",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -346,8 +346,8 @@ class CAddress : public CService\n             READWRITE(nTime);\n         uint64_t nServicesInt = nServices;\n         READWRITE(nServicesInt);\n-        nServices = (ServiceFlags)nServicesInt;\n-        READWRITE(*(CService*)this);\n+        nServices = static_cast<ServiceFlags>(nServicesInt);\n+        READWRITE(*static_cast<CService*>(this));\n     }\n \n     // TODO: make private (improves encapsulation)"
      },
      {
        "sha": "e567a177f974c99fbfda6680b78389b3527f2280",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -705,7 +705,7 @@ int main(int argc, char *argv[])\n         if (BitcoinCore::baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), static_cast<HWND>(app.getMainWinId()));\n #endif\n             app.exec();\n             app.requestShutdown();"
      },
      {
        "sha": "4e868b7c170fb91a51d321b803cfb87440ec88e1",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -599,7 +599,7 @@ void BitcoinGUI::createTrayIconMenu()\n #else\n     // Note: On Mac, the dock icon is used to provide the tray's functionality.\n     MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n-    dockIconHandler->setMainWindow((QMainWindow *)this);\n+    dockIconHandler->setMainWindow(static_cast<QMainWindow*>(this));\n     trayIconMenu = dockIconHandler->dockMenu();\n #endif\n \n@@ -922,13 +922,13 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n             buttons = QMessageBox::Ok;\n \n         showNormalIfMinimized();\n-        QMessageBox mBox((QMessageBox::Icon)nMBoxIcon, strTitle, message, buttons, this);\n+        QMessageBox mBox(static_cast<QMessageBox::Icon>(nMBoxIcon), strTitle, message, buttons, this);\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;\n     }\n     else\n-        notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);\n+        notificator->notify(static_cast<Notificator::Class>(nNotifyIcon), strTitle, message);\n }\n \n void BitcoinGUI::changeEvent(QEvent *e)"
      },
      {
        "sha": "8d2e5619e05154dd87f58b05109832b5d1e6287c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -142,7 +142,7 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n     if (settings.contains(\"nCoinControlMode\") && !settings.value(\"nCoinControlMode\").toBool())\n         ui->radioTreeMode->click();\n     if (settings.contains(\"nCoinControlSortColumn\") && settings.contains(\"nCoinControlSortOrder\"))\n-        sortView(settings.value(\"nCoinControlSortColumn\").toInt(), ((Qt::SortOrder)settings.value(\"nCoinControlSortOrder\").toInt()));\n+        sortView(settings.value(\"nCoinControlSortColumn\").toInt(), (static_cast<Qt::SortOrder>(settings.value(\"nCoinControlSortOrder\").toInt())));\n }\n \n CoinControlDialog::~CoinControlDialog()\n@@ -428,7 +428,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n             txDummy.vout.push_back(txout);\n             fDust |= IsDust(txout, ::dustRelayFee);\n         }\n@@ -519,7 +519,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n-                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, static_cast<CScript>(std::vector<unsigned char>(24, 0)));\n                 if (IsDust(txout, ::dustRelayFee))\n                 {\n                     nPayFee += nChange;"
      },
      {
        "sha": "e7326d3f7ad0684917c0ffc57b24f24db2d45308",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -24,7 +24,7 @@ void CoinControlTreeWidget::keyPressEvent(QKeyEvent *event)\n     else if (event->key() == Qt::Key_Escape) // press esc -> close dialog\n     {\n         event->ignore();\n-        CoinControlDialog *coinControlDialog = (CoinControlDialog*)this->parentWidget();\n+        CoinControlDialog *coinControlDialog = static_cast<CoinControlDialog*>(this->parentWidget());\n         coinControlDialog->done(QDialog::Accepted);\n     }\n     else"
      },
      {
        "sha": "871822ccb4633eec6ba2e3cc6c14821cae874582",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -351,7 +351,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm send coins\"),\n         questionString.arg(formatted.join(\"<br />\")), SEND_CONFIRM_DELAY, this);\n     confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = (QMessageBox::StandardButton)confirmationDialog.result();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n     if(retval != QMessageBox::Yes)\n     {"
      },
      {
        "sha": "5df1282f73b33aa778666895bd924e327632803e",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -38,7 +38,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     float fontFactor            = 1.0;\n     float devicePixelRatio      = 1.0;\n #if QT_VERSION > 0x050100\n-    devicePixelRatio = ((QGuiApplication*)QCoreApplication::instance())->devicePixelRatio();\n+    devicePixelRatio = static_cast<QGuiApplication*>(QCoreApplication::instance())->devicePixelRatio();\n #endif\n \n     // define text to place"
      },
      {
        "sha": "88f8f463bc6357aee327f756a822454f455403d2",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -322,7 +322,7 @@ void TransactionView::chooseWatchonly(int idx)\n     if(!transactionProxyModel)\n         return;\n     transactionProxyModel->setWatchOnlyFilter(\n-        (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n+        static_cast<TransactionFilterProxy::WatchOnlyFilter>(watchOnlyWidget->itemData(idx).toInt()));\n }\n \n void TransactionView::changedSearch()"
      },
      {
        "sha": "541114e5fe97b65b7189130d9136591b5cff0c98",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -695,7 +695,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     questionString.append(\"</td></tr></table>\");\n     SendConfirmationDialog confirmationDialog(tr(\"Confirm fee bump\"), questionString);\n     confirmationDialog.exec();\n-    QMessageBox::StandardButton retval = (QMessageBox::StandardButton)confirmationDialog.result();\n+    QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n \n     // cancel sign&broadcast if users doesn't want to bump the fee\n     if (retval != QMessageBox::Yes) {"
      },
      {
        "sha": "e11a72899d6b277f4ff74c7a7d78386081c6056a",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -56,7 +56,7 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)\n {\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n-    PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n+    PSHUTDOWNBRCREATE shutdownBRCreate = static_cast<PSHUTDOWNBRCREATE>(GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\"));\n     if (shutdownBRCreate == nullptr) {\n         qWarning() << \"registerShutdownBlockReason: GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;"
      },
      {
        "sha": "591777672e8d75d68afa60f9c47835496e58dc6b",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -568,7 +568,7 @@ class CScript : public CScriptBase\n             pc += nSize;\n         }\n \n-        opcodeRet = (opcodetype)opcode;\n+        opcodeRet = static_cast<opcodetype>(opcode);\n         return true;\n     }\n "
      },
      {
        "sha": "5d6f7814047ba51b9bc36c6720312b31ddccfb4d",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -226,7 +226,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n+        uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n@@ -238,7 +238,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)j) == bitmask) {\n+            if (VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n                 BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n                         mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n             }"
      },
      {
        "sha": "d875008ef284f6ecd34b6687be4b61fb18fd8999",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -133,7 +133,7 @@ TorControlConnection::~TorControlConnection()\n \n void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n {\n-    TorControlConnection *self = (TorControlConnection*)ctx;\n+    TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n     struct evbuffer *input = bufferevent_get_input(bev);\n     size_t n_read_out = 0;\n     char *line;\n@@ -178,7 +178,7 @@ void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n \n void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ctx)\n {\n-    TorControlConnection *self = (TorControlConnection*)ctx;\n+    TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n     if (what & BEV_EVENT_CONNECTED) {\n         LogPrint(BCLog::TOR, \"tor: Successfully connected!\\n\");\n         self->connected(*self);\n@@ -725,7 +725,7 @@ fs::path TorController::GetPrivateKeyFile()\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n {\n-    TorController *self = (TorController*)arg;\n+    TorController *self = static_cast<TorController*>(arg);\n     self->Reconnect();\n }\n "
      },
      {
        "sha": "2fc69e563b05d01bc2be648c03ed60dbb15b2cd4",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -46,7 +46,7 @@ struct CDiskTxPos : public CDiskBlockPos\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(*(CDiskBlockPos*)this);\n+        READWRITE(*static_cast<CDiskBlockPos*>(this));\n         READWRITE(VARINT(nTxOffset));\n     }\n "
      },
      {
        "sha": "16b656c7f5334968bd286cee2251fcecd052b5ad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -1689,9 +1689,9 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, (Consensus::DeploymentPos)i, versionbitscache);\n+        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n         if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_STARTED) {\n-            nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n+            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n "
      },
      {
        "sha": "fefe415bb19d48f5e27012755eb387483c706a60",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0277173b1defb63216d40a8d8805ae6d5d563c26/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0277173b1defb63216d40a8d8805ae6d5d563c26/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0277173b1defb63216d40a8d8805ae6d5d563c26",
        "patch": "@@ -408,7 +408,7 @@ class CWalletTx : public CMerkleTx\n                 mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*(CMerkleTx*)this);\n+        READWRITE(*static_cast<CMerkleTx*>(this));\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n         READWRITE(vUnused);\n         READWRITE(mapValue);"
      }
    ]
  },
  {
    "sha": "7217ea2cc8dd17784a95574724e76303ac2e2823",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjE3ZWEyY2M4ZGQxNzc4NGE5NTU3NDcyNGU3NjMwM2FjMmUyODIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T07:40:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T07:41:18Z"
      },
      "message": "Merge #12367: Fix two fast-shutdown bugs\n\ndd2de47 Fix fast-shutdown crash if genesis block was not loaded (Matt Corallo)\n1c9394a Fix fast-shutdown hang on ThreadImport+GenesisWait (Matt Corallo)\n\nPull request description:\n\n  The second commit is a much simpler alternative fix for the issue fixed in #12349. To test I made ShutdownRequested() always StartShutdown() after a certain number of calls, which turned up one other hang, fixed in the first commit.\n\nTree-SHA512: 86bde6ac4b8b4e2cb99fff87dafeed02c0d9514acee6d94455637fb2da9ffc274b5ad31b0a6b9f5bd7b700ae35395f28ddb14ffc65ddda3619aa28df28a5607d",
      "tree": {
        "sha": "0436ac31a688ecb1b59660a5e02abc1473bd06b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0436ac31a688ecb1b59660a5e02abc1473bd06b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7217ea2cc8dd17784a95574724e76303ac2e2823",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJae/8eAAoJEB5K7WKYbNJdJqoIAMpOwC7l+nsFekzLuTYNpXi8\nkoHjG44fTXxRcImZNYIoUo+HSZQLnI2OmNBzFwGovh6cnCdzY9n3ycYKNNB/jKFs\na611ZmW1FjLSNyHat+MfM/HsykZvwsnQK/q5E4vh333AQYl3MlModG7ZW3dw6Sm1\n0qoRqxHFRPEC2PDHPfnQL3EeUJrbuuWHrm+mAsnNuMzTKAQh2dKCd2gZ12JXnuyJ\n6mkxm6/fZupcu0x7Dvde2WnNy+UY38DsVAs5wdfEzhWucsiQZquIoMedl7TBVKzz\nCjWmj/9/so2S0jEWFpKERyirAxCUVvJRoM05m1kj0Yhq4NWb6waRn6AyBTIsvbk=\n=TJip\n-----END PGP SIGNATURE-----",
        "payload": "tree 0436ac31a688ecb1b59660a5e02abc1473bd06b6\nparent 0277173b1defb63216d40a8d8805ae6d5d563c26\nparent dd2de47c6288654abb2c3eef29edcd1cc5f39fc9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518075655 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518075678 +0100\n\nMerge #12367: Fix two fast-shutdown bugs\n\ndd2de47 Fix fast-shutdown crash if genesis block was not loaded (Matt Corallo)\n1c9394a Fix fast-shutdown hang on ThreadImport+GenesisWait (Matt Corallo)\n\nPull request description:\n\n  The second commit is a much simpler alternative fix for the issue fixed in #12349. To test I made ShutdownRequested() always StartShutdown() after a certain number of calls, which turned up one other hang, fixed in the first commit.\n\nTree-SHA512: 86bde6ac4b8b4e2cb99fff87dafeed02c0d9514acee6d94455637fb2da9ffc274b5ad31b0a6b9f5bd7b700ae35395f28ddb14ffc65ddda3619aa28df28a5607d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7217ea2cc8dd17784a95574724e76303ac2e2823",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7217ea2cc8dd17784a95574724e76303ac2e2823",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7217ea2cc8dd17784a95574724e76303ac2e2823/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0277173b1defb63216d40a8d8805ae6d5d563c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0277173b1defb63216d40a8d8805ae6d5d563c26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0277173b1defb63216d40a8d8805ae6d5d563c26"
      },
      {
        "sha": "dd2de47c6288654abb2c3eef29edcd1cc5f39fc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd2de47c6288654abb2c3eef29edcd1cc5f39fc9"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 16,
      "deletions": 5
    },
    "files": [
      {
        "sha": "14dd8fc8ac3df6bb5de4cda6e10761ce81cf1d1e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7217ea2cc8dd17784a95574724e76303ac2e2823/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7217ea2cc8dd17784a95574724e76303ac2e2823/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7217ea2cc8dd17784a95574724e76303ac2e2823",
        "patch": "@@ -1645,12 +1645,19 @@ bool AppInitMain()\n     // Wait for genesis block to be processed\n     {\n         WaitableLock lock(cs_GenesisWait);\n-        while (!fHaveGenesis) {\n-            condvar_GenesisWait.wait(lock);\n+        // We previously could hang here if StartShutdown() is called prior to\n+        // ThreadImport getting started, so instead we just wait on a timer to\n+        // check ShutdownRequested() regularly.\n+        while (!fHaveGenesis && !ShutdownRequested()) {\n+            condvar_GenesisWait.wait_for(lock, std::chrono::milliseconds(500));\n         }\n         uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n+    if (ShutdownRequested()) {\n+        return false;\n+    }\n+\n     // ********************************************************* Step 11: start node\n \n     int chain_active_height;"
      },
      {
        "sha": "f1abe6f46dc5169c36ee4fa705e198f012d86dd4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7217ea2cc8dd17784a95574724e76303ac2e2823/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7217ea2cc8dd17784a95574724e76303ac2e2823/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7217ea2cc8dd17784a95574724e76303ac2e2823",
        "patch": "@@ -2581,9 +2581,6 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             SyncWithValidationInterfaceQueue();\n         }\n \n-        if (ShutdownRequested())\n-            break;\n-\n         const CBlockIndex *pindexFork;\n         bool fInitialDownload;\n         {\n@@ -2630,6 +2627,13 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         }\n \n         if (nStopAtHeight && pindexNewTip && pindexNewTip->nHeight >= nStopAtHeight) StartShutdown();\n+\n+        // We check shutdown only after giving ActivateBestChainStep a chance to run once so that we\n+        // never shutdown before connecting the genesis block during LoadChainTip(). Previously this\n+        // caused an assert() failure during shutdown in such cases as the UTXO DB flushing checks\n+        // that the best block hash is non-null.\n+        if (ShutdownRequested())\n+            break;\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());\n "
      }
    ]
  },
  {
    "sha": "36a927c52585b9c263811799f76f5a164a909b9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmE5MjdjNTI1ODViOWMyNjM4MTE3OTlmNzZmNWExNjRhOTA5Yjlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T07:50:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T07:51:19Z"
      },
      "message": "Merge #12377: qt: Poll ShutdownTimer after init is done\n\n2222bf0 qt: Poll ShutdownTimer after init is done (MarcoFalke)\n\nPull request description:\n\n  The shutdown process has started in `requestShutdown`, but initialize will happily continue with `initializeResult` and start threads late in the shutdown progess. Deleting this running thread will crash the application according to the qt docs:\n  https://github.com/qt/qtbase/blob/e5033a5c9b769815112e922d0b224af860afd219/src/corelib/thread/qthread.cpp#L412-L415\n\n  Potential fix for https://github.com/bitcoin/bitcoin/issues/12372#issuecomment-363642332\n\n  This reverts #11831 for now and hopefully restores the previous behaviour.\n\nTree-SHA512: 8e1706afe90ddf2d972aca12c12d4cb2a9a4f38646c59c5466fe5a1a67361896b93c43917d5ac283841ee2bcc62e6bb8dc2bc81dea9129c899b354e9a4ef241b",
      "tree": {
        "sha": "9373e6372f8772dc47ab504b23efa3aa12c5b051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9373e6372f8772dc47ab504b23efa3aa12c5b051"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36a927c52585b9c263811799f76f5a164a909b9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafAF3AAoJEB5K7WKYbNJdc2gIAKfy9cOZg3snVwunOhmrQ6/H\nQg+E57l8AndqlIGNlo5PbeNzhLSDpt5Dt2TXW8XnQgQBhMAyMRTE3LdI1iir7/ID\nBeGcrBtM+C2POxkNgngeOJrztvuA4eVzpBoOYMVejwTWZp3AFokOQwOjPn7nY18P\n08O+I19lzcLXOay3Wrvq3QUgeIFZ8FHBAOe5srppsnMevygldSP6FA1Pej2mWGUV\n/+RO5TD4W9asn7ZmVDf1I6xKtIcU4PTt90qrdprDywMMgirzxqxQVsfJ9SLSXIFU\n1+8ee42u6a+YH65AaJ1NCcJkvdrBlA09MOR0HtpY5Fa+dOBpT++C+EgFIEll1xI=\n=kH+v\n-----END PGP SIGNATURE-----",
        "payload": "tree 9373e6372f8772dc47ab504b23efa3aa12c5b051\nparent 7217ea2cc8dd17784a95574724e76303ac2e2823\nparent 2222bf02c94a10387c318b295982719eb07b8d06\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518076247 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518076279 +0100\n\nMerge #12377: qt: Poll ShutdownTimer after init is done\n\n2222bf0 qt: Poll ShutdownTimer after init is done (MarcoFalke)\n\nPull request description:\n\n  The shutdown process has started in `requestShutdown`, but initialize will happily continue with `initializeResult` and start threads late in the shutdown progess. Deleting this running thread will crash the application according to the qt docs:\n  https://github.com/qt/qtbase/blob/e5033a5c9b769815112e922d0b224af860afd219/src/corelib/thread/qthread.cpp#L412-L415\n\n  Potential fix for https://github.com/bitcoin/bitcoin/issues/12372#issuecomment-363642332\n\n  This reverts #11831 for now and hopefully restores the previous behaviour.\n\nTree-SHA512: 8e1706afe90ddf2d972aca12c12d4cb2a9a4f38646c59c5466fe5a1a67361896b93c43917d5ac283841ee2bcc62e6bb8dc2bc81dea9129c899b354e9a4ef241b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a927c52585b9c263811799f76f5a164a909b9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36a927c52585b9c263811799f76f5a164a909b9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a927c52585b9c263811799f76f5a164a909b9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7217ea2cc8dd17784a95574724e76303ac2e2823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7217ea2cc8dd17784a95574724e76303ac2e2823",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7217ea2cc8dd17784a95574724e76303ac2e2823"
      },
      {
        "sha": "2222bf02c94a10387c318b295982719eb07b8d06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2222bf02c94a10387c318b295982719eb07b8d06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2222bf02c94a10387c318b295982719eb07b8d06"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8fd857e01f26e447a058c81a997d6d41b0ad6e5e",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36a927c52585b9c263811799f76f5a164a909b9d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36a927c52585b9c263811799f76f5a164a909b9d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=36a927c52585b9c263811799f76f5a164a909b9d",
        "patch": "@@ -388,7 +388,6 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n-    pollShutdownTimer->start(200);\n }\n \n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n@@ -515,6 +514,7 @@ void BitcoinApplication::initializeResult(bool success)\n                          window, SLOT(message(QString,QString,unsigned int)));\n         QTimer::singleShot(100, paymentServer, SLOT(uiReady()));\n #endif\n+        pollShutdownTimer->start(200);\n     } else {\n         quit(); // Exit main loop\n     }"
      }
    ]
  },
  {
    "sha": "11f3eac793348ee8e578838926c6dbae772cb8e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWYzZWFjNzkzMzQ4ZWU4ZTU3ODgzODkyNmM2ZGJhZTc3MmNiOGU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T07:52:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T07:53:06Z"
      },
      "message": "Merge #12374: qt: Make sure splash screen is freed on AppInitMain fail\n\n1e5d14b qt: Clarify some comments (Wladimir J. van der Laan)\nf5a4c3d qt: Make sure splash screen is freed on AppInitMain fail (Wladimir J. van der Laan)\n\nPull request description:\n\n  The `splashFinished` event was never sent if AppInitMain fails, causing the splash screen to stick around, causing problems later.\n\n  This bug has existed for a while but is now trigging potential crashed because the splash screen subscribes to wallet events.\n\n  Meant to fix #12372.\n\nTree-SHA512: 192a7e3a528015e771d7860dd95fd7b772292fd8064abf2a3cf3a8ea0d375cd43a6e8ed37ca1a38962fe1410c934599e557adf6a8ef9d87ec7f61b6e5fd8db7e",
      "tree": {
        "sha": "9d981492f2b774dd9c64cc6b238f0edd846e5e81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d981492f2b774dd9c64cc6b238f0edd846e5e81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11f3eac793348ee8e578838926c6dbae772cb8e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafAHiAAoJEB5K7WKYbNJdW9cH/0EyCFuFLCdivWCizY+oFHmq\nJTdtE0qxuI2idWeDqRY9YfyvNNHvR8Nj9O5CYiggAhDbuPGQaNQj/Y9Efa/QHB1v\nV7QVlVSWeBqNWeptig90WsjkBN/3tqFiKf59hYhDx3eBCainXvw7cPtVEEaBWnLk\nAnd584M4PS8W5jEePHQR+zuSFZElBJzIJmj++Yte5muuchEFkYhK6GisAOCI7xrj\n7KrcGbKQq6X4aDBAuYrgM0VwLMdUBCJFl9bzFdt63XOEOMrAbdgb7Tz1B56LXWKZ\nXmSrMbHe/aE8fX2LKKZkQOGtku0Xaoxaa7U1udQkcx2NMmfHHudTxrusmjwftok=\n=MqP/\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d981492f2b774dd9c64cc6b238f0edd846e5e81\nparent 36a927c52585b9c263811799f76f5a164a909b9d\nparent 1e5d14b3f7db814505279d346f0b819443753e66\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518076359 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518076386 +0100\n\nMerge #12374: qt: Make sure splash screen is freed on AppInitMain fail\n\n1e5d14b qt: Clarify some comments (Wladimir J. van der Laan)\nf5a4c3d qt: Make sure splash screen is freed on AppInitMain fail (Wladimir J. van der Laan)\n\nPull request description:\n\n  The `splashFinished` event was never sent if AppInitMain fails, causing the splash screen to stick around, causing problems later.\n\n  This bug has existed for a while but is now trigging potential crashed because the splash screen subscribes to wallet events.\n\n  Meant to fix #12372.\n\nTree-SHA512: 192a7e3a528015e771d7860dd95fd7b772292fd8064abf2a3cf3a8ea0d375cd43a6e8ed37ca1a38962fe1410c934599e557adf6a8ef9d87ec7f61b6e5fd8db7e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f3eac793348ee8e578838926c6dbae772cb8e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11f3eac793348ee8e578838926c6dbae772cb8e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f3eac793348ee8e578838926c6dbae772cb8e5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36a927c52585b9c263811799f76f5a164a909b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36a927c52585b9c263811799f76f5a164a909b9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36a927c52585b9c263811799f76f5a164a909b9d"
      },
      {
        "sha": "1e5d14b3f7db814505279d346f0b819443753e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5d14b3f7db814505279d346f0b819443753e66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5d14b3f7db814505279d346f0b819443753e66"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e4c088d379f08967e4295b1bfd5e8562b6ef03c1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f3eac793348ee8e578838926c6dbae772cb8e5/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f3eac793348ee8e578838926c6dbae772cb8e5/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=11f3eac793348ee8e578838926c6dbae772cb8e5",
        "patch": "@@ -516,13 +516,14 @@ void BitcoinApplication::initializeResult(bool success)\n #endif\n         pollShutdownTimer->start(200);\n     } else {\n-        quit(); // Exit main loop\n+        Q_EMIT splashFinished(window); // Make sure splash screen doesn't stick around during shutdown\n+        quit(); // Exit first main loop invocation\n     }\n }\n \n void BitcoinApplication::shutdownResult()\n {\n-    quit(); // Exit main loop after shutdown finished\n+    quit(); // Exit second main loop invocation after shutdown finished\n }\n \n void BitcoinApplication::handleRunawayException(const QString &message)"
      }
    ]
  },
  {
    "sha": "6db4fa7ad32985cf85c903966be69972bcb6b1d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGI0ZmE3YWQzMjk4NWNmODVjOTAzOTY2YmU2OTk3MmJjYjZiMWQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T07:53:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T08:21:49Z"
      },
      "message": "Merge #12366: http: Join worker threads before deleting work queue\n\n11e0151 http: Remove numThreads and ThreadCounter (Wladimir J. van der Laan)\nf946654 http: Remove WaitExit from WorkQueue (Wladimir J. van der Laan)\nb1c2370 http: Join worker threads before deleting work queue (Wladimir J. van der Laan)\n\nPull request description:\n\n  This prevents a potential race condition if control flow ends up in\n  `ShutdownHTTPServer` before the thread gets to `queue->Run()`,\n  deleting the work queue while workers are still going to use it.\n\n  Meant to fix #12362.\n\nTree-SHA512: 8108514aeee5b2067a3736ed028014b580d1cbf8530ac7682b8a23070133dfa1ca21db4358c9158ea57e8811e0551395b6cb769887876b9cfce067ee968d0642",
      "tree": {
        "sha": "8956e18e8799233882ba31a01ad5c3358a3e6a3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8956e18e8799233882ba31a01ad5c3358a3e6a3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6db4fa7ad32985cf85c903966be69972bcb6b1d0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafAidAAoJEB5K7WKYbNJdDS0IAKGFk5bSGRiKRYy6I7cZgK4w\n/NxqvIccPwAIfxFLJyXOECbLq4kkXEC1kx1JIjdDBps4tfaQ2BJ/HGg6rVzK88U8\npuklp/3SKa2E4EQzthjnHYjjoA6u34CHwRv4d6PbtBqlsR3Vtxq6H/Gv5FT4Y9Su\ntq/6gC+gq6jVovfGJ1XeDdhuQ4XwAcx5VZtmVpTjrOgphezg/69GBqCNardXz0ko\nADMMdcu13AfMTycpxHaWRKFARqFNig3IZIkYuo4l4M66Iv/yl3WAomRefIPVEOd4\nJ2IG9l2tE1ZW+qzlPLBNnI/EAjX1jIOQWUmX4Arg0cfdh8n8avoQ3i8wda+C8J8=\n=+eDE\n-----END PGP SIGNATURE-----",
        "payload": "tree 8956e18e8799233882ba31a01ad5c3358a3e6a3a\nparent 11f3eac793348ee8e578838926c6dbae772cb8e5\nparent 11e01515fe0fbc7823d4111ad6e016a02c485a78\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518076420 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518078109 +0100\n\nMerge #12366: http: Join worker threads before deleting work queue\n\n11e0151 http: Remove numThreads and ThreadCounter (Wladimir J. van der Laan)\nf946654 http: Remove WaitExit from WorkQueue (Wladimir J. van der Laan)\nb1c2370 http: Join worker threads before deleting work queue (Wladimir J. van der Laan)\n\nPull request description:\n\n  This prevents a potential race condition if control flow ends up in\n  `ShutdownHTTPServer` before the thread gets to `queue->Run()`,\n  deleting the work queue while workers are still going to use it.\n\n  Meant to fix #12362.\n\nTree-SHA512: 8108514aeee5b2067a3736ed028014b580d1cbf8530ac7682b8a23070133dfa1ca21db4358c9158ea57e8811e0551395b6cb769887876b9cfce067ee968d0642\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6db4fa7ad32985cf85c903966be69972bcb6b1d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6db4fa7ad32985cf85c903966be69972bcb6b1d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6db4fa7ad32985cf85c903966be69972bcb6b1d0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11f3eac793348ee8e578838926c6dbae772cb8e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f3eac793348ee8e578838926c6dbae772cb8e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11f3eac793348ee8e578838926c6dbae772cb8e5"
      },
      {
        "sha": "11e01515fe0fbc7823d4111ad6e016a02c485a78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11e01515fe0fbc7823d4111ad6e016a02c485a78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11e01515fe0fbc7823d4111ad6e016a02c485a78"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 8,
      "deletions": 34
    },
    "files": [
      {
        "sha": "36db530c82b811ee5776ce9b221eae7b63df40d2",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 34,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6db4fa7ad32985cf85c903966be69972bcb6b1d0/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6db4fa7ad32985cf85c903966be69972bcb6b1d0/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=6db4fa7ad32985cf85c903966be69972bcb6b1d0",
        "patch": "@@ -73,34 +73,13 @@ class WorkQueue\n     std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n     size_t maxDepth;\n-    int numThreads;\n-\n-    /** RAII object to keep track of number of running worker threads */\n-    class ThreadCounter\n-    {\n-    public:\n-        WorkQueue &wq;\n-        explicit ThreadCounter(WorkQueue &w): wq(w)\n-        {\n-            std::lock_guard<std::mutex> lock(wq.cs);\n-            wq.numThreads += 1;\n-        }\n-        ~ThreadCounter()\n-        {\n-            std::lock_guard<std::mutex> lock(wq.cs);\n-            wq.numThreads -= 1;\n-            wq.cond.notify_all();\n-        }\n-    };\n \n public:\n     explicit WorkQueue(size_t _maxDepth) : running(true),\n-                                 maxDepth(_maxDepth),\n-                                 numThreads(0)\n+                                 maxDepth(_maxDepth)\n     {\n     }\n-    /** Precondition: worker threads have all stopped\n-     * (call WaitExit)\n+    /** Precondition: worker threads have all stopped (they have been joined).\n      */\n     ~WorkQueue()\n     {\n@@ -119,7 +98,6 @@ class WorkQueue\n     /** Thread function */\n     void Run()\n     {\n-        ThreadCounter count(*this);\n         while (true) {\n             std::unique_ptr<WorkItem> i;\n             {\n@@ -141,13 +119,6 @@ class WorkQueue\n         running = false;\n         cond.notify_all();\n     }\n-    /** Wait for worker threads to exit */\n-    void WaitExit()\n-    {\n-        std::unique_lock<std::mutex> lock(cs);\n-        while (numThreads > 0)\n-            cond.wait(lock);\n-    }\n };\n \n struct HTTPPathHandler\n@@ -449,6 +420,7 @@ bool UpdateHTTPServerLogging(bool enable) {\n \n std::thread threadHTTP;\n std::future<bool> threadResult;\n+static std::vector<std::thread> g_thread_http_workers;\n \n bool StartHTTPServer()\n {\n@@ -460,8 +432,7 @@ bool StartHTTPServer()\n     threadHTTP = std::thread(std::move(task), eventBase, eventHTTP);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        std::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n-        rpc_worker.detach();\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue);\n     }\n     return true;\n }\n@@ -486,7 +457,10 @@ void StopHTTPServer()\n     LogPrint(BCLog::HTTP, \"Stopping HTTP server\\n\");\n     if (workQueue) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        workQueue->WaitExit();\n+        for (auto& thread: g_thread_http_workers) {\n+            thread.join();\n+        }\n+        g_thread_http_workers.clear();\n         delete workQueue;\n         workQueue = nullptr;\n     }"
      }
    ]
  },
  {
    "sha": "d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTdkMTBlZTk2YTY0Yjc2ZGJmNGE0Y2ZlMGMzNThmNGVlNGI3ZGUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T08:35:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T08:39:38Z"
      },
      "message": "Merge #12368: Hold mempool.cs for the duration of ATMP.\n\n02fc886 Add braces to meet code style on line-after-the-one-changed. (Matt Corallo)\n85aa839 Hold mempool.cs for the duration of ATMP. (Matt Corallo)\n\nPull request description:\n\n  This resolves an issue where getrawmempool() can race mempool\n  notification signals. Intuitively we use mempool.cs as a \"read\n  lock\" on the mempool with cs_main being the write lock, so holding\n  the read lock intermittently while doing write operations is\n  somewhat strange.\n\n  This also avoids the introduction of cs_main in getrawmempool()\n  which reviewers objected to in the previous fix in #12273\n\nTree-SHA512: 29464b9ca3890010ae13b7dc1c53487cc2bc9c3cf3d32a14cb09c8aa33848f57959d8991ea096beebcfb72f062e4e1962f104aefe4252c7db87633bbfe4ab317",
      "tree": {
        "sha": "a9bfedd33b75d79016385e30319c62f474b509cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9bfedd33b75d79016385e30319c62f474b509cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafAzKAAoJEB5K7WKYbNJdfTQIAK3TR7CTylySqQLFf24zZXBw\nSwPUjFEQnbbcn5ILbBIvHPMRXDEZr7nTjd+FIv39Mqur/YxJaadHslKTMfN5hR5z\no1PrBM0SkId2Ug8w7JkewLdrb775CvoB2BY9lYgmgF827qlRg4K8KhVh8+AuMqVU\nDTZ+bKbCPbrQ/qs1rpu8B9bUZHdPepp3urv3ANiByPC8igZRiA4o+zJT6omKwSpi\nxUFCV6izeCXBsIf1b9kkb/ngziilYaZwNcjSvsEzHR+jbOQXtYZmevyUZesfispx\nPplcKEbArp6wdpGkD4k59Ed9K9UVcA9ubtPgHKBRpAMa5ATGnIhA6fs0i2HeQSY=\n=9uOT\n-----END PGP SIGNATURE-----",
        "payload": "tree a9bfedd33b75d79016385e30319c62f474b509cf\nparent 6db4fa7ad32985cf85c903966be69972bcb6b1d0\nparent 02fc8863630a20e75230f8bc3ba1051c480ae560\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518078913 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518079178 +0100\n\nMerge #12368: Hold mempool.cs for the duration of ATMP.\n\n02fc886 Add braces to meet code style on line-after-the-one-changed. (Matt Corallo)\n85aa839 Hold mempool.cs for the duration of ATMP. (Matt Corallo)\n\nPull request description:\n\n  This resolves an issue where getrawmempool() can race mempool\n  notification signals. Intuitively we use mempool.cs as a \"read\n  lock\" on the mempool with cs_main being the write lock, so holding\n  the read lock intermittently while doing write operations is\n  somewhat strange.\n\n  This also avoids the introduction of cs_main in getrawmempool()\n  which reviewers objected to in the previous fix in #12273\n\nTree-SHA512: 29464b9ca3890010ae13b7dc1c53487cc2bc9c3cf3d32a14cb09c8aa33848f57959d8991ea096beebcfb72f062e4e1962f104aefe4252c7db87633bbfe4ab317\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6db4fa7ad32985cf85c903966be69972bcb6b1d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6db4fa7ad32985cf85c903966be69972bcb6b1d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6db4fa7ad32985cf85c903966be69972bcb6b1d0"
      },
      {
        "sha": "02fc8863630a20e75230f8bc3ba1051c480ae560",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02fc8863630a20e75230f8bc3ba1051c480ae560",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02fc8863630a20e75230f8bc3ba1051c480ae560"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "978aaf7d06e1cb4e673115473cdaa1a87bf001bb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2",
        "patch": "@@ -547,8 +547,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n     AssertLockHeld(cs_main);\n-    if (pfMissingInputs)\n+    LOCK(pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n+    if (pfMissingInputs) {\n         *pfMissingInputs = false;\n+    }\n \n     if (!CheckTransaction(tx, state))\n         return false; // state filled in by CheckTransaction\n@@ -581,8 +583,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Check for conflicts with in-memory transactions\n     std::set<uint256> setConflicts;\n-    {\n-    LOCK(pool.cs); // protect pool.mapNextTx\n     for (const CTxIn &txin : tx.vin)\n     {\n         auto itConflicting = pool.mapNextTx.find(txin.prevout);\n@@ -623,15 +623,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             }\n         }\n     }\n-    }\n \n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n \n         LockPoints lp;\n-        {\n-        LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(pcoinsTip.get(), pool);\n         view.SetBackend(viewMemPool);\n \n@@ -670,8 +667,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n \n-        } // end LOCK(pool.cs)\n-\n         CAmount nFees = 0;\n         if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees)) {\n             return error(\"%s: Consensus::CheckTxInputs: %s, %s\", __func__, tx.GetHash().ToString(), FormatStateMessage(state));\n@@ -768,7 +763,6 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // If we don't hold the lock allConflicting might be incomplete; the\n         // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n         // mempool consistency for us.\n-        LOCK(pool.cs);\n         const bool fReplacementTransaction = setConflicts.size();\n         if (fReplacementTransaction)\n         {"
      }
    ]
  },
  {
    "sha": "ab4ee6e692427b372dc9acb887c46849b324cd40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjRlZTZlNjkyNDI3YjM3MmRjOWFjYjg4N2M0Njg0OWIzMjRjZDQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T08:40:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T08:55:54Z"
      },
      "message": "Merge #12315: Bech32 addresses in dumpwallet\n\n45eea40 Bech32 addresses in dumpwallet (fivepiece)\n\nPull request description:\n\n  Output bech32 addresses in dumpwallet if address type is not as legacy\n\nTree-SHA512: f6b6f788293779fe6339b94d9b792180e1d1dcb9c8e826caef8693557e1710213ba57891981c17505ace8d67b407eeca6fd9a8825757dd292cca2aa12575d15c",
      "tree": {
        "sha": "9decd3e7f8f7bfb8d12d0300e6a2c68dc846145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9decd3e7f8f7bfb8d12d0300e6a2c68dc846145e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab4ee6e692427b372dc9acb887c46849b324cd40",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafBCaAAoJEB5K7WKYbNJdGFwH/j+3nIlDDbd6rlG+8Pvf0jGk\nRLLDQLgqKD7tm6v3jhAToAyzYz6ygSmSYB3CV1RDNGipLKR/mzge/57p3NJqPtmA\nB6/UL/O9Co7x+00jlwXGD6MUzHn/EFRAdqdhp4YZTZgY3BB0X6KN60L/8GMrydPU\nC4koRpq7UB1Br1a96mVnE4MUCakc8BLzAjtaagOlHCz+vzOJOUHQLy2jbH7A0iuV\n6xyyEZegvhBIy+hBiKYZupB6p+oAO+hv+KkSl/ZMy7tMm2xnG3nuDysRYssmoNX1\nwVwlYYO5KDWGBWKSwqNQfPGkwbkiJ07MzWkY2rsGivPNFHHhjotWrwmgZFOOPiM=\n=p3yK\n-----END PGP SIGNATURE-----",
        "payload": "tree 9decd3e7f8f7bfb8d12d0300e6a2c68dc846145e\nparent d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2\nparent 45eea40aa88f047111a9b1151fe4d1bad5c560e2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518079242 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518080154 +0100\n\nMerge #12315: Bech32 addresses in dumpwallet\n\n45eea40 Bech32 addresses in dumpwallet (fivepiece)\n\nPull request description:\n\n  Output bech32 addresses in dumpwallet if address type is not as legacy\n\nTree-SHA512: f6b6f788293779fe6339b94d9b792180e1d1dcb9c8e826caef8693557e1710213ba57891981c17505ace8d67b407eeca6fd9a8825757dd292cca2aa12575d15c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab4ee6e692427b372dc9acb887c46849b324cd40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab4ee6e692427b372dc9acb887c46849b324cd40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab4ee6e692427b372dc9acb887c46849b324cd40/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d57d10ee96a64b76dbf4a4cfe0c358f4ee4b7de2"
      },
      {
        "sha": "45eea40aa88f047111a9b1151fe4d1bad5c560e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45eea40aa88f047111a9b1151fe4d1bad5c560e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45eea40aa88f047111a9b1151fe4d1bad5c560e2"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 42,
      "deletions": 7
    },
    "files": [
      {
        "sha": "03fb824e7a0b3e1d841279afb7435f3b913f32e2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab4ee6e692427b372dc9acb887c46849b324cd40/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab4ee6e692427b372dc9acb887c46849b324cd40/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ab4ee6e692427b372dc9acb887c46849b324cd40",
        "patch": "@@ -71,6 +71,28 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std::string &strAddr, std::string &strLabel)\n+{\n+    bool fLabelFound = false;\n+    CKey key;\n+    pwallet->GetKey(keyid, key);\n+    for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey())) {\n+        if (pwallet->mapAddressBook.count(dest)) {\n+            if (!strAddr.empty()) {\n+                strAddr += \",\";\n+            }\n+            strAddr += EncodeDestination(dest);\n+            strLabel = EncodeDumpString(pwallet->mapAddressBook[dest].name);\n+            fLabelFound = true;\n+        }\n+    }\n+    if (!fLabelFound) {\n+        strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), g_address_type));\n+    }\n+    return fLabelFound;\n+}\n+\n+\n UniValue importprivkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -729,12 +751,13 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n-        std::string strAddr = EncodeDestination(keyid);\n+        std::string strAddr;\n+        std::string strLabel;\n         CKey key;\n         if (pwallet->GetKey(keyid, key)) {\n             file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n-            if (pwallet->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"label=%s\", EncodeDumpString(pwallet->mapAddressBook[keyid].name));\n+            if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n+               file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == masterKeyID) {\n                 file << \"hdmaster=1\";\n             } else if (mapKeyPool.count(keyid)) {"
      },
      {
        "sha": "5e943d048d731f4ab2ae7ae1ae5f36dfc6af9880",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab4ee6e692427b372dc9acb887c46849b324cd40/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab4ee6e692427b372dc9acb887c46849b324cd40/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=ab4ee6e692427b372dc9acb887c46849b324cd40",
        "patch": "@@ -20,6 +20,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n         found_script_addr = 0\n         found_addr_chg = 0\n         found_addr_rsv = 0\n+        witness_addr_ret = None\n         hd_master_addr_ret = None\n         for line in inputfile:\n             # only read non comment lines\n@@ -47,7 +48,14 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n \n                     # count key types\n                     for addrObj in addrs:\n-                        if addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                            # a labled entry in the wallet should contain both a native address\n+                            # and the p2sh-p2wpkh address that was added at wallet setup\n+                            if len(addr.split(\",\")) == 2:\n+                                addr_list = addr.split(\",\")\n+                                # the entry should be of the first key in the wallet\n+                                assert_equal(addrs[0]['address'], addr_list[0])\n+                                witness_addr_ret = addr_list[1]\n                             found_addr += 1\n                             break\n                         elif keytype == \"change=1\":\n@@ -63,7 +71,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                             found_script_addr += 1\n                             break\n \n-        return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n+        return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -83,6 +91,8 @@ def run_test (self):\n         tmpdir = self.options.tmpdir\n \n         # generate 20 addresses to compare against the dump\n+        # but since we add a p2sh-p2wpkh address for the first pubkey in the\n+        # wallet, we will expect 21 addresses in the dump\n         test_addr_count = 20\n         addrs = []\n         for i in range(0,test_addr_count):\n@@ -101,12 +111,13 @@ def run_test (self):\n         result = self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n         assert_equal(result['filename'], os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n-        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc, witness_addr_ret = \\\n             read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n         assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -116,12 +127,13 @@ def run_test (self):\n         self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _ = \\\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _, witness_addr_ret = \\\n             read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n+        assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail\n         assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")"
      }
    ]
  },
  {
    "sha": "c9ca4f6024e01fdca509ae07887e6fe2157c6384",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWNhNGY2MDI0ZTAxZmRjYTUwOWFlMDc4ODdlNmZlMjE1N2M2Mzg0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T10:11:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T10:11:34Z"
      },
      "message": "Merge #12371: Add gitian PGP key: akx20000\n\nb947d38 Add gitian PGP key: akx20000 (Akira Takizawa)\n\nPull request description:\n\nTree-SHA512: 14f8baf23120fece260ea2929c431f398a5715ef047bef9d3f6811abddf0d223defdbc30bc0be95f30550ed0cb8a81bab8ecbd21464a39b1860a60f593388250",
      "tree": {
        "sha": "4f276a682a04924852b3e276be00927ef4ffcfe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f276a682a04924852b3e276be00927ef4ffcfe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9ca4f6024e01fdca509ae07887e6fe2157c6384",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafCJWAAoJEB5K7WKYbNJdbaoIALUPDiXRzlhjXDy77PEDtBpU\nB7T/hXXkbbsJfJ9GW4fX8HF4OTXUAne0o7sQEBlcZUzNolrV5hUyg9kInMTauHC5\n+/hFdTb+hVJ/FmdXRvl4dKN8DRy1XzBg1bbrV4meALRZ9kCeZO3FKimuCL6OLUsx\n9vRsAZwItNUUy8fePnEhn2OlBbPUMCYiY9zV+VUqZgv4UmnIEvMnM8CNrdOzlJdH\nb2CTAIS0yLaU/gbUph9dPH4+xF4YMUr+Hk8rFEQedbmqQ9MIUDLubpzFY6K6J4Xk\nmM552EO9oYSYqdrOT3rCwp3Q2rVZsV59WACcJTJVvH0wDBW+IqxxlhewT8TvqNU=\n=koE6\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f276a682a04924852b3e276be00927ef4ffcfe3\nparent ab4ee6e692427b372dc9acb887c46849b324cd40\nparent b947d3811c94d73d739bdc8f614a1671a83a8d28\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518084682 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518084694 +0100\n\nMerge #12371: Add gitian PGP key: akx20000\n\nb947d38 Add gitian PGP key: akx20000 (Akira Takizawa)\n\nPull request description:\n\nTree-SHA512: 14f8baf23120fece260ea2929c431f398a5715ef047bef9d3f6811abddf0d223defdbc30bc0be95f30550ed0cb8a81bab8ecbd21464a39b1860a60f593388250\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ca4f6024e01fdca509ae07887e6fe2157c6384",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9ca4f6024e01fdca509ae07887e6fe2157c6384",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ca4f6024e01fdca509ae07887e6fe2157c6384/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab4ee6e692427b372dc9acb887c46849b324cd40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab4ee6e692427b372dc9acb887c46849b324cd40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab4ee6e692427b372dc9acb887c46849b324cd40"
      },
      {
        "sha": "b947d3811c94d73d739bdc8f614a1671a83a8d28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b947d3811c94d73d739bdc8f614a1671a83a8d28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b947d3811c94d73d739bdc8f614a1671a83a8d28"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "868051d5459170ef959bb8fddef9789052a2fbd7",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9ca4f6024e01fdca509ae07887e6fe2157c6384/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9ca4f6024e01fdca509ae07887e6fe2157c6384/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=c9ca4f6024e01fdca509ae07887e6fe2157c6384",
        "patch": "@@ -1,3 +1,4 @@\n+617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n 152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n 07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)"
      }
    ]
  },
  {
    "sha": "a1ffddb90d1bb00a6c6c03a109e549a06c544126",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWZmZGRiOTBkMWJiMDBhNmM2YzAzYTEwOWU1NDlhMDZjNTQ0MTI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T12:30:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T12:31:22Z"
      },
      "message": "Merge #12298: Refactor HaveKeys to early return on false result\n\n5bdbbdc Refactor HaveKeys to early return on false result (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This consists in a trivial change where the return type of `HaveKeys()` is now `bool` meaning that it returns whether all keys are in the keystore, and early returns when one isn't.\n\nTree-SHA512: 03e35ea8486404b84884b49f6905c9f4fc161a3eeef080b06482d77985d5242a2bdd57a34b8d16abe19ee8c6cfa3e6fbcb935c73197d53f4cd468a2c7c0b889b",
      "tree": {
        "sha": "f68934ee1c32d207078e6e242b38c3645b7bbef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f68934ee1c32d207078e6e242b38c3645b7bbef2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1ffddb90d1bb00a6c6c03a109e549a06c544126",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafEMaAAoJEB5K7WKYbNJdxgMIAJ4cZCQLoWd9SpHiQVNk9kga\nBuZ2qt/36uSLFjrMb91NclFku/B19MyynglewdOydMC7A7PGK+DN2DImZvuqXPki\nmvxayM2TtosY1I5bWzScVDcuwsSR0Q4fuNSy0HRd/pTq0K0lsKxDnbilk7J8eD/X\neadzDnOuhzU7FTnv2vsi79UiCYm84Z4lkGakqk07WPJNFZUCNTRmqohN3QYPyHsE\ngVi6/G2srZNk0s4MHHPrh108Zr80zryBcDKQp9/9YhDb9GP9C9Wrm0S3dNNdyaDF\n+eP8eQCaFVsKktwk2paPWSjd+Q8XBaHiVWIfPfellfMQz7qwCNYRqwAXWWwb7Jk=\n=H0Tp\n-----END PGP SIGNATURE-----",
        "payload": "tree f68934ee1c32d207078e6e242b38c3645b7bbef2\nparent c9ca4f6024e01fdca509ae07887e6fe2157c6384\nparent 5bdbbdc0967626a763c836a55dc7d018c15c10f2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518093034 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518093082 +0100\n\nMerge #12298: Refactor HaveKeys to early return on false result\n\n5bdbbdc Refactor HaveKeys to early return on false result (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This consists in a trivial change where the return type of `HaveKeys()` is now `bool` meaning that it returns whether all keys are in the keystore, and early returns when one isn't.\n\nTree-SHA512: 03e35ea8486404b84884b49f6905c9f4fc161a3eeef080b06482d77985d5242a2bdd57a34b8d16abe19ee8c6cfa3e6fbcb935c73197d53f4cd468a2c7c0b889b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ffddb90d1bb00a6c6c03a109e549a06c544126",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1ffddb90d1bb00a6c6c03a109e549a06c544126",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ffddb90d1bb00a6c6c03a109e549a06c544126/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9ca4f6024e01fdca509ae07887e6fe2157c6384",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9ca4f6024e01fdca509ae07887e6fe2157c6384",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9ca4f6024e01fdca509ae07887e6fe2157c6384"
      },
      {
        "sha": "5bdbbdc0967626a763c836a55dc7d018c15c10f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bdbbdc0967626a763c836a55dc7d018c15c10f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bdbbdc0967626a763c836a55dc7d018c15c10f2"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "35d794b983e581a93727c88d818198afafd463e5",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1ffddb90d1bb00a6c6c03a109e549a06c544126/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1ffddb90d1bb00a6c6c03a109e549a06c544126/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=a1ffddb90d1bb00a6c6c03a109e549a06c544126",
        "patch": "@@ -13,16 +13,13 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-unsigned int HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n+static bool HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keystore)\n {\n-    unsigned int nResult = 0;\n-    for (const valtype& pubkey : pubkeys)\n-    {\n+    for (const valtype& pubkey : pubkeys) {\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (keystore.HaveKey(keyID))\n-            ++nResult;\n+        if (!keystore.HaveKey(keyID)) return false;\n     }\n-    return nResult;\n+    return true;\n }\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion sigversion)\n@@ -140,7 +137,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n                 }\n             }\n         }\n-        if (HaveKeys(keys, keystore) == keys.size())\n+        if (HaveKeys(keys, keystore))\n             return ISMINE_SPENDABLE;\n         break;\n     }"
      }
    ]
  },
  {
    "sha": "b2645286745b77a8268d00497e0cbccecf42952c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjY0NTI4Njc0NWI3N2E4MjY4ZDAwNDk3ZTBjYmNjZWNmNDI5NTJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T12:49:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T12:51:13Z"
      },
      "message": "Merge #12354: add gpg key for fivepiece\n\n27736f2 add fivepiece key fingerprint (fivepiece)\n\nPull request description:\n\nTree-SHA512: 6b2b7ca22eb02338ac2e41e8ac577bd9401f771571531d3d4c473aacc544bd4304318e311cc50b7e84236bebd7a2fda9d4c16232fefe0de4291bbbc6959b4f4b",
      "tree": {
        "sha": "5fd332df20f46ad27c6254196162624db59c4238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fd332df20f46ad27c6254196162624db59c4238"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2645286745b77a8268d00497e0cbccecf42952c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafEfBAAoJEB5K7WKYbNJdnA4IAK94ZK2tYtyFCJ1PTbL+ysHY\nqk2biAyOKNZPlQzCNNUWXZwKHsd2M2xnZZI2HVA89/UZPH5kiptPNw5q50+3uDcQ\nbW36GtIhOClLoq5jy9qvZ/hKbI9KWvEgsfoGdIxj/T2SrV4rkhhbwyfPDejRftAk\nlBx0rjtYphySrO1OravfjYccSnqj86yCjnhijtioRdHvsUOiuaodQHD1iUHhRvjY\n+C/a7EMEf2qwBO37urv8CywSfDJh8GiAC8Tgem383Zv1Dq/uAEV5vZJTwR23VjBT\nLreHOYBSpNhFmSN+zp9bOAQoMWCzPrv1A5cyMHRw3ll5Cm25ZlgV8wH+RA86eVg=\n=zbFQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5fd332df20f46ad27c6254196162624db59c4238\nparent a1ffddb90d1bb00a6c6c03a109e549a06c544126\nparent 27736f22d58de56d0ba49d6654d034ccceff47f4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518094152 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518094273 +0100\n\nMerge #12354: add gpg key for fivepiece\n\n27736f2 add fivepiece key fingerprint (fivepiece)\n\nPull request description:\n\nTree-SHA512: 6b2b7ca22eb02338ac2e41e8ac577bd9401f771571531d3d4c473aacc544bd4304318e311cc50b7e84236bebd7a2fda9d4c16232fefe0de4291bbbc6959b4f4b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2645286745b77a8268d00497e0cbccecf42952c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2645286745b77a8268d00497e0cbccecf42952c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2645286745b77a8268d00497e0cbccecf42952c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1ffddb90d1bb00a6c6c03a109e549a06c544126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ffddb90d1bb00a6c6c03a109e549a06c544126",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1ffddb90d1bb00a6c6c03a109e549a06c544126"
      },
      {
        "sha": "27736f22d58de56d0ba49d6654d034ccceff47f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27736f22d58de56d0ba49d6654d034ccceff47f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27736f22d58de56d0ba49d6654d034ccceff47f4"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "47da725b74982d509b4b8b61497d06979bbf0802",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2645286745b77a8268d00497e0cbccecf42952c/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2645286745b77a8268d00497e0cbccecf42952c/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=b2645286745b77a8268d00497e0cbccecf42952c",
        "patch": "@@ -8,6 +8,7 @@ F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n 9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n+D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012"
      }
    ]
  },
  {
    "sha": "ed45c8201977aecde226b2e9b060820a8fd677c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDQ1YzgyMDE5NzdhZWNkZTIyNmIyZTliMDYwODIwYThmZDY3N2Mz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T17:46:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T13:59:09Z"
      },
      "message": "[tests] Remove test for deprecated createmultsig option",
      "tree": {
        "sha": "fb634517c933ef7de2c67b0b0a2d9660d503c5a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb634517c933ef7de2c67b0b0a2d9660d503c5a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed45c8201977aecde226b2e9b060820a8fd677c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed45c8201977aecde226b2e9b060820a8fd677c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed45c8201977aecde226b2e9b060820a8fd677c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed45c8201977aecde226b2e9b060820a8fd677c3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d066a1c069e2def43f758a3d24c972f7625d6240",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d066a1c069e2def43f758a3d24c972f7625d6240",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d066a1c069e2def43f758a3d24c972f7625d6240"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "90183474bbd24dddb549245844134de24f913dd1",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed45c8201977aecde226b2e9b060820a8fd677c3/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed45c8201977aecde226b2e9b060820a8fd677c3/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=ed45c8201977aecde226b2e9b060820a8fd677c3",
        "patch": "@@ -4,18 +4,24 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=createmultisig\"]]\n+        self.extra_args = [[], []]\n \n     def run_test(self):\n-        self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n-        assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n-        self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        # This test should be used to verify correct behaviour of deprecated\n+        # RPC methods with and without the -deprecatedrpc flags. For example:\n+        #\n+        # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n+        # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n+        # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        #\n+        # There are currently no deprecated RPC methods in master, so this\n+        # test is currently empty.\n+        pass\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "cb28a0b07f889a327731a86d7c13681c3007437f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjI4YTBiMDdmODg5YTMyNzczMWE4NmQ3YzEzNjgxYzMwMDc0Mzdm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T19:34:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T13:59:28Z"
      },
      "message": "[RPC] Remove deprecated createmultisig object",
      "tree": {
        "sha": "210d20a0942c6149e27bfdf807debe5b6a5e91c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/210d20a0942c6149e27bfdf807debe5b6a5e91c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb28a0b07f889a327731a86d7c13681c3007437f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb28a0b07f889a327731a86d7c13681c3007437f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb28a0b07f889a327731a86d7c13681c3007437f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb28a0b07f889a327731a86d7c13681c3007437f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed45c8201977aecde226b2e9b060820a8fd677c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed45c8201977aecde226b2e9b060820a8fd677c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed45c8201977aecde226b2e9b060820a8fd677c3"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 1,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e772f5653452b9f7524c31b65fd995d64b5fbd69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb28a0b07f889a327731a86d7c13681c3007437f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb28a0b07f889a327731a86d7c13681c3007437f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=cb28a0b07f889a327731a86d7c13681c3007437f",
        "patch": "@@ -262,9 +262,6 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         std::string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n-            \"DEPRECATION WARNING: Using addresses with createmultisig is deprecated. Clients must\\n\"\n-            \"transition to using addmultisigaddress to create multisig addresses with addresses known\\n\"\n-            \"to the wallet before upgrading to v0.17. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n@@ -297,15 +294,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         if (IsHex(keys[i].get_str()) && (keys[i].get_str().length() == 66 || keys[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys[i].get_str()));\n         } else {\n-#ifdef ENABLE_WALLET\n-            CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n-            if (IsDeprecatedRPCEnabled(\"createmultisig\") && EnsureWalletIsAvailable(pwallet, false)) {\n-                pubkeys.push_back(AddrToPubKey(pwallet, keys[i].get_str()));\n-            } else\n-#endif\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid public key: %s\\nNote that from v0.16, createmultisig no longer accepts addresses.\"\n-            \" Clients must transition to using addmultisigaddress to create multisig addresses with addresses known to the wallet before upgrading to v0.17.\"\n-            \" To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\", keys[i].get_str()));\n+            \" Users must use addmultisigaddress to create multisig addresses with addresses known to the wallet.\", keys[i].get_str()));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "db1cbcc8563722500856df6dea552d51464d173e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjFjYmNjODU2MzcyMjUwMDg1NmRmNmRlYTU1MmQ1MTQ2NGQxNzNl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T19:41:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T13:59:28Z"
      },
      "message": "[RPC] Remove deprecated addmultisigaddress return format",
      "tree": {
        "sha": "75f88977f335c4940dde138d05dcadec39d1bf9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75f88977f335c4940dde138d05dcadec39d1bf9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db1cbcc8563722500856df6dea552d51464d173e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db1cbcc8563722500856df6dea552d51464d173e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb28a0b07f889a327731a86d7c13681c3007437f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb28a0b07f889a327731a86d7c13681c3007437f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb28a0b07f889a327731a86d7c13681c3007437f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "afad69615477cb825f993558da70f376c89a600b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db1cbcc8563722500856df6dea552d51464d173e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db1cbcc8563722500856df6dea552d51464d173e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=db1cbcc8563722500856df6dea552d51464d173e",
        "patch": "@@ -1192,10 +1192,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n             \"}\\n\"\n-            \"\\nResult (DEPRECATED. To see this result in v0.16 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).\\n\"\n-            \"        clients should transition to the new output api before upgrading to v0.17.\\n\"\n-            \"\\\"address\\\"                         (string) A bitcoin address associated with the keys.\\n\"\n-\n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n             + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n@@ -1238,11 +1234,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n     CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, output_type);\n     pwallet->SetAddressBook(dest, strAccount, \"send\");\n \n-    // Return old style interface\n-    if (IsDeprecatedRPCEnabled(\"addmultisigaddress\")) {\n-        return EncodeDestination(dest);\n-    }\n-\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));"
      }
    ]
  },
  {
    "sha": "3843780fd8e0bed6a0813bbaf231664fac91964d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODQzNzgwZmQ4ZTBiZWQ2YTA4MTNiYmFmMjMxNjY0ZmFjOTE5NjRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T14:26:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T14:38:21Z"
      },
      "message": "Merge #12336: Remove deprecated rpc options\n\ndb1cbcc [RPC] Remove deprecated addmultisigaddress return format (John Newbery)\ncb28a0b [RPC] Remove deprecated createmultisig object (John Newbery)\ned45c82 [tests] Remove test for deprecated createmultsig option (John Newbery)\nd066a1c [rpc] Remove deprecated getmininginfo RPC option (John Newbery)\nc6f09c2 [rpc] remove deprecated estimatefee RPC (John Newbery)\na8e437a [tests] Remove estimatefee from rpc_deprecated.py test (John Newbery)\na5623b1 [tests] Remove tests for deprecated estimatefee RPC (John Newbery)\nd119f2e [tests] Fix style warnings in feature_fee_estimation.py (John Newbery)\n\nPull request description:\n\n  There were some RPC/RPC options deprecated in v0.16. Those can now be removed from master since v0.16 has been branched.\n\n  - `estimatefee` RPC has been removed. The `feature_fee_estimation.py` test has been updated to remove the RPC, but doesn't yet have good coverage of the replacement RPC `estimatesmartfee`. Improving the test coverage should be done in a new PR. (#11031)\n  - the `errors` field returned by `getmininginfo` has been deprecated and replaced by a `warning` field. (#10858)\n  - providing addresses as inputs to `createmultisig` has been deprecated. Users should use `addmultisigaddress` instead (#11415)\n  - The return format from `addmultisigaddress` has changed (#11415)\n\n  `getwitnessaddress` was also deprecated in v0.16 and can be removed, but many tests are using that RPC, so it's a larger job to remove. It should be removed in a separate PR (possibly after #11739 and #11398 have been merged and the segwit test code tidied up)\n\nTree-SHA512: 8ffaa5f6094131339b9e9e468e8b141de4b144697d2271efa2992b80b12eb97849ade3da8df5c1c9400ed4c04e6a029926550a3e5846d2029b644f9e84ac7124",
      "tree": {
        "sha": "ace86d61570a98d97aa5fbc65c7d11b97038bcc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ace86d61570a98d97aa5fbc65c7d11b97038bcc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3843780fd8e0bed6a0813bbaf231664fac91964d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafGDdAAoJEB5K7WKYbNJdu7MIAMFEuoT6SeQ07GGsoiCXrbKx\njWKz2Y1qW4gcGD3FrR913/TwLSafJ0vDSEs8eyXUE3jGuZiYamr4NC07Oe981EQt\nRwyl2yMGv8gXGip9sWsHgtbcdw3NHwUZpenrwalJtDFcEASPijq+27gv8NSGPET5\nTxU58ZCXG7r8UGITKh0jwTXJwQBuZSK4sUHKFa1W5a8GGNCRWp9c63d6jq4gZrVP\nG/ppUjols36NxUJI0sk9IgPkYVgjP+f68y8q81PxbfiSzNKUHVzS4rxb0QAgtQre\n9tdajw0Z9SDD3lDe7U4CJ8azdmlXhzNv5ENiwdWUAjLGbil1/lkN/nqW198r4V4=\n=QxVo\n-----END PGP SIGNATURE-----",
        "payload": "tree ace86d61570a98d97aa5fbc65c7d11b97038bcc8\nparent b2645286745b77a8268d00497e0cbccecf42952c\nparent db1cbcc8563722500856df6dea552d51464d173e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518099980 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518100701 +0100\n\nMerge #12336: Remove deprecated rpc options\n\ndb1cbcc [RPC] Remove deprecated addmultisigaddress return format (John Newbery)\ncb28a0b [RPC] Remove deprecated createmultisig object (John Newbery)\ned45c82 [tests] Remove test for deprecated createmultsig option (John Newbery)\nd066a1c [rpc] Remove deprecated getmininginfo RPC option (John Newbery)\nc6f09c2 [rpc] remove deprecated estimatefee RPC (John Newbery)\na8e437a [tests] Remove estimatefee from rpc_deprecated.py test (John Newbery)\na5623b1 [tests] Remove tests for deprecated estimatefee RPC (John Newbery)\nd119f2e [tests] Fix style warnings in feature_fee_estimation.py (John Newbery)\n\nPull request description:\n\n  There were some RPC/RPC options deprecated in v0.16. Those can now be removed from master since v0.16 has been branched.\n\n  - `estimatefee` RPC has been removed. The `feature_fee_estimation.py` test has been updated to remove the RPC, but doesn't yet have good coverage of the replacement RPC `estimatesmartfee`. Improving the test coverage should be done in a new PR. (#11031)\n  - the `errors` field returned by `getmininginfo` has been deprecated and replaced by a `warning` field. (#10858)\n  - providing addresses as inputs to `createmultisig` has been deprecated. Users should use `addmultisigaddress` instead (#11415)\n  - The return format from `addmultisigaddress` has changed (#11415)\n\n  `getwitnessaddress` was also deprecated in v0.16 and can be removed, but many tests are using that RPC, so it's a larger job to remove. It should be removed in a separate PR (possibly after #11739 and #11398 have been merged and the segwit test code tidied up)\n\nTree-SHA512: 8ffaa5f6094131339b9e9e468e8b141de4b144697d2271efa2992b80b12eb97849ade3da8df5c1c9400ed4c04e6a029926550a3e5846d2029b644f9e84ac7124\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3843780fd8e0bed6a0813bbaf231664fac91964d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3843780fd8e0bed6a0813bbaf231664fac91964d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3843780fd8e0bed6a0813bbaf231664fac91964d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2645286745b77a8268d00497e0cbccecf42952c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2645286745b77a8268d00497e0cbccecf42952c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2645286745b77a8268d00497e0cbccecf42952c"
      },
      {
        "sha": "db1cbcc8563722500856df6dea552d51464d173e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db1cbcc8563722500856df6dea552d51464d173e"
      }
    ],
    "stats": {
      "total": 257,
      "additions": 87,
      "deletions": 170
    },
    "files": [
      {
        "sha": "99c1242d8ad503e8021d45dd6d0acfa7bce95350",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -114,7 +114,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n-    { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },"
      },
      {
        "sha": "69d0d12e864d194c11908c6a07c63327fa1bcc40",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 44,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -201,7 +201,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmininginfo\", \"\")\n@@ -219,11 +218,7 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    if (IsDeprecatedRPCEnabled(\"getmininginfo\")) {\n-        obj.push_back(Pair(\"errors\",       GetWarnings(\"statusbar\")));\n-    } else {\n-        obj.push_back(Pair(\"warnings\",     GetWarnings(\"statusbar\")));\n-    }\n+    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n     return obj;\n }\n \n@@ -772,43 +767,8 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n UniValue estimatefee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"estimatefee nblocks\\n\"\n-            \"\\nDEPRECATED. Please use estimatesmartfee for more intelligent estimates.\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks. Uses virtual transaction size of transaction\\n\"\n-            \"as defined in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, required)\\n\"\n-            \"\\nResult:\\n\"\n-            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n-            \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate.\\n\"\n-            \"-1 is always returned for nblocks == 1 as it is impossible to calculate\\n\"\n-            \"a fee that is high enough to get reliably included in the next block.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatefee\", \"6\")\n-            );\n-\n-    if (!IsDeprecatedRPCEnabled(\"estimatefee\")) {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee is deprecated and will be fully removed in v0.17. \"\n-            \"To use estimatefee in v0.16, restart bitcoind with -deprecatedrpc=estimatefee.\\n\"\n-            \"Projects should transition to using estimatesmartfee before upgrading to v0.17\");\n-    }\n-\n-    RPCTypeCheck(request.params, {UniValue::VNUM});\n-\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1)\n-        nBlocks = 1;\n-\n-    CFeeRate feeRate = ::feeEstimator.estimateFee(nBlocks);\n-    if (feeRate == CFeeRate(0))\n-        return -1.0;\n-\n-    return ValueFromAmount(feeRate.GetFeePerK());\n+    throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n+        \"Clients should use estimatesmartfee.\");\n }\n \n UniValue estimatesmartfee(const JSONRPCRequest& request)\n@@ -986,7 +946,7 @@ static const CRPCCommand commands[] =\n \n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n \n-    { \"util\",               \"estimatefee\",            &estimatefee,            {\"nblocks\"} },\n+    { \"hidden\",             \"estimatefee\",            &estimatefee,            {} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },"
      },
      {
        "sha": "e772f5653452b9f7524c31b65fd995d64b5fbd69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -262,9 +262,6 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         std::string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n-            \"DEPRECATION WARNING: Using addresses with createmultisig is deprecated. Clients must\\n\"\n-            \"transition to using addmultisigaddress to create multisig addresses with addresses known\\n\"\n-            \"to the wallet before upgrading to v0.17. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n@@ -297,15 +294,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         if (IsHex(keys[i].get_str()) && (keys[i].get_str().length() == 66 || keys[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys[i].get_str()));\n         } else {\n-#ifdef ENABLE_WALLET\n-            CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n-            if (IsDeprecatedRPCEnabled(\"createmultisig\") && EnsureWalletIsAvailable(pwallet, false)) {\n-                pubkeys.push_back(AddrToPubKey(pwallet, keys[i].get_str()));\n-            } else\n-#endif\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid public key: %s\\nNote that from v0.16, createmultisig no longer accepts addresses.\"\n-            \" Clients must transition to using addmultisigaddress to create multisig addresses with addresses known to the wallet before upgrading to v0.17.\"\n-            \" To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\", keys[i].get_str()));\n+            \" Users must use addmultisigaddress to create multisig addresses with addresses known to the wallet.\", keys[i].get_str()));\n         }\n     }\n "
      },
      {
        "sha": "efe81e98aa17c5c3409a8b402325e22b78a2c069",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -1192,10 +1192,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n             \"}\\n\"\n-            \"\\nResult (DEPRECATED. To see this result in v0.16 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).\\n\"\n-            \"        clients should transition to the new output api before upgrading to v0.17.\\n\"\n-            \"\\\"address\\\"                         (string) A bitcoin address associated with the keys.\\n\"\n-\n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n             + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n@@ -1238,11 +1234,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n     CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, output_type);\n     pwallet->SetAddressBook(dest, strAccount, \"send\");\n \n-    // Return old style interface\n-    if (IsDeprecatedRPCEnabled(\"addmultisigaddress\")) {\n-        return EncodeDestination(dest);\n-    }\n-\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n@@ -3260,8 +3251,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n             \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n             \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n-            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+            \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n             \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n             \"returned by getnetworkinfo) to enter the node's mempool.\\n\""
      },
      {
        "sha": "e1263414bde38959e3a973272117f6b07a86359a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 69,
        "deletions": 92,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -3,39 +3,47 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n+from decimal import Decimal\n+import random\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n+from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    connect_nodes,\n+    satoshi_round,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend\n # time signing.\n-redeem_script_1 = CScript([OP_1, OP_DROP])\n-redeem_script_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = CScript([OP_HASH160, hash160(redeem_script_1), OP_EQUAL])\n-P2SH_2 = CScript([OP_HASH160, hash160(redeem_script_2), OP_EQUAL])\n+REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n+REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n+P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])\n+P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])\n \n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n-SCRIPT_SIG = [CScript([OP_TRUE, redeem_script_1]), CScript([OP_TRUE, redeem_script_2])]\n-\n-global log\n+SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]\n \n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n-    \"\"\"\n-    Create and send a transaction with a random fee.\n+    \"\"\"Create and send a transaction with a random fee.\n+\n     The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n     It adds the newly created outputs to the unconfirmed list.\n-    Returns (raw transaction, fee)\n-    \"\"\"\n+    Returns (raw transaction, fee).\"\"\"\n+\n     # It's best to exponentially distribute our random fees\n     # because the buckets are exponentially spaced.\n     # Exponentially distributed from 1-128 * fee_increment\n-    rand_fee = float(fee_increment)*(1.1892**random.randint(0,28))\n+    rand_fee = float(fee_increment) * (1.1892 ** random.randint(0, 28))\n     # Total fee ranges from min_fee to min_fee + 127*fee_increment\n     fee = min_fee - fee_increment + satoshi_round(rand_fee)\n     tx = CTransaction()\n@@ -50,95 +58,69 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n             total_in += t[\"amount\"]\n             tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n         if total_in <= amount + fee:\n-            raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee, total_in))\n-    tx.vout.append(CTxOut(int((total_in - amount - fee)*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(amount*COIN), P2SH_2))\n+            raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount + fee, total_in))\n+    tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(amount * COIN), P2SH_2))\n     # These transactions don't need to be signed, but we still have to insert\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n         inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n     txid = from_node.sendrawtransaction(ToHex(tx), True)\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : total_in - amount - fee})\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : amount})\n+    unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n+    unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n \n     return (ToHex(tx), fee)\n \n-def split_inputs(from_node, txins, txouts, initial_split = False):\n-    \"\"\"\n-    We need to generate a lot of inputs so we can generate a ton of transactions.\n+def split_inputs(from_node, txins, txouts, initial_split=False):\n+    \"\"\"Generate a lot of inputs so we can generate a ton of transactions.\n+\n     This function takes an input from txins, and creates and sends a transaction\n     which splits the value into 2 outputs which are appended to txouts.\n     Previously this was designed to be small inputs so they wouldn't have\n-    a high coin age when the notion of priority still existed.\n-    \"\"\"\n+    a high coin age when the notion of priority still existed.\"\"\"\n+\n     prevtxout = txins.pop()\n     tx = CTransaction()\n     tx.vin.append(CTxIn(COutPoint(int(prevtxout[\"txid\"], 16), prevtxout[\"vout\"]), b\"\"))\n \n-    half_change = satoshi_round(prevtxout[\"amount\"]/2)\n-    rem_change = prevtxout[\"amount\"] - half_change  - Decimal(\"0.00001000\")\n-    tx.vout.append(CTxOut(int(half_change*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(rem_change*COIN), P2SH_2))\n+    half_change = satoshi_round(prevtxout[\"amount\"] / 2)\n+    rem_change = prevtxout[\"amount\"] - half_change - Decimal(\"0.00001000\")\n+    tx.vout.append(CTxOut(int(half_change * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(rem_change * COIN), P2SH_2))\n \n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n-    if (initial_split) :\n+    if (initial_split):\n         completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n-    else :\n+    else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)\n     txid = from_node.sendrawtransaction(completetx, True)\n-    txouts.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : half_change})\n-    txouts.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : rem_change})\n+    txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n+    txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n-def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n-    \"\"\"\n-    This function calls estimatefee and verifies that the estimates\n-    meet certain invariants.\n-    \"\"\"\n-    all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n-    if print_estimates:\n-        log.info([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n-    delta = 1.0e-6 # account for rounding error\n-    last_e = max(fees_seen)\n-    for e in [x for x in all_estimates if x >= 0]:\n-        # Estimates should be within the bounds of what transactions fees actually were:\n-        if float(e)+delta < min(fees_seen) or float(e)-delta > max(fees_seen):\n+def check_estimates(node, fees_seen, max_invalid):\n+    \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n+\n+    delta = 1.0e-6  # account for rounding error\n+    last_feerate = float(max(fees_seen))\n+    all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n+    for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n+        feerate = float(e[\"feerate\"])\n+        assert_greater_than(feerate, 0)\n+\n+        if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 %(float(e), min(fees_seen), max(fees_seen)))\n-        # Estimates should be monotonically decreasing\n-        if float(e)-delta > last_e:\n+                                 % (feerate, min(fees_seen), max(fees_seen)))\n+        if feerate - delta > last_feerate:\n             raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 %(float(e),float(last_e)))\n-        last_e = e\n-    valid_estimate = False\n-    invalid_estimates = 0\n-    for i,e in enumerate(all_estimates): # estimate is for i+1\n-        if e >= 0:\n-            valid_estimate = True\n-            if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n-                assert(node.estimatesmartfee((i+1)//2)[\"feerate\"] > float(e) - delta)\n+                                 % (feerate, last_feerate))\n+        last_feerate = feerate\n \n+        if i == 0:\n+            assert_equal(e[\"blocks\"], 2)\n         else:\n-            invalid_estimates += 1\n-\n-            # estimatesmartfee should still be valid\n-            approx_estimate = node.estimatesmartfee(i+1)[\"feerate\"]\n-            answer_found = node.estimatesmartfee(i+1)[\"blocks\"]\n-            assert(approx_estimate > 0)\n-            assert(answer_found > i+1)\n-\n-            # Once we're at a high enough confirmation count that we can give an estimate\n-            # We should have estimates for all higher confirmation counts\n-            if valid_estimate:\n-                raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n-\n-    # Check on the expected number of different confirmation counts\n-    # that we might not have valid estimates for\n-    if invalid_estimates > max_invalid:\n-        raise AssertionError(\"More than (%d) invalid estimates\"%(max_invalid))\n-    return all_estimates\n-\n+            assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n \n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -151,7 +133,7 @@ def setup_network(self):\n         which we will use to generate our transactions.\n         \"\"\"\n         self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n                                       [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n@@ -160,7 +142,6 @@ def setup_network(self):\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n \n-\n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n         # We will now mine numblocks blocks generating on average 100 transactions between each block\n@@ -169,14 +150,14 @@ def transact_and_mine(self, numblocks, mining_node):\n         # resorting to tx's that depend on the mempool when those run out\n         for i in range(numblocks):\n             random.shuffle(self.confutxo)\n-            for j in range(random.randrange(100-50,100+50)):\n-                from_index = random.randint(1,2)\n+            for j in range(random.randrange(100 - 50, 100 + 50)):\n+                from_index = random.randint(1, 2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n-                self.fees_per_kb.append(float(fee)/tx_kbytes)\n+                self.fees_per_kb.append(float(fee) / tx_kbytes)\n             sync_mempools(self.nodes[0:3], wait=.1)\n-            mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]\n+            mined = mining_node.getblock(mining_node.generate(1)[0], True)[\"tx\"]\n             sync_blocks(self.nodes[0:3], wait=.1)\n             # update which txouts are confirmed\n             newmem = []\n@@ -191,10 +172,6 @@ def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")\n \n-        # Make log handler available to helper functions\n-        global log\n-        log = self.log\n-\n         # Start node0\n         self.start_node(0)\n         self.txouts = []\n@@ -210,13 +187,13 @@ def run_test(self):\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n         reps = 0\n         while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n+            # Double txouts to txouts2\n+            while (len(self.txouts) > 0):\n                 split_inputs(self.nodes[0], self.txouts, self.txouts2)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n+            # Double txouts2 to txouts\n+            while (len(self.txouts2) > 0):\n                 split_inputs(self.nodes[0], self.txouts2, self.txouts)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n@@ -235,7 +212,7 @@ def run_test(self):\n \n         self.fees_per_kb = []\n         self.memutxo = []\n-        self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n+        self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n         self.log.info(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n         for i in range(2):"
      },
      {
        "sha": "90183474bbd24dddb549245844134de24f913dd1",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -4,24 +4,24 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=createmultisig\"]]\n+        self.extra_args = [[], []]\n \n     def run_test(self):\n-        self.log.info(\"estimatefee: Shows deprecated message\")\n-        assert_raises_rpc_error(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n-\n-        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n-        self.nodes[1].estimatefee(1)\n-\n-        self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n-        assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n-        self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        # This test should be used to verify correct behaviour of deprecated\n+        # RPC methods with and without the -deprecatedrpc flags. For example:\n+        #\n+        # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n+        # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n+        # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        #\n+        # There are currently no deprecated RPC methods in master, so this\n+        # test is currently empty.\n+        pass\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "935eb8de039dec65669a96a1c3b86f4b03a1b86c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzVlYjhkZTAzOWRlYzY1NjY5YTk2YTFjM2I4NmY0YjAzYTFiODZj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-08T14:52:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-08T14:52:07Z"
      },
      "message": "Merge #12295: Enable flake8 warnings for all currently non-violated rules\n\na9d0ebc262 Enable flake8 warnings for all currently non-violated rules (practicalswift)\n4cbab15e75 tests: Fix accidental redefinition of previously defined variable via list comprehension (practicalswift)\n0b9207efbe Enable flake8 warning for \"list comprehension redefines 'foo' from line N\" (F812) (practicalswift)\n\nPull request description:\n\n  * Enable `flake8` warnings for all currently non-violated rules\n  * Fix accidental redefinition via list comprehension\n\nTree-SHA512: 738b87789e99d02abb2c6b8ff58f65c0cbfeb93e3bf320763e033e510ebd0a4f72861bc8faaf42c14a056a5d4659c33dc70a63730a32cc15159559427bf21193",
      "tree": {
        "sha": "6cafd35f0b2035b79a1bb96557c3112893ee0a72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cafd35f0b2035b79a1bb96557c3112893ee0a72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJafGQXAAoJENLqSFDnUosleHUP/R8FxamaiJeM/eWt3mSOG5nj\ngCinwP03yJ25cz1t/o/rwjjHE0ZOTxwQn7rYw/v4E8Hyi1LiEDOYI4LFU8U0izM2\nHjzON0vT4lN6nn3mgb+qnBznyVKPldeNdpvU2vkIkbPCvt7kWzGk4+n28M7oQdSk\nP7+gtolJLTini7HFHPO01a2qT5T364EF90SPwK4UvJLDKyJ34LtkOlDLu9rf4+rg\n91u2n7Ay09caLXYQRS82fTPvMJAB+zYawDYkbgen6Y5fnbN3rkzs5xdAeTZF638E\n6LidKUWlx1xF56+XMRVZGnY3WadI30oBCU0SqFnawCID+9X1w5R382Wjf9X1ygsy\neqLL4kwPB2YjFp34QujsK+GUVQXk7lybAXIJa+Y6yYE0HE2cgpVCehXDfkOEYyjl\ns19QIFMERTK5UzE43SfQMFSvM0716R42gNjgsxXmAQXWE+d235CN3E7xMkP8pA6o\n9Gwwpm4UncjJtxLyg6OMecdf3Z4TJB8rl0K/OG7gQirmpsVb0ltK2UNXK01lwLD9\n4YWQT72zpD2pOTU80UYqhFzFANucg7ssxZQySIjgroxSClFHbRROaRR2JYDIV2ad\noaH1lKM9MJVMhctWH9l/Y1zIZqq/l9Dy+9d423kePfJIQgc/mjXR1gSet0XoEh6T\n8a5CgEZyG1ahiaXBzwg/\n=D1N7\n-----END PGP SIGNATURE-----",
        "payload": "tree 6cafd35f0b2035b79a1bb96557c3112893ee0a72\nparent 3843780fd8e0bed6a0813bbaf231664fac91964d\nparent a9d0ebc26207b4771b7c240ca0c516debd330985\nauthor MarcoFalke <falke.marco@gmail.com> 1518101521 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518101527 -0500\n\nMerge #12295: Enable flake8 warnings for all currently non-violated rules\n\na9d0ebc262 Enable flake8 warnings for all currently non-violated rules (practicalswift)\n4cbab15e75 tests: Fix accidental redefinition of previously defined variable via list comprehension (practicalswift)\n0b9207efbe Enable flake8 warning for \"list comprehension redefines 'foo' from line N\" (F812) (practicalswift)\n\nPull request description:\n\n  * Enable `flake8` warnings for all currently non-violated rules\n  * Fix accidental redefinition via list comprehension\n\nTree-SHA512: 738b87789e99d02abb2c6b8ff58f65c0cbfeb93e3bf320763e033e510ebd0a4f72861bc8faaf42c14a056a5d4659c33dc70a63730a32cc15159559427bf21193\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3843780fd8e0bed6a0813bbaf231664fac91964d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3843780fd8e0bed6a0813bbaf231664fac91964d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3843780fd8e0bed6a0813bbaf231664fac91964d"
      },
      {
        "sha": "a9d0ebc26207b4771b7c240ca0c516debd330985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d0ebc26207b4771b7c240ca0c516debd330985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d0ebc26207b4771b7c240ca0c516debd330985"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 58,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e2c9d775a64cda487663c4e51dca48aaac1a2e4c",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "modified",
        "additions": 55,
        "deletions": 2,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935eb8de039dec65669a96a1c3b86f4b03a1b86c/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935eb8de039dec65669a96a1c3b86f4b03a1b86c/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "patch": "@@ -6,5 +6,58 @@\n #\n # Check for specified flake8 warnings in python files.\n \n-# F401: module imported but unused\n-flake8 --ignore=B,C,E,F,I,N,W --select=F401 .\n+# E112 expected an indented block\n+# E113 unexpected indentation\n+# E115 expected an indented block (comment)\n+# E116 unexpected indentation (comment)\n+# E125 continuation line with same indent as next logical line\n+# E131 continuation line unaligned for hanging indent\n+# E133 closing bracket is missing indentation\n+# E223 tab before operator\n+# E224 tab after operator\n+# E271 multiple spaces after keyword\n+# E272 multiple spaces before keyword\n+# E273 tab after keyword\n+# E274 tab before keyword\n+# E275 missing whitespace after keyword\n+# E304 blank lines found after function decorator\n+# E306 expected 1 blank line before a nested definition\n+# E502 the backslash is redundant between brackets\n+# E702 multiple statements on one line (semicolon)\n+# E703 statement ends with a semicolon\n+# E714 test for object identity should be \"is not\"\n+# E721 do not compare types, use \"isinstance()\"\n+# E741 do not use variables named \"l\", \"O\", or \"I\"\n+# E742 do not define classes named \"l\", \"O\", or \"I\"\n+# E743 do not define functions named \"l\", \"O\", or \"I\"\n+# F401 module imported but unused\n+# F402 import module from line N shadowed by loop variable\n+# F404 future import(s) name after other statements\n+# F406 \"from module import *\" only allowed at module level\n+# F407 an undefined __future__ feature name was imported\n+# F601 dictionary key name repeated with different values\n+# F602 dictionary key variable name repeated with different values\n+# F621 too many expressions in an assignment with star-unpacking\n+# F622 two or more starred expressions in an assignment (a, *b, *c = d)\n+# F631 assertion test is a tuple, which are always True\n+# F701 a break statement outside of a while or for loop\n+# F702 a continue statement outside of a while or for loop\n+# F703 a continue statement in a finally block in a loop\n+# F704 a yield or yield from statement outside of a function\n+# F705 a return statement with arguments inside a generator\n+# F706 a return statement outside of a function/method\n+# F707 an except: block as not the last exception handler\n+# F811 redefinition of unused name from line N\n+# F812 list comprehension redefines 'foo' from line N\n+# F822 undefined name name in __all__\n+# F823 local variable name \u2026 referenced before assignment\n+# F831 duplicate argument name in function definition\n+# W292 no newline at end of file\n+# W504 line break after binary operator\n+# W601 .has_key() is deprecated, use \"in\"\n+# W602 deprecated form of raising exception\n+# W603 \"<>\" is deprecated, use \"!=\"\n+# W604 backticks are deprecated, use \"repr()\"\n+# W605 invalid escape sequence \"x\"\n+\n+flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,W292,W504,W601,W602,W603,W604,W605 ."
      },
      {
        "sha": "6b9c9c15b77081b2571cb73e94c765b7dba92bee",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935eb8de039dec65669a96a1c3b86f4b03a1b86c/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935eb8de039dec65669a96a1c3b86f4b03a1b86c/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "patch": "@@ -223,8 +223,8 @@ def run_test(self):\n         assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': None})\n         assert_raises_rpc_error(-5, \"Unknown change type\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': ''})\n         rawtx = self.nodes[2].fundrawtransaction(rawtx, {'change_type': 'bech32'})\n-        tx  = self.nodes[2].decoderawtransaction(rawtx['hex'])\n-        assert_equal('witness_v0_keyhash', tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n+        dec_tx = self.nodes[2].decoderawtransaction(rawtx['hex'])\n+        assert_equal('witness_v0_keyhash', dec_tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n \n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n@@ -676,7 +676,7 @@ def run_test(self):\n                   self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee}),\n                   self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]})]\n \n-        dec_tx = [self.nodes[3].decoderawtransaction(tx['hex']) for tx in result]\n+        dec_tx = [self.nodes[3].decoderawtransaction(tx_['hex']) for tx_ in result]\n         output = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n         change = [d['vout'][r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n "
      }
    ]
  },
  {
    "sha": "663911ed581d2ab40f49fdc232f189d92264d45a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjM5MTFlZDU4MWQyYWI0MGY0OWZkYzIzMmYxODlkOTIyNjRkNDVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T14:57:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T15:32:15Z"
      },
      "message": "Merge #12282: wallet: Disallow abandon of conflicted txes\n\nfa795cf wallet: Disallow abandon of conflicted txes (MarcoFalke)\n\nPull request description:\n\n  Abandon transactions that are already conflicted is a noop, so don't try and return false/throw instead.\n\nTree-SHA512: fd2af4149bd2323f7f31fe18685c763790b8589319b4e467b464ab456d5e8971501ab16d124e57a22693666b06ae433ac3e59f0fd6dfbd2be2c6cae8be5bcbd8",
      "tree": {
        "sha": "ef564d9e046c13c835ac93702a070eb2c1476f88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef564d9e046c13c835ac93702a070eb2c1476f88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafG1/AAoJEB5K7WKYbNJdgbcH/iOSyaYeQqo9lZzhS74uB/2d\n8ygebUVXEHffFQShyJ3d5yLOeqZJ0CAHSGkMv0l8nDyHPCkkzXit4yeW3aN2WfE1\nFa4GcGLEqbeBVCLBxAyOHEnqWe7wrEZC3r7HK2QdK6wyJCLsVsEid0exQyyJk2QI\nH0ZyanjkOlF/ndZZaDfnfy+nwh8i7AxTHlg/xHXYBkakJPQ99OaEcHKqYe40Gk4k\nzQbyzwSRA6M4RQ8HVp5Avynb50m7soXs2+dWKgdPPTkbY3DanQuCfgCRUHOd4jKe\nHbKyaLZHC0GE3ykWkemG0w0V/tV1vJsBnF//c1bTCE1P1QqkF8dz/uXYLbeVaJo=\n=1+ZJ\n-----END PGP SIGNATURE-----",
        "payload": "tree ef564d9e046c13c835ac93702a070eb2c1476f88\nparent 935eb8de039dec65669a96a1c3b86f4b03a1b86c\nparent fa795cf9c52b82cc3cccd21483360d6e03f767f0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518101828 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518103935 +0100\n\nMerge #12282: wallet: Disallow abandon of conflicted txes\n\nfa795cf wallet: Disallow abandon of conflicted txes (MarcoFalke)\n\nPull request description:\n\n  Abandon transactions that are already conflicted is a noop, so don't try and return false/throw instead.\n\nTree-SHA512: fd2af4149bd2323f7f31fe18685c763790b8589319b4e467b464ab456d5e8971501ab16d124e57a22693666b06ae433ac3e59f0fd6dfbd2be2c6cae8be5bcbd8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/663911ed581d2ab40f49fdc232f189d92264d45a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/935eb8de039dec65669a96a1c3b86f4b03a1b86c"
      },
      {
        "sha": "fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa795cf9c52b82cc3cccd21483360d6e03f767f0"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 19,
      "deletions": 9
    },
    "files": [
      {
        "sha": "261d9b37f58076c19b26df96a4d931ea4ab2ca2c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -2184,21 +2184,22 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n             \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n             \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n             \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n-            \"It has no effect on transactions which are already conflicted or abandoned.\\n\"\n+            \"It has no effect on transactions which are already abandoned.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n+    }\n \n     ObserveSafeMode();\n "
      },
      {
        "sha": "1b3a3ee50f0020daeac12c1657c81cc096a2b05b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -1078,7 +1078,7 @@ bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n {\n     LOCK2(cs_main, cs_wallet);\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n-    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() <= 0 && !wtx->InMempool();\n+    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() == 0 && !wtx->InMempool();\n }\n \n bool CWallet::AbandonTransaction(const uint256& hashTx)\n@@ -1094,7 +1094,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.end());\n     CWalletTx& origtx = it->second;\n-    if (origtx.GetDepthInMainChain() > 0 || origtx.InMempool()) {\n+    if (origtx.GetDepthInMainChain() != 0 || origtx.InMempool()) {\n         return false;\n     }\n "
      },
      {
        "sha": "8fb860cd7e9cfa141ef13ece581ab88b87c1b5e4",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -8,11 +8,12 @@\n  descendants as abandoned which allows their inputs to be respent. It can be\n  used to replace \"stuck\" or evicted transactions. It only works on transactions\n  which are not included in a block and are not currently in the mempool. It has\n- no effect on transactions which are already conflicted or abandoned.\n+ no effect on transactions which are already abandoned.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -28,6 +29,11 @@ def run_test(self):\n         sync_mempools(self.nodes)\n         self.nodes[1].generate(1)\n \n+        # Can not abandon non-wallet transaction\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', lambda: self.nodes[0].abandontransaction(txid='ff' * 32))\n+        # Can not abandon confirmed transaction\n+        assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: self.nodes[0].abandontransaction(txid=txA))\n+\n         sync_blocks(self.nodes)\n         newbalance = self.nodes[0].getbalance()\n         assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost"
      },
      {
        "sha": "f621d41b4e521eb565e024924aeec1300758c9cc",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -231,13 +231,16 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n     assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == bumpid], [])\n \n     # submit a block with the rbf tx to clear the bump tx out of the mempool,\n-    # then call abandon to make sure the wallet doesn't attempt to resubmit the\n-    # bump tx, then invalidate the block so the rbf tx will be put back in the\n-    # mempool. this makes it possible to check whether the rbf tx outputs are\n+    # then invalidate the block so the rbf tx will be put back in the mempool.\n+    # This makes it possible to check whether the rbf tx outputs are\n     # spendable before the rbf tx is confirmed.\n     block = submit_block_with_tx(rbf_node, rbftx)\n-    rbf_node.abandontransaction(bumpid)\n+    # Can not abandon conflicted tx\n+    assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: rbf_node.abandontransaction(txid=bumpid))\n     rbf_node.invalidateblock(block.hash)\n+    # Call abandon to make sure the wallet doesn't attempt to resubmit\n+    # the bump tx and hope the wallet does not rebroadcast before we call.\n+    rbf_node.abandontransaction(bumpid)\n     assert bumpid not in rbf_node.getrawmempool()\n     assert rbfid in rbf_node.getrawmempool()\n "
      }
    ]
  },
  {
    "sha": "c04e0f607a305092f336f3a77a91f9e23463943e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDRlMGY2MDdhMzA1MDkyZjMzNmYzYTc3YTkxZjllMjM0NjM5NDNl",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-05T15:53:33Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-08T15:50:13Z"
      },
      "message": "Fix 'mempool min fee not met' debug output\n\nOutput the value that is tested, rather than the unmodified fee value.",
      "tree": {
        "sha": "406bab9c5bb2485d7acf93722e2c6892f1501256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/406bab9c5bb2485d7acf93722e2c6892f1501256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c04e0f607a305092f336f3a77a91f9e23463943e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJafHG1AAoJEG7l83hfeLNFw5QH/ilFCbWNLCdu//zFLum6/1BL\nYzPtIhL5bM6XZ6EyIal7npbSYMh9PDVOtXpoqcnPpRCMa6bJP13TsOCrM9AN4hEK\nWqwI1Th6SOzxAfMz1WYJLwGDD/gX8GFoLY5/vT5LJ33QayIIAbJx7bD39ZIWb9Ch\n7s3ndsx+yLpFnZM2xwdgIUQ4e5HPvM0gegeI3ckIWR1WM86f3eJlW+yvYLiM8mEe\nXM41TO6G9b3lZWryJCI8HsqLKGYeNjUB/JMzTAtFARQq4c9k7IhlP3N0/wna75yL\nPrmBEn1p04M0U9OY4S1AiaO1XVZEvVzEVyzHStjLbTsJKZquZSwCvENHO5LJvn0=\n=EkE5\n-----END PGP SIGNATURE-----",
        "payload": "tree 406bab9c5bb2485d7acf93722e2c6892f1501256\nparent 663911ed581d2ab40f49fdc232f189d92264d45a\nauthor Ben Woosley <ben.woosley@gmail.com> 1517846013 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518105013 -0500\n\nFix 'mempool min fee not met' debug output\n\nOutput the value that is tested, rather than the unmodified fee value.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04e0f607a305092f336f3a77a91f9e23463943e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c04e0f607a305092f336f3a77a91f9e23463943e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04e0f607a305092f336f3a77a91f9e23463943e/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "663911ed581d2ab40f49fdc232f189d92264d45a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/663911ed581d2ab40f49fdc232f189d92264d45a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35f35e19d742282f578c2640c4cc4e8c09824af0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c04e0f607a305092f336f3a77a91f9e23463943e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c04e0f607a305092f336f3a77a91f9e23463943e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c04e0f607a305092f336f3a77a91f9e23463943e",
        "patch": "@@ -712,7 +712,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks"
      }
    ]
  },
  {
    "sha": "8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjhhMWM0ZjhiMTBjZTk2ZmUzODI2YWIyOGI4Mjg1OGQ0ZWY5Y2Yy",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-06T02:00:57Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-08T16:01:53Z"
      },
      "message": "Add test for 'mempool min fee not met' rpc error",
      "tree": {
        "sha": "26824c4ef396ba926cb5c3d03cfbee65d72729c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26824c4ef396ba926cb5c3d03cfbee65d72729c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJafHRzAAoJEG7l83hfeLNFoAEIAKEcKA2Aur7mm1SW9puuxFV5\nohBJK/U4sIFh7LZiPY8qNw2Z4zrKcb3r6/kANA8FLo7Lwg50ArHy4vROkcCOhT0P\niPpnrrVSkmXFQA4IdQuAC9/w8TQNxBreh/LfBmecNX5Yby+sK3VBWaufR2GiTqlQ\n8DGBJKOvv9ZKpa/hDlebwSJDMkxryGKHpV5O3s5769Q0Aohvt+qgjyaIM813rWT1\ngsKkVat7DsKuamGGqC0pq4pqRmnfRndRQXgb/TZV7FXVJEFbeYCMl5/wW48lWV0n\nWy60ev239oD/d5tnlpSw4aL/DJ+OBqbi776U+i+Qp3y7Qxfum/wZd0qIt9Iqfrs=\n=DWxD\n-----END PGP SIGNATURE-----",
        "payload": "tree 26824c4ef396ba926cb5c3d03cfbee65d72729c7\nparent c04e0f607a305092f336f3a77a91f9e23463943e\nauthor Ben Woosley <ben.woosley@gmail.com> 1517882457 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518105713 -0500\n\nAdd test for 'mempool min fee not met' rpc error\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c04e0f607a305092f336f3a77a91f9e23463943e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04e0f607a305092f336f3a77a91f9e23463943e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c04e0f607a305092f336f3a77a91f9e23463943e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1385271e6d2d567978b1ec1b2e29b4228c2cce0b",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
        "patch": "@@ -50,5 +50,15 @@ def run_test(self):\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n+        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n+        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n+        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        assert_raises_rpc_error(-26, \"66: mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      }
    ]
  },
  {
    "sha": "bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjAwYzk1YzE2ZjUwYzVkZmFiMWFhOGZiYjZjODczMzE4YTZhY2M4",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-06T23:47:51Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-08T16:02:41Z"
      },
      "message": "Consistently use FormatStateMessage in RPC error output\n\nThis will include the error code and debug output as well as the reason string.\n\nSee #11955 for the motivation.",
      "tree": {
        "sha": "690d0a1dda3b3be64c6cb3200df795db58c992b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/690d0a1dda3b3be64c6cb3200df795db58c992b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJafHSiAAoJEG7l83hfeLNF9WMH/3erTI9EljQ+uB6/VtVvn368\noMbFd+i7dAX1SaMzcNPNn9s8Zem3iUo4G/usX8TpiZJlFK5gaQoELjMO5i46URSH\np6u/cHqYdQE/KASh1A8sJSbKCvRHA3aj/pDkqYnuLZt8bnDxa7pxwMhqfaLgHKQi\n4716qe9b79jqU1CfPLUno+IW7gQQHi/KwHzo7Ea+f6y7XPHXewdz/Z6WhENOw+iJ\nFeQ8wmd4ygmNcrzNulc1gkea9fD16lw4ADHn2WgucktUl93BztT45CJPUzk9wFtO\nhQCsv7WE0AaQeFsVu5uum3VCwVU0GI3WauL2JMrXw98oD6ibDGX0lJjp6TDamJ0=\n=TlHb\n-----END PGP SIGNATURE-----",
        "payload": "tree 690d0a1dda3b3be64c6cb3200df795db58c992b9\nparent 8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2\nauthor Ben Woosley <ben.woosley@gmail.com> 1517960871 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518105761 -0500\n\nConsistently use FormatStateMessage in RPC error output\n\nThis will include the error code and debug output as well as the reason string.\n\nSee #11955 for the motivation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c880991b59561bdca21f1b7bdd83e5ca711fc941",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -1434,7 +1434,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n     PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1472,7 +1472,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1509,7 +1509,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1563,7 +1563,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             pindex = chainActive.Tip();\n         }\n     }\n-    \n+\n     assert(pindex != nullptr);\n \n     if (request.params[0].isNull()) {"
      },
      {
        "sha": "32f8ca0c716c622802b14c70a39a57e2e2247e45",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -264,11 +264,11 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     if (state.IsValid())\n         return NullUniValue;\n \n-    std::string strRejectReason = state.GetRejectReason();\n     if (state.IsError())\n-        throw JSONRPCError(RPC_VERIFY_ERROR, strRejectReason);\n+        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n     if (state.IsInvalid())\n     {\n+        std::string strRejectReason = state.GetRejectReason();\n         if (strRejectReason.empty())\n             return \"rejected\";\n         return strRejectReason;"
      },
      {
        "sha": "85709256fdc50f0094768d4c7c06970eb3e85ebd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -981,12 +981,12 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n-                throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n             } else {\n                 if (fMissingInputs) {\n                     throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n                 }\n-                throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware"
      },
      {
        "sha": "ebf30fe03b3d6300fb22747811d701012f99c905",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -267,7 +267,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     CValidationState state;\n     if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n-        errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n+        errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;\n     }\n \n@@ -290,4 +290,3 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n }\n \n } // namespace feebumper\n-"
      },
      {
        "sha": "a82afcf2a013bc2e223bcead727b635d9863386e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -435,7 +435,7 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     }\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n-        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n }\n@@ -1155,7 +1155,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n-        strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n+        strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "4a022fa5620dc03a8ea684c4ed3f6201d2e662b9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -3094,7 +3094,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         {\n             // Broadcast\n             if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n-                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n+                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n                 wtx.RelayWalletTransaction(connman);"
      },
      {
        "sha": "740c498ce6bb4f8ecc7165afa63057b3eb1b6f37",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -21,7 +21,7 @@\n from io import BytesIO\n import time\n \n-NULLDUMMY_ERROR = \"64: non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n+NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n \n def trueDummy(tx):\n     scriptSig = CScript(tx.vin[0].scriptSig)"
      },
      {
        "sha": "7e01663c96bd577445c0b9240ed680b4eb285590",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n         txFS = self.nodes[0].signrawtransaction(txF['hex'])\n-        assert_raises_rpc_error(-26, \"66: mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      },
      {
        "sha": "8cea9c27833a994a627cfec28aebc402c997a1d1",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -120,7 +120,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"min relay fee not met (code 66)\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      }
    ]
  },
  {
    "sha": "1beea7af92994dca83facb11bbef82b24b538400",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmVlYTdhZjkyOTk0ZGNhODNmYWNiMTFiYmVmODJiMjRiNTM4NDAw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-02T11:37:50Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-08T18:18:28Z"
      },
      "message": "[wallet] Make CWallet::ListCoins atomic",
      "tree": {
        "sha": "b0864ca2b002fb57e38a80f7902eb3ce0aced1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0864ca2b002fb57e38a80f7902eb3ce0aced1fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1beea7af92994dca83facb11bbef82b24b538400",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1beea7af92994dca83facb11bbef82b24b538400",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1beea7af92994dca83facb11bbef82b24b538400",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1beea7af92994dca83facb11bbef82b24b538400/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cad91663df381d0dff8526f3b4aa74569dfb626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cad91663df381d0dff8526f3b4aa74569dfb626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cad91663df381d0dff8526f3b4aa74569dfb626"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "161372784b1f76794e7b27c5a1f83e88dfe34565",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1beea7af92994dca83facb11bbef82b24b538400",
        "patch": "@@ -676,18 +676,24 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n-    std::vector<COutput> available;\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 2);\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 2);\n+    }\n     for (const auto& group : list) {\n         for (const auto& coin : group.second) {\n             LOCK(wallet->cs_wallet);\n             wallet->LockCoin(COutPoint(coin.tx->GetHash(), coin.i));\n         }\n     }\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 0);\n-\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 0);\n+    }\n     // Confirm ListCoins still returns same result as before, despite coins\n     // being locked.\n     list = wallet->ListCoins();"
      },
      {
        "sha": "e89921e95b8165c82f8c2410f9879ec6d98dfe46",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1beea7af92994dca83facb11bbef82b24b538400",
        "patch": "@@ -2198,11 +2198,12 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n \n void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_wallet);\n+\n     vCoins.clear();\n \n     {\n-        LOCK2(cs_main, cs_wallet);\n-\n         CAmount nTotal = 0;\n \n         for (const auto& entry : mapWallet)\n@@ -2320,11 +2321,11 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n     // avoid adding some extra complexity to the Qt code.\n \n     std::map<CTxDestination, std::vector<COutput>> result;\n-\n     std::vector<COutput> availableCoins;\n-    AvailableCoins(availableCoins);\n \n     LOCK2(cs_main, cs_wallet);\n+    AvailableCoins(availableCoins);\n+\n     for (auto& coin : availableCoins) {\n         CTxDestination address;\n         if (coin.fSpendable &&"
      }
    ]
  },
  {
    "sha": "2f960b50703a9599b82b7291139b428f4a9b96c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjk2MGI1MDcwM2E5NTk5YjgyYjcyOTExMzliNDI4ZjRhOWI5NmMz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-08T18:18:51Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-08T18:18:51Z"
      },
      "message": "[wallet] Indent only change of CWallet::AvailableCoins",
      "tree": {
        "sha": "1ce2ab66897dfc9fa4e88ac9de3ee461854417e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ce2ab66897dfc9fa4e88ac9de3ee461854417e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f960b50703a9599b82b7291139b428f4a9b96c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f960b50703a9599b82b7291139b428f4a9b96c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f960b50703a9599b82b7291139b428f4a9b96c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f960b50703a9599b82b7291139b428f4a9b96c3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1beea7af92994dca83facb11bbef82b24b538400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1beea7af92994dca83facb11bbef82b24b538400",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1beea7af92994dca83facb11bbef82b24b538400"
      }
    ],
    "stats": {
      "total": 153,
      "additions": 75,
      "deletions": 78
    },
    "files": [
      {
        "sha": "068aa9fdd1e8dfaffdd04882be9842b1ac48be61",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 78,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f960b50703a9599b82b7291139b428f4a9b96c3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f960b50703a9599b82b7291139b428f4a9b96c3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2f960b50703a9599b82b7291139b428f4a9b96c3",
        "patch": "@@ -2202,108 +2202,105 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n     AssertLockHeld(cs_wallet);\n \n     vCoins.clear();\n+    CAmount nTotal = 0;\n \n+    for (const auto& entry : mapWallet)\n     {\n-        CAmount nTotal = 0;\n+        const uint256& wtxid = entry.first;\n+        const CWalletTx* pcoin = &entry.second;\n \n-        for (const auto& entry : mapWallet)\n-        {\n-            const uint256& wtxid = entry.first;\n-            const CWalletTx* pcoin = &entry.second;\n+        if (!CheckFinalTx(*pcoin->tx))\n+            continue;\n \n-            if (!CheckFinalTx(*pcoin->tx))\n-                continue;\n+        if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            continue;\n \n-            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n-                continue;\n+        int nDepth = pcoin->GetDepthInMainChain();\n+        if (nDepth < 0)\n+            continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < 0)\n-                continue;\n+        // We should not consider coins which aren't at least in our mempool\n+        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+        if (nDepth == 0 && !pcoin->InMempool())\n+            continue;\n \n-            // We should not consider coins which aren't at least in our mempool\n-            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-            if (nDepth == 0 && !pcoin->InMempool())\n-                continue;\n+        bool safeTx = pcoin->IsTrusted();\n+\n+        // We should not consider coins from transactions that are replacing\n+        // other transactions.\n+        //\n+        // Example: There is a transaction A which is replaced by bumpfee\n+        // transaction B. In this case, we want to prevent creation of\n+        // a transaction B' which spends an output of B.\n+        //\n+        // Reason: If transaction A were initially confirmed, transactions B\n+        // and B' would no longer be valid, so the user would have to create\n+        // a new transaction C to replace B'. However, in the case of a\n+        // one-block reorg, transactions B' and C might BOTH be accepted,\n+        // when the user only wanted one of them. Specifically, there could\n+        // be a 1-block reorg away from the chain where transactions A and C\n+        // were accepted to another chain where B, B', and C were all\n+        // accepted.\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n+            safeTx = false;\n+        }\n \n-            bool safeTx = pcoin->IsTrusted();\n-\n-            // We should not consider coins from transactions that are replacing\n-            // other transactions.\n-            //\n-            // Example: There is a transaction A which is replaced by bumpfee\n-            // transaction B. In this case, we want to prevent creation of\n-            // a transaction B' which spends an output of B.\n-            //\n-            // Reason: If transaction A were initially confirmed, transactions B\n-            // and B' would no longer be valid, so the user would have to create\n-            // a new transaction C to replace B'. However, in the case of a\n-            // one-block reorg, transactions B' and C might BOTH be accepted,\n-            // when the user only wanted one of them. Specifically, there could\n-            // be a 1-block reorg away from the chain where transactions A and C\n-            // were accepted to another chain where B, B', and C were all\n-            // accepted.\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n-                safeTx = false;\n-            }\n+        // Similarly, we should not consider coins from transactions that\n+        // have been replaced. In the example above, we would want to prevent\n+        // creation of a transaction A' spending an output of A, because if\n+        // transaction B were initially confirmed, conflicting with A and\n+        // A', we wouldn't want to the user to create a transaction D\n+        // intending to replace A', but potentially resulting in a scenario\n+        // where A, A', and D could all be accepted (instead of just B and\n+        // D, or just A and A' like the user would want).\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+            safeTx = false;\n+        }\n \n-            // Similarly, we should not consider coins from transactions that\n-            // have been replaced. In the example above, we would want to prevent\n-            // creation of a transaction A' spending an output of A, because if\n-            // transaction B were initially confirmed, conflicting with A and\n-            // A', we wouldn't want to the user to create a transaction D\n-            // intending to replace A', but potentially resulting in a scenario\n-            // where A, A', and D could all be accepted (instead of just B and\n-            // D, or just A and A' like the user would want).\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n-                safeTx = false;\n-            }\n+        if (fOnlySafe && !safeTx) {\n+            continue;\n+        }\n \n-            if (fOnlySafe && !safeTx) {\n-                continue;\n-            }\n+        if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+            continue;\n \n-            if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n+            if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n-                if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n-                    continue;\n-\n-                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n-                    continue;\n-\n-                if (IsLockedCoin(entry.first, i))\n-                    continue;\n+            if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n+                continue;\n \n-                if (IsSpent(wtxid, i))\n-                    continue;\n+            if (IsLockedCoin(entry.first, i))\n+                continue;\n \n-                isminetype mine = IsMine(pcoin->tx->vout[i]);\n+            if (IsSpent(wtxid, i))\n+                continue;\n \n-                if (mine == ISMINE_NO) {\n-                    continue;\n-                }\n+            isminetype mine = IsMine(pcoin->tx->vout[i]);\n \n-                bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n-                bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n+            if (mine == ISMINE_NO) {\n+                continue;\n+            }\n \n-                vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+            bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n+            bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n \n-                // Checks the sum amount of all UTXO's.\n-                if (nMinimumSumAmount != MAX_MONEY) {\n-                    nTotal += pcoin->tx->vout[i].nValue;\n+            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n \n-                    if (nTotal >= nMinimumSumAmount) {\n-                        return;\n-                    }\n-                }\n+            // Checks the sum amount of all UTXO's.\n+            if (nMinimumSumAmount != MAX_MONEY) {\n+                nTotal += pcoin->tx->vout[i].nValue;\n \n-                // Checks the maximum number of UTXO's.\n-                if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                if (nTotal >= nMinimumSumAmount) {\n                     return;\n                 }\n             }\n+\n+            // Checks the maximum number of UTXO's.\n+            if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                return;\n+            }\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "d405beea26c1569f46cf50ef71b376c9487ce361",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDA1YmVlYTI2YzE1NjlmNDZjZjUwZWY3MWIzNzZjOTQ4N2NlMzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T18:44:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T18:48:21Z"
      },
      "message": "Merge #12333: Make CWallet::ListCoins atomic\n\n2f960b5 [wallet] Indent only change of CWallet::AvailableCoins (Jo\u00e3o Barbosa)\n1beea7a [wallet] Make CWallet::ListCoins atomic (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Fix a potencial race in `CWallet::ListCoins`.\n\n  Replaces `cs_main` and `cs_wallet` locks by assertions in `CWallet::AvailableCoins`.\n\nTree-SHA512: 09109f44a08b4b53f7605d950ab506d3f748490ab9aed474aa200e93f7b0b9f96f9bf60abe1c5f658240fd13d9e3267c0dd43fd3c1695d82384198ce1da8109f",
      "tree": {
        "sha": "b7032a576cd9cd140a6a21698d00633d70be8ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7032a576cd9cd140a6a21698d00633d70be8ef2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafJt1AAoJEB5K7WKYbNJdHbkH/1muiyiGh3D9Q8g9zXoBBlcu\nYR4kp8kmoL98NDBWHnFbYg/BZgafCaq54osvitUg2SGr6UbqEIujPqwvAN5qvRE6\nAjSMTm6baXD/VDF0tg/s4LJuEnPQwDmK1mlCjq6cgddJTE1yQvhTcOhM7WfOCA0+\n3v519CwtnE3L7dgg9D2hdNPejxWgADUGsn0CXLmUNKASuR30VDWmjgXcOzfHy7D2\nXYHOADVSqNUH3YxtrkKCkp0Fj0EDtqhkaYI/m/dqanUcmOqWeVnvZScIzfh6X3Y6\n9Kn8LrX/401cI9Abh1/mi//7Wi+ppJaDC+AHoXGdkQ2IU0eon5nPR8uJIv4EJJM=\n=p0tT\n-----END PGP SIGNATURE-----",
        "payload": "tree b7032a576cd9cd140a6a21698d00633d70be8ef2\nparent 663911ed581d2ab40f49fdc232f189d92264d45a\nparent 2f960b50703a9599b82b7291139b428f4a9b96c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518115492 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518115701 +0100\n\nMerge #12333: Make CWallet::ListCoins atomic\n\n2f960b5 [wallet] Indent only change of CWallet::AvailableCoins (Jo\u00e3o Barbosa)\n1beea7a [wallet] Make CWallet::ListCoins atomic (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Fix a potencial race in `CWallet::ListCoins`.\n\n  Replaces `cs_main` and `cs_wallet` locks by assertions in `CWallet::AvailableCoins`.\n\nTree-SHA512: 09109f44a08b4b53f7605d950ab506d3f748490ab9aed474aa200e93f7b0b9f96f9bf60abe1c5f658240fd13d9e3267c0dd43fd3c1695d82384198ce1da8109f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d405beea26c1569f46cf50ef71b376c9487ce361",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "663911ed581d2ab40f49fdc232f189d92264d45a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/663911ed581d2ab40f49fdc232f189d92264d45a"
      },
      {
        "sha": "2f960b50703a9599b82b7291139b428f4a9b96c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f960b50703a9599b82b7291139b428f4a9b96c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f960b50703a9599b82b7291139b428f4a9b96c3"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 91,
      "deletions": 87
    },
    "files": [
      {
        "sha": "161372784b1f76794e7b27c5a1f83e88dfe34565",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d405beea26c1569f46cf50ef71b376c9487ce361",
        "patch": "@@ -676,18 +676,24 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n-    std::vector<COutput> available;\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 2);\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 2);\n+    }\n     for (const auto& group : list) {\n         for (const auto& coin : group.second) {\n             LOCK(wallet->cs_wallet);\n             wallet->LockCoin(COutPoint(coin.tx->GetHash(), coin.i));\n         }\n     }\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 0);\n-\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 0);\n+    }\n     // Confirm ListCoins still returns same result as before, despite coins\n     // being locked.\n     list = wallet->ListCoins();"
      },
      {
        "sha": "7f36aefeafa235266d55233bf298a88f3d40008f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 81,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d405beea26c1569f46cf50ef71b376c9487ce361",
        "patch": "@@ -2198,111 +2198,109 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n \n void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_wallet);\n+\n     vCoins.clear();\n+    CAmount nTotal = 0;\n \n+    for (const auto& entry : mapWallet)\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        const uint256& wtxid = entry.first;\n+        const CWalletTx* pcoin = &entry.second;\n \n-        CAmount nTotal = 0;\n+        if (!CheckFinalTx(*pcoin->tx))\n+            continue;\n \n-        for (const auto& entry : mapWallet)\n-        {\n-            const uint256& wtxid = entry.first;\n-            const CWalletTx* pcoin = &entry.second;\n+        if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            continue;\n \n-            if (!CheckFinalTx(*pcoin->tx))\n-                continue;\n+        int nDepth = pcoin->GetDepthInMainChain();\n+        if (nDepth < 0)\n+            continue;\n \n-            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n-                continue;\n+        // We should not consider coins which aren't at least in our mempool\n+        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+        if (nDepth == 0 && !pcoin->InMempool())\n+            continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < 0)\n-                continue;\n+        bool safeTx = pcoin->IsTrusted();\n+\n+        // We should not consider coins from transactions that are replacing\n+        // other transactions.\n+        //\n+        // Example: There is a transaction A which is replaced by bumpfee\n+        // transaction B. In this case, we want to prevent creation of\n+        // a transaction B' which spends an output of B.\n+        //\n+        // Reason: If transaction A were initially confirmed, transactions B\n+        // and B' would no longer be valid, so the user would have to create\n+        // a new transaction C to replace B'. However, in the case of a\n+        // one-block reorg, transactions B' and C might BOTH be accepted,\n+        // when the user only wanted one of them. Specifically, there could\n+        // be a 1-block reorg away from the chain where transactions A and C\n+        // were accepted to another chain where B, B', and C were all\n+        // accepted.\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n+            safeTx = false;\n+        }\n \n-            // We should not consider coins which aren't at least in our mempool\n-            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-            if (nDepth == 0 && !pcoin->InMempool())\n-                continue;\n+        // Similarly, we should not consider coins from transactions that\n+        // have been replaced. In the example above, we would want to prevent\n+        // creation of a transaction A' spending an output of A, because if\n+        // transaction B were initially confirmed, conflicting with A and\n+        // A', we wouldn't want to the user to create a transaction D\n+        // intending to replace A', but potentially resulting in a scenario\n+        // where A, A', and D could all be accepted (instead of just B and\n+        // D, or just A and A' like the user would want).\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+            safeTx = false;\n+        }\n \n-            bool safeTx = pcoin->IsTrusted();\n-\n-            // We should not consider coins from transactions that are replacing\n-            // other transactions.\n-            //\n-            // Example: There is a transaction A which is replaced by bumpfee\n-            // transaction B. In this case, we want to prevent creation of\n-            // a transaction B' which spends an output of B.\n-            //\n-            // Reason: If transaction A were initially confirmed, transactions B\n-            // and B' would no longer be valid, so the user would have to create\n-            // a new transaction C to replace B'. However, in the case of a\n-            // one-block reorg, transactions B' and C might BOTH be accepted,\n-            // when the user only wanted one of them. Specifically, there could\n-            // be a 1-block reorg away from the chain where transactions A and C\n-            // were accepted to another chain where B, B', and C were all\n-            // accepted.\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n-                safeTx = false;\n-            }\n+        if (fOnlySafe && !safeTx) {\n+            continue;\n+        }\n \n-            // Similarly, we should not consider coins from transactions that\n-            // have been replaced. In the example above, we would want to prevent\n-            // creation of a transaction A' spending an output of A, because if\n-            // transaction B were initially confirmed, conflicting with A and\n-            // A', we wouldn't want to the user to create a transaction D\n-            // intending to replace A', but potentially resulting in a scenario\n-            // where A, A', and D could all be accepted (instead of just B and\n-            // D, or just A and A' like the user would want).\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n-                safeTx = false;\n-            }\n+        if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+            continue;\n \n-            if (fOnlySafe && !safeTx) {\n+        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n+            if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n-            }\n \n-            if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+            if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n-                if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n-                    continue;\n-\n-                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n-                    continue;\n-\n-                if (IsLockedCoin(entry.first, i))\n-                    continue;\n-\n-                if (IsSpent(wtxid, i))\n-                    continue;\n+            if (IsLockedCoin(entry.first, i))\n+                continue;\n \n-                isminetype mine = IsMine(pcoin->tx->vout[i]);\n+            if (IsSpent(wtxid, i))\n+                continue;\n \n-                if (mine == ISMINE_NO) {\n-                    continue;\n-                }\n+            isminetype mine = IsMine(pcoin->tx->vout[i]);\n \n-                bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n-                bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n+            if (mine == ISMINE_NO) {\n+                continue;\n+            }\n \n-                vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+            bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n+            bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n \n-                // Checks the sum amount of all UTXO's.\n-                if (nMinimumSumAmount != MAX_MONEY) {\n-                    nTotal += pcoin->tx->vout[i].nValue;\n+            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n \n-                    if (nTotal >= nMinimumSumAmount) {\n-                        return;\n-                    }\n-                }\n+            // Checks the sum amount of all UTXO's.\n+            if (nMinimumSumAmount != MAX_MONEY) {\n+                nTotal += pcoin->tx->vout[i].nValue;\n \n-                // Checks the maximum number of UTXO's.\n-                if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                if (nTotal >= nMinimumSumAmount) {\n                     return;\n                 }\n             }\n+\n+            // Checks the maximum number of UTXO's.\n+            if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                return;\n+            }\n         }\n     }\n }\n@@ -2320,11 +2318,11 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n     // avoid adding some extra complexity to the Qt code.\n \n     std::map<CTxDestination, std::vector<COutput>> result;\n-\n     std::vector<COutput> availableCoins;\n-    AvailableCoins(availableCoins);\n \n     LOCK2(cs_main, cs_wallet);\n+    AvailableCoins(availableCoins);\n+\n     for (auto& coin : availableCoins) {\n         CTxDestination address;\n         if (coin.fSpendable &&"
      }
    ]
  },
  {
    "sha": "f26866b9caf9ff27d129c703f51b8c2922000243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjY4NjZiOWNhZjlmZjI3ZDEyOWM3MDNmNTFiOGMyOTIyMDAwMjQz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-07T22:20:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:28Z"
      },
      "message": "boost: drop boost threads for upnp",
      "tree": {
        "sha": "85efd77129f0759c6649417f1f23c1a88354d492",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85efd77129f0759c6649417f1f23c1a88354d492"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f26866b9caf9ff27d129c703f51b8c2922000243",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f26866b9caf9ff27d129c703f51b8c2922000243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f26866b9caf9ff27d129c703f51b8c2922000243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f26866b9caf9ff27d129c703f51b8c2922000243/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0277173b1defb63216d40a8d8805ae6d5d563c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0277173b1defb63216d40a8d8805ae6d5d563c26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0277173b1defb63216d40a8d8805ae6d5d563c26"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 60,
      "deletions": 42
    },
    "files": [
      {
        "sha": "2912beec68edd9ab2343b899272a864c1358fead",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -165,6 +165,7 @@ void Interrupt()\n     InterruptRPC();\n     InterruptREST();\n     InterruptTorControl();\n+    InterruptMapPort();\n     if (g_connman)\n         g_connman->Interrupt();\n }\n@@ -191,7 +192,7 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     FlushWallets();\n #endif\n-    MapPort(false);\n+    StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n@@ -1669,7 +1670,9 @@ bool AppInitMain()\n     Discover(threadGroup);\n \n     // Map ports with UPnP\n-    MapPort(gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+    if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {\n+        StartMapPort();\n+    }\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;"
      },
      {
        "sha": "307e5d49d5d510c14bc197e6a639d9ba99536a04",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 38,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -1459,6 +1459,8 @@ void CConnman::WakeMessageHandler()\n \n \n #ifdef USE_UPNP\n+static CThreadInterrupt g_upnp_interrupt;\n+static std::thread g_upnp_thread;\n void ThreadMapPort()\n {\n     std::string port = strprintf(\"%u\", GetListenPort());\n@@ -1509,35 +1511,29 @@ void ThreadMapPort()\n \n         std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n-        try {\n-            while (true) {\n+        do {\n #ifndef UPNPDISCOVER_SUCCESS\n-                /* miniupnpc 1.5 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n+            /* miniupnpc 1.5 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n #else\n-                /* miniupnpc 1.6 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n+            /* miniupnpc 1.6 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n #endif\n \n-                if(r!=UPNPCOMMAND_SUCCESS)\n-                    LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n-                        port, port, lanaddr, r, strupnperror(r));\n-                else\n-                    LogPrintf(\"UPnP Port Mapping successful.\\n\");\n-\n-                MilliSleep(20*60*1000); // Refresh every 20 minutes\n-            }\n-        }\n-        catch (const boost::thread_interrupted&)\n-        {\n-            r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n-            freeUPNPDevlist(devlist); devlist = nullptr;\n-            FreeUPNPUrls(&urls);\n-            throw;\n+            if(r!=UPNPCOMMAND_SUCCESS)\n+                LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n+                    port, port, lanaddr, r, strupnperror(r));\n+            else\n+                LogPrintf(\"UPnP Port Mapping successful.\\n\");\n         }\n+        while(g_upnp_interrupt.sleep_for(std::chrono::minutes(20)));\n+\n+        r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n+        LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n+        freeUPNPDevlist(devlist); devlist = nullptr;\n+        FreeUPNPUrls(&urls);\n     } else {\n         LogPrintf(\"No valid UPnP IGDs found\\n\");\n         freeUPNPDevlist(devlist); devlist = nullptr;\n@@ -1546,27 +1542,39 @@ void ThreadMapPort()\n     }\n }\n \n-void MapPort(bool fUseUPnP)\n+void StartMapPort()\n {\n-    static std::unique_ptr<boost::thread> upnp_thread;\n+    if (!g_upnp_thread.joinable()) {\n+        assert(!g_upnp_interrupt);\n+        g_upnp_thread = std::thread((std::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+    }\n+}\n \n-    if (fUseUPnP)\n-    {\n-        if (upnp_thread) {\n-            upnp_thread->interrupt();\n-            upnp_thread->join();\n-        }\n-        upnp_thread.reset(new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+void InterruptMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_interrupt();\n     }\n-    else if (upnp_thread) {\n-        upnp_thread->interrupt();\n-        upnp_thread->join();\n-        upnp_thread.reset();\n+}\n+\n+void StopMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_thread.join();\n+        g_upnp_interrupt.reset();\n     }\n }\n \n #else\n-void MapPort(bool)\n+void StartMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void InterruptMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void StopMapPort()\n {\n     // Intentionally left blank.\n }"
      },
      {
        "sha": "daa0eea8b8c09d2ab34fa069b85656c1717613fd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -442,7 +442,9 @@ class CConnman\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);\n-void MapPort(bool fUseUPnP);\n+void StartMapPort();\n+void InterruptMapPort();\n+void StopMapPort();\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n "
      },
      {
        "sha": "909be1c26419e25ec8e4816c217f3676d6127c4e",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -315,7 +315,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n         case MapPortUPnP: // core option - can be changed on-the-fly\n             settings.setValue(\"fUseUPnP\", value.toBool());\n-            MapPort(value.toBool());\n+            if (value.toBool()) {\n+                StartMapPort();\n+            } else {\n+                InterruptMapPort();\n+                StopMapPort();\n+            }\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();"
      }
    ]
  },
  {
    "sha": "ba917249486310985a34a5250bb570ca18821322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTkxNzI0OTQ4NjMxMDk4NWEzNGE1MjUwYmI1NzBjYTE4ODIxMzIy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-07T22:42:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:28Z"
      },
      "message": "boost: remove useless threadGroup parameter from Discover",
      "tree": {
        "sha": "ee3abc56f29ce92b369bf33f5479f5879332a803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee3abc56f29ce92b369bf33f5479f5879332a803"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba917249486310985a34a5250bb570ca18821322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba917249486310985a34a5250bb570ca18821322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba917249486310985a34a5250bb570ca18821322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba917249486310985a34a5250bb570ca18821322/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f26866b9caf9ff27d129c703f51b8c2922000243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f26866b9caf9ff27d129c703f51b8c2922000243",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f26866b9caf9ff27d129c703f51b8c2922000243"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 3,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9524da93cd2ed685d361dd365d99210d27bbb70c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba917249486310985a34a5250bb570ca18821322/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba917249486310985a34a5250bb570ca18821322/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ba917249486310985a34a5250bb570ca18821322",
        "patch": "@@ -1667,7 +1667,7 @@ bool AppInitMain()\n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n-    Discover(threadGroup);\n+    Discover();\n \n     // Map ports with UPnP\n     if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {"
      },
      {
        "sha": "201914685cb562160794311a730b5b8b509a32d1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba917249486310985a34a5250bb570ca18821322/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba917249486310985a34a5250bb570ca18821322/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ba917249486310985a34a5250bb570ca18821322",
        "patch": "@@ -2129,7 +2129,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     return true;\n }\n \n-void Discover(boost::thread_group& threadGroup)\n+void Discover()\n {\n     if (!fDiscover)\n         return;"
      },
      {
        "sha": "8378a303b8b1e13149ba53e3399d4f914d1bc826",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba917249486310985a34a5250bb570ca18821322/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba917249486310985a34a5250bb570ca18821322/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ba917249486310985a34a5250bb570ca18821322",
        "patch": "@@ -37,10 +37,6 @@\n class CScheduler;\n class CNode;\n \n-namespace boost {\n-    class thread_group;\n-} // namespace boost\n-\n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n@@ -441,7 +437,7 @@ class CConnman\n     friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n-void Discover(boost::thread_group& threadGroup);\n+void Discover();\n void StartMapPort();\n void InterruptMapPort();\n void StopMapPort();"
      }
    ]
  },
  {
    "sha": "08272671d2218eb69589a0639cbb61ef7cde3004",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODI3MjY3MWQyMjE4ZWI2OTU4OWEwNjM5Y2JiNjFlZjdjZGUzMDA0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-07T23:33:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:29Z"
      },
      "message": "boost: drop boost threads from torcontrol",
      "tree": {
        "sha": "ab4d629613d83d75ae35a25dcd9d6ff7c22a27f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab4d629613d83d75ae35a25dcd9d6ff7c22a27f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08272671d2218eb69589a0639cbb61ef7cde3004",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08272671d2218eb69589a0639cbb61ef7cde3004",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08272671d2218eb69589a0639cbb61ef7cde3004",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08272671d2218eb69589a0639cbb61ef7cde3004/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba917249486310985a34a5250bb570ca18821322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba917249486310985a34a5250bb570ca18821322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba917249486310985a34a5250bb570ca18821322"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9f61989a266c1aaf37a622bff175edd3ee2a75e9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08272671d2218eb69589a0639cbb61ef7cde3004/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08272671d2218eb69589a0639cbb61ef7cde3004/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=08272671d2218eb69589a0639cbb61ef7cde3004",
        "patch": "@@ -1665,7 +1665,7 @@ bool AppInitMain()\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n \n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl(threadGroup, scheduler);\n+        StartTorControl();\n \n     Discover();\n "
      },
      {
        "sha": "717d1cf7e54140406fbfe0c1b2134bcd98c361a5",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=08272671d2218eb69589a0639cbb61ef7cde3004",
        "patch": "@@ -731,7 +731,7 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n \n /****** Thread ********/\n static struct event_base *gBase;\n-static boost::thread torControlThread;\n+static std::thread torControlThread;\n \n static void TorControlThread()\n {\n@@ -740,7 +740,7 @@ static void TorControlThread()\n     event_base_dispatch(gBase);\n }\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void StartTorControl()\n {\n     assert(!gBase);\n #ifdef WIN32\n@@ -754,7 +754,7 @@ void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return;\n     }\n \n-    torControlThread = boost::thread(boost::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    torControlThread = std::thread(std::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n }\n \n void InterruptTorControl()"
      },
      {
        "sha": "2be6701fa5263fe5c8e85ce7b22904d4a0772268",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=08272671d2218eb69589a0639cbb61ef7cde3004",
        "patch": "@@ -13,7 +13,7 @@\n extern const std::string DEFAULT_TOR_CONTROL;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void StartTorControl();\n void InterruptTorControl();\n void StopTorControl();\n "
      }
    ]
  },
  {
    "sha": "004f9999464c7ef4a57b281dcbb407e5d193e798",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDRmOTk5OTQ2NGM3ZWY0YTU3YjI4MWRjYmI0MDdlNWQxOTNlNzk4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T00:19:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:29Z"
      },
      "message": "boost: drop boost threads for [alert|block|wallet]notify",
      "tree": {
        "sha": "2fd9df9f73784808f615402cc1a182f53f3f6abd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fd9df9f73784808f615402cc1a182f53f3f6abd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/004f9999464c7ef4a57b281dcbb407e5d193e798",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004f9999464c7ef4a57b281dcbb407e5d193e798",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/004f9999464c7ef4a57b281dcbb407e5d193e798",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004f9999464c7ef4a57b281dcbb407e5d193e798/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08272671d2218eb69589a0639cbb61ef7cde3004",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08272671d2218eb69589a0639cbb61ef7cde3004",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08272671d2218eb69589a0639cbb61ef7cde3004"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ec2edd9cac1b625db4a875d9be8aebb386634986",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004f9999464c7ef4a57b281dcbb407e5d193e798/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004f9999464c7ef4a57b281dcbb407e5d193e798/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=004f9999464c7ef4a57b281dcbb407e5d193e798",
        "patch": "@@ -546,7 +546,8 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n     if (!strCmd.empty()) {\n         boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n }\n "
      },
      {
        "sha": "6b02c0920c6a8b9e572a116b4e0b164f8d84d352",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004f9999464c7ef4a57b281dcbb407e5d193e798/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004f9999464c7ef4a57b281dcbb407e5d193e798/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=004f9999464c7ef4a57b281dcbb407e5d193e798",
        "patch": "@@ -1188,7 +1188,8 @@ static void AlertNotify(const std::string& strMessage)\n     safeStatus = singleQuote+safeStatus+singleQuote;\n     boost::replace_all(strCmd, \"%s\", safeStatus);\n \n-    boost::thread t(runCommand, strCmd); // thread runs free\n+    std::thread t(runCommand, strCmd);\n+    t.detach(); // thread runs free\n }\n \n static void CheckForkWarningConditions()"
      },
      {
        "sha": "3b8ecce6da470f7037e289f080b41f3eb82d253a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004f9999464c7ef4a57b281dcbb407e5d193e798/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004f9999464c7ef4a57b281dcbb407e5d193e798/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=004f9999464c7ef4a57b281dcbb407e5d193e798",
        "patch": "@@ -34,7 +34,6 @@\n #include <future>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/thread.hpp>\n \n std::vector<CWalletRef> vpwallets;\n /** Transaction fee set by the user */\n@@ -976,7 +975,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     if (!strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjg3Y2I0YTg3OWVlNmVjOGM1YWJmMjBhMmM5MmY1ZmUyMDFhNjZi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-12-12T01:32:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-02-08T21:06:43Z"
      },
      "message": "Refactor: One CBaseChainParams should be enough",
      "tree": {
        "sha": "892d1ccae0d6427e9e50824547935563602332af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/892d1ccae0d6427e9e50824547935563602332af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJafLvmAAoJEIhmwY6hyUSicnQP/idJ6GS6dKSDy8Ph26yGs48u\nCtPWfl1tS9o1WGWTjSN1XXvJPnZBzTskd8CfWmRjWHwW8SSutdJokXAoUTaNnrMH\nnIPdor0C55xVLjiJDT/2+ResVdXGhYdPAA7GXKmlQVKDOLBELJp8Oj7syUlfWovn\nr01nmtyerFxA2dAOrSNlkY+I5eqhq++Bp6HbnO4CS5NHYDapkkjvtAzQTCFOq4te\nEDDZ0mqN5kjGj0CetzI059X5fQI+VCEyvSkBflpH5Q6OsgVO4KgaoorNOBQDqGDE\nR2mlVCghdp7IRC0teeo9vj/c3ZTzYpEKSl7cdnEELsn/P8N2PzKF6P6tUuhmP+y7\nli41c/6qkKjjSh7AojNY7F0g5KhsBb43rtSY2DZzJ6WChJRvfl56qCQbtWc5sQgu\nJNUGvKdGF6ia7wAbF2lQZJMWXyFfFZmiLc0eOouRR4rzZ+P4G6W6rQe6zls11G6o\nu/kfoNzehxGcxrEQGSWhWKtrLyoaZWY0+wU0a8BfFYd8FucorH5UM4E8BS7sF2z8\nPC3sqFIGRQnjZe9ci6q8Inpm93KP1tlnc1jhs0UCUAQudnGm1qt5rSVo6YPkmJTG\nZ1fwF9gfooWSrbDHqhHFVN630hPjep2rUSUGUF53gaSWw9YA4htv1Lv+FRjHhsEM\n0unoNzni04pIkRTZ/LGx\n=4tNI\n-----END PGP SIGNATURE-----",
        "payload": "tree 892d1ccae0d6427e9e50824547935563602332af\nparent d405beea26c1569f46cf50ef71b376c9487ce361\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1513042364 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1518124003 +0100\n\nRefactor: One CBaseChainParams should be enough\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d405beea26c1569f46cf50ef71b376c9487ce361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d405beea26c1569f46cf50ef71b376c9487ce361"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 6,
      "deletions": 43
    },
    "files": [
      {
        "sha": "a04258fd409ab0a98000fad0291aa7f1fe4c8a01",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 41,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "patch": "@@ -24,44 +24,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n }\n \n-/**\n- * Main network\n- */\n-class CBaseMainParams : public CBaseChainParams\n-{\n-public:\n-    CBaseMainParams()\n-    {\n-        nRPCPort = 8332;\n-    }\n-};\n-\n-/**\n- * Testnet (v3)\n- */\n-class CBaseTestNetParams : public CBaseChainParams\n-{\n-public:\n-    CBaseTestNetParams()\n-    {\n-        nRPCPort = 18332;\n-        strDataDir = \"testnet3\";\n-    }\n-};\n-\n-/*\n- * Regression test\n- */\n-class CBaseRegTestParams : public CBaseChainParams\n-{\n-public:\n-    CBaseRegTestParams()\n-    {\n-        nRPCPort = 18443;\n-        strDataDir = \"regtest\";\n-    }\n-};\n-\n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n@@ -73,11 +35,11 @@ const CBaseChainParams& BaseParams()\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n+        return MakeUnique<CBaseChainParams>(\"\", 8332);\n     else if (chain == CBaseChainParams::TESTNET)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n+        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n+        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "2cb860380ef8ce771a3bdbd7f1b8fc6de0c5f713",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "patch": "@@ -24,9 +24,10 @@ class CBaseChainParams\n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n \n-protected:\n-    CBaseChainParams() {}\n+    CBaseChainParams() = delete;\n+    CBaseChainParams(const std::string& data_dir, int rpc_port) : nRPCPort(rpc_port), strDataDir(data_dir) {}\n \n+private:\n     int nRPCPort;\n     std::string strDataDir;\n };"
      }
    ]
  },
  {
    "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzQ0N2JhMDYwNTdiOGU4M2Y5NjJjODI0OTFkMmZlNmM1MjExZjUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T21:05:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T21:19:53Z"
      },
      "message": "Merge #12225: Mempool cleanups\n\n669c943 Avoid leaking prioritization information when relaying transactions (Suhas Daftuar)\ne868b22 fee estimator: avoid sorting mempool on shutdown (Suhas Daftuar)\n0975406 Correct mempool mapTx comment (Suhas Daftuar)\n\nPull request description:\n\n  Following up on #12127 and #12118, this cleans up a comment that was left incorrect in txmempool.h, and addresses a couple of the observations @TheBlueMatt made about an unnecessary use of `queryHashes()` and a small information leak when prioritizing transactions.\n\n  Left undone is nuking queryHashes altogether; that would require changing the behavior of the `getrawmempool` rpc call, which I think I might be in favor of doing, but wanted to save for its own PR.\n\nTree-SHA512: c97d10b96dcd6520459287a4a2eda92774173757695100fcfe61e526aef86f394507c331d17f9e0c14b496c33ec46198a0f165a847762ca50f7c6780b993f162",
      "tree": {
        "sha": "94c25e37dfe1e50db0f61f4537619f9ac8f4f494",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94c25e37dfe1e50db0f61f4537619f9ac8f4f494"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafL75AAoJEB5K7WKYbNJdue4IAJgTexizciszDojWCDpWmCE0\n/LsZDNtfTw+VIijeV6f+a3D7tmzrjlum6aVCrq4bZChrh7FwQPTRG3vkI/VRsMco\nVLtKp7fcFSjlUdETY7FTmfXTYYvuyXm8gtpVIFVLvg3MS+Qne1wOS5wDJrFOsEoE\nXg0SY1X8SloYIFRSpPn5IzKoT4teAKQXV17tjb/j4eCMgBOBrDpWkpDLI2AQ0Pzc\nvEiFRugZhkJv5iop7MUwR12PrKtilPLv88TRJ3iFZ83jpw6QkO5R0/tZg+MlmiTG\nX2gZ3omPKIwidVVUwz5nzxNfhKt8oe3VgmjIMs9Bp1IJswWfR37Hp3F1ITR6lVI=\n=Rq8y\n-----END PGP SIGNATURE-----",
        "payload": "tree 94c25e37dfe1e50db0f61f4537619f9ac8f4f494\nparent d405beea26c1569f46cf50ef71b376c9487ce361\nparent 669c9433cfbc6bc25243fcdb550009b2d4180cc9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518123900 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518124793 +0100\n\nMerge #12225: Mempool cleanups\n\n669c943 Avoid leaking prioritization information when relaying transactions (Suhas Daftuar)\ne868b22 fee estimator: avoid sorting mempool on shutdown (Suhas Daftuar)\n0975406 Correct mempool mapTx comment (Suhas Daftuar)\n\nPull request description:\n\n  Following up on #12127 and #12118, this cleans up a comment that was left incorrect in txmempool.h, and addresses a couple of the observations @TheBlueMatt made about an unnecessary use of `queryHashes()` and a small information leak when prioritizing transactions.\n\n  Left undone is nuking queryHashes altogether; that would require changing the behavior of the `getrawmempool` rpc call, which I think I might be in favor of doing, but wanted to save for its own PR.\n\nTree-SHA512: c97d10b96dcd6520459287a4a2eda92774173757695100fcfe61e526aef86f394507c331d17f9e0c14b496c33ec46198a0f165a847762ca50f7c6780b993f162\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d405beea26c1569f46cf50ef71b376c9487ce361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d405beea26c1569f46cf50ef71b376c9487ce361"
      },
      {
        "sha": "669c9433cfbc6bc25243fcdb550009b2d4180cc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/669c9433cfbc6bc25243fcdb550009b2d4180cc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/669c9433cfbc6bc25243fcdb550009b2d4180cc9"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "84398d978cf8814b4ce659555d1d9e0b26f42e98",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -213,7 +213,7 @@ void Shutdown()\n \n     if (fFeeEstimatesInitialized)\n     {\n-        ::feeEstimator.FlushUnconfirmed(::mempool);\n+        ::feeEstimator.FlushUnconfirmed();\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())"
      },
      {
        "sha": "79b450e3e674d249d0fd2631e266f41bdba191da",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -981,16 +981,17 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n     return true;\n }\n \n-void CBlockPolicyEstimator::FlushUnconfirmed(CTxMemPool& pool) {\n+void CBlockPolicyEstimator::FlushUnconfirmed() {\n     int64_t startclear = GetTimeMicros();\n-    std::vector<uint256> txids;\n-    pool.queryHashes(txids);\n     LOCK(cs_feeEstimator);\n-    for (auto& txid : txids) {\n-        removeTx(txid, false);\n+    size_t num_entries = mapMemPoolTxs.size();\n+    // Remove every entry in mapMemPoolTxs\n+    while (!mapMemPoolTxs.empty()) {\n+        auto mi = mapMemPoolTxs.begin();\n+        removeTx(mi->first, false); // this calls erase() on mapMemPoolTxs\n     }\n     int64_t endclear = GetTimeMicros();\n-    LogPrint(BCLog::ESTIMATEFEE, \"Recorded %u unconfirmed txs from mempool in %gs\\n\",txids.size(), (endclear - startclear)*0.000001);\n+    LogPrint(BCLog::ESTIMATEFEE, \"Recorded %u unconfirmed txs from mempool in %gs\\n\", num_entries, (endclear - startclear)*0.000001);\n }\n \n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)"
      },
      {
        "sha": "5f69e989c17180b81085c119e4b62ad3d28a0df4",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -223,7 +223,7 @@ class CBlockPolicyEstimator\n     bool Read(CAutoFile& filein);\n \n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n-    void FlushUnconfirmed(CTxMemPool& pool);\n+    void FlushUnconfirmed();\n \n     /** Calculation of highest target that estimates are tracked for */\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;"
      },
      {
        "sha": "c6a1bf08ce1eb181a408c27742e8e0611fe82339",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -241,15 +241,18 @@ class CompareTxMemPoolEntryByDescendantScore\n \n /** \\class CompareTxMemPoolEntryByScore\n  *\n- *  Sort by score of entry ((fee+delta)/size) in descending order\n+ *  Sort by feerate of entry (fee/size) in descending order\n+ *  This is only used for transaction relay, so we use GetFee()\n+ *  instead of GetModifiedFee() to avoid leaking prioritization\n+ *  information via the sort order.\n  */\n class CompareTxMemPoolEntryByScore\n {\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n-        double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n-        double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n+        double f1 = (double)a.GetFee() * b.GetTxSize();\n+        double f2 = (double)b.GetFee() * a.GetTxSize();\n         if (f1 == f2) {\n             return b.GetTx().GetHash() < a.GetTx().GetHash();\n         }\n@@ -379,8 +382,9 @@ class SaltedTxidHasher\n  *\n  * mapTx is a boost::multi_index that sorts the mempool on 4 criteria:\n  * - transaction hash\n- * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n+ * - descendant feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n  * - time in mempool\n+ * - ancestor feerate [we use min(feerate of tx, feerate of tx with all unconfirmed ancestors)]\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given"
      }
    ]
  },
  {
    "sha": "c4af7387634765d254d1432746385cf35917d367",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGFmNzM4NzYzNDc2NWQyNTRkMTQzMjc0NjM4NWNmMzU5MTdkMzY3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-08T23:00:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-08T23:06:21Z"
      },
      "message": "Fix ignoring tx data requests when fPauseSend is set on a peer\n\nThis resolves a bug introduced in\n66aa1d58a158991a8014a91335b5bc9c00062f56 where, if when responding\nto a series of transaction requests in a getdata we hit the send\nbuffer limit and set fPauseSend, we will skip one transaction per\ncall to ProcessGetData.\n\nBug found by Cory Fields (@theuni).",
      "tree": {
        "sha": "91ada887d27c8aebd0a3cf327d0cbc38a342e026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ada887d27c8aebd0a3cf327d0cbc38a342e026"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4af7387634765d254d1432746385cf35917d367",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4af7387634765d254d1432746385cf35917d367",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4af7387634765d254d1432746385cf35917d367",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4af7387634765d254d1432746385cf35917d367/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bf9307727a1e16b1ef6841672ba4117c3c6c7d14",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4af7387634765d254d1432746385cf35917d367/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4af7387634765d254d1432746385cf35917d367/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c4af7387634765d254d1432746385cf35917d367",
        "patch": "@@ -1226,10 +1226,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         }\n     } // release cs_main\n \n-    if (it != pfrom->vRecvGetData.end()) {\n+    if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n         const CInv &inv = *it;\n-        it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n+            it++;\n             ProcessGetBlockData(pfrom, consensusParams, inv, connman, interruptMsgProc);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTAwNWRkYWQxYzRhOTczMmVjYWU0N2M3ZGUzNGI0ZGUxNTdmNDhm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-09T09:44:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-09T09:54:01Z"
      },
      "message": "Merge #11761: [docs] initial QT documentation\n\nc8edc2c [docs] initial QT documentation, move Qt Creator instructions (Sjors Provoost)\n\nPull request description:\n\n  I'll update this as I figure out how everything is tied together, but I think it's a useful enough start.\n\nTree-SHA512: d96e5c9ba8ccc3a1b92a0894a8a8449317100eebb14e5d390b51793534458f50eac296cf2945fccf81b85aff23fa32d91d6015a0a76ada4f7091a400d7508ae5",
      "tree": {
        "sha": "e00b6171eaf03f50495ff573b26dea1114697e41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e00b6171eaf03f50495ff573b26dea1114697e41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafW+5AAoJEB5K7WKYbNJdG3MH/2b3uPWEd95K8QBZIUYQ1/q8\nEOMsjOKhTXa1Zgm952ZxsRWa5wiN5HhRQ4omf/DCBLop2bxM5BhCyddMsngvIHqf\ncG51T0OY/lxRBCYmaKc2ranO9WogbPpGQBDaCsDdR00y+oKpdUD1NCx0gkflMksO\nWtw0HwsWPKIn0ogYTg3gMI3628DGVGwz6FQmGeNftVlI2usZy41VnzGEo25hMHzc\npTBImZyoekYdANbTjGzU3zHGiY5KjOobEWAEB3fIa3NsoaX5NRgnyOeYan6ongAC\nUFcpA+pnolH5AaEHTLk98mxffIW9dEQ0S8kHEnUCzL3IY346LLsTBhlSWpdFqdw=\n=4yVn\n-----END PGP SIGNATURE-----",
        "payload": "tree e00b6171eaf03f50495ff573b26dea1114697e41\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nparent c8edc2c3cb79a1ae15622059004981c70f3775d8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518169448 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518170041 +0100\n\nMerge #11761: [docs] initial QT documentation\n\nc8edc2c [docs] initial QT documentation, move Qt Creator instructions (Sjors Provoost)\n\nPull request description:\n\n  I'll update this as I figure out how everything is tied together, but I think it's a useful enough start.\n\nTree-SHA512: d96e5c9ba8ccc3a1b92a0894a8a8449317100eebb14e5d390b51793534458f50eac296cf2945fccf81b85aff23fa32d91d6015a0a76ada4f7091a400d7508ae5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      },
      {
        "sha": "c8edc2c3cb79a1ae15622059004981c70f3775d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8edc2c3cb79a1ae15622059004981c70f3775d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8edc2c3cb79a1ae15622059004981c70f3775d8"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 95,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2b84c7cc2c540ac978f242c9686da707e312e226",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89005ddad1c4a9732ecae47c7de34b4de157f48f/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89005ddad1c4a9732ecae47c7de34b4de157f48f/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "patch": "@@ -90,23 +90,6 @@ Other commands:\n     ./src/bitcoin-cli --help # Outputs a list of command-line options.\n     ./src/bitcoin-cli help # Outputs a list of RPC commands when the daemon is running.\n \n-Using Qt Creator as IDE\n-------------------------\n-You can use Qt Creator as an IDE, for bitcoin development.\n-Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n-Uncheck everything except Qt Creator during the installation process.\n-\n-1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --enable-debug\n-3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n-4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n-5. Leave the file selection as it is\n-6. Confirm the \"summary page\"\n-7. In the \"Projects\" tab select \"Manage Kits...\"\n-8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n-9. Select LLDB as debugger (you might need to set the path to your installation)\n-10. Start debugging with Qt Creator\n-\n Notes\n -----\n "
      },
      {
        "sha": "7ffea98170ebdc5166f405168eb83f2ec5a2e932",
        "filename": "src/qt/README.md",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89005ddad1c4a9732ecae47c7de34b4de157f48f/src/qt/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89005ddad1c4a9732ecae47c7de34b4de157f48f/src/qt/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/README.md?ref=89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "patch": "@@ -0,0 +1,95 @@\n+This directory contains the BitcoinQT graphical user interface (GUI). It uses the cross platform framework [QT](https://www1.qt.io/developers/).\n+\n+The current precise version for QT 5 is specified in [qt.mk](/depends/packages/qt.mk). QT 4 is also supported (see [#8263](https://github.com/bitcoin/bitcoin/issues/8263)).\n+\n+## Compile and run\n+\n+See build instructions ([OSX](/doc/build-osx.md), [Windows](/doc/build-windows.md), [Unix](/doc/build-unix.md), etc).\n+\n+To run:\n+\n+```sh\n+./src/qt/bitcoin-qt\n+```\n+\n+## Files and directories\n+\n+### forms\n+\n+Contains [Designer UI](http://doc.qt.io/qt-5.9/designer-using-a-ui-file.html) files. They are created with [Qt Creator](#use-qt-Creator-as IDE), but can be edited using any text editor.\n+\n+### locale\n+\n+Contains translations. They are periodically updated. The process is described [here](/doc/translation_process.md).\n+\n+### res\n+\n+Resources such as the icon.\n+\n+### test\n+\n+Tests.\n+\n+### bitcoingui.(h/cpp)\n+\n+Represents the main window of the Bitcoin UI.\n+\n+### \\*model.(h/cpp)\n+\n+The model. When it has a corresponding controller, it generally inherits from  [QAbstractTableModel](http://doc.qt.io/qt-5/qabstracttablemodel.html). Models that are used by controllers as helpers inherit from other QT classes like [QValidator](http://doc.qt.io/qt-5/qvalidator.html).\n+\n+ClientModel is used by the main application `bitcoingui` and several models like `peertablemodel`.\n+\n+### \\*page.(h/cpp)\n+\n+A controller. `:NAMEpage.cpp` generally includes `:NAMEmodel.h` and `forms/:NAME.page.ui` with a similar `:NAME`.\n+\n+### \\*dialog.(h/cpp)\n+\n+Various dialogs, e.g. to open a URL. Inherit from [QDialog](http://doc.qt.io/qt-4.8/qdialog.html).\n+\n+### paymentserver.(h/cpp)\n+\n+Used to process BIP21 and BIP70 (see https://github.com/bitcoin/bitcoin/pull/11622) payment URI / requests. Also handles URI based application switching (e.g. when following a bitcoin:... link from a browser).\n+\n+### walletview.(h/cpp)\n+\n+Represents the view to a single wallet.\n+\n+### Other .h/cpp files\n+\n+* UI elements like BitcoinAmountField, which inherit from QWidget.\n+* `bitcoinstrings.cpp`: automatically generated\n+* `bitcoinunits.(h/cpp)`: BTC / mBTC / etc handling\n+* `callback.h`\n+* `guiconstants.h`: UI colors, app name, etc\n+* `guiutil.h`: several helper functions\n+* `macdockiconhandler.(h/cpp)`\n+* `macdockiconhandler.(h/cpp)`: display notifications in OSX\n+\n+## Contribute\n+\n+See [CONTRIBUTING.md](/CONTRIBUTING.md) for general guidelines. Specifically for QT:\n+\n+* don't change `local/bitcoin_en.ts`; this happens [automatically](/doc/translation_process.md#writing-code-with-translations)\n+\n+## Using Qt Creator as IDE\n+\n+You can use Qt Creator as an IDE. This is especially useful if you want to change\n+the UI layout.\n+\n+Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n+Uncheck everything except Qt Creator during the installation process.\n+\n+Instructions for OSX:\n+\n+1. Make sure you installed everything through Homebrew mentioned in the [OSX build instructions](/docs/build-osx.md)\n+2. Use `./configure` with the `--enable-debug` flag\n+3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n+4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n+5. Leave the file selection as it is\n+6. Confirm the \"summary page\"\n+7. In the \"Projects\" tab select \"Manage Kits...\"\n+8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n+9. Select LLDB as debugger (you might need to set the path to your installation)\n+10. Start debugging with Qt Creator (you might need to the executable to \"bitcoin-qt\" under \"Run\", which is where you can also add command line arguments)"
      }
    ]
  },
  {
    "sha": "464015f6f163b0c43a1a8e20a2890ee837a6804d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjQwMTVmNmYxNjNiMGM0M2ExYThlMjBhMjg5MGVlODM3YTY4MDRk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-09T09:54:19Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-09T09:57:10Z"
      },
      "message": "[scripts] gitian-builder.sh: fix --setup doc, LXC is default",
      "tree": {
        "sha": "575ca1c60ba7a17b312baf104305784263add508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/575ca1c60ba7a17b312baf104305784263add508"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlp9cIIACgkQV/+b28ww\nEAkwsQ/+JrBfqJI9bz+wHH2yBmcq0axqhjbZv9/01uj2EZPuS5qgdBwP3w478i6j\nUPiPzZj+saoSe7gnfs90FGGUWR27ma2VRslB7wYYEcWcmj+TccoQ4pvZ816zOJbJ\nCOU3ap/neCg1d6W+u4ELhvqILzXRnKDSMk7+DZDcYKFHqoy0SNjPzwplhjbTHerA\ny8KZpfPvfT7mvmm0ABh61MmXsIK2iFaGNllFfTxCoMaoUu7h5ZccdxTKBYvPZ4gs\na7PF/T953mDvVGrzXrQZXHF3I7pfFBb4Ah3OoqwnkhKEQryMA/74wI0cehwG8NUk\nZH+DZ+XhhO9ifTsBzhM3a6u63iUokv64Qt7UeIpqjQJiULmm2+AajJPxZZHPAA8t\nvKnbECVCwpCqtArI6LuWIv4a8cLgQQKzan/YlEjJRjaTu7C/CuTHw4tQN11X82pq\na52c8XxOZtW9+28njUN5OlbW2Mi0Y7tW2qltjlr4lh8JsZEJqdIOMIRES5XR9613\nXkzNVA9eUEkgcKU4Nc+Jwoo0TSBAIH7NnJDyoaV9Vu6qUYbjQo9tyVTEz7D6mtB9\nOvpssBIzih9quE3Yobo1rq8qqAhSPCsgdZpCl6Yf56WPGxgpKq0D0XqPAaUplskU\n2/3bKLlebUz1W8FRkp+SLMKH07pi3uDASznyAnDutcwvTDD1DOE=\n=ZOsM\n-----END PGP SIGNATURE-----",
        "payload": "tree 575ca1c60ba7a17b312baf104305784263add508\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nauthor Sjors Provoost <sjors@sprovoost.nl> 1518170059 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1518170230 +0100\n\n[scripts] gitian-builder.sh: fix --setup doc, LXC is default\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/464015f6f163b0c43a1a8e20a2890ee837a6804d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d334c1642f3e3b90e90ebbcbeea1cbddb69afc54",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/464015f6f163b0c43a1a8e20a2890ee837a6804d/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/464015f6f163b0c43a1a8e20a2890ee837a6804d/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=464015f6f163b0c43a1a8e20a2890ee837a6804d",
        "patch": "@@ -47,7 +47,7 @@ Options:\n -j\t\tNumber of processes to use. Default 2\n -m\t\tMemory to allocate in MiB. Default 2000\n --kvm           Use KVM instead of LXC\n---setup         Set up the Gitian building environment. Uses KVM. If you want to use lxc, use the --lxc option. Only works on Debian-based systems (Ubuntu, Debian)\n+--setup         Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)\n --detach-sign   Create the assert file for detached signing. Will not commit anything.\n --no-commit     Do not commit anything to git\n -h|--help\tPrint this help message"
      }
    ]
  },
  {
    "sha": "948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDhjMjljYzBkMmRmNzJiMmY5NzE3YjhkMzNjNWUyOWUyZjk1ODJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-10T08:56:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-10T11:37:20Z"
      },
      "message": "Merge #12128: Refactor: One CBaseChainParams should be enough\n\n1687cb4 Refactor: One CBaseChainParams should be enough (Jorge Tim\u00f3n)\n\nPull request description:\n\n  There's no need for class hierarchy with CBaseChainParams, it is just a struct with 2 fields.\n  This starts as a +10-43 diff\n\nTree-SHA512: 0a7dd64ab785416550b541787c6083540e4962d76b6cffa806bb3593aec2daf1752dfe65ac5cd51b34ad5c31dd8292c422b483fdd2d37d0b7e68725498ed4c2d",
      "tree": {
        "sha": "5438dc548a5367dfde8007de9b94218fd026d4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5438dc548a5367dfde8007de9b94218fd026d4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaftlwAAoJEB5K7WKYbNJdF/sH/1ATcWh8W2YlKIgBaYQdkjUX\njib4h42y+FSazkCr4zkYgiId9Rl4AoCdYvOTGpQhgJTE1iaNnxdpD8+ejhp3C6D7\nfZ0eUrI6jC3vsoOd+IzVJ7YTPy8JHrjB53tMLNqCeN+F1rCmFyZAe3iEnMmL/yB9\nNWGYHP3zG2mbTa4LICqrWWlmDTcuP2LhwCBzkwYPkXffIov8hi97mWp4TEP5rNbi\nZZuDYahFUpUz/g+6e6GJ+da8VP+sBhGj4wJLX6QqUCwifuFUA/ksVHh7ijSABfgT\n4FAb4LlyXSRstXX4GbfIFZc1fZPqQEP0G51RAuSAy1w0fsIBC/GN94dN5weoX14=\n=o8l4\n-----END PGP SIGNATURE-----",
        "payload": "tree 5438dc548a5367dfde8007de9b94218fd026d4f4\nparent 89005ddad1c4a9732ecae47c7de34b4de157f48f\nparent 1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518252970 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518262640 +0100\n\nMerge #12128: Refactor: One CBaseChainParams should be enough\n\n1687cb4 Refactor: One CBaseChainParams should be enough (Jorge Tim\u00f3n)\n\nPull request description:\n\n  There's no need for class hierarchy with CBaseChainParams, it is just a struct with 2 fields.\n  This starts as a +10-43 diff\n\nTree-SHA512: 0a7dd64ab785416550b541787c6083540e4962d76b6cffa806bb3593aec2daf1752dfe65ac5cd51b34ad5c31dd8292c422b483fdd2d37d0b7e68725498ed4c2d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f"
      },
      {
        "sha": "1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 6,
      "deletions": 43
    },
    "files": [
      {
        "sha": "a04258fd409ab0a98000fad0291aa7f1fe4c8a01",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 41,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "patch": "@@ -24,44 +24,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n }\n \n-/**\n- * Main network\n- */\n-class CBaseMainParams : public CBaseChainParams\n-{\n-public:\n-    CBaseMainParams()\n-    {\n-        nRPCPort = 8332;\n-    }\n-};\n-\n-/**\n- * Testnet (v3)\n- */\n-class CBaseTestNetParams : public CBaseChainParams\n-{\n-public:\n-    CBaseTestNetParams()\n-    {\n-        nRPCPort = 18332;\n-        strDataDir = \"testnet3\";\n-    }\n-};\n-\n-/*\n- * Regression test\n- */\n-class CBaseRegTestParams : public CBaseChainParams\n-{\n-public:\n-    CBaseRegTestParams()\n-    {\n-        nRPCPort = 18443;\n-        strDataDir = \"regtest\";\n-    }\n-};\n-\n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n@@ -73,11 +35,11 @@ const CBaseChainParams& BaseParams()\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n+        return MakeUnique<CBaseChainParams>(\"\", 8332);\n     else if (chain == CBaseChainParams::TESTNET)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n+        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n+        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "2cb860380ef8ce771a3bdbd7f1b8fc6de0c5f713",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "patch": "@@ -24,9 +24,10 @@ class CBaseChainParams\n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n \n-protected:\n-    CBaseChainParams() {}\n+    CBaseChainParams() = delete;\n+    CBaseChainParams(const std::string& data_dir, int rpc_port) : nRPCPort(rpc_port), strDataDir(data_dir) {}\n \n+private:\n     int nRPCPort;\n     std::string strDataDir;\n };"
      }
    ]
  },
  {
    "sha": "fe53d5f3636aed064823bc220d828c7ff08d1d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTUzZDVmMzYzNmFlZDA2NDgyM2JjMjIwZDgyOGM3ZmYwOGQxZDUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:47:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:47:23Z"
      },
      "message": "Merge #12394: gitian-builder.sh: fix --setup doc, since lxc is default\n\n464015f6f1 [scripts] gitian-builder.sh: fix --setup doc, LXC is default (Sjors Provoost)\n\nPull request description:\n\nTree-SHA512: 9e4c029bc0179265b20a6cecf13619f0e9d932b6911832d1aa6fc488c62c6e60bc5a10eb6eff4c668ef9cbc66942ca5c13177d0bc3b9259398780ce12a53a645",
      "tree": {
        "sha": "646f987600061249fbd9ba2a3497efbf0ee32944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/646f987600061249fbd9ba2a3497efbf0ee32944"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJafwX7AAoJENLqSFDnUoslgjgQALLT98gSQT7DvPWDusXUEOku\nwtuiH3LEPaRXuZNAgiiWfG2deIJA5WfuCC5hEZyo3q3WejOgRG57ijttxYN9hJQc\nnC8kg0XNCeHEj+XhWKE49U/yYOnsNpIYlxVofj5PfSMeX5hA4IVKZD5yAA92w6mf\ntCxG1fuN76Eo20grlOonhhFO5uoAIV12tp7G/ZKnYi+wxSO9/v4utxgrFXG1fSMh\nnKjwylUi0/2rHfqlpnik+uPNT0UIN81knzoctQKt1AigRQjHWmm6b4sEhiIOWwtT\npnpvQgsDnJbGOqPuG3qY3ZSM9SmbiFzWf1xylOO9eisVzLwZm277Ok0ecf7jEE2u\nRv9Fuj/zr39fa0seRS0q11+w9WX/EQeGmxh0d3WHBG2u259ytEKSS1yeyBeuufyD\nO0SztG0WvED3L7hZJYIDMKF9uIU3Rbv7kPQ4uXtyrIQVDYQbaFoblfrYe1P33/si\nwnBLxHSamVU7gx9dTFvVN4W5l8lhzlL2foa0BaV0OmeW6CClSXpFK5tGYGehdYsB\nq3cbSKFj1szMfv4NkuP+h7W/RNC9TBIEFbF4GlRYB+oEtK+k9Lx+s+1DCNWZIfKN\nptM5kd8coDNeOxNY44IfMsuI9rWdwfRyXrxOzRDStESdAkaznHI59Kft2Q3fMsvi\nq4o3cJ6gEFeR5VNUyveh\n=FBTZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 646f987600061249fbd9ba2a3497efbf0ee32944\nparent 948c29cc0d2df72b2f9717b8d33c5e29e2f9582c\nparent 464015f6f163b0c43a1a8e20a2890ee837a6804d\nauthor MarcoFalke <falke.marco@gmail.com> 1518274041 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518274043 -0500\n\nMerge #12394: gitian-builder.sh: fix --setup doc, since lxc is default\n\n464015f6f1 [scripts] gitian-builder.sh: fix --setup doc, LXC is default (Sjors Provoost)\n\nPull request description:\n\nTree-SHA512: 9e4c029bc0179265b20a6cecf13619f0e9d932b6911832d1aa6fc488c62c6e60bc5a10eb6eff4c668ef9cbc66942ca5c13177d0bc3b9259398780ce12a53a645\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe53d5f3636aed064823bc220d828c7ff08d1d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c"
      },
      {
        "sha": "464015f6f163b0c43a1a8e20a2890ee837a6804d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/464015f6f163b0c43a1a8e20a2890ee837a6804d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d334c1642f3e3b90e90ebbcbeea1cbddb69afc54",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe53d5f3636aed064823bc220d828c7ff08d1d52/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe53d5f3636aed064823bc220d828c7ff08d1d52/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=fe53d5f3636aed064823bc220d828c7ff08d1d52",
        "patch": "@@ -47,7 +47,7 @@ Options:\n -j\t\tNumber of processes to use. Default 2\n -m\t\tMemory to allocate in MiB. Default 2000\n --kvm           Use KVM instead of LXC\n---setup         Set up the Gitian building environment. Uses KVM. If you want to use lxc, use the --lxc option. Only works on Debian-based systems (Ubuntu, Debian)\n+--setup         Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)\n --detach-sign   Create the assert file for detached signing. Will not commit anything.\n --no-commit     Do not commit anything to git\n -h|--help\tPrint this help message"
      }
    ]
  },
  {
    "sha": "a570098021be6a7b9f4589300ea655ae4633628e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTcwMDk4MDIxYmU2YTdiOWY0NTg5MzAwZWE2NTVhZTQ2MzM2Mjhl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:55:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:55:26Z"
      },
      "message": "Squashed 'src/univalue/' changes from 07947ff2da..51d3ab34ba\n\n51d3ab34ba Merge #10: Add pushKV(key, boolean) function (replaces #5)\n129bad96d5 [tests] test pushKV for boolean values\nb3c44c947f Pushing boolean value to univalue correctly\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: 51d3ab34ba2857f0d03dc07250cb4a2b5e712e67",
      "tree": {
        "sha": "a2dbaf30021c0a31eecc213cd84d600273d333b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2dbaf30021c0a31eecc213cd84d600273d333b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a570098021be6a7b9f4589300ea655ae4633628e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a570098021be6a7b9f4589300ea655ae4633628e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a570098021be6a7b9f4589300ea655ae4633628e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a570098021be6a7b9f4589300ea655ae4633628e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88411e98e50c92f8990733eee0bc353ac8f21a35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88411e98e50c92f8990733eee0bc353ac8f21a35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88411e98e50c92f8990733eee0bc353ac8f21a35"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c15b2f051eb86f9def682b9cd2c45c22c0697b45",
        "filename": "include/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a570098021be6a7b9f4589300ea655ae4633628e/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a570098021be6a7b9f4589300ea655ae4633628e/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=a570098021be6a7b9f4589300ea655ae4633628e",
        "patch": "@@ -130,6 +130,10 @@ class UniValue {\n         UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n+    bool pushKV(const std::string& key, bool val_) {\n+        UniValue tmpVal((bool)val_);\n+        return pushKV(key, tmpVal);\n+    }\n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);"
      },
      {
        "sha": "70ccc0d08a5ef229bfb1eb1d08e552b62587a259",
        "filename": "test/object.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a570098021be6a7b9f4589300ea655ae4633628e/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a570098021be6a7b9f4589300ea655ae4633628e/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/object.cpp?ref=a570098021be6a7b9f4589300ea655ae4633628e",
        "patch": "@@ -261,14 +261,20 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     strKey = \"temperature\";\n     BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n \n+    strKey = \"moon\";\n+    BOOST_CHECK(obj.pushKV(strKey, true));\n+\n+    strKey = \"spoon\";\n+    BOOST_CHECK(obj.pushKV(strKey, false));\n+\n     UniValue obj2(UniValue::VOBJ);\n     BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n     BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n \n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.size(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 11);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -277,6 +283,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n     BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n     BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"moon\"].getValStr(), \"1\");\n+    BOOST_CHECK_EQUAL(obj[\"spoon\"].getValStr(), \"\");\n     BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n     BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n \n@@ -289,6 +297,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.exists(\"time\"));\n     BOOST_CHECK(obj.exists(\"calories\"));\n     BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"moon\"));\n+    BOOST_CHECK(obj.exists(\"spoon\"));\n     BOOST_CHECK(obj.exists(\"cat1\"));\n     BOOST_CHECK(obj.exists(\"cat2\"));\n \n@@ -302,6 +312,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n     objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"moon\"] = UniValue::VBOOL;\n+    objTypes[\"spoon\"] = UniValue::VBOOL;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      }
    ]
  },
  {
    "sha": "fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTEzODhlZGIxN2ZjOWVjYTA5N2Q5MzU0MmY4ZDVkYjVhYTBjZjE3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:56:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:55:54Z"
      },
      "message": "univalue: Bump subtree",
      "tree": {
        "sha": "4fede1f3b0202ae2591bc0ce0d1efd3c42883274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fede1f3b0202ae2591bc0ce0d1efd3c42883274"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJafwf6AAoJEM4rdWl+aaVIG0YL+wZnPT5r6DDug3ZbcsiMwVjv\nFn7OD1M1D261EYhlZvaaVeCTbF4mtaVsODlxHZ27OHz4e7IH/7lq9+rIDdoFYlVC\nlnRbXJg5NSwV7FtCJsVRb3VVRNR11urBqbzwX9PatGNUKx1eUMfnzqSbXjp6AMmO\nj1PnAuBktLs0246Zbo9rOeG/IhdcyL6w9Sl3+i3X9FN4e354k4YF/IG/Ttmyx/zF\nYFqXgIzna4xGM2EYNBMt8FzMt+O42HIHp+H6KznG0QHa7mDJyFOtURv0sD/aqLpp\nwuepSKYDfH0BqjkM1wM/sdr8PJZEsovTfqiTC5ZbUyXH/Laa5tPDM8W+Icxlv+Wc\nsDUMjvf8xGzQVTQoXaSfoE7pkhMtpicJ1IhJ76PuWICdF+k5SN8RSGsW3ZwQAmxr\nwgd9XTgOGjOoHcUN6elQn+zz5f9hwD22Rtk7gnumqC6IV60NsipiNP0MvxO+Ng0c\nEfFgUr5ZjLarT+jJQzYBKEz4xPi7uDdi3fwL/HTQFQ==\n=3Gh0\n-----END PGP SIGNATURE-----",
        "payload": "tree 4fede1f3b0202ae2591bc0ce0d1efd3c42883274\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nparent a570098021be6a7b9f4589300ea655ae4633628e\nauthor MarcoFalke <falke.marco@gmail.com> 1518274560 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518274554 -0500\n\nunivalue: Bump subtree\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      },
      {
        "sha": "a570098021be6a7b9f4589300ea655ae4633628e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a570098021be6a7b9f4589300ea655ae4633628e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a570098021be6a7b9f4589300ea655ae4633628e"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c15b2f051eb86f9def682b9cd2c45c22c0697b45",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "patch": "@@ -130,6 +130,10 @@ class UniValue {\n         UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n+    bool pushKV(const std::string& key, bool val_) {\n+        UniValue tmpVal((bool)val_);\n+        return pushKV(key, tmpVal);\n+    }\n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);"
      },
      {
        "sha": "70ccc0d08a5ef229bfb1eb1d08e552b62587a259",
        "filename": "src/univalue/test/object.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "patch": "@@ -261,14 +261,20 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     strKey = \"temperature\";\n     BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n \n+    strKey = \"moon\";\n+    BOOST_CHECK(obj.pushKV(strKey, true));\n+\n+    strKey = \"spoon\";\n+    BOOST_CHECK(obj.pushKV(strKey, false));\n+\n     UniValue obj2(UniValue::VOBJ);\n     BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n     BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n \n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.size(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 11);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -277,6 +283,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n     BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n     BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"moon\"].getValStr(), \"1\");\n+    BOOST_CHECK_EQUAL(obj[\"spoon\"].getValStr(), \"\");\n     BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n     BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n \n@@ -289,6 +297,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.exists(\"time\"));\n     BOOST_CHECK(obj.exists(\"calories\"));\n     BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"moon\"));\n+    BOOST_CHECK(obj.exists(\"spoon\"));\n     BOOST_CHECK(obj.exists(\"cat1\"));\n     BOOST_CHECK(obj.exists(\"cat2\"));\n \n@@ -302,6 +312,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n     objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"moon\"] = UniValue::VBOOL;\n+    objTypes[\"spoon\"] = UniValue::VBOOL;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      }
    ]
  },
  {
    "sha": "91986ed206fa830e5985560c6895b0d30b375054",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTk4NmVkMjA2ZmE4MzBlNTk4NTU2MGM2ODk1YjBkMzBiMzc1MDU0",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T18:04:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T15:05:07Z"
      },
      "message": "scripted-diff: Use UniValue.pushKV instead of push_back(Pair())\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l \"push_back(Pair\" | xargs sed -i \"s/push_back(Pair(\\(.*\\)));/pushKV(\\1);/g\"\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "4422cee35e5ae916fd72d6dc5bff510e17e5814d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4422cee35e5ae916fd72d6dc5bff510e17e5814d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91986ed206fa830e5985560c6895b0d30b375054",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91986ed206fa830e5985560c6895b0d30b375054",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91986ed206fa830e5985560c6895b0d30b375054",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91986ed206fa830e5985560c6895b0d30b375054/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1388edb17fc9eca097d93542f8d5db5aa0cf17"
      }
    ],
    "stats": {
      "total": 820,
      "additions": 410,
      "deletions": 410
    },
    "files": [
      {
        "sha": "eeeb3f51416744077344302d6a04121e6863ae4a",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -540,23 +540,23 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n-        objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n-        objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);\n         for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n-            utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n-            utxo.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+            utxo.pushKV(\"height\", (int32_t)coin.nHeight);\n+            utxo.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n \n             // include the script in a json output\n             UniValue o(UniValue::VOBJ);\n             ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-            utxo.push_back(Pair(\"scriptPubKey\", o));\n+            utxo.pushKV(\"scriptPubKey\", o);\n             utxos.push_back(utxo);\n         }\n-        objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n+        objGetUTXOResponse.pushKV(\"utxos\", utxos);\n \n         // return json string\n         std::string strJSON = objGetUTXOResponse.write() + \"\\n\";"
      },
      {
        "sha": "189da6ae482819397fa455eaabb85d5f78e3fdf4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 122,
        "deletions": 122,
        "changes": 244,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -88,48 +88,48 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", blockindex->nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion)));\n-    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n-    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", blockindex->nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion));\n+    result.pushKV(\"merkleroot\", blockindex->hashMerkleRoot.GetHex());\n+    result.pushKV(\"time\", (int64_t)blockindex->nTime);\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)blockindex->nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", blockindex->nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", block.nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n-    result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n+    result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n+    result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", block.nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n+    result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n     UniValue txs(UniValue::VARR);\n     for(const auto& tx : block.vtx)\n     {\n@@ -142,19 +142,19 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n         else\n             txs.push_back(tx->GetHash().GetHex());\n     }\n-    result.push_back(Pair(\"tx\", txs));\n-    result.push_back(Pair(\"time\", block.GetBlockTime()));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"tx\", txs);\n+    result.pushKV(\"time\", block.GetBlockTime());\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)block.nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n@@ -235,8 +235,8 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -277,8 +277,8 @@ UniValue waitforblock(const JSONRPCRequest& request)\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -319,8 +319,8 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -379,18 +379,18 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n {\n     AssertLockHeld(mempool.cs);\n \n-    info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n-    info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n-    info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n-    info.push_back(Pair(\"time\", e.GetTime()));\n-    info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-    info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n-    info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n-    info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));\n-    info.push_back(Pair(\"ancestorcount\", e.GetCountWithAncestors()));\n-    info.push_back(Pair(\"ancestorsize\", e.GetSizeWithAncestors()));\n-    info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n-    info.push_back(Pair(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString()));\n+    info.pushKV(\"size\", (int)e.GetTxSize());\n+    info.pushKV(\"fee\", ValueFromAmount(e.GetFee()));\n+    info.pushKV(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee()));\n+    info.pushKV(\"time\", e.GetTime());\n+    info.pushKV(\"height\", (int)e.GetHeight());\n+    info.pushKV(\"descendantcount\", e.GetCountWithDescendants());\n+    info.pushKV(\"descendantsize\", e.GetSizeWithDescendants());\n+    info.pushKV(\"descendantfees\", e.GetModFeesWithDescendants());\n+    info.pushKV(\"ancestorcount\", e.GetCountWithAncestors());\n+    info.pushKV(\"ancestorsize\", e.GetSizeWithAncestors());\n+    info.pushKV(\"ancestorfees\", e.GetModFeesWithAncestors());\n+    info.pushKV(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString());\n     const CTransaction& tx = e.GetTx();\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n@@ -405,7 +405,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n         depends.push_back(dep);\n     }\n \n-    info.push_back(Pair(\"depends\", depends));\n+    info.pushKV(\"depends\", depends);\n }\n \n UniValue mempoolToJSON(bool fVerbose)\n@@ -419,7 +419,7 @@ UniValue mempoolToJSON(bool fVerbose)\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(hash.ToString(), info));\n+            o.pushKV(hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -526,7 +526,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -590,7 +590,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -952,14 +952,14 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     CCoinsStats stats;\n     FlushStateToDisk();\n     if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n-        ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n-        ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n-        ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n-        ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n-        ret.push_back(Pair(\"bogosize\", (int64_t)stats.nBogoSize));\n-        ret.push_back(Pair(\"hash_serialized_2\", stats.hashSerialized.GetHex()));\n-        ret.push_back(Pair(\"disk_size\", stats.nDiskSize));\n-        ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n+        ret.pushKV(\"height\", (int64_t)stats.nHeight);\n+        ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n+        ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+        ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n+        ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n+        ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());\n+        ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n     }\n@@ -1031,17 +1031,17 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n-    ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n+    ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n-        ret.push_back(Pair(\"confirmations\", 0));\n+        ret.pushKV(\"confirmations\", 0);\n     } else {\n-        ret.push_back(Pair(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1)));\n+        ret.pushKV(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1));\n     }\n-    ret.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+    ret.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n     UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-    ret.push_back(Pair(\"scriptPubKey\", o));\n-    ret.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+    ret.pushKV(\"scriptPubKey\", o);\n+    ret.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n \n     return ret;\n }\n@@ -1091,16 +1091,16 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n             activated = pindex->nHeight >= consensusParams.BIP65Height;\n             break;\n     }\n-    rv.push_back(Pair(\"status\", activated));\n+    rv.pushKV(\"status\", activated);\n     return rv;\n }\n \n static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"id\", name));\n-    rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n+    rv.pushKV(\"id\", name);\n+    rv.pushKV(\"version\", version);\n+    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n     return rv;\n }\n \n@@ -1109,29 +1109,29 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     UniValue rv(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n-    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n-    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n-    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n-    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    case THRESHOLD_DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n+    case THRESHOLD_STARTED: rv.pushKV(\"status\", \"started\"); break;\n+    case THRESHOLD_LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n+    case THRESHOLD_ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n+    case THRESHOLD_FAILED: rv.pushKV(\"status\", \"failed\"); break;\n     }\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n-        rv.push_back(Pair(\"bit\", consensusParams.vDeployments[id].bit));\n+        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n-    rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n-    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n+    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n         BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n-        statsUV.push_back(Pair(\"period\", statsStruct.period));\n-        statsUV.push_back(Pair(\"threshold\", statsStruct.threshold));\n-        statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n-        statsUV.push_back(Pair(\"count\", statsStruct.count));\n-        statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n-        rv.push_back(Pair(\"statistics\", statsUV));\n+        statsUV.pushKV(\"period\", statsStruct.period);\n+        statsUV.pushKV(\"threshold\", statsStruct.threshold);\n+        statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n+        statsUV.pushKV(\"count\", statsStruct.count);\n+        statsUV.pushKV(\"possible\", statsStruct.possible);\n+        rv.pushKV(\"statistics\", statsUV);\n     }\n     return rv;\n }\n@@ -1142,7 +1142,7 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params&\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id)));\n+        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1202,31 +1202,31 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n-    obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n-    obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n-    obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n-    obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n-    obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n-    obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n-    obj.push_back(Pair(\"initialblockdownload\",  IsInitialBlockDownload()));\n-    obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n-    obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n-    obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    obj.pushKV(\"chain\",                 Params().NetworkIDString());\n+    obj.pushKV(\"blocks\",                (int)chainActive.Height());\n+    obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n+    obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n+    obj.pushKV(\"difficulty\",            (double)GetDifficulty());\n+    obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());\n+    obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip()));\n+    obj.pushKV(\"initialblockdownload\",  IsInitialBlockDownload());\n+    obj.pushKV(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex());\n+    obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n+    obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n         CBlockIndex* block = chainActive.Tip();\n         assert(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n             block = block->pprev;\n         }\n \n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+        obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n         bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n-        obj.push_back(Pair(\"automatic_pruning\",  automatic_pruning));\n+        obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n-            obj.push_back(Pair(\"prune_target_size\",  nPruneTarget));\n+            obj.pushKV(\"prune_target_size\",  nPruneTarget);\n         }\n     }\n \n@@ -1240,10 +1240,10 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n         BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n     }\n-    obj.push_back(Pair(\"softforks\",             softforks));\n-    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n+    obj.pushKV(\"softforks\",             softforks);\n+    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n-    obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -1331,11 +1331,11 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"height\", block->nHeight));\n-        obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n+        obj.pushKV(\"height\", block->nHeight);\n+        obj.pushKV(\"hash\", block->phashBlock->GetHex());\n \n         const int branchLen = block->nHeight - chainActive.FindFork(block)->nHeight;\n-        obj.push_back(Pair(\"branchlen\", branchLen));\n+        obj.pushKV(\"branchlen\", branchLen);\n \n         std::string status;\n         if (chainActive.Contains(block)) {\n@@ -1357,7 +1357,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n             // No clue.\n             status = \"unknown\";\n         }\n-        obj.push_back(Pair(\"status\", status));\n+        obj.pushKV(\"status\", status);\n \n         res.push_back(obj);\n     }\n@@ -1368,13 +1368,13 @@ UniValue getchaintips(const JSONRPCRequest& request)\n UniValue mempoolInfoToJSON()\n {\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    ret.pushKV(\"size\", (int64_t) mempool.size());\n+    ret.pushKV(\"bytes\", (int64_t) mempool.GetTotalTxSize());\n+    ret.pushKV(\"usage\", (int64_t) mempool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK())));\n-    ret.push_back(Pair(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n+    ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n     return ret;\n }\n@@ -1581,15 +1581,15 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     int nTxDiff = pindex->nChainTx - pindexPast->nChainTx;\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n-    ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n-    ret.push_back(Pair(\"window_final_block_hash\", pindex->GetBlockHash().GetHex()));\n-    ret.push_back(Pair(\"window_block_count\", blockcount));\n+    ret.pushKV(\"time\", (int64_t)pindex->nTime);\n+    ret.pushKV(\"txcount\", (int64_t)pindex->nChainTx);\n+    ret.pushKV(\"window_final_block_hash\", pindex->GetBlockHash().GetHex());\n+    ret.pushKV(\"window_block_count\", blockcount);\n     if (blockcount > 0) {\n-        ret.push_back(Pair(\"window_tx_count\", nTxDiff));\n-        ret.push_back(Pair(\"window_interval\", nTimeDiff));\n+        ret.pushKV(\"window_tx_count\", nTxDiff);\n+        ret.pushKV(\"window_interval\", nTimeDiff);\n         if (nTimeDiff > 0) {\n-            ret.push_back(Pair(\"txrate\", ((double)nTxDiff) / nTimeDiff));\n+            ret.pushKV(\"txrate\", ((double)nTxDiff) / nTimeDiff);\n         }\n     }\n "
      },
      {
        "sha": "dd74095b62dfe894762d463145dd54efd941c3a5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -211,14 +211,14 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n-    obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n-    obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n-    obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"blocks\",           (int)chainActive.Height());\n+    obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n+    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty());\n+    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n+    obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n+    obj.pushKV(\"chain\",            Params().NetworkIDString());\n+    obj.pushKV(\"warnings\",         GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -550,33 +550,33 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         UniValue entry(UniValue::VOBJ);\n \n-        entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n-        entry.push_back(Pair(\"txid\", txHash.GetHex()));\n-        entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n+        entry.pushKV(\"data\", EncodeHexTx(tx));\n+        entry.pushKV(\"txid\", txHash.GetHex());\n+        entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n \n         UniValue deps(UniValue::VARR);\n         for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);\n         }\n-        entry.push_back(Pair(\"depends\", deps));\n+        entry.pushKV(\"depends\", deps);\n \n         int index_in_template = i - 1;\n-        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n+        entry.pushKV(\"fee\", pblocktemplate->vTxFees[index_in_template]);\n         int64_t nTxSigOps = pblocktemplate->vTxSigOpsCost[index_in_template];\n         if (fPreSegWit) {\n             assert(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n             nTxSigOps /= WITNESS_SCALE_FACTOR;\n         }\n-        entry.push_back(Pair(\"sigops\", nTxSigOps));\n-        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n+        entry.pushKV(\"sigops\", nTxSigOps);\n+        entry.pushKV(\"weight\", GetTransactionWeight(tx));\n \n         transactions.push_back(entry);\n     }\n \n     UniValue aux(UniValue::VOBJ);\n-    aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+    aux.pushKV(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end()));\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n@@ -586,7 +586,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     aMutable.push_back(\"prevblock\");\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"capabilities\", aCaps));\n+    result.pushKV(\"capabilities\", aCaps);\n \n     UniValue aRules(UniValue::VARR);\n     UniValue vbavailable(UniValue::VOBJ);\n@@ -605,7 +605,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             case THRESHOLD_STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                vbavailable.push_back(Pair(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit));\n+                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n@@ -630,10 +630,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             }\n         }\n     }\n-    result.push_back(Pair(\"version\", pblock->nVersion));\n-    result.push_back(Pair(\"rules\", aRules));\n-    result.push_back(Pair(\"vbavailable\", vbavailable));\n-    result.push_back(Pair(\"vbrequired\", int(0)));\n+    result.pushKV(\"version\", pblock->nVersion);\n+    result.pushKV(\"rules\", aRules);\n+    result.pushKV(\"vbavailable\", vbavailable);\n+    result.pushKV(\"vbrequired\", int(0));\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n@@ -643,15 +643,15 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         aMutable.push_back(\"version/force\");\n     }\n \n-    result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n-    result.push_back(Pair(\"transactions\", transactions));\n-    result.push_back(Pair(\"coinbaseaux\", aux));\n-    result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue));\n-    result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n-    result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-    result.push_back(Pair(\"mutable\", aMutable));\n-    result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+    result.pushKV(\"previousblockhash\", pblock->hashPrevBlock.GetHex());\n+    result.pushKV(\"transactions\", transactions);\n+    result.pushKV(\"coinbaseaux\", aux);\n+    result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n+    result.pushKV(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast));\n+    result.pushKV(\"target\", hashTarget.GetHex());\n+    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    result.pushKV(\"mutable\", aMutable);\n+    result.pushKV(\"noncerange\", \"00000000ffffffff\");\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n@@ -660,17 +660,17 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n-    result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    result.pushKV(\"sigoplimit\", nSigOpLimit);\n+    result.pushKV(\"sizelimit\", nSizeLimit);\n     if (!fPreSegWit) {\n-        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+        result.pushKV(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT);\n     }\n-    result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n-    result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n+    result.pushKV(\"curtime\", pblock->GetBlockTime());\n+    result.pushKV(\"bits\", strprintf(\"%08x\", pblock->nBits));\n+    result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n \n     if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n-        result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n+        result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n     }\n \n     return result;\n@@ -823,12 +823,12 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n-        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n-        result.push_back(Pair(\"errors\", errors));\n+        result.pushKV(\"errors\", errors);\n     }\n-    result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n+    result.pushKV(\"blocks\", feeCalc.returnedTarget);\n     return result;\n }\n \n@@ -899,37 +899,37 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n-        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        passbucket.pushKV(\"startrange\", round(buckets.pass.start));\n+        passbucket.pushKV(\"endrange\", round(buckets.pass.end));\n+        passbucket.pushKV(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0);\n+        passbucket.pushKV(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0);\n+        passbucket.pushKV(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0);\n+        passbucket.pushKV(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0);\n         UniValue failbucket(UniValue::VOBJ);\n-        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+        failbucket.pushKV(\"startrange\", round(buckets.fail.start));\n+        failbucket.pushKV(\"endrange\", round(buckets.fail.end));\n+        failbucket.pushKV(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0);\n+        failbucket.pushKV(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0);\n+        failbucket.pushKV(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0);\n+        failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n \n         // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n         if (feeRate != CFeeRate(0)) {\n-            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"pass\", passbucket);\n             // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n-            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+            if (buckets.fail.start != -1) horizon_result.pushKV(\"fail\", failbucket);\n         } else {\n             // Output only information that is still meaningful in the event of error\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"fail\", failbucket);\n             errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n-            horizon_result.push_back(Pair(\"errors\",errors));\n+            horizon_result.pushKV(\"errors\",errors);\n         }\n-        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+        result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n     }\n     return result;\n }"
      },
      {
        "sha": "3f89996e6119020f47d815cc1d9b253035411d43",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -86,20 +86,20 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n         }\n         return obj;\n     }\n \n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             ProcessSubScript(subscript, obj, true);\n         }\n@@ -110,12 +110,12 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n         }\n         return obj;\n     }\n@@ -124,10 +124,10 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n@@ -141,9 +141,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n         return obj;\n     }\n };\n@@ -206,23 +206,23 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"isvalid\", isValid));\n+    ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n         std::string currentAddress = EncodeDestination(dest);\n-        ret.push_back(Pair(\"address\", currentAddress));\n+        ret.pushKV(\"address\", currentAddress);\n \n         CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n+        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n+        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }\n         if (pwallet) {\n             const CKeyMetadata* meta = nullptr;\n@@ -240,10 +240,10 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 }\n             }\n             if (meta) {\n-                ret.push_back(Pair(\"timestamp\", meta->nCreateTime));\n+                ret.pushKV(\"timestamp\", meta->nCreateTime);\n                 if (!meta->hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", meta->hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex()));\n+                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n                 }\n             }\n         }\n@@ -304,8 +304,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     CScriptID innerID(inner);\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"address\", EncodeDestination(innerID)));\n-    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n+    result.pushKV(\"address\", EncodeDestination(innerID));\n+    result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n \n     return result;\n }\n@@ -439,12 +439,12 @@ static UniValue RPCLockedMemoryInfo()\n {\n     LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"used\", uint64_t(stats.used)));\n-    obj.push_back(Pair(\"free\", uint64_t(stats.free)));\n-    obj.push_back(Pair(\"total\", uint64_t(stats.total)));\n-    obj.push_back(Pair(\"locked\", uint64_t(stats.locked)));\n-    obj.push_back(Pair(\"chunks_used\", uint64_t(stats.chunks_used)));\n-    obj.push_back(Pair(\"chunks_free\", uint64_t(stats.chunks_free)));\n+    obj.pushKV(\"used\", uint64_t(stats.used));\n+    obj.pushKV(\"free\", uint64_t(stats.free));\n+    obj.pushKV(\"total\", uint64_t(stats.total));\n+    obj.pushKV(\"locked\", uint64_t(stats.locked));\n+    obj.pushKV(\"chunks_used\", uint64_t(stats.chunks_used));\n+    obj.pushKV(\"chunks_free\", uint64_t(stats.chunks_free));\n     return obj;\n }\n \n@@ -501,7 +501,7 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+        obj.pushKV(\"locked\", RPCLockedMemoryInfo());\n         return obj;\n     } else if (mode == \"mallocinfo\") {\n #ifdef HAVE_MALLOC_INFO"
      },
      {
        "sha": "7a0225ff0de1f91f8b0f0858e4914c1695994892",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 69,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -130,59 +130,59 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n+        obj.pushKV(\"id\", stats.nodeid);\n+        obj.pushKV(\"addr\", stats.addrName);\n         if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+            obj.pushKV(\"addrlocal\", stats.addrLocal);\n         if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+            obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n+        obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n+        obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n+        obj.pushKV(\"lastsend\", stats.nLastSend);\n+        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n+        obj.pushKV(\"bytessent\", stats.nSendBytes);\n+        obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n+        obj.pushKV(\"conntime\", stats.nTimeConnected);\n+        obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n         if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+            obj.pushKV(\"pingtime\", stats.dPingTime);\n         if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n+            obj.pushKV(\"minping\", stats.dMinPing);\n         if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n+            obj.pushKV(\"pingwait\", stats.dPingWait);\n+        obj.pushKV(\"version\", stats.nVersion);\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n         // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+        obj.pushKV(\"subver\", stats.cleanSubVer);\n+        obj.pushKV(\"inbound\", stats.fInbound);\n+        obj.pushKV(\"addnode\", stats.m_manual_connection);\n+        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n         if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+            obj.pushKV(\"banscore\", statestats.nMisbehavior);\n+            obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n+            obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);\n             for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n-            obj.push_back(Pair(\"inflight\", heights));\n+            obj.pushKV(\"inflight\", heights);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        obj.pushKV(\"whitelisted\", stats.fWhitelisted);\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+                sendPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+        obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+                recvPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+        obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n \n         ret.push_back(obj);\n     }\n@@ -331,16 +331,16 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n     for (const AddedNodeInfo& info : vInfo) {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"addednode\", info.strAddedNode));\n-        obj.push_back(Pair(\"connected\", info.fConnected));\n+        obj.pushKV(\"addednode\", info.strAddedNode);\n+        obj.pushKV(\"connected\", info.fConnected);\n         UniValue addresses(UniValue::VARR);\n         if (info.fConnected) {\n             UniValue address(UniValue::VOBJ);\n-            address.push_back(Pair(\"address\", info.resolvedAddress.ToString()));\n-            address.push_back(Pair(\"connected\", info.fInbound ? \"inbound\" : \"outbound\"));\n+            address.pushKV(\"address\", info.resolvedAddress.ToString());\n+            address.pushKV(\"connected\", info.fInbound ? \"inbound\" : \"outbound\");\n             addresses.push_back(address);\n         }\n-        obj.push_back(Pair(\"addresses\", addresses));\n+        obj.pushKV(\"addresses\", addresses);\n         ret.push_back(obj);\n     }\n \n@@ -377,18 +377,18 @@ UniValue getnettotals(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"totalbytesrecv\", g_connman->GetTotalBytesRecv()));\n-    obj.push_back(Pair(\"totalbytessent\", g_connman->GetTotalBytesSent()));\n-    obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n+    obj.pushKV(\"totalbytesrecv\", g_connman->GetTotalBytesRecv());\n+    obj.pushKV(\"totalbytessent\", g_connman->GetTotalBytesSent());\n+    obj.pushKV(\"timemillis\", GetTimeMillis());\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.push_back(Pair(\"timeframe\", g_connman->GetMaxOutboundTimeframe()));\n-    outboundLimit.push_back(Pair(\"target\", g_connman->GetMaxOutboundTarget()));\n-    outboundLimit.push_back(Pair(\"target_reached\", g_connman->OutboundTargetReached(false)));\n-    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true)));\n-    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft()));\n-    outboundLimit.push_back(Pair(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle()));\n-    obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n+    outboundLimit.pushKV(\"timeframe\", g_connman->GetMaxOutboundTimeframe());\n+    outboundLimit.pushKV(\"target\", g_connman->GetMaxOutboundTarget());\n+    outboundLimit.pushKV(\"target_reached\", g_connman->OutboundTargetReached(false));\n+    outboundLimit.pushKV(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true));\n+    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft());\n+    outboundLimit.pushKV(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle());\n+    obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n }\n \n@@ -403,11 +403,11 @@ static UniValue GetNetworksInfo()\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);\n-        obj.push_back(Pair(\"name\", GetNetworkName(network)));\n-        obj.push_back(Pair(\"limited\", IsLimited(network)));\n-        obj.push_back(Pair(\"reachable\", IsReachable(network)));\n-        obj.push_back(Pair(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string()));\n-        obj.push_back(Pair(\"proxy_randomize_credentials\", proxy.randomize_credentials));\n+        obj.pushKV(\"name\", GetNetworkName(network));\n+        obj.pushKV(\"limited\", IsLimited(network));\n+        obj.pushKV(\"reachable\", IsReachable(network));\n+        obj.pushKV(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string());\n+        obj.pushKV(\"proxy_randomize_credentials\", proxy.randomize_credentials);\n         networks.push_back(obj);\n     }\n     return networks;\n@@ -458,34 +458,34 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",    strSubVersion));\n-    obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n+    obj.pushKV(\"version\",       CLIENT_VERSION);\n+    obj.pushKV(\"subversion\",    strSubVersion);\n+    obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n     if(g_connman)\n-        obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n-    obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n-    obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n+        obj.pushKV(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices()));\n+    obj.pushKV(\"localrelay\",     fRelayTxes);\n+    obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (g_connman) {\n-        obj.push_back(Pair(\"networkactive\", g_connman->GetNetworkActive()));\n-        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n+        obj.pushKV(\"networkactive\", g_connman->GetNetworkActive());\n+        obj.pushKV(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n-    obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n+    obj.pushKV(\"networks\",      GetNetworksInfo());\n+    obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n+    obj.pushKV(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK()));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n         for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n-            rec.push_back(Pair(\"address\", item.first.ToString()));\n-            rec.push_back(Pair(\"port\", item.second.nPort));\n-            rec.push_back(Pair(\"score\", item.second.nScore));\n+            rec.pushKV(\"address\", item.first.ToString());\n+            rec.pushKV(\"port\", item.second.nPort);\n+            rec.pushKV(\"score\", item.second.nScore);\n             localAddresses.push_back(rec);\n         }\n     }\n-    obj.push_back(Pair(\"localaddresses\", localAddresses));\n-    obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"localaddresses\", localAddresses);\n+    obj.pushKV(\"warnings\",       GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -575,10 +575,10 @@ UniValue listbanned(const JSONRPCRequest& request)\n     {\n         const CBanEntry& banEntry = entry.second;\n         UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", entry.first.ToString()));\n-        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n-        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n-        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+        rec.pushKV(\"address\", entry.first.ToString());\n+        rec.pushKV(\"banned_until\", banEntry.nBanUntil);\n+        rec.pushKV(\"ban_created\", banEntry.nCreateTime);\n+        rec.pushKV(\"ban_reason\", banEntry.banReasonToString());\n \n         bannedAddresses.push_back(rec);\n     }"
      },
      {
        "sha": "0635b757c63c5b0bcc4110417fbea2ea5b8f14ea",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -26,21 +26,21 @@\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n-    request.push_back(Pair(\"method\", strMethod));\n-    request.push_back(Pair(\"params\", params));\n-    request.push_back(Pair(\"id\", id));\n+    request.pushKV(\"method\", strMethod);\n+    request.pushKV(\"params\", params);\n+    request.pushKV(\"id\", id);\n     return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply(UniValue::VOBJ);\n     if (!error.isNull())\n-        reply.push_back(Pair(\"result\", NullUniValue));\n+        reply.pushKV(\"result\", NullUniValue);\n     else\n-        reply.push_back(Pair(\"result\", result));\n-    reply.push_back(Pair(\"error\", error));\n-    reply.push_back(Pair(\"id\", id));\n+        reply.pushKV(\"result\", result);\n+    reply.pushKV(\"error\", error);\n+    reply.pushKV(\"id\", id);\n     return reply;\n }\n \n@@ -53,8 +53,8 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message)\n {\n     UniValue error(UniValue::VOBJ);\n-    error.push_back(Pair(\"code\", code));\n-    error.push_back(Pair(\"message\", message));\n+    error.pushKV(\"code\", code);\n+    error.pushKV(\"message\", message);\n     return error;\n }\n "
      },
      {
        "sha": "fb70f9d5963c11b4593d0e27a1ae669c55798cf0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -47,17 +47,17 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n-        entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n+        entry.pushKV(\"blockhash\", hashBlock.GetHex());\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n             CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {\n-                entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n-                entry.push_back(Pair(\"time\", pindex->GetBlockTime()));\n-                entry.push_back(Pair(\"blocktime\", pindex->GetBlockTime()));\n+                entry.pushKV(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight);\n+                entry.pushKV(\"time\", pindex->GetBlockTime());\n+                entry.pushKV(\"blocktime\", pindex->GetBlockTime());\n             }\n             else\n-                entry.push_back(Pair(\"confirmations\", 0));\n+                entry.pushKV(\"confirmations\", 0);\n         }\n     }\n }\n@@ -190,7 +190,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    if (blockindex) result.push_back(Pair(\"in_active_chain\", in_active_chain));\n+    if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n     TxToJSON(*tx, hash_block, result);\n     return result;\n }\n@@ -562,7 +562,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n     if (type.isStr() && type.get_str() != \"scripthash\") {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n-        r.push_back(Pair(\"p2sh\", EncodeDestination(CScriptID(script))));\n+        r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n     }\n \n     return r;\n@@ -572,16 +572,16 @@ UniValue decodescript(const JSONRPCRequest& request)\n static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n {\n     UniValue entry(UniValue::VOBJ);\n-    entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n-    entry.push_back(Pair(\"vout\", (uint64_t)txin.prevout.n));\n+    entry.pushKV(\"txid\", txin.prevout.hash.ToString());\n+    entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n     UniValue witness(UniValue::VARR);\n     for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n         witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n     }\n-    entry.push_back(Pair(\"witness\", witness));\n-    entry.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n-    entry.push_back(Pair(\"sequence\", (uint64_t)txin.nSequence));\n-    entry.push_back(Pair(\"error\", strMessage));\n+    entry.pushKV(\"witness\", witness);\n+    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+    entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n+    entry.pushKV(\"error\", strMessage);\n     vErrorsRet.push_back(entry);\n }\n \n@@ -916,10 +916,10 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     bool fComplete = vErrors.empty();\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(mtx)));\n-    result.push_back(Pair(\"complete\", fComplete));\n+    result.pushKV(\"hex\", EncodeHexTx(mtx));\n+    result.pushKV(\"complete\", fComplete);\n     if (!vErrors.empty()) {\n-        result.push_back(Pair(\"errors\", vErrors));\n+        result.pushKV(\"errors\", vErrors);\n     }\n \n     return result;"
      },
      {
        "sha": "741ea253406dbe42342442346d288f942475ee06",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -790,7 +790,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.push_back(Pair(\"filename\", filepath.string()));\n+    reply.pushKV(\"filename\", filepath.string());\n \n     return reply;\n }"
      },
      {
        "sha": "b466cf1a81daaf4c6de7005b74709852638c7bff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 87,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -86,25 +86,25 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n-    entry.push_back(Pair(\"confirmations\", confirms));\n+    entry.pushKV(\"confirmations\", confirms);\n     if (wtx.IsCoinBase())\n-        entry.push_back(Pair(\"generated\", true));\n+        entry.pushKV(\"generated\", true);\n     if (confirms > 0)\n     {\n-        entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n-        entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+        entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n+        entry.pushKV(\"blockindex\", wtx.nIndex);\n+        entry.pushKV(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime());\n     } else {\n-        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n+        entry.pushKV(\"trusted\", wtx.IsTrusted());\n     }\n     uint256 hash = wtx.GetHash();\n-    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    entry.pushKV(\"txid\", hash.GetHex());\n     UniValue conflicts(UniValue::VARR);\n     for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n-    entry.push_back(Pair(\"walletconflicts\", conflicts));\n-    entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n-    entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n+    entry.pushKV(\"walletconflicts\", conflicts);\n+    entry.pushKV(\"time\", wtx.GetTxTime());\n+    entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n@@ -116,10 +116,10 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         else if (rbfState == RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125)\n             rbfStatus = \"yes\";\n     }\n-    entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n+    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n     for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n-        entry.push_back(Pair(item.first, item.second));\n+        entry.pushKV(item.first, item.second);\n }\n \n std::string AccountFromValue(const UniValue& value)\n@@ -1463,13 +1463,13 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         {\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"address\",       EncodeDestination(dest)));\n-            obj.push_back(Pair(\"account\",       strAccount));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"account\",       strAccount);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             if (!fByAccounts)\n-                obj.push_back(Pair(\"label\", strAccount));\n+                obj.pushKV(\"label\", strAccount);\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n@@ -1478,7 +1478,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n                     transactions.push_back(_item.GetHex());\n                 }\n             }\n-            obj.push_back(Pair(\"txids\", transactions));\n+            obj.pushKV(\"txids\", transactions);\n             ret.push_back(obj);\n         }\n     }\n@@ -1491,10 +1491,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             int nConf = entry.second.nConf;\n             UniValue obj(UniValue::VOBJ);\n             if (entry.second.fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       entry.first));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"account\",       entry.first);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             ret.push_back(obj);\n         }\n     }\n@@ -1600,7 +1600,7 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n {\n     if (IsValidDestination(dest)) {\n-        entry.push_back(Pair(\"address\", EncodeDestination(dest)));\n+        entry.pushKV(\"address\", EncodeDestination(dest));\n     }\n }\n \n@@ -1634,20 +1634,20 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n         {\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n-                entry.push_back(Pair(\"involvesWatchonly\", true));\n+                entry.pushKV(\"involvesWatchonly\", true);\n             }\n-            entry.push_back(Pair(\"account\", strSentAccount));\n+            entry.pushKV(\"account\", strSentAccount);\n             MaybePushAddress(entry, s.destination);\n-            entry.push_back(Pair(\"category\", \"send\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n             if (pwallet->mapAddressBook.count(s.destination)) {\n-                entry.push_back(Pair(\"label\", pwallet->mapAddressBook[s.destination].name));\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n             }\n-            entry.push_back(Pair(\"vout\", s.vout));\n-            entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n                 WalletTxToJSON(wtx, entry);\n-            entry.push_back(Pair(\"abandoned\", wtx.isAbandoned()));\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n     }\n@@ -1665,28 +1665,28 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             {\n                 UniValue entry(UniValue::VOBJ);\n                 if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n-                    entry.push_back(Pair(\"involvesWatchonly\", true));\n+                    entry.pushKV(\"involvesWatchonly\", true);\n                 }\n-                entry.push_back(Pair(\"account\", account));\n+                entry.pushKV(\"account\", account);\n                 MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n                 {\n                     if (wtx.GetDepthInMainChain() < 1)\n-                        entry.push_back(Pair(\"category\", \"orphan\"));\n+                        entry.pushKV(\"category\", \"orphan\");\n                     else if (wtx.GetBlocksToMaturity() > 0)\n-                        entry.push_back(Pair(\"category\", \"immature\"));\n+                        entry.pushKV(\"category\", \"immature\");\n                     else\n-                        entry.push_back(Pair(\"category\", \"generate\"));\n+                        entry.pushKV(\"category\", \"generate\");\n                 }\n                 else\n                 {\n-                    entry.push_back(Pair(\"category\", \"receive\"));\n+                    entry.pushKV(\"category\", \"receive\");\n                 }\n-                entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n+                entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n                 if (pwallet->mapAddressBook.count(r.destination)) {\n-                    entry.push_back(Pair(\"label\", account));\n+                    entry.pushKV(\"label\", account);\n                 }\n-                entry.push_back(Pair(\"vout\", r.vout));\n+                entry.pushKV(\"vout\", r.vout);\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n                 ret.push_back(entry);\n@@ -1702,12 +1702,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n     if (fAllAccounts || acentry.strAccount == strAccount)\n     {\n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"account\", acentry.strAccount));\n-        entry.push_back(Pair(\"category\", \"move\"));\n-        entry.push_back(Pair(\"time\", acentry.nTime));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n-        entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n-        entry.push_back(Pair(\"comment\", acentry.strComment));\n+        entry.pushKV(\"account\", acentry.strAccount);\n+        entry.pushKV(\"category\", \"move\");\n+        entry.pushKV(\"time\", acentry.nTime);\n+        entry.pushKV(\"amount\", ValueFromAmount(acentry.nCreditDebit));\n+        entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n+        entry.pushKV(\"comment\", acentry.strComment);\n         ret.push_back(entry);\n     }\n }\n@@ -1934,7 +1934,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n     for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n-        ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n+        ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n     }\n     return ret;\n }\n@@ -2074,9 +2074,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"transactions\", transactions));\n-    if (include_removed) ret.push_back(Pair(\"removed\", removed));\n-    ret.push_back(Pair(\"lastblock\", lastblock.GetHex()));\n+    ret.pushKV(\"transactions\", transactions);\n+    if (include_removed) ret.pushKV(\"removed\", removed);\n+    ret.pushKV(\"lastblock\", lastblock.GetHex());\n \n     return ret;\n }\n@@ -2161,18 +2161,18 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n \n-    entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+    entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n     if (wtx.IsFromMe(filter))\n-        entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+        entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n-    entry.push_back(Pair(\"details\", details));\n+    entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n-    entry.push_back(Pair(\"hex\", strHex));\n+    entry.pushKV(\"hex\", strHex);\n \n     return entry;\n }\n@@ -2702,8 +2702,8 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n     for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n-        o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n-        o.push_back(Pair(\"vout\", (int)outpt.n));\n+        o.pushKV(\"txid\", outpt.hash.GetHex());\n+        o.pushKV(\"vout\", (int)outpt.n);\n         ret.push_back(o);\n     }\n \n@@ -2781,24 +2781,24 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n-    obj.push_back(Pair(\"walletname\", pwallet->GetName()));\n-    obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n-    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance())));\n-    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance())));\n-    obj.push_back(Pair(\"txcount\",       (int)pwallet->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\", (int64_t)kpExternalSize));\n+    obj.pushKV(\"walletname\", pwallet->GetName());\n+    obj.pushKV(\"walletversion\", pwallet->GetVersion());\n+    obj.pushKV(\"balance\",       ValueFromAmount(pwallet->GetBalance()));\n+    obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance()));\n+    obj.pushKV(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance()));\n+    obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n+    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        obj.push_back(Pair(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize)));\n+        obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {\n-        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n+        obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n+    obj.pushKV(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK()));\n     if (!masterKeyID.IsNull())\n-         obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+         obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n     return obj;\n }\n \n@@ -3003,31 +3003,31 @@ UniValue listunspent(const JSONRPCRequest& request)\n             continue;\n \n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n-        entry.push_back(Pair(\"vout\", out.i));\n+        entry.pushKV(\"txid\", out.tx->GetHash().GetHex());\n+        entry.pushKV(\"vout\", out.i);\n \n         if (fValidAddress) {\n-            entry.push_back(Pair(\"address\", EncodeDestination(address)));\n+            entry.pushKV(\"address\", EncodeDestination(address));\n \n             if (pwallet->mapAddressBook.count(address)) {\n-                entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n+                entry.pushKV(\"account\", pwallet->mapAddressBook[address].name);\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n-                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n                 }\n             }\n         }\n \n-        entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue)));\n-        entry.push_back(Pair(\"confirmations\", out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.fSpendable));\n-        entry.push_back(Pair(\"solvable\", out.fSolvable));\n-        entry.push_back(Pair(\"safe\", out.fSafe));\n+        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n+        entry.pushKV(\"confirmations\", out.nDepth);\n+        entry.pushKV(\"spendable\", out.fSpendable);\n+        entry.pushKV(\"solvable\", out.fSolvable);\n+        entry.pushKV(\"safe\", out.fSafe);\n         results.push_back(entry);\n     }\n \n@@ -3229,9 +3229,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n-    result.push_back(Pair(\"changepos\", changePosition));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nFeeOut)));\n+    result.pushKV(\"hex\", EncodeHexTx(tx));\n+    result.pushKV(\"changepos\", changePosition);\n+    result.pushKV(\"fee\", ValueFromAmount(nFeeOut));\n \n     return result;\n }\n@@ -3373,14 +3373,14 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", txid.GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(old_fee)));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(new_fee)));\n+    result.pushKV(\"txid\", txid.GetHex());\n+    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n+    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n     UniValue result_errors(UniValue::VARR);\n     for (const std::string& error : errors) {\n         result_errors.push_back(error);\n     }\n-    result.push_back(Pair(\"errors\", result_errors));\n+    result.pushKV(\"errors\", result_errors);\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjY0NTRjNTJhZTVkNTMzOTRmYzY1NDJlOWYzZTAyYTEzODhmYmU5",
    "commit": {
      "author": {
        "name": "Ernest Hemingway",
        "email": "coomni120@gmail.com",
        "date": "2018-02-10T19:15:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T19:17:05Z"
      },
      "message": "Improve \"Turn Windows Features On or Off\" step",
      "tree": {
        "sha": "29f8f7de647483264fcaf464f7ba94e121357277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29f8f7de647483264fcaf464f7ba94e121357277"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaf0UxAAoJEM4rdWl+aaVIY/8L/igbclZjQysHL8riJDSPS6np\nAMmSSEFeYqrOMQPjIrXAbwCRZj9yWbgHSeX+z5pypWjh9npiILdT9avlB86cHH56\nRALx6H3ONpmlBXS9KNChdHwp+xy7BhaWSZdc3U5cX2dWDq5adaLCnXRkHTaO/iTo\ncyE+OYZ2njrFNPgZwpGaxw/zET7PtJzL1lwkXB3QA4u9C/wcnw4CbFZtgqazSQ5B\n01/VY4z73pqh1i+nEccJPBOvtYc8HSkkTZrif5zpJaHpbcr1V9LlryMGtXIWwD2a\n2M0dqetuo8D9VbXJLP5v2qn0tZkz/GyUr3ieqrfAPjyx0Nmn8GoTqk8URqR+JdM9\ngoUF2Z1vr28T7JhRbtjV2q61nt7+/ngm3dMcmIBYXyjBcPb1XlegCxjZfqXQn3vy\nwLKFv9qdgmZ6cV8NPajD2OIQ+0QaI7j+OQzxt1BQtkuJUeygDeDqwBk9GrG16uuM\nvXw/44wNhAa28bOVueLQNvKLTcVeLZrNvRSle9a1yw==\n=+7uT\n-----END PGP SIGNATURE-----",
        "payload": "tree 29f8f7de647483264fcaf464f7ba94e121357277\nparent f4c942e3615435c9e5d7ff0cefd935be08768d0c\nauthor Ernest Hemingway <coomni120@gmail.com> 1518290136 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518290225 -0500\n\nImprove \"Turn Windows Features On or Off\" step\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9/comments",
    "author": {
      "login": "MCFX2",
      "id": 20264064,
      "node_id": "MDQ6VXNlcjIwMjY0MDY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20264064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MCFX2",
      "html_url": "https://github.com/MCFX2",
      "followers_url": "https://api.github.com/users/MCFX2/followers",
      "following_url": "https://api.github.com/users/MCFX2/following{/other_user}",
      "gists_url": "https://api.github.com/users/MCFX2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MCFX2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MCFX2/subscriptions",
      "organizations_url": "https://api.github.com/users/MCFX2/orgs",
      "repos_url": "https://api.github.com/users/MCFX2/repos",
      "events_url": "https://api.github.com/users/MCFX2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MCFX2/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4c942e3615435c9e5d7ff0cefd935be08768d0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c942e3615435c9e5d7ff0cefd935be08768d0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4c942e3615435c9e5d7ff0cefd935be08768d0c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8af9437765fac041676007aa3d0216fcc9d593d3",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
        "patch": "@@ -34,10 +34,9 @@ Full instructions to install WSL are available on the above link.\n To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n \n 1. Enable the Windows Subsystem for Linux feature\n-  * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n-  * Select Windows Subsystem for Linux\n-  * Click OK\n-  * Restart if necessary\n+  * Open the Windows Features dialog (`OptionalFeatures.exe`)\n+  * Enable 'Windows Susbsystem for Linux'\n+  * Click 'OK' and restart if necessary\n 2. Install Ubuntu\n   * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)\n   * Click Install"
      }
    ]
  },
  {
    "sha": "fa5f51830d2649cace2fc827084093019497c151",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVmNTE4MzBkMjY0OWNhY2UyZmM4MjcwODQwOTMwMTk0OTdjMTUx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-11T03:12:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-11T03:11:31Z"
      },
      "message": "rpc: Reject deprecated reserveChangeKey in fundrawtransaction",
      "tree": {
        "sha": "8a1aabc02312abfdd013b8c9fc983c3011ef05d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a1aabc02312abfdd013b8c9fc983c3011ef05d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5f51830d2649cace2fc827084093019497c151",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaf7RjAAoJEM4rdWl+aaVIT0kL/1fV/UX5odejT2qWky+PBThj\nYFRuj2lUZ7OJCeon5s3PH/THpVirxZnbXkvBA1WsbxHa/pVqQaPyhg0l1SRByIDG\nn/UxYDWOz3gH6wNI07XgYQhbGYCsvuiEjZ3+sEF6kLuGlctKnIKNXqpndzmxnV1V\nXpRKlMeSYJVBr+StFnB8rfUqUk8kyuZ390Q5Y50y8xtMUywqb3Y6UAjrPGI8nyPP\nFGxbFfQsjle8vMblqpeeQO12YNwGbAwI0/jzWPAwxjKZ78vqiJNMYlYr6gf51Ao8\ngsukFXAGxfUJCQU5No4q7qM1Mot7Wedd/uyMYRJVRizUrh91lYMYnJSetKtMgxOv\nkZBvR+zoYrGTrRbgUK6UcggfNP9vvBW0u8/JW+rHlbZoBUYxaYiF6Ng0iL873ima\nZwg0Fuygz482HQxAA4n7OD4FIE7qbSbotKOYh9DOeqYmVj267E9aKRUHs8e/TmaZ\niVWU/TJuLDGXjd5kPNysVpO01VxE81w9LOgIOxVwoQ==\n=Lyvo\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a1aabc02312abfdd013b8c9fc983c3011ef05d7\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nauthor MarcoFalke <falke.marco@gmail.com> 1518318763 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518318691 -0500\n\nrpc: Reject deprecated reserveChangeKey in fundrawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f51830d2649cace2fc827084093019497c151",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5f51830d2649cace2fc827084093019497c151",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f51830d2649cace2fc827084093019497c151/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "528cb81a385fe0b793f19a79b4d9c74c10d3a4f6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5f51830d2649cace2fc827084093019497c151/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5f51830d2649cace2fc827084093019497c151/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa5f51830d2649cace2fc827084093019497c151",
        "patch": "@@ -56,6 +56,13 @@ frequently tested on them.\n Notable changes\n ===============\n \n+RPC changes\n+------------\n+\n+### Low-level changes\n+\n+- The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n+\n Credits\n =======\n "
      },
      {
        "sha": "e9a63c1862ccd5dc1fb38d027c42a956dbd85a00",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5f51830d2649cace2fc827084093019497c151/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5f51830d2649cace2fc827084093019497c151/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa5f51830d2649cace2fc827084093019497c151",
        "patch": "@@ -3129,7 +3129,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)}, // DEPRECATED (and ignored), should be removed in 0.16 or so.\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},"
      },
      {
        "sha": "4d3be18516d49373f082ea917afbdf2b5df34dd5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5f51830d2649cace2fc827084093019497c151/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5f51830d2649cace2fc827084093019497c151/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fa5f51830d2649cace2fc827084093019497c151",
        "patch": "@@ -181,6 +181,9 @@ def run_test(self):\n \n         assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n+        # reserveChangeKey was deprecated and is now removed\n+        assert_raises_rpc_error(-3, \"Unexpected key reserveChangeKey\", lambda: self.nodes[2].fundrawtransaction(hexstring=rawtx, options={'reserveChangeKey': True}))\n+\n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n         ############################################################"
      }
    ]
  },
  {
    "sha": "11376b5583a283772c82f6d32d0007cdbf5b8ef0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTM3NmI1NTgzYTI4Mzc3MmM4MmY2ZDMyZDAwMDdjZGJmNWI4ZWYw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-11T09:48:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-11T09:48:15Z"
      },
      "message": "Fix a-vs-an typos",
      "tree": {
        "sha": "743f25d31a5e9e181eb8a2e5a37bfcbcc2fee8ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/743f25d31a5e9e181eb8a2e5a37bfcbcc2fee8ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2790ef4acd445de0c659e59876d2b32abf604f0e",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -124,7 +124,7 @@ def main():\n     g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n-    g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')\n+    g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)"
      },
      {
        "sha": "6e2b3c34a2236b4829104f8d5dd5468aef0678c9",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -5,7 +5,7 @@\n  * AUTOGENERATED by contrib/seeds/generate-seeds.py\n  *\n  * Each line contains a 16-byte IPv6 address and a port.\n- * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n+ * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\n  */\n static SeedSpec6 pnSeed6_main[] = {\n     {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x13,0x05,0x7f}, 8333},"
      },
      {
        "sha": "edf1c29ea1937c228e4827c82118e2125616dfde",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -101,7 +101,7 @@ QFont fixedPitchFont()\n #endif\n }\n \n-// Just some dummy data to generate an convincing random-looking (but consistent) address\n+// Just some dummy data to generate a convincing random-looking (but consistent) address\n static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};\n \n // Generate a dummy address with invalid CRC, starting with the network prefix."
      },
      {
        "sha": "fdd5cdad31bd58f6b272680d0c5ce4476fdf64d4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -692,7 +692,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n             \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n             \"       {\\n\"\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\""
      },
      {
        "sha": "4dad6b44c56d909a15c3f7e939b012d249ea37cc",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -104,7 +104,7 @@ enum\n     //\n     SCRIPT_VERIFY_MINIMALIF = (1U << 13),\n \n-    // Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n+    // Signature(s) must be empty vector if a CHECK(MULTI)SIG operation failed\n     //\n     SCRIPT_VERIFY_NULLFAIL = (1U << 14),\n "
      },
      {
        "sha": "c1338c3a8efb15308dce2cc0e9990fddeb84bd0e",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -29,7 +29,7 @@ enum isminetype\n typedef uint8_t isminefilter;\n \n /* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n- * and return a ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n+ * and return ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n  * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n  * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n  */"
      },
      {
        "sha": "f8a1347c319fc5f29304dea0d0b8a767cf1c37e6",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -92,11 +92,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a010047304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n "
      },
      {
        "sha": "7e39ec759914026fab9ba3cce99f0f3a5b41efdf",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -23,11 +23,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a01ff47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n "
      },
      {
        "sha": "516ce8555b24e20080b42baa79b006ead64091f8",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various fingerprinting protections.\n \n-If an stale block more than a month old or its header are requested by a peer,\n+If a stale block more than a month old or its header are requested by a peer,\n the node should pretend that it does not have it to avoid fingerprinting.\n \"\"\"\n "
      },
      {
        "sha": "92126ef4b7537fc3809dccebca7703f4873c9403",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -186,7 +186,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        #THIS IS A INCOMPLETE FEATURE\n+        #THIS IS AN INCOMPLETE FEATURE\n         #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n         assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n "
      }
    ]
  },
  {
    "sha": "a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGI1ZDIwZjRmMTcxODI4YjJiZDcwYWIyNDA1YzQyYjFlNDUyZTVi",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-11T11:14:08Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-11T11:14:08Z"
      },
      "message": "Reset pblocktree before deleting LevelDB file",
      "tree": {
        "sha": "beff8292730edb510c67d192770cd909b507242c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beff8292730edb510c67d192770cd909b507242c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlqAJYEACgkQV/+b28ww\nEAmvgg//QXYrY2kG1KMPcIBV7FUF0fJoJhfwn09J4EC60kfMESnRazsC4QpqzKUc\nx0uGN2kwEtnZJzXbySWzaQW+yl+R829Do7FLJ8P1+/zF+SYfm/5SmxFIJW6ehOFR\ndVmfFR9za8ayPIdKYJrrRMp7vbawS7baHDjz8OBIwcyQyipAgNlPloy8WWBFj7S5\nhguwtR0t8pTTsto7jfeq5cVipVhhDvezedFFB3+++aOMqUX4mV10iQz2Z3Owx+Ul\nI/ynpTy6E4R88yINcUCUVC1Z6Zg18powB49rMdIkz4VQ17Eoj7z8hEToFWjm5iKY\n++9/yvakWXpaMWLKzrEykDp3s9w6Ds4b8wkUw4OJIpT5k6qDU8LbbRyzCZEwR5b7\n/emzjGdSUXTe9Z2ZBGSUgYC5sn7qdiyR+BgFQiYa23kxK4kpKEaamRcSabyMvvGC\nQv9OPkng8owXN6Zgd/xyTz5jL1ft1XH2g3J3ZVEMXB4BlyZ8MV4qAUGg7Lfi5fTa\nxYfz70Sx758U218O64MueuEy60/dUYbzu1EYDA8IxQRQRWbolehO1ZZaMuREl43D\nfzLMivGj9AWMsW0iYXnydVRvnA+ktk6bTG4UYhcd/GkzEWDrP1wdRJytn9NAimea\nFRXuChTJXAYEbkWfAuHlcnMLPDxZvmgnL/nrY2/bTR+aFQAyY4o=\n=J8Nu\n-----END PGP SIGNATURE-----",
        "payload": "tree beff8292730edb510c67d192770cd909b507242c\nparent 89005ddad1c4a9732ecae47c7de34b4de157f48f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1518347648 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1518347648 +0100\n\nReset pblocktree before deleting LevelDB file\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ff875f9aae679112e47b4c59f53512b00540c3c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
        "patch": "@@ -1425,6 +1425,9 @@ bool AppInitMain()\n                 pcoinsTip.reset();\n                 pcoinsdbview.reset();\n                 pcoinscatcher.reset();\n+                // new CBlockTreeDB tries to delete the existing file, which\n+                // fails if it's still open from the previous loop. Close it first:\n+                pblocktree.reset();\n                 pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n                 if (fReset) {"
      }
    ]
  },
  {
    "sha": "79313d2e2040451ef98a7a921c53f7736208c934",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTMxM2QyZTIwNDA0NTFlZjk4YTdhOTIxYzUzZjc3MzYyMDhjOTM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:11:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:11:37Z"
      },
      "message": "Merge #12401: Reset pblocktree before deleting LevelDB file\n\na8b5d20 Reset pblocktree before deleting LevelDB file (Sjors Provoost)\n\nPull request description:\n\n  #11043 repaced:\n\n  ```\n  delete pblocktree;\n  pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReset);\n  ```\n\n  With:\n\n  ```\n  pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n  ```\n\n  This is problematic because `new CBlockTreeDB` tries to delete the existing file, which will fail with `LOCK: already held by process` if it's still open. That's the case for QT.\n\n  When QT finds a problem with the index it will ask the user if they want to reindex. At that point it has already opened `blocks/index`.  It then runs this [while loop](https://github.com/bitcoin/bitcoin/blob/v0.16.0rc3/src/init.cpp#L1415) again with `fReset = 1`, resulting in the above error.\n\n  This change makes that error go away, presumably because `reset()` without an argument closes the file.\n\nTree-SHA512: fde8b546912f6773ac64da8476673cc270b125aa2d909212391d1a2001b35c8260a8772126b99dfd76b39faaa286feb7c43239185fe584bd4dc2bc04a64044ce",
      "tree": {
        "sha": "fd0db0a5107520d3c6158117a82ca4435d53f832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd0db0a5107520d3c6158117a82ca4435d53f832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79313d2e2040451ef98a7a921c53f7736208c934",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagVpJAAoJEB5K7WKYbNJd8CMH/RJ7tPFcwAfX+yg9h9rlE7GD\nrsJJe4RMxBF3PPHa7+W0/pGUgQSdc++ODnuls8FYHczEWwMFWU1dSWJ/Vvo7pL+2\n6g85V6oY44/teJihwIX9eeXvZsARQb/36EY3/sNLC6KsL3knisYvShKF7v00dpBN\nMwFj0kQzJU2fik9yy2Rkf4W2+u4drIZs2zT/8RnZA0HMjJGuEy+MDGFMNV7iKTVU\nqiMDjSzEjI7o7FZSg2l+Vp1rJVJDwn0gy83o5n1Hrc+atR95SZxArkhn8tIJ++Y6\n07kRgNuu5BgLLRV0pq3eAcj/TMpBjnMHWZ5TRSyRgm5NvRylm2IpZ9KELtewxlw=\n=jrkG\n-----END PGP SIGNATURE-----",
        "payload": "tree fd0db0a5107520d3c6158117a82ca4435d53f832\nparent fe53d5f3636aed064823bc220d828c7ff08d1d52\nparent a8b5d20f4f171828b2bd70ab2405c42b1e452e5b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518426688 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518426697 +0100\n\nMerge #12401: Reset pblocktree before deleting LevelDB file\n\na8b5d20 Reset pblocktree before deleting LevelDB file (Sjors Provoost)\n\nPull request description:\n\n  #11043 repaced:\n\n  ```\n  delete pblocktree;\n  pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReset);\n  ```\n\n  With:\n\n  ```\n  pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n  ```\n\n  This is problematic because `new CBlockTreeDB` tries to delete the existing file, which will fail with `LOCK: already held by process` if it's still open. That's the case for QT.\n\n  When QT finds a problem with the index it will ask the user if they want to reindex. At that point it has already opened `blocks/index`.  It then runs this [while loop](https://github.com/bitcoin/bitcoin/blob/v0.16.0rc3/src/init.cpp#L1415) again with `fReset = 1`, resulting in the above error.\n\n  This change makes that error go away, presumably because `reset()` without an argument closes the file.\n\nTree-SHA512: fde8b546912f6773ac64da8476673cc270b125aa2d909212391d1a2001b35c8260a8772126b99dfd76b39faaa286feb7c43239185fe584bd4dc2bc04a64044ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79313d2e2040451ef98a7a921c53f7736208c934",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79313d2e2040451ef98a7a921c53f7736208c934",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79313d2e2040451ef98a7a921c53f7736208c934/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe53d5f3636aed064823bc220d828c7ff08d1d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe53d5f3636aed064823bc220d828c7ff08d1d52"
      },
      {
        "sha": "a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ff875f9aae679112e47b4c59f53512b00540c3c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79313d2e2040451ef98a7a921c53f7736208c934/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79313d2e2040451ef98a7a921c53f7736208c934/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=79313d2e2040451ef98a7a921c53f7736208c934",
        "patch": "@@ -1425,6 +1425,9 @@ bool AppInitMain()\n                 pcoinsTip.reset();\n                 pcoinsdbview.reset();\n                 pcoinscatcher.reset();\n+                // new CBlockTreeDB tries to delete the existing file, which\n+                // fails if it's still open from the previous loop. Close it first:\n+                pblocktree.reset();\n                 pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n                 if (fReset) {"
      }
    ]
  },
  {
    "sha": "a8cbbdb07a5950720add08be3cf3b0865dc604e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGNiYmRiMDdhNTk1MDcyMGFkZDA4YmUzY2YzYjA4NjVkYzYwNGUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:13:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:14:05Z"
      },
      "message": "Merge #12392: Fix ignoring tx data requests when fPauseSend is set on a peer\n\nc4af738 Fix ignoring tx data requests when fPauseSend is set on a peer (Matt Corallo)\n\nPull request description:\n\n  This resolves a bug introduced in\n  66aa1d58a158991a8014a91335b5bc9c00062f56 where, if when responding\n  to a series of transaction requests in a getdata we hit the send\n  buffer limit and set fPauseSend, we will skip one transaction per\n  call to ProcessGetData.\n\n  Bug found by Cory Fields (@theuni).\n\n  Probably worth slipping into 0.16 :/.\n\nTree-SHA512: a9313cef8ac6da31eb099c9925c8401a638220cf7bc9b7b7b83151ecae4b02630f2db45ef6668302b9bb0f38571afbd764993427f1ec9e4d74d9a3be6647d299",
      "tree": {
        "sha": "0b98108fa26a7370fa610ede8a2759b7643d77fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b98108fa26a7370fa610ede8a2759b7643d77fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagVrdAAoJEB5K7WKYbNJdBHYH/0ZQNq8ACLY8n0Qwrl2E2ET2\nOyw2F33GG+tHbOBipLTr8aIkTTn4JpNt4KHdaZN1wLzdpsras84ElS/wjfxsMDVV\n/0FKYYfeEJ+6rmHSq067muVHUyWqKQIpgAfOjLZhCOl5/qzQ7xWzfHR9+1ce9oE+\nfAuY8eiWb9R0BN07qAg+d/1WEmZakdqbFclK+VVLhTbeZvphQCzT2NcKeLKJ1GFV\nBZP0xBs1kdyutiChuML0GoB+ojL0XrTLIhT3BbaDNIOGzn48AigfMClcW9TmVZEr\n5ayUrChqOaAmaH8Z+sIpqpneygHwOUKGBgV30AotgjQmyh1AoHPB1RQ6pbcZf1Y=\n=Jhmi\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b98108fa26a7370fa610ede8a2759b7643d77fc\nparent 79313d2e2040451ef98a7a921c53f7736208c934\nparent c4af7387634765d254d1432746385cf35917d367\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518426831 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518426845 +0100\n\nMerge #12392: Fix ignoring tx data requests when fPauseSend is set on a peer\n\nc4af738 Fix ignoring tx data requests when fPauseSend is set on a peer (Matt Corallo)\n\nPull request description:\n\n  This resolves a bug introduced in\n  66aa1d58a158991a8014a91335b5bc9c00062f56 where, if when responding\n  to a series of transaction requests in a getdata we hit the send\n  buffer limit and set fPauseSend, we will skip one transaction per\n  call to ProcessGetData.\n\n  Bug found by Cory Fields (@theuni).\n\n  Probably worth slipping into 0.16 :/.\n\nTree-SHA512: a9313cef8ac6da31eb099c9925c8401a638220cf7bc9b7b7b83151ecae4b02630f2db45ef6668302b9bb0f38571afbd764993427f1ec9e4d74d9a3be6647d299\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79313d2e2040451ef98a7a921c53f7736208c934",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79313d2e2040451ef98a7a921c53f7736208c934",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79313d2e2040451ef98a7a921c53f7736208c934"
      },
      {
        "sha": "c4af7387634765d254d1432746385cf35917d367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4af7387634765d254d1432746385cf35917d367",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4af7387634765d254d1432746385cf35917d367"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bf9307727a1e16b1ef6841672ba4117c3c6c7d14",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cbbdb07a5950720add08be3cf3b0865dc604e2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cbbdb07a5950720add08be3cf3b0865dc604e2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a8cbbdb07a5950720add08be3cf3b0865dc604e2",
        "patch": "@@ -1226,10 +1226,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         }\n     } // release cs_main\n \n-    if (it != pfrom->vRecvGetData.end()) {\n+    if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n         const CInv &inv = *it;\n-        it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n+            it++;\n             ProcessGetBlockData(pfrom, consensusParams, inv, connman, interruptMsgProc);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "0dfc25f82a01d9fec26380d95915df31e1fe2c02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGZjMjVmODJhMDFkOWZlYzI2MzgwZDk1OTE1ZGYzMWUxZmUyYzAy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:34:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:34:49Z"
      },
      "message": "Merge #12381: Remove more boost threads\n\n004f999 boost: drop boost threads for [alert|block|wallet]notify (Cory Fields)\n0827267 boost: drop boost threads from torcontrol (Cory Fields)\nba91724 boost: remove useless threadGroup parameter from Discover (Cory Fields)\nf26866b boost: drop boost threads for upnp (Cory Fields)\n\nPull request description:\n\n  This doesn't completely get rid of boost::thread, but this batch should be easy to review, and leaves us with only threadGroup (scheduler + scriptcheck) remaining.\n\n  Note to reviewers: The upnp diff changes a bunch of whitespace, it's much more clear with 'git diff -w'\n\nTree-SHA512: 5a356798d0785f93ed143d1f0afafe890bc82f0d470bc969473da2d2aa78bcb9b096f7ba11b92564d546fb447d4bd0d347e7842994ea0170aafd53fda7e0a66e",
      "tree": {
        "sha": "7f2fed3a6bf1c3efad33e6244cf0d6cd4b308b47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f2fed3a6bf1c3efad33e6244cf0d6cd4b308b47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagV+5AAoJEB5K7WKYbNJdo9oH/iR0lFqMgqPkcZNFYsGsFNL+\nPy1+QtO1dSTnvVmPPyz8TapDsotsYfhOs3RDmfA/8Nhdx1qnkxr8F6hpA6Xo/TuA\ntbmUZtq/WzFLit+23vk9v5PBsAd3XxlxCDKP2DrF/HNCrrge3p5HUWItrtCLKfnP\ndEDviY58LGVl6AYbHzTUfFgTV7lqe/+IVITgYQUzTNdLstPinmxPB33KPKZzGPRR\nA47CkSbMNTIE/w9BF5kaHvKAo7woOtyKYygNL+T0UgcCgRRwzLG5DHR4t8XOcnC4\nxw1405oQdsB5xP9fapmG6Xq5RwvyEai/2XM+8Y/Cl/Rv4TxxhsRebc17rKNcuWY=\n=uIpZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f2fed3a6bf1c3efad33e6244cf0d6cd4b308b47\nparent a8cbbdb07a5950720add08be3cf3b0865dc604e2\nparent 004f9999464c7ef4a57b281dcbb407e5d193e798\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518428079 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518428089 +0100\n\nMerge #12381: Remove more boost threads\n\n004f999 boost: drop boost threads for [alert|block|wallet]notify (Cory Fields)\n0827267 boost: drop boost threads from torcontrol (Cory Fields)\nba91724 boost: remove useless threadGroup parameter from Discover (Cory Fields)\nf26866b boost: drop boost threads for upnp (Cory Fields)\n\nPull request description:\n\n  This doesn't completely get rid of boost::thread, but this batch should be easy to review, and leaves us with only threadGroup (scheduler + scriptcheck) remaining.\n\n  Note to reviewers: The upnp diff changes a bunch of whitespace, it's much more clear with 'git diff -w'\n\nTree-SHA512: 5a356798d0785f93ed143d1f0afafe890bc82f0d470bc969473da2d2aa78bcb9b096f7ba11b92564d546fb447d4bd0d347e7842994ea0170aafd53fda7e0a66e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8cbbdb07a5950720add08be3cf3b0865dc604e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8cbbdb07a5950720add08be3cf3b0865dc604e2"
      },
      {
        "sha": "004f9999464c7ef4a57b281dcbb407e5d193e798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004f9999464c7ef4a57b281dcbb407e5d193e798",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/004f9999464c7ef4a57b281dcbb407e5d193e798"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 74,
      "deletions": 58
    },
    "files": [
      {
        "sha": "b28baba7798c7ac2e66dcb18f5ff1d48969a904c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -165,6 +165,7 @@ void Interrupt()\n     InterruptRPC();\n     InterruptREST();\n     InterruptTorControl();\n+    InterruptMapPort();\n     if (g_connman)\n         g_connman->Interrupt();\n }\n@@ -191,7 +192,7 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     FlushWallets();\n #endif\n-    MapPort(false);\n+    StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n@@ -545,7 +546,8 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n     if (!strCmd.empty()) {\n         boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n }\n \n@@ -1674,12 +1676,14 @@ bool AppInitMain()\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n \n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl(threadGroup, scheduler);\n+        StartTorControl();\n \n-    Discover(threadGroup);\n+    Discover();\n \n     // Map ports with UPnP\n-    MapPort(gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+    if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {\n+        StartMapPort();\n+    }\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;"
      },
      {
        "sha": "201914685cb562160794311a730b5b8b509a32d1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 39,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -1459,6 +1459,8 @@ void CConnman::WakeMessageHandler()\n \n \n #ifdef USE_UPNP\n+static CThreadInterrupt g_upnp_interrupt;\n+static std::thread g_upnp_thread;\n void ThreadMapPort()\n {\n     std::string port = strprintf(\"%u\", GetListenPort());\n@@ -1509,35 +1511,29 @@ void ThreadMapPort()\n \n         std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n-        try {\n-            while (true) {\n+        do {\n #ifndef UPNPDISCOVER_SUCCESS\n-                /* miniupnpc 1.5 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n+            /* miniupnpc 1.5 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n #else\n-                /* miniupnpc 1.6 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n+            /* miniupnpc 1.6 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n #endif\n \n-                if(r!=UPNPCOMMAND_SUCCESS)\n-                    LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n-                        port, port, lanaddr, r, strupnperror(r));\n-                else\n-                    LogPrintf(\"UPnP Port Mapping successful.\\n\");\n-\n-                MilliSleep(20*60*1000); // Refresh every 20 minutes\n-            }\n-        }\n-        catch (const boost::thread_interrupted&)\n-        {\n-            r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n-            freeUPNPDevlist(devlist); devlist = nullptr;\n-            FreeUPNPUrls(&urls);\n-            throw;\n+            if(r!=UPNPCOMMAND_SUCCESS)\n+                LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n+                    port, port, lanaddr, r, strupnperror(r));\n+            else\n+                LogPrintf(\"UPnP Port Mapping successful.\\n\");\n         }\n+        while(g_upnp_interrupt.sleep_for(std::chrono::minutes(20)));\n+\n+        r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n+        LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n+        freeUPNPDevlist(devlist); devlist = nullptr;\n+        FreeUPNPUrls(&urls);\n     } else {\n         LogPrintf(\"No valid UPnP IGDs found\\n\");\n         freeUPNPDevlist(devlist); devlist = nullptr;\n@@ -1546,27 +1542,39 @@ void ThreadMapPort()\n     }\n }\n \n-void MapPort(bool fUseUPnP)\n+void StartMapPort()\n {\n-    static std::unique_ptr<boost::thread> upnp_thread;\n+    if (!g_upnp_thread.joinable()) {\n+        assert(!g_upnp_interrupt);\n+        g_upnp_thread = std::thread((std::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+    }\n+}\n \n-    if (fUseUPnP)\n-    {\n-        if (upnp_thread) {\n-            upnp_thread->interrupt();\n-            upnp_thread->join();\n-        }\n-        upnp_thread.reset(new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+void InterruptMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_interrupt();\n     }\n-    else if (upnp_thread) {\n-        upnp_thread->interrupt();\n-        upnp_thread->join();\n-        upnp_thread.reset();\n+}\n+\n+void StopMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_thread.join();\n+        g_upnp_interrupt.reset();\n     }\n }\n \n #else\n-void MapPort(bool)\n+void StartMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void InterruptMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void StopMapPort()\n {\n     // Intentionally left blank.\n }\n@@ -2121,7 +2129,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     return true;\n }\n \n-void Discover(boost::thread_group& threadGroup)\n+void Discover()\n {\n     if (!fDiscover)\n         return;"
      },
      {
        "sha": "8378a303b8b1e13149ba53e3399d4f914d1bc826",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -37,10 +37,6 @@\n class CScheduler;\n class CNode;\n \n-namespace boost {\n-    class thread_group;\n-} // namespace boost\n-\n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n@@ -441,8 +437,10 @@ class CConnman\n     friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n-void Discover(boost::thread_group& threadGroup);\n-void MapPort(bool fUseUPnP);\n+void Discover();\n+void StartMapPort();\n+void InterruptMapPort();\n+void StopMapPort();\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n "
      },
      {
        "sha": "909be1c26419e25ec8e4816c217f3676d6127c4e",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -315,7 +315,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n         case MapPortUPnP: // core option - can be changed on-the-fly\n             settings.setValue(\"fUseUPnP\", value.toBool());\n-            MapPort(value.toBool());\n+            if (value.toBool()) {\n+                StartMapPort();\n+            } else {\n+                InterruptMapPort();\n+                StopMapPort();\n+            }\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();"
      },
      {
        "sha": "717d1cf7e54140406fbfe0c1b2134bcd98c361a5",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -731,7 +731,7 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n \n /****** Thread ********/\n static struct event_base *gBase;\n-static boost::thread torControlThread;\n+static std::thread torControlThread;\n \n static void TorControlThread()\n {\n@@ -740,7 +740,7 @@ static void TorControlThread()\n     event_base_dispatch(gBase);\n }\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void StartTorControl()\n {\n     assert(!gBase);\n #ifdef WIN32\n@@ -754,7 +754,7 @@ void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return;\n     }\n \n-    torControlThread = boost::thread(boost::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    torControlThread = std::thread(std::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n }\n \n void InterruptTorControl()"
      },
      {
        "sha": "2be6701fa5263fe5c8e85ce7b22904d4a0772268",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -13,7 +13,7 @@\n extern const std::string DEFAULT_TOR_CONTROL;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void StartTorControl();\n void InterruptTorControl();\n void StopTorControl();\n "
      },
      {
        "sha": "371460a6f034bf0eb2c7d98180909ed21c3cfd82",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -1182,7 +1182,8 @@ static void AlertNotify(const std::string& strMessage)\n     safeStatus = singleQuote+safeStatus+singleQuote;\n     boost::replace_all(strCmd, \"%s\", safeStatus);\n \n-    boost::thread t(runCommand, strCmd); // thread runs free\n+    std::thread t(runCommand, strCmd);\n+    t.detach(); // thread runs free\n }\n \n static void CheckForkWarningConditions()"
      },
      {
        "sha": "513819606b6e573f497169a298f68ada54759cc7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -34,7 +34,6 @@\n #include <future>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/thread.hpp>\n \n std::vector<CWalletRef> vpwallets;\n /** Transaction fee set by the user */\n@@ -976,7 +975,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     if (!strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "108af52ef75a466be71d04bb973b794eca17e212",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDhhZjUyZWY3NWE0NjZiZTcxZDA0YmI5NzNiNzk0ZWNhMTdlMjEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:47:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:50:03Z"
      },
      "message": "Merge #12393: Fix a-vs-an typos\n\n11376b5 Fix a-vs-an typos (practicalswift)\n\nPull request description:\n\n  Fix a-vs-an typos.\n\nTree-SHA512: 2cf74c15656a20ec13d2da7d86a39d14e634db368833d92da06a78d1266950accfc4fcc89cfecdaadd46e6b48b17e6fad29080428e564871e78482c53f3e855c",
      "tree": {
        "sha": "240825d37691b1d99ce72b2502b706e9f451e635",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/240825d37691b1d99ce72b2502b706e9f451e635"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/108af52ef75a466be71d04bb973b794eca17e212",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagWNLAAoJEB5K7WKYbNJdDEcH/1YjIaLAdYUYCCcqI66t+mMz\nRPOpZAV+QT1Q86q6aOje5y+PBihJ4GtIHiHXKnh6ykFaC5mbV3MMm1skMhkf/yc6\nvzbSr7ulvo+2D3dMlpS7hBx9qtcoE6A5dq0TdGlMwNcXCZTjxzG7mCMTM+B2TSS4\nsyKb8S+/TjMLVyky6+AoH2D/uRigVIJEf8iT6MTGNRP3dSIHv6PaqVzfPw8kO7yr\nYPQdvj/G6uhXtHol+7Om+HPESypfLsjYaUJSOsMkemol2Br41KVyVgHG6D9DKtOe\n68bewK+AnCFgE2mgCtaOIGLZFrOAguD7uOB+q21R4KiuI4bUYaG+PqkdBYNAuM0=\n=Egcr\n-----END PGP SIGNATURE-----",
        "payload": "tree 240825d37691b1d99ce72b2502b706e9f451e635\nparent 0dfc25f82a01d9fec26380d95915df31e1fe2c02\nparent 11376b5583a283772c82f6d32d0007cdbf5b8ef0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518428825 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518429003 +0100\n\nMerge #12393: Fix a-vs-an typos\n\n11376b5 Fix a-vs-an typos (practicalswift)\n\nPull request description:\n\n  Fix a-vs-an typos.\n\nTree-SHA512: 2cf74c15656a20ec13d2da7d86a39d14e634db368833d92da06a78d1266950accfc4fcc89cfecdaadd46e6b48b17e6fad29080428e564871e78482c53f3e855c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108af52ef75a466be71d04bb973b794eca17e212",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/108af52ef75a466be71d04bb973b794eca17e212",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108af52ef75a466be71d04bb973b794eca17e212/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dfc25f82a01d9fec26380d95915df31e1fe2c02"
      },
      {
        "sha": "11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11376b5583a283772c82f6d32d0007cdbf5b8ef0"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2790ef4acd445de0c659e59876d2b32abf604f0e",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -124,7 +124,7 @@ def main():\n     g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n-    g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')\n+    g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)"
      },
      {
        "sha": "6e2b3c34a2236b4829104f8d5dd5468aef0678c9",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -5,7 +5,7 @@\n  * AUTOGENERATED by contrib/seeds/generate-seeds.py\n  *\n  * Each line contains a 16-byte IPv6 address and a port.\n- * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n+ * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\n  */\n static SeedSpec6 pnSeed6_main[] = {\n     {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x13,0x05,0x7f}, 8333},"
      },
      {
        "sha": "edf1c29ea1937c228e4827c82118e2125616dfde",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -101,7 +101,7 @@ QFont fixedPitchFont()\n #endif\n }\n \n-// Just some dummy data to generate an convincing random-looking (but consistent) address\n+// Just some dummy data to generate a convincing random-looking (but consistent) address\n static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};\n \n // Generate a dummy address with invalid CRC, starting with the network prefix."
      },
      {
        "sha": "fdd5cdad31bd58f6b272680d0c5ce4476fdf64d4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -692,7 +692,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n             \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n             \"       {\\n\"\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\""
      },
      {
        "sha": "4dad6b44c56d909a15c3f7e939b012d249ea37cc",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -104,7 +104,7 @@ enum\n     //\n     SCRIPT_VERIFY_MINIMALIF = (1U << 13),\n \n-    // Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n+    // Signature(s) must be empty vector if a CHECK(MULTI)SIG operation failed\n     //\n     SCRIPT_VERIFY_NULLFAIL = (1U << 14),\n "
      },
      {
        "sha": "c1338c3a8efb15308dce2cc0e9990fddeb84bd0e",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -29,7 +29,7 @@ enum isminetype\n typedef uint8_t isminefilter;\n \n /* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n- * and return a ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n+ * and return ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n  * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n  * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n  */"
      },
      {
        "sha": "f8a1347c319fc5f29304dea0d0b8a767cf1c37e6",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -92,11 +92,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a010047304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n "
      },
      {
        "sha": "7e39ec759914026fab9ba3cce99f0f3a5b41efdf",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -23,11 +23,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a01ff47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n "
      },
      {
        "sha": "516ce8555b24e20080b42baa79b006ead64091f8",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various fingerprinting protections.\n \n-If an stale block more than a month old or its header are requested by a peer,\n+If a stale block more than a month old or its header are requested by a peer,\n the node should pretend that it does not have it to avoid fingerprinting.\n \"\"\"\n "
      },
      {
        "sha": "92126ef4b7537fc3809dccebca7703f4873c9403",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -186,7 +186,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        #THIS IS A INCOMPLETE FEATURE\n+        #THIS IS AN INCOMPLETE FEATURE\n         #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n         assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n "
      }
    ]
  },
  {
    "sha": "b4d85490f09eab84497f7b352a6ca2b3f48de815",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGQ4NTQ5MGYwOWVhYjg0NDk3ZjdiMzUyYTZjYTJiM2Y0OGRlODE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:30:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:31:18Z"
      },
      "message": "Merge #11858: qa: Prepare tests for Windows\n\nfaefd29 qa: Prepare functional tests for Windows (MarcoFalke)\n\nPull request description:\n\n  * Pass `sys.executable` when calling a python script via the subprocess\n    module\n  * Don't remove the log file while it is still open and written to\n  * Properly use os.pathsep and os.path.sep when modifying the PATH\n    environment variable\n  * util-tests: Use os.path.join for Windows compatibility\n\n  Ref:  #8227\n\nTree-SHA512: c507a536af104b3bde4366b6634099db826532bd3e7c35d694b5883c550920643b3eab79c76703ca67e1044ed09979e855088f7324321c8d52112514e334d614",
      "tree": {
        "sha": "47f654eea6bec32d3ccc07565a6538c7edd1bab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47f654eea6bec32d3ccc07565a6538c7edd1bab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagWz2AAoJEB5K7WKYbNJd3HUIALlLA4UW7WcJQrMl86s/VM4Y\n0HEkdhRVEm/Jfmw2KJKR3/u4dG5Wi3vNF71ilwsfrWdXPjLCPkga+4qPFYoJGFql\n/WBHg1TWyRfX0uPTU+3u9zxAuhohU4dCmdqLL/uEpMzrGaGYFuXgqADuuV0i8/FK\n+DL2IqqRbvN3axpyHmylexqq6nk5wxClYsfwihkeHLoO/YZetuDFbJyay1TdVICk\nLe8rvFz16b4JXCEnLUttINMyvuUUJVckv7G2J4VlZRcmg7WjASe7omly4MXbVwH4\nFTRzu7Q1/zZfSfDDieulQ/qM+wb26WYivSO1BJOTu4ArOsRaIrSReP/CWUQhbbM=\n=SzgC\n-----END PGP SIGNATURE-----",
        "payload": "tree 47f654eea6bec32d3ccc07565a6538c7edd1bab0\nparent 108af52ef75a466be71d04bb973b794eca17e212\nparent faefd2923a00e82be794f090b4bd861c5c58c95a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518431417 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518431478 +0100\n\nMerge #11858: qa: Prepare tests for Windows\n\nfaefd29 qa: Prepare functional tests for Windows (MarcoFalke)\n\nPull request description:\n\n  * Pass `sys.executable` when calling a python script via the subprocess\n    module\n  * Don't remove the log file while it is still open and written to\n  * Properly use os.pathsep and os.path.sep when modifying the PATH\n    environment variable\n  * util-tests: Use os.path.join for Windows compatibility\n\n  Ref:  #8227\n\nTree-SHA512: c507a536af104b3bde4366b6634099db826532bd3e7c35d694b5883c550920643b3eab79c76703ca67e1044ed09979e855088f7324321c8d52112514e334d614\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d85490f09eab84497f7b352a6ca2b3f48de815",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "108af52ef75a466be71d04bb973b794eca17e212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108af52ef75a466be71d04bb973b794eca17e212",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/108af52ef75a466be71d04bb973b794eca17e212"
      },
      {
        "sha": "faefd2923a00e82be794f090b4bd861c5c58c95a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faefd2923a00e82be794f090b4bd861c5c58c95a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faefd2923a00e82be794f090b4bd861c5c58c95a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a5e66bd9593d9d8366286fd0c661422558903c26",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "patch": "@@ -99,7 +99,9 @@ def main(self):\n \n         PortSeed.n = self.options.port_seed\n \n-        os.environ['PATH'] = self.options.srcdir + \":\" + self.options.srcdir + \"/qt:\" + os.environ['PATH']\n+        os.environ['PATH'] = self.options.srcdir + os.pathsep + \\\n+                             self.options.srcdir + os.path.sep + \"qt\" + os.pathsep + \\\n+                             os.environ['PATH']\n \n         check_json_precision()\n \n@@ -148,10 +150,11 @@ def main(self):\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n         if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n-            self.log.info(\"Cleaning up\")\n-            shutil.rmtree(self.options.tmpdir)\n+            self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n+            cleanup_tree_on_exit = True\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n+            cleanup_tree_on_exit = False\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n@@ -164,6 +167,8 @@ def main(self):\n             self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n             exit_code = TEST_EXIT_FAILED\n         logging.shutdown()\n+        if cleanup_tree_on_exit:\n+            shutil.rmtree(self.options.tmpdir)\n         sys.exit(exit_code)\n \n     # Methods to override in subclass test scripts."
      },
      {
        "sha": "0cf3424c71cca6386853395f915104bf3b1ac2fa",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "patch": "@@ -268,7 +268,7 @@ def main():\n     if args.help:\n         # Print help for test_runner.py, then print help of the first script (with args removed) and exit.\n         parser.print_help()\n-        subprocess.check_call([(config[\"environment\"][\"SRCDIR\"] + '/test/functional/' + test_list[0].split()[0])] + ['-h'])\n+        subprocess.check_call([sys.executable, os.path.join(config[\"environment\"][\"SRCDIR\"], 'test', 'functional', test_list[0].split()[0]), '-h'])\n         sys.exit(0)\n \n     check_script_list(config[\"environment\"][\"SRCDIR\"])\n@@ -312,7 +312,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n         try:\n-            subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+            subprocess.check_output([sys.executable, tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n         except subprocess.CalledProcessError as e:\n             sys.stdout.buffer.write(e.output)\n             raise\n@@ -342,7 +342,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs, _ = subprocess.Popen([sys.executble, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n@@ -412,7 +412,7 @@ def get_next(self):\n             tmpdir_arg = [\"--tmpdir={}\".format(testdir)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n+                              subprocess.Popen([sys.executable, self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),"
      },
      {
        "sha": "30bd13d0dc47d07a944d57f686bea20c1d20de2b",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "patch": "@@ -44,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test\", \"util\", \"data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "c8b54b2044db2fafc561452afb44478a99fa83f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGI1NGIyMDQ0ZGIyZmFmYzU2MTQ1MmFmYjQ0NDc4YTk5ZmE4M2Yz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:41:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:41:12Z"
      },
      "message": "Merge #12351: Libraries: Use correct type ; avoid compiler warnings.\n\na25cb0f Use ptrdiff_t type to more precisely indicate usage and avoid compiler warnings. (murrayn)\n\nPull request description:\n\n  ptrdiff_t is a more strictly correct type, and gets rid of compiler warnings.\n\nTree-SHA512: 39718a5cdc10e698f14185f4622a9b439728bce619bd8b3a86f2b99ed5b056cf5a8545a3e5c4bc8a6a01b845fb73510036cee5e6d2629c58df26be692a957fba",
      "tree": {
        "sha": "7b2e66f3bbca81c2047d7418a219d20cbf2777ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b2e66f3bbca81c2047d7418a219d20cbf2777ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8b54b2044db2fafc561452afb44478a99fa83f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagW9IAAoJEB5K7WKYbNJdcqMIAIdtR+QEmIapUNBEZtvNmIDa\nbZ6lLfw1vGf4mehJ4O+fUNpEyKIoFt9G5kNM9z64y8vorLDJO2jxhdTxJ0aTLKhl\n/MVagE8f4pCHV590uMDDWzqSo4RAM7alrEtNTJVj7ntiuIM82NFmBc5venIgfJDT\nfIsHTNyWtQdsJaSedckY31nZ3nuGlyGHxmI40Q07QmaxeaGacaMDXA4d5gqQDZKH\n2tArt7MuR+cYjL9wSPWs6A3uIjyz9zzk+Us+21S1fOx5FC4TQ1/IR4GFmrCZDZCu\nRzek8Qw0kQZrlynoEH8BfqTvO2lvyb5/rQX62rmgMSEAFfRNTXLkRFgQ0Z3pJno=\n=DcnE\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b2e66f3bbca81c2047d7418a219d20cbf2777ad\nparent b4d85490f09eab84497f7b352a6ca2b3f48de815\nparent a25cb0f313315bd987834aa5f500b5682a9c3cd5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518432060 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518432072 +0100\n\nMerge #12351: Libraries: Use correct type ; avoid compiler warnings.\n\na25cb0f Use ptrdiff_t type to more precisely indicate usage and avoid compiler warnings. (murrayn)\n\nPull request description:\n\n  ptrdiff_t is a more strictly correct type, and gets rid of compiler warnings.\n\nTree-SHA512: 39718a5cdc10e698f14185f4622a9b439728bce619bd8b3a86f2b99ed5b056cf5a8545a3e5c4bc8a6a01b845fb73510036cee5e6d2629c58df26be692a957fba\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b54b2044db2fafc561452afb44478a99fa83f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b54b2044db2fafc561452afb44478a99fa83f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b54b2044db2fafc561452afb44478a99fa83f3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d85490f09eab84497f7b352a6ca2b3f48de815"
      },
      {
        "sha": "a25cb0f313315bd987834aa5f500b5682a9c3cd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25cb0f313315bd987834aa5f500b5682a9c3cd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a25cb0f313315bd987834aa5f500b5682a9c3cd5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ffed989be12cae5c081d19e711fec684c7e1cfd1",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b54b2044db2fafc561452afb44478a99fa83f3/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b54b2044db2fafc561452afb44478a99fa83f3/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=c8b54b2044db2fafc561452afb44478a99fa83f3",
        "patch": "@@ -44,15 +44,15 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     if (end - privkey < 1 || !(*privkey & 0x80u)) {\n         return 0;\n     }\n-    size_t lenb = *privkey & ~0x80u; privkey++;\n+    ptrdiff_t lenb = *privkey & ~0x80u; privkey++;\n     if (lenb < 1 || lenb > 2) {\n         return 0;\n     }\n     if (end - privkey < lenb) {\n         return 0;\n     }\n     /* sequence length */\n-    size_t len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n+    ptrdiff_t len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n     privkey += lenb;\n     if (end - privkey < len) {\n         return 0;\n@@ -66,7 +66,7 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     if (end - privkey < 2 || privkey[0] != 0x04u) {\n         return 0;\n     }\n-    size_t oslen = privkey[1];\n+    ptrdiff_t oslen = privkey[1];\n     privkey += 2;\n     if (oslen > 32 || end - privkey < oslen) {\n         return 0;"
      }
    ]
  },
  {
    "sha": "8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTZmOWY0ZWJjNzRmNGUzMDJlMWUzOGVlMjFlMWFmZDBkMzgyM2Nl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-12T10:43:45Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-12T10:44:10Z"
      },
      "message": "Merge #12296: wallet: Only fee-bump non-conflicted/non-confirmed txes\n\nfaca18dcf feebumper: Use PreconditionChecks to determine bump eligibility (MarcoFalke)\n718f05cab move more bumpfee prechecks to feebumper::PreconditionChecks (Gregory Sanders)\n\nPull request description:\n\n  This only affects the gui.\n\n  Fee-bumping of transactions that are already confirmed or are already conflicted by other transactions should not be offered by the gui.\n\nTree-SHA512: 4acf8087c69fbe5bd67be0485cdb4055e985bbf84acc420aa786ad31e2dc6c2572baaac1d359af10a6907790f626edca690285d9a46ae5440900ea12624c634f",
      "tree": {
        "sha": "4b0f0b8e75b0bd954fb85f2f62ca6cc81a2d6d79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b0f0b8e75b0bd954fb85f2f62ca6cc81a2d6d79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqBb/oACgkQHrd2uwPH\nki0F6Q/+KinMbXgEUtchNAnvI5Hx/by+s81AyYTa2RP4UPPan7inxvFRMhvGWuIy\nr0m0k360RmNDwPI0IWqbws/jWlIEr7crLp7dVmFSQjwUYAKjmq7x53ZtM/CbYXJi\ngzg05Ug3KGDDIPRgPlMJ4iuY+MNwW9fzk2/7C72llJqXAsLfDuH970UT5U/5D9K+\nFNqt3NbkNosOPhG3CTM0R7wB/evao5qP3ft50KyT5YUjijkRaIeBhpHLK0LJhM+M\nq287ogT7EFTEhCr0Z69m6qePlZXthTbKEhen0ntJX9NQchZIYYUvlSkEkOa/9hTq\nHweB/q+gCfQInbpbEGXowGdd/jcEQtaa37MfpAwaAI6hM0DT+nNjBRDeawb17Q/7\ndFfEk1L9AVm04ICg3vQKQ3y+PdMaWvZcCm4e+0VdiRjeNBYdJPC1/XuMq9CBvH20\nd/5eeQxMeK8ObWJegpIIge/HnDwWqxESnKIO5gWuI89L0sR4jEt2S4X+XObXoNjS\n6djNcK3PgE42kyPhOX0mb4xuswAZOXjflQKDK9JiaDSGcJQVTvSaNwMeTd2Bd9Uq\nE7CWRkuzn4lyS8mVAuzRlalCiz3bd2LjHBSo9Weg28DBJ48fDFDpeAzDuCmUXSvB\nZJVlYM1yk6WmB2eik3vv1/8C1PpJ/cQRuiSZj9h4K9UbBCH1LBE=\n=k5Ed\n-----END PGP SIGNATURE-----",
        "payload": "tree 4b0f0b8e75b0bd954fb85f2f62ca6cc81a2d6d79\nparent c8b54b2044db2fafc561452afb44478a99fa83f3\nparent faca18dcf499e36069ce5fcd3e02a5ee86639436\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518432225 +1030\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518432250 +1030\n\nMerge #12296: wallet: Only fee-bump non-conflicted/non-confirmed txes\n\nfaca18dcf feebumper: Use PreconditionChecks to determine bump eligibility (MarcoFalke)\n718f05cab move more bumpfee prechecks to feebumper::PreconditionChecks (Gregory Sanders)\n\nPull request description:\n\n  This only affects the gui.\n\n  Fee-bumping of transactions that are already confirmed or are already conflicted by other transactions should not be offered by the gui.\n\nTree-SHA512: 4acf8087c69fbe5bd67be0485cdb4055e985bbf84acc420aa786ad31e2dc6c2572baaac1d359af10a6907790f626edca690285d9a46ae5440900ea12624c634f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8b54b2044db2fafc561452afb44478a99fa83f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b54b2044db2fafc561452afb44478a99fa83f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b54b2044db2fafc561452afb44478a99fa83f3"
      },
      {
        "sha": "faca18dcf499e36069ce5fcd3e02a5ee86639436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faca18dcf499e36069ce5fcd3e02a5ee86639436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faca18dcf499e36069ce5fcd3e02a5ee86639436"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 27,
      "deletions": 20
    },
    "files": [
      {
        "sha": "5234a697100e70ddc564c431a9847c2f18cebd93",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 19,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "patch": "@@ -65,16 +65,39 @@ static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWallet\n         errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n+\n+    if (!SignalsOptInRBF(*wtx.tx)) {\n+        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", wtx.GetHash().ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+\n     return feebumper::Result::OK;\n }\n \n namespace feebumper {\n \n-bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid)\n+bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n {\n     LOCK2(cs_main, wallet->cs_wallet);\n     const CWalletTx* wtx = wallet->GetWalletTx(txid);\n-    return wtx && SignalsOptInRBF(*wtx->tx) && !wtx->mapValue.count(\"replaced_by_txid\");\n+    if (wtx == nullptr) return false;\n+\n+    std::vector<std::string> errors_dummy;\n+    feebumper::Result res = PreconditionChecks(wallet, *wtx, errors_dummy);\n+    return res == feebumper::Result::OK;\n }\n \n Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n@@ -94,23 +117,6 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         return result;\n     }\n \n-    if (!SignalsOptInRBF(*wtx.tx)) {\n-        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    // check that original tx consists entirely of our inputs\n-    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n-        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n     // figure out which output was change\n     // if there was no change output or multiple change outputs, fail\n     int nOutput = -1;\n@@ -228,6 +234,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         }\n     }\n \n+\n     return Result::OK;\n }\n "
      },
      {
        "sha": "7e36a9766be7ef50a7009c83d2016119306079be",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "patch": "@@ -26,7 +26,7 @@ enum class Result\n };\n \n //! Return whether transaction can be bumped.\n-bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid);\n+bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid);\n \n //! Create bumpfee transaction.\n Result CreateTransaction(const CWallet* wallet,"
      }
    ]
  },
  {
    "sha": "2e9406c0c588ddf6f039fd3ff73c978177483869",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTk0MDZjMGM1ODhkZGY2ZjAzOWZkM2ZmNzNjOTc4MTc3NDgzODY5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-12T11:17:36Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-12T11:18:22Z"
      },
      "message": "Interrupt loading thread after shutdown request",
      "tree": {
        "sha": "ca8084f0ef61e3549c2b8a51981ff2d1a8492337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca8084f0ef61e3549c2b8a51981ff2d1a8492337"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e9406c0c588ddf6f039fd3ff73c978177483869",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9406c0c588ddf6f039fd3ff73c978177483869",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9406c0c588ddf6f039fd3ff73c978177483869",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9406c0c588ddf6f039fd3ff73c978177483869/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "895a5358f4ff05b86641df68a9b9b4189e0d658c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9406c0c588ddf6f039fd3ff73c978177483869/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9406c0c588ddf6f039fd3ff73c978177483869/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2e9406c0c588ddf6f039fd3ff73c978177483869",
        "patch": "@@ -680,11 +680,13 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (!ActivateBestChain(state, chainparams)) {\n         LogPrintf(\"Failed to connect best block\");\n         StartShutdown();\n+        return;\n     }\n \n     if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n+        return;\n     }\n     } // End scope of CImportingNow\n     if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {"
      }
    ]
  },
  {
    "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGMwMGY2OGM0OWM0NmEzODBhOThkMDYyMzNmOTA1MjhiOGUyNTU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T14:13:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T14:13:38Z"
      },
      "message": "Merge #12193: RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)\n\n91986ed206 scripted-diff: Use UniValue.pushKV instead of push_back(Pair()) (Karel Bilek)\na570098021 Squashed 'src/univalue/' changes from 07947ff2da..51d3ab34ba (MarcoFalke)\n\nPull request description:\n\n  Rebased version of  #11386 by karel-3d.\n\n  Closes:  #11386\n\nTree-SHA512: f3a81447e573c17e75813f4d41ceb34b9980eac81efdd98ddb149d7c51f792be7e2b32239b6ea7e6da68af23897afa6b4ce3f4e8070f9c4adf5105bf6075f2a0",
      "tree": {
        "sha": "fab1c9ce142f896f26b9b79b80e5f5379d28aa73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fab1c9ce142f896f26b9b79b80e5f5379d28aa73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJagaESAAoJENLqSFDnUosl7+4P/RV10Qc26wy6uWeAVLY7tB+g\nEqUBmuSNsaBOunclxi2x7zzRohbYTW7KVHrRDjTwyrZm3oYLuzBe8nSc4/QrDlVj\nQXx8evjcTYuJibFA7jsO5DZKsF9ISVW0bdfj+Dmcr9GEhtUnYDFuWasGg5CXMMkC\ntunFlz7RINHqjTljFu9N1Q8xkF/ECIPi1B9iXHXURsNVJtN1QwDtDBATjIlCosl8\nR5rwfgAjFHDUt/b8l8RehHToyembIFs7u2E3R7i6nNgSMTO9N4Xf/QymtEj23lfR\n4L+5qn3sr2hud31AAJES8TISB446BP07xIYGxoRajWnt8NuEhSNNCxs2AwPPyr63\nGdUe9DyEMeS9aiHaxW+pFIV/9Zi7Y23zQ+BntCF/zTMlJUW8oHOWmTPSEHRHbQNL\nhhWeIqSNXXd+TMTueC3mATTVLH6nwTXvtjCCS2RIozpQFxwfJb99OM8Ck4hGPU/v\nY+05FIaHS/vwlXH9p4i2+rLdWO8kQcXsDLprjQkwYcx70Q90KpqhdW5ezareMF1C\nYAehUHazPXtW8surV+LAy3dlzGnW87p/yfwF1dC3b2eB8BcCQ3zJ8cGPOYJ6jqn6\nFSGwlRNkR9YWgzXe1iO6uQYkMF8URs14+w6AO7NvjDlUhupxlUbaGFGc3bMPj+OJ\ns6AlCkkrBIJGiFX7Xe0t\n=yhOm\n-----END PGP SIGNATURE-----",
        "payload": "tree fab1c9ce142f896f26b9b79b80e5f5379d28aa73\nparent 8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce\nparent 91986ed206fa830e5985560c6895b0d30b375054\nauthor MarcoFalke <falke.marco@gmail.com> 1518444810 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518444818 -0500\n\nMerge #12193: RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)\n\n91986ed206 scripted-diff: Use UniValue.pushKV instead of push_back(Pair()) (Karel Bilek)\na570098021 Squashed 'src/univalue/' changes from 07947ff2da..51d3ab34ba (MarcoFalke)\n\nPull request description:\n\n  Rebased version of  #11386 by karel-3d.\n\n  Closes:  #11386\n\nTree-SHA512: f3a81447e573c17e75813f4d41ceb34b9980eac81efdd98ddb149d7c51f792be7e2b32239b6ea7e6da68af23897afa6b4ce3f4e8070f9c4adf5105bf6075f2a0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce"
      },
      {
        "sha": "91986ed206fa830e5985560c6895b0d30b375054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91986ed206fa830e5985560c6895b0d30b375054",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91986ed206fa830e5985560c6895b0d30b375054"
      }
    ],
    "stats": {
      "total": 838,
      "additions": 427,
      "deletions": 411
    },
    "files": [
      {
        "sha": "eeeb3f51416744077344302d6a04121e6863ae4a",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -540,23 +540,23 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n-        objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n-        objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);\n         for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n-            utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n-            utxo.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+            utxo.pushKV(\"height\", (int32_t)coin.nHeight);\n+            utxo.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n \n             // include the script in a json output\n             UniValue o(UniValue::VOBJ);\n             ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-            utxo.push_back(Pair(\"scriptPubKey\", o));\n+            utxo.pushKV(\"scriptPubKey\", o);\n             utxos.push_back(utxo);\n         }\n-        objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n+        objGetUTXOResponse.pushKV(\"utxos\", utxos);\n \n         // return json string\n         std::string strJSON = objGetUTXOResponse.write() + \"\\n\";"
      },
      {
        "sha": "189da6ae482819397fa455eaabb85d5f78e3fdf4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 122,
        "deletions": 122,
        "changes": 244,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -88,48 +88,48 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", blockindex->nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion)));\n-    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n-    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", blockindex->nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion));\n+    result.pushKV(\"merkleroot\", blockindex->hashMerkleRoot.GetHex());\n+    result.pushKV(\"time\", (int64_t)blockindex->nTime);\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)blockindex->nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", blockindex->nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", block.nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n-    result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n+    result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n+    result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", block.nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n+    result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n     UniValue txs(UniValue::VARR);\n     for(const auto& tx : block.vtx)\n     {\n@@ -142,19 +142,19 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n         else\n             txs.push_back(tx->GetHash().GetHex());\n     }\n-    result.push_back(Pair(\"tx\", txs));\n-    result.push_back(Pair(\"time\", block.GetBlockTime()));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"tx\", txs);\n+    result.pushKV(\"time\", block.GetBlockTime());\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)block.nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n@@ -235,8 +235,8 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -277,8 +277,8 @@ UniValue waitforblock(const JSONRPCRequest& request)\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -319,8 +319,8 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -379,18 +379,18 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n {\n     AssertLockHeld(mempool.cs);\n \n-    info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n-    info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n-    info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n-    info.push_back(Pair(\"time\", e.GetTime()));\n-    info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-    info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n-    info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n-    info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));\n-    info.push_back(Pair(\"ancestorcount\", e.GetCountWithAncestors()));\n-    info.push_back(Pair(\"ancestorsize\", e.GetSizeWithAncestors()));\n-    info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n-    info.push_back(Pair(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString()));\n+    info.pushKV(\"size\", (int)e.GetTxSize());\n+    info.pushKV(\"fee\", ValueFromAmount(e.GetFee()));\n+    info.pushKV(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee()));\n+    info.pushKV(\"time\", e.GetTime());\n+    info.pushKV(\"height\", (int)e.GetHeight());\n+    info.pushKV(\"descendantcount\", e.GetCountWithDescendants());\n+    info.pushKV(\"descendantsize\", e.GetSizeWithDescendants());\n+    info.pushKV(\"descendantfees\", e.GetModFeesWithDescendants());\n+    info.pushKV(\"ancestorcount\", e.GetCountWithAncestors());\n+    info.pushKV(\"ancestorsize\", e.GetSizeWithAncestors());\n+    info.pushKV(\"ancestorfees\", e.GetModFeesWithAncestors());\n+    info.pushKV(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString());\n     const CTransaction& tx = e.GetTx();\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n@@ -405,7 +405,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n         depends.push_back(dep);\n     }\n \n-    info.push_back(Pair(\"depends\", depends));\n+    info.pushKV(\"depends\", depends);\n }\n \n UniValue mempoolToJSON(bool fVerbose)\n@@ -419,7 +419,7 @@ UniValue mempoolToJSON(bool fVerbose)\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(hash.ToString(), info));\n+            o.pushKV(hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -526,7 +526,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -590,7 +590,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -952,14 +952,14 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     CCoinsStats stats;\n     FlushStateToDisk();\n     if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n-        ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n-        ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n-        ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n-        ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n-        ret.push_back(Pair(\"bogosize\", (int64_t)stats.nBogoSize));\n-        ret.push_back(Pair(\"hash_serialized_2\", stats.hashSerialized.GetHex()));\n-        ret.push_back(Pair(\"disk_size\", stats.nDiskSize));\n-        ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n+        ret.pushKV(\"height\", (int64_t)stats.nHeight);\n+        ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n+        ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+        ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n+        ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n+        ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());\n+        ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n     }\n@@ -1031,17 +1031,17 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n-    ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n+    ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n-        ret.push_back(Pair(\"confirmations\", 0));\n+        ret.pushKV(\"confirmations\", 0);\n     } else {\n-        ret.push_back(Pair(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1)));\n+        ret.pushKV(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1));\n     }\n-    ret.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+    ret.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n     UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-    ret.push_back(Pair(\"scriptPubKey\", o));\n-    ret.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+    ret.pushKV(\"scriptPubKey\", o);\n+    ret.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n \n     return ret;\n }\n@@ -1091,16 +1091,16 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n             activated = pindex->nHeight >= consensusParams.BIP65Height;\n             break;\n     }\n-    rv.push_back(Pair(\"status\", activated));\n+    rv.pushKV(\"status\", activated);\n     return rv;\n }\n \n static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"id\", name));\n-    rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n+    rv.pushKV(\"id\", name);\n+    rv.pushKV(\"version\", version);\n+    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n     return rv;\n }\n \n@@ -1109,29 +1109,29 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     UniValue rv(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n-    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n-    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n-    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n-    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    case THRESHOLD_DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n+    case THRESHOLD_STARTED: rv.pushKV(\"status\", \"started\"); break;\n+    case THRESHOLD_LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n+    case THRESHOLD_ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n+    case THRESHOLD_FAILED: rv.pushKV(\"status\", \"failed\"); break;\n     }\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n-        rv.push_back(Pair(\"bit\", consensusParams.vDeployments[id].bit));\n+        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n-    rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n-    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n+    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n         BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n-        statsUV.push_back(Pair(\"period\", statsStruct.period));\n-        statsUV.push_back(Pair(\"threshold\", statsStruct.threshold));\n-        statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n-        statsUV.push_back(Pair(\"count\", statsStruct.count));\n-        statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n-        rv.push_back(Pair(\"statistics\", statsUV));\n+        statsUV.pushKV(\"period\", statsStruct.period);\n+        statsUV.pushKV(\"threshold\", statsStruct.threshold);\n+        statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n+        statsUV.pushKV(\"count\", statsStruct.count);\n+        statsUV.pushKV(\"possible\", statsStruct.possible);\n+        rv.pushKV(\"statistics\", statsUV);\n     }\n     return rv;\n }\n@@ -1142,7 +1142,7 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params&\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id)));\n+        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1202,31 +1202,31 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n-    obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n-    obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n-    obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n-    obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n-    obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n-    obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n-    obj.push_back(Pair(\"initialblockdownload\",  IsInitialBlockDownload()));\n-    obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n-    obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n-    obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    obj.pushKV(\"chain\",                 Params().NetworkIDString());\n+    obj.pushKV(\"blocks\",                (int)chainActive.Height());\n+    obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n+    obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n+    obj.pushKV(\"difficulty\",            (double)GetDifficulty());\n+    obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());\n+    obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip()));\n+    obj.pushKV(\"initialblockdownload\",  IsInitialBlockDownload());\n+    obj.pushKV(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex());\n+    obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n+    obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n         CBlockIndex* block = chainActive.Tip();\n         assert(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n             block = block->pprev;\n         }\n \n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+        obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n         bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n-        obj.push_back(Pair(\"automatic_pruning\",  automatic_pruning));\n+        obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n-            obj.push_back(Pair(\"prune_target_size\",  nPruneTarget));\n+            obj.pushKV(\"prune_target_size\",  nPruneTarget);\n         }\n     }\n \n@@ -1240,10 +1240,10 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n         BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n     }\n-    obj.push_back(Pair(\"softforks\",             softforks));\n-    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n+    obj.pushKV(\"softforks\",             softforks);\n+    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n-    obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -1331,11 +1331,11 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"height\", block->nHeight));\n-        obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n+        obj.pushKV(\"height\", block->nHeight);\n+        obj.pushKV(\"hash\", block->phashBlock->GetHex());\n \n         const int branchLen = block->nHeight - chainActive.FindFork(block)->nHeight;\n-        obj.push_back(Pair(\"branchlen\", branchLen));\n+        obj.pushKV(\"branchlen\", branchLen);\n \n         std::string status;\n         if (chainActive.Contains(block)) {\n@@ -1357,7 +1357,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n             // No clue.\n             status = \"unknown\";\n         }\n-        obj.push_back(Pair(\"status\", status));\n+        obj.pushKV(\"status\", status);\n \n         res.push_back(obj);\n     }\n@@ -1368,13 +1368,13 @@ UniValue getchaintips(const JSONRPCRequest& request)\n UniValue mempoolInfoToJSON()\n {\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    ret.pushKV(\"size\", (int64_t) mempool.size());\n+    ret.pushKV(\"bytes\", (int64_t) mempool.GetTotalTxSize());\n+    ret.pushKV(\"usage\", (int64_t) mempool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK())));\n-    ret.push_back(Pair(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n+    ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n     return ret;\n }\n@@ -1581,15 +1581,15 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     int nTxDiff = pindex->nChainTx - pindexPast->nChainTx;\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n-    ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n-    ret.push_back(Pair(\"window_final_block_hash\", pindex->GetBlockHash().GetHex()));\n-    ret.push_back(Pair(\"window_block_count\", blockcount));\n+    ret.pushKV(\"time\", (int64_t)pindex->nTime);\n+    ret.pushKV(\"txcount\", (int64_t)pindex->nChainTx);\n+    ret.pushKV(\"window_final_block_hash\", pindex->GetBlockHash().GetHex());\n+    ret.pushKV(\"window_block_count\", blockcount);\n     if (blockcount > 0) {\n-        ret.push_back(Pair(\"window_tx_count\", nTxDiff));\n-        ret.push_back(Pair(\"window_interval\", nTimeDiff));\n+        ret.pushKV(\"window_tx_count\", nTxDiff);\n+        ret.pushKV(\"window_interval\", nTimeDiff);\n         if (nTimeDiff > 0) {\n-            ret.push_back(Pair(\"txrate\", ((double)nTxDiff) / nTimeDiff));\n+            ret.pushKV(\"txrate\", ((double)nTxDiff) / nTimeDiff);\n         }\n     }\n "
      },
      {
        "sha": "dd74095b62dfe894762d463145dd54efd941c3a5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -211,14 +211,14 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n-    obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n-    obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n-    obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"blocks\",           (int)chainActive.Height());\n+    obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n+    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty());\n+    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n+    obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n+    obj.pushKV(\"chain\",            Params().NetworkIDString());\n+    obj.pushKV(\"warnings\",         GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -550,33 +550,33 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         UniValue entry(UniValue::VOBJ);\n \n-        entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n-        entry.push_back(Pair(\"txid\", txHash.GetHex()));\n-        entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n+        entry.pushKV(\"data\", EncodeHexTx(tx));\n+        entry.pushKV(\"txid\", txHash.GetHex());\n+        entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n \n         UniValue deps(UniValue::VARR);\n         for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);\n         }\n-        entry.push_back(Pair(\"depends\", deps));\n+        entry.pushKV(\"depends\", deps);\n \n         int index_in_template = i - 1;\n-        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n+        entry.pushKV(\"fee\", pblocktemplate->vTxFees[index_in_template]);\n         int64_t nTxSigOps = pblocktemplate->vTxSigOpsCost[index_in_template];\n         if (fPreSegWit) {\n             assert(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n             nTxSigOps /= WITNESS_SCALE_FACTOR;\n         }\n-        entry.push_back(Pair(\"sigops\", nTxSigOps));\n-        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n+        entry.pushKV(\"sigops\", nTxSigOps);\n+        entry.pushKV(\"weight\", GetTransactionWeight(tx));\n \n         transactions.push_back(entry);\n     }\n \n     UniValue aux(UniValue::VOBJ);\n-    aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+    aux.pushKV(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end()));\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n@@ -586,7 +586,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     aMutable.push_back(\"prevblock\");\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"capabilities\", aCaps));\n+    result.pushKV(\"capabilities\", aCaps);\n \n     UniValue aRules(UniValue::VARR);\n     UniValue vbavailable(UniValue::VOBJ);\n@@ -605,7 +605,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             case THRESHOLD_STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                vbavailable.push_back(Pair(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit));\n+                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n@@ -630,10 +630,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             }\n         }\n     }\n-    result.push_back(Pair(\"version\", pblock->nVersion));\n-    result.push_back(Pair(\"rules\", aRules));\n-    result.push_back(Pair(\"vbavailable\", vbavailable));\n-    result.push_back(Pair(\"vbrequired\", int(0)));\n+    result.pushKV(\"version\", pblock->nVersion);\n+    result.pushKV(\"rules\", aRules);\n+    result.pushKV(\"vbavailable\", vbavailable);\n+    result.pushKV(\"vbrequired\", int(0));\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n@@ -643,15 +643,15 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         aMutable.push_back(\"version/force\");\n     }\n \n-    result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n-    result.push_back(Pair(\"transactions\", transactions));\n-    result.push_back(Pair(\"coinbaseaux\", aux));\n-    result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue));\n-    result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n-    result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-    result.push_back(Pair(\"mutable\", aMutable));\n-    result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+    result.pushKV(\"previousblockhash\", pblock->hashPrevBlock.GetHex());\n+    result.pushKV(\"transactions\", transactions);\n+    result.pushKV(\"coinbaseaux\", aux);\n+    result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n+    result.pushKV(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast));\n+    result.pushKV(\"target\", hashTarget.GetHex());\n+    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    result.pushKV(\"mutable\", aMutable);\n+    result.pushKV(\"noncerange\", \"00000000ffffffff\");\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n@@ -660,17 +660,17 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n-    result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    result.pushKV(\"sigoplimit\", nSigOpLimit);\n+    result.pushKV(\"sizelimit\", nSizeLimit);\n     if (!fPreSegWit) {\n-        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+        result.pushKV(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT);\n     }\n-    result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n-    result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n+    result.pushKV(\"curtime\", pblock->GetBlockTime());\n+    result.pushKV(\"bits\", strprintf(\"%08x\", pblock->nBits));\n+    result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n \n     if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n-        result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n+        result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n     }\n \n     return result;\n@@ -823,12 +823,12 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n-        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n-        result.push_back(Pair(\"errors\", errors));\n+        result.pushKV(\"errors\", errors);\n     }\n-    result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n+    result.pushKV(\"blocks\", feeCalc.returnedTarget);\n     return result;\n }\n \n@@ -899,37 +899,37 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n-        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        passbucket.pushKV(\"startrange\", round(buckets.pass.start));\n+        passbucket.pushKV(\"endrange\", round(buckets.pass.end));\n+        passbucket.pushKV(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0);\n+        passbucket.pushKV(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0);\n+        passbucket.pushKV(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0);\n+        passbucket.pushKV(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0);\n         UniValue failbucket(UniValue::VOBJ);\n-        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+        failbucket.pushKV(\"startrange\", round(buckets.fail.start));\n+        failbucket.pushKV(\"endrange\", round(buckets.fail.end));\n+        failbucket.pushKV(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0);\n+        failbucket.pushKV(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0);\n+        failbucket.pushKV(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0);\n+        failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n \n         // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n         if (feeRate != CFeeRate(0)) {\n-            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"pass\", passbucket);\n             // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n-            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+            if (buckets.fail.start != -1) horizon_result.pushKV(\"fail\", failbucket);\n         } else {\n             // Output only information that is still meaningful in the event of error\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"fail\", failbucket);\n             errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n-            horizon_result.push_back(Pair(\"errors\",errors));\n+            horizon_result.pushKV(\"errors\",errors);\n         }\n-        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+        result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n     }\n     return result;\n }"
      },
      {
        "sha": "3f89996e6119020f47d815cc1d9b253035411d43",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -86,20 +86,20 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n         }\n         return obj;\n     }\n \n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             ProcessSubScript(subscript, obj, true);\n         }\n@@ -110,12 +110,12 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n         }\n         return obj;\n     }\n@@ -124,10 +124,10 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n@@ -141,9 +141,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n         return obj;\n     }\n };\n@@ -206,23 +206,23 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"isvalid\", isValid));\n+    ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n         std::string currentAddress = EncodeDestination(dest);\n-        ret.push_back(Pair(\"address\", currentAddress));\n+        ret.pushKV(\"address\", currentAddress);\n \n         CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n+        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n+        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }\n         if (pwallet) {\n             const CKeyMetadata* meta = nullptr;\n@@ -240,10 +240,10 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 }\n             }\n             if (meta) {\n-                ret.push_back(Pair(\"timestamp\", meta->nCreateTime));\n+                ret.pushKV(\"timestamp\", meta->nCreateTime);\n                 if (!meta->hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", meta->hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex()));\n+                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n                 }\n             }\n         }\n@@ -304,8 +304,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     CScriptID innerID(inner);\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"address\", EncodeDestination(innerID)));\n-    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n+    result.pushKV(\"address\", EncodeDestination(innerID));\n+    result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n \n     return result;\n }\n@@ -439,12 +439,12 @@ static UniValue RPCLockedMemoryInfo()\n {\n     LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"used\", uint64_t(stats.used)));\n-    obj.push_back(Pair(\"free\", uint64_t(stats.free)));\n-    obj.push_back(Pair(\"total\", uint64_t(stats.total)));\n-    obj.push_back(Pair(\"locked\", uint64_t(stats.locked)));\n-    obj.push_back(Pair(\"chunks_used\", uint64_t(stats.chunks_used)));\n-    obj.push_back(Pair(\"chunks_free\", uint64_t(stats.chunks_free)));\n+    obj.pushKV(\"used\", uint64_t(stats.used));\n+    obj.pushKV(\"free\", uint64_t(stats.free));\n+    obj.pushKV(\"total\", uint64_t(stats.total));\n+    obj.pushKV(\"locked\", uint64_t(stats.locked));\n+    obj.pushKV(\"chunks_used\", uint64_t(stats.chunks_used));\n+    obj.pushKV(\"chunks_free\", uint64_t(stats.chunks_free));\n     return obj;\n }\n \n@@ -501,7 +501,7 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+        obj.pushKV(\"locked\", RPCLockedMemoryInfo());\n         return obj;\n     } else if (mode == \"mallocinfo\") {\n #ifdef HAVE_MALLOC_INFO"
      },
      {
        "sha": "7a0225ff0de1f91f8b0f0858e4914c1695994892",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 69,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -130,59 +130,59 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n+        obj.pushKV(\"id\", stats.nodeid);\n+        obj.pushKV(\"addr\", stats.addrName);\n         if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+            obj.pushKV(\"addrlocal\", stats.addrLocal);\n         if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+            obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n+        obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n+        obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n+        obj.pushKV(\"lastsend\", stats.nLastSend);\n+        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n+        obj.pushKV(\"bytessent\", stats.nSendBytes);\n+        obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n+        obj.pushKV(\"conntime\", stats.nTimeConnected);\n+        obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n         if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+            obj.pushKV(\"pingtime\", stats.dPingTime);\n         if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n+            obj.pushKV(\"minping\", stats.dMinPing);\n         if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n+            obj.pushKV(\"pingwait\", stats.dPingWait);\n+        obj.pushKV(\"version\", stats.nVersion);\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n         // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+        obj.pushKV(\"subver\", stats.cleanSubVer);\n+        obj.pushKV(\"inbound\", stats.fInbound);\n+        obj.pushKV(\"addnode\", stats.m_manual_connection);\n+        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n         if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+            obj.pushKV(\"banscore\", statestats.nMisbehavior);\n+            obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n+            obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);\n             for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n-            obj.push_back(Pair(\"inflight\", heights));\n+            obj.pushKV(\"inflight\", heights);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        obj.pushKV(\"whitelisted\", stats.fWhitelisted);\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+                sendPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+        obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+                recvPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+        obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n \n         ret.push_back(obj);\n     }\n@@ -331,16 +331,16 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n     for (const AddedNodeInfo& info : vInfo) {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"addednode\", info.strAddedNode));\n-        obj.push_back(Pair(\"connected\", info.fConnected));\n+        obj.pushKV(\"addednode\", info.strAddedNode);\n+        obj.pushKV(\"connected\", info.fConnected);\n         UniValue addresses(UniValue::VARR);\n         if (info.fConnected) {\n             UniValue address(UniValue::VOBJ);\n-            address.push_back(Pair(\"address\", info.resolvedAddress.ToString()));\n-            address.push_back(Pair(\"connected\", info.fInbound ? \"inbound\" : \"outbound\"));\n+            address.pushKV(\"address\", info.resolvedAddress.ToString());\n+            address.pushKV(\"connected\", info.fInbound ? \"inbound\" : \"outbound\");\n             addresses.push_back(address);\n         }\n-        obj.push_back(Pair(\"addresses\", addresses));\n+        obj.pushKV(\"addresses\", addresses);\n         ret.push_back(obj);\n     }\n \n@@ -377,18 +377,18 @@ UniValue getnettotals(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"totalbytesrecv\", g_connman->GetTotalBytesRecv()));\n-    obj.push_back(Pair(\"totalbytessent\", g_connman->GetTotalBytesSent()));\n-    obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n+    obj.pushKV(\"totalbytesrecv\", g_connman->GetTotalBytesRecv());\n+    obj.pushKV(\"totalbytessent\", g_connman->GetTotalBytesSent());\n+    obj.pushKV(\"timemillis\", GetTimeMillis());\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.push_back(Pair(\"timeframe\", g_connman->GetMaxOutboundTimeframe()));\n-    outboundLimit.push_back(Pair(\"target\", g_connman->GetMaxOutboundTarget()));\n-    outboundLimit.push_back(Pair(\"target_reached\", g_connman->OutboundTargetReached(false)));\n-    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true)));\n-    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft()));\n-    outboundLimit.push_back(Pair(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle()));\n-    obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n+    outboundLimit.pushKV(\"timeframe\", g_connman->GetMaxOutboundTimeframe());\n+    outboundLimit.pushKV(\"target\", g_connman->GetMaxOutboundTarget());\n+    outboundLimit.pushKV(\"target_reached\", g_connman->OutboundTargetReached(false));\n+    outboundLimit.pushKV(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true));\n+    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft());\n+    outboundLimit.pushKV(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle());\n+    obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n }\n \n@@ -403,11 +403,11 @@ static UniValue GetNetworksInfo()\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);\n-        obj.push_back(Pair(\"name\", GetNetworkName(network)));\n-        obj.push_back(Pair(\"limited\", IsLimited(network)));\n-        obj.push_back(Pair(\"reachable\", IsReachable(network)));\n-        obj.push_back(Pair(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string()));\n-        obj.push_back(Pair(\"proxy_randomize_credentials\", proxy.randomize_credentials));\n+        obj.pushKV(\"name\", GetNetworkName(network));\n+        obj.pushKV(\"limited\", IsLimited(network));\n+        obj.pushKV(\"reachable\", IsReachable(network));\n+        obj.pushKV(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string());\n+        obj.pushKV(\"proxy_randomize_credentials\", proxy.randomize_credentials);\n         networks.push_back(obj);\n     }\n     return networks;\n@@ -458,34 +458,34 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",    strSubVersion));\n-    obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n+    obj.pushKV(\"version\",       CLIENT_VERSION);\n+    obj.pushKV(\"subversion\",    strSubVersion);\n+    obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n     if(g_connman)\n-        obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n-    obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n-    obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n+        obj.pushKV(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices()));\n+    obj.pushKV(\"localrelay\",     fRelayTxes);\n+    obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (g_connman) {\n-        obj.push_back(Pair(\"networkactive\", g_connman->GetNetworkActive()));\n-        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n+        obj.pushKV(\"networkactive\", g_connman->GetNetworkActive());\n+        obj.pushKV(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n-    obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n+    obj.pushKV(\"networks\",      GetNetworksInfo());\n+    obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n+    obj.pushKV(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK()));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n         for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n-            rec.push_back(Pair(\"address\", item.first.ToString()));\n-            rec.push_back(Pair(\"port\", item.second.nPort));\n-            rec.push_back(Pair(\"score\", item.second.nScore));\n+            rec.pushKV(\"address\", item.first.ToString());\n+            rec.pushKV(\"port\", item.second.nPort);\n+            rec.pushKV(\"score\", item.second.nScore);\n             localAddresses.push_back(rec);\n         }\n     }\n-    obj.push_back(Pair(\"localaddresses\", localAddresses));\n-    obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"localaddresses\", localAddresses);\n+    obj.pushKV(\"warnings\",       GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -575,10 +575,10 @@ UniValue listbanned(const JSONRPCRequest& request)\n     {\n         const CBanEntry& banEntry = entry.second;\n         UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", entry.first.ToString()));\n-        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n-        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n-        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+        rec.pushKV(\"address\", entry.first.ToString());\n+        rec.pushKV(\"banned_until\", banEntry.nBanUntil);\n+        rec.pushKV(\"ban_created\", banEntry.nCreateTime);\n+        rec.pushKV(\"ban_reason\", banEntry.banReasonToString());\n \n         bannedAddresses.push_back(rec);\n     }"
      },
      {
        "sha": "0635b757c63c5b0bcc4110417fbea2ea5b8f14ea",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -26,21 +26,21 @@\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n-    request.push_back(Pair(\"method\", strMethod));\n-    request.push_back(Pair(\"params\", params));\n-    request.push_back(Pair(\"id\", id));\n+    request.pushKV(\"method\", strMethod);\n+    request.pushKV(\"params\", params);\n+    request.pushKV(\"id\", id);\n     return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply(UniValue::VOBJ);\n     if (!error.isNull())\n-        reply.push_back(Pair(\"result\", NullUniValue));\n+        reply.pushKV(\"result\", NullUniValue);\n     else\n-        reply.push_back(Pair(\"result\", result));\n-    reply.push_back(Pair(\"error\", error));\n-    reply.push_back(Pair(\"id\", id));\n+        reply.pushKV(\"result\", result);\n+    reply.pushKV(\"error\", error);\n+    reply.pushKV(\"id\", id);\n     return reply;\n }\n \n@@ -53,8 +53,8 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message)\n {\n     UniValue error(UniValue::VOBJ);\n-    error.push_back(Pair(\"code\", code));\n-    error.push_back(Pair(\"message\", message));\n+    error.pushKV(\"code\", code);\n+    error.pushKV(\"message\", message);\n     return error;\n }\n "
      },
      {
        "sha": "24f2431efc9677724a7bf47f3ea0e2297c84840c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -47,17 +47,17 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n-        entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n+        entry.pushKV(\"blockhash\", hashBlock.GetHex());\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n             CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {\n-                entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n-                entry.push_back(Pair(\"time\", pindex->GetBlockTime()));\n-                entry.push_back(Pair(\"blocktime\", pindex->GetBlockTime()));\n+                entry.pushKV(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight);\n+                entry.pushKV(\"time\", pindex->GetBlockTime());\n+                entry.pushKV(\"blocktime\", pindex->GetBlockTime());\n             }\n             else\n-                entry.push_back(Pair(\"confirmations\", 0));\n+                entry.pushKV(\"confirmations\", 0);\n         }\n     }\n }\n@@ -190,7 +190,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    if (blockindex) result.push_back(Pair(\"in_active_chain\", in_active_chain));\n+    if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n     TxToJSON(*tx, hash_block, result);\n     return result;\n }\n@@ -562,7 +562,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n     if (type.isStr() && type.get_str() != \"scripthash\") {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n-        r.push_back(Pair(\"p2sh\", EncodeDestination(CScriptID(script))));\n+        r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n     }\n \n     return r;\n@@ -572,16 +572,16 @@ UniValue decodescript(const JSONRPCRequest& request)\n static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n {\n     UniValue entry(UniValue::VOBJ);\n-    entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n-    entry.push_back(Pair(\"vout\", (uint64_t)txin.prevout.n));\n+    entry.pushKV(\"txid\", txin.prevout.hash.ToString());\n+    entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n     UniValue witness(UniValue::VARR);\n     for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n         witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n     }\n-    entry.push_back(Pair(\"witness\", witness));\n-    entry.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n-    entry.push_back(Pair(\"sequence\", (uint64_t)txin.nSequence));\n-    entry.push_back(Pair(\"error\", strMessage));\n+    entry.pushKV(\"witness\", witness);\n+    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+    entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n+    entry.pushKV(\"error\", strMessage);\n     vErrorsRet.push_back(entry);\n }\n \n@@ -916,10 +916,10 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     bool fComplete = vErrors.empty();\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(mtx)));\n-    result.push_back(Pair(\"complete\", fComplete));\n+    result.pushKV(\"hex\", EncodeHexTx(mtx));\n+    result.pushKV(\"complete\", fComplete);\n     if (!vErrors.empty()) {\n-        result.push_back(Pair(\"errors\", vErrors));\n+        result.pushKV(\"errors\", vErrors);\n     }\n \n     return result;"
      },
      {
        "sha": "c15b2f051eb86f9def682b9cd2c45c22c0697b45",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -130,6 +130,10 @@ class UniValue {\n         UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n+    bool pushKV(const std::string& key, bool val_) {\n+        UniValue tmpVal((bool)val_);\n+        return pushKV(key, tmpVal);\n+    }\n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);"
      },
      {
        "sha": "70ccc0d08a5ef229bfb1eb1d08e552b62587a259",
        "filename": "src/univalue/test/object.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -261,14 +261,20 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     strKey = \"temperature\";\n     BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n \n+    strKey = \"moon\";\n+    BOOST_CHECK(obj.pushKV(strKey, true));\n+\n+    strKey = \"spoon\";\n+    BOOST_CHECK(obj.pushKV(strKey, false));\n+\n     UniValue obj2(UniValue::VOBJ);\n     BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n     BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n \n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.size(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 11);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -277,6 +283,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n     BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n     BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"moon\"].getValStr(), \"1\");\n+    BOOST_CHECK_EQUAL(obj[\"spoon\"].getValStr(), \"\");\n     BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n     BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n \n@@ -289,6 +297,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.exists(\"time\"));\n     BOOST_CHECK(obj.exists(\"calories\"));\n     BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"moon\"));\n+    BOOST_CHECK(obj.exists(\"spoon\"));\n     BOOST_CHECK(obj.exists(\"cat1\"));\n     BOOST_CHECK(obj.exists(\"cat2\"));\n \n@@ -302,6 +312,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n     objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"moon\"] = UniValue::VBOOL;\n+    objTypes[\"spoon\"] = UniValue::VBOOL;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      },
      {
        "sha": "741ea253406dbe42342442346d288f942475ee06",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -790,7 +790,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.push_back(Pair(\"filename\", filepath.string()));\n+    reply.pushKV(\"filename\", filepath.string());\n \n     return reply;\n }"
      },
      {
        "sha": "b466cf1a81daaf4c6de7005b74709852638c7bff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 87,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -86,25 +86,25 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n-    entry.push_back(Pair(\"confirmations\", confirms));\n+    entry.pushKV(\"confirmations\", confirms);\n     if (wtx.IsCoinBase())\n-        entry.push_back(Pair(\"generated\", true));\n+        entry.pushKV(\"generated\", true);\n     if (confirms > 0)\n     {\n-        entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n-        entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+        entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n+        entry.pushKV(\"blockindex\", wtx.nIndex);\n+        entry.pushKV(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime());\n     } else {\n-        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n+        entry.pushKV(\"trusted\", wtx.IsTrusted());\n     }\n     uint256 hash = wtx.GetHash();\n-    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    entry.pushKV(\"txid\", hash.GetHex());\n     UniValue conflicts(UniValue::VARR);\n     for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n-    entry.push_back(Pair(\"walletconflicts\", conflicts));\n-    entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n-    entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n+    entry.pushKV(\"walletconflicts\", conflicts);\n+    entry.pushKV(\"time\", wtx.GetTxTime());\n+    entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n@@ -116,10 +116,10 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         else if (rbfState == RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125)\n             rbfStatus = \"yes\";\n     }\n-    entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n+    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n     for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n-        entry.push_back(Pair(item.first, item.second));\n+        entry.pushKV(item.first, item.second);\n }\n \n std::string AccountFromValue(const UniValue& value)\n@@ -1463,13 +1463,13 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         {\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"address\",       EncodeDestination(dest)));\n-            obj.push_back(Pair(\"account\",       strAccount));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"account\",       strAccount);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             if (!fByAccounts)\n-                obj.push_back(Pair(\"label\", strAccount));\n+                obj.pushKV(\"label\", strAccount);\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n@@ -1478,7 +1478,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n                     transactions.push_back(_item.GetHex());\n                 }\n             }\n-            obj.push_back(Pair(\"txids\", transactions));\n+            obj.pushKV(\"txids\", transactions);\n             ret.push_back(obj);\n         }\n     }\n@@ -1491,10 +1491,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             int nConf = entry.second.nConf;\n             UniValue obj(UniValue::VOBJ);\n             if (entry.second.fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       entry.first));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"account\",       entry.first);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             ret.push_back(obj);\n         }\n     }\n@@ -1600,7 +1600,7 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n {\n     if (IsValidDestination(dest)) {\n-        entry.push_back(Pair(\"address\", EncodeDestination(dest)));\n+        entry.pushKV(\"address\", EncodeDestination(dest));\n     }\n }\n \n@@ -1634,20 +1634,20 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n         {\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n-                entry.push_back(Pair(\"involvesWatchonly\", true));\n+                entry.pushKV(\"involvesWatchonly\", true);\n             }\n-            entry.push_back(Pair(\"account\", strSentAccount));\n+            entry.pushKV(\"account\", strSentAccount);\n             MaybePushAddress(entry, s.destination);\n-            entry.push_back(Pair(\"category\", \"send\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n             if (pwallet->mapAddressBook.count(s.destination)) {\n-                entry.push_back(Pair(\"label\", pwallet->mapAddressBook[s.destination].name));\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n             }\n-            entry.push_back(Pair(\"vout\", s.vout));\n-            entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n                 WalletTxToJSON(wtx, entry);\n-            entry.push_back(Pair(\"abandoned\", wtx.isAbandoned()));\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n     }\n@@ -1665,28 +1665,28 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             {\n                 UniValue entry(UniValue::VOBJ);\n                 if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n-                    entry.push_back(Pair(\"involvesWatchonly\", true));\n+                    entry.pushKV(\"involvesWatchonly\", true);\n                 }\n-                entry.push_back(Pair(\"account\", account));\n+                entry.pushKV(\"account\", account);\n                 MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n                 {\n                     if (wtx.GetDepthInMainChain() < 1)\n-                        entry.push_back(Pair(\"category\", \"orphan\"));\n+                        entry.pushKV(\"category\", \"orphan\");\n                     else if (wtx.GetBlocksToMaturity() > 0)\n-                        entry.push_back(Pair(\"category\", \"immature\"));\n+                        entry.pushKV(\"category\", \"immature\");\n                     else\n-                        entry.push_back(Pair(\"category\", \"generate\"));\n+                        entry.pushKV(\"category\", \"generate\");\n                 }\n                 else\n                 {\n-                    entry.push_back(Pair(\"category\", \"receive\"));\n+                    entry.pushKV(\"category\", \"receive\");\n                 }\n-                entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n+                entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n                 if (pwallet->mapAddressBook.count(r.destination)) {\n-                    entry.push_back(Pair(\"label\", account));\n+                    entry.pushKV(\"label\", account);\n                 }\n-                entry.push_back(Pair(\"vout\", r.vout));\n+                entry.pushKV(\"vout\", r.vout);\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n                 ret.push_back(entry);\n@@ -1702,12 +1702,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n     if (fAllAccounts || acentry.strAccount == strAccount)\n     {\n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"account\", acentry.strAccount));\n-        entry.push_back(Pair(\"category\", \"move\"));\n-        entry.push_back(Pair(\"time\", acentry.nTime));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n-        entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n-        entry.push_back(Pair(\"comment\", acentry.strComment));\n+        entry.pushKV(\"account\", acentry.strAccount);\n+        entry.pushKV(\"category\", \"move\");\n+        entry.pushKV(\"time\", acentry.nTime);\n+        entry.pushKV(\"amount\", ValueFromAmount(acentry.nCreditDebit));\n+        entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n+        entry.pushKV(\"comment\", acentry.strComment);\n         ret.push_back(entry);\n     }\n }\n@@ -1934,7 +1934,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n     for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n-        ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n+        ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n     }\n     return ret;\n }\n@@ -2074,9 +2074,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"transactions\", transactions));\n-    if (include_removed) ret.push_back(Pair(\"removed\", removed));\n-    ret.push_back(Pair(\"lastblock\", lastblock.GetHex()));\n+    ret.pushKV(\"transactions\", transactions);\n+    if (include_removed) ret.pushKV(\"removed\", removed);\n+    ret.pushKV(\"lastblock\", lastblock.GetHex());\n \n     return ret;\n }\n@@ -2161,18 +2161,18 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n \n-    entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+    entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n     if (wtx.IsFromMe(filter))\n-        entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+        entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n-    entry.push_back(Pair(\"details\", details));\n+    entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n-    entry.push_back(Pair(\"hex\", strHex));\n+    entry.pushKV(\"hex\", strHex);\n \n     return entry;\n }\n@@ -2702,8 +2702,8 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n     for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n-        o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n-        o.push_back(Pair(\"vout\", (int)outpt.n));\n+        o.pushKV(\"txid\", outpt.hash.GetHex());\n+        o.pushKV(\"vout\", (int)outpt.n);\n         ret.push_back(o);\n     }\n \n@@ -2781,24 +2781,24 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n-    obj.push_back(Pair(\"walletname\", pwallet->GetName()));\n-    obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n-    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance())));\n-    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance())));\n-    obj.push_back(Pair(\"txcount\",       (int)pwallet->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\", (int64_t)kpExternalSize));\n+    obj.pushKV(\"walletname\", pwallet->GetName());\n+    obj.pushKV(\"walletversion\", pwallet->GetVersion());\n+    obj.pushKV(\"balance\",       ValueFromAmount(pwallet->GetBalance()));\n+    obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance()));\n+    obj.pushKV(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance()));\n+    obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n+    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        obj.push_back(Pair(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize)));\n+        obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {\n-        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n+        obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n+    obj.pushKV(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK()));\n     if (!masterKeyID.IsNull())\n-         obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+         obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n     return obj;\n }\n \n@@ -3003,31 +3003,31 @@ UniValue listunspent(const JSONRPCRequest& request)\n             continue;\n \n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n-        entry.push_back(Pair(\"vout\", out.i));\n+        entry.pushKV(\"txid\", out.tx->GetHash().GetHex());\n+        entry.pushKV(\"vout\", out.i);\n \n         if (fValidAddress) {\n-            entry.push_back(Pair(\"address\", EncodeDestination(address)));\n+            entry.pushKV(\"address\", EncodeDestination(address));\n \n             if (pwallet->mapAddressBook.count(address)) {\n-                entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n+                entry.pushKV(\"account\", pwallet->mapAddressBook[address].name);\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n-                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n                 }\n             }\n         }\n \n-        entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue)));\n-        entry.push_back(Pair(\"confirmations\", out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.fSpendable));\n-        entry.push_back(Pair(\"solvable\", out.fSolvable));\n-        entry.push_back(Pair(\"safe\", out.fSafe));\n+        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n+        entry.pushKV(\"confirmations\", out.nDepth);\n+        entry.pushKV(\"spendable\", out.fSpendable);\n+        entry.pushKV(\"solvable\", out.fSolvable);\n+        entry.pushKV(\"safe\", out.fSafe);\n         results.push_back(entry);\n     }\n \n@@ -3229,9 +3229,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n-    result.push_back(Pair(\"changepos\", changePosition));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nFeeOut)));\n+    result.pushKV(\"hex\", EncodeHexTx(tx));\n+    result.pushKV(\"changepos\", changePosition);\n+    result.pushKV(\"fee\", ValueFromAmount(nFeeOut));\n \n     return result;\n }\n@@ -3373,14 +3373,14 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", txid.GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(old_fee)));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(new_fee)));\n+    result.pushKV(\"txid\", txid.GetHex());\n+    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n+    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n     UniValue result_errors(UniValue::VARR);\n     for (const std::string& error : errors) {\n         result_errors.push_back(error);\n     }\n-    result.push_back(Pair(\"errors\", result_errors));\n+    result.pushKV(\"errors\", result_errors);\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "f40df29d96a29197f9949b63da80f9ba3152fc79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDBkZjI5ZDk2YTI5MTk3Zjk5NDliNjNkYTgwZjliYTMxNTJmYzc5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-12T14:48:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-12T14:48:37Z"
      },
      "message": "Fix Windows build errors introduced in #10498\n\nFixes #12386",
      "tree": {
        "sha": "3a99c135017cc5af82919bf63449af011b3ffc1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a99c135017cc5af82919bf63449af011b3ffc1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f40df29d96a29197f9949b63da80f9ba3152fc79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40df29d96a29197f9949b63da80f9ba3152fc79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f40df29d96a29197f9949b63da80f9ba3152fc79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40df29d96a29197f9949b63da80f9ba3152fc79/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "06e1f1a37c62aaf33e421c043ebb82de7eb4ed87",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f40df29d96a29197f9949b63da80f9ba3152fc79",
        "patch": "@@ -706,7 +706,7 @@ int main(int argc, char *argv[])\n         if (BitcoinCore::baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), static_cast<HWND>(app.getMainWinId()));\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n             app.exec();\n             app.requestShutdown();"
      },
      {
        "sha": "1e7a76efc081274d70b489303b112149f6472337",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=f40df29d96a29197f9949b63da80f9ba3152fc79",
        "patch": "@@ -56,7 +56,7 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)\n {\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n-    PSHUTDOWNBRCREATE shutdownBRCreate = static_cast<PSHUTDOWNBRCREATE>(GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\"));\n+    PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n     if (shutdownBRCreate == nullptr) {\n         qWarning() << \"registerShutdownBlockReason: GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;"
      }
    ]
  },
  {
    "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTk3Zjg4MDgyNTY1MjEzOTdmMWMwMDNiYjFlOTg5NmZlZTZlYWEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T22:20:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T22:20:18Z"
      },
      "message": "Merge #12416: Fix Windows build errors introduced in #10498\n\nf40df29d96 Fix Windows build errors introduced in #10498 (practicalswift)\n\nPull request description:\n\n  Fix Windows build errors introduced in #10498\n\n  Fixes #12386\n\n  cc @ken2812221, @Sjors, @MarcoFalke and @floreslorca\n\nTree-SHA512: a807521fbd4015971e646fa4bab5495a3aaa97337e7b7d80b9161f33778e84ad6725cf4fbd5a35b50bf3a2bd97747cd7a630b51493ff516c2e1ad74acce148be",
      "tree": {
        "sha": "3a99c135017cc5af82919bf63449af011b3ffc1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a99c135017cc5af82919bf63449af011b3ffc1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaghMiAAoJENLqSFDnUoslILsQAIDkacdLl4EAIygK9B0rBXtr\nn7zggZ/G8cpEvuplnP5CQupkTJ4EDXpCaWBwAa3IhidpxIlMmn3ut97RPMA6FGI8\nt36Xe/mF8TgNP+OPL/EI8sXxlXHlMfY2gj/G+zbZPGBcecL5Z6xVFJKXxtRjbr7i\nV5HCx81q+hUrzEe1eRhDE/WtYwIXhbfUVisVEKt58biaMS3OyV6gGljSYiTU4lMM\nn0kkSBMYxhCFWxz7c6dTH76hL3kcmqUshU/eC4hV4uTVhNbnH2/3iVEbQXcAxsqw\nZSH84FC/eNywakThpBtnOyStIf+6yaBwLnpBQM/kYK45piSqWMXr+pSrhMvmQPAW\n9nBsw2xP/94Tw7UwIWofn2Uei57/eEH1RAEYl15UzeJ2OVnYGgTsan1mIgbxzGY4\nsc58o43BckwdscjG+lBzv/OTmoh6ANX0CH2MN1zTTpT+PdP9dUEZHREZRuJiaT7+\nHs5utU7BqhwFitKZTMIYghldiNiI5ZZJ/QQacV7Sh9HMVdwFN65b5vS9a0uHJhHI\nWQXl3kIUQO5vrNzcMeESaslOL4G7Ydp0c3sCYMF7rcWkUNiG4nE1xcWL6mLMON/9\n3mZVbCv4cPgbGW21MQ0l0cJ+M9nEJ5pXG+PtFF02/3VtqerEatgu4mSMbv12Q9mr\njJcapx+PU+tmKE3yOgta\n=oSBz\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a99c135017cc5af82919bf63449af011b3ffc1a\nparent 5dc00f68c49c46a380a98d06233f90528b8e2557\nparent f40df29d96a29197f9949b63da80f9ba3152fc79\nauthor MarcoFalke <falke.marco@gmail.com> 1518474014 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518474018 -0500\n\nMerge #12416: Fix Windows build errors introduced in #10498\n\nf40df29d96 Fix Windows build errors introduced in #10498 (practicalswift)\n\nPull request description:\n\n  Fix Windows build errors introduced in #10498\n\n  Fixes #12386\n\n  cc @ken2812221, @Sjors, @MarcoFalke and @floreslorca\n\nTree-SHA512: a807521fbd4015971e646fa4bab5495a3aaa97337e7b7d80b9161f33778e84ad6725cf4fbd5a35b50bf3a2bd97747cd7a630b51493ff516c2e1ad74acce148be\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557"
      },
      {
        "sha": "f40df29d96a29197f9949b63da80f9ba3152fc79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40df29d96a29197f9949b63da80f9ba3152fc79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f40df29d96a29197f9949b63da80f9ba3152fc79"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "06e1f1a37c62aaf33e421c043ebb82de7eb4ed87",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c997f8808256521397f1c003bb1e9896fee6eaa0",
        "patch": "@@ -706,7 +706,7 @@ int main(int argc, char *argv[])\n         if (BitcoinCore::baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), static_cast<HWND>(app.getMainWinId()));\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n             app.exec();\n             app.requestShutdown();"
      },
      {
        "sha": "1e7a76efc081274d70b489303b112149f6472337",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=c997f8808256521397f1c003bb1e9896fee6eaa0",
        "patch": "@@ -56,7 +56,7 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)\n {\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n-    PSHUTDOWNBRCREATE shutdownBRCreate = static_cast<PSHUTDOWNBRCREATE>(GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\"));\n+    PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n     if (shutdownBRCreate == nullptr) {\n         qWarning() << \"registerShutdownBlockReason: GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;"
      }
    ]
  },
  {
    "sha": "ceaefdd5f362537a1908d0095059e4be788f3dee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWFlZmRkNWYzNjI1MzdhMTkwOGQwMDk1MDU5ZTRiZTc4OGYzZGVl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-13T05:24:14Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-13T05:38:25Z"
      },
      "message": "fix possible shutdown assertion with -reindex-shutdown\n\nCredit @eklitzke for reproducing.",
      "tree": {
        "sha": "f54323b3c2a4f9c67b166f889946cd52e0b7c470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f54323b3c2a4f9c67b166f889946cd52e0b7c470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceaefdd5f362537a1908d0095059e4be788f3dee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceaefdd5f362537a1908d0095059e4be788f3dee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ceaefdd5f362537a1908d0095059e4be788f3dee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceaefdd5f362537a1908d0095059e4be788f3dee/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dabf7e279efbbc0c5e6c70321c72cbac9f85f760",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ceaefdd5f362537a1908d0095059e4be788f3dee/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ceaefdd5f362537a1908d0095059e4be788f3dee/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ceaefdd5f362537a1908d0095059e4be788f3dee",
        "patch": "@@ -2087,7 +2087,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             nLastWrite = nNow;\n         }\n         // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n-        if (fDoFullFlush) {\n+        if (fDoFullFlush && !pcoinsTip->GetBestBlock().IsNull()) {\n             // Typical Coin structures on disk are around 48 bytes in size.\n             // Pushing a new one to the database can cause it to be written\n             // twice (once in the log, and once in the tables). This is already"
      }
    ]
  },
  {
    "sha": "2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGJjNGE0NzQwY2QyYjkzNDBlNmEyZjNhZTZiMTNkZTQwYjVlZTBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:30:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:31:06Z"
      },
      "message": "Merge #11771: [tests] Change invalidtxrequest to use BitcoinTestFramework\n\n95e2e9a [tests] Change invalidtxrequest to use BitcoinTestFramework (John Newbery)\n359d067 [tests] Fix flake8 warnings in invalidtxrequest (John Newbery)\nc32cf9f [tests] Add P2PDataStore class (John Newbery)\ncc046f6 [tests] Reduce NodeConn connection logging from info to debug (John Newbery)\n\nPull request description:\n\n  Next step in #10603\n\n  - first commit changes log level for an internal log from INFO to DEBUG. (Not really related, but I started finding the INFO level logging annoying when debuging test failures)\n  - second commit introduces a `P2PStub` class - a subclass of `NodeConnCB` which has its own block and tx store and responds appropriately to getdata requests. Not all the functionality is used in `invalidtxrequest.py`, but will be used in `invalidblockrequest.py` and `p2p-fullblocktest` when those are changed to use `BitcoinTestFramework`\n  - third commit tidies up `invalidtxrequest.py`\n  - fourth commit removes usage of `ComparisonTestFramework`\n\nTree-SHA512: f3085c73c15d6ce894e401490bce8a7fa7cf52b0c9d135ff7e351f1f6f517c99accab8588fcdc443f39ea8315329aaabd66b2baa32499df5a774737882030373",
      "tree": {
        "sha": "3e3bf0215f9f487b033ebd7a863f341eb10ed443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e3bf0215f9f487b033ebd7a863f341eb10ed443"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagrBaAAoJEB5K7WKYbNJdqDAIAJk2zibkS0C0TJNuqCmwPbQs\nES5uAS4+NI0005xPfJ+Jiqt1DWKWmHH5Xx1eLG/EVjjK2LyRdAuYY7Hes4Fs+z3+\nXv/K36y/DPxgeSFLa2MgEjyI3nh7yvtFUIaE2hX75UNCZ8yKs0Ewij8/+dy4apyn\nIRvJBEc40Bf4ngUBv716794xj4jDhNlsBgwIYmP6AFhQrEqI8NAwMUdSv/h8r/MN\nLkT29MoibTnmw3UghjypF7PXAyQmeGMCfrd9mcPGqv38SoQ4Q17SEQsqNkBojeQs\n498l78pKgUqGgTPBxJBpEGTJbrCkFq0a/D32+nzJfmg2zj7nBNsNZHXVeQ2FSD4=\n=qXpr\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e3bf0215f9f487b033ebd7a863f341eb10ed443\nparent c997f8808256521397f1c003bb1e9896fee6eaa0\nparent 95e2e9af124595aae4801fc9813ee1c294d404cd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518514241 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518514266 +0100\n\nMerge #11771: [tests] Change invalidtxrequest to use BitcoinTestFramework\n\n95e2e9a [tests] Change invalidtxrequest to use BitcoinTestFramework (John Newbery)\n359d067 [tests] Fix flake8 warnings in invalidtxrequest (John Newbery)\nc32cf9f [tests] Add P2PDataStore class (John Newbery)\ncc046f6 [tests] Reduce NodeConn connection logging from info to debug (John Newbery)\n\nPull request description:\n\n  Next step in #10603\n\n  - first commit changes log level for an internal log from INFO to DEBUG. (Not really related, but I started finding the INFO level logging annoying when debuging test failures)\n  - second commit introduces a `P2PStub` class - a subclass of `NodeConnCB` which has its own block and tx store and responds appropriately to getdata requests. Not all the functionality is used in `invalidtxrequest.py`, but will be used in `invalidblockrequest.py` and `p2p-fullblocktest` when those are changed to use `BitcoinTestFramework`\n  - third commit tidies up `invalidtxrequest.py`\n  - fourth commit removes usage of `ComparisonTestFramework`\n\nTree-SHA512: f3085c73c15d6ce894e401490bce8a7fa7cf52b0c9d135ff7e351f1f6f517c99accab8588fcdc443f39ea8315329aaabd66b2baa32499df5a774737882030373\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0"
      },
      {
        "sha": "95e2e9af124595aae4801fc9813ee1c294d404cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e2e9af124595aae4801fc9813ee1c294d404cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e2e9af124595aae4801fc9813ee1c294d404cd"
      }
    ],
    "stats": {
      "total": 230,
      "additions": 182,
      "deletions": 48
    },
    "files": [
      {
        "sha": "64fada38e2cf26c23375d3484e6918e7373367cb",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 26,
        "deletions": 44,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "patch": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, success=True)\n \n-        '''\n-        Now we need that block to mature so we can spend the coinbase.\n-        '''\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.log.info(\"Mature the block.\")\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, success=False, reject_code=16, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\n \n         # TODO: test further transactions...\n "
      },
      {
        "sha": "46ef7521e098e036559788f5842e8d9592f977ad",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "patch": "@@ -44,6 +44,11 @@\n NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n+MSG_TX = 1\n+MSG_BLOCK = 2\n+MSG_WITNESS_FLAG = 1 << 30\n+MSG_TYPE_MASK = 0xffffffff >> 2\n+\n # Serialization/deserialization tools\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n@@ -204,8 +209,6 @@ def __repr__(self):\n         return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n                                                          self.ip, self.port)\n \n-MSG_WITNESS_FLAG = 1<<30\n-\n class CInv():\n     typemap = {\n         0: \"Error\","
      },
      {
        "sha": "99d0abc3f90cd608679a7a44edc72daab26481d7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 151,
        "deletions": 2,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "patch": "@@ -10,7 +10,9 @@\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n P2PConnection: A low-level connection object to a node's P2P interface\n-P2PInterface: A high-level interface object for communicating to a node over P2P\"\"\"\n+P2PInterface: A high-level interface object for communicating to a node over P2P\n+P2PDataStore: A p2p interface class that keeps a store of transactions and blocks\n+              and can respond correctly to getdata and getheaders messages\"\"\"\n import asyncore\n from collections import defaultdict\n from io import BytesIO\n@@ -86,7 +88,7 @@ def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n         self.network = net\n         self.disconnect = False\n \n-        logger.info('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n \n         try:\n             self.connect((dstaddr, dstport))\n@@ -356,10 +358,22 @@ def wait_for_block(self, blockhash, timeout=60):\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getdata(self, timeout=60):\n+        \"\"\"Waits for a getdata message.\n+\n+        Receiving any getdata message will satisfy the predicate. the last_message[\"getdata\"]\n+        value must be explicitly cleared before calling this method, or this will return\n+        immediately with success. TODO: change this method to take a hash value and only\n+        return true if the correct block/tx has been requested.\"\"\"\n         test_function = lambda: self.last_message.get(\"getdata\")\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getheaders(self, timeout=60):\n+        \"\"\"Waits for a getheaders message.\n+\n+        Receiving any getheaders message will satisfy the predicate. the last_message[\"getheaders\"]\n+        value must be explicitly cleared before calling this method, or this will return\n+        immediately with success. TODO: change this method to take a hash value and only\n+        return true if the correct block header has been requested.\"\"\"\n         test_function = lambda: self.last_message.get(\"getheaders\")\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)\n+        else:\n+            # Check that none of the txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)"
      }
    ]
  },
  {
    "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGY0ZjUxZjFhOTQwYTIzOWM5YjQwNmZlM2IzNjJiZjMzMDNjYmNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:58:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:58:41Z"
      },
      "message": "Merge #11966: clientversion: Use full commit hash for commit-based version descriptions\n\na71c56a clientversion: Use full commit hash for commit-based version descriptions (Luke Dashjr)\n\nPull request description:\n\n  git keeps changing the number of digits in abbreviated hashes, resulting in the GitHub archive hash changing because we include it here.\n  To workaround this and avoid hashes that become increasingly ambiguous later on, just include the full commit hash when building from git.\n  This has no effect on tagged releases.\n\n  (Cleanly mergable back to 0.10 without backport)\n\nTree-SHA512: b0be5391fadd16fbc9bbeffe1574a61c95931cbf6dea885d7e3cfcd3474b89e71767b1b55b4eeeeb66e4e119e78ff579cd9d206366d36928a209a31e1c1eed75",
      "tree": {
        "sha": "3274c5c77f5f819acf8c77fb8b9d2497c934c755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3274c5c77f5f819acf8c77fb8b9d2497c934c755"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagrbRAAoJEB5K7WKYbNJdFgoH/0edY52g1VwzzkH1pL8MdlfL\ns2jQNAKI2+BX1/GiSMNUVIYPRZ1c0mkBoJ+3QFKt9dEHctXuGZU+coVUrEUXVe3f\nVccz3DkAgzzSOLm5RVSUClM5i2/WZH/THHSESRupdAeuxlGEsssqp2hBp6tlJljj\nK5HZFORw2FUh134HfIkXLimnzUh73stat5kRURyTfD/K8Y+w3Oz7f/ShweUVvLJ7\nXGidJxlDvAo+ecbWJ9IKzKdC9lgRRuedWYzAao34mt1YeCPLS7ohqHJQJR8GVZZK\nYsTey4eWt5sHfxls94Na5nS+Ei+qbKP37gEAwAMQgxvz+4pmS2CZNrUP4cu5+jI=\n=TIz7\n-----END PGP SIGNATURE-----",
        "payload": "tree 3274c5c77f5f819acf8c77fb8b9d2497c934c755\nparent 2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d\nparent a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518515897 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518515921 +0100\n\nMerge #11966: clientversion: Use full commit hash for commit-based version descriptions\n\na71c56a clientversion: Use full commit hash for commit-based version descriptions (Luke Dashjr)\n\nPull request description:\n\n  git keeps changing the number of digits in abbreviated hashes, resulting in the GitHub archive hash changing because we include it here.\n  To workaround this and avoid hashes that become increasingly ambiguous later on, just include the full commit hash when building from git.\n  This has no effect on tagged releases.\n\n  (Cleanly mergable back to 0.10 without backport)\n\nTree-SHA512: b0be5391fadd16fbc9bbeffe1574a61c95931cbf6dea885d7e3cfcd3474b89e71767b1b55b4eeeeb66e4e119e78ff579cd9d206366d36928a209a31e1c1eed75\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d"
      },
      {
        "sha": "a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "662fbb6e77c9dfa4fc11b58b0a6754e8e02c3c16",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "patch": "@@ -43,7 +43,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n //! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n #ifdef GIT_ARCHIVE\n-#define GIT_COMMIT_ID \"$Format:%h$\"\n+#define GIT_COMMIT_ID \"$Format:%H$\"\n #define GIT_COMMIT_DATE \"$Format:%cD$\"\n #endif\n "
      }
    ]
  },
  {
    "sha": "b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2Y2MDAyZWQ1ZDEyYjQ2MWViNTZiNzY4ZDA2ZjI0NjhjZDBjMTJl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-02-13T16:46:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-02-13T17:29:00Z"
      },
      "message": "Fix rescan test failure due to unset g_address_type, g_change_type\n\nNew global variables were introduced in #11403 and not setting them causes:\n\n    test_bitcoin: wallet/wallet.cpp:4259: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n    unknown location(0): fatal error in \"importwallet_rescan\": signal: SIGABRT (application abort requested)\n\nIt's possible to reproduce the failure reliably by running:\n\n    src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/importwallet_rescan\n\nFailures happen nondeterministically because boost test framework doesn't run\ntests in a specified order, and tests that run previously can set the global\nvariables and mask the bug.",
      "tree": {
        "sha": "e38f3d2fe9cd0d51a4d4b3fbbbc8c0ad0ce9a9b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e38f3d2fe9cd0d51a4d4b3fbbbc8c0ad0ce9a9b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9db5d639227fbe6348ea79d6be1b5fb28542a3a2",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7f6002ed5d12b461eb56b768d06f2468cd0c12e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7f6002ed5d12b461eb56b768d06f2468cd0c12e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
        "patch": "@@ -451,6 +451,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n // than or equal to key birthday.\n BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n+    g_address_type = OUTPUT_TYPE_DEFAULT;\n+    g_change_type = OUTPUT_TYPE_DEFAULT;\n+\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;"
      }
    ]
  },
  {
    "sha": "be45a67895f1259eaee80cfb122a849a400ae1ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTQ1YTY3ODk1ZjEyNTllYWVlODBjZmIxMjJhODQ5YTQwMGFlMWFk",
    "commit": {
      "author": {
        "name": "Richard Kiss",
        "email": "him@richardkiss.com",
        "date": "2018-02-13T18:34:04Z"
      },
      "committer": {
        "name": "Richard Kiss",
        "email": "him@richardkiss.com",
        "date": "2018-02-13T18:35:04Z"
      },
      "message": "Add some script tests related to BOOL ops and odd values like negative 0.",
      "tree": {
        "sha": "83f886d104dcaa61f66b2f1f265577e98b82b0bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83f886d104dcaa61f66b2f1f265577e98b82b0bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be45a67895f1259eaee80cfb122a849a400ae1ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be45a67895f1259eaee80cfb122a849a400ae1ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be45a67895f1259eaee80cfb122a849a400ae1ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be45a67895f1259eaee80cfb122a849a400ae1ad/comments",
    "author": {
      "login": "richardkiss",
      "id": 5336,
      "node_id": "MDQ6VXNlcjUzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardkiss",
      "html_url": "https://github.com/richardkiss",
      "followers_url": "https://api.github.com/users/richardkiss/followers",
      "following_url": "https://api.github.com/users/richardkiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardkiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardkiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardkiss/subscriptions",
      "organizations_url": "https://api.github.com/users/richardkiss/orgs",
      "repos_url": "https://api.github.com/users/richardkiss/repos",
      "events_url": "https://api.github.com/users/richardkiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardkiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "richardkiss",
      "id": 5336,
      "node_id": "MDQ6VXNlcjUzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardkiss",
      "html_url": "https://github.com/richardkiss",
      "followers_url": "https://api.github.com/users/richardkiss/followers",
      "following_url": "https://api.github.com/users/richardkiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardkiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardkiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardkiss/subscriptions",
      "organizations_url": "https://api.github.com/users/richardkiss/orgs",
      "repos_url": "https://api.github.com/users/richardkiss/repos",
      "events_url": "https://api.github.com/users/richardkiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardkiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccefe52246ee41d64699708be588bf84f5204e9e",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be45a67895f1259eaee80cfb122a849a400ae1ad/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be45a67895f1259eaee80cfb122a849a400ae1ad/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=be45a67895f1259eaee80cfb122a849a400ae1ad",
        "patch": "@@ -168,6 +168,18 @@\n [\"1 0 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 1 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 0 BOOLOR\", \"NOT\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"0x01 0x80\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLOR\"],\n+[\"0x01 0x00\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLOR\"],\n+[\"0x01 0x81\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLOR\"],\n+[\"0x01 0x80\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLAND\"],\n+[\"0x01 0x00\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLAND\"],\n+[\"0x01 0x81\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLAND\"],\n+[\"0x01 0x00\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"non-minimal-0 NOT\"],\n+[\"0x01 0x80\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"negative-0 NOT\"],\n+[\"0x01 0x81\", \"NOT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative 1 NOT\"],\n+[\"0x01 0x80 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"-0 0 NUMEQUAL\"],\n+[\"0x01 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n+[\"0x02 0x00 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n [\"16 17 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],"
      }
    ]
  },
  {
    "sha": "fa27623edbe7530d667e05d513066d1bd5339f41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI3NjIzZWRiZTc1MzBkNjY3ZTA1ZDUxMzA2NmQxYmQ1MzM5ZjQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-13T20:48:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-13T20:42:31Z"
      },
      "message": "qt: Initialize members in WalletModel",
      "tree": {
        "sha": "ab3c59112791a2bde09e9649dddcec82d03bd95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab3c59112791a2bde09e9649dddcec82d03bd95b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa27623edbe7530d667e05d513066d1bd5339f41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJag023AAoJEM4rdWl+aaVIh1IL/2PlH+HQKgcDXP318I96zIFQ\nRUPnGFLENjY1k24YCsHQgmIoJ2fKiL/k/S9unHFqpfe2k4K68nF7GjC50qrIrYOV\nfP3BmF+b79+tdUQA/GSgAxSAdCpKNCNZ9JCIx15nmEbeVKuggJYsnkQbhnCs9AsR\n9obHLA/WyUNP8SPJiUo4os3FAdbpwGMhX+j1AXnYtwxRxTDoat4aHPKjcIegjPFM\nqj8N+/TFhhbuYwU1cEzJu5a6ZqUKB1FUpprGKHCE6lOWSXvdxQysG702FjOttQmc\n1c7xwcvHQ+L3+w5iIs5B7BiKKGDIwJQQ3chFwkkbe54kxK0wf1dk+Mrdfe0Kt/f1\nqFF0AuLna2Xa61i9ps+45gVBulnF2yz60abhc5E8uIIVMzE3gbAL92AxgcZX1/IR\nSV6p19D/dBS3mPkpFxgBr5a4d+R6Y3gzN8ILo0IlQ0BPVcALZ+cdGY0YEPUlQ6Cs\n8ZzJx4D2CMeJ8TY1bXK/cJBIw/4L1sByJK34iT0L3w==\n=ypB1\n-----END PGP SIGNATURE-----",
        "payload": "tree ab3c59112791a2bde09e9649dddcec82d03bd95b\nparent f4f4f51f1a940a239c9b406fe3b362bf3303cbce\nauthor MarcoFalke <falke.marco@gmail.com> 1518554918 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518554551 -0500\n\nqt: Initialize members in WalletModel\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27623edbe7530d667e05d513066d1bd5339f41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27623edbe7530d667e05d513066d1bd5339f41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27623edbe7530d667e05d513066d1bd5339f41/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34954a6bfa98feab6ef9f05dcd4e6693cca2c464",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa27623edbe7530d667e05d513066d1bd5339f41/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa27623edbe7530d667e05d513066d1bd5339f41/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fa27623edbe7530d667e05d513066d1bd5339f41",
        "patch": "@@ -42,6 +42,7 @@ WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, O\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n     cachedBalance(0), cachedUnconfirmedBalance(0), cachedImmatureBalance(0),\n+    cachedWatchOnlyBalance{0}, cachedWatchUnconfBalance{0}, cachedWatchImmatureBalance{0},\n     cachedEncryptionStatus(Unencrypted),\n     cachedNumBlocks(0)\n {"
      }
    ]
  },
  {
    "sha": "deee216bd36a553eb77152240ec18994e06b2c4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWVlMjE2YmQzNmE1NTNlYjc3MTUyMjQwZWMxODk5NGUwNmIyYzRi",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-12T20:36:05Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-14T01:05:22Z"
      },
      "message": "Delete mac_alias patch\n\nThe patch Bitcoin Core has been maintaining for mac_alias was pulled by the mac_alias maintainer in commit 4f31cb084c1c6a8626128b0b00842020b6db9037. Delete the patch and remove the patch from the depends system.\n\nNote that this PR won't be complete until a new version of mac_alias containing the path has been released, and the depends system is updated to reflect the new version.",
      "tree": {
        "sha": "ec6a974f5d4f92c1ef8ba65c316866e0cf75df81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec6a974f5d4f92c1ef8ba65c316866e0cf75df81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deee216bd36a553eb77152240ec18994e06b2c4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deee216bd36a553eb77152240ec18994e06b2c4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deee216bd36a553eb77152240ec18994e06b2c4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deee216bd36a553eb77152240ec18994e06b2c4b/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 0,
      "deletions": 61
    },
    "files": [
      {
        "sha": "f70604f0b501cb507a2055b96efa3d73ad732cb7",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deee216bd36a553eb77152240ec18994e06b2c4b/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deee216bd36a553eb77152240ec18994e06b2c4b/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=deee216bd36a553eb77152240ec18994e06b2c4b",
        "patch": "@@ -4,11 +4,6 @@ $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n $(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n-$(package)_patches=python3.patch\n-\n-define $(package)_preprocess_cmds\n-    patch -p1 < $($(package)_patch_dir)/python3.patch\n-endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "6f2f5534a275d57d3dcb8287823b85e663152904",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "patch": "@@ -1,56 +0,0 @@\n-diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n---- a/mac_alias/alias.py\n-+++ b/mac_alias/alias.py\n-@@ -258,10 +258,10 @@\n-         alias = Alias()\n-         alias.appinfo = appinfo\n-             \n--        alias.volume = VolumeInfo (volname.replace('/',':'),\n-+        alias.volume = VolumeInfo (volname.decode().replace('/',':'),\n-                                    voldate, fstype, disktype,\n-                                    volattrs, volfsid)\n--        alias.target = TargetInfo (kind, filename.replace('/',':'),\n-+        alias.target = TargetInfo (kind, filename.decode().replace('/',':'),\n-                                    folder_cnid, cnid,\n-                                    crdate, creator_code, type_code)\n-         alias.target.levels_from = levels_from\n-@@ -276,9 +276,9 @@\n-                 b.read(1)\n- \n-             if tag == TAG_CARBON_FOLDER_NAME:\n--                alias.target.folder_name = value.replace('/',':')\n-+                alias.target.folder_name = value.decode().replace('/',':')\n-             elif tag == TAG_CNID_PATH:\n--                alias.target.cnid_path = struct.unpack(b'>%uI' % (length // 4),\n-+                alias.target.cnid_path = struct.unpack('>%uI' % (length // 4),\n-                                                            value)\n-             elif tag == TAG_CARBON_PATH:\n-                 alias.target.carbon_path = value\n-@@ -313,9 +313,9 @@\n-                 alias.target.creation_date \\\n-                     = mac_epoch + datetime.timedelta(seconds=seconds)\n-             elif tag == TAG_POSIX_PATH:\n--                alias.target.posix_path = value\n-+                alias.target.posix_path = value.decode()\n-             elif tag == TAG_POSIX_PATH_TO_MOUNTPOINT:\n--                alias.volume.posix_path = value\n-+                alias.volume.posix_path = value.decode()\n-             elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n-                 alias.volume.disk_image_alias = Alias.from_bytes(value)\n-             elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n-@@ -467,12 +467,12 @@\n- \n-         b.write(struct.pack(b'>hhQhhQ',\n-                 TAG_HIGH_RES_VOLUME_CREATION_DATE,\n--                8, long(voldate * 65536),\n-+                8, int(voldate * 65536),\n-                 TAG_HIGH_RES_CREATION_DATE,\n--                8, long(crdate * 65536)))\n-+                8, int(crdate * 65536)))\n- \n-         if self.target.cnid_path:\n--            cnid_path = struct.pack(b'>%uI' % len(self.target.cnid_path),\n-+            cnid_path = struct.pack('>%uI' % len(self.target.cnid_path),\n-                                     *self.target.cnid_path)\n-             b.write(struct.pack(b'>hh', TAG_CNID_PATH,\n-                                  len(cnid_path)))"
      }
    ]
  },
  {
    "sha": "fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzFiZmNmOWZkMmMyNDg0NmE5ZjljYWE0MmY1MzcwZjE5MmMzZDQw",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-14T01:01:22Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-14T01:05:22Z"
      },
      "message": "Update mac_alias to 2.0.7",
      "tree": {
        "sha": "59e3161b538143da5fba5d69c22048d2083213d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59e3161b538143da5fba5d69c22048d2083213d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "deee216bd36a553eb77152240ec18994e06b2c4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deee216bd36a553eb77152240ec18994e06b2c4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deee216bd36a553eb77152240ec18994e06b2c4b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "306c8356567bcef2100ab5c265d3713d793913b4",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
        "patch": "@@ -1,8 +1,8 @@\n package=native_mac_alias\n-$(package)_version=2.0.6\n+$(package)_version=2.0.7\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n+$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n \n define $(package)_build_cmds"
      }
    ]
  },
  {
    "sha": "252ae7111cbff09a4cbc5caee9e02b6ed3580476",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTJhZTcxMTFjYmZmMDlhNGNiYzVjYWVlOWUwMmI2ZWQzNTgwNDc2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-14T01:25:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-14T01:34:42Z"
      },
      "message": "Merge #12424: Fix rescan test failure due to unset g_address_type, g_change_type\n\nb7f6002ed5 Fix rescan test failure due to unset g_address_type, g_change_type (Russell Yanofsky)\n\nPull request description:\n\n  New global variables were introduced in #11403 and not setting them causes:\n\n  ```\n  test_bitcoin: wallet/wallet.cpp:4259: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n  unknown location(0): fatal error in \"importwallet_rescan\": signal: SIGABRT (application abort requested)\n  ```\n\n  It's possible to reproduce the failure reliably by running:\n\n  ```\n  src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/importwallet_rescan\n  ```\n\n  Failures happen nondeterministically because boost test framework doesn't run tests in a specified order, and tests that run previously can set the global variables and mask the bug.\n\n  This is similar to bug #12150. Example travis failure is https://travis-ci.org/bitcoin/bitcoin/jobs/340642010\n\nTree-SHA512: ab40662b3356892b726f1f552e22d58d86b5e982538741e52b37ee447a0c97c76c24ae543687edf2e25d9dd925722909d37abfae95d93bf09e23fa245a4c3351",
      "tree": {
        "sha": "77a1125225219d72b551989318e1a3353a63f9d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77a1125225219d72b551989318e1a3353a63f9d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJag5IzAAoJEKY26XYx92fgZPkQAJzLkH6e51c9oOkYRD1y33EN\nnp/TOLVYT3eVC8MSMrFcOjZ3iwfkJ/7tUcV/APvHeZlCCbCEHjglXABqCN9I6/Rj\n+gY2ifx8SebPxgrAmMmKAavW8YlDCroCezUiLN/GjqD7W4/SY3P0C7rFWNdiQxao\ng99Oc76BZBu09GUG2t7fLFZntVhIyo7AigGd5HTErFDA4medvKthKUQVY9u9b+A5\n8L0rk+EoD6OhkW1LOp73Kae0hAVZvNl0xy/PmKReotSrdfffmNrt8HacAwZ5+gaP\nakqfd/MDNk4UcFVurVz13YZioNk7yx8n/0lz10su8jLiKpE0aGZp2T9RVyGBt1Yf\nHePJipq/rvwN2HSG4nSPheR6MUgz9d5UYpndVw7Ejc+aJ7mdNLs/MgINXp8Fjnmc\njer9ycwQBew2//3TP770p/Ii+ZDMSQIVPggcb5jSEI61hOCo8KCOtcN1vfVwMcU2\n7pbfvl7Ldu+fIRuvHv7yL46pT4VKr7NQ2VF7Nuy5DWYsXHefvP6vAOty6Oofq2I2\n8mwQH7NSZP5NFgo0pUXXm9AnBNOxACUslJaJLIXSNhphtWFdio/xbhHTG9BTeegO\nJl+G6GCLZ8V+1BDZ5hMPHFzYIMNaaKJnyiApFkn6VfWF2yaq8pYK6K/bXQxfFy58\nGNNGkbrVhsWwHFQVIaLz\n=P08w\n-----END PGP SIGNATURE-----",
        "payload": "tree 77a1125225219d72b551989318e1a3353a63f9d9\nparent f4f4f51f1a940a239c9b406fe3b362bf3303cbce\nparent b7f6002ed5d12b461eb56b768d06f2468cd0c12e\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1518571516 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1518572082 -0800\n\nMerge #12424: Fix rescan test failure due to unset g_address_type, g_change_type\n\nb7f6002ed5 Fix rescan test failure due to unset g_address_type, g_change_type (Russell Yanofsky)\n\nPull request description:\n\n  New global variables were introduced in #11403 and not setting them causes:\n\n  ```\n  test_bitcoin: wallet/wallet.cpp:4259: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n  unknown location(0): fatal error in \"importwallet_rescan\": signal: SIGABRT (application abort requested)\n  ```\n\n  It's possible to reproduce the failure reliably by running:\n\n  ```\n  src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/importwallet_rescan\n  ```\n\n  Failures happen nondeterministically because boost test framework doesn't run tests in a specified order, and tests that run previously can set the global variables and mask the bug.\n\n  This is similar to bug #12150. Example travis failure is https://travis-ci.org/bitcoin/bitcoin/jobs/340642010\n\nTree-SHA512: ab40662b3356892b726f1f552e22d58d86b5e982538741e52b37ee447a0c97c76c24ae543687edf2e25d9dd925722909d37abfae95d93bf09e23fa245a4c3351\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      },
      {
        "sha": "b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7f6002ed5d12b461eb56b768d06f2468cd0c12e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9db5d639227fbe6348ea79d6be1b5fb28542a3a2",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/252ae7111cbff09a4cbc5caee9e02b6ed3580476/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/252ae7111cbff09a4cbc5caee9e02b6ed3580476/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "patch": "@@ -451,6 +451,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n // than or equal to key birthday.\n BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n+    g_address_type = OUTPUT_TYPE_DEFAULT;\n+    g_change_type = OUTPUT_TYPE_DEFAULT;\n+\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;"
      }
    ]
  },
  {
    "sha": "5f605e172baee35421eb20736601befdd8cad796",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjYwNWUxNzJiYWVlMzU0MjFlYjIwNzM2NjAxYmVmZGQ4Y2FkNzk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-13T21:04:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-14T01:37:47Z"
      },
      "message": "Make signrawtransaction accept P2SH-P2WSH redeemscripts",
      "tree": {
        "sha": "3991b450a2bb676a26c51ac025cf56c176ce784f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3991b450a2bb676a26c51ac025cf56c176ce784f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f605e172baee35421eb20736601befdd8cad796",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f605e172baee35421eb20736601befdd8cad796",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f605e172baee35421eb20736601befdd8cad796",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f605e172baee35421eb20736601befdd8cad796/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252ae7111cbff09a4cbc5caee9e02b6ed3580476"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bbc0459a7c1226c4638832d89a7af8c85e06344c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f605e172baee35421eb20736601befdd8cad796/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f605e172baee35421eb20736601befdd8cad796/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5f605e172baee35421eb20736601befdd8cad796",
        "patch": "@@ -848,6 +848,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     tempKeystore.AddCScript(redeemScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGMyMTg4ZGEyN2ZkZjZmYTYyZGQ0NzdiMDBiOGYwZWRlOTk0YTBl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T11:48:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T11:53:46Z"
      },
      "message": "Merge #12232: Improve \"Turn Windows Features On or Off\" step\n\n9b6454c Improve \"Turn Windows Features On or Off\" step (Ernest Hemingway)\n\nPull request description:\n\n  Originally, this readme suggests searching for 'turn' to open this dialog but this will not necessarily work on all windows 10 PCs. It's better to use the executable name instead, which is consistent across installations.\n\nTree-SHA512: e5b95dd69a9a186ea5cd9c7aac2283e77f1857ecf628f8ad6ac0411f362c8aeb52e3bcffb46b90e3bab52f45fa244f269b1777f83d3e0519ac8a95935f7fb5b4",
      "tree": {
        "sha": "a1b16da9ac2c7a47e02360e1502fbeeb5b4e2468",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1b16da9ac2c7a47e02360e1502fbeeb5b4e2468"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahCNKAAoJEB5K7WKYbNJd31IH/0GzpH4nF7BGAT0JVO5zr6i+\nnOUmNoLh4zrsv+4RDKCTIMAda1u90uVr8ET5qYtJn3Snw1cZJZQDQdudKsr7t+BU\nMgop7Hu+2XF29Xka+8mHVGXzKrXEqzGlWD1tEL4g01laQe7GY/IKqXQ4od3igT7U\nIFkEmcxkm2FeyBN93dM8d/Pczjjg75avX49l+E0gjVKSsYNYsQTC59NhyIpRWtgY\njuKbv8QnNEQWshNMO/DtBQlJ2ZpxC/XqDVX0BjxPEN58Eg/qeoYknWSnv3Xq57BE\n82dcGVF5cBRxpqPk2gQ8Yl5g0F0kATcJDUKto4UoiaWBkvgsmnzu401IG4DTg3U=\n=fJtt\n-----END PGP SIGNATURE-----",
        "payload": "tree a1b16da9ac2c7a47e02360e1502fbeeb5b4e2468\nparent 252ae7111cbff09a4cbc5caee9e02b6ed3580476\nparent 9b6454c52ae5d53394fc6542e9f3e02a1388fbe9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518608932 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518609226 +0100\n\nMerge #12232: Improve \"Turn Windows Features On or Off\" step\n\n9b6454c Improve \"Turn Windows Features On or Off\" step (Ernest Hemingway)\n\nPull request description:\n\n  Originally, this readme suggests searching for 'turn' to open this dialog but this will not necessarily work on all windows 10 PCs. It's better to use the executable name instead, which is consistent across installations.\n\nTree-SHA512: e5b95dd69a9a186ea5cd9c7aac2283e77f1857ecf628f8ad6ac0411f362c8aeb52e3bcffb46b90e3bab52f45fa244f269b1777f83d3e0519ac8a95935f7fb5b4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252ae7111cbff09a4cbc5caee9e02b6ed3580476"
      },
      {
        "sha": "9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a10654c7eea4c3a8de3542d5b664d4b65c10ac56",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "patch": "@@ -34,10 +34,9 @@ Full instructions to install WSL are available on the above link.\n To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n \n 1. Enable the Windows Subsystem for Linux feature\n-  * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n-  * Select Windows Subsystem for Linux\n-  * Click OK\n-  * Restart if necessary\n+  * Open the Windows Features dialog (`OptionalFeatures.exe`)\n+  * Enable 'Windows Susbsystem for Linux'\n+  * Click 'OK' and restart if necessary\n 2. Install Ubuntu\n   * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)\n   * Click Install"
      }
    ]
  },
  {
    "sha": "0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2M0NWVkYzBmOGE4ZThkNzU2OWM4OTZlNDg3ZmY1ZjhmMTFjNDQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:42:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:43:55Z"
      },
      "message": "Merge #12409: rpc: Reject deprecated reserveChangeKey in fundrawtransaction\n\nfa5f518 rpc: Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 8506d1494b13c4582b1379e3b8c3906016f1980ebe847727a43a90e7bb9f71b896a1792bc97a8dc7320ccce0534050eb04f92a6f82f811d08efa74a98b3e43f0",
      "tree": {
        "sha": "324b8409d1910b3ed6c9985fbb2a8e5e983e9a22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/324b8409d1910b3ed6c9985fbb2a8e5e983e9a22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahFk7AAoJEB5K7WKYbNJdzWMH/29Xno4wXhEWFDcYx/GfLMEd\nIKEWRSxjDqPojNIEkyAp/7mVpG79PBuep9kPB0EtNjCDf+99vNBr0Qk3/o8Ppd28\nlDlXdbdYXUCqQizIknGsOez266xd4Myd0Q0LhoYPW4H0JuGRouZ/ChblqPNiLXrm\nYuqwSY3XCQULpvpoM+83qYI689/CX6UUcb5mzZRA9yHrKFXCtfVhThdG5Ngsyt9v\nw7T5mnbLREbnTKlKG3CrHgyzxu/X10dMPMA/YLwjH7e8P7EgIxHZcTsFb7EEKRnO\naDQ2RtIEQwdowJX6t4pEBRKcYhcmFDBlq7Gy3ppTldumaN6iNnKiPgW2AGYJQfY=\n=wB4O\n-----END PGP SIGNATURE-----",
        "payload": "tree 324b8409d1910b3ed6c9985fbb2a8e5e983e9a22\nparent fdc2188da27fdf6fa62dd477b00b8f0ede994a0e\nparent fa5f51830d2649cace2fc827084093019497c151\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518622960 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518623035 +0100\n\nMerge #12409: rpc: Reject deprecated reserveChangeKey in fundrawtransaction\n\nfa5f518 rpc: Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 8506d1494b13c4582b1379e3b8c3906016f1980ebe847727a43a90e7bb9f71b896a1792bc97a8dc7320ccce0534050eb04f92a6f82f811d08efa74a98b3e43f0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e"
      },
      {
        "sha": "fa5f51830d2649cace2fc827084093019497c151",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f51830d2649cace2fc827084093019497c151",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5f51830d2649cace2fc827084093019497c151"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "528cb81a385fe0b793f19a79b4d9c74c10d3a4f6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "patch": "@@ -56,6 +56,13 @@ frequently tested on them.\n Notable changes\n ===============\n \n+RPC changes\n+------------\n+\n+### Low-level changes\n+\n+- The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n+\n Credits\n =======\n "
      },
      {
        "sha": "c03f7d7923901d3007acb69252d6dc0049f2ce2b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "patch": "@@ -3129,7 +3129,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)}, // DEPRECATED (and ignored), should be removed in 0.16 or so.\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},"
      },
      {
        "sha": "4d3be18516d49373f082ea917afbdf2b5df34dd5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "patch": "@@ -181,6 +181,9 @@ def run_test(self):\n \n         assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n+        # reserveChangeKey was deprecated and is now removed\n+        assert_raises_rpc_error(-3, \"Unexpected key reserveChangeKey\", lambda: self.nodes[2].fundrawtransaction(hexstring=rawtx, options={'reserveChangeKey': True}))\n+\n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n         ############################################################"
      }
    ]
  },
  {
    "sha": "6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmI5YzEzZjlhMmIwZmYxMzI4Yjc2MDVkNGI5MDFhNjQ2YWIzNWZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:52:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:52:46Z"
      },
      "message": "Merge #11866: Do not un-mark fInMempool on wallet txn if ATMP fails.\n\n6ef86c9 Do not un-mark fInMempool on wallet txn if ATMP fails. (Matt Corallo)\n\nPull request description:\n\n  Irrespective of the failure reason, un-marking fInMempool\n  out-of-order is incorrect - it should be unmarked when\n  TransactionRemovedFromMempool fires.\n\n  Clean up of #11839, which I think was the wrong fix.\n\nTree-SHA512: 580731297eeac4c4c99ec695e15b09febf62249237bc367fcd1830fc811d3166f9336e7aba7f2f6f8601960984ae22cebed781200db0f04e7cd2008db1a83f64",
      "tree": {
        "sha": "6b723f764f4f9d851bf1b0bf5051c273b4fe9c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b723f764f4f9d851bf1b0bf5051c273b4fe9c44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahFtOAAoJEB5K7WKYbNJdcAUH/R6/1eZ+vBa239Yjk65XQrRy\nKRFglQPBypAuL2dWhddoYbao25JKLcyy64AK7qepj+YkX8IkSY+trB2YgCZkNMoj\ncdww2gH88oswm67s4Gudwg5XV7SSo3NfZHsfWxSrDeNQCLn3PLQJIuB/KIZVEZ3y\nVswNJNp+N5jsxYQG3F9Wx5bP9rKsZbvjvG+4Eao1eE41FoW156b7Zfb1qvPp1jhG\n0ahrkVB4GP3qwAHYh12kDTyyo54UMjIH4s3DwSaRsqbQjUJiBBgKhJ5ZMmbt5209\nes/L8C6aqDzooF74zHI6XII7UBQHkZA6Tazu3XnSzfsRkVIZ70CuLb46HucXvtA=\n=7OZs\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b723f764f4f9d851bf1b0bf5051c273b4fe9c44\nparent 0cc45edc0f8a8e8d7569c896e487ff5f8f11c445\nparent 6ef86c92e7fcba866160d7a346fb260d7e4ab5bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518623555 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518623566 +0100\n\nMerge #11866: Do not un-mark fInMempool on wallet txn if ATMP fails.\n\n6ef86c9 Do not un-mark fInMempool on wallet txn if ATMP fails. (Matt Corallo)\n\nPull request description:\n\n  Irrespective of the failure reason, un-marking fInMempool\n  out-of-order is incorrect - it should be unmarked when\n  TransactionRemovedFromMempool fires.\n\n  Clean up of #11839, which I think was the wrong fix.\n\nTree-SHA512: 580731297eeac4c4c99ec695e15b09febf62249237bc367fcd1830fc811d3166f9336e7aba7f2f6f8601960984ae22cebed781200db0f04e7cd2008db1a83f64\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445"
      },
      {
        "sha": "6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a57c472126e0a84b6f5fdbe95c372d89a67ece7c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
        "patch": "@@ -4179,19 +4179,14 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    // Quick check to avoid re-setting fInMempool to false\n-    if (mempool.exists(tx->GetHash())) {\n-        return false;\n-    }\n-\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that the transaction they just generated's change is\n     // unavailable as we're not yet aware its in mempool.\n     bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n-    fInMempool = ret;\n+    fInMempool |= ret;\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzgyMDk5YTE1MWE2ODA1MjNjZDhmZjVlM2ZjYjlkNWNjMTgyYmRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T16:25:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T16:26:53Z"
      },
      "message": "Merge #11733: qt: Remove redundant locks\n\nd6f3a73 Remove redundant locks (practicalswift)\n\nPull request description:\n\n  Remove redundant locks:\n  * ~~`FindNode(...)` is locking `cs_vNodes` internally~~\n  * `SetAddressBook(...)` is locking `cs_wallet` internally\n  * `DelAddressBook(...)` is locking `cs_wallet` internally\n\n  **Note to reviewers:** From what I can tell these locks are redundantly held from a data integrity perspective (guarding specific variables), and they do not appear to be needed from a data consistency perspective (ensuring a consistent state at the right points). Review thoroughly and please let me know if I'm mistaken :-)\n\nTree-SHA512: 7e3ca2d52fecb16385dc65051b5b20d81b502c0025d70b0c489eb3881866bdd57947a9c96931f7b213f5a8a76b6d2c7b084dff0ef2028a1e9ca9ccfd83e5b91e",
      "tree": {
        "sha": "beec2c41d354e8ca7174e2a9a29d7c3d0c0f2e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beec2c41d354e8ca7174e2a9a29d7c3d0c0f2e75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahGNNAAoJEB5K7WKYbNJdAWAH/3/2zdmO39NXh0mMavfniCKF\nu6qDHdiQ4xITrbJ+8VHqrRIDVQGnVfa+Aw6q1iCreysK8szAUacO6NOLiuNVpmMy\nEsQH6jrJCMkxNha7Ei6FwYEWmdjhyMewZWbQ/nNv9Wh+truVDCGm3FdrOovI9QLa\nkPh/nEIBUSC5S4i3+BXih4XcVqQrXZGENFhQ47PCK8bDfe8pU5M2QH6LtNBlfrCU\ng/wm4ckfLse/24NoQdjmqEVdytb8y/WP4/BoDBs+VBbiASW44+FlJ3lT4YkLN7nh\nc6xoE7BFUWg/LKFtQeTxlzM5Fh9pYoRpTF8y7zCxZ6O2kBOWJ5H95mtCK/7tJjk=\n=4Njl\n-----END PGP SIGNATURE-----",
        "payload": "tree beec2c41d354e8ca7174e2a9a29d7c3d0c0f2e75\nparent 6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd\nparent d6f3a737361d8fb562f08763f613a6529b870d1e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518625557 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518625613 +0100\n\nMerge #11733: qt: Remove redundant locks\n\nd6f3a73 Remove redundant locks (practicalswift)\n\nPull request description:\n\n  Remove redundant locks:\n  * ~~`FindNode(...)` is locking `cs_vNodes` internally~~\n  * `SetAddressBook(...)` is locking `cs_wallet` internally\n  * `DelAddressBook(...)` is locking `cs_wallet` internally\n\n  **Note to reviewers:** From what I can tell these locks are redundantly held from a data integrity perspective (guarding specific variables), and they do not appear to be needed from a data consistency perspective (ensuring a consistent state at the right points). Review thoroughly and please let me know if I'm mistaken :-)\n\nTree-SHA512: 7e3ca2d52fecb16385dc65051b5b20d81b502c0025d70b0c489eb3881866bdd57947a9c96931f7b213f5a8a76b6d2c7b084dff0ef2028a1e9ca9ccfd83e5b91e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd"
      },
      {
        "sha": "d6f3a737361d8fb562f08763f613a6529b870d1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6f3a737361d8fb562f08763f613a6529b870d1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6f3a737361d8fb562f08763f613a6529b870d1e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ffb5bff4defaed342a0f3b192c9bb2b2adccd1ba",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e782099a151a680523cd8ff5e3fcb9d5cc182bdd/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e782099a151a680523cd8ff5e3fcb9d5cc182bdd/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "patch": "@@ -393,11 +393,8 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     }\n \n     // Add entry\n-    {\n-        LOCK(wallet->cs_wallet);\n-        wallet->SetAddressBook(DecodeDestination(strAddress), strLabel,\n-                               (type == Send ? \"send\" : \"receive\"));\n-    }\n+    wallet->SetAddressBook(DecodeDestination(strAddress), strLabel,\n+                           (type == Send ? \"send\" : \"receive\"));\n     return QString::fromStdString(strAddress);\n }\n \n@@ -411,10 +408,7 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent\n         // Also refuse to remove receiving addresses.\n         return false;\n     }\n-    {\n-        LOCK(wallet->cs_wallet);\n-        wallet->DelAddressBook(DecodeDestination(rec->address.toStdString()));\n-    }\n+    wallet->DelAddressBook(DecodeDestination(rec->address.toStdString()));\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "ada1af6d8f79357ddd18ff80324bbacca63ab95a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGExYWY2ZDhmNzkzNTdkZGQxOGZmODAzMjRiYmFjY2E2M2FiOTVh",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T01:54:41Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T01:54:41Z"
      },
      "message": "Fix typo in test_runner.py causing error",
      "tree": {
        "sha": "94e8c619a679c8e45177df9c8321fde5ef00a793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94e8c619a679c8e45177df9c8321fde5ef00a793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e782099a151a680523cd8ff5e3fcb9d5cc182bdd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "945f645eac2adaa8d50a32fd4ecd623fa930e643",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada1af6d8f79357ddd18ff80324bbacca63ab95a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada1af6d8f79357ddd18ff80324bbacca63ab95a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ada1af6d8f79357ddd18ff80324bbacca63ab95a",
        "patch": "@@ -342,7 +342,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([sys.executble, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs, _ = subprocess.Popen([sys.executable, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))"
      }
    ]
  },
  {
    "sha": "b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjA4OWM1MWNjNGFmMmY3ZTFjMGVjNzViZTk0NDllZTIyMmIxZDY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T04:10:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T04:10:22Z"
      },
      "message": "Merge #12438: [Tests] Fix trivial typo in test_runner.py causing error\n\nada1af6d8f Fix typo in test_runner.py causing error (MeshCollider)\n\nPull request description:\n\n  In the case that a test fails, the typo in run_tests() (introduced in #11858) will cause an error rather than printing out the combined logs, hiding the cause of the failure.\n\nTree-SHA512: 7d7aa406d92750320ed20610cc5f174cdc94086f630af8c0c4db2003497132e0c56d59b94312fb42ad4507904a2fa858226a4a9337450930bf206183fc35c0a0",
      "tree": {
        "sha": "94e8c619a679c8e45177df9c8321fde5ef00a793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94e8c619a679c8e45177df9c8321fde5ef00a793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJahQguAAoJENLqSFDnUosl3x0P/1e+yudK+zN7/x0iEtmV/ta/\ncSxg1CHwdsZ1ltgX7YtJeKXYtk4fObYDTOGQXzQBpRnEtUcPOGWpI/1beFtWgAds\nud9Y04zVKSOLmY02XhyfTsroNp/vZZ1MvRZz/m5CqndPc490SjWHF8pkEuCByetO\nd2asNXKUIgeqMhJ9edzVIRlAHBcXvjjW2d5iTY+bWzsmCDTAbdx1oAKG4h4LpTNM\nT5TC17IDXqt+JM+l/I5aoB1RRuTLTb4PDqCMvOnjYzWSJr7TgccmNoX1eA9ttSuA\ndyA5uO4iLgVF76hHywT3A/4yUGQJrTHc23XR1nHKjuBucsowholJkoqruhAxI6VT\nW8G2bBdlke4xpShQBD+HypSMUv+D0WkXC5g9TVIpNzswmeMZU3zjuEZY86NVC287\nwV0FY53LaBYdRl48LGAQx4QgFYaciLxiRGChTAdDF7EzY+ucvmeHkQQGR7hTdQ6h\nH1qHYdmmqPXKbBXDOhrW8G6LSNOzI2WmOVtKDyeDzwe2F0sL4Brfr5gNDXqrTHuW\nReXWkTVvwX4y72mez39VyhHJhr1qAh0Se/lCmzuNhV9o805ft1v+S9M9IjmJ3WgE\ne6o0QAZx4iklvZsfjoPMa/yHHayXN+IIN0FvgfTRjfJrUiPfvYYTM/heM6860h4D\nj5FVQcsrnlvLrLlzbDNV\n=IQmg\n-----END PGP SIGNATURE-----",
        "payload": "tree 94e8c619a679c8e45177df9c8321fde5ef00a793\nparent e782099a151a680523cd8ff5e3fcb9d5cc182bdd\nparent ada1af6d8f79357ddd18ff80324bbacca63ab95a\nauthor MarcoFalke <falke.marco@gmail.com> 1518667819 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518667822 -0500\n\nMerge #12438: [Tests] Fix trivial typo in test_runner.py causing error\n\nada1af6d8f Fix typo in test_runner.py causing error (MeshCollider)\n\nPull request description:\n\n  In the case that a test fails, the typo in run_tests() (introduced in #11858) will cause an error rather than printing out the combined logs, hiding the cause of the failure.\n\nTree-SHA512: 7d7aa406d92750320ed20610cc5f174cdc94086f630af8c0c4db2003497132e0c56d59b94312fb42ad4507904a2fa858226a4a9337450930bf206183fc35c0a0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e782099a151a680523cd8ff5e3fcb9d5cc182bdd"
      },
      {
        "sha": "ada1af6d8f79357ddd18ff80324bbacca63ab95a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ada1af6d8f79357ddd18ff80324bbacca63ab95a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "945f645eac2adaa8d50a32fd4ecd623fa930e643",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "patch": "@@ -342,7 +342,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([sys.executble, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs, _ = subprocess.Popen([sys.executable, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))"
      }
    ]
  },
  {
    "sha": "5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTEwODU5YTgwYmQ1NzFmYTNkOGZkOGI1MjcyNjlmMmU2Zjg0ODhm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T00:57:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:43Z"
      },
      "message": "[depends] expat 2.2.5",
      "tree": {
        "sha": "b515e4c06e8ab87ebb0d1a7b7ab057790a9b7773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b515e4c06e8ab87ebb0d1a7b7ab057790a9b7773"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsGhsBAAtWwEqErXmQcCf1dcVEmK5nK9A5Dc5SSJ5Mn1StFuKbuRWrTTeMnTjqvW\nfUJOSFc1IG3rXjpv0iYf9xbpdPp8AMQPjcbslR68DWbxJCZ1wBBKuU/b5aFujmef\nAtrnVCB12FkuJpFfSvn8sUDVQy/RxoLKW1//m+xXSCtSjuSUqlGOw0sXuXd2aRi7\nQcv6pewUerptwh02W5EFePRG6IQYI//xHGfeD6h35xoPTsAu4zVDpWpidSzftme7\nr/qSjmGzkBVdHiit59zHM7gVh1lsUc86rfIsB6/dCz3czoawVeGHDhIGmt5HdIT1\n8JPPrX8zR2ENf3TRWdXVPNOet0VPMauS1aW7ilGeNrwI+Q2gMLRGygiaftpNhhMk\nksXLRfH9Xb2F4/22A5W7XJJBcsydLhD5RFeSoRNGI3g/0BK3N1RRaExFuhDvBysS\nYJ57Dv1XcWZ7qFIP4mFAicio76N5H6qmU/ZonN9LUlkwqWJv/Ye2RYlJs/0tv7qm\nnN+lFaK8nFUULd5qWBuHki2FO39XiLTaipZESifPtoGn0XogMgdeRnlFGo50GeXd\n+1sowMAJusU+gWqDLoyaTxZi8iW4/n/uhCBPIRMqXAvWps+JouLAasbMUreGAAHj\nByC5jK4eBQE36hQ8T3NsK0jiH3gPYwQFNWp84Ce7XxC9sHjsa/Y=\n=bpuY\n-----END PGP SIGNATURE-----",
        "payload": "tree b515e4c06e8ab87ebb0d1a7b7ab057790a9b7773\nparent b2089c51cc4af2f7e1c0ec75be9449ee222b1d69\nauthor fanquake <fanquake@gmail.com> 1518224255 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691483 +0800\n\n[depends] expat 2.2.5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "acbc60eea3e8ace144fbfd2ea13cd16772eb8134",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "patch": "@@ -1,8 +1,8 @@\n package=expat\n-$(package)_version=2.2.1\n-$(package)_download_path=https://downloads.sourceforge.net/project/expat/expat/$($(package)_version)\n+$(package)_version=2.2.5\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_5/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=1868cadae4c82a018e361e2b2091de103cd820aaacb0d6cfa49bd2cd83978885\n+$(package)_sha256_hash=d9dc32efba7e74f788fcc4f212a43216fc37cf5f23f4c2339664d473353aedf6\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-static"
      },
      {
        "sha": "62516d0881289678eb15e9b365db7c3074b88f94",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "patch": "@@ -10,7 +10,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | ccache | [3.3.4](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n-| Expat | [2.2.1](https://libexpat.github.io/) |  | No | Yes |  |\n+| Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n | GCC |  | [4.8+](https://gcc.gnu.org/) |  |  |  |"
      }
    ]
  },
  {
    "sha": "61647a4b868f3d798cdac2404de0f474720ba1fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTY0N2E0Yjg2OGYzZDc5OGNkYWMyNDA0ZGUwZjQ3NDcyMGJhMWZh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T01:00:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:44Z"
      },
      "message": "[depends] ccache 3.4.1",
      "tree": {
        "sha": "6b3788d119e55975fee6dc7ec8b36182c74ed519",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b3788d119e55975fee6dc7ec8b36182c74ed519"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61647a4b868f3d798cdac2404de0f474720ba1fa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsHacBAAroYZG7aSP/LokCd1alnAQNDVgybv81Gp0GoR2dfS2XZDlule8r5VzjlO\nTDWxLOX4vqsb/eVmL5ngT4GZ1cxUsBXY8OkzoHco3BsRNmqVRubnTMnaK7F9NYCW\ng9e1IbDrg2Duow5JEjfF3ssknQSE1CjLgMegYJp297cSftHDwbzdK7l8p57eYGKi\n0+103rpEzWUnXtjU8xEB8sloslTF5G/I/2sicH4En65LG2TE/io4qM9g+vMMf9CM\neji+vOcsS9yTrj2uz3yNAsz1tBOIaXwJ8viOzTVEWfyLWFAaMezom8qTD8sKjzPU\nijtGOeRi7Q7FzMqXnlo8B4ftcMhEYrd62GVOX+32SvYTC/BFHJ/dgFG+z5ilCXFw\nYn2+WfyHLky82ZvA2KAmF16a5nZ4HJokjgGcwBkc/dBzIG/ltRL19GnmKVFlKRun\nJEuUawwGEfmwy7brxdWIGfGX9V+0xb47tQyQJKlrIooz5F/BSB4ajxRx9rtnEcFl\n78UVQx3h9Ltne5Y3/QVpWMAtNHiYqOA1CslU1wYkydKhhFDx4OobFNKYIDZu+uWh\njCe+MT4ASywOnju/qEcUE+RbWbluFzXBY12OgHqtLMeO+T3Wo5sqqfsRkv/WrG0K\neOTb+/Og8l2WjWtNloJPUshfxE8gZo8jSCpgs14tsUoe2LzN/9M=\n=4+MO\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b3788d119e55975fee6dc7ec8b36182c74ed519\nparent 5a10859a80bd571fa3d8fd8b527269f2e6f8488f\nauthor fanquake <fanquake@gmail.com> 1518224414 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691484 +0800\n\n[depends] ccache 3.4.1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61647a4b868f3d798cdac2404de0f474720ba1fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61647a4b868f3d798cdac2404de0f474720ba1fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61647a4b868f3d798cdac2404de0f474720ba1fa/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a10859a80bd571fa3d8fd8b527269f2e6f8488f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8f4eb225387d01aa7dabd73e1922f6d0ebf3960d",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61647a4b868f3d798cdac2404de0f474720ba1fa/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61647a4b868f3d798cdac2404de0f474720ba1fa/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=61647a4b868f3d798cdac2404de0f474720ba1fa",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.3.4\n+$(package)_version=3.4.1\n $(package)_download_path=https://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fa9d7f38367431bc86b19ad107d709ca7ecf1574fdacca01698bdf0a47cd8567\n+$(package)_sha256_hash=ca5a01fb4868cdb5176c77b8b4a390be7929a6064be80741217e0686f03f8389\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "e87615eba28ab8863a8e46f46ac9a517d7494818",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61647a4b868f3d798cdac2404de0f474720ba1fa/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61647a4b868f3d798cdac2404de0f474720ba1fa/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=61647a4b868f3d798cdac2404de0f474720ba1fa",
        "patch": "@@ -7,7 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](http://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| ccache | [3.3.4](https://ccache.samba.org/download.html) |  | No |  |  |\n+| ccache | [3.3.6](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n | Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "41550d6d138b54fca13eca0d288796d43b1c33ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTU1MGQ2ZDEzOGI1NGZjYTEzZWNhMGQyODg3OTZkNDNiMWMzM2Vj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T01:07:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:44Z"
      },
      "message": "[depends] miniupnpc 2.0.20180203",
      "tree": {
        "sha": "be443faf72bb1d4965c28baa34a4b6efbfcb4a4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be443faf72bb1d4965c28baa34a4b6efbfcb4a4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41550d6d138b54fca13eca0d288796d43b1c33ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsESlxAAqCSGZGXD8Nw+J2JcS5kdz7Dld29pyMBp+7oYlxIHEEFIieSXS/P6D8IJ\nwhimwbWbh6XDH0zzx+sIminEMsGfz3WWrr5AR81/uUZuUdqKzPWaVhv/XNFD2REa\n/AS/iHRx/KbeJy75a+YnhOd/2JdH/GLNlSG3QNyTPPpJ97abr/fuZDWFg+uYeXDG\nrKSH8oVJ3mell9i2naxvvY0ehBHUpnfkT9WFdJw4JYMKUP9i0sejvY0II/ki2NIj\nwgU0JQQxCj4V4KhC6QW/hViZc9lkMuZo47joUF8aScMmtWYO72OBY8qu1MS1dsXt\n/7hlqi/BbzQtPd+6cOFf6kjXaYO7SBYRReV7p5cD4D6m3lm4vf1OBJ6hz4HL+r8L\nxB+ZFNPBlR/F0Iyqnkt84SD908xVNeqYHhR4pRAsxK7irVJ5jxXBvx4OovR71pg4\nnoQMKJDbceSSV14zUve9T1zsaaR+M6aNpNy0typqU24BYlH2DvichSAbnFPHcqUm\nUivo2PVBROjqVrxwum3dh06Al/I9Rm+VIBxZLn9qbv+slgXOIzaQSEP3L2wrWBtK\nNTi+os69lSELmkM8susP2c69qU1+xYy4p/kbOMHWeI6sd+YS5SM0ob8DbY5+oACb\n18Fm/3HDetb0zjTEC9vOYkfkCeOV9n5XuK4bS6pS/eXc41RZeKk=\n=3MMg\n-----END PGP SIGNATURE-----",
        "payload": "tree be443faf72bb1d4965c28baa34a4b6efbfcb4a4a\nparent 61647a4b868f3d798cdac2404de0f474720ba1fa\nauthor fanquake <fanquake@gmail.com> 1518224852 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691484 +0800\n\n[depends] miniupnpc 2.0.20180203\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41550d6d138b54fca13eca0d288796d43b1c33ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41550d6d138b54fca13eca0d288796d43b1c33ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41550d6d138b54fca13eca0d288796d43b1c33ec/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61647a4b868f3d798cdac2404de0f474720ba1fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61647a4b868f3d798cdac2404de0f474720ba1fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61647a4b868f3d798cdac2404de0f474720ba1fa"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "81517965ddef58c04f72dab936b15ea9a996d046",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41550d6d138b54fca13eca0d288796d43b1c33ec/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41550d6d138b54fca13eca0d288796d43b1c33ec/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=41550d6d138b54fca13eca0d288796d43b1c33ec",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=2.0.20170509\n+$(package)_version=2.0.20180203\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=d3c368627f5cdfb66d3ebd64ca39ba54d6ff14a61966dbecb8dd296b7039f16a\n+$(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      },
      {
        "sha": "5e698126d4271923a715628ca458a1f519cb79df",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41550d6d138b54fca13eca0d288796d43b1c33ec/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41550d6d138b54fca13eca0d288796d43b1c33ec/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=41550d6d138b54fca13eca0d288796d43b1c33ec",
        "patch": "@@ -18,7 +18,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L75) |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L74) |\n-| MiniUPnPc | [2.0.20170509](http://miniupnp.free.fr/files) |  | No |  |  |\n+| MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L76) |\n | protobuf | [2.6.3](https://github.com/google/protobuf/releases) |  | No |  |  |"
      }
    ]
  },
  {
    "sha": "3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzM1ZDQ1ZjI4Y2Q0ZmRlZTQ3MzY0ZWM0NzMwOWQ3ZGQ4Zjk0ZWE5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T01:12:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:44Z"
      },
      "message": "[depends] latest config.guess and config.sub",
      "tree": {
        "sha": "9a16fab3ea05fe6ae376340a3f7fe072d1662fee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a16fab3ea05fe6ae376340a3f7fe072d1662fee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsHgmw/7Bf0d+lrAVJ3jA7bF4Z9ERFt5vh13+TB4smmDg+8VXZcVsbTmJN7FN247\n8Y2me/KMrsqUWZMlECPPItuvVpUdHSmAQWQrG7jW90Dp8K2qH6dJrzw/dJJ3BL5V\nGLzohMkweAmPnOGep9ep5wD4u2p4EJrEmyNqKsjIqvE+OXLYt9NeaydmkfTVV7Md\nlObGgXm8XJm26o50wB2vnzD8UodVZWibJ5LW/uSxmZ4Ajt1IXHXNYHYzyRtu0+QA\nOKY7lxiaixlwcaHoJX0SmXRuKxeD+WxLuWPT5Tl7MZIbDHDlq1uNj1IUUluo76gl\nmMuA4NlHTc4i3IS8Z5GUlTnuNOvtimcHIoyGdozw02xL3ouElEQ8naxmrm4LdwsD\nYHc7enoJ7iSi10yojuTnGim17CUYkaoAow1cdWiFNqv8tIMBlUf/Mqm6Eq2XTTot\nlt0uful8ZSYRVi60YuMwHwAGLo5OlZnUIggqB+huR/cRKNpQNOTPDoH14jkYHvA+\nWRNenYWIrXLPMgMekUK3VAzxUMgpuVSlm6hkcRCXaf9DT0WXXUcZQhYjj8SrbTQn\nkbRM/9sBCBnHo9bN0UyTYpHHxYdp2camLGEHfbLJck8FYzRtcNYjZYF86qCKRNct\now75utlL7Bh9JP2beBwVJI1WrfSzhFtqVtByt6c/PgU8pmRwR2M=\n=is34\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a16fab3ea05fe6ae376340a3f7fe072d1662fee\nparent 41550d6d138b54fca13eca0d288796d43b1c33ec\nauthor fanquake <fanquake@gmail.com> 1518225175 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691484 +0800\n\n[depends] latest config.guess and config.sub\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41550d6d138b54fca13eca0d288796d43b1c33ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41550d6d138b54fca13eca0d288796d43b1c33ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41550d6d138b54fca13eca0d288796d43b1c33ec"
      }
    ],
    "stats": {
      "total": 822,
      "additions": 398,
      "deletions": 424
    },
    "files": [
      {
        "sha": "9baaa270bfc7f08d6c6eb85b84f9742318a58d84",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 293,
        "deletions": 283,
        "changes": 576,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-03-05'\n+timestamp='2018-01-26'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-03-05'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -27,7 +27,7 @@ timestamp='2017-03-05'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n@@ -39,7 +39,7 @@ Usage: $0 [OPTION]\n \n Output the configuration name of the system \\`$me' is run on.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -107,9 +107,9 @@ trap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;\n dummy=$tmp/dummy ;\n tmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;\n case $CC_FOR_BUILD,$HOST_CC,$CC in\n- ,,)    echo \"int x;\" > $dummy.c ;\n+ ,,)    echo \"int x;\" > \"$dummy.c\" ;\n \tfor c in cc gcc c89 c99 ; do\n-\t  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then\n+\t  if ($c -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then\n \t     CC_FOR_BUILD=\"$c\"; break ;\n \t  fi ;\n \tdone ;\n@@ -132,14 +132,14 @@ UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\n UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\n UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n \n-case \"${UNAME_SYSTEM}\" in\n+case \"$UNAME_SYSTEM\" in\n Linux|GNU|GNU/*)\n \t# If the system lacks a compiler, then just pick glibc.\n \t# We could probably try harder.\n \tLIBC=gnu\n \n-\teval $set_cc_for_build\n-\tcat <<-EOF > $dummy.c\n+\teval \"$set_cc_for_build\"\n+\tcat <<-EOF > \"$dummy.c\"\n \t#include <features.h>\n \t#if defined(__UCLIBC__)\n \tLIBC=uclibc\n@@ -149,13 +149,20 @@ Linux|GNU|GNU/*)\n \tLIBC=gnu\n \t#endif\n \tEOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"\n+\n+\t# If ldd exists, use it to detect musl libc.\n+\tif command -v ldd >/dev/null && \\\n+\t\tldd --version 2>&1 | grep -q ^musl\n+\tthen\n+\t    LIBC=musl\n+\tfi\n \t;;\n esac\n \n # Note: order is significant - the case branches are not exclusive.\n \n-case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n     *:NetBSD:*:*)\n \t# NetBSD (nbsd) targets should (where applicable) match one or\n \t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n@@ -169,30 +176,30 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# portion of the name.  We always set it to \"unknown\".\n \tsysctl=\"sysctl -n hw.machine_arch\"\n \tUNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\\n-\t    /sbin/$sysctl 2>/dev/null || \\\n-\t    /usr/sbin/$sysctl 2>/dev/null || \\\n+\t    \"/sbin/$sysctl\" 2>/dev/null || \\\n+\t    \"/usr/sbin/$sysctl\" 2>/dev/null || \\\n \t    echo unknown)`\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    armeb) machine=armeb-unknown ;;\n \t    arm*) machine=arm-unknown ;;\n \t    sh3el) machine=shl-unknown ;;\n \t    sh3eb) machine=sh-unknown ;;\n \t    sh5el) machine=sh5le-unknown ;;\n \t    earmv*)\n-\t\tarch=`echo ${UNAME_MACHINE_ARCH} | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n-\t\tendian=`echo ${UNAME_MACHINE_ARCH} | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n-\t\tmachine=${arch}${endian}-unknown\n+\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n+\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n+\t\tmachine=\"${arch}${endian}\"-unknown\n \t\t;;\n-\t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n+\t    *) machine=\"$UNAME_MACHINE_ARCH\"-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n \t# to ELF recently (or will in the future) and ABI.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\tos=netbsdelf\n \t\t;;\n \t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n-\t\teval $set_cc_for_build\n+\t\teval \"$set_cc_for_build\"\n \t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t\t| grep -q __ELF__\n \t\tthen\n@@ -208,57 +215,66 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Determine ABI tags.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n-\t\tabi=`echo ${UNAME_MACHINE_ARCH} | sed -e \"$expr\"`\n+\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n \t\t;;\n \tesac\n \t# The OS release\n \t# Debian GNU/NetBSD machines have a different userland, and\n \t# thus, need a distinct triplet. However, they do not need\n \t# kernel version information, so it can be replaced with a\n \t# suitable tag, in the style of linux-gnu.\n-\tcase \"${UNAME_VERSION}\" in\n+\tcase \"$UNAME_VERSION\" in\n \t    Debian*)\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo ${UNAME_RELEASE} | sed -e 's/[-_].*//' | cut -d. -f1,2`\n+\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n \t# contains redundant information, the shorter form:\n \t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n-\techo \"${machine}-${os}${release}${abi}\"\n+\techo \"$machine-${os}${release}${abi}\"\n \texit ;;\n     *:Bitrig:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-bitrig${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"\n \texit ;;\n     *:OpenBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:LibertyBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-libertybsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"\n+\texit ;;\n+    *:MidnightBSD:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-midnightbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:ekkoBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-ekkobsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:SolidBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"\n \texit ;;\n     macppc:MirBSD:*:*)\n-\techo powerpc-unknown-mirbsd${UNAME_RELEASE}\n+\techo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:MirBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:Sortix:*:*)\n-\techo ${UNAME_MACHINE}-unknown-sortix\n+\techo \"$UNAME_MACHINE\"-unknown-sortix\n+\texit ;;\n+    *:Redox:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-redox\n \texit ;;\n+    mips:OSF1:*.*)\n+        echo mips-dec-osf1\n+        exit ;;\n     alpha:OSF1:*:*)\n \tcase $UNAME_RELEASE in\n \t*4.0)\n@@ -310,28 +326,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n-\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n+\techo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"\n \t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n \texitcode=$?\n \ttrap '' 0\n \texit $exitcode ;;\n-    Alpha\\ *:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# Should we change UNAME_MACHINE based on the output of uname instead\n-\t# of the specific Alpha model?\n-\techo alpha-pc-interix\n-\texit ;;\n-    21064:Windows_NT:50:3)\n-\techo alpha-dec-winnt3.5\n-\texit ;;\n     Amiga*:UNIX_System_V:4.0:*)\n \techo m68k-unknown-sysv4\n \texit ;;\n     *:[Aa]miga[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-amigaos\n+\techo \"$UNAME_MACHINE\"-unknown-amigaos\n \texit ;;\n     *:[Mm]orph[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-morphos\n+\techo \"$UNAME_MACHINE\"-unknown-morphos\n \texit ;;\n     *:OS/390:*:*)\n \techo i370-ibm-openedition\n@@ -343,7 +350,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \techo powerpc-ibm-os400\n \texit ;;\n     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n-\techo arm-acorn-riscix${UNAME_RELEASE}\n+\techo arm-acorn-riscix\"$UNAME_RELEASE\"\n \texit ;;\n     arm*:riscos:*:*|arm*:RISCOS:*:*)\n \techo arm-unknown-riscos\n@@ -370,19 +377,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t    sparc) echo sparc-icl-nx7; exit ;;\n \tesac ;;\n     s390x:SunOS:*:*)\n-\techo ${UNAME_MACHINE}-ibm-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4H:SunOS:5.*:*)\n-\techo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n-\techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n-\techo i386-pc-auroraux${UNAME_RELEASE}\n+\techo i386-pc-auroraux\"$UNAME_RELEASE\"\n \texit ;;\n     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tSUN_ARCH=i386\n \t# If there is a compiler, see if it is configured for 64-bit objects.\n \t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n@@ -395,13 +402,13 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\tSUN_ARCH=x86_64\n \t    fi\n \tfi\n-\techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:6*:*)\n \t# According to config.sub, this is the proper way to canonicalize\n \t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n \t# it's likely to be more like Solaris than SunOS4.\n-\techo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:*:*)\n \tcase \"`/usr/bin/arch -k`\" in\n@@ -410,25 +417,25 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Japanese Language versions have a version number like `4.1.3-JL'.\n-\techo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`\n+\techo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"\n \texit ;;\n     sun3*:SunOS:*:*)\n-\techo m68k-sun-sunos${UNAME_RELEASE}\n+\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     sun*:*:4.2BSD:*)\n \tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n-\ttest \"x${UNAME_RELEASE}\" = x && UNAME_RELEASE=3\n+\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n \tcase \"`/bin/arch`\" in\n \t    sun3)\n-\t\techo m68k-sun-sunos${UNAME_RELEASE}\n+\t\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \t    sun4)\n-\t\techo sparc-sun-sunos${UNAME_RELEASE}\n+\t\techo sparc-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \tesac\n \texit ;;\n     aushp:SunOS:*:*)\n-\techo sparc-auspex-sunos${UNAME_RELEASE}\n+\techo sparc-auspex-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     # The situation for MiNT is a little confusing.  The machine name\n     # can be virtually everything (everything which is not\n@@ -439,44 +446,44 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n     # MiNT.  But MiNT is downward compatible to TOS, so this should\n     # be no problem.\n     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n-\techo m68k-milan-mint${UNAME_RELEASE}\n+\techo m68k-milan-mint\"$UNAME_RELEASE\"\n \texit ;;\n     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n-\techo m68k-hades-mint${UNAME_RELEASE}\n+\techo m68k-hades-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n-\techo m68k-unknown-mint${UNAME_RELEASE}\n+\techo m68k-unknown-mint\"$UNAME_RELEASE\"\n \texit ;;\n     m68k:machten:*:*)\n-\techo m68k-apple-machten${UNAME_RELEASE}\n+\techo m68k-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     powerpc:machten:*:*)\n-\techo powerpc-apple-machten${UNAME_RELEASE}\n+\techo powerpc-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     RISC*:Mach:*:*)\n \techo mips-dec-mach_bsd4.3\n \texit ;;\n     RISC*:ULTRIX:*:*)\n-\techo mips-dec-ultrix${UNAME_RELEASE}\n+\techo mips-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     VAX*:ULTRIX*:*:*)\n-\techo vax-dec-ultrix${UNAME_RELEASE}\n+\techo vax-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     2020:CLIX:*:* | 2430:CLIX:*:*)\n-\techo clipper-intergraph-clix${UNAME_RELEASE}\n+\techo clipper-intergraph-clix\"$UNAME_RELEASE\"\n \texit ;;\n     mips:*:*:UMIPS | mips:*:*:RISCos)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n #ifdef __cplusplus\n #include <stdio.h>  /* for printf() prototype */\n \tint main (int argc, char *argv[]) {\n@@ -485,23 +492,23 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n #endif\n \t#if defined (host_mips) && defined (MIPSEB)\n \t#if defined (SYSTYPE_SYSV)\n-\t  printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_SVR4)\n-\t  printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n-\t  printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#endif\n \t  exit (-1);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c &&\n-\t  dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n-\t  SYSTEM_NAME=`$dummy $dummyarg` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n+\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n+\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n \t    { echo \"$SYSTEM_NAME\"; exit; }\n-\techo mips-mips-riscos${UNAME_RELEASE}\n+\techo mips-mips-riscos\"$UNAME_RELEASE\"\n \texit ;;\n     Motorola:PowerMAX_OS:*:*)\n \techo powerpc-motorola-powermax\n@@ -527,17 +534,17 @@ EOF\n     AViiON:dgux:*:*)\n \t# DG/UX returns AViiON for all architectures\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tif [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]\n+\tif [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]\n \tthen\n-\t    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\\n-\t       [ ${TARGET_BINARY_INTERFACE}x = x ]\n+\t    if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\\n+\t       [ \"$TARGET_BINARY_INTERFACE\"x = x ]\n \t    then\n-\t\techo m88k-dg-dgux${UNAME_RELEASE}\n+\t\techo m88k-dg-dgux\"$UNAME_RELEASE\"\n \t    else\n-\t\techo m88k-dg-dguxbcs${UNAME_RELEASE}\n+\t\techo m88k-dg-dguxbcs\"$UNAME_RELEASE\"\n \t    fi\n \telse\n-\t    echo i586-dg-dgux${UNAME_RELEASE}\n+\t    echo i586-dg-dgux\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n@@ -554,7 +561,7 @@ EOF\n \techo m68k-tektronix-bsd\n \texit ;;\n     *:IRIX*:*:*)\n-\techo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`\n+\techo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"\n \texit ;;\n     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n \techo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id\n@@ -566,14 +573,14 @@ EOF\n \tif [ -x /usr/bin/oslevel ] ; then\n \t\tIBM_REV=`/usr/bin/oslevel`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${UNAME_MACHINE}-ibm-aix${IBM_REV}\n+\techo \"$UNAME_MACHINE\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:2:3)\n \tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n-\t\teval $set_cc_for_build\n-\t\tsed 's/^\t\t//' << EOF >$dummy.c\n+\t\teval \"$set_cc_for_build\"\n+\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n \t\t#include <sys/systemcfg.h>\n \n \t\tmain()\n@@ -584,7 +591,7 @@ EOF\n \t\t\texit(0);\n \t\t\t}\n EOF\n-\t\tif $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`\n+\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`\n \t\tthen\n \t\t\techo \"$SYSTEM_NAME\"\n \t\telse\n@@ -598,7 +605,7 @@ EOF\n \texit ;;\n     *:AIX:*:[4567])\n \tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n-\tif /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then\n+\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n \t\tIBM_ARCH=rs6000\n \telse\n \t\tIBM_ARCH=powerpc\n@@ -607,18 +614,18 @@ EOF\n \t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n \t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${IBM_ARCH}-ibm-aix${IBM_REV}\n+\techo \"$IBM_ARCH\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:*:*)\n \techo rs6000-ibm-aix\n \texit ;;\n-    ibmrt:4.4BSD:*|romp-ibm:BSD:*)\n+    ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)\n \techo romp-ibm-bsd4.4\n \texit ;;\n     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n-\techo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to\n+\techo romp-ibm-bsd\"$UNAME_RELEASE\"   # 4.3 with uname added to\n \texit ;;                             # report: romp-ibm BSD 4.3\n     *:BOSX:*:*)\n \techo rs6000-bull-bosx\n@@ -633,28 +640,28 @@ EOF\n \techo m68k-hp-bsd4.4\n \texit ;;\n     9000/[34678]??:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\tcase \"${UNAME_MACHINE}\" in\n-\t    9000/31? )            HP_ARCH=m68000 ;;\n-\t    9000/[34]?? )         HP_ARCH=m68k ;;\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\tcase \"$UNAME_MACHINE\" in\n+\t    9000/31?)            HP_ARCH=m68000 ;;\n+\t    9000/[34]??)         HP_ARCH=m68k ;;\n \t    9000/[678][0-9][0-9])\n \t\tif [ -x /usr/bin/getconf ]; then\n \t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n \t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n-\t\t    case \"${sc_cpu_version}\" in\n+\t\t    case \"$sc_cpu_version\" in\n \t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n \t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n \t\t      532)                      # CPU_PA_RISC2_0\n-\t\t\tcase \"${sc_kernel_bits}\" in\n+\t\t\tcase \"$sc_kernel_bits\" in\n \t\t\t  32) HP_ARCH=hppa2.0n ;;\n \t\t\t  64) HP_ARCH=hppa2.0w ;;\n \t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n \t\t\tesac ;;\n \t\t    esac\n \t\tfi\n-\t\tif [ \"${HP_ARCH}\" = \"\" ]; then\n-\t\t    eval $set_cc_for_build\n-\t\t    sed 's/^\t\t//' << EOF >$dummy.c\n+\t\tif [ \"$HP_ARCH\" = \"\" ]; then\n+\t\t    eval \"$set_cc_for_build\"\n+\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n \n \t\t#define _HPUX_SOURCE\n \t\t#include <stdlib.h>\n@@ -687,13 +694,13 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n-\tif [ ${HP_ARCH} = hppa2.0w ]\n+\tif [ \"$HP_ARCH\" = hppa2.0w ]\n \tthen\n-\t    eval $set_cc_for_build\n+\t    eval \"$set_cc_for_build\"\n \n \t    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating\n \t    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler\n@@ -712,15 +719,15 @@ EOF\n \t\tHP_ARCH=hppa64\n \t    fi\n \tfi\n-\techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n+\techo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     ia64:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\techo ia64-hp-hpux${HPUX_REV}\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\techo ia64-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     3050*:HI-UX:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#include <unistd.h>\n \tint\n \tmain ()\n@@ -745,11 +752,11 @@ EOF\n \t  exit (0);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&\n \t\t{ echo \"$SYSTEM_NAME\"; exit; }\n \techo unknown-hitachi-hiuxwe2\n \texit ;;\n-    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )\n+    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)\n \techo hppa1.1-hp-bsd\n \texit ;;\n     9000/8??:4.3bsd:*:*)\n@@ -758,17 +765,17 @@ EOF\n     *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n \techo hppa1.0-hp-mpeix\n \texit ;;\n-    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )\n+    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)\n \techo hppa1.1-hp-osf\n \texit ;;\n     hp8??:OSF1:*:*)\n \techo hppa1.0-hp-osf\n \texit ;;\n     i*86:OSF1:*:*)\n \tif [ -x /usr/sbin/sysversion ] ; then\n-\t    echo ${UNAME_MACHINE}-unknown-osf1mk\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1mk\n \telse\n-\t    echo ${UNAME_MACHINE}-unknown-osf1\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1\n \tfi\n \texit ;;\n     parisc*:Lites*:*:*)\n@@ -793,128 +800,109 @@ EOF\n \techo c4-convex-bsd\n \texit ;;\n     CRAY*Y-MP:*:*:*)\n-\techo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo ymp-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*[A-Z]90:*:*:*)\n-\techo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\\n+\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n \t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n \t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n \t      -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*TS:*:*:*)\n-\techo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo t90-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*T3E:*:*:*)\n-\techo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo alphaev5-cray-unicosmk\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*SV1:*:*:*)\n-\techo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo sv1-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     *:UNICOS/mp:*:*)\n-\techo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n \tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n \techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     5000:UNIX_System_V:4.*:*)\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n \techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n-\techo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-pc-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     sparc*:BSD/OS:*:*)\n-\techo sparc-unknown-bsdi${UNAME_RELEASE}\n+\techo sparc-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:BSD/OS:*:*)\n-\techo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:FreeBSD:*:*)\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tcase ${UNAME_PROCESSOR} in\n+\tcase \"$UNAME_PROCESSOR\" in\n \t    amd64)\n \t\tUNAME_PROCESSOR=x86_64 ;;\n \t    i386)\n \t\tUNAME_PROCESSOR=i586 ;;\n \tesac\n-\techo ${UNAME_PROCESSOR}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     i*:CYGWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-cygwin\n+\techo \"$UNAME_MACHINE\"-pc-cygwin\n \texit ;;\n     *:MINGW64*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw64\n+\techo \"$UNAME_MACHINE\"-pc-mingw64\n \texit ;;\n     *:MINGW*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-mingw32\n \texit ;;\n     *:MSYS*:*)\n-\techo ${UNAME_MACHINE}-pc-msys\n-\texit ;;\n-    i*:windows32*:*)\n-\t# uname -m includes \"-pc\" on this system.\n-\techo ${UNAME_MACHINE}-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-msys\n \texit ;;\n     i*:PW*:*)\n-\techo ${UNAME_MACHINE}-pc-pw32\n+\techo \"$UNAME_MACHINE\"-pc-pw32\n \texit ;;\n     *:Interix*:*)\n-\tcase ${UNAME_MACHINE} in\n+\tcase \"$UNAME_MACHINE\" in\n \t    x86)\n-\t\techo i586-pc-interix${UNAME_RELEASE}\n+\t\techo i586-pc-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    authenticamd | genuineintel | EM64T)\n-\t\techo x86_64-unknown-interix${UNAME_RELEASE}\n+\t\techo x86_64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    IA64)\n-\t\techo ia64-unknown-interix${UNAME_RELEASE}\n+\t\techo ia64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \tesac ;;\n-    [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)\n-\techo i${UNAME_MACHINE}-pc-mks\n-\texit ;;\n-    8664:Windows_NT:*)\n-\techo x86_64-pc-mks\n-\texit ;;\n-    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we\n-\t# UNAME_MACHINE based on the output of uname instead of i386?\n-\techo i586-pc-interix\n-\texit ;;\n     i*:UWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-uwin\n+\techo \"$UNAME_MACHINE\"-pc-uwin\n \texit ;;\n     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)\n \techo x86_64-unknown-cygwin\n \texit ;;\n-    p*:CYGWIN*:*)\n-\techo powerpcle-unknown-cygwin\n-\texit ;;\n     prep*:SunOS:5.*:*)\n-\techo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     *:GNU:*:*)\n \t# the GNU system\n-\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-${LIBC}`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n+\techo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n+\techo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"\n \texit ;;\n     i*86:Minix:*:*)\n-\techo ${UNAME_MACHINE}-pc-minix\n+\techo \"$UNAME_MACHINE\"-pc-minix\n \texit ;;\n     aarch64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     aarch64_be:Linux:*:*)\n \tUNAME_MACHINE=aarch64_be\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     alpha:Linux:*:*)\n \tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n@@ -928,63 +916,63 @@ EOF\n \tesac\n \tobjdump --private-headers /bin/sh | grep -q ld.so.1\n \tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arc:Linux:*:* | arceb:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arm*:Linux:*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t    | grep -q __ARM_EABI__\n \tthen\n-\t    echo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\t    echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \telse\n \t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t| grep -q __ARM_PCS_VFP\n \t    then\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabi\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabi\n \t    else\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabihf\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabihf\n \t    fi\n \tfi\n \texit ;;\n     avr32*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     cris:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     crisv32:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     e2k:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     frv:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     hexagon:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     ia64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     k1om:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m32r*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m68*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     mips:Linux:*:* | mips64:Linux:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#undef CPU\n \t#undef ${UNAME_MACHINE}\n \t#undef ${UNAME_MACHINE}el\n@@ -998,70 +986,70 @@ EOF\n \t#endif\n \t#endif\n EOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`\n-\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU'`\"\n+\ttest \"x$CPU\" != x && { echo \"$CPU-unknown-linux-$LIBC\"; exit; }\n \t;;\n     mips64el:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     openrisc*:Linux:*:*)\n-\techo or1k-unknown-linux-${LIBC}\n+\techo or1k-unknown-linux-\"$LIBC\"\n \texit ;;\n     or32:Linux:*:* | or1k*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     padre:Linux:*:*)\n-\techo sparc-unknown-linux-${LIBC}\n+\techo sparc-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc64:Linux:*:* | hppa64:Linux:*:*)\n-\techo hppa64-unknown-linux-${LIBC}\n+\techo hppa64-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n \tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n-\t  PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;\n-\t  PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;\n-\t  *)    echo hppa-unknown-linux-${LIBC} ;;\n+\t  PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;\n+\t  PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;\n+\t  *)    echo hppa-unknown-linux-\"$LIBC\" ;;\n \tesac\n \texit ;;\n     ppc64:Linux:*:*)\n-\techo powerpc64-unknown-linux-${LIBC}\n+\techo powerpc64-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc:Linux:*:*)\n-\techo powerpc-unknown-linux-${LIBC}\n+\techo powerpc-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc64le:Linux:*:*)\n-\techo powerpc64le-unknown-linux-${LIBC}\n+\techo powerpc64le-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppcle:Linux:*:*)\n-\techo powerpcle-unknown-linux-${LIBC}\n+\techo powerpcle-unknown-linux-\"$LIBC\"\n \texit ;;\n     riscv32:Linux:*:* | riscv64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n-\techo ${UNAME_MACHINE}-ibm-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-ibm-linux-\"$LIBC\"\n \texit ;;\n     sh64*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sh*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sparc:Linux:*:* | sparc64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     tile*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     vax:Linux:*:*)\n-\techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     xtensa*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:DYNIX/ptx:4*:*)\n \t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n@@ -1075,34 +1063,34 @@ EOF\n \t# I am not positive that other SVR4 systems won't match this,\n \t# I just have to hope.  -- rms.\n \t# Use sysv4.2uw... so that sysv4* matches it.\n-\techo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE\"-pc-sysv4.2uw\"$UNAME_VERSION\"\n \texit ;;\n     i*86:OS/2:*:*)\n \t# If we were able to find `uname', then EMX Unix compatibility\n \t# is probably installed.\n-\techo ${UNAME_MACHINE}-pc-os2-emx\n+\techo \"$UNAME_MACHINE\"-pc-os2-emx\n \texit ;;\n     i*86:XTS-300:*:STOP)\n-\techo ${UNAME_MACHINE}-unknown-stop\n+\techo \"$UNAME_MACHINE\"-unknown-stop\n \texit ;;\n     i*86:atheos:*:*)\n-\techo ${UNAME_MACHINE}-unknown-atheos\n+\techo \"$UNAME_MACHINE\"-unknown-atheos\n \texit ;;\n     i*86:syllable:*:*)\n-\techo ${UNAME_MACHINE}-pc-syllable\n+\techo \"$UNAME_MACHINE\"-pc-syllable\n \texit ;;\n     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)\n-\techo i386-unknown-lynxos${UNAME_RELEASE}\n+\techo i386-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     i*86:*DOS:*:*)\n-\techo ${UNAME_MACHINE}-pc-msdosdjgpp\n+\techo \"$UNAME_MACHINE\"-pc-msdosdjgpp\n \texit ;;\n-    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)\n-\tUNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`\n+    i*86:*:4.*:*)\n+\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n \tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n-\t\techo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv\"$UNAME_REL\"\n \tfi\n \texit ;;\n     i*86:*:5:[678]*)\n@@ -1112,12 +1100,12 @@ EOF\n \t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n \t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n \tesac\n-\techo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}{$UNAME_VERSION}\"\n \texit ;;\n     i*86:*:3.2:*)\n \tif test -f /usr/options/cb.name; then\n \t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n-\t\techo ${UNAME_MACHINE}-pc-isc$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"\n \telif /bin/uname -X 2>/dev/null >/dev/null ; then\n \t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n \t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n@@ -1127,9 +1115,9 @@ EOF\n \t\t\t&& UNAME_MACHINE=i686\n \t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n \t\t\t&& UNAME_MACHINE=i686\n-\t\techo ${UNAME_MACHINE}-pc-sco$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-sco\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv32\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv32\n \tfi\n \texit ;;\n     pc:*:*:*)\n@@ -1149,9 +1137,9 @@ EOF\n \texit ;;\n     i860:*:4.*:*) # i860-SVR4\n \tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n-\t  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4\n+\t  echo i860-stardent-sysv\"$UNAME_RELEASE\" # Stardent Vistra i860-SVR4\n \telse # Add other i860-SVR4 vendors below as they are discovered.\n-\t  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4\n+\t  echo i860-unknown-sysv\"$UNAME_RELEASE\"  # Unknown i860-SVR4\n \tfi\n \texit ;;\n     mini*:CTIX:SYS*5:*)\n@@ -1171,9 +1159,9 @@ EOF\n \ttest -r /etc/.relid \\\n \t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t  && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t  && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n \t  && { echo i486-ncr-sysv4; exit; } ;;\n@@ -1182,28 +1170,28 @@ EOF\n \ttest -r /etc/.relid \\\n \t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n-\techo m68k-unknown-lynxos${UNAME_RELEASE}\n+\techo m68k-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     mc68030:UNIX_System_V:4.*:*)\n \techo m68k-atari-sysv4\n \texit ;;\n     TSUNAMI:LynxOS:2.*:*)\n-\techo sparc-unknown-lynxos${UNAME_RELEASE}\n+\techo sparc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     rs6000:LynxOS:2.*:*)\n-\techo rs6000-unknown-lynxos${UNAME_RELEASE}\n+\techo rs6000-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)\n-\techo powerpc-unknown-lynxos${UNAME_RELEASE}\n+\techo powerpc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     SM[BE]S:UNIX_SV:*:*)\n-\techo mips-dde-sysv${UNAME_RELEASE}\n+\techo mips-dde-sysv\"$UNAME_RELEASE\"\n \texit ;;\n     RM*:ReliantUNIX-*:*:*)\n \techo mips-sni-sysv4\n@@ -1214,7 +1202,7 @@ EOF\n     *:SINIX-*:*:*)\n \tif uname -p 2>/dev/null >/dev/null ; then\n \t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\t\techo ${UNAME_MACHINE}-sni-sysv4\n+\t\techo \"$UNAME_MACHINE\"-sni-sysv4\n \telse\n \t\techo ns32k-sni-sysv\n \tfi\n@@ -1234,23 +1222,23 @@ EOF\n \texit ;;\n     i*86:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n-\techo ${UNAME_MACHINE}-stratus-vos\n+\techo \"$UNAME_MACHINE\"-stratus-vos\n \texit ;;\n     *:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n \techo hppa1.1-stratus-vos\n \texit ;;\n     mc68*:A/UX:*:*)\n-\techo m68k-apple-aux${UNAME_RELEASE}\n+\techo m68k-apple-aux\"$UNAME_RELEASE\"\n \texit ;;\n     news*:NEWS-OS:6*:*)\n \techo mips-sony-newsos6\n \texit ;;\n     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n \tif [ -d /usr/nec ]; then\n-\t\techo mips-nec-sysv${UNAME_RELEASE}\n+\t\techo mips-nec-sysv\"$UNAME_RELEASE\"\n \telse\n-\t\techo mips-unknown-sysv${UNAME_RELEASE}\n+\t\techo mips-unknown-sysv\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n@@ -1269,49 +1257,56 @@ EOF\n \techo x86_64-unknown-haiku\n \texit ;;\n     SX-4:SUPER-UX:*:*)\n-\techo sx4-nec-superux${UNAME_RELEASE}\n+\techo sx4-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-5:SUPER-UX:*:*)\n-\techo sx5-nec-superux${UNAME_RELEASE}\n+\techo sx5-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-6:SUPER-UX:*:*)\n-\techo sx6-nec-superux${UNAME_RELEASE}\n+\techo sx6-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-7:SUPER-UX:*:*)\n-\techo sx7-nec-superux${UNAME_RELEASE}\n+\techo sx7-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8:SUPER-UX:*:*)\n-\techo sx8-nec-superux${UNAME_RELEASE}\n+\techo sx8-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8R:SUPER-UX:*:*)\n-\techo sx8r-nec-superux${UNAME_RELEASE}\n+\techo sx8r-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-ACE:SUPER-UX:*:*)\n-\techo sxace-nec-superux${UNAME_RELEASE}\n+\techo sxace-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     Power*:Rhapsody:*:*)\n-\techo powerpc-apple-rhapsody${UNAME_RELEASE}\n+\techo powerpc-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Rhapsody:*:*)\n-\techo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Darwin:*:*)\n \tUNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif test \"$UNAME_PROCESSOR\" = unknown ; then\n \t    UNAME_PROCESSOR=powerpc\n \tfi\n-\tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n+\tif test \"`echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'`\" -le 10 ; then\n \t    if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n-\t\t    grep IS_64BIT_ARCH >/dev/null\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_64BIT_ARCH >/dev/null\n \t\tthen\n \t\t    case $UNAME_PROCESSOR in\n \t\t\ti386) UNAME_PROCESSOR=x86_64 ;;\n \t\t\tpowerpc) UNAME_PROCESSOR=powerpc64 ;;\n \t\t    esac\n \t\tfi\n+\t\t# On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n+\t\tif (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_PPC >/dev/null\n+\t\tthen\n+\t\t    UNAME_PROCESSOR=powerpc\n+\t\tfi\n \t    fi\n \telif test \"$UNAME_PROCESSOR\" = i386 ; then\n \t    # Avoid executing cc on OS X 10.9, as it ships with a stub\n@@ -1322,30 +1317,33 @@ EOF\n \t    # that Apple uses in portable devices.\n \t    UNAME_PROCESSOR=x86_64\n \tfi\n-\techo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)\n \tUNAME_PROCESSOR=`uname -p`\n \tif test \"$UNAME_PROCESSOR\" = x86; then\n \t\tUNAME_PROCESSOR=i386\n \t\tUNAME_MACHINE=pc\n \tfi\n-\techo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-\"$UNAME_MACHINE\"-nto-qnx\"$UNAME_RELEASE\"\n \texit ;;\n     *:QNX:*:4*)\n \techo i386-pc-qnx\n \texit ;;\n-    NEO-?:NONSTOP_KERNEL:*:*)\n-\techo neo-tandem-nsk${UNAME_RELEASE}\n+    NEO-*:NONSTOP_KERNEL:*:*)\n+\techo neo-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     NSE-*:NONSTOP_KERNEL:*:*)\n-\techo nse-tandem-nsk${UNAME_RELEASE}\n+\techo nse-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSR-?:NONSTOP_KERNEL:*:*)\n-\techo nsr-tandem-nsk${UNAME_RELEASE}\n+    NSR-*:NONSTOP_KERNEL:*:*)\n+\techo nsr-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSX-?:NONSTOP_KERNEL:*:*)\n-\techo nsx-tandem-nsk${UNAME_RELEASE}\n+    NSV-*:NONSTOP_KERNEL:*:*)\n+\techo nsv-tandem-nsk\"$UNAME_RELEASE\"\n+\texit ;;\n+    NSX-*:NONSTOP_KERNEL:*:*)\n+\techo nsx-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     *:NonStop-UX:*:*)\n \techo mips-compaq-nonstopux\n@@ -1354,7 +1352,7 @@ EOF\n \techo bs2000-siemens-sysv\n \texit ;;\n     DS/*:UNIX_System_V:*:*)\n-\techo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-\"$UNAME_SYSTEM\"-\"$UNAME_RELEASE\"\n \texit ;;\n     *:Plan9:*:*)\n \t# \"uname -m\" is not consistent, so use $cputype instead. 386\n@@ -1365,7 +1363,7 @@ EOF\n \telse\n \t    UNAME_MACHINE=\"$cputype\"\n \tfi\n-\techo ${UNAME_MACHINE}-unknown-plan9\n+\techo \"$UNAME_MACHINE\"-unknown-plan9\n \texit ;;\n     *:TOPS-10:*:*)\n \techo pdp10-unknown-tops10\n@@ -1386,14 +1384,14 @@ EOF\n \techo pdp10-unknown-its\n \texit ;;\n     SEI:*:*:SEIUX)\n-\techo mips-sei-seiux${UNAME_RELEASE}\n+\techo mips-sei-seiux\"$UNAME_RELEASE\"\n \texit ;;\n     *:DragonFly:*:*)\n-\techo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     *:*VMS:*:*)\n \tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\tcase \"${UNAME_MACHINE}\" in\n+\tcase \"$UNAME_MACHINE\" in\n \t    A*) echo alpha-dec-vms ; exit ;;\n \t    I*) echo ia64-dec-vms ; exit ;;\n \t    V*) echo vax-dec-vms ; exit ;;\n@@ -1402,32 +1400,44 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE} | sed -e 's/ .*$//'`\n+\techo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"\n \texit ;;\n     i*86:rdos:*:*)\n-\techo ${UNAME_MACHINE}-pc-rdos\n+\techo \"$UNAME_MACHINE\"-pc-rdos\n \texit ;;\n     i*86:AROS:*:*)\n-\techo ${UNAME_MACHINE}-pc-aros\n+\techo \"$UNAME_MACHINE\"-pc-aros\n \texit ;;\n     x86_64:VMkernel:*:*)\n-\techo ${UNAME_MACHINE}-unknown-esx\n+\techo \"$UNAME_MACHINE\"-unknown-esx\n \texit ;;\n     amd64:Isilon\\ OneFS:*:*)\n \techo x86_64-unknown-onefs\n \texit ;;\n esac\n \n+echo \"$0: unable to guess system type\" >&2\n+\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in\n+    mips:Linux | mips64:Linux)\n+\t# If we got here on MIPS GNU/Linux, output extra information.\n+\tcat >&2 <<EOF\n+\n+NOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\n+the system type. Please install a C compiler and try again.\n+EOF\n+\t;;\n+esac\n+\n cat >&2 <<EOF\n-$0: unable to guess system type\n \n This script (version $timestamp), has failed to recognize the\n-operating system you are using. If your script is old, overwrite\n-config.guess and config.sub with the latest versions from:\n+operating system you are using. If your script is old, overwrite *all*\n+copies of config.guess and config.sub with the latest versions from:\n \n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n and\n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n If $0 has already been updated, send the following data and any\n information you think might be pertinent to config-patches@gnu.org to\n@@ -1450,16 +1460,16 @@ hostinfo               = `(hostinfo) 2>/dev/null`\n /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n \n-UNAME_MACHINE = ${UNAME_MACHINE}\n-UNAME_RELEASE = ${UNAME_RELEASE}\n-UNAME_SYSTEM  = ${UNAME_SYSTEM}\n-UNAME_VERSION = ${UNAME_VERSION}\n+UNAME_MACHINE = \"$UNAME_MACHINE\"\n+UNAME_RELEASE = \"$UNAME_RELEASE\"\n+UNAME_SYSTEM  = \"$UNAME_SYSTEM\"\n+UNAME_VERSION = \"$UNAME_VERSION\"\n EOF\n \n exit 1\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "818892c1c31fdbe97b7a9515662a01da0371e09f",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 105,
        "deletions": 141,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-04-02'\n+timestamp='2018-01-15'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-04-02'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -33,7 +33,7 @@ timestamp='2017-04-02'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -57,7 +57,7 @@ Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n \n Canonicalize a configuration name.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -94,7 +94,7 @@ while test $# -gt 0 ; do\n \n     *local*)\n        # First pass through any local machine types.\n-       echo $1\n+       echo \"$1\"\n        exit ;;\n \n     * )\n@@ -112,24 +112,24 @@ esac\n \n # Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).\n # Here we must recognize all the valid KERNEL-OS combinations.\n-maybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n+maybe_os=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n case $maybe_os in\n   nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \\\n   linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \\\n   knetbsd*-gnu* | netbsd*-gnu* | netbsd*-eabi* | \\\n   kopensolaris*-gnu* | cloudabi*-eabi* | \\\n   storm-chaos* | os2-emx* | rtmk-nova*)\n     os=-$maybe_os\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n     ;;\n   android-linux)\n     os=-linux-android\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n     ;;\n   *)\n-    basic_machine=`echo $1 | sed 's/-[^-]*$//'`\n-    if [ $basic_machine != $1 ]\n-    then os=`echo $1 | sed 's/.*-/-/'`\n+    basic_machine=`echo \"$1\" | sed 's/-[^-]*$//'`\n+    if [ \"$basic_machine\" != \"$1\" ]\n+    then os=`echo \"$1\" | sed 's/.*-/-/'`\n     else os=; fi\n     ;;\n esac\n@@ -178,44 +178,44 @@ case $os in\n \t\t;;\n \t-sco6)\n \t\tos=-sco5v6\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5)\n \t\tos=-sco3.2v5\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco4)\n \t\tos=-sco3.2v4\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2.[4-9]*)\n \t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2v[4-9]*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5v6*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco*)\n \t\tos=-sco3.2v2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-udk*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-isc)\n \t\tos=-isc2.2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-clix*)\n \t\tbasic_machine=clipper-intergraph\n \t\t;;\n \t-isc*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-lynx*178)\n \t\tos=-lynxos178\n@@ -227,10 +227,7 @@ case $os in\n \t\tos=-lynxos\n \t\t;;\n \t-ptx*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`\n-\t\t;;\n-\t-windowsnt*)\n-\t\tos=`echo $os | sed -e 's/windowsnt/winnt/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-sequent/'`\n \t\t;;\n \t-psos*)\n \t\tos=-psos\n@@ -299,7 +296,7 @@ case $basic_machine in\n \t| nios | nios2 | nios2eb | nios2el \\\n \t| ns16k | ns32k \\\n \t| open8 | or1k | or1knd | or32 \\\n-\t| pdp10 | pdp11 | pj | pjl \\\n+\t| pdp10 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pru \\\n \t| pyramid \\\n@@ -316,7 +313,6 @@ case $basic_machine in\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n \t| visium \\\n \t| wasm32 \\\n-\t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n \t\tbasic_machine=$basic_machine-unknown\n@@ -337,7 +333,7 @@ case $basic_machine in\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n \t\t;;\n-\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)\n+\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65)\n \t\t;;\n \tms1)\n \t\tbasic_machine=mt-unknown\n@@ -366,7 +362,7 @@ case $basic_machine in\n \t  ;;\n \t# Object if more than one company name word.\n \t*-*-*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n \t# Recognize the basic CPU types with company name.\n@@ -461,7 +457,7 @@ case $basic_machine in\n \t# Recognize the various machine names and aliases which stand\n \t# for a CPU type and a company and sometimes even an OS.\n \t386bsd)\n-\t\tbasic_machine=i386-unknown\n+\t\tbasic_machine=i386-pc\n \t\tos=-bsd\n \t\t;;\n \t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n@@ -495,7 +491,7 @@ case $basic_machine in\n \t\tbasic_machine=x86_64-pc\n \t\t;;\n \tamd64-*)\n-\t\tbasic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=x86_64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tamdahl)\n \t\tbasic_machine=580-amdahl\n@@ -540,21 +536,21 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tblackfin-*)\n-\t\tbasic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=bfin-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tbluegene*)\n \t\tbasic_machine=powerpc-ibm\n \t\tos=-cnk\n \t\t;;\n \tc54x-*)\n-\t\tbasic_machine=tic54x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic54x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc55x-*)\n-\t\tbasic_machine=tic55x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic55x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc6x-*)\n-\t\tbasic_machine=tic6x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic6x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc90)\n \t\tbasic_machine=c90-cray\n@@ -643,7 +639,7 @@ case $basic_machine in\n \t\tbasic_machine=rs6000-bull\n \t\tos=-bosx\n \t\t;;\n-\tdpx2* | dpx2*-bull)\n+\tdpx2*)\n \t\tbasic_machine=m68k-bull\n \t\tos=-sysv3\n \t\t;;\n@@ -652,7 +648,7 @@ case $basic_machine in\n \t\tos=$os\"spe\"\n \t\t;;\n \te500v[12]-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=$os\"spe\"\n \t\t;;\n \tebmon29k)\n@@ -744,9 +740,6 @@ case $basic_machine in\n \thp9k8[0-9][0-9] | hp8[0-9][0-9])\n \t\tbasic_machine=hppa1.0-hp\n \t\t;;\n-\thppa-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \thppaosf)\n \t\tbasic_machine=hppa1.1-hp\n \t\tos=-osf\n@@ -759,26 +752,26 @@ case $basic_machine in\n \t\tbasic_machine=i370-ibm\n \t\t;;\n \ti*86v32)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv32\n \t\t;;\n \ti*86v4*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv4\n \t\t;;\n \ti*86v)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv\n \t\t;;\n \ti*86sol2)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-solaris2\n \t\t;;\n \ti386mach)\n \t\tbasic_machine=i386-mach\n \t\tos=-mach\n \t\t;;\n-\ti386-vsta | vsta)\n+\tvsta)\n \t\tbasic_machine=i386-unknown\n \t\tos=-vsta\n \t\t;;\n@@ -797,19 +790,16 @@ case $basic_machine in\n \t\tos=-sysv\n \t\t;;\n \tleon-*|leon[3-9]-*)\n-\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\tbasic_machine=sparc-`echo \"$basic_machine\" | sed 's/-.*//'`\n \t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n \t\t;;\n \tm68knommu-*)\n-\t\tbasic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=m68k-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n-\tm88k-omron*)\n-\t\tbasic_machine=m88k-omron\n-\t\t;;\n \tmagnum | m3230)\n \t\tbasic_machine=mips-mips\n \t\tos=-sysv\n@@ -841,10 +831,10 @@ case $basic_machine in\n \t\tos=-mint\n \t\t;;\n \tmips3*-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`\n \t\t;;\n \tmips3*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`-unknown\n \t\t;;\n \tmonitor)\n \t\tbasic_machine=m68k-rom68k\n@@ -863,7 +853,7 @@ case $basic_machine in\n \t\tos=-msdos\n \t\t;;\n \tms1-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/ms1-/mt-/'`\n \t\t;;\n \tmsys)\n \t\tbasic_machine=i686-pc\n@@ -905,7 +895,7 @@ case $basic_machine in\n \t\tbasic_machine=v70-nec\n \t\tos=-sysv\n \t\t;;\n-\tnext | m*-next )\n+\tnext | m*-next)\n \t\tbasic_machine=m68k-next\n \t\tcase $os in\n \t\t    -nextstep* )\n@@ -950,6 +940,9 @@ case $basic_machine in\n \tnsr-tandem)\n \t\tbasic_machine=nsr-tandem\n \t\t;;\n+\tnsv-tandem)\n+\t\tbasic_machine=nsv-tandem\n+\t\t;;\n \tnsx-tandem)\n \t\tbasic_machine=nsx-tandem\n \t\t;;\n@@ -985,7 +978,7 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tparisc-*)\n-\t\tbasic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=hppa-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tpbd)\n@@ -1001,7 +994,7 @@ case $basic_machine in\n \t\tbasic_machine=i386-pc\n \t\t;;\n \tpc98-*)\n-\t\tbasic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i386-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium | p5 | k5 | k6 | nexgen | viac3)\n \t\tbasic_machine=i586-pc\n@@ -1016,16 +1009,16 @@ case $basic_machine in\n \t\tbasic_machine=i786-pc\n \t\t;;\n \tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n-\t\tbasic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i586-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumpro-* | p6-* | 6x86-* | athlon-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium4-*)\n-\t\tbasic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i786-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpn)\n \t\tbasic_machine=pn-gould\n@@ -1035,23 +1028,23 @@ case $basic_machine in\n \tppc | ppcbe)\tbasic_machine=powerpc-unknown\n \t\t;;\n \tppc-* | ppcbe-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppcle | powerpclittle)\n \t\tbasic_machine=powerpcle-unknown\n \t\t;;\n \tppcle-* | powerpclittle-*)\n-\t\tbasic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpcle-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64)\tbasic_machine=powerpc64-unknown\n \t\t;;\n-\tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\tppc64-*) basic_machine=powerpc64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64le | powerpc64little)\n \t\tbasic_machine=powerpc64le-unknown\n \t\t;;\n \tppc64le-* | powerpc64little-*)\n-\t\tbasic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc64le-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tps2)\n \t\tbasic_machine=i386-ibm\n@@ -1105,17 +1098,10 @@ case $basic_machine in\n \tsequent)\n \t\tbasic_machine=i386-sequent\n \t\t;;\n-\tsh)\n-\t\tbasic_machine=sh-hitachi\n-\t\tos=-hms\n-\t\t;;\n \tsh5el)\n \t\tbasic_machine=sh5le-unknown\n \t\t;;\n-\tsh64)\n-\t\tbasic_machine=sh64-unknown\n-\t\t;;\n-\tsparclite-wrs | simso-wrs)\n+\tsimso-wrs)\n \t\tbasic_machine=sparclite-wrs\n \t\tos=-vxworks\n \t\t;;\n@@ -1134,7 +1120,7 @@ case $basic_machine in\n \t\tos=-sysv4\n \t\t;;\n \tstrongarm-* | thumb-*)\n-\t\tbasic_machine=arm-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=arm-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tsun2)\n \t\tbasic_machine=m68000-sun\n@@ -1248,9 +1234,6 @@ case $basic_machine in\n \t\tbasic_machine=a29k-wrs\n \t\tos=-vxworks\n \t\t;;\n-\twasm32)\n-\t\tbasic_machine=wasm32-unknown\n-\t\t;;\n \tw65*)\n \t\tbasic_machine=w65-wdc\n \t\tos=-none\n@@ -1259,6 +1242,9 @@ case $basic_machine in\n \t\tbasic_machine=hppa1.1-winbond\n \t\tos=-proelf\n \t\t;;\n+\tx64)\n+\t\tbasic_machine=x86_64-pc\n+\t\t;;\n \txbox)\n \t\tbasic_machine=i686-pc\n \t\tos=-mingw32\n@@ -1267,20 +1253,12 @@ case $basic_machine in\n \t\tbasic_machine=xps100-honeywell\n \t\t;;\n \txscale-* | xscalee[bl]-*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/^xscale/arm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/^xscale/arm/'`\n \t\t;;\n \tymp)\n \t\tbasic_machine=ymp-cray\n \t\tos=-unicos\n \t\t;;\n-\tz8k-*-coff)\n-\t\tbasic_machine=z8k-unknown\n-\t\tos=-sim\n-\t\t;;\n-\tz80-*-coff)\n-\t\tbasic_machine=z80-unknown\n-\t\tos=-sim\n-\t\t;;\n \tnone)\n \t\tbasic_machine=none-none\n \t\tos=-none\n@@ -1309,10 +1287,6 @@ case $basic_machine in\n \tvax)\n \t\tbasic_machine=vax-dec\n \t\t;;\n-\tpdp10)\n-\t\t# there are many clones, so DEC is not a safe bet\n-\t\tbasic_machine=pdp10-unknown\n-\t\t;;\n \tpdp11)\n \t\tbasic_machine=pdp11-dec\n \t\t;;\n@@ -1322,9 +1296,6 @@ case $basic_machine in\n \tsh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)\n \t\tbasic_machine=sh-unknown\n \t\t;;\n-\tsparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)\n-\t\tbasic_machine=sparc-sun\n-\t\t;;\n \tcydra)\n \t\tbasic_machine=cydra-cydrome\n \t\t;;\n@@ -1344,18 +1315,18 @@ case $basic_machine in\n \t\t# Make sure to match an already-canonicalized machine name.\n \t\t;;\n \t*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n \n # Here we canonicalize certain aliases for manufacturers.\n case $basic_machine in\n \t*-digital*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/digital.*/dec/'`\n \t\t;;\n \t*-commodore*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/commodore.*/cbm/'`\n \t\t;;\n \t*)\n \t\t;;\n@@ -1366,8 +1337,8 @@ esac\n if [ x\"$os\" != x\"\" ]\n then\n case $os in\n-\t# First match some system type aliases\n-\t# that might get confused with valid system types.\n+\t# First match some system type aliases that might get confused\n+\t# with valid system types.\n \t# -solaris* is a basic system type, with this one exception.\n \t-auroraux)\n \t\tos=-auroraux\n@@ -1378,18 +1349,19 @@ case $os in\n \t-solaris)\n \t\tos=-solaris2\n \t\t;;\n-\t-svr4*)\n-\t\tos=-sysv4\n-\t\t;;\n \t-unixware*)\n \t\tos=-sysv4.2uw\n \t\t;;\n \t-gnu/linux*)\n \t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n \t\t;;\n-\t# First accept the basic system types.\n+\t# es1800 is here to avoid being matched by es* (a different OS)\n+\t-es1800*)\n+\t\tos=-ose\n+\t\t;;\n+\t# Now accept the basic system types.\n \t# The portable systems comes first.\n-\t# Each alternative MUST END IN A *, to match a version number.\n+\t# Each alternative MUST end in a * to match a version number.\n \t# -sysv* is not here because it comes later, after sysvr4.\n \t-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\\n \t      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\\\n@@ -1399,7 +1371,7 @@ case $os in\n \t      | -aos* | -aros* | -cloudabi* | -sortix* \\\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n-\t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n+\t      | -hiux* | -knetbsd* | -mirbsd* | -netbsd* \\\n \t      | -bitrig* | -openbsd* | -solidbsd* | -libertybsd* \\\n \t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n@@ -1410,14 +1382,14 @@ case $os in\n \t      | -midipix* | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n \t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n-\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n+\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n \t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n-\t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n+\t      | -morphos* | -superux* | -rtmk* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n \t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n-\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox*)\n+\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox* | -bme*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1434,12 +1406,12 @@ case $os in\n \t-nto*)\n \t\tos=`echo $os | sed -e 's|nto|nto-qnx|'`\n \t\t;;\n-\t-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\\n-\t      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \\\n+\t-sim | -xray | -os68k* | -v88r* \\\n+\t      | -windows* | -osx | -abug | -netware* | -os9* \\\n \t      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)\n \t\t;;\n \t-mac*)\n-\t\tos=`echo $os | sed -e 's|mac|macos|'`\n+\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n \t\t;;\n \t-linux-dietlibc)\n \t\tos=-linux-dietlibc\n@@ -1448,10 +1420,10 @@ case $os in\n \t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n \t\t;;\n \t-sunos5*)\n-\t\tos=`echo $os | sed -e 's|sunos5|solaris2|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n \t\t;;\n \t-sunos6*)\n-\t\tos=`echo $os | sed -e 's|sunos6|solaris3|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n \t\t;;\n \t-opened*)\n \t\tos=-openedition\n@@ -1462,12 +1434,6 @@ case $os in\n \t-wince*)\n \t\tos=-wince\n \t\t;;\n-\t-osfrose*)\n-\t\tos=-osfrose\n-\t\t;;\n-\t-osf*)\n-\t\tos=-osf\n-\t\t;;\n \t-utek*)\n \t\tos=-bsd\n \t\t;;\n@@ -1492,7 +1458,7 @@ case $os in\n \t-nova*)\n \t\tos=-rtmk-nova\n \t\t;;\n-\t-ns2 )\n+\t-ns2)\n \t\tos=-nextstep2\n \t\t;;\n \t-nsk*)\n@@ -1514,7 +1480,7 @@ case $os in\n \t-oss*)\n \t\tos=-sysv3\n \t\t;;\n-\t-svr4)\n+\t-svr4*)\n \t\tos=-sysv4\n \t\t;;\n \t-svr3)\n@@ -1529,24 +1495,28 @@ case $os in\n \t-ose*)\n \t\tos=-ose\n \t\t;;\n-\t-es1800*)\n-\t\tos=-ose\n-\t\t;;\n-\t-xenix)\n-\t\tos=-xenix\n-\t\t;;\n \t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n \t\tos=-mint\n \t\t;;\n-\t-aros*)\n-\t\tos=-aros\n-\t\t;;\n \t-zvmoe)\n \t\tos=-zvmoe\n \t\t;;\n \t-dicos*)\n \t\tos=-dicos\n \t\t;;\n+\t-pikeos*)\n+\t\t# Until real need of OS specific support for\n+\t\t# particular features comes up, bare metal\n+\t\t# configurations are quite functional.\n+\t\tcase $basic_machine in\n+\t\t    arm*)\n+\t\t\tos=-eabi\n+\t\t\t;;\n+\t\t    *)\n+\t\t\tos=-elf\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n \t-nacl*)\n \t\t;;\n \t-ios)\n@@ -1556,7 +1526,7 @@ case $os in\n \t*)\n \t\t# Get rid of the `-' at the beginning of $os.\n \t\tos=`echo $os | sed 's/[^-]*-//'`\n-\t\techo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': system \\`\"$os\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n@@ -1652,9 +1622,6 @@ case $basic_machine in\n \t*-be)\n \t\tos=-beos\n \t\t;;\n-\t*-haiku)\n-\t\tos=-haiku\n-\t\t;;\n \t*-ibm)\n \t\tos=-aix\n \t\t;;\n@@ -1694,7 +1661,7 @@ case $basic_machine in\n \tm88k-omron*)\n \t\tos=-luna\n \t\t;;\n-\t*-next )\n+\t*-next)\n \t\tos=-nextstep\n \t\t;;\n \t*-sequent)\n@@ -1709,9 +1676,6 @@ case $basic_machine in\n \ti370-*)\n \t\tos=-mvs\n \t\t;;\n-\t*-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \t*-gould)\n \t\tos=-sysv\n \t\t;;\n@@ -1821,15 +1785,15 @@ case $basic_machine in\n \t\t\t\tvendor=stratus\n \t\t\t\t;;\n \t\tesac\n-\t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed \"s/unknown/$vendor/\"`\n \t\t;;\n esac\n \n-echo $basic_machine$os\n+echo \"$basic_machine$os\"\n exit\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      }
    ]
  },
  {
    "sha": "25409b16fd593f45168e839fe21ed0f642908e11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTQwOWIxNmZkNTkzZjQ1MTY4ZTgzOWZlMjFlZDBmNjQyOTA4ZTEx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T11:12:49Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T11:12:49Z"
      },
      "message": "fixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS",
      "tree": {
        "sha": "a62902e611d30e37b0027bf631f980a01ebbb30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a62902e611d30e37b0027bf631f980a01ebbb30a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25409b16fd593f45168e839fe21ed0f642908e11",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFazEACgkQLuufXMCV\nJsGApg//dM3AKJuzDCG9jZKoe1qJgkpPrPU1b5vJrlg+WXCrWPcAtQXIwHeUScLe\nqJeIS4pfneoOS8H3ltJh8uf3wPu2eXNp6a08k1rODpTP58MC+uyxfb26MTkvqZ3H\nsQIhDWkJFvJ2Umr1gbl33JGP8qWcgtJmExIUEDhC6vpqqYJ5pkKFmLnn4m7wOLUo\nk9Zrs2xD57Na94Wp8XnWdNgTOPwnDK3d9VNnhJjMjmAYmjdFyZY3UK4ufdohk9qh\n+oc4/TyXC1WqRcVvtGvygFv5XGIN1iDaHvB3rIk1UHML+AO3b0LXne9gofKB+Q2Q\nbG1dB6r84DycGGJzYg0+LA60avkV0Q+zK49O5HOCb1Nb3sxwDNbyO5lFFxEdnGzD\n8ulUeC86QaRo0m7zD137dbRw7agemUSM5OPFgLVdCUI64FNu5mqvT4/iJEbnC3U3\nvR6az9EsMDvoRtKqqgVw/oqe09v8saJwoTTKL8GAkIIojWFM6xSgox83VRQvWdkI\n/ztUn8PLSkaL9XDrWT7r6KBeyBJRrlR4h0rXFRtb7fYODZP0jdi9owji7miFkdIP\n4jauaN0M0GBUi0nURd2MzS0Pq7X2xZUcmhQzNswCgTuQFCDD2TpZP9WRS7aOILRq\nGIPnj3jeMRJNU8ko8FqH6TVBPEN8YQUUkCWfEV91UHmfqQjpG7k=\n=4fNI\n-----END PGP SIGNATURE-----",
        "payload": "tree a62902e611d30e37b0027bf631f980a01ebbb30a\nparent 3335d45f28cd4fdee47364ec47309d7dd8f94ea9\nauthor fanquake <fanquake@gmail.com> 1518693169 +0800\ncommitter fanquake <fanquake@gmail.com> 1518693169 +0800\n\nfixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25409b16fd593f45168e839fe21ed0f642908e11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25409b16fd593f45168e839fe21ed0f642908e11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25409b16fd593f45168e839fe21ed0f642908e11/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3335d45f28cd4fdee47364ec47309d7dd8f94ea9"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9976db43c28122df8eeef56263f4c35a28af3ba4",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25409b16fd593f45168e839fe21ed0f642908e11/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25409b16fd593f45168e839fe21ed0f642908e11/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=25409b16fd593f45168e839fe21ed0f642908e11",
        "patch": "@@ -9,6 +9,7 @@ $(package)_build_opts=CC=\"$($(package)_cc)\"\n $(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n+$(package)_build_env+=CFLAGS=-D_DARWIN_C_SOURCE\n endef\n \n define $(package)_preprocess_cmds"
      }
    ]
  },
  {
    "sha": "ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTBmYmYwOTgxN2ZjMmYyODU2N2QxZmZhNmI1NWI3ZmI4ZDIzZGYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T12:06:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T12:08:43Z"
      },
      "message": "Merge #12417: Upgrade mac_alias to 2.0.7\n\nfc1bfcf Update mac_alias to 2.0.7 (Douglas Roark)\ndeee216 Delete mac_alias patch (Douglas Roark)\n\nPull request description:\n\n  The patch Bitcoin Core has been maintaining for mac_alias was pulled by the mac_alias maintainer in commit 4f31cb084c1c6a8626128b0b00842020b6db9037. Delete the patch and remove the patch from the depends system.\n\n  Note that this PR won't be complete until a new version of mac_alias containing the patch has been released, and the depends system is updated to reflect the new version.\n\nTree-SHA512: e13f1b45c0a56e95645b1aff77036c8a24c29c3f18ea0d386fba8d6d0f5fd07c434afc09dcd644d46ca096d6a7a0d5097f1eca3be5b5a5475eb3d54407044fd9",
      "tree": {
        "sha": "e5f22a6518b3ed64ac01fc833e4286d12ea2fc80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5f22a6518b3ed64ac01fc833e4286d12ea2fc80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahXhLAAoJEB5K7WKYbNJdMMcIAI+voi7D7XweKbzlByfI9kmj\nVMjN3AVYP53iHLAxBtoOG0nG67+Ums6yxGKgn9BkI8dNqZKIz+EqJ2Z3cHEHsuHZ\nsM8ks7U+eC52BbM1BCGQeXjcmVWC+BDeFm0pcGp4C+ykwD2laonQVaJkvxcWjEmQ\n26igEXbgo6LprOXhWYK5uCTT85/5UjQhBd8XSNtr5O1VSSVLJlrk/xNleyXCmPOm\nkB8i3TYX+sGG+nZxhOyg+bzs9XS5UxLPzMHD4MnpMW94ncZTyD49Cu7AV6yObQXh\nPCy30YsHv9+wlcyfL8AmoAcPQuKILobNnw5HzN/MB5xbm0YU6fBvIqvOXL25s+o=\n=xv7i\n-----END PGP SIGNATURE-----",
        "payload": "tree e5f22a6518b3ed64ac01fc833e4286d12ea2fc80\nparent b2089c51cc4af2f7e1c0ec75be9449ee222b1d69\nparent fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518696400 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518696523 +0100\n\nMerge #12417: Upgrade mac_alias to 2.0.7\n\nfc1bfcf Update mac_alias to 2.0.7 (Douglas Roark)\ndeee216 Delete mac_alias patch (Douglas Roark)\n\nPull request description:\n\n  The patch Bitcoin Core has been maintaining for mac_alias was pulled by the mac_alias maintainer in commit 4f31cb084c1c6a8626128b0b00842020b6db9037. Delete the patch and remove the patch from the depends system.\n\n  Note that this PR won't be complete until a new version of mac_alias containing the patch has been released, and the depends system is updated to reflect the new version.\n\nTree-SHA512: e13f1b45c0a56e95645b1aff77036c8a24c29c3f18ea0d386fba8d6d0f5fd07c434afc09dcd644d46ca096d6a7a0d5097f1eca3be5b5a5475eb3d54407044fd9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69"
      },
      {
        "sha": "fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 2,
      "deletions": 63
    },
    "files": [
      {
        "sha": "306c8356567bcef2100ab5c265d3713d793913b4",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
        "patch": "@@ -1,14 +1,9 @@\n package=native_mac_alias\n-$(package)_version=2.0.6\n+$(package)_version=2.0.7\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n+$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n-$(package)_patches=python3.patch\n-\n-define $(package)_preprocess_cmds\n-    patch -p1 < $($(package)_patch_dir)/python3.patch\n-endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "6f2f5534a275d57d3dcb8287823b85e663152904",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "patch": "@@ -1,56 +0,0 @@\n-diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n---- a/mac_alias/alias.py\n-+++ b/mac_alias/alias.py\n-@@ -258,10 +258,10 @@\n-         alias = Alias()\n-         alias.appinfo = appinfo\n-             \n--        alias.volume = VolumeInfo (volname.replace('/',':'),\n-+        alias.volume = VolumeInfo (volname.decode().replace('/',':'),\n-                                    voldate, fstype, disktype,\n-                                    volattrs, volfsid)\n--        alias.target = TargetInfo (kind, filename.replace('/',':'),\n-+        alias.target = TargetInfo (kind, filename.decode().replace('/',':'),\n-                                    folder_cnid, cnid,\n-                                    crdate, creator_code, type_code)\n-         alias.target.levels_from = levels_from\n-@@ -276,9 +276,9 @@\n-                 b.read(1)\n- \n-             if tag == TAG_CARBON_FOLDER_NAME:\n--                alias.target.folder_name = value.replace('/',':')\n-+                alias.target.folder_name = value.decode().replace('/',':')\n-             elif tag == TAG_CNID_PATH:\n--                alias.target.cnid_path = struct.unpack(b'>%uI' % (length // 4),\n-+                alias.target.cnid_path = struct.unpack('>%uI' % (length // 4),\n-                                                            value)\n-             elif tag == TAG_CARBON_PATH:\n-                 alias.target.carbon_path = value\n-@@ -313,9 +313,9 @@\n-                 alias.target.creation_date \\\n-                     = mac_epoch + datetime.timedelta(seconds=seconds)\n-             elif tag == TAG_POSIX_PATH:\n--                alias.target.posix_path = value\n-+                alias.target.posix_path = value.decode()\n-             elif tag == TAG_POSIX_PATH_TO_MOUNTPOINT:\n--                alias.volume.posix_path = value\n-+                alias.volume.posix_path = value.decode()\n-             elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n-                 alias.volume.disk_image_alias = Alias.from_bytes(value)\n-             elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n-@@ -467,12 +467,12 @@\n- \n-         b.write(struct.pack(b'>hhQhhQ',\n-                 TAG_HIGH_RES_VOLUME_CREATION_DATE,\n--                8, long(voldate * 65536),\n-+                8, int(voldate * 65536),\n-                 TAG_HIGH_RES_CREATION_DATE,\n--                8, long(crdate * 65536)))\n-+                8, int(crdate * 65536)))\n- \n-         if self.target.cnid_path:\n--            cnid_path = struct.pack(b'>%uI' % len(self.target.cnid_path),\n-+            cnid_path = struct.pack('>%uI' % len(self.target.cnid_path),\n-                                     *self.target.cnid_path)\n-             b.write(struct.pack(b'>hh', TAG_CNID_PATH,\n-                                  len(cnid_path)))"
      }
    ]
  },
  {
    "sha": "737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzdlZDhiYjc3ZDE5YjkzOWU4ZDEwZTBkNjU1NWE0ZGRjYWJhOWQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T13:31:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T13:33:27Z"
      },
      "message": "Merge #12415: Interrupt loading thread after shutdown request\n\n2e9406c Interrupt loading thread after shutdown request (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This change (currently) avoids loading the mempool if shutdown is requested.\n\nTree-SHA512: 3dca3a6ea5b09bd71db0974584d93dfe81819bc0bdbb4d9b6fa0474755306d1403f6c058ecb8211384493a8f7ca3a9134173db744b7344043cfc7d79286c8fd4",
      "tree": {
        "sha": "8ddcad24a9eedd18e7031421fcdfe0655fb3713c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ddcad24a9eedd18e7031421fcdfe0655fb3713c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahYwnAAoJEB5K7WKYbNJdOGQIAI0YbOguvobKgbibsqhTUggc\nZEdgsvhJbYigo7AGmb5EkeLBO1la4VN16bbG4TYcRAsAmJzM3uVMe/VdVOva2e35\nRanTLx2SPPEt/BOI4P4omii/x7Twzz6v9N9Ugp9XFKf4YM5jGAeyia4+9zaKMaTw\nAHNbf/rSsdamBfdcxxDpEjk8Bfxcbq5VmJx9M10Sdw5lgNSg96c+epgLZOpL6e6w\n8VCGVYiF+fMseUR1xiHo3S8DdfZtq3byQmwGSjrjOGXGASiEkZjOjbXV4aLi/eZH\nwD5P8qIRHT95tMyKWqoEYrv96SwMs3cXWOjkkq7CxvXbCmHT/YgEaZCN/dJzfn4=\n=M6qN\n-----END PGP SIGNATURE-----",
        "payload": "tree 8ddcad24a9eedd18e7031421fcdfe0655fb3713c\nparent ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0\nparent 2e9406c0c588ddf6f039fd3ff73c978177483869\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518701467 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518701607 +0100\n\nMerge #12415: Interrupt loading thread after shutdown request\n\n2e9406c Interrupt loading thread after shutdown request (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This change (currently) avoids loading the mempool if shutdown is requested.\n\nTree-SHA512: 3dca3a6ea5b09bd71db0974584d93dfe81819bc0bdbb4d9b6fa0474755306d1403f6c058ecb8211384493a8f7ca3a9134173db744b7344043cfc7d79286c8fd4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0"
      },
      {
        "sha": "2e9406c0c588ddf6f039fd3ff73c978177483869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9406c0c588ddf6f039fd3ff73c978177483869",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9406c0c588ddf6f039fd3ff73c978177483869"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "895a5358f4ff05b86641df68a9b9b4189e0d658c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
        "patch": "@@ -680,11 +680,13 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (!ActivateBestChain(state, chainparams)) {\n         LogPrintf(\"Failed to connect best block\");\n         StartShutdown();\n+        return;\n     }\n \n     if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n+        return;\n     }\n     } // End scope of CImportingNow\n     if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {"
      }
    ]
  },
  {
    "sha": "bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmEzOTExNGUyY2Y0NzEyZmU3NGQ3YjE5ZDUxNjU1M2Y0M2U1ZmEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:09:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:10:37Z"
      },
      "message": "Merge #12426: qt: Initialize members in WalletModel\n\nfa27623 qt: Initialize members in WalletModel (MarcoFalke)\n\nPull request description:\n\n  This prevents segfaults (or errors when running qt in valgrind)\n\n  ```\n  Conditional jump or move depends on uninitialised value(s)\n      WalletModel::checkBalanceChanged() (walletmodel.cpp:156)\n\nTree-SHA512: 38c8c03c7fa947edb3f1c13eab2ac7a62ef8f8141603c2329a7dc5821a887a349af8014dc739b762e046f410f44a9c6653b6930f08b53496cf66381cadc06246",
      "tree": {
        "sha": "562cefd2edb32964a68ad6d227964cb8f2cc8822",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/562cefd2edb32964a68ad6d227964cb8f2cc8822"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahaLtAAoJEB5K7WKYbNJdk34H/0Sv3m2sZUSwaAR+FC+mekmh\nGYmntVJPYAW7JBYUpgtrCjg+2emzF0ADm6q6KZ19bfYKKB3+c1AMo/xhd/aViO0M\nYYxhGpWahnr8kKGBCdkb5+Az0BB4JKc4Kg8dKl6zuDxXc1+/bQnsqLxTUYJlRJs4\ne0mOmTnQ9++1WC5wmAWVbWU8D1JeUiH528btaq+fxhu3h/cOz8iWPkZYyNXd187Q\n/WKDCT+ivZCDAyGCA06Bk3IRYUyZa/FRMWpXavYcvBwvv1xhxzzBI/w5ic1U4GhS\nrmi9nINchKN7WdZ0R+3GsCCacCsBvYgyayvxk9Nk4P+S0k8oFbeAPRnIKEE35oY=\n=bL0g\n-----END PGP SIGNATURE-----",
        "payload": "tree 562cefd2edb32964a68ad6d227964cb8f2cc8822\nparent 737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8\nparent fa27623edbe7530d667e05d513066d1bd5339f41\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518707371 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518707437 +0100\n\nMerge #12426: qt: Initialize members in WalletModel\n\nfa27623 qt: Initialize members in WalletModel (MarcoFalke)\n\nPull request description:\n\n  This prevents segfaults (or errors when running qt in valgrind)\n\n  ```\n  Conditional jump or move depends on uninitialised value(s)\n      WalletModel::checkBalanceChanged() (walletmodel.cpp:156)\n\nTree-SHA512: 38c8c03c7fa947edb3f1c13eab2ac7a62ef8f8141603c2329a7dc5821a887a349af8014dc739b762e046f410f44a9c6653b6930f08b53496cf66381cadc06246\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8"
      },
      {
        "sha": "fa27623edbe7530d667e05d513066d1bd5339f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27623edbe7530d667e05d513066d1bd5339f41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27623edbe7530d667e05d513066d1bd5339f41"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34954a6bfa98feab6ef9f05dcd4e6693cca2c464",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa39114e2cf4712fe74d7b19d516553f43e5fa0/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa39114e2cf4712fe74d7b19d516553f43e5fa0/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
        "patch": "@@ -42,6 +42,7 @@ WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, O\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n     cachedBalance(0), cachedUnconfirmedBalance(0), cachedImmatureBalance(0),\n+    cachedWatchOnlyBalance{0}, cachedWatchUnconfBalance{0}, cachedWatchImmatureBalance{0},\n     cachedEncryptionStatus(Unencrypted),\n     cachedNumBlocks(0)\n {"
      }
    ]
  },
  {
    "sha": "fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzg4OGJmY2FjYjg3NWM0NWJjOGY5ZDdjYTEzNTdhYjcwYTMwNDkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T13:12:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:24:45Z"
      },
      "message": "util: Fix multiple use of LockDirectory\n\nThis commit fixes problems with calling LockDirectory multiple times on\nthe same directory, or from multiple threads. It also fixes the build on\nOpenBSD.\n\n- Wrap the boost::interprocess::file_lock in a std::unique_ptr inside\n  the map that keeps track of per-directory locks. This fixes a build\n  issue with the clang 4.0.0+boost-1.58.0p8 version combo on OpenBSD\n  6.2, and should have no observable effect otherwise.\n\n- Protect the locks map using a mutex.\n\n- Make sure that only locks that are successfully acquired are inserted\n  in the map.\n\n- Open the lock file for appending only if we know we don't have the\n  lock yet - The `FILE* file = fsbridge::fopen(pathLockFile, \"a\");`\n  wipes the 'we own this lock' administration, likely because it opens\n  a new fd for the locked file then closes it.",
      "tree": {
        "sha": "569fcde0c6b00df3b90bcc5a4cb5139452cfa596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/569fcde0c6b00df3b90bcc5a4cb5139452cfa596"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "49f40dc942296201af6cc5d5ad1543a43b67c329",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc888bfcacb875c45bc8f9d7ca1357ab70a30490/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc888bfcacb875c45bc8f9d7ca1357ab70a30490/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
        "patch": "@@ -375,18 +375,32 @@ int LogPrintStr(const std::string &str)\n \n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    // A map that contains all the currently held directory locks. After\n+    // successful locking, these will be held here until the global\n+    // destructor cleans them up and thus automatically unlocks them.\n+    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n+    // Protect the map with a mutex\n+    static std::mutex cs;\n+    std::lock_guard<std::mutex> ulock(cs);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;\n         }\n-        if (probe_only) {\n-            lock.unlock();\n+        if (!probe_only) {\n+            // Lock successful and we're not just probing, put it into the map\n+            locks.emplace(pathLockFile.string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());"
      }
    ]
  },
  {
    "sha": "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDRjYmQyNmU0MjIwOTgyZjdmMmY2MGU0NDcxOTlkNmY2MmFlMjU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T12:53:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:25:13Z"
      },
      "message": "test: Add unit test for LockDirectory\n\nAdd a unit test for LockDirectory, introduced in #11281.",
      "tree": {
        "sha": "4c8f244dacd9238dd810b5821175bb72b1d49808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c8f244dacd9238dd810b5821175bb72b1d49808"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc888bfcacb875c45bc8f9d7ca1357ab70a30490"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 154,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4b2da3e2193a7490f5a20b3c6bf9bac528b88396",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "patch": "@@ -13,6 +13,10 @@\n \n #include <stdint.h>\n #include <vector>\n+#ifndef WIN32\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#endif\n \n #include <boost/test/unit_test.hpp>\n \n@@ -603,4 +607,130 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)\n+{\n+    *result = LockDirectory(dirname, lockname);\n+}\n+\n+#ifndef WIN32 // Cannot do this test on WIN32 due to lack of fork()\n+static constexpr char LockCommand = 'L';\n+static constexpr char UnlockCommand = 'U';\n+static constexpr char ExitCommand = 'X';\n+\n+static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n+{\n+    char ch;\n+    int rv;\n+    while (true) {\n+        rv = read(fd, &ch, 1); // Wait for command\n+        assert(rv == 1);\n+        switch(ch) {\n+        case LockCommand:\n+            ch = LockDirectory(dirname, lockname);\n+            rv = write(fd, &ch, 1);\n+            assert(rv == 1);\n+            break;\n+        case UnlockCommand:\n+            ReleaseDirectoryLocks();\n+            ch = true; // Always succeeds\n+            rv = write(fd, &ch, 1);\n+            break;\n+        case ExitCommand:\n+            close(fd);\n+            exit(0);\n+        default:\n+            assert(0);\n+        }\n+    }\n+}\n+#endif\n+\n+BOOST_AUTO_TEST_CASE(test_LockDirectory)\n+{\n+    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\n+    const std::string lockname = \".lock\";\n+#ifndef WIN32\n+    // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n+    // it: there is BOOST_TEST_IGNORE_SIGCHLD but that only works when defined\n+    // at build-time of the boost library\n+    void (*old_handler)(int) = signal(SIGCHLD, SIG_DFL);\n+\n+    // Fork another process for testing before creating the lock, so that we\n+    // won't fork while holding the lock (which might be undefined, and is not\n+    // relevant as test case as that is avoided with -daemonize).\n+    int fd[2];\n+    BOOST_CHECK_EQUAL(socketpair(AF_UNIX, SOCK_STREAM, 0, fd), 0);\n+    pid_t pid = fork();\n+    if (!pid) {\n+        BOOST_CHECK_EQUAL(close(fd[1]), 0); // Child: close parent end\n+        TestOtherProcess(dirname, lockname, fd[0]);\n+    }\n+    BOOST_CHECK_EQUAL(close(fd[0]), 0); // Parent: close child end\n+#endif\n+    // Lock on non-existent directory should fail\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), false);\n+\n+    fs::create_directories(dirname);\n+\n+    // Probing lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Persistent lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from the same thread should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from a different thread within the same process should succeed\n+    bool threadresult;\n+    std::thread thr(TestOtherThread, dirname, lockname, &threadresult);\n+    thr.join();\n+    BOOST_CHECK_EQUAL(threadresult, true);\n+#ifndef WIN32\n+    // Try to aquire lock in child process while we're holding it, this should fail.\n+    char ch;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, false);\n+\n+    // Give up our lock\n+    ReleaseDirectoryLocks();\n+    // Probing lock from our side now should succeed, but not hold on to the lock.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Try to acquire the lock in the child process, this should be succesful.\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should fail.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), false);\n+\n+    // Unlock the lock in the child process\n+    BOOST_CHECK_EQUAL(write(fd[1], &UnlockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should succeed.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Re-lock the lock in the child process, then wait for it to exit, check\n+    // successful return. After that, we check that exiting the process\n+    // has released the lock as we would expect by probing it.\n+    int processstatus;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(write(fd[1], &ExitCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(waitpid(pid, &processstatus, 0), pid);\n+    BOOST_CHECK_EQUAL(processstatus, 0);\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Restore SIGCHLD\n+    signal(SIGCHLD, old_handler);\n+    BOOST_CHECK_EQUAL(close(fd[1]), 0); // Close our side of the socketpair\n+#endif\n+    // Clean up\n+    ReleaseDirectoryLocks();\n+    fs::remove_all(dirname);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "dcf7ed38b11953a826086aecc716893f8fa10f06",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "patch": "@@ -373,19 +373,22 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n-    // A map that contains all the currently held directory locks. After\n-    // successful locking, these will be held here until the global\n-    // destructor cleans them up and thus automatically unlocks them.\n-    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n-    // Protect the map with a mutex\n-    static std::mutex cs;\n-    std::lock_guard<std::mutex> ulock(cs);\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n \n     // If a lock for this directory already exists in the map, don't try to re-lock it\n-    if (locks.count(pathLockFile.string())) {\n+    if (dir_locks.count(pathLockFile.string())) {\n         return true;\n     }\n \n@@ -400,14 +403,20 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n         }\n         if (!probe_only) {\n             // Lock successful and we're not just probing, put it into the map\n-            locks.emplace(pathLockFile.string(), std::move(lock));\n+            dir_locks.emplace(pathLockFile.string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n     }\n     return true;\n }\n \n+void ReleaseDirectoryLocks()\n+{\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n+    dir_locks.clear();\n+}\n+\n /** Interpret string as boolean, for argument parsing */\n static bool InterpretBool(const std::string& strValue)\n {"
      },
      {
        "sha": "9490a5678f2a8695203c66d562298ac07c6415fe",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "patch": "@@ -174,6 +174,12 @@ int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+\n+/** Release all directory locks. This is used for unit testing only, at runtime\n+ * the global destructor will take care of the locks.\n+ */\n+void ReleaseDirectoryLocks();\n+\n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);"
      }
    ]
  },
  {
    "sha": "fd65937ec601326b479654a5ad14847adcdb214c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDY1OTM3ZWM2MDEzMjZiNDc5NjU0YTVhZDE0ODQ3YWRjZGIyMTRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:35:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:35:42Z"
      },
      "message": "Merge #12356: Fix 'mempool min fee not met' debug output\n\nbb00c95 Consistently use FormatStateMessage in RPC error output (Ben Woosley)\n8b8a1c4 Add test for 'mempool min fee not met' rpc error (Ben Woosley)\nc04e0f6 Fix 'mempool min fee not met' debug output (Ben Woosley)\n\nPull request description:\n\n  Output the value that is tested, rather than the unmodified fee value.\n\n  Prompted by looking into: #11955\n\nTree-SHA512: fc0bad47d4af375d208f657a6ccbad6ef7f4e2989ae2ce1171226c22fa92847494a2c55cca687bd5a1548663ed3313569bcc31c00d53c0c193a1b865dd8a7657",
      "tree": {
        "sha": "c0faa5bb308e49fbcdb648fbfae5aa26f5e4f60c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0faa5bb308e49fbcdb648fbfae5aa26f5e4f60c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd65937ec601326b479654a5ad14847adcdb214c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahajOAAoJEB5K7WKYbNJd4eMH/1TCFHgjJydOQUrnBehNisxe\nCV782F82KivBSTKIjm0dnoiem4aE/dh+qzk8LzpSZVsvMkkHHtHPvxMdeUX7xsGJ\nyhoxtiwvH1TZThzbN1ZSVcLhgZu5GZrpSV5jzp/aW/L6RYXdbtlAU8V357NguuPM\n1nqbV87Rak5LlTIQjfHvbpwFwKMa3q6jLSfGXLlCVf7Jbej8yefxTdGRzN8TGooF\nHX2N/dH6w2YFgpQ/vuHWtL8bS/l8Dq1ZgoYrX689i0yau4CsXlrVdv1sa2l9CqX1\n70D6KzfcuKgb4N7dhMYmUz92i/K9H+BA1H0wj8Rwf0pxXlqPu+/JRAArOG2jBIY=\n=m2DP\n-----END PGP SIGNATURE-----",
        "payload": "tree c0faa5bb308e49fbcdb648fbfae5aa26f5e4f60c\nparent bfa39114e2cf4712fe74d7b19d516553f43e5fa0\nparent bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518708912 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518708942 +0100\n\nMerge #12356: Fix 'mempool min fee not met' debug output\n\nbb00c95 Consistently use FormatStateMessage in RPC error output (Ben Woosley)\n8b8a1c4 Add test for 'mempool min fee not met' rpc error (Ben Woosley)\nc04e0f6 Fix 'mempool min fee not met' debug output (Ben Woosley)\n\nPull request description:\n\n  Output the value that is tested, rather than the unmodified fee value.\n\n  Prompted by looking into: #11955\n\nTree-SHA512: fc0bad47d4af375d208f657a6ccbad6ef7f4e2989ae2ce1171226c22fa92847494a2c55cca687bd5a1548663ed3313569bcc31c00d53c0c193a1b865dd8a7657\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd65937ec601326b479654a5ad14847adcdb214c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa39114e2cf4712fe74d7b19d516553f43e5fa0"
      },
      {
        "sha": "bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 25,
      "deletions": 16
    },
    "files": [
      {
        "sha": "f1352a13cfae498cd415f422140a5607f3b3088a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -1434,7 +1434,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n     PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1472,7 +1472,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1509,7 +1509,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1563,7 +1563,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             pindex = chainActive.Tip();\n         }\n     }\n-    \n+\n     assert(pindex != nullptr);\n \n     if (request.params[0].isNull()) {"
      },
      {
        "sha": "3f3bfa0cfd9d831acc42dc336dd4bf7b499da0c6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -264,11 +264,11 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     if (state.IsValid())\n         return NullUniValue;\n \n-    std::string strRejectReason = state.GetRejectReason();\n     if (state.IsError())\n-        throw JSONRPCError(RPC_VERIFY_ERROR, strRejectReason);\n+        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n     if (state.IsInvalid())\n     {\n+        std::string strRejectReason = state.GetRejectReason();\n         if (strRejectReason.empty())\n             return \"rejected\";\n         return strRejectReason;"
      },
      {
        "sha": "803cd28649c35d6a813e538124df6f7c70d056ff",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -981,12 +981,12 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n-                throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n             } else {\n                 if (fMissingInputs) {\n                     throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n                 }\n-                throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware"
      },
      {
        "sha": "d9e877f2ebee955f00a05855a308edbc1651563f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -712,7 +712,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks"
      },
      {
        "sha": "9cae660c60097f87fbaf0dca62845a071cd970cf",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -274,7 +274,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     CValidationState state;\n     if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n-        errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n+        errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;\n     }\n \n@@ -297,4 +297,3 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n }\n \n } // namespace feebumper\n-"
      },
      {
        "sha": "8f378acd1a38d23dd807a61e30930bba4bbd0a41",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -435,7 +435,7 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     }\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n-        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n }\n@@ -1155,7 +1155,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n-        strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n+        strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "408a01c50b7a525caedc0cb8400415c46e6c5cc2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -3092,7 +3092,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         {\n             // Broadcast\n             if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n-                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n+                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n                 wtx.RelayWalletTransaction(connman);"
      },
      {
        "sha": "740c498ce6bb4f8ecc7165afa63057b3eb1b6f37",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -21,7 +21,7 @@\n from io import BytesIO\n import time\n \n-NULLDUMMY_ERROR = \"64: non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n+NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n \n def trueDummy(tx):\n     scriptSig = CScript(tx.vin[0].scriptSig)"
      },
      {
        "sha": "7e01663c96bd577445c0b9240ed680b4eb285590",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -50,5 +50,15 @@ def run_test(self):\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n+        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n+        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n+        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      },
      {
        "sha": "8cea9c27833a994a627cfec28aebc402c997a1d1",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -120,7 +120,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"min relay fee not met (code 66)\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      }
    ]
  },
  {
    "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDk5NjhmNGQwMDY2OGI5OTBhZTE5YWVkMDI0ZmYzZmQyNzA3MmI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T17:17:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T17:17:19Z"
      },
      "message": "Merge #12200: Bind functional test nodes to 127.0.0.1\n\n65682da [tests] bind functional test nodes to 127.0.0.1 (Sjors Provoost)\n\nPull request description:\n\n  Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\n\n  To test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\n\n  Easiest way to reproduce a popup without running the test suite:\n\n  ```sh\n  src/bitcoind -regtest -bind=127.0.0.1 # No popup\n  src/bitcoind -regtest # Popup\n  ```\n\nTree-SHA512: ffa92f148a2ead2ceca978c285882979639be23eb31ad6a27aa81df9fdddba5d493719c92c09a351a81d638f6f739c351a721e42168d77ead60abe074df773d6",
      "tree": {
        "sha": "da933149c67d9a433bb2ffcaf7439e59ceaef35c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da933149c67d9a433bb2ffcaf7439e59ceaef35c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahcCfAAoJEB5K7WKYbNJdMkIH/24YHj5iYSDn/xz9+CV8LdH4\nvNWMGBg88bpLaIjfIdQZFK7bMP3D48Sarpc9U1jaPy56r1xJpWyYfszxnUCCbhEE\nYcNrWVI0Z9homJMYq64zv3bqNRQhcsL2kID8nqzCO/UqJYXPBv1eJh9XhExBoaS6\nFcd/pTjQ+4eQDqZ332s3uJOLS7DnFZgihdO6oYQrSrxr2CByMTcv+lyTwEqFWMhD\nrXdKXjwGOvWLs7jY4u88c0w5oTzJu16oNwlEKphtWvgxiE+1hce/ueXXIwIKTyuR\nQsurKQURg/KvToqyb1pX27Sh17r9aloTIOdHM/r4I6+6V5sLFmpqC5Tblj+pYmE=\n=P3vM\n-----END PGP SIGNATURE-----",
        "payload": "tree da933149c67d9a433bb2ffcaf7439e59ceaef35c\nparent fd65937ec601326b479654a5ad14847adcdb214c\nparent 65682da7e57af544abb46a7d8a7f4fdca0c73f56\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518715027 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518715039 +0100\n\nMerge #12200: Bind functional test nodes to 127.0.0.1\n\n65682da [tests] bind functional test nodes to 127.0.0.1 (Sjors Provoost)\n\nPull request description:\n\n  Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\n\n  To test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\n\n  Easiest way to reproduce a popup without running the test suite:\n\n  ```sh\n  src/bitcoind -regtest -bind=127.0.0.1 # No popup\n  src/bitcoind -regtest # Popup\n  ```\n\nTree-SHA512: ffa92f148a2ead2ceca978c285882979639be23eb31ad6a27aa81df9fdddba5d493719c92c09a351a81d638f6f739c351a721e42168d77ead60abe074df773d6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd65937ec601326b479654a5ad14847adcdb214c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd65937ec601326b479654a5ad14847adcdb214c"
      },
      {
        "sha": "65682da7e57af544abb46a7d8a7f4fdca0c73f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65682da7e57af544abb46a7d8a7f4fdca0c73f56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65682da7e57af544abb46a7d8a7f4fdca0c73f56"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8bf75ca1ae31d8eac951aed80d1d70093b80eddd",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d09968f4d00668b990ae19aed024ff3fd27072b8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d09968f4d00668b990ae19aed024ff3fd27072b8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d09968f4d00668b990ae19aed024ff3fd27072b8",
        "patch": "@@ -292,6 +292,7 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n+        f.write(\"bind=127.0.0.1\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "face7220b776e3decf9889b2c20c9d5f935e971e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNlNzIyMGI3NzZlM2RlY2Y5ODg5YjJjMjBjOWQ1ZjkzNWU5NzFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:01:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:00:28Z"
      },
      "message": "qa: Move common args to bitcoin.conf",
      "tree": {
        "sha": "9f99a410b351a2368727f4f963e509f77d0c70d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f99a410b351a2368727f4f963e509f77d0c70d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/face7220b776e3decf9889b2c20c9d5f935e971e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJahdjMAAoJEM4rdWl+aaVI4fYMAJplkvPWtuA5V9Il5AFAQIHE\ngki1ihSnwzKWcmiAV9mnOQ3z3hlaw/c1r9/naY/g5aqUOCA9k4p8Rwncs5hCsnJm\njMwOdsGl0FLvSFFotGRhh1hjHj8kOoeN9Feuh+5ULszIgAFSpanHqTmMGWFqFrsY\nCxS032irZ7x7/392zFOiyJrFynR987uWcig+fObgjxAovCooXaRc1Sz8xOVq2ePc\ntYNFceVwI/rhBZktsN3p9piDbQSdNLbX5DLSo+9A3ZhDTFlbqSgBKl1fxMXeEKRO\nCP9wd2KgEAO9hx++MAn8FAuw6V0eiMDFuYlzeUEC0vg6IJPoPRjZSKkvLUhjU/1i\nV89HXepa7WE4BAR6JpCw/gfv7IQqiK+z5qUEWUnREdl0CUU1GYE9iKc8k3L2Qo3G\ncGt3jwSt1D1/PVA+ZwvUPONBegA/YnXcy0Y2P5E8WYsNFr9sbAsbr8g66f8M7RB0\n0KMQOCyD6xutzNUc3IJ9Dvro/mPegS28YkGs54gjGg==\n=uCjv\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f99a410b351a2368727f4f963e509f77d0c70d7\nparent d09968f4d00668b990ae19aed024ff3fd27072b8\nauthor MarcoFalke <falke.marco@gmail.com> 1518721303 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518721228 -0500\n\nqa: Move common args to bitcoin.conf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/face7220b776e3decf9889b2c20c9d5f935e971e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/face7220b776e3decf9889b2c20c9d5f935e971e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/face7220b776e3decf9889b2c20c9d5f935e971e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e87f6d33f0dcb5bf7065c7f29be63aa2bf06333",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -46,6 +46,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-rest\"]] * self.num_nodes\n \n     def setup_network(self, split=False):\n         super().setup_network()"
      },
      {
        "sha": "ecb91b315e013c0ca907bb6dc687e594219664e7",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -392,7 +392,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))"
      },
      {
        "sha": "93a052f7857e380b4cae6fcdfc779e1ca33d2d19",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -57,9 +57,11 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = binary\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n-        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        # Most callers will just need to add extra args to the standard list below.\n+        # For those callers that need more flexibity, they can just set the args property directly.\n+        # Note that common args are set in the config file (see initialize_datadir)\n         self.extra_args = extra_args\n-        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n \n         self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n         self.use_cli = use_cli"
      },
      {
        "sha": "fb67e1530f33a3d9353279920ea2808151ece973",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -291,6 +291,9 @@ def initialize_datadir(dirname, n):\n         f.write(\"regtest=1\\n\")\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n+        f.write(\"server=1\\n\")\n+        f.write(\"keypool=1\\n\")\n+        f.write(\"discover=0\\n\")\n         f.write(\"listenonion=0\\n\")\n         f.write(\"bind=127.0.0.1\\n\")\n     return datadir"
      }
    ]
  },
  {
    "sha": "fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZiZjdmNzRlMWEwMDhlZjI1Y2JmZTliYTZiYWVlNDhhM2Q5MjEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:37:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:39:04Z"
      },
      "message": "devtools: Exclude patches from lint-whitespace",
      "tree": {
        "sha": "1c8482c3190b1f3f3e8fcb3563c1103b8e37328e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c8482c3190b1f3f3e8fcb3563c1103b8e37328e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaheHYAAoJEM4rdWl+aaVI1+AL/jYrDWEaEloWfLvi7vgiAmTK\ncs9FlBbo2D3CmJ8Da5lxd99iRXS3alwsHEvAHNbEyRDFHYVONyGudPPU0bJijUrr\n2SXb5Yj+JvZ4C/x115WsIEyEJjYyTUz+iE1N4YLxGoFo8GaDE6Xf6pUfwrF/XxSf\niVyVPsljgOExAnh8M65O8RzZoE1k5pgIEO1uR2i8g6BfJ/jpxoqQtUhWNy1zhcmi\nBwp+E4jn2k6wMYowxseokpWHnue5XUaU/Twjl+/eyTsaC7ZH9nqVbLgH1wpJxAuZ\n656SwO9Du237aYMoNSovD+EJQX3cdGGvTnP9lWaLiPl7N4vj3SWXcG7vcXcj2hDF\nqOHaQ3b2ck9fXYFhC5XDrzvXjIdX7/jSzi4txbcAiBNGA/hTY57cJQPMrAr60Pvv\n4IJA8B6SHkSgtIlS5CUeQD4wdDybLhIMTs59HNTlph9f5Z8qFc27rsAGj4o74BJA\ntWfgTCdoXWzBAzO/OJm2xrunIQIYMSlNHNjktgJAIA==\n=z8Q8\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c8482c3190b1f3f3e8fcb3563c1103b8e37328e\nparent fd65937ec601326b479654a5ad14847adcdb214c\nauthor MarcoFalke <falke.marco@gmail.com> 1518723451 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518723544 -0500\n\ndevtools: Exclude patches from lint-whitespace\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd65937ec601326b479654a5ad14847adcdb214c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd65937ec601326b479654a5ad14847adcdb214c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "af9a57910adf2dc3806a71d9f8716651f3045ff8",
        "filename": "contrib/devtools/lint-whitespace.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210/contrib/devtools/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210/contrib/devtools/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-whitespace.sh?ref=fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
        "patch": "@@ -16,7 +16,7 @@ if [ -z \"${TRAVIS_COMMIT_RANGE}\" ]; then\n fi\n \n showdiff() {\n-  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n+  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)depends/patches/\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n     echo \"Failed to get a diff\"\n     exit 1\n   fi"
      }
    ]
  },
  {
    "sha": "58715f6d073f2751a49332ddfc235e080fb8d413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODcxNWY2ZDA3M2YyNzUxYTQ5MzMyZGRmYzIzNWUwODBmYjhkNDEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:02:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:10:42Z"
      },
      "message": "Merge #12422: util: Make LockDirectory thread-safe, consistent, and fix OpenBSD 6.2 build\n\n1d4cbd2 test: Add unit test for LockDirectory (Wladimir J. van der Laan)\nfc888bf util: Fix multiple use of LockDirectory (Wladimir J. van der Laan)\n\nPull request description:\n\n  Wrap the `boost::interprocess::file_lock` in a `std::unique_ptr` inside the map that keeps track of per-directory locks.\n\n  This fixes a build issue with the clang 4.0.0+boost-1.58.0p8 version combo on OpenBSD 6.2, and should have no effect otherwise.\n\n  Also add a unit test, make the function thread-safe, and fix Linux versus Windows behavior inconsistency.\n\n  Meant to fix #12413.\n\nTree-SHA512: 1a94c714c932524a51212c46e8951c129337d57b00fd3da5a347c6bcf6a947706cd440f39df935591b2079995136917f71ca7435fb356f6e8a128c509a62ec32",
      "tree": {
        "sha": "58256693b9a57dff515449e3f3f342455c9330f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58256693b9a57dff515449e3f3f342455c9330f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58715f6d073f2751a49332ddfc235e080fb8d413",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahfdSAAoJEB5K7WKYbNJdsWAIAL0G61HP/0NJvW519N81czFq\nLyKzuY0a14/lMWFnVjaZ4mJrAGX2Shqaf7HFxwvID+RuRVK2553ZN6Zvg2Kkh9Vw\n2mQYp9Iywa9ei7Nsxc0QxeoL1Ku4djLm7uwt+qZZdOiLNEGnhHngglHIYSKhIu3F\nvhMk3pmDuBigHi/P7m8xogNzoPYQx34GO8saK3sUR8huxg88DqwhP8qdzpyZi7+9\nSaq8YZ5qUzUo7RWKN7mmf2dQItsvsaq0ZRH+vtva1xwXVKkGIueUV4r2quf025CW\nboEkC/OrcHr7bPAht1jM8rLBtf1PCCgOf8zCk154DtZFHGQw1LTSbppWC2foo5A=\n=TqxT\n-----END PGP SIGNATURE-----",
        "payload": "tree 58256693b9a57dff515449e3f3f342455c9330f5\nparent d09968f4d00668b990ae19aed024ff3fd27072b8\nparent 1d4cbd26e4220982f7f2f60e447199d6f62ae254\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518728559 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518729042 +0100\n\nMerge #12422: util: Make LockDirectory thread-safe, consistent, and fix OpenBSD 6.2 build\n\n1d4cbd2 test: Add unit test for LockDirectory (Wladimir J. van der Laan)\nfc888bf util: Fix multiple use of LockDirectory (Wladimir J. van der Laan)\n\nPull request description:\n\n  Wrap the `boost::interprocess::file_lock` in a `std::unique_ptr` inside the map that keeps track of per-directory locks.\n\n  This fixes a build issue with the clang 4.0.0+boost-1.58.0p8 version combo on OpenBSD 6.2, and should have no effect otherwise.\n\n  Also add a unit test, make the function thread-safe, and fix Linux versus Windows behavior inconsistency.\n\n  Meant to fix #12413.\n\nTree-SHA512: 1a94c714c932524a51212c46e8951c129337d57b00fd3da5a347c6bcf6a947706cd440f39df935591b2079995136917f71ca7435fb356f6e8a128c509a62ec32\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58715f6d073f2751a49332ddfc235e080fb8d413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58715f6d073f2751a49332ddfc235e080fb8d413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58715f6d073f2751a49332ddfc235e080fb8d413/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8"
      },
      {
        "sha": "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4cbd26e4220982f7f2f60e447199d6f62ae254"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 165,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4b2da3e2193a7490f5a20b3c6bf9bac528b88396",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58715f6d073f2751a49332ddfc235e080fb8d413/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58715f6d073f2751a49332ddfc235e080fb8d413/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=58715f6d073f2751a49332ddfc235e080fb8d413",
        "patch": "@@ -13,6 +13,10 @@\n \n #include <stdint.h>\n #include <vector>\n+#ifndef WIN32\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#endif\n \n #include <boost/test/unit_test.hpp>\n \n@@ -603,4 +607,130 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)\n+{\n+    *result = LockDirectory(dirname, lockname);\n+}\n+\n+#ifndef WIN32 // Cannot do this test on WIN32 due to lack of fork()\n+static constexpr char LockCommand = 'L';\n+static constexpr char UnlockCommand = 'U';\n+static constexpr char ExitCommand = 'X';\n+\n+static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n+{\n+    char ch;\n+    int rv;\n+    while (true) {\n+        rv = read(fd, &ch, 1); // Wait for command\n+        assert(rv == 1);\n+        switch(ch) {\n+        case LockCommand:\n+            ch = LockDirectory(dirname, lockname);\n+            rv = write(fd, &ch, 1);\n+            assert(rv == 1);\n+            break;\n+        case UnlockCommand:\n+            ReleaseDirectoryLocks();\n+            ch = true; // Always succeeds\n+            rv = write(fd, &ch, 1);\n+            break;\n+        case ExitCommand:\n+            close(fd);\n+            exit(0);\n+        default:\n+            assert(0);\n+        }\n+    }\n+}\n+#endif\n+\n+BOOST_AUTO_TEST_CASE(test_LockDirectory)\n+{\n+    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\n+    const std::string lockname = \".lock\";\n+#ifndef WIN32\n+    // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n+    // it: there is BOOST_TEST_IGNORE_SIGCHLD but that only works when defined\n+    // at build-time of the boost library\n+    void (*old_handler)(int) = signal(SIGCHLD, SIG_DFL);\n+\n+    // Fork another process for testing before creating the lock, so that we\n+    // won't fork while holding the lock (which might be undefined, and is not\n+    // relevant as test case as that is avoided with -daemonize).\n+    int fd[2];\n+    BOOST_CHECK_EQUAL(socketpair(AF_UNIX, SOCK_STREAM, 0, fd), 0);\n+    pid_t pid = fork();\n+    if (!pid) {\n+        BOOST_CHECK_EQUAL(close(fd[1]), 0); // Child: close parent end\n+        TestOtherProcess(dirname, lockname, fd[0]);\n+    }\n+    BOOST_CHECK_EQUAL(close(fd[0]), 0); // Parent: close child end\n+#endif\n+    // Lock on non-existent directory should fail\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), false);\n+\n+    fs::create_directories(dirname);\n+\n+    // Probing lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Persistent lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from the same thread should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from a different thread within the same process should succeed\n+    bool threadresult;\n+    std::thread thr(TestOtherThread, dirname, lockname, &threadresult);\n+    thr.join();\n+    BOOST_CHECK_EQUAL(threadresult, true);\n+#ifndef WIN32\n+    // Try to aquire lock in child process while we're holding it, this should fail.\n+    char ch;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, false);\n+\n+    // Give up our lock\n+    ReleaseDirectoryLocks();\n+    // Probing lock from our side now should succeed, but not hold on to the lock.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Try to acquire the lock in the child process, this should be succesful.\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should fail.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), false);\n+\n+    // Unlock the lock in the child process\n+    BOOST_CHECK_EQUAL(write(fd[1], &UnlockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should succeed.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Re-lock the lock in the child process, then wait for it to exit, check\n+    // successful return. After that, we check that exiting the process\n+    // has released the lock as we would expect by probing it.\n+    int processstatus;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(write(fd[1], &ExitCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(waitpid(pid, &processstatus, 0), pid);\n+    BOOST_CHECK_EQUAL(processstatus, 0);\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Restore SIGCHLD\n+    signal(SIGCHLD, old_handler);\n+    BOOST_CHECK_EQUAL(close(fd[1]), 0); // Close our side of the socketpair\n+#endif\n+    // Clean up\n+    ReleaseDirectoryLocks();\n+    fs::remove_all(dirname);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "dcf7ed38b11953a826086aecc716893f8fa10f06",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=58715f6d073f2751a49332ddfc235e080fb8d413",
        "patch": "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;\n         }\n-        if (probe_only) {\n-            lock.unlock();\n+        if (!probe_only) {\n+            // Lock successful and we're not just probing, put it into the map\n+            dir_locks.emplace(pathLockFile.string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n     }\n     return true;\n }\n \n+void ReleaseDirectoryLocks()\n+{\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n+    dir_locks.clear();\n+}\n+\n /** Interpret string as boolean, for argument parsing */\n static bool InterpretBool(const std::string& strValue)\n {"
      },
      {
        "sha": "9490a5678f2a8695203c66d562298ac07c6415fe",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=58715f6d073f2751a49332ddfc235e080fb8d413",
        "patch": "@@ -174,6 +174,12 @@ int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+\n+/** Release all directory locks. This is used for unit testing only, at runtime\n+ * the global destructor will take care of the locks.\n+ */\n+void ReleaseDirectoryLocks();\n+\n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);"
      }
    ]
  },
  {
    "sha": "5eff1c748d56a2318d10bf6cd925b6084349e13e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWZmMWM3NDhkNTZhMjMxOGQxMGJmNmNkOTI1YjYwODQzNDllMTNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:21:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:21:57Z"
      },
      "message": "Merge #12349: shutdown: fix crash on shutdown with reindex-chainstate\n\nceaefdd fix possible shutdown assertion with -reindex-shutdown (Cory Fields)\n\nPull request description:\n\n  Fixes the assertion error reported here: https://github.com/bitcoin/bitcoin/pull/12349#issuecomment-365095741\n\nTree-SHA512: db8e2a275f92a99df7f17852d00eba6df996e412aa3ed3853a9ea0a8cb9800760677532efd52f92abbf2cdcc4210957a87a5f919ac998d46c205365a7a7dffca",
      "tree": {
        "sha": "03c972e45e70961ab15afb521d50fe253a1b2cf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03c972e45e70961ab15afb521d50fe253a1b2cf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahfn2AAoJEB5K7WKYbNJdkMMIAIuL4NMYlGSQALPT+F9Jho9x\nhWqIRym/gA9cPYBABO7iAqBh1vMFtThc/VkTL5bWiMzYayLEgLuOBtJbbvueQfBX\novKcp+pnxiUUl51blT6ThdDmIQVDJauD0UfqYrJu49BaTn6ySL69EDk23pyS9ja6\nJfQL+Fe9UgyEUp/gO43ZvF/VNgzmwWynkyamY556UxJ2xa/em5WM6Skcep9bhRMb\nReg1DiGlTwGSlePy3+d6AbBlK8Xg7F6fycMWGTd04oueJPYye+InIhM3Q878E53e\n77H3Q5gW+DT+WDg86wWeA1cNo7Us9TELOUmLllKsBHWFUTVdqOV7tAevnpsZf/4=\n=sr0n\n-----END PGP SIGNATURE-----",
        "payload": "tree 03c972e45e70961ab15afb521d50fe253a1b2cf0\nparent 58715f6d073f2751a49332ddfc235e080fb8d413\nparent ceaefdd5f362537a1908d0095059e4be788f3dee\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518729710 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518729717 +0100\n\nMerge #12349: shutdown: fix crash on shutdown with reindex-chainstate\n\nceaefdd fix possible shutdown assertion with -reindex-shutdown (Cory Fields)\n\nPull request description:\n\n  Fixes the assertion error reported here: https://github.com/bitcoin/bitcoin/pull/12349#issuecomment-365095741\n\nTree-SHA512: db8e2a275f92a99df7f17852d00eba6df996e412aa3ed3853a9ea0a8cb9800760677532efd52f92abbf2cdcc4210957a87a5f919ac998d46c205365a7a7dffca\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eff1c748d56a2318d10bf6cd925b6084349e13e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58715f6d073f2751a49332ddfc235e080fb8d413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58715f6d073f2751a49332ddfc235e080fb8d413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58715f6d073f2751a49332ddfc235e080fb8d413"
      },
      {
        "sha": "ceaefdd5f362537a1908d0095059e4be788f3dee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceaefdd5f362537a1908d0095059e4be788f3dee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ceaefdd5f362537a1908d0095059e4be788f3dee"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e809f66e25e9f07fe5d36e2434b8bba79f9f7e8c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eff1c748d56a2318d10bf6cd925b6084349e13e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eff1c748d56a2318d10bf6cd925b6084349e13e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5eff1c748d56a2318d10bf6cd925b6084349e13e",
        "patch": "@@ -2087,7 +2087,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             nLastWrite = nNow;\n         }\n         // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n-        if (fDoFullFlush) {\n+        if (fDoFullFlush && !pcoinsTip->GetBestBlock().IsNull()) {\n             // Typical Coin structures on disk are around 48 bytes in size.\n             // Pushing a new one to the database can cause it to be written\n             // twice (once in the log, and once in the tables). This is already"
      }
    ]
  },
  {
    "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmE1NTZhZWUyMDMwZTNiN2U3NjA5ZDliMTFiNGQ2ZTVmZjNlYzJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:22:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:33:38Z"
      },
      "message": "Merge #12427: Make signrawtransaction accept P2SH-P2WSH redeemscripts\n\n5f605e1 Make signrawtransaction accept P2SH-P2WSH redeemscripts (Pieter Wuille)\n\nPull request description:\n\n  This is a quick fix for #12418, which is a regression in 0.16.\n\n  It permits specifying just the inner redeemscript to let `signrawtransaction` succeed. This inner redeemscript is already reported by `addmultisigaddress` & co.\n\n  #11708 uses a different approach, where `listunspent` reports both inner & outer redeemscript, but requires both to be provided to `signrawtransaction`. Part of #11708 is still needed even in combination with this PR however, as currently the inner redeemscript isn't reported by `listunspent`.\n\nTree-SHA512: a6fa2b2661ce04db25cf029dd31da39c0b4811d43692f816dfe0f77b4159b5e2952051664356a579f690ccd58a626e0975708afcd7ad5919366c490944e3a9a5",
      "tree": {
        "sha": "cf5a553a700cfbc4d8478e650f6cda94752cb13b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf5a553a700cfbc4d8478e650f6cda94752cb13b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahfyyAAoJEB5K7WKYbNJdJtMH/i76XAUxlgQ0heVK1LOWkv/L\nYfQHBoRGo79ltvL7RDy9kEzxPm+zYJHSFm7zisRh9uU+iRqwNnxaaa1EK0x/VBKa\nH6BYIxJ6kdPGtFGFrDvNVimeDxNYs4wu8wTnepahqJlFLBkdVQLqjP+N8WdbDRbg\n7KWJxz66v2jBaFPytOsLy6ci6EhcW/cdwZJ2IZdMxUPWzZkl4LuwL3Owt2HQ4fLO\nnOqxlx736lWYDrq+bamrMxXtdoBNirsiLGtHC0w7bWmTYiLvYb5Ua4UQvdfIF82E\n+sbPSXqr3TwVnXIR+t1IsTtlBOEFUr10F/qAqyDh85SHIStBP2KDNOpQ37MKIZk=\n=kWDO\n-----END PGP SIGNATURE-----",
        "payload": "tree cf5a553a700cfbc4d8478e650f6cda94752cb13b\nparent 5eff1c748d56a2318d10bf6cd925b6084349e13e\nparent 5f605e172baee35421eb20736601befdd8cad796\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518729779 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518730418 +0100\n\nMerge #12427: Make signrawtransaction accept P2SH-P2WSH redeemscripts\n\n5f605e1 Make signrawtransaction accept P2SH-P2WSH redeemscripts (Pieter Wuille)\n\nPull request description:\n\n  This is a quick fix for #12418, which is a regression in 0.16.\n\n  It permits specifying just the inner redeemscript to let `signrawtransaction` succeed. This inner redeemscript is already reported by `addmultisigaddress` & co.\n\n  #11708 uses a different approach, where `listunspent` reports both inner & outer redeemscript, but requires both to be provided to `signrawtransaction`. Part of #11708 is still needed even in combination with this PR however, as currently the inner redeemscript isn't reported by `listunspent`.\n\nTree-SHA512: a6fa2b2661ce04db25cf029dd31da39c0b4811d43692f816dfe0f77b4159b5e2952051664356a579f690ccd58a626e0975708afcd7ad5919366c490944e3a9a5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5eff1c748d56a2318d10bf6cd925b6084349e13e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5eff1c748d56a2318d10bf6cd925b6084349e13e"
      },
      {
        "sha": "5f605e172baee35421eb20736601befdd8cad796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f605e172baee35421eb20736601befdd8cad796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f605e172baee35421eb20736601befdd8cad796"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ef5f04e4ee71e1aa41d8cdf9d7df3361724c464d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "patch": "@@ -848,6 +848,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     tempKeystore.AddCScript(redeemScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "501b43921c51d4cd3abda24903b14eb89145465d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDFiNDM5MjFjNTFkNGNkM2FiZGEyNDkwM2IxNGViODkxNDU0NjVk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-05T15:26:24Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-15T21:43:39Z"
      },
      "message": "rpc: Refactor blockhash parse in getchaintxstats",
      "tree": {
        "sha": "9ae5ed23afd007badb257f3c1f7d33d2e22ff1b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ae5ed23afd007badb257f3c1f7d33d2e22ff1b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/501b43921c51d4cd3abda24903b14eb89145465d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501b43921c51d4cd3abda24903b14eb89145465d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/501b43921c51d4cd3abda24903b14eb89145465d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501b43921c51d4cd3abda24903b14eb89145465d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 12,
      "deletions": 18
    },
    "files": [
      {
        "sha": "8007cebc37493cb93a6038ff1ce375394b22d659",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501b43921c51d4cd3abda24903b14eb89145465d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501b43921c51d4cd3abda24903b14eb89145465d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=501b43921c51d4cd3abda24903b14eb89145465d",
        "patch": "@@ -1542,25 +1542,19 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n-    bool havehash = !request.params[1].isNull();\n-    uint256 hash;\n-    if (havehash) {\n-        hash = uint256S(request.params[1].get_str());\n-    }\n-\n-    {\n+    if (request.params[1].isNull()) {\n         LOCK(cs_main);\n-        if (havehash) {\n-            auto it = mapBlockIndex.find(hash);\n-            if (it == mapBlockIndex.end()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-            }\n-            pindex = it->second;\n-            if (!chainActive.Contains(pindex)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n-            }\n-        } else {\n-            pindex = chainActive.Tip();\n+        pindex = chainActive.Tip();\n+    } else {\n+        uint256 hash = uint256S(request.params[1].get_str());\n+        LOCK(cs_main);\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        pindex = it->second;\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2U2Nzg2MjAzYWQyZjhiZWIwZDJmZjM0YjBmZjc2MjZiYzdlODc3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-04T01:01:05Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-15T21:43:45Z"
      },
      "message": "qa: Improve getchaintxstats functional test",
      "tree": {
        "sha": "2236f51054d44867fe77a7ba28965b0e313ef28f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2236f51054d44867fe77a7ba28965b0e313ef28f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "501b43921c51d4cd3abda24903b14eb89145465d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501b43921c51d4cd3abda24903b14eb89145465d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/501b43921c51d4cd3abda24903b14eb89145465d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 16,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a9e14d3e3c52723c240a5b321738a5609eec18c4",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
        "patch": "@@ -102,6 +102,22 @@ def _test_getblockchaininfo(self):\n     def _test_getchaintxstats(self):\n         self.log.info(\"Test getchaintxstats\")\n \n+        # Test `getchaintxstats` invalid extra parameters\n+        assert_raises_rpc_error(-1, 'getchaintxstats', self.nodes[0].getchaintxstats, 0, '', 0)\n+\n+        # Test `getchaintxstats` invalid `nblocks`\n+        assert_raises_rpc_error(-1, \"JSON value is not an integer as expected\", self.nodes[0].getchaintxstats, '')\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, -1)\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, self.nodes[0].getblockcount())\n+\n+        # Test `getchaintxstats` invalid `blockhash`\n+        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getchaintxstats, blockhash=0)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getchaintxstats, blockhash='0')\n+        blockhash = self.nodes[0].getblockhash(200)\n+        self.nodes[0].invalidateblock(blockhash)\n+        assert_raises_rpc_error(-8, \"Block is not in main chain\", self.nodes[0].getchaintxstats, blockhash=blockhash)\n+        self.nodes[0].reconsiderblock(blockhash)\n+\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n@@ -133,8 +149,6 @@ def _test_getchaintxstats(self):\n         assert('window_interval' not in chaintxstats)\n         assert('txrate' not in chaintxstats)\n \n-        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n-\n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()"
      }
    ]
  },
  {
    "sha": "d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2Y0MzhhMDI2Y2I2N2YyYWE4ZDEyZDk0ZGVmOWM2YmUyZDlhYTk3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-15T22:29:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-15T22:29:39Z"
      },
      "message": "gitian: bump descriptors for (0.)17",
      "tree": {
        "sha": "96dc125ae74d03139fcbb047363d64bc20a290db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96dc125ae74d03139fcbb047363d64bc20a290db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e9ee0495a8e254e37124e113a6975bab07cf5de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.16\"\n+name: \"bitcoin-linux-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "a84dce3e3aec3ec6a269ba3293eb7af0fdbaa97e",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.16\"\n+name: \"bitcoin-osx-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "8a87d91754a91a86732fe5fcd5e34718d05f4dca",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.16\"\n+name: \"bitcoin-win-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "39633ecd5c18ca29cb551f701e57e8cec3e609da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTYzM2VjZDVjMThjYTI5Y2I1NTFmNzAxZTU3ZThjZWMzZTYwOWRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-04T16:42:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-15T23:11:06Z"
      },
      "message": "[rpc] split wallet and non-wallet parts of DescribeAddressVisitor",
      "tree": {
        "sha": "ce600b48acabc66921f2865c98186502d09728e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce600b48acabc66921f2865c98186502d09728e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39633ecd5c18ca29cb551f701e57e8cec3e609da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 63,
      "deletions": 26
    },
    "files": [
      {
        "sha": "a1e39be64e72c2d6c7e334f0fbcd33fcaa5470a0",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 26,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39633ecd5c18ca29cb551f701e57e8cec3e609da/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39633ecd5c18ca29cb551f701e57e8cec3e609da/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=39633ecd5c18ca29cb551f701e57e8cec3e609da",
        "patch": "@@ -33,13 +33,62 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n \n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n+        return obj;\n+    }\n+};\n+\n+#ifdef ENABLE_WALLET\n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n \n     void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n     {\n@@ -54,7 +103,11 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue a(UniValue::VARR);\n         if (ExtractDestination(subscript, embedded)) {\n             // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n             subobj.pushKV(\"address\", EncodeDestination(embedded));\n             subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n             // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n@@ -81,13 +134,13 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n     }\n \n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n     UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n \n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n             obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n             obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n@@ -98,8 +151,6 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             ProcessSubScript(subscript, obj, true);\n         }\n@@ -110,10 +161,6 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey pubkey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n             obj.pushKV(\"pubkey\", HexStr(pubkey));\n         }\n@@ -124,10 +171,6 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n@@ -137,15 +180,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         return obj;\n     }\n \n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n };\n #endif\n \n@@ -219,8 +254,10 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n         ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n         ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n+        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n         ret.pushKVs(detail);\n+        UniValue wallet_detail = boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest);\n+        ret.pushKVs(wallet_detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n             ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }"
      }
    ]
  },
  {
    "sha": "a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjMzZmI0ZjFkMDM3ZTY4ZmY3MGVlZjNhOWY1YjdiZjFkNjMxOTE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T00:27:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T00:27:44Z"
      },
      "message": "Merge #12442: devtools: Exclude patches from lint-whitespace\n\nfafbf7f74e devtools: Exclude patches from lint-whitespace (MarcoFalke)\n\nPull request description:\n\n  By default, unified patches have trailing whitespace in all context lines. Thus, exclude patches from linting.\n\nTree-SHA512: 8f89f1584581e94dd4e34bd522cba21602bafe7933b4631a3abc5da5a8f25568810862d696618fe63c15edf3e046869ad5077d09373f09792985503c6a415538",
      "tree": {
        "sha": "d2aaed69bfd2988e9abf9b81e3d6bf86e5f856c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2aaed69bfd2988e9abf9b81e3d6bf86e5f856c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJahiWAAAoJENLqSFDnUoslm2sQAJthUMC/v8NnNwEmIzDmrHI5\norOSsd4JzJqDLO3OuC0HMr5QUDWNuQH8H1nH4sx0AJ22QJEksM+SYAPwvyPCnYkN\nNc5NQcxqc9YNPEnRwJcNNKW4mXh9fW4ta7zVYYHGLIbR/NFBFyFZq7q2p/deQASq\nQVhodXWicRofMmJc0JAxXoPLw4fja3bSr7EAedQCB987eLX/IDfk5+cqC9f5uBMW\nkGSM8mOZd+EHe0SWs/H3FgmzDc6FBoo2H9ssqXskCBR30NzvAbekLa8xFI2v7QTE\neYeAE1Oy70NZxzuSoiz5hO2zIl1OW+UE9eF/tz3/JKlE8AuY6zcWgo3GZTHd+zTJ\nRM6nieVLvTMVkBGn126H5OSJZ4xovtn83wjAgOnBTIfk4AlIHV03ESza3q7fMYko\nEYzymoqNP5fgLsH+TkAkBt12xCcn7OaiXfJJGImxnY7woDM4hsdgSOpjoQMoGDzz\nxc344hbV0G385Z1QSdPRKHRVeRdLVVcDJSIU/Q1yG3ZlqyjOKekLhGItdyD/VexH\n4im39ZghGrZ2WYvWZa7IlW95kMGvysEG8VQpR4f+fKhND3SYFOZsxlfX8mnUZN0F\nQ2+ghQ9S9sgWA0AFGco9O4+tqTCPgLuee0JIzqC2tKkKvZzMC+TklTmiWfPNKma+\nMcTg+V0KNbhzN+AlqYTd\n=qlwG\n-----END PGP SIGNATURE-----",
        "payload": "tree d2aaed69bfd2988e9abf9b81e3d6bf86e5f856c9\nparent 3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c\nparent fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210\nauthor MarcoFalke <falke.marco@gmail.com> 1518740862 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518740864 -0500\n\nMerge #12442: devtools: Exclude patches from lint-whitespace\n\nfafbf7f74e devtools: Exclude patches from lint-whitespace (MarcoFalke)\n\nPull request description:\n\n  By default, unified patches have trailing whitespace in all context lines. Thus, exclude patches from linting.\n\nTree-SHA512: 8f89f1584581e94dd4e34bd522cba21602bafe7933b4631a3abc5da5a8f25568810862d696618fe63c15edf3e046869ad5077d09373f09792985503c6a415538\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c"
      },
      {
        "sha": "fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "af9a57910adf2dc3806a71d9f8716651f3045ff8",
        "filename": "contrib/devtools/lint-whitespace.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918/contrib/devtools/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918/contrib/devtools/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-whitespace.sh?ref=a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
        "patch": "@@ -16,7 +16,7 @@ if [ -z \"${TRAVIS_COMMIT_RANGE}\" ]; then\n fi\n \n showdiff() {\n-  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n+  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)depends/patches/\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n     echo \"Failed to get a diff\"\n     exit 1\n   fi"
      }
    ]
  },
  {
    "sha": "1f055ef9d7988d5e67aa35afd07423f55866b6c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjA1NWVmOWQ3OTg4ZDVlNjdhYTM1YWZkMDc0MjNmNTU4NjZiNmMw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T07:53:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T08:06:55Z"
      },
      "message": "Merge #12444: gitian: bump descriptors for (0.)17\n\nd7f438a gitian: bump descriptors for (0.)17 (Cory Fields)\n\nPull request description:\n\n  Bumping before we forget again. If we end up calling the next release 17.0, we'll have to fixup the descriptors anyway, so there's no harm in just doing the trivial bump now.\n\nTree-SHA512: f3401ec9f813132765280c60d47ae5d1697af5e6966a3798cb907dad10b7d76398032bf2a642a5a4de1055facec07a76a3055e0e9050cdab1d50caf32940e738",
      "tree": {
        "sha": "f1ea21764bd78adb9f80df2e56a40c06f1de753b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ea21764bd78adb9f80df2e56a40c06f1de753b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahpEfAAoJEB5K7WKYbNJdT1MH/2eFXIrjCM1x0BI0S7dA0awo\n2hFpcbmuUZqpAWKk3EOb8OUfaGM5tslPLqot3iHpRsnisKLQsOZaL1rt81E4oRin\n2MDHsuGDUUIW4mf5JLSbaMYoV7EcZF3BEzo+I6JY6YHAyEgSvBQRoCj7LJRWgRQT\nwagFVfDB1xU9G5+ndQFXtbCQvUSUqWaSUDgU9Db83U1UgdxPKzvTRawgjPEqp5+Z\nMiVCeJYcwga0TIUPbsQ/myKPuvZr+tHIAOTamOx77wV85MBCaZqP3Md4WJf27Qn7\nVGijD3rep7s0xZ8p2ZjHQoVFcdxoj5FYTqlIP2tC6MkHVQhHv/eCfLdE3c6wcFo=\n=M4V9\n-----END PGP SIGNATURE-----",
        "payload": "tree f1ea21764bd78adb9f80df2e56a40c06f1de753b\nparent a233fb4f1d037e68ff70eef3a9f5b7bf1d631918\nparent d7f438a026cb67f2aa8d12d94def9c6be2d9aa97\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518767598 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518768415 +0100\n\nMerge #12444: gitian: bump descriptors for (0.)17\n\nd7f438a gitian: bump descriptors for (0.)17 (Cory Fields)\n\nPull request description:\n\n  Bumping before we forget again. If we end up calling the next release 17.0, we'll have to fixup the descriptors anyway, so there's no harm in just doing the trivial bump now.\n\nTree-SHA512: f3401ec9f813132765280c60d47ae5d1697af5e6966a3798cb907dad10b7d76398032bf2a642a5a4de1055facec07a76a3055e0e9050cdab1d50caf32940e738\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918"
      },
      {
        "sha": "d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e9ee0495a8e254e37124e113a6975bab07cf5de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.16\"\n+name: \"bitcoin-linux-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "a84dce3e3aec3ec6a269ba3293eb7af0fdbaa97e",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.16\"\n+name: \"bitcoin-osx-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "8a87d91754a91a86732fe5fcd5e34718d05f4dca",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.16\"\n+name: \"bitcoin-win-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmRjMmRhZjgyZDJlNGQ3YTZkZjIzMzIzNWRkODljM2FiOTkwYjIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T08:09:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T08:09:50Z"
      },
      "message": "Merge #12425: Add some script tests\n\nbe45a67 Add some script tests related to BOOL ops and odd values like negative 0. (Richard Kiss)\n\nPull request description:\n\n  Add some script tests related to BOOL ops and odd values like negative 0.\n\nTree-SHA512: 8e633f7ea5eea39e31016994baf60f295fa1dc8cae27aa5fcfc741ea97136bfb3ddc57bb62b9c6bf9fe256fc09cdd184906ba8e611e297cf8d2d363da2bbf1d4",
      "tree": {
        "sha": "53e9727cc8dd7f3120ffc0fffb6677f73247a21a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53e9727cc8dd7f3120ffc0fffb6677f73247a21a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahpHOAAoJEB5K7WKYbNJdBxEIAK5SFw42ycI/Ufic/UCrZczo\na1DDfU4Vo9f5cKv5fIAqO4rBAusOS7iuwZIaDA9CvvvQurB/2y61SxIdP1fKKTWx\n7NM0uWjiY8etUe0/LWEypSRDmIi7mpRGy4LPGML4EB1YY7YB5hCxWgH793LWvykZ\nG1MWpSf5hWJzkyDA8pKt1PnFp7pWEB5gip0RcjFZITPE+tGl0LdYBUTpf21tBPsT\nHnb7u6bxjtL92hzQPRUPIwimsSjIe9uTUJ22GUmKNHCYY9FcXO8F2x4dH+FFCRam\nYBrmEP10QD1SlNBiJf99WdDkzrc5oDYbQE05+dD9ls56Q2AvpHiCkWPuGR/A1ec=\n=MKbh\n-----END PGP SIGNATURE-----",
        "payload": "tree 53e9727cc8dd7f3120ffc0fffb6677f73247a21a\nparent 1f055ef9d7988d5e67aa35afd07423f55866b6c0\nparent be45a67895f1259eaee80cfb122a849a400ae1ad\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518768585 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518768590 +0100\n\nMerge #12425: Add some script tests\n\nbe45a67 Add some script tests related to BOOL ops and odd values like negative 0. (Richard Kiss)\n\nPull request description:\n\n  Add some script tests related to BOOL ops and odd values like negative 0.\n\nTree-SHA512: 8e633f7ea5eea39e31016994baf60f295fa1dc8cae27aa5fcfc741ea97136bfb3ddc57bb62b9c6bf9fe256fc09cdd184906ba8e611e297cf8d2d363da2bbf1d4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f055ef9d7988d5e67aa35afd07423f55866b6c0"
      },
      {
        "sha": "be45a67895f1259eaee80cfb122a849a400ae1ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be45a67895f1259eaee80cfb122a849a400ae1ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be45a67895f1259eaee80cfb122a849a400ae1ad"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccefe52246ee41d64699708be588bf84f5204e9e",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26dc2daf82d2e4d7a6df233235dd89c3ab990b23/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26dc2daf82d2e4d7a6df233235dd89c3ab990b23/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "patch": "@@ -168,6 +168,18 @@\n [\"1 0 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 1 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 0 BOOLOR\", \"NOT\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"0x01 0x80\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLOR\"],\n+[\"0x01 0x00\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLOR\"],\n+[\"0x01 0x81\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLOR\"],\n+[\"0x01 0x80\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLAND\"],\n+[\"0x01 0x00\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLAND\"],\n+[\"0x01 0x81\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLAND\"],\n+[\"0x01 0x00\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"non-minimal-0 NOT\"],\n+[\"0x01 0x80\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"negative-0 NOT\"],\n+[\"0x01 0x81\", \"NOT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative 1 NOT\"],\n+[\"0x01 0x80 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"-0 0 NUMEQUAL\"],\n+[\"0x01 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n+[\"0x02 0x00 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n [\"16 17 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],"
      }
    ]
  },
  {
    "sha": "dd7e42cbb4390788705031ffa0bc893d26f0597e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDdlNDJjYmI0MzkwNzg4NzA1MDMxZmZhMGJjODkzZDI2ZjA1OTdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T10:57:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T11:00:19Z"
      },
      "message": "test: Add missing signal.h header\n\nutil_tests.cpp needs to include the signal.h header on FreeBSD.\n\nReported by denis2342 on IRC.",
      "tree": {
        "sha": "00f89e57da59de410f4a1e81dbfe3dc64c72af9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00f89e57da59de410f4a1e81dbfe3dc64c72af9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd7e42cbb4390788705031ffa0bc893d26f0597e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26dc2daf82d2e4d7a6df233235dd89c3ab990b23"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "463bed59579dfb5d71e367afda5295f3651b3783",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd7e42cbb4390788705031ffa0bc893d26f0597e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd7e42cbb4390788705031ffa0bc893d26f0597e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=dd7e42cbb4390788705031ffa0bc893d26f0597e",
        "patch": "@@ -14,6 +14,7 @@\n #include <stdint.h>\n #include <vector>\n #ifndef WIN32\n+#include <signal.h>\n #include <sys/types.h>\n #include <sys/wait.h>\n #endif"
      }
    ]
  },
  {
    "sha": "835a21b42402d546bd72f8a3f452f0c743fefe82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzVhMjFiNDI0MDJkNTQ2YmQ3MmY4YTNmNDUyZjBjNzQzZmVmZTgy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T13:59:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T13:59:04Z"
      },
      "message": "Squashed 'src/leveldb/' changes from c521b3ac65..64052c76c5\n\n64052c76c5 Merge #15: Add filename to corruption errors\n135ed0fb4e Add filename to corruption errors\n\ngit-subtree-dir: src/leveldb\ngit-subtree-split: 64052c76c567cff3dad32d1db0ef969d97b5882f",
      "tree": {
        "sha": "d14102bd5802c9b2d4472f712a0a66653e41f5cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d14102bd5802c9b2d4472f712a0a66653e41f5cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/835a21b42402d546bd72f8a3f452f0c743fefe82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835a21b42402d546bd72f8a3f452f0c743fefe82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/835a21b42402d546bd72f8a3f452f0c743fefe82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835a21b42402d546bd72f8a3f452f0c743fefe82/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b13a68e129f51b664e33b1894e33ebb7b94cdcc7"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3bb58e560aa7c099c7937d226315d1ed46273d43",
        "filename": "db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/db_impl.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -414,7 +414,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,\n          status.ok()) {\n     if (record.size() < 12) {\n       reporter.Corruption(\n-          record.size(), Status::Corruption(\"log record too small\"));\n+          record.size(), Status::Corruption(\"log record too small\", fname));\n       continue;\n     }\n     WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "d06d64d640b19f60a37571dcb887be5f36ce1514",
        "filename": "db/leveldbutil.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/leveldbutil.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/leveldbutil.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/leveldbutil.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -19,6 +19,7 @@ class StdoutPrinter : public WritableFile {\n   virtual Status Close() { return Status::OK(); }\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n+  virtual std::string GetName() const { return \"[stdout]\"; }\n };\n \n bool HandleDumpCommand(Env* env, char** files, int num) {"
      },
      {
        "sha": "8b6ad136d7dab58717e7d2ced614e1fb78024d8a",
        "filename": "db/log_reader.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/log_reader.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -186,7 +186,7 @@ uint64_t Reader::LastRecordOffset() {\n }\n \n void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n-  ReportDrop(bytes, Status::Corruption(reason));\n+  ReportDrop(bytes, Status::Corruption(reason, file_->GetName()));\n }\n \n void Reader::ReportDrop(uint64_t bytes, const Status& reason) {"
      },
      {
        "sha": "7281e3d3457fe3a088a18472c25b699b986b42d5",
        "filename": "db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/repair.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -203,7 +203,7 @@ class Repairer {\n     while (reader.ReadRecord(&record, &scratch)) {\n       if (record.size() < 12) {\n         reporter.Corruption(\n-            record.size(), Status::Corruption(\"log record too small\"));\n+            record.size(), Status::Corruption(\"log record too small\", logname));\n         continue;\n       }\n       WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "68c0614a59e5e98d635cf9b8b5d8b2ff0f75be22",
        "filename": "helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/helpers/memenv/memenv.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -176,6 +176,7 @@ class SequentialFileImpl : public SequentialFile {\n     return Status::OK();\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n   uint64_t pos_;\n@@ -196,6 +197,7 @@ class RandomAccessFileImpl : public RandomAccessFile {\n     return file_->Read(offset, n, result, scratch);\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };\n@@ -218,6 +220,7 @@ class WritableFileImpl : public WritableFile {\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };"
      },
      {
        "sha": "275d441eaeee49aa3418b0f672d03bd61d8bab6c",
        "filename": "include/leveldb/env.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/leveldb/env.h?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -191,6 +191,9 @@ class SequentialFile {\n   // REQUIRES: External synchronization\n   virtual Status Skip(uint64_t n) = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   SequentialFile(const SequentialFile&);\n@@ -215,6 +218,9 @@ class RandomAccessFile {\n   virtual Status Read(uint64_t offset, size_t n, Slice* result,\n                       char* scratch) const = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   RandomAccessFile(const RandomAccessFile&);\n@@ -234,6 +240,9 @@ class WritableFile {\n   virtual Status Flush() = 0;\n   virtual Status Sync() = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   WritableFile(const WritableFile&);"
      },
      {
        "sha": "285e1c0de39d7f6a915f1812c9f18c17a4bcf908",
        "filename": "table/format.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/table/format.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -82,7 +82,7 @@ Status ReadBlock(RandomAccessFile* file,\n   }\n   if (contents.size() != n + kBlockTrailerSize) {\n     delete[] buf;\n-    return Status::Corruption(\"truncated block read\");\n+    return Status::Corruption(\"truncated block read\", file->GetName());\n   }\n \n   // Check the crc of the type and the block contents\n@@ -92,7 +92,7 @@ Status ReadBlock(RandomAccessFile* file,\n     const uint32_t actual = crc32c::Value(data, n + 1);\n     if (actual != crc) {\n       delete[] buf;\n-      s = Status::Corruption(\"block checksum mismatch\");\n+      s = Status::Corruption(\"block checksum mismatch\", file->GetName());\n       return s;\n     }\n   }\n@@ -119,13 +119,13 @@ Status ReadBlock(RandomAccessFile* file,\n       size_t ulength = 0;\n       if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n         delete[] buf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       char* ubuf = new char[ulength];\n       if (!port::Snappy_Uncompress(data, n, ubuf)) {\n         delete[] buf;\n         delete[] ubuf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       delete[] buf;\n       result->data = Slice(ubuf, ulength);\n@@ -135,7 +135,7 @@ Status ReadBlock(RandomAccessFile* file,\n     }\n     default:\n       delete[] buf;\n-      return Status::Corruption(\"bad block type\");\n+      return Status::Corruption(\"bad block type\", file->GetName());\n   }\n \n   return Status::OK();"
      },
      {
        "sha": "4676bc2240c97b1eceb3e9961e5cee832b58492f",
        "filename": "util/env_posix.cc",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/env_posix.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -121,6 +121,8 @@ class PosixSequentialFile: public SequentialFile {\n     }\n     return Status::OK();\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // pread() based random-access\n@@ -172,6 +174,8 @@ class PosixRandomAccessFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // mmap() based random-access\n@@ -206,6 +210,8 @@ class PosixMmapReadableFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n class PosixWritableFile : public WritableFile {\n@@ -287,6 +293,8 @@ class PosixWritableFile : public WritableFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n static int LockOrUnlock(int fd, bool lock) {"
      },
      {
        "sha": "81380216bb09b7afd9c85760bb729a28716bb069",
        "filename": "util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/env_win.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -78,6 +78,7 @@ class Win32SequentialFile : public SequentialFile\n     virtual Status Read(size_t n, Slice* result, char* scratch);\n     virtual Status Skip(uint64_t n);\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init();\n     void _CleanUp();\n@@ -94,6 +95,7 @@ class Win32RandomAccessFile : public RandomAccessFile\n     virtual ~Win32RandomAccessFile();\n     virtual Status Read(uint64_t offset, size_t n, Slice* result,char* scratch) const;\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init(LPCWSTR path);\n     void _CleanUp();\n@@ -114,6 +116,7 @@ class Win32WritableFile : public WritableFile\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n+    virtual std::string GetName() const { return filename_; }\n private:\n     std::string filename_;\n     ::HANDLE _hFile;"
      }
    ]
  },
  {
    "sha": "faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE2ZGQyN2IxZjFmOTZmNWUxYTI2ZTgzMGUxYTgwMjU1YWZkYjVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T14:01:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T13:59:28Z"
      },
      "message": "Bump leveldb subtree",
      "tree": {
        "sha": "ac28ac960c3a60cfa750bf86d095ef01e0f72280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac28ac960c3a60cfa750bf86d095ef01e0f72280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJahuPAAAoJEM4rdWl+aaVICnUL/2gQj816lcpllx8n9KRFCm3q\nxwT8D9sTpsA7wg/t75dVcd/ZiGsYOxdUNCzKoG1FmSyW+OjL5Ffsgsxsf6EcD/cn\ns4GNolpnHP6qyNOU0Eohi4y1z3miQt2hzMeJxYGW2KehKFY9HZZwcDySUEKOSeii\nOMJRuQXkGduQiEUBX6Su4aprTm7miLH8j+kDBcBs1qKDduZ9iReIXm9CqjwT7k+L\nvImnYDizdt+vIlmOdC/zZRYQu0tJRi5WKgduqT7XFYUEO25VI6rzC4IDTHNpa/uE\n3js3xG1QyECpwd+v2pHrmIdpBzT8MovEKdS/k94Wz88X2PukNbqxY1FM2qjmx7CL\nfH3tzjv9VnrGA56i3hL5ct4G3hAn7pC6fUhNOXYlgJwRO7ZCH9UcYmCOiULi5uBE\nF5R0AiJtUkIkyoK7DhYWM/QB9kCLSbCOtkoOKtCDxBjNmP6Eixs2YDhXz7dtmXr2\n0EG2opxFfL0BjGi0TRdoyi2xwO18SUgAo9yeCkWJ4g==\n=I15k\n-----END PGP SIGNATURE-----",
        "payload": "tree ac28ac960c3a60cfa750bf86d095ef01e0f72280\nparent 13e31dd6548d64a5992f439e74bb424bf88aca04\nparent 835a21b42402d546bd72f8a3f452f0c743fefe82\nauthor MarcoFalke <falke.marco@gmail.com> 1518789695 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518789568 -0500\n\nBump leveldb subtree\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13e31dd6548d64a5992f439e74bb424bf88aca04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e31dd6548d64a5992f439e74bb424bf88aca04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13e31dd6548d64a5992f439e74bb424bf88aca04"
      },
      {
        "sha": "835a21b42402d546bd72f8a3f452f0c743fefe82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835a21b42402d546bd72f8a3f452f0c743fefe82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/835a21b42402d546bd72f8a3f452f0c743fefe82"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3bb58e560aa7c099c7937d226315d1ed46273d43",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -414,7 +414,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,\n          status.ok()) {\n     if (record.size() < 12) {\n       reporter.Corruption(\n-          record.size(), Status::Corruption(\"log record too small\"));\n+          record.size(), Status::Corruption(\"log record too small\", fname));\n       continue;\n     }\n     WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "d06d64d640b19f60a37571dcb887be5f36ce1514",
        "filename": "src/leveldb/db/leveldbutil.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/leveldbutil.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/leveldbutil.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/leveldbutil.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -19,6 +19,7 @@ class StdoutPrinter : public WritableFile {\n   virtual Status Close() { return Status::OK(); }\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n+  virtual std::string GetName() const { return \"[stdout]\"; }\n };\n \n bool HandleDumpCommand(Env* env, char** files, int num) {"
      },
      {
        "sha": "8b6ad136d7dab58717e7d2ced614e1fb78024d8a",
        "filename": "src/leveldb/db/log_reader.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_reader.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -186,7 +186,7 @@ uint64_t Reader::LastRecordOffset() {\n }\n \n void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n-  ReportDrop(bytes, Status::Corruption(reason));\n+  ReportDrop(bytes, Status::Corruption(reason, file_->GetName()));\n }\n \n void Reader::ReportDrop(uint64_t bytes, const Status& reason) {"
      },
      {
        "sha": "7281e3d3457fe3a088a18472c25b699b986b42d5",
        "filename": "src/leveldb/db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/repair.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -203,7 +203,7 @@ class Repairer {\n     while (reader.ReadRecord(&record, &scratch)) {\n       if (record.size() < 12) {\n         reporter.Corruption(\n-            record.size(), Status::Corruption(\"log record too small\"));\n+            record.size(), Status::Corruption(\"log record too small\", logname));\n         continue;\n       }\n       WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "68c0614a59e5e98d635cf9b8b5d8b2ff0f75be22",
        "filename": "src/leveldb/helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/helpers/memenv/memenv.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -176,6 +176,7 @@ class SequentialFileImpl : public SequentialFile {\n     return Status::OK();\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n   uint64_t pos_;\n@@ -196,6 +197,7 @@ class RandomAccessFileImpl : public RandomAccessFile {\n     return file_->Read(offset, n, result, scratch);\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };\n@@ -218,6 +220,7 @@ class WritableFileImpl : public WritableFile {\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };"
      },
      {
        "sha": "275d441eaeee49aa3418b0f672d03bd61d8bab6c",
        "filename": "src/leveldb/include/leveldb/env.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/env.h?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -191,6 +191,9 @@ class SequentialFile {\n   // REQUIRES: External synchronization\n   virtual Status Skip(uint64_t n) = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   SequentialFile(const SequentialFile&);\n@@ -215,6 +218,9 @@ class RandomAccessFile {\n   virtual Status Read(uint64_t offset, size_t n, Slice* result,\n                       char* scratch) const = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   RandomAccessFile(const RandomAccessFile&);\n@@ -234,6 +240,9 @@ class WritableFile {\n   virtual Status Flush() = 0;\n   virtual Status Sync() = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   WritableFile(const WritableFile&);"
      },
      {
        "sha": "285e1c0de39d7f6a915f1812c9f18c17a4bcf908",
        "filename": "src/leveldb/table/format.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/format.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -82,7 +82,7 @@ Status ReadBlock(RandomAccessFile* file,\n   }\n   if (contents.size() != n + kBlockTrailerSize) {\n     delete[] buf;\n-    return Status::Corruption(\"truncated block read\");\n+    return Status::Corruption(\"truncated block read\", file->GetName());\n   }\n \n   // Check the crc of the type and the block contents\n@@ -92,7 +92,7 @@ Status ReadBlock(RandomAccessFile* file,\n     const uint32_t actual = crc32c::Value(data, n + 1);\n     if (actual != crc) {\n       delete[] buf;\n-      s = Status::Corruption(\"block checksum mismatch\");\n+      s = Status::Corruption(\"block checksum mismatch\", file->GetName());\n       return s;\n     }\n   }\n@@ -119,13 +119,13 @@ Status ReadBlock(RandomAccessFile* file,\n       size_t ulength = 0;\n       if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n         delete[] buf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       char* ubuf = new char[ulength];\n       if (!port::Snappy_Uncompress(data, n, ubuf)) {\n         delete[] buf;\n         delete[] ubuf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       delete[] buf;\n       result->data = Slice(ubuf, ulength);\n@@ -135,7 +135,7 @@ Status ReadBlock(RandomAccessFile* file,\n     }\n     default:\n       delete[] buf;\n-      return Status::Corruption(\"bad block type\");\n+      return Status::Corruption(\"bad block type\", file->GetName());\n   }\n \n   return Status::OK();"
      },
      {
        "sha": "4676bc2240c97b1eceb3e9961e5cee832b58492f",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -121,6 +121,8 @@ class PosixSequentialFile: public SequentialFile {\n     }\n     return Status::OK();\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // pread() based random-access\n@@ -172,6 +174,8 @@ class PosixRandomAccessFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // mmap() based random-access\n@@ -206,6 +210,8 @@ class PosixMmapReadableFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n class PosixWritableFile : public WritableFile {\n@@ -287,6 +293,8 @@ class PosixWritableFile : public WritableFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n static int LockOrUnlock(int fd, bool lock) {"
      },
      {
        "sha": "81380216bb09b7afd9c85760bb729a28716bb069",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -78,6 +78,7 @@ class Win32SequentialFile : public SequentialFile\n     virtual Status Read(size_t n, Slice* result, char* scratch);\n     virtual Status Skip(uint64_t n);\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init();\n     void _CleanUp();\n@@ -94,6 +95,7 @@ class Win32RandomAccessFile : public RandomAccessFile\n     virtual ~Win32RandomAccessFile();\n     virtual Status Read(uint64_t offset, size_t n, Slice* result,char* scratch) const;\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init(LPCWSTR path);\n     void _CleanUp();\n@@ -114,6 +116,7 @@ class Win32WritableFile : public WritableFile\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n+    virtual std::string GetName() const { return filename_; }\n private:\n     std::string filename_;\n     ::HANDLE _hFile;"
      }
    ]
  },
  {
    "sha": "4a62ddd01873d18dbca96c81d756be1020249b45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTYyZGRkMDE4NzNkMThkYmNhOTZjODFkNzU2YmUxMDIwMjQ5YjQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T14:13:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T14:13:47Z"
      },
      "message": "Merge #12447: test: Add missing signal.h header\n\ndd7e42cbb4 test: Add missing signal.h header (Wladimir J. van der Laan)\n\nPull request description:\n\n  util_tests.cpp needs to include the signal.h header on FreeBSD.\n\n  Reported by denis2342 on IRC.\n\nTree-SHA512: 0b946fc2770ca6043087f4fe22be96848d46efe44e3d4d45c5ee663e0f95b0e2e6145f4ade577a6257d0c0c4cfadf324111799e78b9e4e4be4da8a90f68e349f",
      "tree": {
        "sha": "00f89e57da59de410f4a1e81dbfe3dc64c72af9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00f89e57da59de410f4a1e81dbfe3dc64c72af9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJahucbAAoJENLqSFDnUosllOwP/3+Qfpv24Dk/dXZTJPoPGbom\njw/hAQhuhFgV3ToAVZxwFjHbnr6Rtnjz1ZsEIgd/r+kCNyk8wl6oDxEYQFTE2Wlj\nEJOEMAuFENHnitO20B83Q/hN71pqiWIGQv18JK3QeBG8AzrBM230fO5J/lgt/cJ8\nvgDwijbA47db1NkwUc5Ju8yRfRfE46AUCdjOi4hUQThDMjKxgxUTUvq5sexBOUOh\nKYozg/aja0Ci8NFpoNd97JXwCDwiYvadxzwtBKAwDSq06Qtmwqo9yytSS2WjDpsS\nCpYR7EZfBk3wRxtr5sp45oMVYaKGvwIC5XsUsJTtEMIMmFnaUudc9sA2T0AFfnRl\nmY6vS+UAJe1tqshc+BM5TnWQXPDgzvbz8vf2dMkIaPpIZI83RQOOk/kXLiYWu1Q9\nMyP2Y5Cc4NFw4hs2djDp2ist62oKFaGQNl88zsp4obtvIlYW6rx6wNSD0PyqaduC\ny+JozMmfxbyP9XiDKjySKfL8DOJFM4oQhd7sgNxuDr/vAnTBPcOIzs0Lj9vRYZmn\nkNreotFhl6+1dWIlu6oYuUJ0zKv369xF6DIxvtAM9xaJqUlCfKohdrnGF0LbvFB5\nQ0zWiJ4WBAXKzpxckT7iOd+oNMyg9OG1tjfZxY6Qm8pa7XkOd5CM0tYWZ1No80RY\n5CP3MWEuMAfGuRxkxYL0\n=LnUx\n-----END PGP SIGNATURE-----",
        "payload": "tree 00f89e57da59de410f4a1e81dbfe3dc64c72af9e\nparent 26dc2daf82d2e4d7a6df233235dd89c3ab990b23\nparent dd7e42cbb4390788705031ffa0bc893d26f0597e\nauthor MarcoFalke <falke.marco@gmail.com> 1518790425 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518790427 -0500\n\nMerge #12447: test: Add missing signal.h header\n\ndd7e42cbb4 test: Add missing signal.h header (Wladimir J. van der Laan)\n\nPull request description:\n\n  util_tests.cpp needs to include the signal.h header on FreeBSD.\n\n  Reported by denis2342 on IRC.\n\nTree-SHA512: 0b946fc2770ca6043087f4fe22be96848d46efe44e3d4d45c5ee663e0f95b0e2e6145f4ade577a6257d0c0c4cfadf324111799e78b9e4e4be4da8a90f68e349f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a62ddd01873d18dbca96c81d756be1020249b45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26dc2daf82d2e4d7a6df233235dd89c3ab990b23"
      },
      {
        "sha": "dd7e42cbb4390788705031ffa0bc893d26f0597e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd7e42cbb4390788705031ffa0bc893d26f0597e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "463bed59579dfb5d71e367afda5295f3651b3783",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a62ddd01873d18dbca96c81d756be1020249b45/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a62ddd01873d18dbca96c81d756be1020249b45/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4a62ddd01873d18dbca96c81d756be1020249b45",
        "patch": "@@ -14,6 +14,7 @@\n #include <stdint.h>\n #include <vector>\n #ifndef WIN32\n+#include <signal.h>\n #include <sys/types.h>\n #include <sys/wait.h>\n #endif"
      }
    ]
  },
  {
    "sha": "59e032b43cea835cf06f83a5a72685dc02033c48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWUwMzJiNDNjZWE4MzVjZjA2ZjgzYTVhNzI2ODVkYzAyMDMzYzQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T16:39:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T16:40:11Z"
      },
      "message": "Merge #12402: [depends] expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203\n\n25409b1 fixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS (fanquake)\n3335d45 [depends] latest config.guess and config.sub (fanquake)\n41550d6 [depends] miniupnpc 2.0.20180203 (fanquake)\n61647a4 [depends] ccache 3.4.1 (fanquake)\n5a10859 [depends] expat 2.2.5 (fanquake)\n\nPull request description:\n\n  miniupnpc changelog: http://miniupnp.free.fr/files/changelog.php?file=miniupnpc-2.0.20180203.tar.gz\n  2.0.20180203 includes fixes for the recent buffer overflow and segfault issues, see https://github.com/miniupnp/miniupnp/issues/268.\n\n  expat changelog: https://github.com/libexpat/libexpat/blob/R_2_2_5/expat/Changes\n  2.2.2 & 2.2.3 included security fixes.\n\n  ccache changelog: https://ccache.samba.org/releasenotes.html#_ccache_3_4_1\n\n  Also includes latest config.guess and config.sub.\n\nTree-SHA512: 5115b6ccf2bc50c62fd16ab2350bdc752eef7db8b1e4fbe35998fe1aac3702baa6c7f5e471ec48f7c614278df20a68ee6a254dde7c3e2d5c6ce2d10257a5aa21",
      "tree": {
        "sha": "6fd224f7ab8e965fcb98a87dbf98307c644c058e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fd224f7ab8e965fcb98a87dbf98307c644c058e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahwlrAAoJEB5K7WKYbNJdU60H/3vGa6YhL5ihXVtCpjYCClWu\ni9UamD9Yo+GElQl02boqi6yvh1fPazO/po4A+uPm2JcCzmi3+rN+E/KE1LgPLQPM\n5JO3TOyAwy9F1Iu+NAwBDW25yQW72IxELx+hVnKnpUkqYBZTGY+oQ6ZlcELRv3aq\n//EsyJGFUXvby9BdNlqJw+hmT86xBcxkTewOKd0D4iHQNvVXjRBGeE/ud77exeze\n7dcOPWXWKVUZRapSg2T2MocFthJc14WhHxubZVFQ+5JsIGemAKzUae0IhEedKj1k\nCLdFpZC2qLJL+8vh9MPI+g/KREL9BkvsVT0tf9A4QeP+78FGEc2CCkTFkFHt7UY=\n=OvHz\n-----END PGP SIGNATURE-----",
        "payload": "tree 6fd224f7ab8e965fcb98a87dbf98307c644c058e\nparent 4a62ddd01873d18dbca96c81d756be1020249b45\nparent 25409b16fd593f45168e839fe21ed0f642908e11\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518799155 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518799211 +0100\n\nMerge #12402: [depends] expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203\n\n25409b1 fixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS (fanquake)\n3335d45 [depends] latest config.guess and config.sub (fanquake)\n41550d6 [depends] miniupnpc 2.0.20180203 (fanquake)\n61647a4 [depends] ccache 3.4.1 (fanquake)\n5a10859 [depends] expat 2.2.5 (fanquake)\n\nPull request description:\n\n  miniupnpc changelog: http://miniupnp.free.fr/files/changelog.php?file=miniupnpc-2.0.20180203.tar.gz\n  2.0.20180203 includes fixes for the recent buffer overflow and segfault issues, see https://github.com/miniupnp/miniupnp/issues/268.\n\n  expat changelog: https://github.com/libexpat/libexpat/blob/R_2_2_5/expat/Changes\n  2.2.2 & 2.2.3 included security fixes.\n\n  ccache changelog: https://ccache.samba.org/releasenotes.html#_ccache_3_4_1\n\n  Also includes latest config.guess and config.sub.\n\nTree-SHA512: 5115b6ccf2bc50c62fd16ab2350bdc752eef7db8b1e4fbe35998fe1aac3702baa6c7f5e471ec48f7c614278df20a68ee6a254dde7c3e2d5c6ce2d10257a5aa21\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59e032b43cea835cf06f83a5a72685dc02033c48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a62ddd01873d18dbca96c81d756be1020249b45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a62ddd01873d18dbca96c81d756be1020249b45"
      },
      {
        "sha": "25409b16fd593f45168e839fe21ed0f642908e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25409b16fd593f45168e839fe21ed0f642908e11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25409b16fd593f45168e839fe21ed0f642908e11"
      }
    ],
    "stats": {
      "total": 843,
      "additions": 409,
      "deletions": 434
    },
    "files": [
      {
        "sha": "9baaa270bfc7f08d6c6eb85b84f9742318a58d84",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 293,
        "deletions": 283,
        "changes": 576,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-03-05'\n+timestamp='2018-01-26'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-03-05'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -27,7 +27,7 @@ timestamp='2017-03-05'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n@@ -39,7 +39,7 @@ Usage: $0 [OPTION]\n \n Output the configuration name of the system \\`$me' is run on.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -107,9 +107,9 @@ trap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;\n dummy=$tmp/dummy ;\n tmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;\n case $CC_FOR_BUILD,$HOST_CC,$CC in\n- ,,)    echo \"int x;\" > $dummy.c ;\n+ ,,)    echo \"int x;\" > \"$dummy.c\" ;\n \tfor c in cc gcc c89 c99 ; do\n-\t  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then\n+\t  if ($c -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then\n \t     CC_FOR_BUILD=\"$c\"; break ;\n \t  fi ;\n \tdone ;\n@@ -132,14 +132,14 @@ UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\n UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\n UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n \n-case \"${UNAME_SYSTEM}\" in\n+case \"$UNAME_SYSTEM\" in\n Linux|GNU|GNU/*)\n \t# If the system lacks a compiler, then just pick glibc.\n \t# We could probably try harder.\n \tLIBC=gnu\n \n-\teval $set_cc_for_build\n-\tcat <<-EOF > $dummy.c\n+\teval \"$set_cc_for_build\"\n+\tcat <<-EOF > \"$dummy.c\"\n \t#include <features.h>\n \t#if defined(__UCLIBC__)\n \tLIBC=uclibc\n@@ -149,13 +149,20 @@ Linux|GNU|GNU/*)\n \tLIBC=gnu\n \t#endif\n \tEOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"\n+\n+\t# If ldd exists, use it to detect musl libc.\n+\tif command -v ldd >/dev/null && \\\n+\t\tldd --version 2>&1 | grep -q ^musl\n+\tthen\n+\t    LIBC=musl\n+\tfi\n \t;;\n esac\n \n # Note: order is significant - the case branches are not exclusive.\n \n-case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n     *:NetBSD:*:*)\n \t# NetBSD (nbsd) targets should (where applicable) match one or\n \t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n@@ -169,30 +176,30 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# portion of the name.  We always set it to \"unknown\".\n \tsysctl=\"sysctl -n hw.machine_arch\"\n \tUNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\\n-\t    /sbin/$sysctl 2>/dev/null || \\\n-\t    /usr/sbin/$sysctl 2>/dev/null || \\\n+\t    \"/sbin/$sysctl\" 2>/dev/null || \\\n+\t    \"/usr/sbin/$sysctl\" 2>/dev/null || \\\n \t    echo unknown)`\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    armeb) machine=armeb-unknown ;;\n \t    arm*) machine=arm-unknown ;;\n \t    sh3el) machine=shl-unknown ;;\n \t    sh3eb) machine=sh-unknown ;;\n \t    sh5el) machine=sh5le-unknown ;;\n \t    earmv*)\n-\t\tarch=`echo ${UNAME_MACHINE_ARCH} | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n-\t\tendian=`echo ${UNAME_MACHINE_ARCH} | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n-\t\tmachine=${arch}${endian}-unknown\n+\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n+\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n+\t\tmachine=\"${arch}${endian}\"-unknown\n \t\t;;\n-\t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n+\t    *) machine=\"$UNAME_MACHINE_ARCH\"-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n \t# to ELF recently (or will in the future) and ABI.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\tos=netbsdelf\n \t\t;;\n \t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n-\t\teval $set_cc_for_build\n+\t\teval \"$set_cc_for_build\"\n \t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t\t| grep -q __ELF__\n \t\tthen\n@@ -208,57 +215,66 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Determine ABI tags.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n-\t\tabi=`echo ${UNAME_MACHINE_ARCH} | sed -e \"$expr\"`\n+\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n \t\t;;\n \tesac\n \t# The OS release\n \t# Debian GNU/NetBSD machines have a different userland, and\n \t# thus, need a distinct triplet. However, they do not need\n \t# kernel version information, so it can be replaced with a\n \t# suitable tag, in the style of linux-gnu.\n-\tcase \"${UNAME_VERSION}\" in\n+\tcase \"$UNAME_VERSION\" in\n \t    Debian*)\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo ${UNAME_RELEASE} | sed -e 's/[-_].*//' | cut -d. -f1,2`\n+\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n \t# contains redundant information, the shorter form:\n \t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n-\techo \"${machine}-${os}${release}${abi}\"\n+\techo \"$machine-${os}${release}${abi}\"\n \texit ;;\n     *:Bitrig:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-bitrig${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"\n \texit ;;\n     *:OpenBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:LibertyBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-libertybsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"\n+\texit ;;\n+    *:MidnightBSD:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-midnightbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:ekkoBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-ekkobsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:SolidBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"\n \texit ;;\n     macppc:MirBSD:*:*)\n-\techo powerpc-unknown-mirbsd${UNAME_RELEASE}\n+\techo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:MirBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:Sortix:*:*)\n-\techo ${UNAME_MACHINE}-unknown-sortix\n+\techo \"$UNAME_MACHINE\"-unknown-sortix\n+\texit ;;\n+    *:Redox:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-redox\n \texit ;;\n+    mips:OSF1:*.*)\n+        echo mips-dec-osf1\n+        exit ;;\n     alpha:OSF1:*:*)\n \tcase $UNAME_RELEASE in\n \t*4.0)\n@@ -310,28 +326,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n-\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n+\techo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"\n \t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n \texitcode=$?\n \ttrap '' 0\n \texit $exitcode ;;\n-    Alpha\\ *:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# Should we change UNAME_MACHINE based on the output of uname instead\n-\t# of the specific Alpha model?\n-\techo alpha-pc-interix\n-\texit ;;\n-    21064:Windows_NT:50:3)\n-\techo alpha-dec-winnt3.5\n-\texit ;;\n     Amiga*:UNIX_System_V:4.0:*)\n \techo m68k-unknown-sysv4\n \texit ;;\n     *:[Aa]miga[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-amigaos\n+\techo \"$UNAME_MACHINE\"-unknown-amigaos\n \texit ;;\n     *:[Mm]orph[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-morphos\n+\techo \"$UNAME_MACHINE\"-unknown-morphos\n \texit ;;\n     *:OS/390:*:*)\n \techo i370-ibm-openedition\n@@ -343,7 +350,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \techo powerpc-ibm-os400\n \texit ;;\n     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n-\techo arm-acorn-riscix${UNAME_RELEASE}\n+\techo arm-acorn-riscix\"$UNAME_RELEASE\"\n \texit ;;\n     arm*:riscos:*:*|arm*:RISCOS:*:*)\n \techo arm-unknown-riscos\n@@ -370,19 +377,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t    sparc) echo sparc-icl-nx7; exit ;;\n \tesac ;;\n     s390x:SunOS:*:*)\n-\techo ${UNAME_MACHINE}-ibm-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4H:SunOS:5.*:*)\n-\techo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n-\techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n-\techo i386-pc-auroraux${UNAME_RELEASE}\n+\techo i386-pc-auroraux\"$UNAME_RELEASE\"\n \texit ;;\n     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tSUN_ARCH=i386\n \t# If there is a compiler, see if it is configured for 64-bit objects.\n \t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n@@ -395,13 +402,13 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\tSUN_ARCH=x86_64\n \t    fi\n \tfi\n-\techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:6*:*)\n \t# According to config.sub, this is the proper way to canonicalize\n \t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n \t# it's likely to be more like Solaris than SunOS4.\n-\techo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:*:*)\n \tcase \"`/usr/bin/arch -k`\" in\n@@ -410,25 +417,25 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Japanese Language versions have a version number like `4.1.3-JL'.\n-\techo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`\n+\techo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"\n \texit ;;\n     sun3*:SunOS:*:*)\n-\techo m68k-sun-sunos${UNAME_RELEASE}\n+\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     sun*:*:4.2BSD:*)\n \tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n-\ttest \"x${UNAME_RELEASE}\" = x && UNAME_RELEASE=3\n+\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n \tcase \"`/bin/arch`\" in\n \t    sun3)\n-\t\techo m68k-sun-sunos${UNAME_RELEASE}\n+\t\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \t    sun4)\n-\t\techo sparc-sun-sunos${UNAME_RELEASE}\n+\t\techo sparc-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \tesac\n \texit ;;\n     aushp:SunOS:*:*)\n-\techo sparc-auspex-sunos${UNAME_RELEASE}\n+\techo sparc-auspex-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     # The situation for MiNT is a little confusing.  The machine name\n     # can be virtually everything (everything which is not\n@@ -439,44 +446,44 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n     # MiNT.  But MiNT is downward compatible to TOS, so this should\n     # be no problem.\n     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n-\techo m68k-milan-mint${UNAME_RELEASE}\n+\techo m68k-milan-mint\"$UNAME_RELEASE\"\n \texit ;;\n     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n-\techo m68k-hades-mint${UNAME_RELEASE}\n+\techo m68k-hades-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n-\techo m68k-unknown-mint${UNAME_RELEASE}\n+\techo m68k-unknown-mint\"$UNAME_RELEASE\"\n \texit ;;\n     m68k:machten:*:*)\n-\techo m68k-apple-machten${UNAME_RELEASE}\n+\techo m68k-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     powerpc:machten:*:*)\n-\techo powerpc-apple-machten${UNAME_RELEASE}\n+\techo powerpc-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     RISC*:Mach:*:*)\n \techo mips-dec-mach_bsd4.3\n \texit ;;\n     RISC*:ULTRIX:*:*)\n-\techo mips-dec-ultrix${UNAME_RELEASE}\n+\techo mips-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     VAX*:ULTRIX*:*:*)\n-\techo vax-dec-ultrix${UNAME_RELEASE}\n+\techo vax-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     2020:CLIX:*:* | 2430:CLIX:*:*)\n-\techo clipper-intergraph-clix${UNAME_RELEASE}\n+\techo clipper-intergraph-clix\"$UNAME_RELEASE\"\n \texit ;;\n     mips:*:*:UMIPS | mips:*:*:RISCos)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n #ifdef __cplusplus\n #include <stdio.h>  /* for printf() prototype */\n \tint main (int argc, char *argv[]) {\n@@ -485,23 +492,23 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n #endif\n \t#if defined (host_mips) && defined (MIPSEB)\n \t#if defined (SYSTYPE_SYSV)\n-\t  printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_SVR4)\n-\t  printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n-\t  printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#endif\n \t  exit (-1);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c &&\n-\t  dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n-\t  SYSTEM_NAME=`$dummy $dummyarg` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n+\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n+\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n \t    { echo \"$SYSTEM_NAME\"; exit; }\n-\techo mips-mips-riscos${UNAME_RELEASE}\n+\techo mips-mips-riscos\"$UNAME_RELEASE\"\n \texit ;;\n     Motorola:PowerMAX_OS:*:*)\n \techo powerpc-motorola-powermax\n@@ -527,17 +534,17 @@ EOF\n     AViiON:dgux:*:*)\n \t# DG/UX returns AViiON for all architectures\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tif [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]\n+\tif [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]\n \tthen\n-\t    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\\n-\t       [ ${TARGET_BINARY_INTERFACE}x = x ]\n+\t    if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\\n+\t       [ \"$TARGET_BINARY_INTERFACE\"x = x ]\n \t    then\n-\t\techo m88k-dg-dgux${UNAME_RELEASE}\n+\t\techo m88k-dg-dgux\"$UNAME_RELEASE\"\n \t    else\n-\t\techo m88k-dg-dguxbcs${UNAME_RELEASE}\n+\t\techo m88k-dg-dguxbcs\"$UNAME_RELEASE\"\n \t    fi\n \telse\n-\t    echo i586-dg-dgux${UNAME_RELEASE}\n+\t    echo i586-dg-dgux\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n@@ -554,7 +561,7 @@ EOF\n \techo m68k-tektronix-bsd\n \texit ;;\n     *:IRIX*:*:*)\n-\techo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`\n+\techo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"\n \texit ;;\n     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n \techo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id\n@@ -566,14 +573,14 @@ EOF\n \tif [ -x /usr/bin/oslevel ] ; then\n \t\tIBM_REV=`/usr/bin/oslevel`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${UNAME_MACHINE}-ibm-aix${IBM_REV}\n+\techo \"$UNAME_MACHINE\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:2:3)\n \tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n-\t\teval $set_cc_for_build\n-\t\tsed 's/^\t\t//' << EOF >$dummy.c\n+\t\teval \"$set_cc_for_build\"\n+\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n \t\t#include <sys/systemcfg.h>\n \n \t\tmain()\n@@ -584,7 +591,7 @@ EOF\n \t\t\texit(0);\n \t\t\t}\n EOF\n-\t\tif $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`\n+\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`\n \t\tthen\n \t\t\techo \"$SYSTEM_NAME\"\n \t\telse\n@@ -598,7 +605,7 @@ EOF\n \texit ;;\n     *:AIX:*:[4567])\n \tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n-\tif /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then\n+\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n \t\tIBM_ARCH=rs6000\n \telse\n \t\tIBM_ARCH=powerpc\n@@ -607,18 +614,18 @@ EOF\n \t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n \t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${IBM_ARCH}-ibm-aix${IBM_REV}\n+\techo \"$IBM_ARCH\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:*:*)\n \techo rs6000-ibm-aix\n \texit ;;\n-    ibmrt:4.4BSD:*|romp-ibm:BSD:*)\n+    ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)\n \techo romp-ibm-bsd4.4\n \texit ;;\n     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n-\techo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to\n+\techo romp-ibm-bsd\"$UNAME_RELEASE\"   # 4.3 with uname added to\n \texit ;;                             # report: romp-ibm BSD 4.3\n     *:BOSX:*:*)\n \techo rs6000-bull-bosx\n@@ -633,28 +640,28 @@ EOF\n \techo m68k-hp-bsd4.4\n \texit ;;\n     9000/[34678]??:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\tcase \"${UNAME_MACHINE}\" in\n-\t    9000/31? )            HP_ARCH=m68000 ;;\n-\t    9000/[34]?? )         HP_ARCH=m68k ;;\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\tcase \"$UNAME_MACHINE\" in\n+\t    9000/31?)            HP_ARCH=m68000 ;;\n+\t    9000/[34]??)         HP_ARCH=m68k ;;\n \t    9000/[678][0-9][0-9])\n \t\tif [ -x /usr/bin/getconf ]; then\n \t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n \t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n-\t\t    case \"${sc_cpu_version}\" in\n+\t\t    case \"$sc_cpu_version\" in\n \t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n \t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n \t\t      532)                      # CPU_PA_RISC2_0\n-\t\t\tcase \"${sc_kernel_bits}\" in\n+\t\t\tcase \"$sc_kernel_bits\" in\n \t\t\t  32) HP_ARCH=hppa2.0n ;;\n \t\t\t  64) HP_ARCH=hppa2.0w ;;\n \t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n \t\t\tesac ;;\n \t\t    esac\n \t\tfi\n-\t\tif [ \"${HP_ARCH}\" = \"\" ]; then\n-\t\t    eval $set_cc_for_build\n-\t\t    sed 's/^\t\t//' << EOF >$dummy.c\n+\t\tif [ \"$HP_ARCH\" = \"\" ]; then\n+\t\t    eval \"$set_cc_for_build\"\n+\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n \n \t\t#define _HPUX_SOURCE\n \t\t#include <stdlib.h>\n@@ -687,13 +694,13 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n-\tif [ ${HP_ARCH} = hppa2.0w ]\n+\tif [ \"$HP_ARCH\" = hppa2.0w ]\n \tthen\n-\t    eval $set_cc_for_build\n+\t    eval \"$set_cc_for_build\"\n \n \t    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating\n \t    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler\n@@ -712,15 +719,15 @@ EOF\n \t\tHP_ARCH=hppa64\n \t    fi\n \tfi\n-\techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n+\techo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     ia64:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\techo ia64-hp-hpux${HPUX_REV}\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\techo ia64-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     3050*:HI-UX:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#include <unistd.h>\n \tint\n \tmain ()\n@@ -745,11 +752,11 @@ EOF\n \t  exit (0);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&\n \t\t{ echo \"$SYSTEM_NAME\"; exit; }\n \techo unknown-hitachi-hiuxwe2\n \texit ;;\n-    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )\n+    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)\n \techo hppa1.1-hp-bsd\n \texit ;;\n     9000/8??:4.3bsd:*:*)\n@@ -758,17 +765,17 @@ EOF\n     *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n \techo hppa1.0-hp-mpeix\n \texit ;;\n-    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )\n+    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)\n \techo hppa1.1-hp-osf\n \texit ;;\n     hp8??:OSF1:*:*)\n \techo hppa1.0-hp-osf\n \texit ;;\n     i*86:OSF1:*:*)\n \tif [ -x /usr/sbin/sysversion ] ; then\n-\t    echo ${UNAME_MACHINE}-unknown-osf1mk\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1mk\n \telse\n-\t    echo ${UNAME_MACHINE}-unknown-osf1\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1\n \tfi\n \texit ;;\n     parisc*:Lites*:*:*)\n@@ -793,128 +800,109 @@ EOF\n \techo c4-convex-bsd\n \texit ;;\n     CRAY*Y-MP:*:*:*)\n-\techo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo ymp-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*[A-Z]90:*:*:*)\n-\techo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\\n+\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n \t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n \t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n \t      -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*TS:*:*:*)\n-\techo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo t90-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*T3E:*:*:*)\n-\techo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo alphaev5-cray-unicosmk\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*SV1:*:*:*)\n-\techo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo sv1-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     *:UNICOS/mp:*:*)\n-\techo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n \tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n \techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     5000:UNIX_System_V:4.*:*)\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n \techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n-\techo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-pc-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     sparc*:BSD/OS:*:*)\n-\techo sparc-unknown-bsdi${UNAME_RELEASE}\n+\techo sparc-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:BSD/OS:*:*)\n-\techo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:FreeBSD:*:*)\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tcase ${UNAME_PROCESSOR} in\n+\tcase \"$UNAME_PROCESSOR\" in\n \t    amd64)\n \t\tUNAME_PROCESSOR=x86_64 ;;\n \t    i386)\n \t\tUNAME_PROCESSOR=i586 ;;\n \tesac\n-\techo ${UNAME_PROCESSOR}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     i*:CYGWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-cygwin\n+\techo \"$UNAME_MACHINE\"-pc-cygwin\n \texit ;;\n     *:MINGW64*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw64\n+\techo \"$UNAME_MACHINE\"-pc-mingw64\n \texit ;;\n     *:MINGW*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-mingw32\n \texit ;;\n     *:MSYS*:*)\n-\techo ${UNAME_MACHINE}-pc-msys\n-\texit ;;\n-    i*:windows32*:*)\n-\t# uname -m includes \"-pc\" on this system.\n-\techo ${UNAME_MACHINE}-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-msys\n \texit ;;\n     i*:PW*:*)\n-\techo ${UNAME_MACHINE}-pc-pw32\n+\techo \"$UNAME_MACHINE\"-pc-pw32\n \texit ;;\n     *:Interix*:*)\n-\tcase ${UNAME_MACHINE} in\n+\tcase \"$UNAME_MACHINE\" in\n \t    x86)\n-\t\techo i586-pc-interix${UNAME_RELEASE}\n+\t\techo i586-pc-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    authenticamd | genuineintel | EM64T)\n-\t\techo x86_64-unknown-interix${UNAME_RELEASE}\n+\t\techo x86_64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    IA64)\n-\t\techo ia64-unknown-interix${UNAME_RELEASE}\n+\t\techo ia64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \tesac ;;\n-    [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)\n-\techo i${UNAME_MACHINE}-pc-mks\n-\texit ;;\n-    8664:Windows_NT:*)\n-\techo x86_64-pc-mks\n-\texit ;;\n-    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we\n-\t# UNAME_MACHINE based on the output of uname instead of i386?\n-\techo i586-pc-interix\n-\texit ;;\n     i*:UWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-uwin\n+\techo \"$UNAME_MACHINE\"-pc-uwin\n \texit ;;\n     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)\n \techo x86_64-unknown-cygwin\n \texit ;;\n-    p*:CYGWIN*:*)\n-\techo powerpcle-unknown-cygwin\n-\texit ;;\n     prep*:SunOS:5.*:*)\n-\techo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     *:GNU:*:*)\n \t# the GNU system\n-\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-${LIBC}`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n+\techo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n+\techo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"\n \texit ;;\n     i*86:Minix:*:*)\n-\techo ${UNAME_MACHINE}-pc-minix\n+\techo \"$UNAME_MACHINE\"-pc-minix\n \texit ;;\n     aarch64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     aarch64_be:Linux:*:*)\n \tUNAME_MACHINE=aarch64_be\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     alpha:Linux:*:*)\n \tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n@@ -928,63 +916,63 @@ EOF\n \tesac\n \tobjdump --private-headers /bin/sh | grep -q ld.so.1\n \tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arc:Linux:*:* | arceb:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arm*:Linux:*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t    | grep -q __ARM_EABI__\n \tthen\n-\t    echo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\t    echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \telse\n \t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t| grep -q __ARM_PCS_VFP\n \t    then\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabi\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabi\n \t    else\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabihf\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabihf\n \t    fi\n \tfi\n \texit ;;\n     avr32*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     cris:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     crisv32:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     e2k:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     frv:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     hexagon:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     ia64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     k1om:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m32r*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m68*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     mips:Linux:*:* | mips64:Linux:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#undef CPU\n \t#undef ${UNAME_MACHINE}\n \t#undef ${UNAME_MACHINE}el\n@@ -998,70 +986,70 @@ EOF\n \t#endif\n \t#endif\n EOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`\n-\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU'`\"\n+\ttest \"x$CPU\" != x && { echo \"$CPU-unknown-linux-$LIBC\"; exit; }\n \t;;\n     mips64el:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     openrisc*:Linux:*:*)\n-\techo or1k-unknown-linux-${LIBC}\n+\techo or1k-unknown-linux-\"$LIBC\"\n \texit ;;\n     or32:Linux:*:* | or1k*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     padre:Linux:*:*)\n-\techo sparc-unknown-linux-${LIBC}\n+\techo sparc-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc64:Linux:*:* | hppa64:Linux:*:*)\n-\techo hppa64-unknown-linux-${LIBC}\n+\techo hppa64-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n \tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n-\t  PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;\n-\t  PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;\n-\t  *)    echo hppa-unknown-linux-${LIBC} ;;\n+\t  PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;\n+\t  PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;\n+\t  *)    echo hppa-unknown-linux-\"$LIBC\" ;;\n \tesac\n \texit ;;\n     ppc64:Linux:*:*)\n-\techo powerpc64-unknown-linux-${LIBC}\n+\techo powerpc64-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc:Linux:*:*)\n-\techo powerpc-unknown-linux-${LIBC}\n+\techo powerpc-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc64le:Linux:*:*)\n-\techo powerpc64le-unknown-linux-${LIBC}\n+\techo powerpc64le-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppcle:Linux:*:*)\n-\techo powerpcle-unknown-linux-${LIBC}\n+\techo powerpcle-unknown-linux-\"$LIBC\"\n \texit ;;\n     riscv32:Linux:*:* | riscv64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n-\techo ${UNAME_MACHINE}-ibm-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-ibm-linux-\"$LIBC\"\n \texit ;;\n     sh64*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sh*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sparc:Linux:*:* | sparc64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     tile*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     vax:Linux:*:*)\n-\techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     xtensa*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:DYNIX/ptx:4*:*)\n \t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n@@ -1075,34 +1063,34 @@ EOF\n \t# I am not positive that other SVR4 systems won't match this,\n \t# I just have to hope.  -- rms.\n \t# Use sysv4.2uw... so that sysv4* matches it.\n-\techo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE\"-pc-sysv4.2uw\"$UNAME_VERSION\"\n \texit ;;\n     i*86:OS/2:*:*)\n \t# If we were able to find `uname', then EMX Unix compatibility\n \t# is probably installed.\n-\techo ${UNAME_MACHINE}-pc-os2-emx\n+\techo \"$UNAME_MACHINE\"-pc-os2-emx\n \texit ;;\n     i*86:XTS-300:*:STOP)\n-\techo ${UNAME_MACHINE}-unknown-stop\n+\techo \"$UNAME_MACHINE\"-unknown-stop\n \texit ;;\n     i*86:atheos:*:*)\n-\techo ${UNAME_MACHINE}-unknown-atheos\n+\techo \"$UNAME_MACHINE\"-unknown-atheos\n \texit ;;\n     i*86:syllable:*:*)\n-\techo ${UNAME_MACHINE}-pc-syllable\n+\techo \"$UNAME_MACHINE\"-pc-syllable\n \texit ;;\n     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)\n-\techo i386-unknown-lynxos${UNAME_RELEASE}\n+\techo i386-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     i*86:*DOS:*:*)\n-\techo ${UNAME_MACHINE}-pc-msdosdjgpp\n+\techo \"$UNAME_MACHINE\"-pc-msdosdjgpp\n \texit ;;\n-    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)\n-\tUNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`\n+    i*86:*:4.*:*)\n+\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n \tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n-\t\techo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv\"$UNAME_REL\"\n \tfi\n \texit ;;\n     i*86:*:5:[678]*)\n@@ -1112,12 +1100,12 @@ EOF\n \t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n \t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n \tesac\n-\techo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}{$UNAME_VERSION}\"\n \texit ;;\n     i*86:*:3.2:*)\n \tif test -f /usr/options/cb.name; then\n \t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n-\t\techo ${UNAME_MACHINE}-pc-isc$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"\n \telif /bin/uname -X 2>/dev/null >/dev/null ; then\n \t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n \t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n@@ -1127,9 +1115,9 @@ EOF\n \t\t\t&& UNAME_MACHINE=i686\n \t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n \t\t\t&& UNAME_MACHINE=i686\n-\t\techo ${UNAME_MACHINE}-pc-sco$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-sco\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv32\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv32\n \tfi\n \texit ;;\n     pc:*:*:*)\n@@ -1149,9 +1137,9 @@ EOF\n \texit ;;\n     i860:*:4.*:*) # i860-SVR4\n \tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n-\t  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4\n+\t  echo i860-stardent-sysv\"$UNAME_RELEASE\" # Stardent Vistra i860-SVR4\n \telse # Add other i860-SVR4 vendors below as they are discovered.\n-\t  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4\n+\t  echo i860-unknown-sysv\"$UNAME_RELEASE\"  # Unknown i860-SVR4\n \tfi\n \texit ;;\n     mini*:CTIX:SYS*5:*)\n@@ -1171,9 +1159,9 @@ EOF\n \ttest -r /etc/.relid \\\n \t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t  && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t  && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n \t  && { echo i486-ncr-sysv4; exit; } ;;\n@@ -1182,28 +1170,28 @@ EOF\n \ttest -r /etc/.relid \\\n \t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n-\techo m68k-unknown-lynxos${UNAME_RELEASE}\n+\techo m68k-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     mc68030:UNIX_System_V:4.*:*)\n \techo m68k-atari-sysv4\n \texit ;;\n     TSUNAMI:LynxOS:2.*:*)\n-\techo sparc-unknown-lynxos${UNAME_RELEASE}\n+\techo sparc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     rs6000:LynxOS:2.*:*)\n-\techo rs6000-unknown-lynxos${UNAME_RELEASE}\n+\techo rs6000-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)\n-\techo powerpc-unknown-lynxos${UNAME_RELEASE}\n+\techo powerpc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     SM[BE]S:UNIX_SV:*:*)\n-\techo mips-dde-sysv${UNAME_RELEASE}\n+\techo mips-dde-sysv\"$UNAME_RELEASE\"\n \texit ;;\n     RM*:ReliantUNIX-*:*:*)\n \techo mips-sni-sysv4\n@@ -1214,7 +1202,7 @@ EOF\n     *:SINIX-*:*:*)\n \tif uname -p 2>/dev/null >/dev/null ; then\n \t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\t\techo ${UNAME_MACHINE}-sni-sysv4\n+\t\techo \"$UNAME_MACHINE\"-sni-sysv4\n \telse\n \t\techo ns32k-sni-sysv\n \tfi\n@@ -1234,23 +1222,23 @@ EOF\n \texit ;;\n     i*86:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n-\techo ${UNAME_MACHINE}-stratus-vos\n+\techo \"$UNAME_MACHINE\"-stratus-vos\n \texit ;;\n     *:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n \techo hppa1.1-stratus-vos\n \texit ;;\n     mc68*:A/UX:*:*)\n-\techo m68k-apple-aux${UNAME_RELEASE}\n+\techo m68k-apple-aux\"$UNAME_RELEASE\"\n \texit ;;\n     news*:NEWS-OS:6*:*)\n \techo mips-sony-newsos6\n \texit ;;\n     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n \tif [ -d /usr/nec ]; then\n-\t\techo mips-nec-sysv${UNAME_RELEASE}\n+\t\techo mips-nec-sysv\"$UNAME_RELEASE\"\n \telse\n-\t\techo mips-unknown-sysv${UNAME_RELEASE}\n+\t\techo mips-unknown-sysv\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n@@ -1269,49 +1257,56 @@ EOF\n \techo x86_64-unknown-haiku\n \texit ;;\n     SX-4:SUPER-UX:*:*)\n-\techo sx4-nec-superux${UNAME_RELEASE}\n+\techo sx4-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-5:SUPER-UX:*:*)\n-\techo sx5-nec-superux${UNAME_RELEASE}\n+\techo sx5-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-6:SUPER-UX:*:*)\n-\techo sx6-nec-superux${UNAME_RELEASE}\n+\techo sx6-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-7:SUPER-UX:*:*)\n-\techo sx7-nec-superux${UNAME_RELEASE}\n+\techo sx7-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8:SUPER-UX:*:*)\n-\techo sx8-nec-superux${UNAME_RELEASE}\n+\techo sx8-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8R:SUPER-UX:*:*)\n-\techo sx8r-nec-superux${UNAME_RELEASE}\n+\techo sx8r-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-ACE:SUPER-UX:*:*)\n-\techo sxace-nec-superux${UNAME_RELEASE}\n+\techo sxace-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     Power*:Rhapsody:*:*)\n-\techo powerpc-apple-rhapsody${UNAME_RELEASE}\n+\techo powerpc-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Rhapsody:*:*)\n-\techo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Darwin:*:*)\n \tUNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif test \"$UNAME_PROCESSOR\" = unknown ; then\n \t    UNAME_PROCESSOR=powerpc\n \tfi\n-\tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n+\tif test \"`echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'`\" -le 10 ; then\n \t    if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n-\t\t    grep IS_64BIT_ARCH >/dev/null\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_64BIT_ARCH >/dev/null\n \t\tthen\n \t\t    case $UNAME_PROCESSOR in\n \t\t\ti386) UNAME_PROCESSOR=x86_64 ;;\n \t\t\tpowerpc) UNAME_PROCESSOR=powerpc64 ;;\n \t\t    esac\n \t\tfi\n+\t\t# On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n+\t\tif (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_PPC >/dev/null\n+\t\tthen\n+\t\t    UNAME_PROCESSOR=powerpc\n+\t\tfi\n \t    fi\n \telif test \"$UNAME_PROCESSOR\" = i386 ; then\n \t    # Avoid executing cc on OS X 10.9, as it ships with a stub\n@@ -1322,30 +1317,33 @@ EOF\n \t    # that Apple uses in portable devices.\n \t    UNAME_PROCESSOR=x86_64\n \tfi\n-\techo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)\n \tUNAME_PROCESSOR=`uname -p`\n \tif test \"$UNAME_PROCESSOR\" = x86; then\n \t\tUNAME_PROCESSOR=i386\n \t\tUNAME_MACHINE=pc\n \tfi\n-\techo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-\"$UNAME_MACHINE\"-nto-qnx\"$UNAME_RELEASE\"\n \texit ;;\n     *:QNX:*:4*)\n \techo i386-pc-qnx\n \texit ;;\n-    NEO-?:NONSTOP_KERNEL:*:*)\n-\techo neo-tandem-nsk${UNAME_RELEASE}\n+    NEO-*:NONSTOP_KERNEL:*:*)\n+\techo neo-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     NSE-*:NONSTOP_KERNEL:*:*)\n-\techo nse-tandem-nsk${UNAME_RELEASE}\n+\techo nse-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSR-?:NONSTOP_KERNEL:*:*)\n-\techo nsr-tandem-nsk${UNAME_RELEASE}\n+    NSR-*:NONSTOP_KERNEL:*:*)\n+\techo nsr-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSX-?:NONSTOP_KERNEL:*:*)\n-\techo nsx-tandem-nsk${UNAME_RELEASE}\n+    NSV-*:NONSTOP_KERNEL:*:*)\n+\techo nsv-tandem-nsk\"$UNAME_RELEASE\"\n+\texit ;;\n+    NSX-*:NONSTOP_KERNEL:*:*)\n+\techo nsx-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     *:NonStop-UX:*:*)\n \techo mips-compaq-nonstopux\n@@ -1354,7 +1352,7 @@ EOF\n \techo bs2000-siemens-sysv\n \texit ;;\n     DS/*:UNIX_System_V:*:*)\n-\techo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-\"$UNAME_SYSTEM\"-\"$UNAME_RELEASE\"\n \texit ;;\n     *:Plan9:*:*)\n \t# \"uname -m\" is not consistent, so use $cputype instead. 386\n@@ -1365,7 +1363,7 @@ EOF\n \telse\n \t    UNAME_MACHINE=\"$cputype\"\n \tfi\n-\techo ${UNAME_MACHINE}-unknown-plan9\n+\techo \"$UNAME_MACHINE\"-unknown-plan9\n \texit ;;\n     *:TOPS-10:*:*)\n \techo pdp10-unknown-tops10\n@@ -1386,14 +1384,14 @@ EOF\n \techo pdp10-unknown-its\n \texit ;;\n     SEI:*:*:SEIUX)\n-\techo mips-sei-seiux${UNAME_RELEASE}\n+\techo mips-sei-seiux\"$UNAME_RELEASE\"\n \texit ;;\n     *:DragonFly:*:*)\n-\techo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     *:*VMS:*:*)\n \tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\tcase \"${UNAME_MACHINE}\" in\n+\tcase \"$UNAME_MACHINE\" in\n \t    A*) echo alpha-dec-vms ; exit ;;\n \t    I*) echo ia64-dec-vms ; exit ;;\n \t    V*) echo vax-dec-vms ; exit ;;\n@@ -1402,32 +1400,44 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE} | sed -e 's/ .*$//'`\n+\techo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"\n \texit ;;\n     i*86:rdos:*:*)\n-\techo ${UNAME_MACHINE}-pc-rdos\n+\techo \"$UNAME_MACHINE\"-pc-rdos\n \texit ;;\n     i*86:AROS:*:*)\n-\techo ${UNAME_MACHINE}-pc-aros\n+\techo \"$UNAME_MACHINE\"-pc-aros\n \texit ;;\n     x86_64:VMkernel:*:*)\n-\techo ${UNAME_MACHINE}-unknown-esx\n+\techo \"$UNAME_MACHINE\"-unknown-esx\n \texit ;;\n     amd64:Isilon\\ OneFS:*:*)\n \techo x86_64-unknown-onefs\n \texit ;;\n esac\n \n+echo \"$0: unable to guess system type\" >&2\n+\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in\n+    mips:Linux | mips64:Linux)\n+\t# If we got here on MIPS GNU/Linux, output extra information.\n+\tcat >&2 <<EOF\n+\n+NOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\n+the system type. Please install a C compiler and try again.\n+EOF\n+\t;;\n+esac\n+\n cat >&2 <<EOF\n-$0: unable to guess system type\n \n This script (version $timestamp), has failed to recognize the\n-operating system you are using. If your script is old, overwrite\n-config.guess and config.sub with the latest versions from:\n+operating system you are using. If your script is old, overwrite *all*\n+copies of config.guess and config.sub with the latest versions from:\n \n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n and\n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n If $0 has already been updated, send the following data and any\n information you think might be pertinent to config-patches@gnu.org to\n@@ -1450,16 +1460,16 @@ hostinfo               = `(hostinfo) 2>/dev/null`\n /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n \n-UNAME_MACHINE = ${UNAME_MACHINE}\n-UNAME_RELEASE = ${UNAME_RELEASE}\n-UNAME_SYSTEM  = ${UNAME_SYSTEM}\n-UNAME_VERSION = ${UNAME_VERSION}\n+UNAME_MACHINE = \"$UNAME_MACHINE\"\n+UNAME_RELEASE = \"$UNAME_RELEASE\"\n+UNAME_SYSTEM  = \"$UNAME_SYSTEM\"\n+UNAME_VERSION = \"$UNAME_VERSION\"\n EOF\n \n exit 1\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "818892c1c31fdbe97b7a9515662a01da0371e09f",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 105,
        "deletions": 141,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-04-02'\n+timestamp='2018-01-15'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-04-02'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -33,7 +33,7 @@ timestamp='2017-04-02'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -57,7 +57,7 @@ Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n \n Canonicalize a configuration name.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -94,7 +94,7 @@ while test $# -gt 0 ; do\n \n     *local*)\n        # First pass through any local machine types.\n-       echo $1\n+       echo \"$1\"\n        exit ;;\n \n     * )\n@@ -112,24 +112,24 @@ esac\n \n # Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).\n # Here we must recognize all the valid KERNEL-OS combinations.\n-maybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n+maybe_os=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n case $maybe_os in\n   nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \\\n   linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \\\n   knetbsd*-gnu* | netbsd*-gnu* | netbsd*-eabi* | \\\n   kopensolaris*-gnu* | cloudabi*-eabi* | \\\n   storm-chaos* | os2-emx* | rtmk-nova*)\n     os=-$maybe_os\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n     ;;\n   android-linux)\n     os=-linux-android\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n     ;;\n   *)\n-    basic_machine=`echo $1 | sed 's/-[^-]*$//'`\n-    if [ $basic_machine != $1 ]\n-    then os=`echo $1 | sed 's/.*-/-/'`\n+    basic_machine=`echo \"$1\" | sed 's/-[^-]*$//'`\n+    if [ \"$basic_machine\" != \"$1\" ]\n+    then os=`echo \"$1\" | sed 's/.*-/-/'`\n     else os=; fi\n     ;;\n esac\n@@ -178,44 +178,44 @@ case $os in\n \t\t;;\n \t-sco6)\n \t\tos=-sco5v6\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5)\n \t\tos=-sco3.2v5\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco4)\n \t\tos=-sco3.2v4\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2.[4-9]*)\n \t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2v[4-9]*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5v6*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco*)\n \t\tos=-sco3.2v2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-udk*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-isc)\n \t\tos=-isc2.2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-clix*)\n \t\tbasic_machine=clipper-intergraph\n \t\t;;\n \t-isc*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-lynx*178)\n \t\tos=-lynxos178\n@@ -227,10 +227,7 @@ case $os in\n \t\tos=-lynxos\n \t\t;;\n \t-ptx*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`\n-\t\t;;\n-\t-windowsnt*)\n-\t\tos=`echo $os | sed -e 's/windowsnt/winnt/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-sequent/'`\n \t\t;;\n \t-psos*)\n \t\tos=-psos\n@@ -299,7 +296,7 @@ case $basic_machine in\n \t| nios | nios2 | nios2eb | nios2el \\\n \t| ns16k | ns32k \\\n \t| open8 | or1k | or1knd | or32 \\\n-\t| pdp10 | pdp11 | pj | pjl \\\n+\t| pdp10 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pru \\\n \t| pyramid \\\n@@ -316,7 +313,6 @@ case $basic_machine in\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n \t| visium \\\n \t| wasm32 \\\n-\t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n \t\tbasic_machine=$basic_machine-unknown\n@@ -337,7 +333,7 @@ case $basic_machine in\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n \t\t;;\n-\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)\n+\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65)\n \t\t;;\n \tms1)\n \t\tbasic_machine=mt-unknown\n@@ -366,7 +362,7 @@ case $basic_machine in\n \t  ;;\n \t# Object if more than one company name word.\n \t*-*-*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n \t# Recognize the basic CPU types with company name.\n@@ -461,7 +457,7 @@ case $basic_machine in\n \t# Recognize the various machine names and aliases which stand\n \t# for a CPU type and a company and sometimes even an OS.\n \t386bsd)\n-\t\tbasic_machine=i386-unknown\n+\t\tbasic_machine=i386-pc\n \t\tos=-bsd\n \t\t;;\n \t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n@@ -495,7 +491,7 @@ case $basic_machine in\n \t\tbasic_machine=x86_64-pc\n \t\t;;\n \tamd64-*)\n-\t\tbasic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=x86_64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tamdahl)\n \t\tbasic_machine=580-amdahl\n@@ -540,21 +536,21 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tblackfin-*)\n-\t\tbasic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=bfin-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tbluegene*)\n \t\tbasic_machine=powerpc-ibm\n \t\tos=-cnk\n \t\t;;\n \tc54x-*)\n-\t\tbasic_machine=tic54x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic54x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc55x-*)\n-\t\tbasic_machine=tic55x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic55x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc6x-*)\n-\t\tbasic_machine=tic6x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic6x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc90)\n \t\tbasic_machine=c90-cray\n@@ -643,7 +639,7 @@ case $basic_machine in\n \t\tbasic_machine=rs6000-bull\n \t\tos=-bosx\n \t\t;;\n-\tdpx2* | dpx2*-bull)\n+\tdpx2*)\n \t\tbasic_machine=m68k-bull\n \t\tos=-sysv3\n \t\t;;\n@@ -652,7 +648,7 @@ case $basic_machine in\n \t\tos=$os\"spe\"\n \t\t;;\n \te500v[12]-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=$os\"spe\"\n \t\t;;\n \tebmon29k)\n@@ -744,9 +740,6 @@ case $basic_machine in\n \thp9k8[0-9][0-9] | hp8[0-9][0-9])\n \t\tbasic_machine=hppa1.0-hp\n \t\t;;\n-\thppa-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \thppaosf)\n \t\tbasic_machine=hppa1.1-hp\n \t\tos=-osf\n@@ -759,26 +752,26 @@ case $basic_machine in\n \t\tbasic_machine=i370-ibm\n \t\t;;\n \ti*86v32)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv32\n \t\t;;\n \ti*86v4*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv4\n \t\t;;\n \ti*86v)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv\n \t\t;;\n \ti*86sol2)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-solaris2\n \t\t;;\n \ti386mach)\n \t\tbasic_machine=i386-mach\n \t\tos=-mach\n \t\t;;\n-\ti386-vsta | vsta)\n+\tvsta)\n \t\tbasic_machine=i386-unknown\n \t\tos=-vsta\n \t\t;;\n@@ -797,19 +790,16 @@ case $basic_machine in\n \t\tos=-sysv\n \t\t;;\n \tleon-*|leon[3-9]-*)\n-\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\tbasic_machine=sparc-`echo \"$basic_machine\" | sed 's/-.*//'`\n \t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n \t\t;;\n \tm68knommu-*)\n-\t\tbasic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=m68k-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n-\tm88k-omron*)\n-\t\tbasic_machine=m88k-omron\n-\t\t;;\n \tmagnum | m3230)\n \t\tbasic_machine=mips-mips\n \t\tos=-sysv\n@@ -841,10 +831,10 @@ case $basic_machine in\n \t\tos=-mint\n \t\t;;\n \tmips3*-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`\n \t\t;;\n \tmips3*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`-unknown\n \t\t;;\n \tmonitor)\n \t\tbasic_machine=m68k-rom68k\n@@ -863,7 +853,7 @@ case $basic_machine in\n \t\tos=-msdos\n \t\t;;\n \tms1-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/ms1-/mt-/'`\n \t\t;;\n \tmsys)\n \t\tbasic_machine=i686-pc\n@@ -905,7 +895,7 @@ case $basic_machine in\n \t\tbasic_machine=v70-nec\n \t\tos=-sysv\n \t\t;;\n-\tnext | m*-next )\n+\tnext | m*-next)\n \t\tbasic_machine=m68k-next\n \t\tcase $os in\n \t\t    -nextstep* )\n@@ -950,6 +940,9 @@ case $basic_machine in\n \tnsr-tandem)\n \t\tbasic_machine=nsr-tandem\n \t\t;;\n+\tnsv-tandem)\n+\t\tbasic_machine=nsv-tandem\n+\t\t;;\n \tnsx-tandem)\n \t\tbasic_machine=nsx-tandem\n \t\t;;\n@@ -985,7 +978,7 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tparisc-*)\n-\t\tbasic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=hppa-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tpbd)\n@@ -1001,7 +994,7 @@ case $basic_machine in\n \t\tbasic_machine=i386-pc\n \t\t;;\n \tpc98-*)\n-\t\tbasic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i386-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium | p5 | k5 | k6 | nexgen | viac3)\n \t\tbasic_machine=i586-pc\n@@ -1016,16 +1009,16 @@ case $basic_machine in\n \t\tbasic_machine=i786-pc\n \t\t;;\n \tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n-\t\tbasic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i586-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumpro-* | p6-* | 6x86-* | athlon-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium4-*)\n-\t\tbasic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i786-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpn)\n \t\tbasic_machine=pn-gould\n@@ -1035,23 +1028,23 @@ case $basic_machine in\n \tppc | ppcbe)\tbasic_machine=powerpc-unknown\n \t\t;;\n \tppc-* | ppcbe-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppcle | powerpclittle)\n \t\tbasic_machine=powerpcle-unknown\n \t\t;;\n \tppcle-* | powerpclittle-*)\n-\t\tbasic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpcle-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64)\tbasic_machine=powerpc64-unknown\n \t\t;;\n-\tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\tppc64-*) basic_machine=powerpc64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64le | powerpc64little)\n \t\tbasic_machine=powerpc64le-unknown\n \t\t;;\n \tppc64le-* | powerpc64little-*)\n-\t\tbasic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc64le-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tps2)\n \t\tbasic_machine=i386-ibm\n@@ -1105,17 +1098,10 @@ case $basic_machine in\n \tsequent)\n \t\tbasic_machine=i386-sequent\n \t\t;;\n-\tsh)\n-\t\tbasic_machine=sh-hitachi\n-\t\tos=-hms\n-\t\t;;\n \tsh5el)\n \t\tbasic_machine=sh5le-unknown\n \t\t;;\n-\tsh64)\n-\t\tbasic_machine=sh64-unknown\n-\t\t;;\n-\tsparclite-wrs | simso-wrs)\n+\tsimso-wrs)\n \t\tbasic_machine=sparclite-wrs\n \t\tos=-vxworks\n \t\t;;\n@@ -1134,7 +1120,7 @@ case $basic_machine in\n \t\tos=-sysv4\n \t\t;;\n \tstrongarm-* | thumb-*)\n-\t\tbasic_machine=arm-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=arm-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tsun2)\n \t\tbasic_machine=m68000-sun\n@@ -1248,9 +1234,6 @@ case $basic_machine in\n \t\tbasic_machine=a29k-wrs\n \t\tos=-vxworks\n \t\t;;\n-\twasm32)\n-\t\tbasic_machine=wasm32-unknown\n-\t\t;;\n \tw65*)\n \t\tbasic_machine=w65-wdc\n \t\tos=-none\n@@ -1259,6 +1242,9 @@ case $basic_machine in\n \t\tbasic_machine=hppa1.1-winbond\n \t\tos=-proelf\n \t\t;;\n+\tx64)\n+\t\tbasic_machine=x86_64-pc\n+\t\t;;\n \txbox)\n \t\tbasic_machine=i686-pc\n \t\tos=-mingw32\n@@ -1267,20 +1253,12 @@ case $basic_machine in\n \t\tbasic_machine=xps100-honeywell\n \t\t;;\n \txscale-* | xscalee[bl]-*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/^xscale/arm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/^xscale/arm/'`\n \t\t;;\n \tymp)\n \t\tbasic_machine=ymp-cray\n \t\tos=-unicos\n \t\t;;\n-\tz8k-*-coff)\n-\t\tbasic_machine=z8k-unknown\n-\t\tos=-sim\n-\t\t;;\n-\tz80-*-coff)\n-\t\tbasic_machine=z80-unknown\n-\t\tos=-sim\n-\t\t;;\n \tnone)\n \t\tbasic_machine=none-none\n \t\tos=-none\n@@ -1309,10 +1287,6 @@ case $basic_machine in\n \tvax)\n \t\tbasic_machine=vax-dec\n \t\t;;\n-\tpdp10)\n-\t\t# there are many clones, so DEC is not a safe bet\n-\t\tbasic_machine=pdp10-unknown\n-\t\t;;\n \tpdp11)\n \t\tbasic_machine=pdp11-dec\n \t\t;;\n@@ -1322,9 +1296,6 @@ case $basic_machine in\n \tsh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)\n \t\tbasic_machine=sh-unknown\n \t\t;;\n-\tsparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)\n-\t\tbasic_machine=sparc-sun\n-\t\t;;\n \tcydra)\n \t\tbasic_machine=cydra-cydrome\n \t\t;;\n@@ -1344,18 +1315,18 @@ case $basic_machine in\n \t\t# Make sure to match an already-canonicalized machine name.\n \t\t;;\n \t*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n \n # Here we canonicalize certain aliases for manufacturers.\n case $basic_machine in\n \t*-digital*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/digital.*/dec/'`\n \t\t;;\n \t*-commodore*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/commodore.*/cbm/'`\n \t\t;;\n \t*)\n \t\t;;\n@@ -1366,8 +1337,8 @@ esac\n if [ x\"$os\" != x\"\" ]\n then\n case $os in\n-\t# First match some system type aliases\n-\t# that might get confused with valid system types.\n+\t# First match some system type aliases that might get confused\n+\t# with valid system types.\n \t# -solaris* is a basic system type, with this one exception.\n \t-auroraux)\n \t\tos=-auroraux\n@@ -1378,18 +1349,19 @@ case $os in\n \t-solaris)\n \t\tos=-solaris2\n \t\t;;\n-\t-svr4*)\n-\t\tos=-sysv4\n-\t\t;;\n \t-unixware*)\n \t\tos=-sysv4.2uw\n \t\t;;\n \t-gnu/linux*)\n \t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n \t\t;;\n-\t# First accept the basic system types.\n+\t# es1800 is here to avoid being matched by es* (a different OS)\n+\t-es1800*)\n+\t\tos=-ose\n+\t\t;;\n+\t# Now accept the basic system types.\n \t# The portable systems comes first.\n-\t# Each alternative MUST END IN A *, to match a version number.\n+\t# Each alternative MUST end in a * to match a version number.\n \t# -sysv* is not here because it comes later, after sysvr4.\n \t-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\\n \t      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\\\n@@ -1399,7 +1371,7 @@ case $os in\n \t      | -aos* | -aros* | -cloudabi* | -sortix* \\\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n-\t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n+\t      | -hiux* | -knetbsd* | -mirbsd* | -netbsd* \\\n \t      | -bitrig* | -openbsd* | -solidbsd* | -libertybsd* \\\n \t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n@@ -1410,14 +1382,14 @@ case $os in\n \t      | -midipix* | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n \t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n-\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n+\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n \t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n-\t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n+\t      | -morphos* | -superux* | -rtmk* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n \t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n-\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox*)\n+\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox* | -bme*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1434,12 +1406,12 @@ case $os in\n \t-nto*)\n \t\tos=`echo $os | sed -e 's|nto|nto-qnx|'`\n \t\t;;\n-\t-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\\n-\t      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \\\n+\t-sim | -xray | -os68k* | -v88r* \\\n+\t      | -windows* | -osx | -abug | -netware* | -os9* \\\n \t      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)\n \t\t;;\n \t-mac*)\n-\t\tos=`echo $os | sed -e 's|mac|macos|'`\n+\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n \t\t;;\n \t-linux-dietlibc)\n \t\tos=-linux-dietlibc\n@@ -1448,10 +1420,10 @@ case $os in\n \t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n \t\t;;\n \t-sunos5*)\n-\t\tos=`echo $os | sed -e 's|sunos5|solaris2|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n \t\t;;\n \t-sunos6*)\n-\t\tos=`echo $os | sed -e 's|sunos6|solaris3|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n \t\t;;\n \t-opened*)\n \t\tos=-openedition\n@@ -1462,12 +1434,6 @@ case $os in\n \t-wince*)\n \t\tos=-wince\n \t\t;;\n-\t-osfrose*)\n-\t\tos=-osfrose\n-\t\t;;\n-\t-osf*)\n-\t\tos=-osf\n-\t\t;;\n \t-utek*)\n \t\tos=-bsd\n \t\t;;\n@@ -1492,7 +1458,7 @@ case $os in\n \t-nova*)\n \t\tos=-rtmk-nova\n \t\t;;\n-\t-ns2 )\n+\t-ns2)\n \t\tos=-nextstep2\n \t\t;;\n \t-nsk*)\n@@ -1514,7 +1480,7 @@ case $os in\n \t-oss*)\n \t\tos=-sysv3\n \t\t;;\n-\t-svr4)\n+\t-svr4*)\n \t\tos=-sysv4\n \t\t;;\n \t-svr3)\n@@ -1529,24 +1495,28 @@ case $os in\n \t-ose*)\n \t\tos=-ose\n \t\t;;\n-\t-es1800*)\n-\t\tos=-ose\n-\t\t;;\n-\t-xenix)\n-\t\tos=-xenix\n-\t\t;;\n \t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n \t\tos=-mint\n \t\t;;\n-\t-aros*)\n-\t\tos=-aros\n-\t\t;;\n \t-zvmoe)\n \t\tos=-zvmoe\n \t\t;;\n \t-dicos*)\n \t\tos=-dicos\n \t\t;;\n+\t-pikeos*)\n+\t\t# Until real need of OS specific support for\n+\t\t# particular features comes up, bare metal\n+\t\t# configurations are quite functional.\n+\t\tcase $basic_machine in\n+\t\t    arm*)\n+\t\t\tos=-eabi\n+\t\t\t;;\n+\t\t    *)\n+\t\t\tos=-elf\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n \t-nacl*)\n \t\t;;\n \t-ios)\n@@ -1556,7 +1526,7 @@ case $os in\n \t*)\n \t\t# Get rid of the `-' at the beginning of $os.\n \t\tos=`echo $os | sed 's/[^-]*-//'`\n-\t\techo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': system \\`\"$os\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n@@ -1652,9 +1622,6 @@ case $basic_machine in\n \t*-be)\n \t\tos=-beos\n \t\t;;\n-\t*-haiku)\n-\t\tos=-haiku\n-\t\t;;\n \t*-ibm)\n \t\tos=-aix\n \t\t;;\n@@ -1694,7 +1661,7 @@ case $basic_machine in\n \tm88k-omron*)\n \t\tos=-luna\n \t\t;;\n-\t*-next )\n+\t*-next)\n \t\tos=-nextstep\n \t\t;;\n \t*-sequent)\n@@ -1709,9 +1676,6 @@ case $basic_machine in\n \ti370-*)\n \t\tos=-mvs\n \t\t;;\n-\t*-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \t*-gould)\n \t\tos=-sysv\n \t\t;;\n@@ -1821,15 +1785,15 @@ case $basic_machine in\n \t\t\t\tvendor=stratus\n \t\t\t\t;;\n \t\tesac\n-\t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed \"s/unknown/$vendor/\"`\n \t\t;;\n esac\n \n-echo $basic_machine$os\n+echo \"$basic_machine$os\"\n exit\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "acbc60eea3e8ace144fbfd2ea13cd16772eb8134",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n package=expat\n-$(package)_version=2.2.1\n-$(package)_download_path=https://downloads.sourceforge.net/project/expat/expat/$($(package)_version)\n+$(package)_version=2.2.5\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_5/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=1868cadae4c82a018e361e2b2091de103cd820aaacb0d6cfa49bd2cd83978885\n+$(package)_sha256_hash=d9dc32efba7e74f788fcc4f212a43216fc37cf5f23f4c2339664d473353aedf6\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-static"
      },
      {
        "sha": "9976db43c28122df8eeef56263f4c35a28af3ba4",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,14 +1,15 @@\n package=miniupnpc\n-$(package)_version=2.0.20170509\n+$(package)_version=2.0.20180203\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=d3c368627f5cdfb66d3ebd64ca39ba54d6ff14a61966dbecb8dd296b7039f16a\n+$(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n $(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n+$(package)_build_env+=CFLAGS=-D_DARWIN_C_SOURCE\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "8f4eb225387d01aa7dabd73e1922f6d0ebf3960d",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.3.4\n+$(package)_version=3.4.1\n $(package)_download_path=https://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fa9d7f38367431bc86b19ad107d709ca7ecf1574fdacca01698bdf0a47cd8567\n+$(package)_sha256_hash=ca5a01fb4868cdb5176c77b8b4a390be7929a6064be80741217e0686f03f8389\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "5e698126d4271923a715628ca458a1f519cb79df",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -7,18 +7,18 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](http://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| ccache | [3.3.4](https://ccache.samba.org/download.html) |  | No |  |  |\n+| ccache | [3.3.6](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n-| Expat | [2.2.1](https://libexpat.github.io/) |  | No | Yes |  |\n+| Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n | GCC |  | [4.8+](https://gcc.gnu.org/) |  |  |  |\n | HarfBuzz-NG |  |  |  |  |  |\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L75) |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L74) |\n-| MiniUPnPc | [2.0.20170509](http://miniupnp.free.fr/files) |  | No |  |  |\n+| MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L76) |\n | protobuf | [2.6.3](https://github.com/google/protobuf/releases) |  | No |  |  |"
      }
    ]
  },
  {
    "sha": "1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTk4ZjMyMzA0Y2Q1NWI4M2VjYzYyM2VlMGY5ZTMwYjRlMDg3Yjdk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-04T17:49:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-16T17:09:26Z"
      },
      "message": "[rpc] Move DescribeAddressVisitor to rpc/util",
      "tree": {
        "sha": "ec538026ed4ed137e19b75ea104f8ba3d71ab8f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec538026ed4ed137e19b75ea104f8ba3d71ab8f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39633ecd5c18ca29cb551f701e57e8cec3e609da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39633ecd5c18ca29cb551f701e57e8cec3e609da"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 83,
      "deletions": 54
    },
    "files": [
      {
        "sha": "aa1647a63a74df644e6e4efb43fc0e33cc1c461e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -215,6 +215,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/rawtransaction.cpp \\\n   rpc/safemode.cpp \\\n   rpc/server.cpp \\\n+  rpc/util.cpp \\\n   script/sigcache.cpp \\\n   script/ismine.cpp \\\n   timedata.cpp \\"
      },
      {
        "sha": "f7d62a6326937a4aa859bf39890e49c5ba333d69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 54,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -33,57 +33,6 @@\n \n #include <univalue.h>\n \n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    explicit DescribeAddressVisitor() {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n-};\n-\n #ifdef ENABLE_WALLET\n class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n {\n@@ -182,6 +131,15 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n \n     UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n };\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n #endif\n \n UniValue validateaddress(const JSONRPCRequest& request)\n@@ -254,10 +212,8 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n         ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n         ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+        UniValue detail = DescribeWalletAddress(pwallet, dest);\n         ret.pushKVs(detail);\n-        UniValue wallet_detail = boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest);\n-        ret.pushKVs(wallet_detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n             ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }\n@@ -284,6 +240,8 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 }\n             }\n         }\n+#else\n+        ret.pushKvs = DescribeAddress(dest);\n #endif\n     }\n     return ret;"
      },
      {
        "sha": "cdcb68d15f94a9c13f14adb799c3e0dc28581591",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination& dest) const\n+    {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n+        return obj;\n+    }\n+};\n+\n+UniValue DescribeAddress(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(DescribeAddressVisitor(), dest);\n+}"
      },
      {
        "sha": "5380d45a8356288ae66bdd2623406cdbda3cdbb1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -5,6 +5,13 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <univalue.h>\n+#include <utilstrencodings.h>\n+\n+#include <boost/variant/static_visitor.hpp>\n+\n #include <string>\n #include <vector>\n \n@@ -16,4 +23,6 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+UniValue DescribeAddress(const CTxDestination& dest);\n+\n #endif // BITCOIN_RPC_UTIL_H"
      }
    ]
  },
  {
    "sha": "b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOThiZmM1ZWQwZGExZWZlZjFlZmY1NTJhN2UxYTdjZTljYWYxMzBm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-13T01:53:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-16T17:09:32Z"
      },
      "message": "Create getaddressinfo RPC and deprecate parts of validateaddress\n\nMoves the parts of validateaddress which require the wallet into getaddressinfo\nwhich is part of the wallet RPCs. Mark those parts of validateaddress which\nrequire the wallet as deprecated.\n\nValidateaddress will  call getaddressinfo\nfor the data that both share for right now.\n\nMoves IsMine functions to libbitcoin_common and then links libbitcoin_wallet\nbefore libbitcoin_common in order to prevent linker errors since IsMine is no\nlonger used in libbitcoin_server.",
      "tree": {
        "sha": "6124ecff8ff0e24d707d85e790c591fac92ee2b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6124ecff8ff0e24d707d85e790c591fac92ee2b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1598f32304cd55b83ecc623ee0f9e30b4e087b7d"
      }
    ],
    "stats": {
      "total": 447,
      "additions": 253,
      "deletions": 194
    },
    "files": [
      {
        "sha": "9ca2b2c82a94a572612af6b5fccff8c339268888",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -135,10 +135,10 @@ BITCOIN_CORE_H = \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\\n+  script/ismine.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  script/ismine.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -215,9 +215,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/rawtransaction.cpp \\\n   rpc/safemode.cpp \\\n   rpc/server.cpp \\\n-  rpc/util.cpp \\\n   script/sigcache.cpp \\\n-  script/ismine.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\\n@@ -334,6 +332,7 @@ libbitcoin_common_a_SOURCES = \\\n   policy/feerate.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n+  script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   warnings.cpp \\\n@@ -390,10 +389,10 @@ endif\n \n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "13c27299f8980331ff6089ab124fec664dc32625",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n@@ -51,7 +52,6 @@ endif\n \n if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n-bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)\n endif\n \n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "61bd59e9edab595ac14632cb63bd370d0d5904fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 181,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -33,216 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj(UniValue::VOBJ);\n-            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), embedded);\n-            subobj.pushKVs(detail);\n-            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n-            subobj.pushKVs(wallet_detail);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n-            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.pushKV(\"pubkey\", HexStr(pubkey));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n-};\n-\n-UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n-{\n-    UniValue ret(UniValue::VOBJ);\n-    UniValue detail = DescribeAddress(dest);\n-    ret.pushKVs(detail);\n-    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n-    return ret;\n-}\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.pushKV(\"address\", currentAddress);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = DescribeWalletAddress(pwallet, dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n-        }\n-        if (pwallet) {\n-            const CKeyMetadata* meta = nullptr;\n-            CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n-            if (!key_id.IsNull()) {\n-                auto it = pwallet->mapKeyMetadata.find(key_id);\n-                if (it != pwallet->mapKeyMetadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (!meta) {\n-                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-                if (it != pwallet->m_script_metadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (meta) {\n-                ret.pushKV(\"timestamp\", meta->nCreateTime);\n-                if (!meta->hdKeypath.empty()) {\n-                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n-                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n+            ret.pushKVs(getaddressinfo(request));\n         }\n-#else\n-        ret.pushKvs = DescribeAddress(dest);\n #endif\n+        if (ret[\"address\"].isNull()) {\n+            std::string currentAddress = EncodeDestination(dest);\n+            ret.pushKV(\"address\", currentAddress);\n+\n+            CScript scriptPubKey = GetScriptForDestination(dest);\n+            ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));;\n+\n+            UniValue detail = DescribeAddress(dest);\n+            ret.pushKVs(detail);\n+        }\n     }\n     return ret;\n }"
      },
      {
        "sha": "b504b842741b4f8110ac46a4f1d97f41a4848c57",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 0,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -25,6 +25,7 @@\n #include <utilmoneystr.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -3514,6 +3515,209 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"    [\\n\"\n+            \"      \\\"pubkey\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    isminetype mine = IsMine(*pwallet, dest);\n+    ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+    ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+    UniValue detail = DescribeWalletAddress(pwallet, dest);\n+    ret.pushKVs(detail);\n+    if (pwallet->mapAddressBook.count(dest)) {\n+        ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n+    }\n+    const CKeyMetadata* meta = nullptr;\n+    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+    if (!key_id.IsNull()) {\n+        auto it = pwallet->mapKeyMetadata.find(key_id);\n+        if (it != pwallet->mapKeyMetadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (!meta) {\n+        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+        if (it != pwallet->m_script_metadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (meta) {\n+        ret.pushKV(\"timestamp\", meta->nCreateTime);\n+        if (!meta->hdKeypath.empty()) {\n+            ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+            ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n+        }\n+    }\n+    return ret;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3543,6 +3747,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n     { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n     { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n     { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },"
      },
      {
        "sha": "43cf0416650c1b0408eda63ee829ffdb226b955b",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -10,6 +10,7 @@\n class CRPCTable;\n class CWallet;\n class JSONRPCRequest;\n+class UniValue;\n \n void RegisterWalletRPCCommands(CRPCTable &t);\n \n@@ -25,4 +26,6 @@ std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n+UniValue getaddressinfo(const JSONRPCRequest& request);\n+\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "b94b9d8fae2c4ab6af0804488e91f30c106b56c5",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -9,7 +9,7 @@ class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], []]\n+        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\"]]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -18,10 +18,13 @@ def run_test(self):\n         # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n         # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n         # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n-        #\n-        # There are currently no deprecated RPC methods in master, so this\n-        # test is currently empty.\n-        pass\n+\n+        self.log.info(\"Test validateaddress deprecation\")\n+        SOME_ADDRESS = \"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\" # This is just some random address to pass as a parameter to validateaddress\n+        dep_validate_address = self.nodes[0].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" not in dep_validate_address\n+        not_dep_val = self.nodes[1].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" in not_dep_val\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      },
      {
        "sha": "5d2428e6ef259a1b705f269348905f17facb235f",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -93,8 +93,8 @@ def get_balances(self, confirmed=True):\n \n     def test_address(self, node, address, multisig, typ):\n         \"\"\"Run sanity checks on an address.\"\"\"\n-        info = self.nodes[node].validateaddress(address)\n-        assert(info['isvalid'])\n+        info = self.nodes[node].getaddressinfo(address)\n+        assert(self.nodes[node].validateaddress(address)['isvalid'])\n         if not multisig and typ == 'legacy':\n             # P2PKH\n             assert(not info['isscript'])"
      },
      {
        "sha": "d041b4c1958c5fa2f121afd7181f772c9f9277ce",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         assert_equal(txout['value'], 50)\n         txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=True)\n         assert_equal(txout['value'], 50)\n-        \n+\n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Locked memory should use at least 32 bytes to sign each transaction\n         self.log.info(\"test getmemoryinfo\")\n@@ -442,5 +442,14 @@ def run_test(self):\n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))\n \n+        # Test getaddressinfo. Note that these addresses are taken from disablewallet.py\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].getaddressinfo, \"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy\")\n+        address_info = self.nodes[0].getaddressinfo(\"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info['address'], \"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info[\"scriptPubKey\"], \"76a9144e3854046c7bd1594ac904e4793b6a45b36dea0988ac\")\n+        assert not address_info[\"ismine\"]\n+        assert not address_info[\"iswatchonly\"]\n+        assert not address_info[\"isscript\"]\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "b22cce014852b082d80f1cc35f902b375cba0318",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjJjY2UwMTQ4NTJiMDgyZDgwZjFjYzM1ZjkwMmIzNzVjYmEwMzE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-09T16:12:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-16T17:09:36Z"
      },
      "message": "scripted-diff: validateaddress to getaddressinfo in tests\n\nChange all instances of validateaddress to getaddressinfo since it seems that\nno test actually uses validateaddress for actually validating addresses.\n\n-BEGIN VERIFY SCRIPT-\nfind ./test/functional -path '*py' -not -path ./test/functional/wallet_disable.py -not -path ./test/functional/rpc_deprecated.py -not -path ./test/functional/wallet_address_types.py -exec sed -i'' -e 's/validateaddress/getaddressinfo/g' {} \\;\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "d0b165fa758a6b55077d1ff1ddca771efe11e4ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0b165fa758a6b55077d1ff1ddca771efe11e4ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b22cce014852b082d80f1cc35f902b375cba0318",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cce014852b082d80f1cc35f902b375cba0318",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b22cce014852b082d80f1cc35f902b375cba0318",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cce014852b082d80f1cc35f902b375cba0318/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 104,
      "deletions": 104
    },
    "files": [
      {
        "sha": "9093cc04e8638ed06151ec8d24a5458c035cdd61",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -96,7 +96,7 @@ def run_test(self):\n         wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n-            self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n+            self.pubkey.append(self.nodes[i].getaddressinfo(newaddress)[\"pubkey\"])\n             multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n             p2sh_addr = self.nodes[i].addwitnessaddress(newaddress)\n             bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n@@ -274,8 +274,8 @@ def run_test(self):\n         uncompressed_spendable_address = [\"mvozP4UwyGD2mGZU4D2eMvMLPB9WkMmMQu\"]\n         self.nodes[0].importprivkey(\"cNC8eQ5dg3mFAVePDX4ddmPYpPbw41r9bm2jd1nLJT77e6RrzTRR\")\n         compressed_spendable_address = [\"mmWQubrDomqpgSYekvsU7HWEVjLFHAakLe\"]\n-        assert ((self.nodes[0].validateaddress(uncompressed_spendable_address[0])['iscompressed'] == False))\n-        assert ((self.nodes[0].validateaddress(compressed_spendable_address[0])['iscompressed'] == True))\n+        assert ((self.nodes[0].getaddressinfo(uncompressed_spendable_address[0])['iscompressed'] == False))\n+        assert ((self.nodes[0].getaddressinfo(compressed_spendable_address[0])['iscompressed'] == True))\n \n         self.nodes[0].importpubkey(pubkeys[0])\n         compressed_solvable_address = [key_to_p2pkh(pubkeys[0])]\n@@ -308,7 +308,7 @@ def run_test(self):\n         solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with compressed keys should always be spendable\n@@ -325,7 +325,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with uncompressed keys should always be spendable\n@@ -342,7 +342,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -355,7 +355,7 @@ def run_test(self):\n                 solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n@@ -395,7 +395,7 @@ def run_test(self):\n \n         importlist = []\n         for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n                 importlist.append(bytes_to_hex_str(bare))\n@@ -473,7 +473,7 @@ def run_test(self):\n         premature_witaddress = []\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after addwitnessaddress\n@@ -485,7 +485,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n@@ -496,7 +496,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # P2WSH multisig without private key are seen after addwitnessaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -519,7 +519,7 @@ def run_test(self):\n             assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n-        v = self.nodes[0].validateaddress(compressed_solvable_address[1])\n+        v = self.nodes[0].getaddressinfo(compressed_solvable_address[1])\n         self.nodes[0].importaddress(v['hex'],\"\",False,True)\n         for i in compressed_spendable_address + compressed_solvable_address + premature_witaddress:\n             witaddress = self.nodes[0].addwitnessaddress(i)"
      },
      {
        "sha": "de436e3ea1055c424151e821f6d0ea10b08900cd",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -53,7 +53,7 @@ def run_test(self):\n         assert_equal(rawmatch[\"changepos\"], -1)\n \n         watchonly_address = self.nodes[0].getnewaddress()\n-        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_pubkey = self.nodes[0].getaddressinfo(watchonly_address)[\"pubkey\"]\n         watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n@@ -371,8 +371,8 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n \n@@ -401,11 +401,11 @@ def run_test(self):\n         addr4 = self.nodes[1].getnewaddress()\n         addr5 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n-        addr3Obj = self.nodes[1].validateaddress(addr3)\n-        addr4Obj = self.nodes[1].validateaddress(addr4)\n-        addr5Obj = self.nodes[1].validateaddress(addr5)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[1].getaddressinfo(addr3)\n+        addr4Obj = self.nodes[1].getaddressinfo(addr4)\n+        addr5Obj = self.nodes[1].getaddressinfo(addr5)\n \n         mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])['address']\n \n@@ -431,8 +431,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n "
      },
      {
        "sha": "e4b8b2ec2bf38e8452754728b059aba6715c8b56",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -81,7 +81,7 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n-        pubkey = self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['pubkey']\n+        pubkey = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n         multisig = self.nodes[1].createmultisig(1, [pubkey])\n         self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n         txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)"
      },
      {
        "sha": "2cb902e8f00014aa088fdf63c8eb0a74707d7589",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -146,8 +146,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         # Tests for createmultisig and addmultisigaddress\n         assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n@@ -173,9 +173,9 @@ def run_test(self):\n         addr2 = self.nodes[2].getnewaddress()\n         addr3 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n-        addr3Obj = self.nodes[2].validateaddress(addr3)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[2].getaddressinfo(addr3)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n \n@@ -219,12 +219,12 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+        mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n \n         txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n         decTx = self.nodes[0].gettransaction(txId)"
      },
      {
        "sha": "e1e01570cbf6f29b2c0550d7f3d9acbc1d396b1b",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -149,7 +149,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n     else:\n         addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n     if not encode_p2sh:\n-        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+        assert_equal(node.getaddressinfo(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n     return node.createrawtransaction([utxo], {addr: amount})\n \n # Create a transaction spending a given utxo to a segwit output corresponding"
      },
      {
        "sha": "b644f3495c6fe739aba1420f9ac6f94d943937c8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -317,7 +317,7 @@ def run_test(self):\n         self.nodes[1].importaddress(address_to_import)\n \n         # 3. Validate that the imported address is watch-only on node1\n-        assert(self.nodes[1].validateaddress(address_to_import)[\"iswatchonly\"])\n+        assert(self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"])\n \n         # 4. Check that the unspents after import are not spendable\n         assert_array_result(self.nodes[1].listunspent(),"
      },
      {
        "sha": "4db217d886e0f760be821be852db5be043c898bd",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -104,7 +104,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n     # which spends it, and make sure bumpfee can be called on it.\n \n     segwit_in = next(u for u in rbf_node.listunspent() if u[\"amount\"] == Decimal(\"0.001\"))\n-    segwit_out = rbf_node.validateaddress(rbf_node.getnewaddress())\n+    segwit_out = rbf_node.getaddressinfo(rbf_node.getnewaddress())\n     rbf_node.addwitnessaddress(segwit_out[\"address\"])\n     segwitid = send_to_witness(\n         use_p2wsh=False,"
      },
      {
        "sha": "e171a2600266092560e0d122fd40eacb4089c166",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -97,7 +97,7 @@ def run_test (self):\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n-            vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n+            vaddr= self.nodes[0].getaddressinfo(addr) #required to get hd keypath\n             addrs.append(vaddr)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n@@ -143,13 +143,13 @@ def run_test (self):\n         self.start_node(0, ['-wallet=w2'])\n \n         # Make sure the address is not IsMine before import\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == False)\n \n         self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n         # Now check IsMine is true\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == True)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "91f77dd5ba5f146863eac194effa7b29fa6d5d43",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -33,7 +33,7 @@ def run_test (self):\n \n         # create an internal key\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n \n         # Import a non-HD private key in the HD wallet\n@@ -51,7 +51,7 @@ def run_test (self):\n         num_hd_adds = 300\n         for i in range(num_hd_adds):\n             hd_add = self.nodes[1].getnewaddress()\n-            hd_info = self.nodes[1].validateaddress(hd_add)\n+            hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n@@ -61,7 +61,7 @@ def run_test (self):\n \n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n \n         self.sync_all()\n@@ -80,7 +80,7 @@ def run_test (self):\n         hd_add_2 = None\n         for _ in range(num_hd_adds):\n             hd_add_2 = self.nodes[1].getnewaddress()\n-            hd_info_2 = self.nodes[1].validateaddress(hd_add_2)\n+            hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n@@ -114,7 +114,7 @@ def run_test (self):\n         keypath = \"\"\n         for out in outs:\n             if out['value'] != 1:\n-                keypath = self.nodes[1].validateaddress(out['scriptPubKey']['addresses'][0])['hdkeypath']\n+                keypath = self.nodes[1].getaddressinfo(out['scriptPubKey']['addresses'][0])['hdkeypath']\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n "
      },
      {
        "sha": "3288ce4b60e6cac8ce0a8e6ef566921dae37089e",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -134,7 +134,7 @@ def run_test(self):\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.label = \"label {} {}\".format(i, variant)\n-            variant.address = self.nodes[1].validateaddress(self.nodes[1].getnewaddress(variant.label))\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      },
      {
        "sha": "56ebc2622ab7729eae5f335d7d1d0b58182e98c2",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 51,
        "deletions": 51,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -21,7 +21,7 @@ def run_test (self):\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n-        node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n \n         #Check only one address\n         assert_equal(node0_address1['ismine'], True)\n@@ -30,7 +30,7 @@ def run_test (self):\n         assert_equal(self.nodes[1].getblockcount(),1)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(node0_address1['address'])\n+        address_info = self.nodes[1].getaddressinfo(node0_address1['address'])\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -39,15 +39,15 @@ def run_test (self):\n \n         # Bitcoin Address\n         self.log.info(\"Should import an address\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -67,37 +67,37 @@ def run_test (self):\n \n         # ScriptPubKey + internal\n         self.log.info(\"Should import a scriptPubKey with internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n         self.log.info(\"Should import an address with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -106,15 +106,15 @@ def run_test (self):\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -123,14 +123,14 @@ def run_test (self):\n         }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -140,14 +140,14 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         self.log.info(\"Should import an address with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -156,7 +156,7 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -175,7 +175,7 @@ def run_test (self):\n \n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -187,29 +187,29 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -218,16 +218,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -242,7 +242,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -252,9 +252,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -270,7 +270,7 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n@@ -279,9 +279,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script + Private Keys + !Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -298,17 +298,17 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], True)\n \n         # P2SH + Redeem script + Private Keys + Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -332,8 +332,8 @@ def run_test (self):\n \n         # Address + Public key + !Internal + Wrong pubkey\n         self.log.info(\"Should not import an address with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -344,16 +344,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -364,16 +364,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n         self.log.info(\"Should not import an address with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -384,16 +384,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -403,7 +403,7 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n@@ -419,7 +419,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -429,7 +429,7 @@ def run_test (self):\n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n         self.start_nodes()\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], watchonly_timestamp)"
      },
      {
        "sha": "4d349db23f9da1a42d2dec025e6b6086e4a65928",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -26,7 +26,7 @@ def run_test(self):\n         address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n \n         #Check only one address\n-        address_info = self.nodes[0].validateaddress(address1)\n+        address_info = self.nodes[0].getaddressinfo(address1)\n         assert_equal(address_info['ismine'], True)\n \n         self.sync_all()\n@@ -35,15 +35,15 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(),101)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -86,13 +86,13 @@ def run_test(self):\n         assert_equal(balance3, Decimal('0.075'))\n \n         #Addresses Test - after import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], True)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], True)\n "
      },
      {
        "sha": "9825e4d89448fb1e6ab21a1d3438a475839bbb23",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -14,7 +14,7 @@ def set_test_params(self):\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()\n-        addr_before_encrypting_data = nodes[0].validateaddress(addr_before_encrypting)\n+        addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n@@ -24,7 +24,7 @@ def run_test(self):\n         self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n-        addr_data = nodes[0].validateaddress(addr)\n+        addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])"
      },
      {
        "sha": "e7b76dfaf2ee3fdd10bdf8224778bf8efd6568f3",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -68,7 +68,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n \n         # Check that we have marked all keys up to the used keypool key as used\n-        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n+        assert_equal(self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n \n if __name__ == '__main__':\n     KeypoolRestoreTest().main()"
      }
    ]
  },
  {
    "sha": "e710387ca95f7fa8ba1aa6f5698843391b87c772",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzEwMzg3Y2E5NWY3ZmE4YmExYWE2ZjU2OTg4NDMzOTFiODdjNzcy",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-16T07:26:35Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-16T19:06:32Z"
      },
      "message": "test: Fix bip68 sequence test to reflect updated rpc error message\n\nThe message changed in #12356",
      "tree": {
        "sha": "cb0766c0c2dc3325998ccb74dc1cf6d74f0d18fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb0766c0c2dc3325998ccb74dc1cf6d74f0d18fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJahyu/AAoJEG7l83hfeLNFfCYIAKbRwzTySoYJzhWlXGXHDE1v\nMbZcMocfN6uC0om/KOMzRt/r4VvlOBoLkTiQgiEgu6Cr1KytogIQlPqsKXwzgc63\n1nHA6AC8An5KYZHbBJXOc6AHjjtQJdq4F1FwTpv4u0OPQl8HuJrPSWvwJ139yAmT\nUSFwHIa3z4m9VXdhzksZJc8e9evYdu8L2vzFAKnnKmSt9PjCH9jNl6FbW6t0+9ng\nF7L1aYPtM/6jbHYx/6n48U98rWJXhW/9iG5MKnSR7R0letfI7ANKFGQb+L7ldMs1\nXoCUWk0poVgC/VKXug9WNQ2JhzL/YMO0fqYAq+OYZ90ZTvVVHTm3os3xo5BMTC0=\n=oiNQ\n-----END PGP SIGNATURE-----",
        "payload": "tree cb0766c0c2dc3325998ccb74dc1cf6d74f0d18fe\nparent 4a62ddd01873d18dbca96c81d756be1020249b45\nauthor Ben Woosley <ben.woosley@gmail.com> 1518765995 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518807992 -0800\n\ntest: Fix bip68 sequence test to reflect updated rpc error message\n\nThe message changed in #12356\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e710387ca95f7fa8ba1aa6f5698843391b87c772",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a62ddd01873d18dbca96c81d756be1020249b45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a62ddd01873d18dbca96c81d756be1020249b45"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be01a1ca53d7183b850353a3faf3b5802ce54905",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e710387ca95f7fa8ba1aa6f5698843391b87c772/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e710387ca95f7fa8ba1aa6f5698843391b87c772/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=e710387ca95f7fa8ba1aa6f5698843391b87c772",
        "patch": "@@ -14,7 +14,7 @@\n SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n \n # RPC error for non-BIP68 final transactions\n-NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+NOT_FINAL_ERROR = \"non-BIP68-final (code 64)\"\n \n class BIP68Test(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "df47afb60070defaaee519ee39e82bd3d1c73491",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjQ3YWZiNjAwNzBkZWZhYWVlNTE5ZWUzOWU4MmJkM2QxYzczNDkx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-16T20:59:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-16T20:59:34Z"
      },
      "message": "Revert \"[tests] bind functional test nodes to 127.0.0.1\"\n\nThis reverts commit 65682da7e57af544abb46a7d8a7f4fdca0c73f56.",
      "tree": {
        "sha": "dbcfc136d8d38e527961ed949f49417d280eced0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbcfc136d8d38e527961ed949f49417d280eced0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df47afb60070defaaee519ee39e82bd3d1c73491",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47afb60070defaaee519ee39e82bd3d1c73491",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df47afb60070defaaee519ee39e82bd3d1c73491",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47afb60070defaaee519ee39e82bd3d1c73491/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59e032b43cea835cf06f83a5a72685dc02033c48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59e032b43cea835cf06f83a5a72685dc02033c48"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7fdc17133225d1affd1967c96db08bb3c6d57a55",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df47afb60070defaaee519ee39e82bd3d1c73491/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df47afb60070defaaee519ee39e82bd3d1c73491/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=df47afb60070defaaee519ee39e82bd3d1c73491",
        "patch": "@@ -292,7 +292,6 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n-        f.write(\"bind=127.0.0.1\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2M1OWRjNTAyZjI5Y2YxZDc2MjkwNTU2YzIxZTM2NjE0NWUzYjJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:09:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:09:37Z"
      },
      "message": "Merge #12464: Revert \"[tests] bind functional test nodes to 127.0.0.1\"\n\ndf47afb600 Revert \"[tests] bind functional test nodes to 127.0.0.1\" (John Newbery)\n\nPull request description:\n\n  #12200 was merged without test, and breaks `rpc_bind.py`. (Tested locally by @MarcoFalke and me).\n\n  This PR backs out the change.\n\n  Fixes #12462\n\nTree-SHA512: e92901a0ce05af86486d4f74457953a5502689b03bb2ad9a94f6fd1664385fdda8aa351e601e27ee6580227ea9adb4d7d7fbdc381e69af6b998d9c6f6d358751",
      "tree": {
        "sha": "dbcfc136d8d38e527961ed949f49417d280eced0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbcfc136d8d38e527961ed949f49417d280eced0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJah0iRAAoJENLqSFDnUosl5tkQAJhRLL9h1iUll8PYpWVnv53G\nP91fElv3fXmH2Zo4orBjtSYZ+jZxkDRVxEnnvcr4o1WTxti6OY6GKXwEeH1pNZMQ\nC9Y6XaCHX2wMjSZUZutpwOt8uSR73SAZ6h6mwD1Yk+lxNj8Kt6vvzvTnVAu9AfCc\n9Yi8xunaEKmBvNuz8kqqMLIjgkTzZRA5lU+eyVmNLqHSMSr5EjtB98H9pVXD0iB7\nFgJ22CR2NGW9KKg5sf3L84NoIYI0ZK4NxbztgEZE1cSAnNDBLtnnuW6j2ORHC7l2\npWThiVf1E8lEUShcp3UL7ohW2f7Geu+nl7lpjiHutfSczXwMEirncZd5+RDov1+/\nNyRZJFaPWhHcD38JlL4JOTjQtAKa7mFgh/2MFykrm611o36IVLFkm0BjLhzfqJ3x\nwxjApgJ+wVG5YdUUPw3XZcbfoQEyalCrZ/UR0tede6Zw+XDkfedt/KaFgx7fsCIu\nD8kq9tJbutpv7GikpqLoLyh0/Ln9I54TrNVLWPvhqCFAA0En/G6Lxx9tHFiDseX5\nkaHd2TuQdTVClkAwsYNIQ6suYiHBKX02J9MGpRBPd8V/iQLd/U9+v8SddcsVUoj5\nX9wp3qZJl7pazAwRIM0Rbo4u60+VdnRCfRTj5pkdWoo8OayML7NfyFd/F3i5XEhp\nBLDo0LB0TjS0hdXWKbV7\n=eRfl\n-----END PGP SIGNATURE-----",
        "payload": "tree dbcfc136d8d38e527961ed949f49417d280eced0\nparent 59e032b43cea835cf06f83a5a72685dc02033c48\nparent df47afb60070defaaee519ee39e82bd3d1c73491\nauthor MarcoFalke <falke.marco@gmail.com> 1518815374 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518815377 -0500\n\nMerge #12464: Revert \"[tests] bind functional test nodes to 127.0.0.1\"\n\ndf47afb600 Revert \"[tests] bind functional test nodes to 127.0.0.1\" (John Newbery)\n\nPull request description:\n\n  #12200 was merged without test, and breaks `rpc_bind.py`. (Tested locally by @MarcoFalke and me).\n\n  This PR backs out the change.\n\n  Fixes #12462\n\nTree-SHA512: e92901a0ce05af86486d4f74457953a5502689b03bb2ad9a94f6fd1664385fdda8aa351e601e27ee6580227ea9adb4d7d7fbdc381e69af6b998d9c6f6d358751\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59e032b43cea835cf06f83a5a72685dc02033c48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59e032b43cea835cf06f83a5a72685dc02033c48"
      },
      {
        "sha": "df47afb60070defaaee519ee39e82bd3d1c73491",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47afb60070defaaee519ee39e82bd3d1c73491",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df47afb60070defaaee519ee39e82bd3d1c73491"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7fdc17133225d1affd1967c96db08bb3c6d57a55",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c59dc502f29cf1d76290556c21e366145e3b2e/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c59dc502f29cf1d76290556c21e366145e3b2e/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=27c59dc502f29cf1d76290556c21e366145e3b2e",
        "patch": "@@ -292,7 +292,6 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n-        f.write(\"bind=127.0.0.1\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "23481fa50301201ef5a60675ef899aa6ce94ca03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzQ4MWZhNTAzMDEyMDFlZjVhNjA2NzVlZjg5OWFhNmNlOTRjYTAz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:20:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:20:23Z"
      },
      "message": "Merge #12455: Fix bip68 sequence test to reflect updated rpc error message\n\ne710387ca9 test: Fix bip68 sequence test to reflect updated rpc error message (Ben Woosley)\n\nPull request description:\n\n  The message changed in #12356, but this test is in the extended test suite, so it didn't fail on CI.\n\nTree-SHA512: ce800e2636ab7bbba7876aa533e1684e75c37a7d2a119f9c4602fd89ac9215e2e28710a1f27feb642b6737ed858da049ebc52fdd476ff4637e3ac3bb1d8399ce",
      "tree": {
        "sha": "8c6e0652b161642a042ede1802114e30ce29668d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c6e0652b161642a042ede1802114e30ce29668d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJah0sXAAoJENLqSFDnUoslrMYQAKDxWA9Nc4TakRdBROGDzUDK\n0QYszt0vCwxwYs0jxeVWnAqvt6KdQHI+Y3p/RRs+T0HMGeOLki4zR7B+Tr0nh7Nx\ny7Cv8kmd6NvYWkpwpQYneve0a0mzy62KIB+qpzWxll8RT7GHNIi5XnbrgDgHYfIS\nKTbzvR/aPBzxUeHxwQQUZAYCWil/Azxtz9Vls2j/x5Pv5bEjSOLMPZTNdoYA1r6f\nbme1yBabVtzWRpuoREPGzomwi1oXR8DM0YbIKgeqM868ELmhoOwIvUKLfj33/1gZ\n0Bv169qk/8YCXpgU1OMRzpegtjY1fJuMnBgz6A1JedhOHxVCXeYKdOZ4UivSe36+\nhnoDBWD34auqjlZ4AHxTAQpuficenh05UAOkKTgKX/uOrwjOMlJFdxKTHQOwFV/Y\n3AxmHmMQdiqcGpisKH5F0WrXSdC3p+Qd6QkzTZO4H0R4vF41SJwjqwENMbYoTuMB\nbBj/VWk+EBsBlhXHIWm5COQoMZUpFgWhaURTanz7QCfgElPk6ion8mtqBokUmoF5\nmncHOTId+aHHT+ij4DtUnj3M4mVB0q9vOvoDD6VNvO17KzBCUgHSioPIITwXta9x\noRsB3We8A3lbwLTaZVRWjJ+8gcXtLzhC3jlI1wy8rqEbRM1UD66jjgoBYzXrtf+t\nujGW6NvAHMi/6V41fG0/\n=ShKz\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c6e0652b161642a042ede1802114e30ce29668d\nparent 27c59dc502f29cf1d76290556c21e366145e3b2e\nparent e710387ca95f7fa8ba1aa6f5698843391b87c772\nauthor MarcoFalke <falke.marco@gmail.com> 1518816021 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518816023 -0500\n\nMerge #12455: Fix bip68 sequence test to reflect updated rpc error message\n\ne710387ca9 test: Fix bip68 sequence test to reflect updated rpc error message (Ben Woosley)\n\nPull request description:\n\n  The message changed in #12356, but this test is in the extended test suite, so it didn't fail on CI.\n\nTree-SHA512: ce800e2636ab7bbba7876aa533e1684e75c37a7d2a119f9c4602fd89ac9215e2e28710a1f27feb642b6737ed858da049ebc52fdd476ff4637e3ac3bb1d8399ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23481fa50301201ef5a60675ef899aa6ce94ca03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e"
      },
      {
        "sha": "e710387ca95f7fa8ba1aa6f5698843391b87c772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e710387ca95f7fa8ba1aa6f5698843391b87c772"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be01a1ca53d7183b850353a3faf3b5802ce54905",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23481fa50301201ef5a60675ef899aa6ce94ca03/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23481fa50301201ef5a60675ef899aa6ce94ca03/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=23481fa50301201ef5a60675ef899aa6ce94ca03",
        "patch": "@@ -14,7 +14,7 @@\n SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n \n # RPC error for non-BIP68 final transactions\n-NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+NOT_FINAL_ERROR = \"non-BIP68-final (code 64)\"\n \n class BIP68Test(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "8b661f971aec9dfdab44c61c3431bb5233d00ce0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjY2MWY5NzFhZWM5ZGZkYWI0NGM2MWMzNDMxYmI1MjMzZDAwY2Uw",
    "commit": {
      "author": {
        "name": "Josh Hartshorn",
        "email": "joshhartshorn1021@gmail.com",
        "date": "2018-02-17T06:01:40Z"
      },
      "committer": {
        "name": "Josh Hartshorn",
        "email": "joshhartshorn1021@gmail.com",
        "date": "2018-02-17T06:19:42Z"
      },
      "message": "fixes #12465 added missing terminating newline character in log message",
      "tree": {
        "sha": "f6d1ab3d4316927c4e9e7c23ad8d45e0a97b55f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6d1ab3d4316927c4e9e7c23ad8d45e0a97b55f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0/comments",
    "author": {
      "login": "Aesti",
      "id": 1983634,
      "node_id": "MDQ6VXNlcjE5ODM2MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1983634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aesti",
      "html_url": "https://github.com/Aesti",
      "followers_url": "https://api.github.com/users/Aesti/followers",
      "following_url": "https://api.github.com/users/Aesti/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aesti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aesti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aesti/subscriptions",
      "organizations_url": "https://api.github.com/users/Aesti/orgs",
      "repos_url": "https://api.github.com/users/Aesti/repos",
      "events_url": "https://api.github.com/users/Aesti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aesti/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Aesti",
      "id": 1983634,
      "node_id": "MDQ6VXNlcjE5ODM2MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1983634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aesti",
      "html_url": "https://github.com/Aesti",
      "followers_url": "https://api.github.com/users/Aesti/followers",
      "following_url": "https://api.github.com/users/Aesti/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aesti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aesti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aesti/subscriptions",
      "organizations_url": "https://api.github.com/users/Aesti/orgs",
      "repos_url": "https://api.github.com/users/Aesti/repos",
      "events_url": "https://api.github.com/users/Aesti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aesti/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23481fa50301201ef5a60675ef899aa6ce94ca03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23481fa50301201ef5a60675ef899aa6ce94ca03"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5c5d1ee792c8d8a11b8fe129ebb8b4e778e5f4d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b661f971aec9dfdab44c61c3431bb5233d00ce0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b661f971aec9dfdab44c61c3431bb5233d00ce0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8b661f971aec9dfdab44c61c3431bb5233d00ce0",
        "patch": "@@ -1526,7 +1526,7 @@ bool AppInitMain()\n                 if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n+                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                             MIN_BLOCKS_TO_KEEP);\n                     }\n "
      }
    ]
  },
  {
    "sha": "daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWE4NGIzMzU0MGFhM2JjYjc0YWE4YjBjZjA4MzYyZDY4OGJiNGNl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T07:49:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T07:49:24Z"
      },
      "message": "Merge #12029: Build: Add a makefile target for Doxygen documentation\n\na777244e4 Build: Add a makefile target for Doxygen documentation (Andrea Comand)\n\nPull request description:\n\n  You can now build the doxygen documentation with `make docs` and clean it with `make clean-docs`.\n\n  Fixes: #11949\n\nTree-SHA512: f2361ec7f771227367dd04bba1a444b44e59f13901463a678a5f2f579a10a56d67db2e29552e754e312a1c472a31593b6af189cbaac5cd351a428c57baf5ace7",
      "tree": {
        "sha": "78e80b894eab2329d40de40d420598365c95cf8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78e80b894eab2329d40de40d420598365c95cf8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqH3oQACgkQHrd2uwPH\nki0p5xAAxgtoUVbIA7wJINE47BKiTVpKI+i+dnIXemvwnijcod9hgSBWlrjX5J5X\nux9yuLEH4ObP0YGfJxgXySrvS8bdB9DzXkLV/vFxKCBR4Ovga4Xo2x9bqmDwfyhL\nzTT1qjRhy+9pFiQl13LDQXO71qk8xOJfngpn4yjJluGfRUMchNvEZ7JR3rHjS2Wu\naHKNjJdBoZTnacCb1tUzbg6kdV7pdMnC3MXlRxgKruv7RI1e7r8k0RaLAYdjr2+j\nqF/Ra/Kw65rDoYGuyxxnFQt/GFRl0hgpO08h3PGM3mf58BhhesPEQUy7Ruja/4CA\nhbacO3oHGrGSXKXDohdzVkIg1k0w3JDwovbXjY0C25C6HMIxaI7bUk1utfM14dPD\nFEXCcxwJtRUnfpYFGKj9G1oAW1/ZtZp6iIUGHaP/GAGHQD+JpLnl/koR6P8WBU0t\nuxnd/TTSoELtOHZvFu9aFs+cP1MwzBN14cRiBtITfe0h9MyjqGgWWW5AUjhznplA\nRgM8UQy6zUVUWGa+oI2IdEQVDleuWrdB8dR1pcn9u7iG95FJVfQi1dkXVVPA6RJV\nZ9P3nSO9bWWR1FJ94ydST4kccKeV49zf15RI7kCDpXtJU0vILRzneCUbgn7EF5kD\nHlA2DHBIAC9+I2fO0MMrzIC4bcEzcCaOADH8jw6B56EnbSJSQ+U=\n=gI31\n-----END PGP SIGNATURE-----",
        "payload": "tree 78e80b894eab2329d40de40d420598365c95cf8c\nparent 23481fa50301201ef5a60675ef899aa6ce94ca03\nparent a777244e48227db6d3fd06cd2500cc007dacfb10\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518853758 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518853764 +1100\n\nMerge #12029: Build: Add a makefile target for Doxygen documentation\n\na777244e4 Build: Add a makefile target for Doxygen documentation (Andrea Comand)\n\nPull request description:\n\n  You can now build the doxygen documentation with `make docs` and clean it with `make clean-docs`.\n\n  Fixes: #11949\n\nTree-SHA512: f2361ec7f771227367dd04bba1a444b44e59f13901463a678a5f2f579a10a56d67db2e29552e754e312a1c472a31593b6af189cbaac5cd351a428c57baf5ace7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23481fa50301201ef5a60675ef899aa6ce94ca03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23481fa50301201ef5a60675ef899aa6ce94ca03"
      },
      {
        "sha": "a777244e48227db6d3fd06cd2500cc007dacfb10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a777244e48227db6d3fd06cd2500cc007dacfb10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a777244e48227db6d3fd06cd2500cc007dacfb10"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f345760f2d91ca27fa75facb75da1b792a7f43d5",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "patch": "@@ -277,6 +277,22 @@ CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n-clean-local:\n+doc/doxygen/.stamp: doc/Doxyfile FORCE\n+\t$(MKDIR_P) $(@D)\n+\t$(DOXYGEN) $^\n+\t$(AM_V_at) touch $@\n+\n+if HAVE_DOXYGEN\n+docs: doc/doxygen/.stamp\n+else\n+docs:\n+\t@echo \"error: doxygen not found\"\n+endif\n+\n+clean-docs:\n+\trm -rf doc/doxygen\n+\n+clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache\n+"
      },
      {
        "sha": "c2e34a52ca1d091eef67075bc565d089c0f9b27a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "patch": "@@ -93,6 +93,11 @@ AC_PATH_PROG(HEXDUMP,hexdump)\n AC_PATH_TOOL(READELF, readelf)\n AC_PATH_TOOL(CPPFILT, c++filt)\n AC_PATH_TOOL(OBJCOPY, objcopy)\n+AC_PATH_PROG(DOXYGEN, doxygen)\n+if test -z \"$DOXYGEN\"; then\n+   AC_MSG_WARN([Doxygen not found])\n+fi\n+AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n \n@@ -1260,7 +1265,7 @@ AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n-AC_CONFIG_FILES([doc/Doxyfile])\n+AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])"
      },
      {
        "sha": "2ebfb59c086fd7f41cf0c71167fd03fabf292266",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "patch": "@@ -132,6 +132,8 @@ Not OK (used plenty in the current source, but not picked up):\n A full list of comment syntaxes picked up by doxygen can be found at http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html,\n but if possible use one of the above styles.\n \n+Documentation can be generated with `make docs` and cleaned up with `make clean-docs`.\n+\n Development tips and tricks\n ---------------------------\n "
      }
    ]
  },
  {
    "sha": "294a766eb85068ba6e397702b1aac50dcae8fb37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTRhNzY2ZWI4NTA2OGJhNmUzOTc3MDJiMWFhYzUwZGNhZThmYjM3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:17:06Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:17:24Z"
      },
      "message": "Merge #12468: Add missing newline in init.cpp log message\n\n8b661f971 fixes #12465 added missing terminating newline character in log message (Josh Hartshorn)\n\nPull request description:\n\n  Adding missing new line as detailed in #12465\n\nTree-SHA512: 48f1e3f892f7c13b862d24b4e807cc42310001cab65d771ddf758155f727554bf13c59fa9a6c9fb93d1d0466f03f142289b5fcad9d7938fd55b1a268fc1307ed",
      "tree": {
        "sha": "36b650d618d912eb6ba51cef1479a845d883cac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36b650d618d912eb6ba51cef1479a845d883cac5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/294a766eb85068ba6e397702b1aac50dcae8fb37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqID0QACgkQHrd2uwPH\nki0wkhAAjnFDtGuDL+uB/vdAlrNXISnGrENX28vWEHcOhT+e2SPdUQj1aMG65hVA\nHV366G/fHmCLTmm9souNGK4TEBTPHw5omLrYDpmiYFbEA5XnDf1Ry6sGkJM9wI0j\nEqGgoMEvznuWEvut0HtPaT+fksTExhrir8/omkOhEokusJBbwvdlrJqnkjB0LFwF\nanmAfeV3BqQLlfq0leAB7mcI8F0OLTprjTZllJ9FAnGPoXQRUw3KnBwkz9vVgPJu\npWRp2whclHTL1coRPdNeH9166Wd5DojXwgBIUB+xQVysm3k/E7Ycl5rFpssOBF6N\nIuQl/0zXpN0M6nV3/xXKsqbVfD+RSw6CdXYxoUAoIn2Z4mx2IoolOAyJdISa+jbl\nEVCsWixu6m5NBgZTNDIKroolBodi/jfqoBJizaLaEmj/xEFKrZjlfxFl1ZaUeoT0\nXZpOW4jLFXbTVmlLCGpWTUF5IAc8zLgjKAJozeTr9XqyDU0xdhES+JAdgpRSBLVW\nbI3I8NbTUnsq+Fl1etFUtydDNTik1WJrNfnPgCSDo4GXphHIliEUbV/xEO5PmzAC\n6A+Al6/tFsonmH3BkbPVttFcc9an9vUGXzFvaQyQSg4XZKmyOU2Px/06Da4mwF7z\nf7u/2sJzPuOLPrgZY+ZTUVXDKe1iGXHTrU7kwYEFGbnBZq7kHt8=\n=K3Gj\n-----END PGP SIGNATURE-----",
        "payload": "tree 36b650d618d912eb6ba51cef1479a845d883cac5\nparent daa84b33540aa3bcb74aa8b0cf08362d688bb4ce\nparent 8b661f971aec9dfdab44c61c3431bb5233d00ce0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518866226 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518866244 +1100\n\nMerge #12468: Add missing newline in init.cpp log message\n\n8b661f971 fixes #12465 added missing terminating newline character in log message (Josh Hartshorn)\n\nPull request description:\n\n  Adding missing new line as detailed in #12465\n\nTree-SHA512: 48f1e3f892f7c13b862d24b4e807cc42310001cab65d771ddf758155f727554bf13c59fa9a6c9fb93d1d0466f03f142289b5fcad9d7938fd55b1a268fc1307ed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294a766eb85068ba6e397702b1aac50dcae8fb37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/294a766eb85068ba6e397702b1aac50dcae8fb37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294a766eb85068ba6e397702b1aac50dcae8fb37/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce"
      },
      {
        "sha": "8b661f971aec9dfdab44c61c3431bb5233d00ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b661f971aec9dfdab44c61c3431bb5233d00ce0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5c5d1ee792c8d8a11b8fe129ebb8b4e778e5f4d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/294a766eb85068ba6e397702b1aac50dcae8fb37/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/294a766eb85068ba6e397702b1aac50dcae8fb37/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=294a766eb85068ba6e397702b1aac50dcae8fb37",
        "patch": "@@ -1526,7 +1526,7 @@ bool AppInitMain()\n                 if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n+                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                             MIN_BLOCKS_TO_KEEP);\n                     }\n "
      }
    ]
  },
  {
    "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTk4ZGZlZWJmNThiOGZjOWI3Yzk2NmFlMGY5OWFkMDc2MGQ3ODAw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:26:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:27:08Z"
      },
      "message": "Merge #10583: [RPC] Split part of validateaddress into getaddressinfo\n\nb22cce014 scripted-diff: validateaddress to getaddressinfo in tests (Andrew Chow)\nb98bfc5ed Create getaddressinfo RPC and deprecate parts of validateaddress (Andrew Chow)\n1598f3230 [rpc] Move DescribeAddressVisitor to rpc/util (John Newbery)\n39633ecd5 [rpc] split wallet and non-wallet parts of DescribeAddressVisitor (John Newbery)\n\nPull request description:\n\n  This PR makes a new RPC command called `getaddressinfo` which relies on the wallet. It contains all of `validateaddress`'s address info stuff. Those parts in `validateaddress` have been marked as deprecated. The tests have been updated to use `getaddressinfo` except the `disablewallet` test which is the only test that actually uses `validateaddress` to validate an address.\n\nTree-SHA512: ce00ed0f2416200b8de1e0a75e8517c024be0b6153457d302c3879b3491cce28191e7c29aed08ec7d2eeeadc62918f5c43a7cb79cd2e4b6d9291bd83ec31c852",
      "tree": {
        "sha": "50f3c13cc873959396d00038baa6ee297551d289",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50f3c13cc873959396d00038baa6ee297551d289"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqIEYwACgkQHrd2uwPH\nki1YHw/9EvAe//UeMeK0aOrF4VBHJ2RwI9BJa30guTNwUGk2TnMl9WtyWpEoJL4n\nJ/1/ixXTdbTGI2KkedUll0XukCDDg2sc+8pQdSFqqKsznZZWxctO7t5/sBegg0vC\nBMD1Ecfn9p6uyMwX8Q61CZx6+qXLRyB4GAnKwhY2GoXBtYTLPd5fq24dRWC1blVt\nCtKr01yCx3uoVVEmYhmhuRtBo/fQtamnlnvpjcm8z1n9npRKWVnG3uDJBRdjauJO\nCIYdza6RhEl0Vfmgwm6B2Ex0PJKbmEjw6WBrX+VRg85Y7yBPX8LyYIk/+4c8l7On\nx74jOO35c8BmMiX7yNojqYHDCl4Plucbp0Xe+f7PqX3sFVyeJ/BPdTjLWR6g622S\nNbXMcl2LJatsFgCm3f8XNPip1Oplt1+DC7Qo+7Udqudb2Gybyv4GJQ+Ihyowkt7b\nzqkjUcDWh8HXTI1qBvD1NBee7fM6E4zKXMFSQ+ev2J50Qx4mLYDVor0BXpxDWBHB\nrNmrICSfWHbDGB7qkr2hDHzIWKTsZ7hAK5z6dj8a3ZIluPR/WpHJfKA4Wg0i1WPe\n740eB6aiwuU4b+TAF1tOl5ZTwZkcwsV90IDQ4oOPxowx+mqCXqVZz7YjlxxCCPLo\ntUbYGmFPkHxDg+GdyB4CF4ULk9UQoVEXAmQ/UBkCj9eRV2RRjbk=\n=rMvN\n-----END PGP SIGNATURE-----",
        "payload": "tree 50f3c13cc873959396d00038baa6ee297551d289\nparent 294a766eb85068ba6e397702b1aac50dcae8fb37\nparent b22cce014852b082d80f1cc35f902b375cba0318\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518866806 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518866828 +1100\n\nMerge #10583: [RPC] Split part of validateaddress into getaddressinfo\n\nb22cce014 scripted-diff: validateaddress to getaddressinfo in tests (Andrew Chow)\nb98bfc5ed Create getaddressinfo RPC and deprecate parts of validateaddress (Andrew Chow)\n1598f3230 [rpc] Move DescribeAddressVisitor to rpc/util (John Newbery)\n39633ecd5 [rpc] split wallet and non-wallet parts of DescribeAddressVisitor (John Newbery)\n\nPull request description:\n\n  This PR makes a new RPC command called `getaddressinfo` which relies on the wallet. It contains all of `validateaddress`'s address info stuff. Those parts in `validateaddress` have been marked as deprecated. The tests have been updated to use `getaddressinfo` except the `disablewallet` test which is the only test that actually uses `validateaddress` to validate an address.\n\nTree-SHA512: ce00ed0f2416200b8de1e0a75e8517c024be0b6153457d302c3879b3491cce28191e7c29aed08ec7d2eeeadc62918f5c43a7cb79cd2e4b6d9291bd83ec31c852\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "294a766eb85068ba6e397702b1aac50dcae8fb37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294a766eb85068ba6e397702b1aac50dcae8fb37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/294a766eb85068ba6e397702b1aac50dcae8fb37"
      },
      {
        "sha": "b22cce014852b082d80f1cc35f902b375cba0318",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cce014852b082d80f1cc35f902b375cba0318",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b22cce014852b082d80f1cc35f902b375cba0318"
      }
    ],
    "stats": {
      "total": 729,
      "additions": 427,
      "deletions": 302
    },
    "files": [
      {
        "sha": "9ca2b2c82a94a572612af6b5fccff8c339268888",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -135,10 +135,10 @@ BITCOIN_CORE_H = \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\\n+  script/ismine.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  script/ismine.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -216,7 +216,6 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/safemode.cpp \\\n   rpc/server.cpp \\\n   script/sigcache.cpp \\\n-  script/ismine.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\\n@@ -333,6 +332,7 @@ libbitcoin_common_a_SOURCES = \\\n   policy/feerate.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n+  script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   warnings.cpp \\\n@@ -389,10 +389,10 @@ endif\n \n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "13c27299f8980331ff6089ab124fec664dc32625",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n@@ -51,7 +52,6 @@ endif\n \n if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n-bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)\n endif\n \n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "61bd59e9edab595ac14632cb63bd370d0d5904fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 186,
        "changes": 207,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n-            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.pushKV(\"pubkey\", HexStr(pubkey));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.pushKV(\"address\", currentAddress);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n-        }\n-        if (pwallet) {\n-            const CKeyMetadata* meta = nullptr;\n-            CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n-            if (!key_id.IsNull()) {\n-                auto it = pwallet->mapKeyMetadata.find(key_id);\n-                if (it != pwallet->mapKeyMetadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (!meta) {\n-                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-                if (it != pwallet->m_script_metadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (meta) {\n-                ret.pushKV(\"timestamp\", meta->nCreateTime);\n-                if (!meta->hdKeypath.empty()) {\n-                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n-                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n+            ret.pushKVs(getaddressinfo(request));\n         }\n #endif\n+        if (ret[\"address\"].isNull()) {\n+            std::string currentAddress = EncodeDestination(dest);\n+            ret.pushKV(\"address\", currentAddress);\n+\n+            CScript scriptPubKey = GetScriptForDestination(dest);\n+            ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));;\n+\n+            UniValue detail = DescribeAddress(dest);\n+            ret.pushKVs(detail);\n+        }\n     }\n     return ret;\n }"
      },
      {
        "sha": "cdcb68d15f94a9c13f14adb799c3e0dc28581591",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination& dest) const\n+    {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n+        return obj;\n+    }\n+};\n+\n+UniValue DescribeAddress(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(DescribeAddressVisitor(), dest);\n+}"
      },
      {
        "sha": "5380d45a8356288ae66bdd2623406cdbda3cdbb1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -5,6 +5,13 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <univalue.h>\n+#include <utilstrencodings.h>\n+\n+#include <boost/variant/static_visitor.hpp>\n+\n #include <string>\n #include <vector>\n \n@@ -16,4 +23,6 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+UniValue DescribeAddress(const CTxDestination& dest);\n+\n #endif // BITCOIN_RPC_UTIL_H"
      },
      {
        "sha": "b504b842741b4f8110ac46a4f1d97f41a4848c57",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 0,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -25,6 +25,7 @@\n #include <utilmoneystr.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -3514,6 +3515,209 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"    [\\n\"\n+            \"      \\\"pubkey\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    isminetype mine = IsMine(*pwallet, dest);\n+    ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+    ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+    UniValue detail = DescribeWalletAddress(pwallet, dest);\n+    ret.pushKVs(detail);\n+    if (pwallet->mapAddressBook.count(dest)) {\n+        ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n+    }\n+    const CKeyMetadata* meta = nullptr;\n+    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+    if (!key_id.IsNull()) {\n+        auto it = pwallet->mapKeyMetadata.find(key_id);\n+        if (it != pwallet->mapKeyMetadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (!meta) {\n+        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+        if (it != pwallet->m_script_metadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (meta) {\n+        ret.pushKV(\"timestamp\", meta->nCreateTime);\n+        if (!meta->hdKeypath.empty()) {\n+            ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+            ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n+        }\n+    }\n+    return ret;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3543,6 +3747,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n     { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n     { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n     { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },"
      },
      {
        "sha": "43cf0416650c1b0408eda63ee829ffdb226b955b",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -10,6 +10,7 @@\n class CRPCTable;\n class CWallet;\n class JSONRPCRequest;\n+class UniValue;\n \n void RegisterWalletRPCCommands(CRPCTable &t);\n \n@@ -25,4 +26,6 @@ std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n+UniValue getaddressinfo(const JSONRPCRequest& request);\n+\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "9093cc04e8638ed06151ec8d24a5458c035cdd61",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -96,7 +96,7 @@ def run_test(self):\n         wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n-            self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n+            self.pubkey.append(self.nodes[i].getaddressinfo(newaddress)[\"pubkey\"])\n             multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n             p2sh_addr = self.nodes[i].addwitnessaddress(newaddress)\n             bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n@@ -274,8 +274,8 @@ def run_test(self):\n         uncompressed_spendable_address = [\"mvozP4UwyGD2mGZU4D2eMvMLPB9WkMmMQu\"]\n         self.nodes[0].importprivkey(\"cNC8eQ5dg3mFAVePDX4ddmPYpPbw41r9bm2jd1nLJT77e6RrzTRR\")\n         compressed_spendable_address = [\"mmWQubrDomqpgSYekvsU7HWEVjLFHAakLe\"]\n-        assert ((self.nodes[0].validateaddress(uncompressed_spendable_address[0])['iscompressed'] == False))\n-        assert ((self.nodes[0].validateaddress(compressed_spendable_address[0])['iscompressed'] == True))\n+        assert ((self.nodes[0].getaddressinfo(uncompressed_spendable_address[0])['iscompressed'] == False))\n+        assert ((self.nodes[0].getaddressinfo(compressed_spendable_address[0])['iscompressed'] == True))\n \n         self.nodes[0].importpubkey(pubkeys[0])\n         compressed_solvable_address = [key_to_p2pkh(pubkeys[0])]\n@@ -308,7 +308,7 @@ def run_test(self):\n         solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with compressed keys should always be spendable\n@@ -325,7 +325,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with uncompressed keys should always be spendable\n@@ -342,7 +342,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -355,7 +355,7 @@ def run_test(self):\n                 solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n@@ -395,7 +395,7 @@ def run_test(self):\n \n         importlist = []\n         for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n                 importlist.append(bytes_to_hex_str(bare))\n@@ -473,7 +473,7 @@ def run_test(self):\n         premature_witaddress = []\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after addwitnessaddress\n@@ -485,7 +485,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n@@ -496,7 +496,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # P2WSH multisig without private key are seen after addwitnessaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -519,7 +519,7 @@ def run_test(self):\n             assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n-        v = self.nodes[0].validateaddress(compressed_solvable_address[1])\n+        v = self.nodes[0].getaddressinfo(compressed_solvable_address[1])\n         self.nodes[0].importaddress(v['hex'],\"\",False,True)\n         for i in compressed_spendable_address + compressed_solvable_address + premature_witaddress:\n             witaddress = self.nodes[0].addwitnessaddress(i)"
      },
      {
        "sha": "b94b9d8fae2c4ab6af0804488e91f30c106b56c5",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -9,7 +9,7 @@ class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], []]\n+        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\"]]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -18,10 +18,13 @@ def run_test(self):\n         # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n         # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n         # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n-        #\n-        # There are currently no deprecated RPC methods in master, so this\n-        # test is currently empty.\n-        pass\n+\n+        self.log.info(\"Test validateaddress deprecation\")\n+        SOME_ADDRESS = \"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\" # This is just some random address to pass as a parameter to validateaddress\n+        dep_validate_address = self.nodes[0].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" not in dep_validate_address\n+        not_dep_val = self.nodes[1].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" in not_dep_val\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      },
      {
        "sha": "de436e3ea1055c424151e821f6d0ea10b08900cd",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -53,7 +53,7 @@ def run_test(self):\n         assert_equal(rawmatch[\"changepos\"], -1)\n \n         watchonly_address = self.nodes[0].getnewaddress()\n-        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_pubkey = self.nodes[0].getaddressinfo(watchonly_address)[\"pubkey\"]\n         watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n@@ -371,8 +371,8 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n \n@@ -401,11 +401,11 @@ def run_test(self):\n         addr4 = self.nodes[1].getnewaddress()\n         addr5 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n-        addr3Obj = self.nodes[1].validateaddress(addr3)\n-        addr4Obj = self.nodes[1].validateaddress(addr4)\n-        addr5Obj = self.nodes[1].validateaddress(addr5)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[1].getaddressinfo(addr3)\n+        addr4Obj = self.nodes[1].getaddressinfo(addr4)\n+        addr5Obj = self.nodes[1].getaddressinfo(addr5)\n \n         mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])['address']\n \n@@ -431,8 +431,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n "
      },
      {
        "sha": "e4b8b2ec2bf38e8452754728b059aba6715c8b56",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -81,7 +81,7 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n-        pubkey = self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['pubkey']\n+        pubkey = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n         multisig = self.nodes[1].createmultisig(1, [pubkey])\n         self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n         txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)"
      },
      {
        "sha": "2cb902e8f00014aa088fdf63c8eb0a74707d7589",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -146,8 +146,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         # Tests for createmultisig and addmultisigaddress\n         assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n@@ -173,9 +173,9 @@ def run_test(self):\n         addr2 = self.nodes[2].getnewaddress()\n         addr3 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n-        addr3Obj = self.nodes[2].validateaddress(addr3)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[2].getaddressinfo(addr3)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n \n@@ -219,12 +219,12 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+        mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n \n         txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n         decTx = self.nodes[0].gettransaction(txId)"
      },
      {
        "sha": "e1e01570cbf6f29b2c0550d7f3d9acbc1d396b1b",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -149,7 +149,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n     else:\n         addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n     if not encode_p2sh:\n-        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+        assert_equal(node.getaddressinfo(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n     return node.createrawtransaction([utxo], {addr: amount})\n \n # Create a transaction spending a given utxo to a segwit output corresponding"
      },
      {
        "sha": "5d2428e6ef259a1b705f269348905f17facb235f",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -93,8 +93,8 @@ def get_balances(self, confirmed=True):\n \n     def test_address(self, node, address, multisig, typ):\n         \"\"\"Run sanity checks on an address.\"\"\"\n-        info = self.nodes[node].validateaddress(address)\n-        assert(info['isvalid'])\n+        info = self.nodes[node].getaddressinfo(address)\n+        assert(self.nodes[node].validateaddress(address)['isvalid'])\n         if not multisig and typ == 'legacy':\n             # P2PKH\n             assert(not info['isscript'])"
      },
      {
        "sha": "b644f3495c6fe739aba1420f9ac6f94d943937c8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         assert_equal(txout['value'], 50)\n         txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=True)\n         assert_equal(txout['value'], 50)\n-        \n+\n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Locked memory should use at least 32 bytes to sign each transaction\n         self.log.info(\"test getmemoryinfo\")\n@@ -317,7 +317,7 @@ def run_test(self):\n         self.nodes[1].importaddress(address_to_import)\n \n         # 3. Validate that the imported address is watch-only on node1\n-        assert(self.nodes[1].validateaddress(address_to_import)[\"iswatchonly\"])\n+        assert(self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"])\n \n         # 4. Check that the unspents after import are not spendable\n         assert_array_result(self.nodes[1].listunspent(),\n@@ -442,5 +442,14 @@ def run_test(self):\n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))\n \n+        # Test getaddressinfo. Note that these addresses are taken from disablewallet.py\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].getaddressinfo, \"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy\")\n+        address_info = self.nodes[0].getaddressinfo(\"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info['address'], \"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info[\"scriptPubKey\"], \"76a9144e3854046c7bd1594ac904e4793b6a45b36dea0988ac\")\n+        assert not address_info[\"ismine\"]\n+        assert not address_info[\"iswatchonly\"]\n+        assert not address_info[\"isscript\"]\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      },
      {
        "sha": "4db217d886e0f760be821be852db5be043c898bd",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -104,7 +104,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n     # which spends it, and make sure bumpfee can be called on it.\n \n     segwit_in = next(u for u in rbf_node.listunspent() if u[\"amount\"] == Decimal(\"0.001\"))\n-    segwit_out = rbf_node.validateaddress(rbf_node.getnewaddress())\n+    segwit_out = rbf_node.getaddressinfo(rbf_node.getnewaddress())\n     rbf_node.addwitnessaddress(segwit_out[\"address\"])\n     segwitid = send_to_witness(\n         use_p2wsh=False,"
      },
      {
        "sha": "e171a2600266092560e0d122fd40eacb4089c166",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -97,7 +97,7 @@ def run_test (self):\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n-            vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n+            vaddr= self.nodes[0].getaddressinfo(addr) #required to get hd keypath\n             addrs.append(vaddr)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n@@ -143,13 +143,13 @@ def run_test (self):\n         self.start_node(0, ['-wallet=w2'])\n \n         # Make sure the address is not IsMine before import\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == False)\n \n         self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n         # Now check IsMine is true\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == True)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "91f77dd5ba5f146863eac194effa7b29fa6d5d43",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -33,7 +33,7 @@ def run_test (self):\n \n         # create an internal key\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n \n         # Import a non-HD private key in the HD wallet\n@@ -51,7 +51,7 @@ def run_test (self):\n         num_hd_adds = 300\n         for i in range(num_hd_adds):\n             hd_add = self.nodes[1].getnewaddress()\n-            hd_info = self.nodes[1].validateaddress(hd_add)\n+            hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n@@ -61,7 +61,7 @@ def run_test (self):\n \n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n \n         self.sync_all()\n@@ -80,7 +80,7 @@ def run_test (self):\n         hd_add_2 = None\n         for _ in range(num_hd_adds):\n             hd_add_2 = self.nodes[1].getnewaddress()\n-            hd_info_2 = self.nodes[1].validateaddress(hd_add_2)\n+            hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n@@ -114,7 +114,7 @@ def run_test (self):\n         keypath = \"\"\n         for out in outs:\n             if out['value'] != 1:\n-                keypath = self.nodes[1].validateaddress(out['scriptPubKey']['addresses'][0])['hdkeypath']\n+                keypath = self.nodes[1].getaddressinfo(out['scriptPubKey']['addresses'][0])['hdkeypath']\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n "
      },
      {
        "sha": "3288ce4b60e6cac8ce0a8e6ef566921dae37089e",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -134,7 +134,7 @@ def run_test(self):\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.label = \"label {} {}\".format(i, variant)\n-            variant.address = self.nodes[1].validateaddress(self.nodes[1].getnewaddress(variant.label))\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      },
      {
        "sha": "56ebc2622ab7729eae5f335d7d1d0b58182e98c2",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 51,
        "deletions": 51,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -21,7 +21,7 @@ def run_test (self):\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n-        node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n \n         #Check only one address\n         assert_equal(node0_address1['ismine'], True)\n@@ -30,7 +30,7 @@ def run_test (self):\n         assert_equal(self.nodes[1].getblockcount(),1)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(node0_address1['address'])\n+        address_info = self.nodes[1].getaddressinfo(node0_address1['address'])\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -39,15 +39,15 @@ def run_test (self):\n \n         # Bitcoin Address\n         self.log.info(\"Should import an address\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -67,37 +67,37 @@ def run_test (self):\n \n         # ScriptPubKey + internal\n         self.log.info(\"Should import a scriptPubKey with internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n         self.log.info(\"Should import an address with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -106,15 +106,15 @@ def run_test (self):\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -123,14 +123,14 @@ def run_test (self):\n         }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -140,14 +140,14 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         self.log.info(\"Should import an address with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -156,7 +156,7 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -175,7 +175,7 @@ def run_test (self):\n \n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -187,29 +187,29 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -218,16 +218,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -242,7 +242,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -252,9 +252,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -270,7 +270,7 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n@@ -279,9 +279,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script + Private Keys + !Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -298,17 +298,17 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], True)\n \n         # P2SH + Redeem script + Private Keys + Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -332,8 +332,8 @@ def run_test (self):\n \n         # Address + Public key + !Internal + Wrong pubkey\n         self.log.info(\"Should not import an address with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -344,16 +344,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -364,16 +364,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n         self.log.info(\"Should not import an address with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -384,16 +384,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -403,7 +403,7 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n@@ -419,7 +419,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -429,7 +429,7 @@ def run_test (self):\n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n         self.start_nodes()\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], watchonly_timestamp)"
      },
      {
        "sha": "4d349db23f9da1a42d2dec025e6b6086e4a65928",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -26,7 +26,7 @@ def run_test(self):\n         address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n \n         #Check only one address\n-        address_info = self.nodes[0].validateaddress(address1)\n+        address_info = self.nodes[0].getaddressinfo(address1)\n         assert_equal(address_info['ismine'], True)\n \n         self.sync_all()\n@@ -35,15 +35,15 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(),101)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -86,13 +86,13 @@ def run_test(self):\n         assert_equal(balance3, Decimal('0.075'))\n \n         #Addresses Test - after import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], True)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], True)\n "
      },
      {
        "sha": "9825e4d89448fb1e6ab21a1d3438a475839bbb23",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -14,7 +14,7 @@ def set_test_params(self):\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()\n-        addr_before_encrypting_data = nodes[0].validateaddress(addr_before_encrypting)\n+        addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n@@ -24,7 +24,7 @@ def run_test(self):\n         self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n-        addr_data = nodes[0].validateaddress(addr)\n+        addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])"
      },
      {
        "sha": "e7b76dfaf2ee3fdd10bdf8224778bf8efd6568f3",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -68,7 +68,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n \n         # Check that we have marked all keys up to the used keypool key as used\n-        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n+        assert_equal(self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n \n if __name__ == '__main__':\n     KeypoolRestoreTest().main()"
      }
    ]
  },
  {
    "sha": "1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTc5YzA1NWNkMzBkMjFiYTVmOGM3ZjgxZWY5MTFkNWQ0ZTI5NWE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-12T19:23:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:00Z"
      },
      "message": "Split signrawtransaction into wallet and non-wallet\n\nSplits signrwatransaction into a wallet version (signrawtransactionwithwallet) and\nnon-wallet version (signrawtransactionwithkey). signrawtransaction is marked as DEPRECATED\nand will call the right signrawtransaction* command as per the parameters in order to\nmaintain compatibility.\n\nUpdated signrawtransactions test to use new RPCs",
      "tree": {
        "sha": "22c28017f71d4f9b0dddb77cc41e733095ec84a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22c28017f71d4f9b0dddb77cc41e733095ec84a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      }
    ],
    "stats": {
      "total": 594,
      "additions": 380,
      "deletions": 214
    },
    "files": [
      {
        "sha": "ac822d6c5e0b29102db645049a8cf99607960d76",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   rpc/protocol.h \\\n   rpc/safemode.h \\\n   rpc/server.h \\\n+  rpc/rawtransaction.h \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\"
      },
      {
        "sha": "1aa4de03ca2dd0bf144267632ed9ee33520affcc",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -70,6 +70,7 @@ const QStringList historyFilter = QStringList()\n     << \"importmulti\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n+    << \"signrawtransactionwithkey\"\n     << \"walletpassphrase\"\n     << \"walletpassphrasechange\"\n     << \"encryptwallet\";\n@@ -624,7 +625,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n         // peer table signal handling - cache selected node ids\n         connect(model->getPeerTableModel(), SIGNAL(layoutAboutToBeChanged()), this, SLOT(peerLayoutAboutToChange()));\n-        \n+\n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n@@ -772,7 +773,7 @@ void RPCConsole::clear(bool clearHistory)\n #else\n     QString clsKey = \"Ctrl-L\";\n #endif\n-\t \n+\n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n@@ -1144,7 +1145,7 @@ void RPCConsole::disconnectSelectedNode()\n {\n     if(!g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)\n@@ -1161,7 +1162,7 @@ void RPCConsole::banSelectedNode(int bantime)\n {\n     if (!clientModel || !g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)"
      },
      {
        "sha": "9d0e0b97d16c2decf2bb06c9554ed5eb636d91c6",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -82,8 +82,8 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"signmessagewithprivkey abc,def\", false, &filtered);\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signrawtransaction(abc)\", false, &filtered);\n-    QVERIFY(filtered == \"signrawtransaction(\u2026)\");\n+    RPCConsole::RPCParseCommandLine(result, \"signrawtransactionwithkey(abc)\", false, &filtered);\n+    QVERIFY(filtered == \"signrawtransactionwithkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrase(help())\", false, &filtered);\n     QVERIFY(filtered == \"walletpassphrase(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrasechange(help(walletpassphrasechange(abc)))\", false, &filtered);"
      },
      {
        "sha": "a95ea0cf92ecad52adb72f863f11980172228e94",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -94,6 +94,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"decoderawtransaction\", 1, \"iswitness\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 1, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n+    { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },"
      },
      {
        "sha": "813afde4db4ee9116528486724e0aaeb64b59e72",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 217,
        "deletions": 134,
        "changes": 351,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <script/script.h>\n@@ -28,7 +29,6 @@\n #include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n #include <wallet/rpcwallet.h>\n-#include <wallet/wallet.h>\n #endif\n \n #include <future>\n@@ -672,88 +672,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-    ObserveSafeMode();\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        LOCK(mempool.cs);\n+        LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n@@ -765,36 +690,14 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n     }\n \n-    bool fGivenKeys = false;\n-    CBasicKeyStore tempKeystore;\n-    if (!request.params[2].isNull()) {\n-        fGivenKeys = true;\n-        UniValue keys = request.params[2].get_array();\n-        for (unsigned int idx = 0; idx < keys.size(); idx++) {\n-            UniValue k = keys[idx];\n-            CBitcoinSecret vchSecret;\n-            bool fGood = vchSecret.SetString(k.get_str());\n-            if (!fGood)\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-            CKey key = vchSecret.GetKey();\n-            if (!key.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n-            tempKeystore.AddKey(key);\n-        }\n-    }\n-#ifdef ENABLE_WALLET\n-    else if (pwallet) {\n-        EnsureWalletIsUnlocked(pwallet);\n-    }\n-#endif\n-\n     // Add previous txouts given in the RPC call:\n-    if (!request.params[1].isNull()) {\n-        UniValue prevTxs = request.params[1].get_array();\n-        for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n+    if (!prevTxsUnival.isNull()) {\n+        UniValue prevTxs = prevTxsUnival.get_array();\n+        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n             const UniValue& p = prevTxs[idx];\n-            if (!p.isObject())\n+            if (!p.isObject()) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n+            }\n \n             UniValue prevOut = p.get_obj();\n \n@@ -808,8 +711,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n-            if (nOut < 0)\n+            if (nOut < 0) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n+            }\n \n             COutPoint out(txid, nOut);\n             std::vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n@@ -834,8 +738,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n-            // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+            // given), add redeemScript to the keystore so it can be signed:\n+            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"txid\", UniValueType(UniValue::VSTR)},\n@@ -847,22 +751,16 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                 if (!v.isNull()) {\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n-                    tempKeystore.AddCScript(redeemScript);\n+                    keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n+                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }\n     }\n \n-#ifdef ENABLE_WALLET\n-    const CKeyStore& keystore = ((fGivenKeys || !pwallet) ? tempKeystore : *pwallet);\n-#else\n-    const CKeyStore& keystore = tempKeystore;\n-#endif\n-\n     int nHashType = SIGHASH_ALL;\n-    if (!request.params[3].isNull()) {\n+    if (!hashType.isNull()) {\n         static std::map<std::string, int> mapSigHashValues = {\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n@@ -871,11 +769,12 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n             {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n         };\n-        std::string strHashType = request.params[3].get_str();\n-        if (mapSigHashValues.count(strHashType))\n+        std::string strHashType = hashType.get_str();\n+        if (mapSigHashValues.count(strHashType)) {\n             nHashType = mapSigHashValues[strHashType];\n-        else\n+        } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sighash param\");\n+        }\n     }\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n@@ -899,8 +798,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(MutableTransactionSignatureCreator(keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n         sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n \n         UpdateTransaction(mtx, i, sigdata);\n@@ -927,6 +827,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                               (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"                  (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    const UniValue& keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    if (!IsDeprecatedRPCEnabled(\"signrawtransaction\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"signrawtransaction is deprecated and will be fully removed in v0.18. \"\n+            \"To use signrawtransaction in v0.17, restart bitcoind with -deprecatedrpc=signrawtransaction.\\n\"\n+            \"Projects should transition to using signrawtransactionwithkey and signrawtransactionwithwallet before upgrading to v0.18\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+}\n+\n UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1025,18 +1107,19 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n }\n \n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     {\"hexstring\",\"allowhighfees\"} },\n-    { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n-\n-    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          {\"txids\", \"blockhash\"} },\n-    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       {\"proof\"} },\n+{ //  category              name                            actor (function)            argNames\n+  //  --------------------- ------------------------        -----------------------     ----------\n+    { \"rawtransactions\",    \"getrawtransaction\",            &getrawtransaction,         {\"txid\",\"verbose\",\"blockhash\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n+    { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n+    { \"rawtransactions\",    \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n+\n+    { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n+    { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },\n };\n \n void RegisterRawTransactionRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2186c1d5e715dc1b5fd574e47784db82620b1ee1",
        "filename": "src/rpc/rawtransaction.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+class CMutableTransaction;\n+class UniValue;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif // BITCOIN_RPC_RAWTRANSACTION_H"
      },
      {
        "sha": "108c1a063e01fcbd956d1655d867da9e00261ffc",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -69,14 +69,6 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false\"));\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), std::runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null badenum\"), std::runtime_error);\n-\n     // Only check failure cases for sendrawtransaction, there's no network to send to...\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), std::runtime_error);\n@@ -119,9 +111,9 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n "
      },
      {
        "sha": "8b95c56a5fc84cd270ab107d362bfda3d8b5623a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 56,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -16,6 +16,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <rpc/mining.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -3236,6 +3237,75 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    // Sign the transaction\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -3731,62 +3801,63 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n-{ //  category              name                        actor (function)           argNames\n-    //  --------------------- ------------------------    -----------------------  ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       {\"hexstring\",\"options\",\"iswitness\"} },\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, {} },\n-    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n-    { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n-    { \"hidden\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n-    { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n-    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },\n-    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               {\"filename\"} },\n-    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            {\"passphrase\"} },\n-    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n-    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n-    { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     {\"address\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",           &gettransaction,           {\"txid\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    {} },\n-    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            {} },\n-    { \"wallet\",             \"importmulti\",              &importmulti,              {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",             &importwallet,             {\"filename\"} },\n-    { \"wallet\",             \"importaddress\",            &importaddress,            {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n-    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        {\"rawtransaction\",\"txoutproof\"} },\n-    { \"wallet\",             \"importpubkey\",             &importpubkey,             {\"pubkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",             &listaccounts,             {\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     {} },\n-    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          {} },\n-    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n-    { \"wallet\",             \"listwallets\",              &listwallets,              {} },\n-    { \"wallet\",             \"lockunspent\",              &lockunspent,              {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                     &movecmd,                  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               {\"address\",\"account\"} },\n-    { \"wallet\",             \"settxfee\",                 &settxfee,                 {\"amount\"} },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              {\"address\",\"message\"} },\n-    { \"wallet\",             \"walletlock\",               &walletlock,               {} },\n-    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n-    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n-    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n-\n-    { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n+{ //  category              name                                actor (function)                argNames\n+    //  --------------------- ------------------------          -----------------------         ----------\n+    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n+    { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n+    { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n+    { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n+    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n+    { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n+    { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n+    { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n+    { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n+    { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n+    { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n+    { \"wallet\",             \"getaccountaddress\",                &getaccountaddress,             {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"account\",\"address_type\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbyaccount,          {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n+    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n+    { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n+    { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n+    { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n+    { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n+    { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n+    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n+    { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n+    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n+    { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n+    { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+    { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"setaccount\",                       &setaccount,                    {\"address\",\"account\"} },\n+    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n+    { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n+    { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n+    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n+    { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n+    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n+\n+    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "84f161abb56374b41c55d1e1a55c827d58a96190",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -27,5 +27,5 @@ void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n-\n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "ea560d160e5f578bc94e82a4c2730d2da2bf8c8b",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -33,7 +33,7 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n         assert 'complete' in rawTxSigned\n@@ -84,7 +84,7 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n         assert 'complete' in rawTxSigned\n@@ -112,7 +112,7 @@ def script_verification_error_test(self):\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n         assert 'complete' in rawTxSigned"
      },
      {
        "sha": "63169360b45e768ccf36165ab5f03c2abf0e2b64",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -472,7 +472,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     outputs[to_node.getnewaddress()] = float(amount)\n \n     rawtx = from_node.createrawtransaction(inputs, outputs)\n-    signresult = from_node.signrawtransaction(rawtx)\n+    signresult = from_node.signrawtransactionwithwallet(rawtx)\n     txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n \n     return (txid, signresult[\"hex\"], fee)\n@@ -552,7 +552,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n         newtx = rawtx[0:92]\n         newtx = newtx + txouts\n         newtx = newtx + rawtx[94:]\n-        signresult = node.signrawtransaction(newtx, None, None, \"NONE\")\n+        signresult = node.signrawtransactionwithwallet(newtx, None, \"NONE\")\n         txid = node.sendrawtransaction(signresult[\"hex\"], True)\n         txids.append(txid)\n     return txids"
      },
      {
        "sha": "d742ec461831830d7a357ac6dd2a668ecfe9dcb0",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      }
    ]
  },
  {
    "sha": "eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWZmZjY1YTRiMDg1MjU4N2UwYjA2ZDkzYzMzZTJhZDQzOWQzNGU3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-05T23:49:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:01Z"
      },
      "message": "scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<signrawtransaction\\>/signrawtransactionwithwallet/g' test/functional/*.py\nsed -i 's/\\<signrawtransaction\\>/signrawtransactionwithwallet/g' test/functional/test_framework/*.py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "0f959cdd9ba5d0c1e1185efcc16e008f91f0558f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f959cdd9ba5d0c1e1185efcc16e008f91f0558f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 62,
      "deletions": 62
    },
    "files": [
      {
        "sha": "e5db9e18c72c68aa4e747cef85b6d1d37cf34099",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -70,7 +70,7 @@ def test_disable_flag(self):\n         tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n         tx1.vout = [CTxOut(value, CScript([b'a']))]\n \n-        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_signed = self.nodes[0].signrawtransactionwithwallet(ToHex(tx1))[\"hex\"]\n         tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n         tx1_id = int(tx1_id, 16)\n \n@@ -176,7 +176,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n             tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n-            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+            rawtx = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n@@ -205,7 +205,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.nVersion = 2\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -278,7 +278,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n-        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(ToHex(tx5))[\"hex\"]\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n@@ -338,7 +338,7 @@ def test_bip68_not_consensus(self):\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n \n         # sign tx2\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -388,7 +388,7 @@ def test_version2_relay(self):\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n         tx = FromHex(CTransaction(), rawtxfund)\n         tx.nVersion = 2\n-        tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n+        tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "71d3d040022c07c981cee5af85d40acf025b4286",
        "filename": "test/functional/feature_bip9_softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip9_softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip9_softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip9_softforks.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -51,7 +51,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         return tx\n \n     def sign_transaction(self, node, tx):\n-        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n+        signresult = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "e9a8945e76c01281eecd098a31f9f3dced9b867a",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -41,7 +41,7 @@ def cltv_validate(node, tx, height):\n     tx.nLockTime = height\n \n     # Need to re-sign, since nSequence and nLockTime changed\n-    signed_result = node.signrawtransaction(ToHex(tx))\n+    signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n     new_tx = CTransaction()\n     new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n@@ -54,7 +54,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8b5e5681e459d8d5c62d07e60a631092147db975",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -118,7 +118,7 @@ def create_transaction(self, node, txid, to_address, amount):\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "cef257cf9b8286aefd9aa9b37170a3967d7e2dbf",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -206,7 +206,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n-            tx_signed_hex = node.signrawtransaction(ToHex(tx))['hex']\n+            tx_signed_hex = node.signrawtransactionwithwallet(ToHex(tx))['hex']\n             node.sendrawtransaction(tx_signed_hex)\n             num_transactions += 1\n "
      },
      {
        "sha": "02dcc3e55dcb37b68e25e776fea57e4ba839e7e6",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -42,7 +42,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8a56d3eefa4852ec0a4101ba786ef6e5d03cefbd",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -91,7 +91,7 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n-        completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n+        completetx = from_node.signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)"
      },
      {
        "sha": "7db6a03b452084455ea1cd772c19935ed1d1f105",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -102,7 +102,7 @@ def create_transaction(self, node, txid, to_address, amount):\n         inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "d6ab5ecc37603ab09308763aea53bb255eac0261",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -42,7 +42,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    signed_tx = node.signrawtransaction(txToHex(tx2))\n+    signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n \n     txid = node.sendrawtransaction(signed_tx['hex'], True)\n "
      },
      {
        "sha": "fa1732c4c5512d9d73fe62b281a17d021873a2ec",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -221,7 +221,7 @@ def run_test(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n         tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = FromHex(CTransaction(), tx2_hex)\n         assert(not tx.wit.is_null())\n@@ -559,7 +559,7 @@ def run_test(self):\n \n             self.nodes[1].importaddress(scriptPubKey, \"\", False)\n             rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n-            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            rawtxfund = self.nodes[1].signrawtransactionwithwallet(rawtxfund)[\"hex\"]\n             txid = self.nodes[1].sendrawtransaction(rawtxfund)\n \n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n@@ -578,7 +578,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         for i in script_list:\n             tx.vout.append(CTxOut(10000000, i))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -630,7 +630,7 @@ def create_and_mine_tx_from_txids(self, txids, success = True):\n                 tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n         tx.vout.append(CTxOut(0, CScript()))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "47f7efd3e78b2bc1376dfe7b4f65a232d3efa339",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -32,7 +32,7 @@ def run_test(self):\n         self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n         txF = self.nodes[0].fundrawtransaction(tx)\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -57,7 +57,7 @@ def run_test(self):\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':"
      },
      {
        "sha": "23797d83db3dbad0443be87e74dc05fe8635a917",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -25,7 +25,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signedtx = node.signrawtransaction(rawtx)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n         txid = node.sendrawtransaction(signedtx['hex'])\n         fulltx = node.getrawtransaction(txid, 1)\n         assert(len(fulltx['vout']) == num_outputs) # make sure we didn't generate a change output\n@@ -205,7 +205,7 @@ def run_test(self):\n         for i in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         tx0_id = txid\n         value = send_value\n@@ -229,7 +229,7 @@ def run_test(self):\n         inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]\n         outputs = { self.nodes[0].getnewaddress() : send_value + value - 4*fee }\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n         "
      },
      {
        "sha": "eabed5d63379a9baca93e9139d45dc01579ac2c5",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         # Set the time lock\n         timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111191\", 1)\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n-        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        timelock_tx = self.nodes[0].signrawtransactionwithwallet(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n         assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n "
      },
      {
        "sha": "32e2b47fc9d737eae508dee45829f0f9a132463d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -116,7 +116,7 @@ def run_test(self):\n         inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n         outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"]\n         raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+        tx_hex = self.nodes[0].signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met"
      },
      {
        "sha": "5fb9a361d9f9b4604863645339fad579115660a5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -449,7 +449,7 @@ def run_test(self):\n         rawtx = self.nodes[2].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n \n-        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[2].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n         self.nodes[1].generate(1)\n@@ -503,7 +503,7 @@ def run_test(self):\n \n         #now we need to unlock\n         self.nodes[1].walletpassphrase(\"test\", 600)\n-        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n@@ -564,7 +564,7 @@ def run_test(self):\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n-        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -622,9 +622,9 @@ def run_test(self):\n         assert_greater_than(result[\"changepos\"], -1)\n         assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n \n-        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n         assert(not signedtx[\"complete\"])\n-        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n         assert(signedtx[\"complete\"])\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "0dd7372e6bfb776d0cc5f5753d54dd74ae287d41",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -131,7 +131,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\":utxo_to_use[\"txid\"], \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.999}\n         tx2 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx2_signed = self.nodes[1].signrawtransaction(tx2)[\"hex\"]\n+        tx2_signed = self.nodes[1].signrawtransactionwithwallet(tx2)[\"hex\"]\n         txid_2 = self.nodes[1].sendrawtransaction(tx2_signed)\n \n         # ...and check the result\n@@ -148,7 +148,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_modified = txFromHex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n         tx3 = bytes_to_hex_str(tx3_modified.serialize())\n-        tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n+        tx3_signed = self.nodes[0].signrawtransactionwithwallet(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n@@ -162,7 +162,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\": txid_3, \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.997}\n         tx4 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx4_signed = self.nodes[1].signrawtransaction(tx4)[\"hex\"]\n+        tx4_signed = self.nodes[1].signrawtransactionwithwallet(tx4)[\"hex\"]\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n@@ -174,7 +174,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n         tx3_b = bytes_to_hex_str(tx3_b.serialize())\n-        tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n+        tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n "
      },
      {
        "sha": "e074f5bd7436868ed2dc9f69419c7bcf72975401",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -6,7 +6,7 @@\n \n Test the following RPCs:\n    - createrawtransaction\n-   - signrawtransaction\n+   - signrawtransactionwithwallet\n    - sendrawtransaction\n    - decoderawtransaction\n    - getrawtransaction\n@@ -104,7 +104,7 @@ def run_test(self):\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n         outputs = { self.nodes[0].getnewaddress() : 4.998 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransaction(rawtx)\n+        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n \n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n@@ -202,10 +202,10 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n+        rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n+        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n         self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n@@ -247,11 +247,11 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned1 = self.nodes[1].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned1)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxPartialSigned2 = self.nodes[2].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned2)\n         assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n         rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])"
      },
      {
        "sha": "c52a7397dc85ecc20fcf8c39d7a5b5d33db0e29e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -34,9 +34,9 @@ def run_test(self):\n \n         node0utxos = self.nodes[0].listunspent(1)\n         tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx1)[\"hex\"])\n+        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx1)[\"hex\"])\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n+        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n@@ -55,7 +55,7 @@ def run_test(self):\n \n         txin_spent = self.nodes[1].listunspent(1).pop()\n         tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n-        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransaction(tx3)[\"hex\"])\n+        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransactionwithwallet(tx3)[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()\n "
      },
      {
        "sha": "43982cd09ada0c589ce5981fe18e84d87d493cc8",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -160,7 +160,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n     tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n-        signed = node.signrawtransaction(tx_to_witness)\n+        signed = node.signrawtransactionwithwallet(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:"
      },
      {
        "sha": "34a21ff8fe136c0b063b69ead137aa26fdd06776",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -499,7 +499,7 @@ def create_confirmed_utxos(fee, node, count):\n         outputs[addr1] = satoshi_round(send_value / 2)\n         outputs[addr2] = satoshi_round(send_value / 2)\n         raw_tx = node.createrawtransaction(inputs, outputs)\n-        signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n@@ -533,7 +533,7 @@ def create_tx(node, coinbase, to_address, amount):\n     inputs = [{\"txid\": coinbase, \"vout\": 0}]\n     outputs = {to_address: amount}\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n     return signresult[\"hex\"]\n "
      },
      {
        "sha": "7e0635d80f7ec5af5019bc763f7aae46342ba040",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -55,7 +55,7 @@ def run_test(self):\n \n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"5\")\n-        signed = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n \n         # Identify the 14.99998btc output\n@@ -67,7 +67,7 @@ def run_test(self):\n         inputs.append({\"txid\":txC, \"vout\":nC})\n         outputs = {}\n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n-        signed2 = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed2 = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n \n         # In mempool txs from self should increase balance from change\n@@ -138,7 +138,7 @@ def run_test(self):\n         outputs = {}\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signed = self.nodes[0].signrawtransaction(tx)\n+        signed = self.nodes[0].signrawtransactionwithwallet(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n         self.nodes[1].generate(1)\n "
      },
      {
        "sha": "f686cb6ea57e32de87f931a7f36b48ab1307a5f4",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -140,7 +140,7 @@ def run_test(self):\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n             outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"] - 3\n             raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            txns_to_send.append(self.nodes[0].signrawtransaction(raw_tx))\n+            txns_to_send.append(self.nodes[0].signrawtransactionwithwallet(raw_tx))\n \n         # Have node 1 (miner) send the transactions\n         self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], True)\n@@ -225,7 +225,7 @@ def run_test(self):\n \n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n-        signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n+        signedRawTx = self.nodes[1].signrawtransactionwithwallet(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n@@ -400,7 +400,7 @@ def run_test(self):\n         node0_balance = self.nodes[0].getbalance()\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n "
      },
      {
        "sha": "3e496248fd82a51dd32c00aade00049c3a1a5d09",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -121,7 +121,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n         \"sequence\": BIP125_SEQUENCE_NUMBER\n     }], {dest_address: Decimal(\"0.0005\"),\n          rbf_node.getrawchangeaddress(): Decimal(\"0.0003\")})\n-    rbfsigned = rbf_node.signrawtransaction(rbfraw)\n+    rbfsigned = rbf_node.signrawtransactionwithwallet(rbfraw)\n     rbfid = rbf_node.sendrawtransaction(rbfsigned[\"hex\"])\n     assert rbfid in rbf_node.getrawmempool()\n \n@@ -150,8 +150,8 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     } for utxo in utxos]\n     output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n     rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n-    signedtx = rbf_node.signrawtransaction(rawtx)\n-    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\n+    signedtx = peer_node.signrawtransactionwithwallet(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n     assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n@@ -162,7 +162,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n-    tx = rbf_node.signrawtransaction(tx)\n+    tx = rbf_node.signrawtransactionwithwallet(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n@@ -277,7 +277,7 @@ def spend_one_input(node, dest_address):\n     rawtx = node.createrawtransaction(\n         [tx_input], {dest_address: Decimal(\"0.00050000\"),\n                      node.getrawchangeaddress(): Decimal(\"0.00049000\")})\n-    signedtx = node.signrawtransaction(rawtx)\n+    signedtx = node.signrawtransactionwithwallet(rawtx)\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n "
      },
      {
        "sha": "25e27166611dd2d326d891faa08737b4be19de87",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -158,7 +158,7 @@ def test_double_spend(self):\n             'vout': utxo['vout'],\n         }]\n         txid1 = self.nodes[1].sendrawtransaction(\n-            self.nodes[1].signrawtransaction(\n+            self.nodes[1].signrawtransactionwithwallet(\n                 self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n \n         # send from nodes[2] using utxo to nodes[3]\n@@ -167,7 +167,7 @@ def test_double_spend(self):\n             self.nodes[2].getnewaddress(): change,\n         }\n         self.nodes[2].sendrawtransaction(\n-            self.nodes[2].signrawtransaction(\n+            self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n \n         # generate on both sides\n@@ -232,7 +232,7 @@ def test_double_send(self):\n             'txid': utxo['txid'],\n             'vout': utxo['vout'],\n         }]\n-        signedtxres = self.nodes[2].signrawtransaction(\n+        signedtxres = self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n         assert signedtxres['complete']\n "
      },
      {
        "sha": "f16756eeaaa32b6cbb58dd98c92134c8d2632bb7",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         outputs[node1_address] = 1240\n         outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        doublespend = self.nodes[0].signrawtransaction(rawtx)\n+        doublespend = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n         # Create two spends using 1 50 BTC coin each"
      }
    ]
  },
  {
    "sha": "d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjAyMzQ4ODViY2MwN2IxYTdmODVkZWQ3NzMxNTQ5ZWMyZmNmZWZh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-12T22:02:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:01Z"
      },
      "message": "Add test for signrawtransaction\n\nAdd a brief test for signrawtransaction to ensure that compatibility is maintained.",
      "tree": {
        "sha": "a483234aad7e42b19523050aacceecf1d6a7cae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a483234aad7e42b19523050aacceecf1d6a7cae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eefff65a4b0852587e0b06d93c33e2ad439d34e7"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "18829ef4b8a14c65239cb8522a2513e171190584",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d60234885bcc07b1a7f85ded7731549ec2fcfefa/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d60234885bcc07b1a7f85ded7731549ec2fcfefa/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=d60234885bcc07b1a7f85ded7731549ec2fcfefa",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -12,6 +12,7 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n@@ -36,12 +37,15 @@ def successful_signing_test(self):\n         rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], True)\n+        assert rawTxSigned['complete']\n \n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Perform the same test on signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -87,8 +91,7 @@ def script_verification_error_test(self):\n         rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 4) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -109,14 +112,17 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n         rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 8) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -134,6 +140,10 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()"
      }
    ]
  },
  {
    "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2ZlMjE4NjI2YjA1MjA0ZTlmYmM5NWJhNWQ5NWNhMGViNzJlYzli",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-18T23:04:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-18T23:04:57Z"
      },
      "message": "Merge #12308: contrib: Add support for out-of-tree builds in gen-manpages.sh\n\n526e28220a contrib: Add support for out-of-tree builds in gen-manpages.sh (Wladimir J. van der Laan)\n\nPull request description:\n\n  This adds support for setting the environment variable `BUILDDIR` to point to executables that are outside the source directory.\n\n  E.g. to invoke the tool when the build is in $PWD/build:\n\n  ```bash\n  BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n  ```\n\n  This avoids having to manually copy the generated manpages after they end up in the build instead of source path, when setting TOPDIR instead.\n\nTree-SHA512: 8dc6dd7a47a0c014ae7d27f0ac9d86f69238ec6bac8a3007b975bb88c9f37014755c716c5e62604dd91baad2f8a41fd1544cdca3ba4b59bc76602e6593f4a4a7",
      "tree": {
        "sha": "52601806b5cd25049590df2d9ba1149cfd4fb6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52601806b5cd25049590df2d9ba1149cfd4fb6ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaigaZAAoJENLqSFDnUoslC04P/005h3UXCtpdguFjPDOTOeNt\n86CMZYdj4vlDrBhZAYv80tnZQ2RdNG6Eo7sz/bROwlbh9cePcYh02Q+deq/nLYam\nHzJ1bnJnnYRhTDhz40r/nlyWvYNx0wFKRPJTgMB0EOXzFdXR1RfiqHvGdawoAvm0\nu5EfzR1U8lwhLGQz5ERWIHiUaauNhTcKeGQ4HXktdS1Vuzkk80dDb33gFeTGEznk\nDFns4C15LHLDz+vElDYVn80VQgHoYqDGMBQVwhrvQcBFIzyNJSQIF7/LPavKPEDy\ndTzgLj1aUgljTunUu1HzRyzTNT5AD2nDAhe14V2fLtC0WZHZwCwvXTQ/005ccmQK\nO242YGgxnEbfGbcPPHv4y1lafnXZGB/sRult1g3OEG7YnNfhzMcIpfiHv2PKO6KI\nvRhzN9Ir+hIXbpS2eyMl/Al5chDr9MxLRPg5XhkzPJXH84007HqWGg7vKpq9dB3z\nPjaMe3fDjPri3wo+huiUwNdkBbU/XdSeo1tDuXWkO4wuw2WAqaAGx0NyEuexqXVx\nkbsYJjKJMSQ6a1hwRD5rKoq2ckuCoERwK5BQ4FHAlDQnCIXrhXlWI9UH947hTRZ3\nT8bt9Iv0I3OP/zlaj29tqfEz4DCG1l2Vf1m8AuMd4gX+vTyqB7O996u7xzBagMDX\n2UUYTa68v6wM9bDK9kay\n=xam8\n-----END PGP SIGNATURE-----",
        "payload": "tree 52601806b5cd25049590df2d9ba1149cfd4fb6ce\nparent 8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800\nparent 526e28220a351db2f439793b4a310c8863c123a9\nauthor MarcoFalke <falke.marco@gmail.com> 1518995094 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518995097 -0500\n\nMerge #12308: contrib: Add support for out-of-tree builds in gen-manpages.sh\n\n526e28220a contrib: Add support for out-of-tree builds in gen-manpages.sh (Wladimir J. van der Laan)\n\nPull request description:\n\n  This adds support for setting the environment variable `BUILDDIR` to point to executables that are outside the source directory.\n\n  E.g. to invoke the tool when the build is in $PWD/build:\n\n  ```bash\n  BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n  ```\n\n  This avoids having to manually copy the generated manpages after they end up in the build instead of source path, when setting TOPDIR instead.\n\nTree-SHA512: 8dc6dd7a47a0c014ae7d27f0ac9d86f69238ec6bac8a3007b975bb88c9f37014755c716c5e62604dd91baad2f8a41fd1544cdca3ba4b59bc76602e6593f4a4a7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      },
      {
        "sha": "526e28220a351db2f439793b4a310c8863c123a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526e28220a351db2f439793b4a310c8863c123a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/526e28220a351db2f439793b4a310c8863c123a9"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8ca8fa90669abd0081db75c6e4dfbf9bb589b25a",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "patch": "@@ -85,6 +85,14 @@ gen-manpages.sh\n A small script to automatically create manpages in ../../doc/man by running the release binaries with the -help option.\n This requires help2man which can be found at: https://www.gnu.org/software/help2man/\n \n+With in-tree builds this tool can be run from any directory within the\n+repostitory. To use this tool with out-of-tree builds set `BUILDDIR`. For\n+example:\n+\n+```bash\n+BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n+```\n+\n git-subtree-check.sh\n ====================\n "
      },
      {
        "sha": "27c80548c1e1769c915261941b7c003d76e15065",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "patch": "@@ -1,13 +1,15 @@\n #!/bin/bash\n \n TOPDIR=${TOPDIR:-$(git rev-parse --show-toplevel)}\n-SRCDIR=${SRCDIR:-$TOPDIR/src}\n+BUILDDIR=${BUILDDIR:-$TOPDIR}\n+\n+BINDIR=${BINDIR:-$BUILDDIR/src}\n MANDIR=${MANDIR:-$TOPDIR/doc/man}\n \n-BITCOIND=${BITCOIND:-$SRCDIR/bitcoind}\n-BITCOINCLI=${BITCOINCLI:-$SRCDIR/bitcoin-cli}\n-BITCOINTX=${BITCOINTX:-$SRCDIR/bitcoin-tx}\n-BITCOINQT=${BITCOINQT:-$SRCDIR/qt/bitcoin-qt}\n+BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n+BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n+BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n+BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n "
      }
    ]
  },
  {
    "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmM2ZTQ4YjI5ODMxODlkYzBjZTdkZTBhMDM4ZTUzMjliYzA3YjFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:29:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:38:47Z"
      },
      "message": "Merge #10579: [RPC] Split signrawtransaction into wallet and non-wallet RPC command\n\nd60234885b Add test for signrawtransaction (Andrew Chow)\neefff65a4b scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests (Andrew Chow)\n1e79c055cd Split signrawtransaction into wallet and non-wallet (Andrew Chow)\n\nPull request description:\n\n  This PR is part of #10570. It also builds on top of #10571.\n\n  This PR splits `signrawtransaction` into two commands, `signrawtransactionwithkey` and `signrawtransactionwithwallet`. `signrawtransactionwithkey` requires private keys to be passed in and does not use the wallet for any signing. `signrawtransactionwithwallet` uses the wallet to sign a raw transaction and does not have any parameters to take private keys.\n\n  The `signrawtransaction` RPC has been marked as deprecated and will call the appropriate RPC command based upon the parameters given. A test was added to check this behavior is still consistent with the original behavior.\n\n  All tests that used `signrawtransaction` have been updated to use one of the two new RPCs. Most uses were changed to `signrawtransactionwithwallet`. These were changed via a scripted diff.\n\nTree-SHA512: d0adf5b4cd7077639c504ec07bee262a3b94658d34db0a5c86a263b6393f7aa62f45129eafe29a7c861aa58440dd19348ee0c8b685e8a62d6f4adae8ec8f8cb3",
      "tree": {
        "sha": "4dd12a11b09f9e5d734f4c9d78992bcb19da4cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dd12a11b09f9e5d734f4c9d78992bcb19da4cde"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJai4o3AAoJEKY26XYx92fg7G4P/0V1X0ohebHRhytEDe0hubks\nnkSRAZbXtLk3ATBRm/FXM2OCMCfRdHAZkVPoBKhU114KvexbxxuIqBZwruOkKQqZ\nHsKiA4ftvYkwzwJKDBN8UarmKtxBlfZtNb4C5CzxNELpKelN076bQdw+5tPsVlft\nFd0SG0dvgaaJIYPTDE4VS4A4g3e+VomfKPlXywbFAUqv5U+02UQ7b6AzTz5DGOEm\n1A6CviJJ1G2oSX2nGhvPiIwD3Bbuu5nHpQr/nmSQFfPxIjaEpmHJZ8hH6uUZdpp2\n9RVe6iNvwB0wlIoVe4N8OhPo/L+2I5jZpfvACMx/AAC3rV9+WcIVi7Vn6yQYrexd\nI6eWtotf1yFnQkBzOzzJedwJdcchBtoQUY5gsyM98dA01d7NGAyR/qSATy141RWv\nQOkK79yhvLEmR2yIp7A5y2yVdypcC8xoLFUWBZG4pe0VC3QqP/iCHQjBnagxHTAa\ncNRgqHDo7ileYJXJxPHovjef4IwKWA1DNqAuTxO3wNhrUVVebcUOdzMVU6kO9Azg\n7i0zRzqii8l9V+DSY5A3xb4yB/R5pzsjPXMJEZo55UimNHqyFt8Q40/XcSmu37nf\nvQOGHk314qYWyTtkn+JsHPWor4t1MUF26bPFL6KRXkt9QlGDEcOSpPMXtj9r8A9t\n7rb9P5APSNU6laYlBhDK\n=Aor4\n-----END PGP SIGNATURE-----",
        "payload": "tree 4dd12a11b09f9e5d734f4c9d78992bcb19da4cde\nparent dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b\nparent d60234885bcc07b1a7f85ded7731549ec2fcfefa\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1519093762 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1519094327 -0800\n\nMerge #10579: [RPC] Split signrawtransaction into wallet and non-wallet RPC command\n\nd60234885b Add test for signrawtransaction (Andrew Chow)\neefff65a4b scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests (Andrew Chow)\n1e79c055cd Split signrawtransaction into wallet and non-wallet (Andrew Chow)\n\nPull request description:\n\n  This PR is part of #10570. It also builds on top of #10571.\n\n  This PR splits `signrawtransaction` into two commands, `signrawtransactionwithkey` and `signrawtransactionwithwallet`. `signrawtransactionwithkey` requires private keys to be passed in and does not use the wallet for any signing. `signrawtransactionwithwallet` uses the wallet to sign a raw transaction and does not have any parameters to take private keys.\n\n  The `signrawtransaction` RPC has been marked as deprecated and will call the appropriate RPC command based upon the parameters given. A test was added to check this behavior is still consistent with the original behavior.\n\n  All tests that used `signrawtransaction` have been updated to use one of the two new RPCs. Most uses were changed to `signrawtransactionwithwallet`. These were changed via a scripted diff.\n\nTree-SHA512: d0adf5b4cd7077639c504ec07bee262a3b94658d34db0a5c86a263b6393f7aa62f45129eafe29a7c861aa58440dd19348ee0c8b685e8a62d6f4adae8ec8f8cb3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b"
      },
      {
        "sha": "d60234885bcc07b1a7f85ded7731549ec2fcfefa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d60234885bcc07b1a7f85ded7731549ec2fcfefa"
      }
    ],
    "stats": {
      "total": 740,
      "additions": 458,
      "deletions": 282
    },
    "files": [
      {
        "sha": "ac822d6c5e0b29102db645049a8cf99607960d76",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   rpc/protocol.h \\\n   rpc/safemode.h \\\n   rpc/server.h \\\n+  rpc/rawtransaction.h \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\"
      },
      {
        "sha": "1aa4de03ca2dd0bf144267632ed9ee33520affcc",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -70,6 +70,7 @@ const QStringList historyFilter = QStringList()\n     << \"importmulti\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n+    << \"signrawtransactionwithkey\"\n     << \"walletpassphrase\"\n     << \"walletpassphrasechange\"\n     << \"encryptwallet\";\n@@ -624,7 +625,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n         // peer table signal handling - cache selected node ids\n         connect(model->getPeerTableModel(), SIGNAL(layoutAboutToBeChanged()), this, SLOT(peerLayoutAboutToChange()));\n-        \n+\n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n@@ -772,7 +773,7 @@ void RPCConsole::clear(bool clearHistory)\n #else\n     QString clsKey = \"Ctrl-L\";\n #endif\n-\t \n+\n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n@@ -1144,7 +1145,7 @@ void RPCConsole::disconnectSelectedNode()\n {\n     if(!g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)\n@@ -1161,7 +1162,7 @@ void RPCConsole::banSelectedNode(int bantime)\n {\n     if (!clientModel || !g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)"
      },
      {
        "sha": "9d0e0b97d16c2decf2bb06c9554ed5eb636d91c6",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -82,8 +82,8 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"signmessagewithprivkey abc,def\", false, &filtered);\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signrawtransaction(abc)\", false, &filtered);\n-    QVERIFY(filtered == \"signrawtransaction(\u2026)\");\n+    RPCConsole::RPCParseCommandLine(result, \"signrawtransactionwithkey(abc)\", false, &filtered);\n+    QVERIFY(filtered == \"signrawtransactionwithkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrase(help())\", false, &filtered);\n     QVERIFY(filtered == \"walletpassphrase(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrasechange(help(walletpassphrasechange(abc)))\", false, &filtered);"
      },
      {
        "sha": "a95ea0cf92ecad52adb72f863f11980172228e94",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -94,6 +94,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"decoderawtransaction\", 1, \"iswitness\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 1, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n+    { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },"
      },
      {
        "sha": "813afde4db4ee9116528486724e0aaeb64b59e72",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 217,
        "deletions": 134,
        "changes": 351,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <script/script.h>\n@@ -28,7 +29,6 @@\n #include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n #include <wallet/rpcwallet.h>\n-#include <wallet/wallet.h>\n #endif\n \n #include <future>\n@@ -672,88 +672,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-    ObserveSafeMode();\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        LOCK(mempool.cs);\n+        LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n@@ -765,36 +690,14 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n     }\n \n-    bool fGivenKeys = false;\n-    CBasicKeyStore tempKeystore;\n-    if (!request.params[2].isNull()) {\n-        fGivenKeys = true;\n-        UniValue keys = request.params[2].get_array();\n-        for (unsigned int idx = 0; idx < keys.size(); idx++) {\n-            UniValue k = keys[idx];\n-            CBitcoinSecret vchSecret;\n-            bool fGood = vchSecret.SetString(k.get_str());\n-            if (!fGood)\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-            CKey key = vchSecret.GetKey();\n-            if (!key.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n-            tempKeystore.AddKey(key);\n-        }\n-    }\n-#ifdef ENABLE_WALLET\n-    else if (pwallet) {\n-        EnsureWalletIsUnlocked(pwallet);\n-    }\n-#endif\n-\n     // Add previous txouts given in the RPC call:\n-    if (!request.params[1].isNull()) {\n-        UniValue prevTxs = request.params[1].get_array();\n-        for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n+    if (!prevTxsUnival.isNull()) {\n+        UniValue prevTxs = prevTxsUnival.get_array();\n+        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n             const UniValue& p = prevTxs[idx];\n-            if (!p.isObject())\n+            if (!p.isObject()) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n+            }\n \n             UniValue prevOut = p.get_obj();\n \n@@ -808,8 +711,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n-            if (nOut < 0)\n+            if (nOut < 0) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n+            }\n \n             COutPoint out(txid, nOut);\n             std::vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n@@ -834,8 +738,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n-            // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+            // given), add redeemScript to the keystore so it can be signed:\n+            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"txid\", UniValueType(UniValue::VSTR)},\n@@ -847,22 +751,16 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                 if (!v.isNull()) {\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n-                    tempKeystore.AddCScript(redeemScript);\n+                    keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n+                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }\n     }\n \n-#ifdef ENABLE_WALLET\n-    const CKeyStore& keystore = ((fGivenKeys || !pwallet) ? tempKeystore : *pwallet);\n-#else\n-    const CKeyStore& keystore = tempKeystore;\n-#endif\n-\n     int nHashType = SIGHASH_ALL;\n-    if (!request.params[3].isNull()) {\n+    if (!hashType.isNull()) {\n         static std::map<std::string, int> mapSigHashValues = {\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n@@ -871,11 +769,12 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n             {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n         };\n-        std::string strHashType = request.params[3].get_str();\n-        if (mapSigHashValues.count(strHashType))\n+        std::string strHashType = hashType.get_str();\n+        if (mapSigHashValues.count(strHashType)) {\n             nHashType = mapSigHashValues[strHashType];\n-        else\n+        } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sighash param\");\n+        }\n     }\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n@@ -899,8 +798,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(MutableTransactionSignatureCreator(keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n         sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n \n         UpdateTransaction(mtx, i, sigdata);\n@@ -927,6 +827,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                               (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"                  (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    const UniValue& keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    if (!IsDeprecatedRPCEnabled(\"signrawtransaction\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"signrawtransaction is deprecated and will be fully removed in v0.18. \"\n+            \"To use signrawtransaction in v0.17, restart bitcoind with -deprecatedrpc=signrawtransaction.\\n\"\n+            \"Projects should transition to using signrawtransactionwithkey and signrawtransactionwithwallet before upgrading to v0.18\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+}\n+\n UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1025,18 +1107,19 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n }\n \n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     {\"hexstring\",\"allowhighfees\"} },\n-    { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n-\n-    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          {\"txids\", \"blockhash\"} },\n-    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       {\"proof\"} },\n+{ //  category              name                            actor (function)            argNames\n+  //  --------------------- ------------------------        -----------------------     ----------\n+    { \"rawtransactions\",    \"getrawtransaction\",            &getrawtransaction,         {\"txid\",\"verbose\",\"blockhash\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n+    { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n+    { \"rawtransactions\",    \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n+\n+    { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n+    { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },\n };\n \n void RegisterRawTransactionRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2186c1d5e715dc1b5fd574e47784db82620b1ee1",
        "filename": "src/rpc/rawtransaction.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+class CMutableTransaction;\n+class UniValue;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif // BITCOIN_RPC_RAWTRANSACTION_H"
      },
      {
        "sha": "108c1a063e01fcbd956d1655d867da9e00261ffc",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -69,14 +69,6 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false\"));\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), std::runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null badenum\"), std::runtime_error);\n-\n     // Only check failure cases for sendrawtransaction, there's no network to send to...\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), std::runtime_error);\n@@ -119,9 +111,9 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n "
      },
      {
        "sha": "8b95c56a5fc84cd270ab107d362bfda3d8b5623a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 56,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -16,6 +16,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <rpc/mining.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -3236,6 +3237,75 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    // Sign the transaction\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -3731,62 +3801,63 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n-{ //  category              name                        actor (function)           argNames\n-    //  --------------------- ------------------------    -----------------------  ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       {\"hexstring\",\"options\",\"iswitness\"} },\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, {} },\n-    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n-    { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n-    { \"hidden\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n-    { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n-    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },\n-    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               {\"filename\"} },\n-    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            {\"passphrase\"} },\n-    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n-    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n-    { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     {\"address\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",           &gettransaction,           {\"txid\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    {} },\n-    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            {} },\n-    { \"wallet\",             \"importmulti\",              &importmulti,              {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",             &importwallet,             {\"filename\"} },\n-    { \"wallet\",             \"importaddress\",            &importaddress,            {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n-    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        {\"rawtransaction\",\"txoutproof\"} },\n-    { \"wallet\",             \"importpubkey\",             &importpubkey,             {\"pubkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",             &listaccounts,             {\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     {} },\n-    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          {} },\n-    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n-    { \"wallet\",             \"listwallets\",              &listwallets,              {} },\n-    { \"wallet\",             \"lockunspent\",              &lockunspent,              {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                     &movecmd,                  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               {\"address\",\"account\"} },\n-    { \"wallet\",             \"settxfee\",                 &settxfee,                 {\"amount\"} },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              {\"address\",\"message\"} },\n-    { \"wallet\",             \"walletlock\",               &walletlock,               {} },\n-    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n-    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n-    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n-\n-    { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n+{ //  category              name                                actor (function)                argNames\n+    //  --------------------- ------------------------          -----------------------         ----------\n+    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n+    { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n+    { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n+    { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n+    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n+    { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n+    { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n+    { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n+    { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n+    { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n+    { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n+    { \"wallet\",             \"getaccountaddress\",                &getaccountaddress,             {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"account\",\"address_type\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbyaccount,          {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n+    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n+    { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n+    { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n+    { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n+    { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n+    { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n+    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n+    { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n+    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n+    { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n+    { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+    { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"setaccount\",                       &setaccount,                    {\"address\",\"account\"} },\n+    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n+    { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n+    { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n+    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n+    { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n+    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n+\n+    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "84f161abb56374b41c55d1e1a55c827d58a96190",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -27,5 +27,5 @@ void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n-\n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "e5db9e18c72c68aa4e747cef85b6d1d37cf34099",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -70,7 +70,7 @@ def test_disable_flag(self):\n         tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n         tx1.vout = [CTxOut(value, CScript([b'a']))]\n \n-        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_signed = self.nodes[0].signrawtransactionwithwallet(ToHex(tx1))[\"hex\"]\n         tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n         tx1_id = int(tx1_id, 16)\n \n@@ -176,7 +176,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n             tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n-            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+            rawtx = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n@@ -205,7 +205,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.nVersion = 2\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -278,7 +278,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n-        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(ToHex(tx5))[\"hex\"]\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n@@ -338,7 +338,7 @@ def test_bip68_not_consensus(self):\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n \n         # sign tx2\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -388,7 +388,7 @@ def test_version2_relay(self):\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n         tx = FromHex(CTransaction(), rawtxfund)\n         tx.nVersion = 2\n-        tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n+        tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "71d3d040022c07c981cee5af85d40acf025b4286",
        "filename": "test/functional/feature_bip9_softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip9_softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip9_softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip9_softforks.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -51,7 +51,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         return tx\n \n     def sign_transaction(self, node, tx):\n-        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n+        signresult = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "e9a8945e76c01281eecd098a31f9f3dced9b867a",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -41,7 +41,7 @@ def cltv_validate(node, tx, height):\n     tx.nLockTime = height\n \n     # Need to re-sign, since nSequence and nLockTime changed\n-    signed_result = node.signrawtransaction(ToHex(tx))\n+    signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n     new_tx = CTransaction()\n     new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n@@ -54,7 +54,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8b5e5681e459d8d5c62d07e60a631092147db975",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -118,7 +118,7 @@ def create_transaction(self, node, txid, to_address, amount):\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "cef257cf9b8286aefd9aa9b37170a3967d7e2dbf",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -206,7 +206,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n-            tx_signed_hex = node.signrawtransaction(ToHex(tx))['hex']\n+            tx_signed_hex = node.signrawtransactionwithwallet(ToHex(tx))['hex']\n             node.sendrawtransaction(tx_signed_hex)\n             num_transactions += 1\n "
      },
      {
        "sha": "02dcc3e55dcb37b68e25e776fea57e4ba839e7e6",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -42,7 +42,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8a56d3eefa4852ec0a4101ba786ef6e5d03cefbd",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -91,7 +91,7 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n-        completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n+        completetx = from_node.signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)"
      },
      {
        "sha": "7db6a03b452084455ea1cd772c19935ed1d1f105",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -102,7 +102,7 @@ def create_transaction(self, node, txid, to_address, amount):\n         inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "d6ab5ecc37603ab09308763aea53bb255eac0261",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -42,7 +42,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    signed_tx = node.signrawtransaction(txToHex(tx2))\n+    signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n \n     txid = node.sendrawtransaction(signed_tx['hex'], True)\n "
      },
      {
        "sha": "fa1732c4c5512d9d73fe62b281a17d021873a2ec",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -221,7 +221,7 @@ def run_test(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n         tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = FromHex(CTransaction(), tx2_hex)\n         assert(not tx.wit.is_null())\n@@ -559,7 +559,7 @@ def run_test(self):\n \n             self.nodes[1].importaddress(scriptPubKey, \"\", False)\n             rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n-            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            rawtxfund = self.nodes[1].signrawtransactionwithwallet(rawtxfund)[\"hex\"]\n             txid = self.nodes[1].sendrawtransaction(rawtxfund)\n \n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n@@ -578,7 +578,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         for i in script_list:\n             tx.vout.append(CTxOut(10000000, i))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -630,7 +630,7 @@ def create_and_mine_tx_from_txids(self, txids, success = True):\n                 tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n         tx.vout.append(CTxOut(0, CScript()))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "47f7efd3e78b2bc1376dfe7b4f65a232d3efa339",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -32,7 +32,7 @@ def run_test(self):\n         self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n         txF = self.nodes[0].fundrawtransaction(tx)\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -57,7 +57,7 @@ def run_test(self):\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':"
      },
      {
        "sha": "23797d83db3dbad0443be87e74dc05fe8635a917",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -25,7 +25,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signedtx = node.signrawtransaction(rawtx)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n         txid = node.sendrawtransaction(signedtx['hex'])\n         fulltx = node.getrawtransaction(txid, 1)\n         assert(len(fulltx['vout']) == num_outputs) # make sure we didn't generate a change output\n@@ -205,7 +205,7 @@ def run_test(self):\n         for i in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         tx0_id = txid\n         value = send_value\n@@ -229,7 +229,7 @@ def run_test(self):\n         inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]\n         outputs = { self.nodes[0].getnewaddress() : send_value + value - 4*fee }\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n         "
      },
      {
        "sha": "eabed5d63379a9baca93e9139d45dc01579ac2c5",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         # Set the time lock\n         timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111191\", 1)\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n-        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        timelock_tx = self.nodes[0].signrawtransactionwithwallet(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n         assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n "
      },
      {
        "sha": "32e2b47fc9d737eae508dee45829f0f9a132463d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -116,7 +116,7 @@ def run_test(self):\n         inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n         outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"]\n         raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+        tx_hex = self.nodes[0].signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met"
      },
      {
        "sha": "5fb9a361d9f9b4604863645339fad579115660a5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -449,7 +449,7 @@ def run_test(self):\n         rawtx = self.nodes[2].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n \n-        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[2].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n         self.nodes[1].generate(1)\n@@ -503,7 +503,7 @@ def run_test(self):\n \n         #now we need to unlock\n         self.nodes[1].walletpassphrase(\"test\", 600)\n-        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n@@ -564,7 +564,7 @@ def run_test(self):\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n-        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -622,9 +622,9 @@ def run_test(self):\n         assert_greater_than(result[\"changepos\"], -1)\n         assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n \n-        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n         assert(not signedtx[\"complete\"])\n-        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n         assert(signedtx[\"complete\"])\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "0dd7372e6bfb776d0cc5f5753d54dd74ae287d41",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -131,7 +131,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\":utxo_to_use[\"txid\"], \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.999}\n         tx2 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx2_signed = self.nodes[1].signrawtransaction(tx2)[\"hex\"]\n+        tx2_signed = self.nodes[1].signrawtransactionwithwallet(tx2)[\"hex\"]\n         txid_2 = self.nodes[1].sendrawtransaction(tx2_signed)\n \n         # ...and check the result\n@@ -148,7 +148,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_modified = txFromHex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n         tx3 = bytes_to_hex_str(tx3_modified.serialize())\n-        tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n+        tx3_signed = self.nodes[0].signrawtransactionwithwallet(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n@@ -162,7 +162,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\": txid_3, \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.997}\n         tx4 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx4_signed = self.nodes[1].signrawtransaction(tx4)[\"hex\"]\n+        tx4_signed = self.nodes[1].signrawtransactionwithwallet(tx4)[\"hex\"]\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n@@ -174,7 +174,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n         tx3_b = bytes_to_hex_str(tx3_b.serialize())\n-        tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n+        tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n "
      },
      {
        "sha": "e074f5bd7436868ed2dc9f69419c7bcf72975401",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -6,7 +6,7 @@\n \n Test the following RPCs:\n    - createrawtransaction\n-   - signrawtransaction\n+   - signrawtransactionwithwallet\n    - sendrawtransaction\n    - decoderawtransaction\n    - getrawtransaction\n@@ -104,7 +104,7 @@ def run_test(self):\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n         outputs = { self.nodes[0].getnewaddress() : 4.998 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransaction(rawtx)\n+        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n \n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n@@ -202,10 +202,10 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n+        rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n+        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n         self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n@@ -247,11 +247,11 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned1 = self.nodes[1].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned1)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxPartialSigned2 = self.nodes[2].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned2)\n         assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n         rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])"
      },
      {
        "sha": "18829ef4b8a14c65239cb8522a2513e171190584",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -12,6 +12,7 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n@@ -33,15 +34,18 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], True)\n+        assert rawTxSigned['complete']\n \n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Perform the same test on signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -84,11 +88,10 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 4) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -109,14 +112,17 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 8) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -134,6 +140,10 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()"
      },
      {
        "sha": "c52a7397dc85ecc20fcf8c39d7a5b5d33db0e29e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -34,9 +34,9 @@ def run_test(self):\n \n         node0utxos = self.nodes[0].listunspent(1)\n         tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx1)[\"hex\"])\n+        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx1)[\"hex\"])\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n+        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n@@ -55,7 +55,7 @@ def run_test(self):\n \n         txin_spent = self.nodes[1].listunspent(1).pop()\n         tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n-        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransaction(tx3)[\"hex\"])\n+        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransactionwithwallet(tx3)[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()\n "
      },
      {
        "sha": "43982cd09ada0c589ce5981fe18e84d87d493cc8",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -160,7 +160,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n     tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n-        signed = node.signrawtransaction(tx_to_witness)\n+        signed = node.signrawtransactionwithwallet(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:"
      },
      {
        "sha": "34a21ff8fe136c0b063b69ead137aa26fdd06776",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -472,7 +472,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     outputs[to_node.getnewaddress()] = float(amount)\n \n     rawtx = from_node.createrawtransaction(inputs, outputs)\n-    signresult = from_node.signrawtransaction(rawtx)\n+    signresult = from_node.signrawtransactionwithwallet(rawtx)\n     txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n \n     return (txid, signresult[\"hex\"], fee)\n@@ -499,7 +499,7 @@ def create_confirmed_utxos(fee, node, count):\n         outputs[addr1] = satoshi_round(send_value / 2)\n         outputs[addr2] = satoshi_round(send_value / 2)\n         raw_tx = node.createrawtransaction(inputs, outputs)\n-        signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n@@ -533,7 +533,7 @@ def create_tx(node, coinbase, to_address, amount):\n     inputs = [{\"txid\": coinbase, \"vout\": 0}]\n     outputs = {to_address: amount}\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n     return signresult[\"hex\"]\n \n@@ -552,7 +552,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n         newtx = rawtx[0:92]\n         newtx = newtx + txouts\n         newtx = newtx + rawtx[94:]\n-        signresult = node.signrawtransaction(newtx, None, None, \"NONE\")\n+        signresult = node.signrawtransactionwithwallet(newtx, None, \"NONE\")\n         txid = node.sendrawtransaction(signresult[\"hex\"], True)\n         txids.append(txid)\n     return txids"
      },
      {
        "sha": "7e0635d80f7ec5af5019bc763f7aae46342ba040",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -55,7 +55,7 @@ def run_test(self):\n \n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"5\")\n-        signed = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n \n         # Identify the 14.99998btc output\n@@ -67,7 +67,7 @@ def run_test(self):\n         inputs.append({\"txid\":txC, \"vout\":nC})\n         outputs = {}\n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n-        signed2 = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed2 = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n \n         # In mempool txs from self should increase balance from change\n@@ -138,7 +138,7 @@ def run_test(self):\n         outputs = {}\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signed = self.nodes[0].signrawtransaction(tx)\n+        signed = self.nodes[0].signrawtransactionwithwallet(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n         self.nodes[1].generate(1)\n "
      },
      {
        "sha": "f686cb6ea57e32de87f931a7f36b48ab1307a5f4",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -140,7 +140,7 @@ def run_test(self):\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n             outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"] - 3\n             raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            txns_to_send.append(self.nodes[0].signrawtransaction(raw_tx))\n+            txns_to_send.append(self.nodes[0].signrawtransactionwithwallet(raw_tx))\n \n         # Have node 1 (miner) send the transactions\n         self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], True)\n@@ -225,7 +225,7 @@ def run_test(self):\n \n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n-        signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n+        signedRawTx = self.nodes[1].signrawtransactionwithwallet(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n@@ -400,7 +400,7 @@ def run_test(self):\n         node0_balance = self.nodes[0].getbalance()\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n "
      },
      {
        "sha": "3e496248fd82a51dd32c00aade00049c3a1a5d09",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -121,7 +121,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n         \"sequence\": BIP125_SEQUENCE_NUMBER\n     }], {dest_address: Decimal(\"0.0005\"),\n          rbf_node.getrawchangeaddress(): Decimal(\"0.0003\")})\n-    rbfsigned = rbf_node.signrawtransaction(rbfraw)\n+    rbfsigned = rbf_node.signrawtransactionwithwallet(rbfraw)\n     rbfid = rbf_node.sendrawtransaction(rbfsigned[\"hex\"])\n     assert rbfid in rbf_node.getrawmempool()\n \n@@ -150,8 +150,8 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     } for utxo in utxos]\n     output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n     rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n-    signedtx = rbf_node.signrawtransaction(rawtx)\n-    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\n+    signedtx = peer_node.signrawtransactionwithwallet(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n     assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n@@ -162,7 +162,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n-    tx = rbf_node.signrawtransaction(tx)\n+    tx = rbf_node.signrawtransactionwithwallet(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n@@ -277,7 +277,7 @@ def spend_one_input(node, dest_address):\n     rawtx = node.createrawtransaction(\n         [tx_input], {dest_address: Decimal(\"0.00050000\"),\n                      node.getrawchangeaddress(): Decimal(\"0.00049000\")})\n-    signedtx = node.signrawtransaction(rawtx)\n+    signedtx = node.signrawtransactionwithwallet(rawtx)\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n "
      },
      {
        "sha": "25e27166611dd2d326d891faa08737b4be19de87",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -158,7 +158,7 @@ def test_double_spend(self):\n             'vout': utxo['vout'],\n         }]\n         txid1 = self.nodes[1].sendrawtransaction(\n-            self.nodes[1].signrawtransaction(\n+            self.nodes[1].signrawtransactionwithwallet(\n                 self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n \n         # send from nodes[2] using utxo to nodes[3]\n@@ -167,7 +167,7 @@ def test_double_spend(self):\n             self.nodes[2].getnewaddress(): change,\n         }\n         self.nodes[2].sendrawtransaction(\n-            self.nodes[2].signrawtransaction(\n+            self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n \n         # generate on both sides\n@@ -232,7 +232,7 @@ def test_double_send(self):\n             'txid': utxo['txid'],\n             'vout': utxo['vout'],\n         }]\n-        signedtxres = self.nodes[2].signrawtransaction(\n+        signedtxres = self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n         assert signedtxres['complete']\n "
      },
      {
        "sha": "d742ec461831830d7a357ac6dd2a668ecfe9dcb0",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      },
      {
        "sha": "f16756eeaaa32b6cbb58dd98c92134c8d2632bb7",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         outputs[node1_address] = 1240\n         outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        doublespend = self.nodes[0].signrawtransaction(rawtx)\n+        doublespend = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n         # Create two spends using 1 50 BTC coin each"
      }
    ]
  },
  {
    "sha": "42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmUxYjVkOTc5N2I2NWQzY2UxM2E3Y2JhY2UxNWZiZWRiY2Q0MDE4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-02-20T04:20:36Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-02-20T04:21:54Z"
      },
      "message": "[test] Round target fee to 8 decimals in assert_fee_amount\n\nThe output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\nAssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\nThe above looks like the expected fee is 6175 sats when in reality it's 618.",
      "tree": {
        "sha": "0ec33d72d5d4101755e4c556a6b52b9662aed2cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ec33d72d5d4101755e4c556a6b52b9662aed2cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlqLomUACgkQV692LbM1\nMyI/0w/+N9lva3KYt5bVVml0CC7iwm8GWc4dembpkmtaVtIulofbuqZBKdBiX0lU\nM1I+YCPHQdJ3lBzxry2YbVOONnLLAiA25axAmg5bhDr5PgMK9Q/XW2T7ZJ/u7Tzt\n6qiSfzDuDnKK0VcGZKZzb1tx6OH+Qh7htBiCpPb02arjKDaDCPseruVw6BDxXVfL\nbVoL4TFgw2C86leJsasU9gQ1DhUDUtm7qIf2wIcFsuMvLf7/sGQ3w1G544oBMpxd\nZHmCi+G2aN7xsv9ZA6ONmqGLjRBH1iIqvo+X5s3ShitJ7w9O4d7kD+TG+mr1yt9c\n2wqT5UD4C2ME2MoNgW/w5+PrVtds5ttcJEbCAsASS6Jqy7aOyo4atrt8mWAnuYAt\nxe3Ki7Jo8cMLbw5XegAAChgtVYCDEv/Tn0VmgUQ8xtp+kjZCfwEzCyaG4D11ZvBR\n/jlpADPafRS5auzJcztMX3iyp196dafwTAIsgD7HPPtprlUGR052S+r8SyS3wsSt\n8CZIIzjbJjbKFyUdld0Zh3hncvCV6IOqEmCLAlYG8fNTQ12M9fqA4QlyeIm7O6aP\nIORx+sk1bxxmqSumy2ktgBprAMFZs1EI8aVyj6EQPcLHooImQmM832yRwgjuZMU5\nFDRlkkRX6AuIvNoDPKTCeGi7kd8eHAfrsV2EYHnS7wy8nOOiIdc=\n=D5KC\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ec33d72d5d4101755e4c556a6b52b9662aed2cf\nparent dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1519100436 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1519100514 +0900\n\n[test] Round target fee to 8 decimals in assert_fee_amount\n\nThe output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\nAssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\nThe above looks like the expected fee is 6175 sats when in reality it's 618.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "644f2d868aa35fc74e956493b9d7d0d7e8c7fbbf",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
        "patch": "@@ -26,7 +26,7 @@\n \n def assert_fee_amount(fee, tx_size, fee_per_kB):\n     \"\"\"Assert the fee was in range\"\"\"\n-    target_fee = tx_size * fee_per_kB / 1000\n+    target_fee = round(tx_size * fee_per_kB / 1000, 8)\n     if fee < target_fee:\n         raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n     # allow the wallet's estimation to be at most 2 bytes off"
      }
    ]
  },
  {
    "sha": "d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmVlNmUzZTA1NDI2OTgzODMyZWE0ZjRjNWJiNDQ3MjM3NjNkOWQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-20T09:47:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-20T09:48:38Z"
      },
      "message": "init: Remove translation for `-blockmaxsize` option help\n\nMove `-blockmaxsize`, a deprecated option which is replaced by\n`-blockmaxweight`, to debug options and remove the translation.\n\nThis message is absolutely terrible for translators (esp the `* 4`\npart).",
      "tree": {
        "sha": "c652d710a4c4d8c5fc70c7f3b32afbadf8d897d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c652d710a4c4d8c5fc70c7f3b32afbadf8d897d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1cc5c5f9c746156dae462ae9b35801f450477ae9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ee6e3e05426983832ea4f4c5bb44723763d9d8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ee6e3e05426983832ea4f4c5bb44723763d9d8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
        "patch": "@@ -490,7 +490,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", \"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\");\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)"
      }
    ]
  },
  {
    "sha": "a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmU2ZTM5YThiYWYwNzU2MjQwNDI3Y2M1ZGM1ZmNlNWFlYTUxZjBk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-20T10:03:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-20T10:05:03Z"
      },
      "message": "Bugfix: respect user defined configuration file (-conf) when open conf. file from QT settings",
      "tree": {
        "sha": "824ecbd1e9e7b32ee4be8e0a5b68f4a3e7533615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/824ecbd1e9e7b32ee4be8e0a5b68f4a3e7533615"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqL8s8ACgkQHrd2uwPH\nki0vSw/+PaRpFMRMDhFvOpBqORlttNgrjkkkz8QnQVO0hrqw9yoR31cncsVp9X1d\n6NuFBWvATznUylRKALV3fR0BAHQcuFKcYT+PxCAwQ8UXiePsaNQS3DiuRW5skxN6\nmca3bzV2kcPeJaXgKcuLPjcrHe3NHnzsshlO2hNkOMBoMUPVoSuUtViEBnmnVUqj\nYyEp7Nz0BYDHK9YIuUNlr8IRCfAez3R1z6ceu8X3Iz7Hz5HkqqURsHieS52g/gbZ\nry2fE8WQlRN0F/vhRSKIvaSEp0zc6gpRd/LjLubCeV0k7wmNtj5hEZMZ+N/iYA72\nBeXXBUZuUgtZlv4InCj48vneVPc9WPwyyhupCxXokyAnmwd493HatYTdSMRSoMW9\ndAOHD0KZu3e0rRMgsYZfSRUpcYJHAG0W6zUZDFZ7DhzaCrGs2vemAPNlnj0JgOls\njaUTe3STEXfM/D9kA3pegrgJzxOs/pglNpSQwGKRW2e6XDzU8bOdLs2HMoFMiRel\nBoUdEQ1pUBswRC7k1nqUCvoBvRjMNCdEF1WHGMGapKUK6ieDYI/XY3l9NrA+ztNA\nmtsfmzP4fGZor5QWYZi+Bx8JxSLX/WTjTucn8KGOxigXtU7KUrmTesJPJ2/4ux8u\nogmJm+ETbQwBpkhQzWZ3NuZfBejIE/3Zdw1jvbqQTG5eV/Hjl8s=\n=ib7e\n-----END PGP SIGNATURE-----",
        "payload": "tree 824ecbd1e9e7b32ee4be8e0a5b68f4a3e7533615\nparent 8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1519121030 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1519121103 +1100\n\nBugfix: respect user defined configuration file (-conf) when open conf. file from QT settings\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a46e0561b9dccd83ed67d3847c6aceeaadd52174",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
        "patch": "@@ -417,7 +417,7 @@ void openDebugLogfile()\n \n bool openBitcoinConf()\n {\n-    boost::filesystem::path pathConfig = GetConfigFile(BITCOIN_CONF_FILENAME);\n+    boost::filesystem::path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);"
      }
    ]
  },
  {
    "sha": "ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzkxZWE2NGMyYjFkYWVjOGZlZTBiZmRlNDQzYzE4Y2Y4NzU5NWFl",
    "commit": {
      "author": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2018-02-16T17:49:51Z"
      },
      "committer": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2018-02-20T14:42:14Z"
      },
      "message": "[depends] Allow depends system to support armv7l",
      "tree": {
        "sha": "68edbad26dbf5c48d04d8f1b64b23f0a030ec949",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68edbad26dbf5c48d04d8f1b64b23f0a030ec949"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/comments",
    "author": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "14e94ba453a9f31655d69ee64c5a608bc5db2eda",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "patch": "@@ -21,7 +21,6 @@ BUILD_ID_SALT ?= salt\n host:=$(BUILD)\n ifneq ($(HOST),)\n host:=$(HOST)\n-host_toolchain:=$(HOST)-\n endif\n \n ifneq ($(DEBUG),)"
      },
      {
        "sha": "144e5f88b7820ae9d920f1d0e5ad850c44ca67d2",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "patch": "@@ -1,3 +1,7 @@\n+ifneq ($(host),$(build))\n+host_toolchain:=$(host)-\n+endif\n+\n default_host_CC = $(host_toolchain)gcc\n default_host_CXX = $(host_toolchain)g++\n default_host_AR = $(host_toolchain)ar"
      },
      {
        "sha": "37f0c28a529ca1930263c1cdf06a64cf5ccaf7d0",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "patch": "@@ -47,6 +47,7 @@ $(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64\n $(package)_config_opts_i686_linux=linux-generic32\n $(package)_config_opts_arm_linux=linux-generic32\n+$(package)_config_opts_armv7l_linux=linux-generic32\n $(package)_config_opts_aarch64_linux=linux-generic64\n $(package)_config_opts_mipsel_linux=linux-generic32\n $(package)_config_opts_mips_linux=linux-generic32"
      }
    ]
  },
  {
    "sha": "e117cfe45eee9169409e74a44ef4a866be25bc35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTE3Y2ZlNDVlZWU5MTY5NDA5ZTc0YTQ0ZWY0YTg2NmJlMjViYzM1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-20T20:25:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-20T20:25:03Z"
      },
      "message": "Merge #12489: Bugfix: respect user defined configuration file (-conf) in QT settings\n\na6e6e39a8b Bugfix: respect user defined configuration file (-conf) when open conf. file from QT settings (Jonas Schnelli)\n\nPull request description:\n\n  Fixes #12488.\n\n  In master, opening the configuration file from the GUI settings will always open the file \"bitcoin.conf\" regardless of the `-conf=` settings.\n  This PR makes the GUI settings open configuration file function respect the `-conf` option.\n\nTree-SHA512: fb54cc699b4d2a3947f749fdf5f1a51251ffd67d0f6c6a937a5b80f0ba5a5c1085d0eef190453bbc04696d4d76c2c266de0fe9712e65e4bb36116158b54263d4",
      "tree": {
        "sha": "cf5fb71a3d464670d600908d5687cb16bd1d7bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf5fb71a3d464670d600908d5687cb16bd1d7bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJajIQfAAoJENLqSFDnUoslUYMQAInAS/JFGSAdreW3wjP0Ydko\neukqMQyhie6WgZA/22wBjetLzSY90lThD6yWdwbfsx5iumPkiai+7IYT2zfs9gM3\n3xfQWtnEbChojHsas1uIQGtJ2689WDpSb7qNA4JbZi+F50vfnVrJJJCseUMsDXkq\n86EY8bQZ2cqrNx9I6C2fIiNH/wPBOOMrwwPQhTc+EksfQ9luE3NTXg8hCHRdgMKq\n3RefhemFMjdRh0P9mMowprEYJNY8mydHpIklGTbjgJtmstnycpu/jFhgWqNH8W/t\n8qLbP7jsNT5Up7R/JEgDjS0W2lL/r2plA9jMlNwSQy5S09+XSzGrEI01OTbhosjp\n9BsPcR11TDwLab1Bogmx9EAPpAvgSd6VPZVNpc3ptasjbadvmIbCt/5SRMTqB11D\nVxkt7phrFcB+t5HxMj6bOjRAigC//u9F4zfXNq7tN9DZhBWmXQ3N6ANdi5kxCcUr\nIAyyEPnuJzyB0Xz3h248uXbb+nh4Px92y9Cmu7+1sqPzZC9wEmurj5//YXkuK1Gf\nO4vZxYuRMn7cEocRxusMtUv+8ThrmJJkJNEpkLorj/J+9Qhz5MZxpybaoKzXSvAp\n3PKuI06BTS8+4dKeolFNyr9Wk9WMUe7pilJZIdUPyqcWi9XiUnTm1yH3yQz5IrSx\nC8LrEoz4aHiS0tJQGZbY\n=M/A/\n-----END PGP SIGNATURE-----",
        "payload": "tree cf5fb71a3d464670d600908d5687cb16bd1d7bc5\nparent ffc6e48b2983189dc0ce7de0a038e5329bc07b1b\nparent a6e6e39a8baf0756240427cc5dc5fce5aea51f0d\nauthor MarcoFalke <falke.marco@gmail.com> 1519158300 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519158303 -0500\n\nMerge #12489: Bugfix: respect user defined configuration file (-conf) in QT settings\n\na6e6e39a8b Bugfix: respect user defined configuration file (-conf) when open conf. file from QT settings (Jonas Schnelli)\n\nPull request description:\n\n  Fixes #12488.\n\n  In master, opening the configuration file from the GUI settings will always open the file \"bitcoin.conf\" regardless of the `-conf=` settings.\n  This PR makes the GUI settings open configuration file function respect the `-conf` option.\n\nTree-SHA512: fb54cc699b4d2a3947f749fdf5f1a51251ffd67d0f6c6a937a5b80f0ba5a5c1085d0eef190453bbc04696d4d76c2c266de0fe9712e65e4bb36116158b54263d4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e117cfe45eee9169409e74a44ef4a866be25bc35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      },
      {
        "sha": "a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a46e0561b9dccd83ed67d3847c6aceeaadd52174",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e117cfe45eee9169409e74a44ef4a866be25bc35/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e117cfe45eee9169409e74a44ef4a866be25bc35/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e117cfe45eee9169409e74a44ef4a866be25bc35",
        "patch": "@@ -417,7 +417,7 @@ void openDebugLogfile()\n \n bool openBitcoinConf()\n {\n-    boost::filesystem::path pathConfig = GetConfigFile(BITCOIN_CONF_FILENAME);\n+    boost::filesystem::path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);"
      }
    ]
  },
  {
    "sha": "eacc5b24f832b8fde4119622970b4e3f72c069b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWNjNWIyNGY4MzJiOGZkZTQxMTk2MjI5NzBiNGUzZjcyYzA2OWI1",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-20T22:16:33Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-20T22:16:37Z"
      },
      "message": "Declare CMutableTransaction a struct in rawtransaction.h\n\nBecause it's a struct.",
      "tree": {
        "sha": "7dd38cca12bdd85b13fa429498434cb06380da54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dd38cca12bdd85b13fa429498434cb06380da54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJajJ5QAAoJEG7l83hfeLNF8WQIAKPxpVoWVNV6BXGVLB26gMhf\nogc6EBHYeTHtlJkEhHcaXBP61ROqlM6UOJS0gT1rEI13Pah0PnUodNBeAtpjG9ju\nNl/M1anXAa2Hk17uLXwHTzBF01MQTY5nZvpD9UqmmqcEVPhxR3b8kyHI/hhxWl2n\nkLZSFrElb65WMxKtVHMp0/VQsrqIuDOsb4zJDQLsK2eW+X160j8/LoXaAWzbOjR5\nkO5OwAb5xfLBQ0tebgxcMKBY4KoUTiYMIaHHRxasRy6IHzy0FCDqBRfApZxA6UhS\nkhdfF5U5Pj7A8rybWQ6D/A73X+qsq39vq3VRPMreeyLH+CkhWWU5TRy6YI4SbD0=\n=OekD\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dd38cca12bdd85b13fa429498434cb06380da54\nparent e117cfe45eee9169409e74a44ef4a866be25bc35\nauthor Ben Woosley <ben.woosley@gmail.com> 1519164993 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1519164997 -0800\n\nDeclare CMutableTransaction a struct in rawtransaction.h\n\nBecause it's a struct.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eacc5b24f832b8fde4119622970b4e3f72c069b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e117cfe45eee9169409e74a44ef4a866be25bc35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e117cfe45eee9169409e74a44ef4a866be25bc35"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec9d1f2cf06b090adca276e473e4aae7776a19dc",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eacc5b24f832b8fde4119622970b4e3f72c069b5/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eacc5b24f832b8fde4119622970b4e3f72c069b5/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=eacc5b24f832b8fde4119622970b4e3f72c069b5",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_RPC_RAWTRANSACTION_H\n \n class CBasicKeyStore;\n-class CMutableTransaction;\n+struct CMutableTransaction;\n class UniValue;\n \n /** Sign a transaction with the given keystore and previous transactions */"
      }
    ]
  },
  {
    "sha": "e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGM5MjRjNTE3OTJlMmI3YzI1NmEwMGRmZDAzYWE4YzllYmEzY2Vh",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-02-21T16:08:20Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-02-21T16:08:20Z"
      },
      "message": "createmultisig no longer takes addresses",
      "tree": {
        "sha": "4fe6c04b6a3ff4033f84ccdaacd58696c4efbfd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fe6c04b6a3ff4033f84ccdaacd58696c4efbfd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "aba004a63984a610388e29daa4f3cb9cd08cdd34",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
        "patch": "@@ -263,7 +263,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n+            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n             \"     [\\n\"\n             \"       \\\"key\\\"                    (string) The hex-encoded public key\\n\""
      }
    ]
  },
  {
    "sha": "e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGZmY2FjYzIxODdkMzQxOWM4ZWExMmI4MmZiMDZkODJkODc1MWQy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T20:42:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T20:42:49Z"
      },
      "message": "Merge #12494: Declare CMutableTransaction a struct in rawtransaction.h\n\neacc5b24f8 Declare CMutableTransaction a struct in rawtransaction.h (Ben Woosley)\n\nPull request description:\n\n  Because it's a struct.\n\n  Fix for #10579 - this was called out in code review. https://github.com/bitcoin/bitcoin/pull/10579#discussion_r168936821\n\nTree-SHA512: 10758a667218481de6f50b5ed874e92eb350c621f7a6355fba7da6ab42b09e1764f827e89491c8663e554fcfd23f124b299f968237c6ad1ff7819e211bd7e521",
      "tree": {
        "sha": "7dd38cca12bdd85b13fa429498434cb06380da54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dd38cca12bdd85b13fa429498434cb06380da54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJajdnJAAoJENLqSFDnUoslatMP+wbQPJI9JEYdHp6JU5gdNvkq\nusg+VlMYTCLOulDNKfQCW4PA8W3sC0WvxOn+0mMKL3bQIV60aTO0SaNlgEfwdBS7\nxbXJEtEZJ9e6MioxXq9purX/FmOVxnIzL+tdK20D8zQtp+wAwlotOaRNAhsF+NGD\nJVwg8ygVNX41Hv4PxBX7wGDUslicycWF2NdUMHxNBUxYamMzvqKjiGzVr78xZJej\nL9q4LzB5eBe1PYXh3APZJfyMHWSD1XLJLQi6wtrAap9ngARx7izu+xWahWl5sG9n\nlyVor3pOUFGdCtIFRq7SHoo7GcaaVXLL54v6iD+qPeMstpfpvNdpMtyE96WwUGTr\ne68nAiKWRR/8peowK9ilHe07Wwx3RhW5EkRecCa0FRk0ineM9t/nqNagxEfY7tyw\naAUyOzUW6mJUSwINj/1i2v/9Fja0scVQYxODy5dnDTRN2ojx0rP9qXctuww3Hk1f\ngkyCMKo9Md4HQuCJ5cnS2aAzvbl3PX8XDhcmkvZf7GbZMHfped/ZTk9CwxqCFPf+\nY6hgmbeaOyMgKUtgFk8wNI727ErR1Nzb1+4CxFkeO5WjeSeg6sdrjNRb3NCq5uR+\nmgZUWEwas7aX+Umjas1vQZaRkr6euVQod1mPB8kVSHPYRsFjxV2z8QirhDc45UE4\nrRKV8620GKlICpDrvofr\n=3+VF\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dd38cca12bdd85b13fa429498434cb06380da54\nparent e117cfe45eee9169409e74a44ef4a866be25bc35\nparent eacc5b24f832b8fde4119622970b4e3f72c069b5\nauthor MarcoFalke <falke.marco@gmail.com> 1519245767 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519245769 -0500\n\nMerge #12494: Declare CMutableTransaction a struct in rawtransaction.h\n\neacc5b24f8 Declare CMutableTransaction a struct in rawtransaction.h (Ben Woosley)\n\nPull request description:\n\n  Because it's a struct.\n\n  Fix for #10579 - this was called out in code review. https://github.com/bitcoin/bitcoin/pull/10579#discussion_r168936821\n\nTree-SHA512: 10758a667218481de6f50b5ed874e92eb350c621f7a6355fba7da6ab42b09e1764f827e89491c8663e554fcfd23f124b299f968237c6ad1ff7819e211bd7e521\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e117cfe45eee9169409e74a44ef4a866be25bc35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e117cfe45eee9169409e74a44ef4a866be25bc35"
      },
      {
        "sha": "eacc5b24f832b8fde4119622970b4e3f72c069b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eacc5b24f832b8fde4119622970b4e3f72c069b5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec9d1f2cf06b090adca276e473e4aae7776a19dc",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_RPC_RAWTRANSACTION_H\n \n class CBasicKeyStore;\n-class CMutableTransaction;\n+struct CMutableTransaction;\n class UniValue;\n \n /** Sign a transaction with the given keystore and previous transactions */"
      }
    ]
  },
  {
    "sha": "0e265916d1c6a63e4a3821dab9db597b5ec64b46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTI2NTkxNmQxYzZhNjNlNGEzODIxZGFiOWRiNTk3YjVlYzY0YjQ2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T22:01:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T22:01:26Z"
      },
      "message": "Merge #12503: [RPC] createmultisig no longer takes addresses\n\ne4c924c517 createmultisig no longer takes addresses (Gregory Sanders)\n\nPull request description:\n\nTree-SHA512: a6a752ef2282c5c893dd1a6ff5ccab42d3de1989847af627d82d41605ea19abc0aaf68567a62b6478933ba7eea09f911087b410ba7d3a815331ef15ec1ff9df0",
      "tree": {
        "sha": "573600393242dea530b953de614e095f96f34ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/573600393242dea530b953de614e095f96f34ad4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJajew2AAoJENLqSFDnUoslnisQAKEQZqX2hJm062VcvBANPfiZ\nJIuZackxstMqP0WEEK7pw3nF8lK3nksAhJXWo3IhIAI6i9qFl4GoQpfdujEgMEOW\n1NCglpm2NyJsRTiIuUoODqDHsOPEL6OTcCHBmRjU85fsXKmCviggaj106cTojKvr\nouvggR3gKLxeSHoM2UoSg1WLiXSJsal3SpTcoATXlAUtLPNpCPOkx/NAL5Et2GfB\nH8/WTv55Hcyla92q5BivvjcG3nzLhpUXQQAVE8DNjlcBvYfuiBYpPkiry9ZqblKr\nHKxetCYZfRtLTHyd9r0RJPJyGfpfD9zuoQsrKzNjS0cJUjgfGswlWGfpJZelBbXX\nWeSW3OoloQ0i+jPcZdeYEKZyk18NHPKAY6c9wmNyJ3fo1H70/hFJIvfhnxcRvDqE\nNxJJNOYakaIHAmT7tfUD2xKHNggv6jXzwvH9AI+MQTvvIx4MOhbNxCQPSdbMnB4X\nYj01vaxtQX43PUWlNcMoi6OLDE6QqFKZUW/uL+cSPvlN6925DcZ9iQNU3QkmYJvK\ncvshrs7wyPKA6U9tMfpGmiTcGOD5KVrrIwA7PTIZ89lztv8q/xGsrqLVJzYRRBM6\nlJU919YlMWGPz/pAuMoKlquOlX6U898cYgpfnQHYqYK0fDo6cuhNSezl7V4h388O\n/oDw0h43388aSdEJXVsI\n=xWXm\n-----END PGP SIGNATURE-----",
        "payload": "tree 573600393242dea530b953de614e095f96f34ad4\nparent e4ffcacc2187d3419c8ea12b82fb06d82d8751d2\nparent e4c924c51792e2b7c256a00dfd03aa8c9eba3cea\nauthor MarcoFalke <falke.marco@gmail.com> 1519250484 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519250486 -0500\n\nMerge #12503: [RPC] createmultisig no longer takes addresses\n\ne4c924c517 createmultisig no longer takes addresses (Gregory Sanders)\n\nPull request description:\n\nTree-SHA512: a6a752ef2282c5c893dd1a6ff5ccab42d3de1989847af627d82d41605ea19abc0aaf68567a62b6478933ba7eea09f911087b410ba7d3a815331ef15ec1ff9df0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2"
      },
      {
        "sha": "e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f573c7dbeb4573771140445f0f2137963654a25c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e265916d1c6a63e4a3821dab9db597b5ec64b46/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e265916d1c6a63e4a3821dab9db597b5ec64b46/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "patch": "@@ -98,7 +98,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n+            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n             \"     [\\n\"\n             \"       \\\"key\\\"                    (string) The hex-encoded public key\\n\""
      }
    ]
  },
  {
    "sha": "4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTI4Zjc0ZmMyMDJhYThmZjE1MmZmMjRmODMxOTMzOGZkYWYzZmQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T07:17:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T07:18:02Z"
      },
      "message": "Merge #12487: init: Remove translation for `-blockmaxsize` option help\n\nd2ee6e3 init: Remove translation for `-blockmaxsize` option help (Wladimir J. van der Laan)\n\nPull request description:\n\n  Move `-blockmaxsize`, a deprecated option which is replaced by `-blockmaxweight`, to debug options and remove the translation.\n\n  This message is absolutely terrible for translators (esp the `* 4` part).\n\n  (for 0.17 we should probably remove this option completely?)\n\n  (reported by French Language Coordinator)\n\nTree-SHA512: 379150c9217672d2f2f93b4c02a3ac638e77ca56fb518e30c56c46d59f89eac422b4f540e70a9abd3c6ad653ac4b786d4734621b18f93804885d81e223f1a908",
      "tree": {
        "sha": "4b78037afda204bfaf67d04260683cf4b8f56604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b78037afda204bfaf67d04260683cf4b8f56604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJajm6qAAoJEB5K7WKYbNJdRWEH/0UqNdcaWPeRC/lp15Op6nsm\nPUsRrQ+VZlZ1bCWC3Va8ysCK4fzTJ2i6xrcU5wtgyXikE/jN4NjSNgMgBivpHy8q\n/TtwTeVM7modz4PBWY8mhjA2bvsT47c08oXWQwn4l2+R1CQ2OXfscztqZy5mPYEv\nVaZJHf91Ee2GTvLRJUCiogRy+S3ujMyYMA8wa7cPJDv9k994FTWHEBqrLeznsPc3\nlKyWNfbYfMF5uSYjLpPe3NRZZ/w31lsYaGI10TfYOlNC/4E0+kNqMwKKUeF2qbLH\nvbm1RlRtT5GZRDbekmz1FimERlDNnuKXIhlzNzr3s0pctJG4eovA4uUfI4MzcY8=\n=O69w\n-----END PGP SIGNATURE-----",
        "payload": "tree 4b78037afda204bfaf67d04260683cf4b8f56604\nparent 0e265916d1c6a63e4a3821dab9db597b5ec64b46\nparent d2ee6e3e05426983832ea4f4c5bb44723763d9d8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519283834 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519283882 +0100\n\nMerge #12487: init: Remove translation for `-blockmaxsize` option help\n\nd2ee6e3 init: Remove translation for `-blockmaxsize` option help (Wladimir J. van der Laan)\n\nPull request description:\n\n  Move `-blockmaxsize`, a deprecated option which is replaced by `-blockmaxweight`, to debug options and remove the translation.\n\n  This message is absolutely terrible for translators (esp the `* 4` part).\n\n  (for 0.17 we should probably remove this option completely?)\n\n  (reported by French Language Coordinator)\n\nTree-SHA512: 379150c9217672d2f2f93b4c02a3ac638e77ca56fb518e30c56c46d59f89eac422b4f540e70a9abd3c6ad653ac4b786d4734621b18f93804885d81e223f1a908\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e265916d1c6a63e4a3821dab9db597b5ec64b46"
      },
      {
        "sha": "d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ee6e3e05426983832ea4f4c5bb44723763d9d8"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1cc5c5f9c746156dae462ae9b35801f450477ae9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528f74fc202aa8ff152ff24f8319338fdaf3fd6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528f74fc202aa8ff152ff24f8319338fdaf3fd6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "patch": "@@ -490,7 +490,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", \"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\");\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)"
      }
    ]
  },
  {
    "sha": "aae64a21ba25ca86fe2bbb581681dc20d613fb44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWU2NGEyMWJhMjVjYTg2ZmUyYmJiNTgxNjgxZGMyMGQ2MTNmYjQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T15:03:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T15:04:42Z"
      },
      "message": "Merge #12451: Bump leveldb subtree\n\n835a21b Squashed 'src/leveldb/' changes from c521b3ac65..64052c76c5 (MarcoFalke)\n\nPull request description:\n\n  Pull in changes from https://github.com/bitcoin/bitcoin/pull/11674#issuecomment-348174674.\n\n  Merges cleanly into master and 0.16 branch.\n\nTree-SHA512: 819c042c0dfac8dc3078fc182c1e22d4a85b343967475d3389be5b5b056361114d8c9892437cd1dc4b45808c27880c0e166e047afc2c2bd2bbc33e55336a8c33",
      "tree": {
        "sha": "ee4d90384abb7d859dba05c42bcd3af9477e5552",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee4d90384abb7d859dba05c42bcd3af9477e5552"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJajtwKAAoJEB5K7WKYbNJdbQgIAIcm1bj1TBuMIJZjX4d/P6XF\naUjRasVPGBn8xvMrqhArkLK/Z9lWN7KlF9NDOGaGycGz3FWiLgt+9J1KJMSYnJzq\nhOKsw9kDFquJz6KfxGRDIaP8Y5Tuqagv40UqRjvjs3mi9cR0y8oUPv3sNyRr22R9\nKvLzqKKDx2BLhbNUfEITpwNTAh8T1hG03w04K4Jv5ywLACQEb8PeavZ0ywSPeiSX\nO3VJOI+FJH0kA90jgsls1r8D7uarUiwBiySXAS2J6XnsI21b1C7ewOkalg3SdMd7\nB59VQ/NkzInan9zc28PhBdwZZDXZEH3tfc09eNzA6s+ttvZO71PMCiY3/PWUiE4=\n=s+pn\n-----END PGP SIGNATURE-----",
        "payload": "tree ee4d90384abb7d859dba05c42bcd3af9477e5552\nparent 4528f74fc202aa8ff152ff24f8319338fdaf3fd6\nparent faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519311809 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519311882 +0100\n\nMerge #12451: Bump leveldb subtree\n\n835a21b Squashed 'src/leveldb/' changes from c521b3ac65..64052c76c5 (MarcoFalke)\n\nPull request description:\n\n  Pull in changes from https://github.com/bitcoin/bitcoin/pull/11674#issuecomment-348174674.\n\n  Merges cleanly into master and 0.16 branch.\n\nTree-SHA512: 819c042c0dfac8dc3078fc182c1e22d4a85b343967475d3389be5b5b056361114d8c9892437cd1dc4b45808c27880c0e166e047afc2c2bd2bbc33e55336a8c33\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4528f74fc202aa8ff152ff24f8319338fdaf3fd6"
      },
      {
        "sha": "faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3bb58e560aa7c099c7937d226315d1ed46273d43",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -414,7 +414,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,\n          status.ok()) {\n     if (record.size() < 12) {\n       reporter.Corruption(\n-          record.size(), Status::Corruption(\"log record too small\"));\n+          record.size(), Status::Corruption(\"log record too small\", fname));\n       continue;\n     }\n     WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "d06d64d640b19f60a37571dcb887be5f36ce1514",
        "filename": "src/leveldb/db/leveldbutil.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/leveldbutil.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/leveldbutil.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/leveldbutil.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -19,6 +19,7 @@ class StdoutPrinter : public WritableFile {\n   virtual Status Close() { return Status::OK(); }\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n+  virtual std::string GetName() const { return \"[stdout]\"; }\n };\n \n bool HandleDumpCommand(Env* env, char** files, int num) {"
      },
      {
        "sha": "8b6ad136d7dab58717e7d2ced614e1fb78024d8a",
        "filename": "src/leveldb/db/log_reader.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_reader.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -186,7 +186,7 @@ uint64_t Reader::LastRecordOffset() {\n }\n \n void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n-  ReportDrop(bytes, Status::Corruption(reason));\n+  ReportDrop(bytes, Status::Corruption(reason, file_->GetName()));\n }\n \n void Reader::ReportDrop(uint64_t bytes, const Status& reason) {"
      },
      {
        "sha": "7281e3d3457fe3a088a18472c25b699b986b42d5",
        "filename": "src/leveldb/db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/repair.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -203,7 +203,7 @@ class Repairer {\n     while (reader.ReadRecord(&record, &scratch)) {\n       if (record.size() < 12) {\n         reporter.Corruption(\n-            record.size(), Status::Corruption(\"log record too small\"));\n+            record.size(), Status::Corruption(\"log record too small\", logname));\n         continue;\n       }\n       WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "68c0614a59e5e98d635cf9b8b5d8b2ff0f75be22",
        "filename": "src/leveldb/helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/helpers/memenv/memenv.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -176,6 +176,7 @@ class SequentialFileImpl : public SequentialFile {\n     return Status::OK();\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n   uint64_t pos_;\n@@ -196,6 +197,7 @@ class RandomAccessFileImpl : public RandomAccessFile {\n     return file_->Read(offset, n, result, scratch);\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };\n@@ -218,6 +220,7 @@ class WritableFileImpl : public WritableFile {\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };"
      },
      {
        "sha": "275d441eaeee49aa3418b0f672d03bd61d8bab6c",
        "filename": "src/leveldb/include/leveldb/env.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/env.h?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -191,6 +191,9 @@ class SequentialFile {\n   // REQUIRES: External synchronization\n   virtual Status Skip(uint64_t n) = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   SequentialFile(const SequentialFile&);\n@@ -215,6 +218,9 @@ class RandomAccessFile {\n   virtual Status Read(uint64_t offset, size_t n, Slice* result,\n                       char* scratch) const = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   RandomAccessFile(const RandomAccessFile&);\n@@ -234,6 +240,9 @@ class WritableFile {\n   virtual Status Flush() = 0;\n   virtual Status Sync() = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   WritableFile(const WritableFile&);"
      },
      {
        "sha": "285e1c0de39d7f6a915f1812c9f18c17a4bcf908",
        "filename": "src/leveldb/table/format.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/format.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -82,7 +82,7 @@ Status ReadBlock(RandomAccessFile* file,\n   }\n   if (contents.size() != n + kBlockTrailerSize) {\n     delete[] buf;\n-    return Status::Corruption(\"truncated block read\");\n+    return Status::Corruption(\"truncated block read\", file->GetName());\n   }\n \n   // Check the crc of the type and the block contents\n@@ -92,7 +92,7 @@ Status ReadBlock(RandomAccessFile* file,\n     const uint32_t actual = crc32c::Value(data, n + 1);\n     if (actual != crc) {\n       delete[] buf;\n-      s = Status::Corruption(\"block checksum mismatch\");\n+      s = Status::Corruption(\"block checksum mismatch\", file->GetName());\n       return s;\n     }\n   }\n@@ -119,13 +119,13 @@ Status ReadBlock(RandomAccessFile* file,\n       size_t ulength = 0;\n       if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n         delete[] buf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       char* ubuf = new char[ulength];\n       if (!port::Snappy_Uncompress(data, n, ubuf)) {\n         delete[] buf;\n         delete[] ubuf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       delete[] buf;\n       result->data = Slice(ubuf, ulength);\n@@ -135,7 +135,7 @@ Status ReadBlock(RandomAccessFile* file,\n     }\n     default:\n       delete[] buf;\n-      return Status::Corruption(\"bad block type\");\n+      return Status::Corruption(\"bad block type\", file->GetName());\n   }\n \n   return Status::OK();"
      },
      {
        "sha": "4676bc2240c97b1eceb3e9961e5cee832b58492f",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -121,6 +121,8 @@ class PosixSequentialFile: public SequentialFile {\n     }\n     return Status::OK();\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // pread() based random-access\n@@ -172,6 +174,8 @@ class PosixRandomAccessFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // mmap() based random-access\n@@ -206,6 +210,8 @@ class PosixMmapReadableFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n class PosixWritableFile : public WritableFile {\n@@ -287,6 +293,8 @@ class PosixWritableFile : public WritableFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n static int LockOrUnlock(int fd, bool lock) {"
      },
      {
        "sha": "81380216bb09b7afd9c85760bb729a28716bb069",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -78,6 +78,7 @@ class Win32SequentialFile : public SequentialFile\n     virtual Status Read(size_t n, Slice* result, char* scratch);\n     virtual Status Skip(uint64_t n);\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init();\n     void _CleanUp();\n@@ -94,6 +95,7 @@ class Win32RandomAccessFile : public RandomAccessFile\n     virtual ~Win32RandomAccessFile();\n     virtual Status Read(uint64_t offset, size_t n, Slice* result,char* scratch) const;\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init(LPCWSTR path);\n     void _CleanUp();\n@@ -114,6 +116,7 @@ class Win32WritableFile : public WritableFile\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n+    virtual std::string GetName() const { return filename_; }\n private:\n     std::string filename_;\n     ::HANDLE _hFile;"
      }
    ]
  },
  {
    "sha": "fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRiMzljYTYyMzc3ODEzNDZjYTNkYTMxOWUyYmQ5ZTQ4YTVhNjA0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-17T19:29:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-22T19:53:14Z"
      },
      "message": "test: Plug memory leaks and stack-use-after-scope",
      "tree": {
        "sha": "1f441104a6e3bd684d1a7c1e3669b07615a437f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f441104a6e3bd684d1a7c1e3669b07615a437f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJajx+qAAoJEM4rdWl+aaVIO3oMAKC+B6Ei70kD2mtRCTpF0ueW\n6kR0tEEhAaQVUNkBEwBPi0R7LXzCofCvxf7xRJHcjSasXQXFSh6pjiHTVjwLAMWh\nC94LtoQidBISSwNac9X4/xS4UoZqm85nPILmZzVpjvYlVx0glyGSyjXH6QOHCOx1\nNT29Yvqn+O0deuJ7UTIrpV8Fvde8pSenzCburL1ohmczedxofXrkn5XN4V0k6ZYx\nQkquowW9Wav5G0Wnz6hAAgC+ibSzyn/YDb1hm1hD2k2MiV449ibWVSfb63sdx7t5\naV/U8fEzqJcb6GyOwtFbLG5q/iky6AQOJuvfFt2AcODRftcO3wEXskSByeLZcH3J\n8eeVkKUOZecE5ssyCyoiebi7OZuowc+0o67GL1zYQCxx8gznjd0IfqB62Tvb9Zbh\nUDikXgw/IZRalrPBH/A2QvPyD/9SyDcCY9CM3/6fE9E8l0mI2b/L0na9URKrZvV7\nI8oLJBVbGOOzCQTc1+0jLljTU3fNyfLUYmUVLhRjnw==\n=eAdK\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f441104a6e3bd684d1a7c1e3669b07615a437f0\nparent 27c59dc502f29cf1d76290556c21e366145e3b2e\nauthor MarcoFalke <falke.marco@gmail.com> 1518895796 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519329194 -0500\n\ntest: Plug memory leaks and stack-use-after-scope\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6f438b60e97623dc12ae2c3b4e0f6a5ac04cce02",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -37,11 +37,6 @@ static void CoinSelection(benchmark::State& state)\n     LOCK(wallet.cs_wallet);\n \n     while (state.KeepRunning()) {\n-        // Empty wallet.\n-        for (COutput output : vCoins)\n-            delete output.tx;\n-        vCoins.clear();\n-\n         // Add coins.\n         for (int i = 0; i < 1000; i++)\n             addCoin(1000 * COIN, wallet, vCoins);\n@@ -53,6 +48,12 @@ static void CoinSelection(benchmark::State& state)\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);\n+\n+        // Empty wallet.\n+        for (COutput& output : vCoins) {\n+            delete output.tx;\n+        }\n+        vCoins.clear();\n     }\n }\n "
      },
      {
        "sha": "8e0ec5243b13e72f7b0dabca42b2d50284f0e205",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -406,11 +406,11 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         boost::thread_group tg;\n         std::mutex m;\n         std::condition_variable cv;\n+        bool has_lock{false};\n+        bool has_tried{false};\n+        bool done{false};\n+        bool done_ack{false};\n         {\n-            bool has_lock {false};\n-            bool has_tried {false};\n-            bool done {false};\n-            bool done_ack {false};\n             std::unique_lock<std::mutex> l(m);\n             tg.create_thread([&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());"
      },
      {
        "sha": "95c4825b840f0522bd29a9faac4b9be6b96e933b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -28,6 +28,9 @@ void CConnmanTest::AddNode(CNode& node)\n void CConnmanTest::ClearNodes()\n {\n     LOCK(g_connman->cs_vNodes);\n+    for (CNode* node : g_connman->vNodes) {\n+        delete node;\n+    }\n     g_connman->vNodes.clear();\n }\n "
      }
    ]
  },
  {
    "sha": "8c33961313d9a6fd9e6e14f136057468a929b3e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzMzOTYxMzEzZDlhNmZkOWU2ZTE0ZjEzNjA1NzQ2OGE5MjliM2Ux",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:01:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:07:27Z"
      },
      "message": "Merge #12486: [test] Round target fee to 8 decimals in assert_fee_amount\n\n42e1b5d [test] Round target fee to 8 decimals in assert_fee_amount (Karl-Johan Alm)\n\nPull request description:\n\n  The output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\n  ```\n  AssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\n  ```\n  The above looks like the expected fee is 6175 sats when in reality it's 618.\n\nTree-SHA512: ddbff2926a88890d6e34a58db36f0b15a917a80064be6e40e9bcbec3f05ae6202d02adcd7873733945b043fa121d4a56dd930446ec368078fe1935cbfff898ce",
      "tree": {
        "sha": "5a88cc9d7394fdb8819150dad28625f804917cf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a88cc9d7394fdb8819150dad28625f804917cf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJakDw/AAoJEB5K7WKYbNJdPBsH/1M+apfcrOVV1KtQxlOiKo9Q\n0XWiBtFov+vSjZceNIMRFIErVGUkvAaCjTUF8cO8U4tbACPpgpGumvwOQEv9sYzW\nbdrmojuJ4XlfazUF1fNeqdPUaGPmV9B1uidLYmVtfYtOrJ/KtbS3AcDXmwF2CBBG\nV4arMKTEfBAFbwaGVD9jG/Js38HRus7IU2QGPdsrMvqPVlK6IMvLGf8kKQETMFRy\n5jfCRjMAm/RmhVil6P7fNbDuHjr/ZhsbLoOctOkyieSIr/dDiOjjOKh2ZYOTVyYF\nW+FLgbG1VKj/qryFLecPV4ve0T5HV4clJPFMqj/Z2JZE3n4P1khpwL/hCR0MK4o=\n=+p3e\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a88cc9d7394fdb8819150dad28625f804917cf5\nparent aae64a21ba25ca86fe2bbb581681dc20d613fb44\nparent 42e1b5d9797b65d3ce13a7cbace15fbedbcd4018\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519401693 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519402047 +0100\n\nMerge #12486: [test] Round target fee to 8 decimals in assert_fee_amount\n\n42e1b5d [test] Round target fee to 8 decimals in assert_fee_amount (Karl-Johan Alm)\n\nPull request description:\n\n  The output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\n  ```\n  AssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\n  ```\n  The above looks like the expected fee is 6175 sats when in reality it's 618.\n\nTree-SHA512: ddbff2926a88890d6e34a58db36f0b15a917a80064be6e40e9bcbec3f05ae6202d02adcd7873733945b043fa121d4a56dd930446ec368078fe1935cbfff898ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c33961313d9a6fd9e6e14f136057468a929b3e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aae64a21ba25ca86fe2bbb581681dc20d613fb44"
      },
      {
        "sha": "42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4fe586b848ac33240b8046a3289254490d3ad142",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c33961313d9a6fd9e6e14f136057468a929b3e1/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c33961313d9a6fd9e6e14f136057468a929b3e1/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8c33961313d9a6fd9e6e14f136057468a929b3e1",
        "patch": "@@ -26,7 +26,7 @@\n \n def assert_fee_amount(fee, tx_size, fee_per_kB):\n     \"\"\"Assert the fee was in range\"\"\"\n-    target_fee = tx_size * fee_per_kB / 1000\n+    target_fee = round(tx_size * fee_per_kB / 1000, 8)\n     if fee < target_fee:\n         raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n     # allow the wallet's estimation to be at most 2 bytes off"
      }
    ]
  },
  {
    "sha": "28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGI4MDYxZDlmMWMwYTQ0YmYzZGZmNGQ0N2YwMTE4N2U4NjFiMWIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:11:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:13:15Z"
      },
      "message": "Merge #12474: [depends] Allow depends system to support armv7l\n\nac91ea6 [depends] Allow depends system to support armv7l (Henrik Jonsson)\n\nPull request description:\n\n  Credit for the actual patches goes to @theuni, I just tested them on an armv7l machine.\n\n  This change allows the depends system to build our dependencies on 32-bit ARM / armv7l architecture. I.e. with this patch, the following steps now builds fine:\n  ```\n  $ uname -m\n  armv7l\n  $ ./autogen.sh\n  $ cd depends && make NO_QT=1 && cd ..\n  $ ./configure --prefix=$(pwd)/depends/armv7l-unknown-linux-gnueabihf\n  $ make\n  ```\n\n  Without this patch, the `cd depends && make NO_QT=1` command fails on armv7l.\n\nTree-SHA512: 1a81be2f1346e0e7080e83a991d9851f0371438262a34580eda5f43ebd220a3ce1ed0d783c43a0a8aed18082bbb1afc91e5c9bf3f4a36eecc82b6a9b6eff5e4c",
      "tree": {
        "sha": "d46c115a5c08b8fae7860d474d480ae0864588f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d46c115a5c08b8fae7860d474d480ae0864588f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJakD2bAAoJEB5K7WKYbNJd8VAIAMwghcLGzL05LOmd9Z33/Iwg\npet9n9hgUSMN9K6r/4HtYKcs4P/qDgdY7HS3KrMku0EYk3lJ0eqEY4EEct5HtLKn\nAH6GRWYw5AybFXxZGnD/0F7WgQewqHcgV0zZgXavyxlO4X84vAYE4gel85Gj1Dkz\nH6L627CiwZDQeq5svDMilf3pZ9b1QZM85K7FBg8l4TkjqkoR2zHimqCF1n31Tpdr\nOoPW9NsDvWbf6UMtHZgJCzHNC6doTLTF1sInQdUyvpM+Jwx5lmirLK7+4XcByZ84\nemaIenTvxk44r5fYDlVfzdjPzxn2wdgH4mQoMtOi1TulejTYDkU4PzP2JJqKwJg=\n=gRg6\n-----END PGP SIGNATURE-----",
        "payload": "tree d46c115a5c08b8fae7860d474d480ae0864588f7\nparent 8c33961313d9a6fd9e6e14f136057468a929b3e1\nparent ac91ea64c2b1daec8fee0bfde443c18cf87595ae\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519402299 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519402395 +0100\n\nMerge #12474: [depends] Allow depends system to support armv7l\n\nac91ea6 [depends] Allow depends system to support armv7l (Henrik Jonsson)\n\nPull request description:\n\n  Credit for the actual patches goes to @theuni, I just tested them on an armv7l machine.\n\n  This change allows the depends system to build our dependencies on 32-bit ARM / armv7l architecture. I.e. with this patch, the following steps now builds fine:\n  ```\n  $ uname -m\n  armv7l\n  $ ./autogen.sh\n  $ cd depends && make NO_QT=1 && cd ..\n  $ ./configure --prefix=$(pwd)/depends/armv7l-unknown-linux-gnueabihf\n  $ make\n  ```\n\n  Without this patch, the `cd depends && make NO_QT=1` command fails on armv7l.\n\nTree-SHA512: 1a81be2f1346e0e7080e83a991d9851f0371438262a34580eda5f43ebd220a3ce1ed0d783c43a0a8aed18082bbb1afc91e5c9bf3f4a36eecc82b6a9b6eff5e4c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c33961313d9a6fd9e6e14f136057468a929b3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c33961313d9a6fd9e6e14f136057468a929b3e1"
      },
      {
        "sha": "ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac91ea64c2b1daec8fee0bfde443c18cf87595ae"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "14e94ba453a9f31655d69ee64c5a608bc5db2eda",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "patch": "@@ -21,7 +21,6 @@ BUILD_ID_SALT ?= salt\n host:=$(BUILD)\n ifneq ($(HOST),)\n host:=$(HOST)\n-host_toolchain:=$(HOST)-\n endif\n \n ifneq ($(DEBUG),)"
      },
      {
        "sha": "144e5f88b7820ae9d920f1d0e5ad850c44ca67d2",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "patch": "@@ -1,3 +1,7 @@\n+ifneq ($(host),$(build))\n+host_toolchain:=$(host)-\n+endif\n+\n default_host_CC = $(host_toolchain)gcc\n default_host_CXX = $(host_toolchain)g++\n default_host_AR = $(host_toolchain)ar"
      },
      {
        "sha": "37f0c28a529ca1930263c1cdf06a64cf5ccaf7d0",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "patch": "@@ -47,6 +47,7 @@ $(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64\n $(package)_config_opts_i686_linux=linux-generic32\n $(package)_config_opts_arm_linux=linux-generic32\n+$(package)_config_opts_armv7l_linux=linux-generic32\n $(package)_config_opts_aarch64_linux=linux-generic64\n $(package)_config_opts_mipsel_linux=linux-generic32\n $(package)_config_opts_mips_linux=linux-generic32"
      }
    ]
  },
  {
    "sha": "acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2QxZTYxNTVjYTYyYTZkOTFjYThkNWViMjNlYTY0Zjk0ZDA5OGI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:16:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:17:07Z"
      },
      "message": "Merge #12477: test: Plug memory leaks and stack-use-after-scope\n\nfadb39c test: Plug memory leaks and stack-use-after-scope (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 7bd6bbba43c7870bbd9732d73ecfc520f21701168e6fb4ad099a08ea5b21d9cd09215e70d22fb92a1af03993204ef89ad74b3e80d9fa5a10831c3e7cf2dd04cd",
      "tree": {
        "sha": "6e2e5174c510ecbe8741fb22c59e5f6b26e21e56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e2e5174c510ecbe8741fb22c59e5f6b26e21e56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJakD6DAAoJEB5K7WKYbNJd744H/2kRB5Lbk9haD4KTrgqTvkg3\nJRVd+AmzWLC9a3N0BIbZtSumHcwY5gJh+6pdmAkY4PaGiMaU7Of5bkLGKiRKMZcz\nvQts2syDCBVTEZgqOpFIrxOEhxvQPWbfA4SM4/ClDN3bQ7dlXYs4jvq4zzIFQWA/\n+sGAwVq9fQgdcfoJp0hIbFuRGZPb5QlOyAZ58GJaGyqs9OoMdCyPsKhnqLYzEg4S\nT74zkbaQKJZC/7Z2OirY3BjYNELgHSsjFCrkxmahRkb57z3/Igg9X1FezEWsps5b\nx7qdTZ760CnWRHPSwHOfuxnki2PJD06DvZFejqVNil9a07uGsfonzxOywgfex0A=\n=jhIG\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e2e5174c510ecbe8741fb22c59e5f6b26e21e56\nparent 28b8061d9f1c0a44bf3dff4d47f01187e861b1b0\nparent fadb39ca6237781346ca3da319e2bd9e48a5a604\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519402605 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519402627 +0100\n\nMerge #12477: test: Plug memory leaks and stack-use-after-scope\n\nfadb39c test: Plug memory leaks and stack-use-after-scope (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 7bd6bbba43c7870bbd9732d73ecfc520f21701168e6fb4ad099a08ea5b21d9cd09215e70d22fb92a1af03993204ef89ad74b3e80d9fa5a10831c3e7cf2dd04cd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0"
      },
      {
        "sha": "fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadb39ca6237781346ca3da319e2bd9e48a5a604"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6f438b60e97623dc12ae2c3b4e0f6a5ac04cce02",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "patch": "@@ -37,11 +37,6 @@ static void CoinSelection(benchmark::State& state)\n     LOCK(wallet.cs_wallet);\n \n     while (state.KeepRunning()) {\n-        // Empty wallet.\n-        for (COutput output : vCoins)\n-            delete output.tx;\n-        vCoins.clear();\n-\n         // Add coins.\n         for (int i = 0; i < 1000; i++)\n             addCoin(1000 * COIN, wallet, vCoins);\n@@ -53,6 +48,12 @@ static void CoinSelection(benchmark::State& state)\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);\n+\n+        // Empty wallet.\n+        for (COutput& output : vCoins) {\n+            delete output.tx;\n+        }\n+        vCoins.clear();\n     }\n }\n "
      },
      {
        "sha": "8e0ec5243b13e72f7b0dabca42b2d50284f0e205",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "patch": "@@ -406,11 +406,11 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         boost::thread_group tg;\n         std::mutex m;\n         std::condition_variable cv;\n+        bool has_lock{false};\n+        bool has_tried{false};\n+        bool done{false};\n+        bool done_ack{false};\n         {\n-            bool has_lock {false};\n-            bool has_tried {false};\n-            bool done {false};\n-            bool done_ack {false};\n             std::unique_lock<std::mutex> l(m);\n             tg.create_thread([&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());"
      },
      {
        "sha": "95c4825b840f0522bd29a9faac4b9be6b96e933b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "patch": "@@ -28,6 +28,9 @@ void CConnmanTest::AddNode(CNode& node)\n void CConnmanTest::ClearNodes()\n {\n     LOCK(g_connman->cs_vNodes);\n+    for (CNode* node : g_connman->vNodes) {\n+        delete node;\n+    }\n     g_connman->vNodes.clear();\n }\n "
      }
    ]
  },
  {
    "sha": "07090c5339436f856e79a8036d1c85deeb453803",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzA5MGM1MzM5NDM2Zjg1NmU3OWE4MDM2ZDFjODVkZWViNDUzODAz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-23T17:36:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-23T17:37:06Z"
      },
      "message": "Merge #12443: qa: Move common args to bitcoin.conf\n\nface7220b7 qa: Move common args to bitcoin.conf (MarcoFalke)\n\nPull request description:\n\n  Beside removing duplicates of the same args in the code, this actually helps with debugging after a test failure.\n\n  For example, `bitcoin-qt` has `server` turned off, so you'd have to turn it on every time, if you wanted to debug a temporary test datadir created by the test framework.\n  Also, `keypool` would fill up if you forget to specify `-keypool=1`.\n\nTree-SHA512: 996bec8738dc0fce7297ab1fc5b4fbe3aa31b9b6241f8c4e685db728925363ccaca6145ad1edc6bee2f360e02ac4b9a53fcdff74eb79de90793393742d52b559",
      "tree": {
        "sha": "fa054551809120aaa605798ed8b46041c8668c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa054551809120aaa605798ed8b46041c8668c19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07090c5339436f856e79a8036d1c85deeb453803",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJakFFCAAoJENLqSFDnUoslVoIQAK0wfE20SOmMdnAyxpv2v9Er\nPHFxyIYWl71y1O1hpOiBmyxfAROx852/hmLf45EeI5w0nAdrmgBwBIDZC9zBiFaI\nATlgVoRHT5v6isDWtiI5nYjCbRak0kUD707QTG2UA0jKrqoBy2Vxhc0FfzYJGCK6\nk2yMEVHsEO6HYLUln8Ewy8RtPcxVoz/aNqf702qImTPeWWzGpMNdliPyEDpxzoFU\nf+c6KtY4X7nbeKSKvyfn49DlRR7li4fEDTW0sFk9AunCPlE9dpjoTBeGT4tF/JcU\nNHn5RpBcPNkNfKfMho3/6e3xzYdza+5AWAUjr8cmmKOsNnwpXwIgTU+1g9RdrSvQ\nmp+f3muXIes8qEbApGXblm50YDkO4vH6zZlhk87Z2fPiPywhuuCClpECPLxuVwTe\nDLZPrKHLPIXh2OJ7Ex9RgUuuG+WZgEseEQVSzXayfzuzzLpfericc9gRkJgorUXC\nNiDOMiKvXxEijF2fPfR2qK3/4ZWFp3ZyoX84uZaJLwdPrZJ9ZoO+YqOJYkOS4WV8\niwCdsUdk0BbAIriuGpdUpHPASwGwd0adkP3N9cpk+cWCMjOPjg3JvnZWRfA5RMWS\nuP+AorFToB/GGJUOTByYOKYOquG5EIkbRFJlMBZ5XkMlBnfI5eqFVnT3fExKWPy9\nKJ7Icfc1LdKfWVMXaEjX\n=4Y80\n-----END PGP SIGNATURE-----",
        "payload": "tree fa054551809120aaa605798ed8b46041c8668c19\nparent acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5\nparent face7220b776e3decf9889b2c20c9d5f935e971e\nauthor MarcoFalke <falke.marco@gmail.com> 1519407419 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519407426 -0500\n\nMerge #12443: qa: Move common args to bitcoin.conf\n\nface7220b7 qa: Move common args to bitcoin.conf (MarcoFalke)\n\nPull request description:\n\n  Beside removing duplicates of the same args in the code, this actually helps with debugging after a test failure.\n\n  For example, `bitcoin-qt` has `server` turned off, so you'd have to turn it on every time, if you wanted to debug a temporary test datadir created by the test framework.\n  Also, `keypool` would fill up if you forget to specify `-keypool=1`.\n\nTree-SHA512: 996bec8738dc0fce7297ab1fc5b4fbe3aa31b9b6241f8c4e685db728925363ccaca6145ad1edc6bee2f360e02ac4b9a53fcdff74eb79de90793393742d52b559\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07090c5339436f856e79a8036d1c85deeb453803",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07090c5339436f856e79a8036d1c85deeb453803",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07090c5339436f856e79a8036d1c85deeb453803/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5"
      },
      {
        "sha": "face7220b776e3decf9889b2c20c9d5f935e971e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/face7220b776e3decf9889b2c20c9d5f935e971e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/face7220b776e3decf9889b2c20c9d5f935e971e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e87f6d33f0dcb5bf7065c7f29be63aa2bf06333",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -46,6 +46,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-rest\"]] * self.num_nodes\n \n     def setup_network(self, split=False):\n         super().setup_network()"
      },
      {
        "sha": "ecb91b315e013c0ca907bb6dc687e594219664e7",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -392,7 +392,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))"
      },
      {
        "sha": "93a052f7857e380b4cae6fcdfc779e1ca33d2d19",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -57,9 +57,11 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = binary\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n-        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        # Most callers will just need to add extra args to the standard list below.\n+        # For those callers that need more flexibity, they can just set the args property directly.\n+        # Note that common args are set in the config file (see initialize_datadir)\n         self.extra_args = extra_args\n-        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n \n         self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n         self.use_cli = use_cli"
      },
      {
        "sha": "e9e7bbd8e4e89006c7416260ce8b02f9becaef1e",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -291,6 +291,9 @@ def initialize_datadir(dirname, n):\n         f.write(\"regtest=1\\n\")\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n+        f.write(\"server=1\\n\")\n+        f.write(\"keypool=1\\n\")\n+        f.write(\"discover=0\\n\")\n         f.write(\"listenonion=0\\n\")\n     return datadir\n "
      }
    ]
  },
  {
    "sha": "bf3353de90598f08a68d966c50b57ceaeb5b5d96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjMzNTNkZTkwNTk4ZjA4YTY4ZDk2NmM1MGI1N2NlYWViNWI1ZDk2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-25T01:05:34Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-25T01:13:43Z"
      },
      "message": "Merge #12287: Optimise lock behaviour for GuessVerificationProgress()\n\n90ba2df11 Fix missing cs_main lock for GuessVerificationProgress() (Jonas Schnelli)\n\nPull request description:\n\n  `GuessVerificationProgress()` needs `cs_main` due to accessing the `pindex->nChainTx`.\n  This adds a `AssertLockHeld` in `GuessVerificationProgress()` and adds the missing locks in...\n  * `LoadChainTip()`\n  * `ScanForWalletTransactions()` (got missed in #11281)\n  * GUI, `ClientModel::getVerificationProgress()` <--- **this may have GUI performance impacts**, but could be relaxed later with a cache or something more efficient.\n\nTree-SHA512: 13302946571422375f32af8e396b9d2c1180f2693ea363aeba9e98c8266ddec64fe7862bfdcbb5a93a4b12165a61eec1e51e4e7d7a8515fa50879095dc163412",
      "tree": {
        "sha": "9a82d0a0149581eb84d1a9c2680523444a818363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a82d0a0149581eb84d1a9c2680523444a818363"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqSDccACgkQHrd2uwPH\nki3fJhAAqB5/OR3JRp2zy+3Z2uS0Lzc8CmOV0qhjEr7i5BBRC3rqF/Aoe9P09aoy\nrPQEhSD4r4aWvQSFOrtKbNN1TjYQVcDbBSUVJGbOzUY+kj8A7vE0h0kUSHrFvS0X\n/lfoUDTwDvYLEkHsZGeAnsIKT76SC3paNV5i0zCKHtaSPP2jDmmd5go8KfGZXAyr\nQQ7xUadBeGrZxWR8RN1+D0/+dd90QpXNxmbbbkeKCf1aq40qWJKULi8DwzP+VUkz\n7+MPX2E4whUQD1XbXFW3SQQ7dh9OnaID3ffegitDbWWL8AJH8IS7WOWw1fYIzOkl\nOI4UlBSUNeHlstazZ2HYgjQ8y9BcakOT4CORY5LUVTxCu8yqGMuVsMIeeqlWp14e\n7lghaZ8cMvlzVcIP3Tj67xkn7iRz4AUo77GpHiXs9c8CN29xdWu5TrXOfgY1WeNi\n29UcB7K+xb4jpoqPRvh3LvlT2gC95whhJNE+YzmF6U/U2diuyn+5QggVTr5onIkZ\n28IfdVH9nlzu874hgJtG9LRWjbNPwT85hlYQ3Fwgraq3x3hV+Im3WYU7y7CEolxp\nto2LPBBIMWXDSuLM0LyjyhJNZYA+HGsLEls5xx4SCTst0ZjDjY0rWYLMHI8LB6XA\nMVPxVm2Hiw8+m0JpA04ynPgbKSR3fnZ14h0ycQwu21pHNwatUsc=\n=2JCS\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a82d0a0149581eb84d1a9c2680523444a818363\nparent 07090c5339436f856e79a8036d1c85deeb453803\nparent 90ba2df11b5bc943ac48b49b5da8023864dc842d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1519520734 +0800\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1519521223 +0800\n\nMerge #12287: Optimise lock behaviour for GuessVerificationProgress()\n\n90ba2df11 Fix missing cs_main lock for GuessVerificationProgress() (Jonas Schnelli)\n\nPull request description:\n\n  `GuessVerificationProgress()` needs `cs_main` due to accessing the `pindex->nChainTx`.\n  This adds a `AssertLockHeld` in `GuessVerificationProgress()` and adds the missing locks in...\n  * `LoadChainTip()`\n  * `ScanForWalletTransactions()` (got missed in #11281)\n  * GUI, `ClientModel::getVerificationProgress()` <--- **this may have GUI performance impacts**, but could be relaxed later with a cache or something more efficient.\n\nTree-SHA512: 13302946571422375f32af8e396b9d2c1180f2693ea363aeba9e98c8266ddec64fe7862bfdcbb5a93a4b12165a61eec1e51e4e7d7a8515fa50879095dc163412\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07090c5339436f856e79a8036d1c85deeb453803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07090c5339436f856e79a8036d1c85deeb453803",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07090c5339436f856e79a8036d1c85deeb453803"
      },
      {
        "sha": "90ba2df11b5bc943ac48b49b5da8023864dc842d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ba2df11b5bc943ac48b49b5da8023864dc842d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90ba2df11b5bc943ac48b49b5da8023864dc842d"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "eaf2896bc38b3ef2cd4307375d31af80aa203043",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "patch": "@@ -138,9 +138,9 @@ size_t ClientModel::getMempoolDynamicUsage() const\n double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n {\n     CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    LOCK(cs_main);\n     if (!tip)\n     {\n-        LOCK(cs_main);\n         tip = chainActive.Tip();\n     }\n     return GuessVerificationProgress(Params().TxData(), tip);"
      },
      {
        "sha": "d2438b0609a201cbc4fd065060d648d1f7507a6f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "patch": "@@ -4658,6 +4658,7 @@ bool DumpMempool(void)\n }\n \n //! Guess how far we are in the verification process at the given block index\n+//! require cs_main if pindex has not been validated yet (because nChainTx might be unset)\n double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {\n     if (pindex == nullptr)\n         return 0.0;"
      },
      {
        "sha": "b35f8c7f2bfcf5ebe2208a21e4781242c783f52a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "patch": "@@ -1668,20 +1668,15 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n             dProgressTip = GuessVerificationProgress(chainParams.TxData(), tip);\n         }\n+        double gvp = dProgressStart;\n         while (pindex && !fAbortRescan)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0) {\n-                double gvp = 0;\n-                {\n-                    LOCK(cs_main);\n-                    gvp = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                }\n                 ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((gvp - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LOCK(cs_main);\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, gvp);\n             }\n \n             CBlock block;\n@@ -1705,6 +1700,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             {\n                 LOCK(cs_main);\n                 pindex = chainActive.Next(pindex);\n+                gvp = GuessVerificationProgress(chainParams.TxData(), pindex);\n                 if (tip != chainActive.Tip()) {\n                     tip = chainActive.Tip();\n                     // in case the tip has changed, update progress max\n@@ -1713,7 +1709,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             }\n         }\n         if (pindex && fAbortRescan) {\n-            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, gvp);\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n     }"
      }
    ]
  },
  {
    "sha": "d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Y0ZGQzMTNlNWZlNTg5MDNjYWYyZjRkMDQ4MjdlN2Y3OTQ0ZTE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T11:23:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T11:25:01Z"
      },
      "message": "doc: Add historical release notes for 0.16.0\n\nTree-SHA512: 4c33c9c85bf31aa7c73b09ba9f2295eec477adc90934e51323ed50228be0dde9341a2d99ccf7adb184060fe2293533436bccfdbdfe5a30efcd61127ebb5359b8",
      "tree": {
        "sha": "89d8fe0ac8f816db99478cc2de103ac41990ee2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89d8fe0ac8f816db99478cc2de103ac41990ee2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJak+6NAAoJEB5K7WKYbNJdXksH/i9d1Kl0FGB314qZOCxmSPpJ\nyBjpCXEEO5nav/R4/nBQNUh4792/uEUO6PoeIiBQgqjXjjhLFNPMcb8W6h6fGbtb\n0UByCyCZyjaK4APvV38CCW52D1cwoM7xHo11VT8s99dKOSwiOrNIC9tqmWk/gXI5\n20VTR+gpFXOU3sI+wp+xOIZ7GA2lIj8z7FUu8vN1O0NQlAYdXkOL2r1hTFkKixis\nZXkJCLdIr/GwGFn2jUGH3QO8RBWb5n1zKMFTnNQNYAc0o+8sTrPzjDC28+2Xa6mN\nlYPKZ4XXb+hRPa7ki5MarXEvclkwstXQjPqA15aTKww7XXjFoyJWrLMlkmBE+Bk=\n=qEb7\n-----END PGP SIGNATURE-----",
        "payload": "tree 89d8fe0ac8f816db99478cc2de103ac41990ee2d\nparent bf3353de90598f08a68d966c50b57ceaeb5b5d96\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519644220 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519644301 +0100\n\ndoc: Add historical release notes for 0.16.0\n\nTree-SHA512: 4c33c9c85bf31aa7c73b09ba9f2295eec477adc90934e51323ed50228be0dde9341a2d99ccf7adb184060fe2293533436bccfdbdfe5a30efcd61127ebb5359b8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3353de90598f08a68d966c50b57ceaeb5b5d96"
      }
    ],
    "stats": {
      "total": 720,
      "additions": 720,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8f158b3481cfa033cf05400581cb0319fb8e3c45",
        "filename": "doc/release-notes/release-notes-0.16.0.md",
        "status": "added",
        "additions": 720,
        "deletions": 0,
        "changes": 720,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f4dd313e5fe58903caf2f4d04827e7f7944e17/doc/release-notes/release-notes-0.16.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f4dd313e5fe58903caf2f4d04827e7f7944e17/doc/release-notes/release-notes-0.16.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.16.0.md?ref=d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "patch": "@@ -0,0 +1,720 @@\n+Bitcoin Core version 0.16.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.16.0/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading\n+directly from 0.7.x and earlier without re-downloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+Wallets created in 0.16 and later are not compatible with versions prior to 0.16\n+and will not work if you try to use newly created wallets in older versions. Existing\n+wallets that were created with older versions are not affected by this.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notable changes\n+===============\n+\n+Wallet changes\n+---------------\n+\n+### Segwit Wallet\n+\n+Bitcoin Core 0.16.0 introduces full support for segwit in the wallet and user interfaces. A new `-addresstype` argument has been added, which supports `legacy`, `p2sh-segwit` (default), and `bech32` addresses. It controls what kind of addresses are produced by `getnewaddress`, `getaccountaddress`, and `createmultisigaddress`. A `-changetype` argument has also been added, with the same options, and by default equal to `-addresstype`, to control which kind of change is used.\n+\n+A new `address_type` parameter has been added to the `getnewaddress` and `addmultisigaddress` RPCs to specify which type of address to generate.\n+A `change_type` argument has been added to the `fundrawtransaction` RPC to override the `-changetype` argument for specific transactions.\n+\n+- All segwit addresses created through `getnewaddress` or `*multisig` RPCs explicitly get their redeemscripts added to the wallet file. This means that downgrading after creating a segwit address will work, as long as the wallet file is up to date.\n+- All segwit keys in the wallet get an implicit redeemscript added, without it being written to the file. This means recovery of an old backup will work, as long as you use new software.\n+- All keypool keys that are seen used in transactions explicitly get their redeemscripts added to the wallet files. This means that downgrading after recovering from a backup that includes a segwit address will work\n+\n+Note that some RPCs do not yet support segwit addresses. Notably, `signmessage`/`verifymessage` doesn't support segwit addresses, nor does `importmulti` at this time. Support for segwit in those RPCs will continue to be added in future versions.\n+\n+P2WPKH change outputs are now used by default if any destination in the transaction is a P2WPKH or P2WSH output. This is done to ensure the change output is as indistinguishable from the other outputs as possible in either case.\n+\n+### BIP173 (Bech32) Address support (\"bc1...\" addresses)\n+\n+Full support for native segwit addresses (BIP173 / Bech32) has now been added.\n+This includes the ability to send to BIP173 addresses (including non-v0 ones), and generating these\n+addresses (including as default new addresses, see above).\n+\n+A checkbox has been added to the GUI to select whether a Bech32 address or P2SH-wrapped address should be generated when using segwit addresses. When launched with `-addresstype=bech32` it is checked by default. When launched with `-addresstype=legacy` it is unchecked and disabled.\n+\n+### HD-wallets by default\n+\n+Due to a backward-incompatible change in the wallet database, wallets created\n+with version 0.16.0 will be rejected by previous versions. Also, version 0.16.0\n+will only create hierarchical deterministic (HD) wallets. Note that this only applies\n+to new wallets; wallets made with previous versions will not be upgraded to be HD.\n+\n+### Replace-By-Fee by default in GUI\n+\n+The send screen now uses BIP125 RBF by default, regardless of `-walletrbf`.\n+There is a checkbox to mark the transaction as final.\n+\n+The RPC default remains unchanged: to use RBF, launch with `-walletrbf=1` or\n+use the `replaceable` argument for individual transactions.\n+\n+### Wallets directory configuration (`-walletdir`)\n+\n+Bitcoin Core now has more flexibility in where the wallets directory can be\n+located. Previously wallet database files were stored at the top level of the\n+bitcoin data directory. The behavior is now:\n+\n+- For new installations (where the data directory doesn't already exist),\n+  wallets will now be stored in a new `wallets/` subdirectory inside the data\n+  directory by default.\n+- For existing nodes (where the data directory already exists), wallets will be\n+  stored in the data directory root by default. If a `wallets/` subdirectory\n+  already exists in the data directory root, then wallets will be stored in the\n+  `wallets/` subdirectory by default.\n+- The location of the wallets directory can be overridden by specifying a\n+  `-walletdir=<path>` option where `<path>` can be an absolute path to a\n+  directory or directory symlink.\n+\n+Care should be taken when choosing the wallets directory location, as if it\n+becomes unavailable during operation, funds may be lost.\n+\n+Build: Minimum GCC bumped to 4.8.x\n+------------------------------------\n+The minimum version of the GCC compiler required to compile Bitcoin Core is now 4.8. No effort will be\n+made to support older versions of GCC. See discussion in issue #11732 for more information.\n+The minimum version for the Clang compiler is still 3.3. Other minimum dependency versions can be found in `doc/dependencies.md` in the repository.\n+\n+Support for signalling pruned nodes (BIP159)\n+---------------------------------------------\n+Pruned nodes can now signal BIP159's NODE_NETWORK_LIMITED using service bits, in preparation for\n+full BIP159 support in later versions. This would allow pruned nodes to serve the most recent blocks. However, the current change does not yet include support for connecting to these pruned peers.\n+\n+Performance: SHA256 assembly enabled by default\n+-------------------------------------------------\n+The SHA256 hashing optimizations for architectures supporting SSE4, which lead to ~50% speedups in SHA256 on supported hardware (~5% faster synchronization and block validation), have now been enabled by default. In previous versions they were enabled using the `--enable-experimental-asm` flag when building, but are now the default and no longer deemed experimental.\n+\n+GUI changes\n+-----------\n+- Uses of \"\u00b5BTC\" in the GUI now also show the more colloquial term \"bits\", specified in BIP176.\n+- The option to reuse a previous address has now been removed. This was justified by the need to \"resend\" an invoice, but now that we have the request history, that need should be gone.\n+- Support for searching by TXID has been added, rather than just address and label.\n+- A \"Use available balance\" option has been added to the send coins dialog, to add the remaining available wallet balance to a transaction output.\n+- A toggle for unblinding the password fields on the password dialog has been added.\n+\n+RPC changes\n+------------\n+\n+### New `rescanblockchain` RPC\n+\n+A new RPC `rescanblockchain` has been added to manually invoke a blockchain rescan.\n+The RPC supports start and end-height arguments for the rescan, and can be used in a\n+multiwallet environment to rescan the blockchain at runtime.\n+\n+### New `savemempool` RPC\n+A new `savemempool` RPC has been added which allows the current mempool to be saved to\n+disk at any time to avoid it being lost due to crashes / power loss.\n+\n+### Safe mode disabled by default\n+\n+Safe mode is now disabled by default and must be manually enabled (with `-disablesafemode=0`) if you wish to use it. Safe mode is a feature that disables a subset of RPC calls - mostly related to the wallet and sending - automatically in case certain problem conditions with the network are detected. However, developers have come to regard these checks as not reliable enough to act on automatically. Even with safe mode disabled, they will still cause warnings in the `warnings` field of the `getneworkinfo` RPC and launch the `-alertnotify` command.\n+\n+### Renamed script for creating JSON-RPC credentials\n+\n+The `share/rpcuser/rpcuser.py` script was renamed to `share/rpcauth/rpcauth.py`. This script can be\n+used to create `rpcauth` credentials for a JSON-RPC user.\n+\n+### Validateaddress improvements\n+\n+The `validateaddress` RPC output has been extended with a few new fields, and support for segwit addresses (both P2SH and Bech32). Specifically:\n+* A new field `iswitness` is True for P2WPKH and P2WSH addresses (\"bc1...\" addresses), but not for P2SH-wrapped segwit addresses (see below).\n+* The existing field `isscript` will now also report True for P2WSH addresses.\n+* A new field `embedded` is present for all script addresses where the script is known and matches something that can be interpreted as a known address. This is particularly true for P2SH-P2WPKH and P2SH-P2WSH addresses. The value for `embedded` includes much of the information `validateaddress` would report if invoked directly on the embedded address.\n+* For multisig scripts a new `pubkeys` field was added that reports the full public keys involved in the script (if known). This is a replacement for the existing `addresses` field (which reports the same information but encoded as P2PKH addresses), represented in a more useful and less confusing way. The `addresses` field remains present for non-segwit addresses for backward compatibility.\n+* For all single-key addresses with known key (even when wrapped in P2SH or P2WSH), the `pubkey` field will be present. In particular, this means that invoking `validateaddress` on the output of `getnewaddress` will always report the `pubkey`, even when the address type is P2SH-P2WPKH.\n+\n+### Low-level changes\n+\n+- The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:\n+  * `getblockchaininfo`\n+  * `getnetworkinfo`\n+  * `getwalletinfo`\n+  * `getmininginfo`\n+- The wallet RPC `getreceivedbyaddress` will return an error if called with an address not in the wallet.\n+- The wallet RPC `addwitnessaddress` was deprecated and will be removed in version 0.17,\n+  set the `address_type` argument of `getnewaddress`, or option `-addresstype=[bech32|p2sh-segwit]` instead.\n+- `dumpwallet` now includes hex-encoded scripts from the wallet in the dumpfile, and\n+  `importwallet` now imports these scripts, but corresponding addresses may not be added\n+  correctly or a manual rescan may be required to find relevant transactions.\n+- The RPC `getblockchaininfo` now includes an `errors` field.\n+- A new `blockhash` parameter has been added to the `getrawtransaction` RPC which allows for a raw transaction to be fetched from a specific block if known, even without `-txindex` enabled.\n+- The `decoderawtransaction` and `fundrawtransaction` RPCs now have optional `iswitness` parameters to override the\n+  heuristic witness checks if necessary.\n+- The `walletpassphrase` timeout is now clamped to 2^30 seconds.\n+- Using addresses with the `createmultisig` RPC is now deprecated, and will be removed in a later version. Public keys should be used instead.\n+- Blockchain rescans now no longer lock the wallet for the entire rescan process, so other RPCs can now be used at the same time (although results of balances / transactions may be incorrect or incomplete until the rescan is complete).\n+- The `logging` RPC has now been made public rather than hidden.\n+- An `initialblockdownload` boolean has been added to the `getblockchaininfo` RPC to indicate whether the node is currently in IBD or not.\n+- `minrelaytxfee` is now included in the output of `getmempoolinfo`\n+\n+Other changed command-line options\n+----------------------------------\n+- `-debuglogfile=<file>` can be used to specify an alternative debug logging file.\n+- bitcoin-cli now has an `-stdinrpcpass` option to allow the RPC password to be read from standard input.\n+- The `-usehd` option has been removed.\n+- bitcoin-cli now supports a new `-getinfo` flag which returns an output like that of the now-removed `getinfo` RPC.\n+\n+Testing changes\n+----------------\n+- The default regtest JSON-RPC port has been changed to 18443 to avoid conflict with testnet's default of 18332.\n+- Segwit is now always active in regtest mode by default. Thus, if you upgrade a regtest node you will need to either -reindex or use the old rules by adding `vbparams=segwit:0:999999999999` to your regtest bitcoin.conf. Failure to do this will result in a CheckBlockIndex() assertion failure that will look like: Assertion `(pindexFirstNeverProcessed != nullptr) == (pindex->nChainTx == 0)' failed.\n+\n+0.16.0 change log\n+------------------\n+\n+### Block and transaction handling\n+- #10953 `aeed345` Combine scriptPubKey and amount as CTxOut in CScriptCheck (jl2012)\n+- #11309 `93d20a7` Minor cleanups for AcceptToMemoryPool (morcos)\n+- #11418 `38c201f` Add error string for CLEANSTACK script violation (maaku)\n+- #11411 `339da9c` Change SignatureHash input index check to an assert (jimpo)\n+- #11406 `e12522d` Add state message print to AcceptBlock failure message (TheBlueMatt)\n+- #11062 `26fee4f` Mark mempool import fails that were found in mempool as 'already there' (kallewoof)\n+- #11269 `61fb806` CTxMemPoolEntry::UpdateAncestorState: modifySiagOps param type (donaloconnor)\n+- #11747 `e970396` Fix: Open files read only if requested (Elbandi)\n+- #11737 `46d1ebf` Document partial validation in ConnectBlock() (sdaftuar)\n+- #10699 `c090262` Make all script validation flags backward compatible (sipa)\n+- #10279 `214046f` Add a CChainState class to validation.cpp to take another step towards clarifying internal interfaces (TheBlueMatt)\n+- #11824 `d9fdac1` Block ActivateBestChain to empty validationinterface queue (TheBlueMatt)\n+- #12127 `9501dc2` Remove unused mempool index (sdaftuar)\n+- #12118 `44080a9` Sort mempool by min(feerate, ancestor_feerate) (sdaftuar)\n+- #8498 `0e3a411` Minimize the number of times it is checked that no money... (jtimon)\n+- #12368 `3f5012b` Hold mempool.cs for the duration of ATMP (TheBlueMatt)\n+- #12401 `d44cd7e` Reset pblocktree before deleting LevelDB file (Sjors)\n+- #12415 `f893824` Interrupt loading thread after shutdown request (promag)\n+\n+### P2P protocol and network code\n+- #10596 `6866b49` Add vConnect to CConnman::Options (benma)\n+- #10663 `9d31ed2` Split resolve out of connect (theuni)\n+- #11113 `fef65c4` Ignore getheaders requests for very old side blocks (jimpo)\n+- #11585 `5aeaa9c` addrman: Add missing lock in Clear() (CAddrMan) (practicalswift)\n+- #11524 `5ef3b69` De-duplicate connection eviction logic (tjps)\n+- #11580 `1f4375f` Do not send (potentially) invalid headers in response to getheaders (TheBlueMatt)\n+- #11655 `aca77a4` Assert state.m_chain_sync.m_work_header in ConsiderEviction (practicalswift)\n+- #11744 `3ff6ff5` Add missing locks in net.{cpp,h} (practicalswift)\n+- #11740 `59d3dc8` Implement BIP159 NODE_NETWORK_LIMITED (pruned peers) *signaling only* (jonasschnelli)\n+- #11583 `37ffa16` Do not make it trivial for inbound peers to generate log entries (TheBlueMatt)\n+- #11363 `ba2f195` Split socket create/connect (theuni)\n+- #11917 `bc66765` Add testnet DNS seed:  seed.testnet.bitcoin.sprovoost.nl (Sjors)\n+- #11512 `6e89de5` Use GetDesireableServiceFlags in seeds, dnsseeds, fixing static seed adding (TheBlueMatt)\n+- #12262 `16bac24` Hardcoded seed update (laanwj)\n+- #12270 `9cf6393` Update chainTxData for 0.16 (laanwj)\n+- #12392 `0f61651` Fix ignoring tx data requests when fPauseSend is set on a peer (TheBlueMatt)\n+\n+### Wallet\n+- #11039 `fc51565` Avoid second mapWallet lookup (promag)\n+- #10952 `2621673` Remove vchDefaultKey and have better first run detection (achow101)\n+- #11007 `fc5c237` Fix potential memory leak when loading a corrupted wallet file (practicalswift)\n+- #10976 `07c92b9` Move some static functions out of wallet.h/cpp (ryanofsky)\n+- #11117 `961901f` Prepare for non-Base58 addresses (sipa)\n+- #10916 `e6ab88a` add missing lock to crypter GetKeys() (benma)\n+- #10767 `791a0e6` Clarify wallet initialization / destruction interface (jnewbery)\n+- #11250 `c22a53c` Bump wallet version to 159900 and remove the `usehd` option (achow101)\n+- #11307 `4f7e37e` Display non-HD error on first run (MarcoFalke)\n+- #11408 `69c7ece` Fix parameter name typo in ErasePurpose walletdb method (PierreRochard)\n+- #11167 `aa624b6` Full BIP173 (Bech32) support (sipa)\n+- #11594 `0ecc630` Improve -disablewallet parameter interaction (promag)\n+- #10368 `77ba4bf` Remove helper conversion operator from wallet (kallewoof)\n+- #11074 `99ec126` Assert that CWallet::SyncMetaData finds oldest transaction (BitonicEelis)\n+- #11272 `e6e3fc3` CKeystore/CCrypter: move relevant implementation out of the header (jonasschnelli)\n+- #10286 `927a1d7` Call wallet notify callbacks in scheduler thread (without cs_main) (TheBlueMatt)\n+- #10600 `4ed8180` Make feebumper class stateless (ryanofsky)\n+- #11466 `d080a7d` Specify custom wallet directory with -walletdir param (MeshCollider)\n+- #11839 `8ab6c0b` Don't attempt mempool entry for wallet transactions on startup (instagibbs)\n+- #11854 `2214954` Split up key and script metadata for better type safety (ryanofsky)\n+- #11870 `ef8ba7d` Remove unnecessary mempool lock in ReacceptWalletTransactions (promag)\n+- #11864 `2ae58d5` Make CWallet::FundTransaction atomic (promag)\n+- #11886 `df71819` Clarify getbalance meaning a tiny bit in response to questions (TheBlueMatt)\n+- #11923 `81c89e9` Remove unused fNoncriticalErrors variable from CWalletDB::FindWalletTx (PierreRochard)\n+- #11726 `604e08c` Cleanups + nit fixes for walletdir PR (MeshCollider)\n+- #11403 `d889c03` Segwit wallet support (sipa)\n+- #11970 `b7450cd` Add test coverage for bitcoin-cli multiwallet calls (ryanofsky)\n+- #11904 `66e3af7` Add a lock to the wallet directory (MeshCollider)\n+- #12101 `c7978be` Clamp walletpassphrase timeout to 2^30 seconds and check its bounds (achow101)\n+- #12210 `17180fa` Deprecate addwitnessaddress (laanwj)\n+- #12220 `f4c942e` Error if relative -walletdir is specified (ryanofsky)\n+- #11281 `8470e64` Avoid permanent cs_main/cs_wallet lock during RescanFromTime (jonasschnelli)\n+- #12119 `9594139` Use P2WPKH change output if any destination is P2WPKH or P2WSH (Sjors)\n+- #12213 `eadb2da` Add address type option to addmultisigaddress (promag)\n+- #12276 `7936446` Remove duplicate mapWallet lookups (promag)\n+\n+### RPC and other APIs\n+- #11008 `3841aaf` Enable disablesafemode by default (gmaxwell)\n+- #11050 `7ed57d3` Avoid treating null RPC arguments different from missing arguments (ryanofsky)\n+- #10997 `affe927` Add option -stdinrpcpass to bitcoin-cli to allow RPC password to be read from standard input (jharvell)\n+- #11179 `e0e3cbb` Push down safe mode checks (laanwj)\n+- #11203 `d745b4c` add wtxid to mempool entry output (sdaftuar)\n+- #11099 `bc561b4` Add savemempool RPC (greenaddress)\n+- #10838 `66a5b41` (finally) remove getinfo (TheBlueMatt)\n+- #10753 `7fcd61b` test: Check RPC argument mapping (laanwj)\n+- #11288 `0f8e095` More user-friendly error message when partially signing (MeshCollider)\n+- #11031 `ef8340d` deprecate estimatefee (jnewbery)\n+- #10858 `9a8e916` Add \"errors\" field to getblockchaininfo and unify \"errors\" field in get*info RPCs (achow101)\n+- #11021 `90926db` Fix getchaintxstats() (AkioNak)\n+- #11367 `3a93270` getblockchaininfo: Add disk_size, prune_target_size (esotericnonsense)\n+- #11006 `a1d78b5` Improve shutdown process (promag)\n+- #11529 `ff92fbf` Avoid slow transaction search with txindex enabled (promag)\n+- #11618 `87d90ef` Lock cs_main in blockToJSON/blockheaderToJSON (practicalswift)\n+- #11626 `998c304` Make `logging` RPC public (laanwj)\n+- #11258 `033c786` Add initialblockdownload to getblockchaininfo (jnewbery)\n+- #11087 `99bc0b4` Diagnose unsuitable outputs in lockunspent() (BitonicEelis)\n+- #11710 `9388639` cli: Reject arguments to -getinfo (laanwj)\n+- #11738 `d4267a3` Fix sendrawtransaction hang when sending a tx already in mempool (TheBlueMatt)\n+- #11753 `32c9b57` clarify abortrescan rpc use (instagibbs)\n+- #11191 `ef14f2e` Improve help text and behavior of RPC-logging (AkioNak)\n+- #10874 `9e38d35` getblockchaininfo: Loop through the bip9 soft fork deployments instead of hard coding (achow101)\n+- #10275 `497d0e0` Allow fetching tx directly from specified block in getrawtransaction (kallewoof)\n+- #11178 `fee0370` Add iswitness parameter to decode- and fundrawtransaction RPCs (MeshCollider)\n+- #11667 `711d16c` Add scripts to dumpwallet RPC (MeshCollider)\n+- #11475 `9bad8d6` mempoolinfo should take ::minRelayTxFee into account (mess110)\n+- #12001 `a9a49e6` Adding ::minRelayTxFee amount to getmempoolinfo and updating help (jeffrade)\n+- #12198 `adce1de` Add deprecation error for `getinfo` (laanwj)\n+- #11415 `69ec021` Disallow using addresses in createmultisig (achow101)\n+- #12278 `288deac` Add special error for genesis coinbase to getrawtransaction (MeshCollider)\n+- #11362 `c6223b3` Remove nBlockMaxSize from miner opt struct as it is no longer used (gmaxwell)\n+- #10825 `28485c7` Set regtest JSON-RPC port to 18443 to avoid conflict with testnet 18332 (fametrano)\n+- #11303 `e542728` Fix estimatesmartfee rounding display issue (TheBlueMatt)\n+- #7061 `8c2de82` Add RPC call \"rescanblockchain <startheight> <stopheight>\" (jonasschnelli)\n+- #11055 `95e14dc` RPC getreceivedbyaddress should return error if called with address not owned by the wallet (jnewbery)\n+- #12366 `93de37a` http: Join worker threads before deleting work queue (laanwj)\n+- #12315 `758a41e` Bech32 addresses in dumpwallet (fivepiece)\n+- #12427 `3762ac1` Make signrawtransaction accept P2SH-P2WSH redeemscripts (sipa)\n+\n+### GUI\n+- #10964 `64e66bb` Pass SendCoinsRecipient (208 bytes) by reference (practicalswift)\n+- #11169 `5b8af7b` Make tabs toolbar no longer have a context menu (achow101)\n+- #10911 `9c8f365` Fix typo and access key in optionsdialog.ui (keystrike)\n+- #10770 `ea729d5` Drop upgrade-cancel callback registration for a generic \"cancelable\" (TheBlueMatt)\n+- #11156 `a3624dd` Fix memory leaks in qt/guiutil.cpp (danra)\n+- #11268 `31e72b2` [macOS] remove Growl support, remove unused code (jonasschnelli)\n+- #11193 `c5c77bd` Terminate string *pszExePath after readlink and without using memset (practicalswift)\n+- #11508 `ffa5159` Fix crash via division by zero assertion (jonasschnelli)\n+- #11499 `6157e8c` Add upload and download info to the peerlist (debug menu) (aarongolliver)\n+- #11480 `ffc0b11` Add toggle for unblinding password fields (tjps)\n+- #11316 `22cdf93` Add use available balance in send coins dialog (CryptAxe, promag)\n+- #3716 `13e352d` Receive: Remove option to reuse a previous address (luke-jr)\n+- #11690 `f0c1f8a` Fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it (eklitzke)\n+- #10920 `f6f8d54` Fix potential memory leak in newPossibleKey(ChangeCWallet *wallet) (practicalswift)\n+- #11698 `7293d06` RPC-Console nested commands documentation  (lmlsna)\n+- #11395 `38d31f9` Enable searching by transaction id (luke-jr)\n+- #11556 `91eeaa0` Improved copy for RBF checkbox and tooltip (Sjors)\n+- #11809 `80f9dad` Fix proxy setting options dialog crash (laanwj)\n+- #11616 `8585bb8` Update ban-state in case of dirty-state during periodic sweep (jonasschnelli)\n+- #11605 `f19ca12` Enable RBF by default in QT (Sjors)\n+- #12074 `a1136f0` Optimizes boolean expression model && model->haveWatchOnly() (251Labs)\n+- #12035 `eeb6d52` Change \u00b5BTC to bits (jb55)\n+- #12092 `fd4ca17` Replaces numbered place marker %2 with %1 (251Labs)\n+- #12173 `bbc91b7` Use flexible font size for QRCode image address (jonasschnelli)\n+- #12211 `10d10d7` Avoid potential null dereference in ReceiveCoinsDialog constructor (ryanofsky)\n+- #12261 `f359afc` Bump BLOCK_CHAIN_SIZE to 200GB (laanwj)\n+- #11991 `062c8b6` Receive: checkbox for bech32 address (Sjors)\n+- #11644 `045a809` Fix qt build broken by 5a5e4e9 (TheBlueMatt)\n+- #11448 `d473e6d` reset addrProxy/addrSeparateProxyTor if colon char missing (mess110)\n+- #12377 `604f289` qt: Poll ShutdownTimer after init is done (MarcoFalke)\n+- #12374 `daaae36` qt: Make sure splash screen is freed on AppInitMain fail (laanwj)\n+- #12349 `ad10b90` shutdown: fix crash on shutdown with reindex-chainstate (theuni)\n+\n+### Build system\n+- #10923 `2c9f5ec` travis: Build with --enable-werror under OS X (practicalswift)\n+- #11176 `df8c722` build: Rename --enable-experimental-asm to --enable-asm and enable by default (laanwj)\n+- #11286 `11dacc6` [depends] Don't build libevent sample code (fanquake)\n+- #7142 `801dd40` Travis: Test build against system libs (& Qt4) (luke-jr)\n+- #11380 `390771b` Remove outdated share/certs/ directory (MeshCollider)\n+- #11391 `7632310` Remove lxcbr0 lines from gitian-build.sh (MeshCollider)\n+- #11435 `167cef8` build: Make \"make clean\" remove all files created when running \"make check\" (practicalswift)\n+- #11460 `e022463` [depends] mac_alias 2.0.6, ds_store 1.1.2 (fanquake)\n+- #11541 `bb9ab0f` Build: Fix Automake warnings when running autogen.sh (fanquake)\n+- #11611 `0e70791` [build] Don't fail when passed --disable-lcov and lcov isn't available (fanquake)\n+- #11651 `3c098a8` refactor: Make all #includes relative to project root (laanwj, MeshCollider, ryanofsky)\n+- #11621 `1f7695b` [build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck (fanquake)\n+- #11755 `84fa645` [Docs] Bump minimum required version of GCC to 4.8 (fanquake)\n+- #9254 `6d3dc52` [depends] ZeroMQ 4.2.2 (fanquake)\n+- #11842 `3c8f0a3` [build] Add missing stuff to clean-local (kallewoof)\n+- #11936 `483bb67` [build] Warn that only libconsensus can be built without Boost (fanquake)\n+- #11945 `7a11ba7` Improve BSD compatibility of contrib/install_db4.sh (laanwj)\n+- #11981 `180a255` Fix gitian build after libzmq bump (theuni)\n+- #11903 `8f68fd2` [trivial] Add required package dependencies for depends cross compilation (jonasschnelli)\n+- #12168 `45cf8a0`  #include sys/fcntl.h to just fcntl.h (without sys/) (jsarenik)\n+- #12095 `3fa1ab4` Use BDB_LIBS/CFLAGS and pass --disable-replication (fanquake)\n+- #11711 `6378e5c` bitcoin_qt.m4: Minor fixes and clean-ups (fanquake)\n+- #11989 `90d4104` .gitignore: add QT Creator artifacts (Sjors)\n+- #11577 `c0ae864` Fix warnings (-Wsign-compare) when building with DEBUG_ADDRMAN (practicalswift)\n+\n+### Tests and QA\n+- #11024 `3e55f13` Remove OldSetKeyFromPassphrase/OldEncrypt/OldDecrypt (practicalswift)\n+- #10679 `31b2612` Document the non-DER-conformance of one test in tx_valid.json (schildbach)\n+- #11160 `ede386c` Improve versionbits_computeblockversion test code consistency (danra)\n+- #10303 `f088a1b` Include ms/blk stats in Connect* benchmarks (kallewoof)\n+- #10777 `d81dccf` Avoid redundant assignments. Remove unused variables (practicalswift)\n+- #11260 `52f8877` travis: Assert default datadir isn't created, Run scripted diff only once (MarcoFalke)\n+- #11271 `638e6c5` travis: filter out pyenv (theuni)\n+- #11285 `3255d63` Add -usehd to excluded args in check-doc.py (MeshCollider)\n+- #11297 `16e4184` Make sure ~/.bitcoin doesn't exist before build (MeshCollider)\n+- #11311 `cce94c5` travis: Revert default datadir check (MarcoFalke)\n+- #11300 `f4ed44a` Add a lint check for trailing whitespace (MeshCollider)\n+- #11323 `4ce2f3d` mininode: add an optimistic write and disable nagle (theuni)\n+- #11370 `2d85899` Add getblockchaininfo functional test (promag)\n+- #11365 `f199b8a` Add Qt GUI tests to Overview and ReceiveCoin Page (anditto)\n+- #11293 `dbc4ae0` Deduplicate CMerkleBlock construction code, add test coverage (jamesob)\n+- #10440 `9e8ef9d` Add libFuzzer support (practicalswift)\n+- #10941 `364da2c` Add blocknotify and walletnotify functional tests (promag)\n+- #11420 `8928093` Bump univalue subtree and fix json formatting in tests (MarcoFalke)\n+- #10099 `424be03` Slightly Improve Unit Tests for Checkqueue (JeremyRubin)\n+- #11513 `14b860b` A few Python3 tidy ups (jnewbery)\n+- #11486 `2ca518d` Add uacomment tests (mess110)\n+- #11452 `02ac8c8` Improve ZMQ functional test (promag)\n+- #10409 `b5545d8` Add fuzz testing for BlockTransactions and BlockTransactionsRequest (practicalswift)\n+- #11389 `dd56166` Support having segwit always active in regtest (sipa, ajtowns, jnewbery)\n+- #11562 `5776582` bench: use std::chrono rather than gettimeofday (theuni)\n+- #11182 `f7388e9` Add P2P interface to TestNode (jnewbery)\n+- #11552 `b5f9f02` Improve wallet-accounts test (ryanofsky)\n+- #11638 `5e3f5e4` Dead mininode code (jnewbery)\n+- #11646 `fe503e1` Require a steady clock for bench with at least micro precision (TheBlueMatt)\n+- #11468 `76b3349` Make comp test framework more debuggable (jnewbery)\n+- #11623 `ee92243` Add missing locks to tests (practicalswift)\n+- #11035 `927e528` [contrib] Add Valgrind suppressions file (practicalswift)\n+- #11641 `7adeea3` Only allow disconnecting all NodeConns (MarcoFalke)\n+- #11677 `3bdf242` Remove unused NodeConn members (MarcoFalke)\n+- #11699 `66d46c7` [travis-ci] Only run linters on Pull Requests (jnewbery)\n+- #11654 `084f52f` Initialize recently introduced non-static class member lastCycles to zero in constructor (practicalswift)\n+- #11648 `ccc70a2` Add messages.py (jnewbery)\n+- #11713 `49667a7` Fix for mismatched extern definition in wallet tests (sipsorcery)\n+- #11707 `0d89fa0` Fix sendheaders (jnewbery)\n+- #11718 `9cdd2bc` Move pwalletMain to wallet test fixture (laanwj)\n+- #11714 `901ba3e` Test that mempool rejects coinbase transactions (jamesob)\n+- #11743 `3d6ad40` Add multiwallet prefix test (MarcoFalke)\n+- #11683 `a892218` Remove unused mininode functions {ser,deser}_int_vector(...). Remove unused imports (practicalswift)\n+- #11712 `9f2c2db` Split NodeConn from NodeConnCB (jnewbery)\n+- #11791 `13e31dd` Rename NodeConn and NodeConnCB (jnewbery)\n+- #11835 `f60b4ad` Add Travis check for unused Python imports (practicalswift)\n+- #11849 `ad1820c` Assert that only one NetworkThread exists (jnewbery)\n+- #11877 `d4991c0` Improve createrawtransaction functional tests (promag)\n+- #11220 `2971fd0` Check specific validation error in miner tests (Sjors)\n+- #11947 `797441e` Fix rawtransactions test (laanwj)\n+- #11946 `8049241` Remove unused variable (firstAddrnServices) (practicalswift)\n+- #11867 `18a1bba` Improve node network test (jnewbery)\n+- #11883 `cfd99dd` Add configuration file/argument testing (MeshCollider)\n+- #11879 `d4e404a` Remove redundant univalue_tests.cpp (jnewbery)\n+- #11748 `20166f8` Adding unit tests for GetDifficulty in blockchain.cpp (merehap)\n+- #11517 `5180a86` Improve benchmark precision (martinus)\n+- #11291 `a332a7d` Fix string concatenation to os.path.join and add exception case (dongsam)\n+- #11965 `d38d1a3` Note on test order in test_runner (MarcoFalke)\n+- #11997 `ddff344` util_tests.cpp: actually check ignored args (ajtowns)\n+- #12079 `45173fa` Improve prioritisetransaction test coverage (promag)\n+- #12150 `92a810d` Fix ListCoins test failure due to unset g_address_type, g_change_type (ryanofsky)\n+- #12133 `1d2eaba` Fix rare failure in p2p-segwit.py (sdaftuar)\n+- #12082 `0910cbe` Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json (Christewart)\n+- #11796 `4db16ec` Functional test naming convention (ajtowns)\n+- #12227 `b987ca4` test_runner: Readable output if create_cache.py fails (ryanofsky)\n+- #12089 `126000b` Make TestNodeCLI command optional in send_cli (MarcoFalke)\n+- #11774 `6970b30` Rename functional tests (ajtowns)\n+- #12264 `598a9c4` Fix versionbits warning test (jnewbery)\n+- #12217 `1213be6` Add missing syncwithvalidationinterfacequeue to tests (MarcoFalke)\n+- #12292 `eebe458` Fix names of excluded extended tests for travis (ajtowns)\n+- #11789 `60d739e` [travis-ci] Combine logs on failure (jnewbery)\n+- #11838 `3e50024` Add getrawtransaction in_active_chain=False test (MarcoFalke)\n+- #12206 `898f560` Sync with validationinterface queue in sync_mempools (MarcoFalke)\n+- #12424 `ff44101` Fix rescan test failure due to unset g_address_type, g_change_type (ryanofsky)\n+- #12388 `e2431d1` travis: Full clone for git subtree check (MarcoFalke)\n+\n+### Documentation\n+- #10680 `6366941` Fix inconsistencies and grammar in various files (MeshCollider)\n+- #11011 `7db65c3` Add a comment on the use of prevector in script (gmaxwell)\n+- #10878 `c58128f` Fix Markdown formatting issues in init.md (dongcarl)\n+- #11066 `9e00a62` Document the preference of nullptr over NULL or (void*)0 (practicalswift)\n+- #11094 `271e40a` Hash in ZMQ hash is raw bytes, not hex (runn1ng)\n+- #11026 `ea3ac59` Bugfix: Use testnet RequireStandard for -acceptnonstdtxn default (luke-jr)\n+- #11058 `4b65fa5` Comments: More comments on functions/globals in standard.h (jimpo)\n+- #11112 `3f726c9` [developer-notes] By default, declare single-argument constructors \"explicit\" (practicalswift)\n+- #11155 `a084767` Trivial: Documentation fixes for CVectorWriter ctors (danra)\n+- #11136 `108222b` Docs: Add python3 to list of dependencies on some platforms (danra)\n+- #11216 `81f8c03` Update hmac_sha256.h (utsavgupta)\n+- #11236 `ba05971` Add note on translations to CONTRIBUTING.md (MeshCollider)\n+- #11173 `4eb1f39` RPC: Fix currency unit string in the help text (AkioNak)\n+- #11135 `21e2f2f` Update developer notes with RPC response guidelines (promag)\n+- #11219 `bcc8a62` explain how to recompile a modified unit test (Sjors)\n+- #10779 `f656147` Create dependencies.md (flack)\n+- #10682 `2a56baf` Move the AreInputsStandard documentation next to its implementation (esneider)\n+- #11276 `ee50c9e` Update CONTRIBUTING.md to reduce unnecessary review workload (jonasschnelli)\n+- #11264 `b148803` Fix broken Markdown table in dependencies.md (practicalswift)\n+- #10691 `ce82985` Properly comment about shutdown process in init.cpp file (wraith7)\n+- #11330 `ae233c4` Fix comments for DEFAULT_WHITELIST[FORCE]RELAY (danra)\n+- #11340 `d6d2c85` Fix validation comments (danra)\n+- #11305 `2847480` Update release notes and manpages for 0.16 (MarcoFalke)\n+- #11132 `551d7bf` Document assumptions that are being made to avoid NULL pointer dereferences (practicalswift)\n+- #11390 `12ed800` Document scripted-diff (jnewbery)\n+- #11392 `a3b4c59` Fix stale link in gitian-building.md (shooterman)\n+- #11401 `4202273` Move gitian building to external repo (MarcoFalke)\n+- #11414 `bbc901d` Remove partial gitian build instructions from descriptors dir (fanquake)\n+- #11571 `c95832d` Fixed a couple small grammatical errors (BitsInMyBlood)\n+- #11624 `f9b74ef` Change formatting for sequence of steps (vivganes)\n+- #11597 `6f01dcf` Fix error messages in CFeeBumper (kallewoof)\n+- #11438 `7fbf3c6` Updated Windows build doc for WSL/Xenial workaround (sipsorcery)\n+- #11663 `41aa9c4` Add getreceivedbyaddress release notes (MarcoFalke)\n+- #11533 `cbb54e7` Update WSL installation notes for Fall Creators update (Thoragh)\n+- #11680 `4db82b7` Add instructions for lcov report generation (jamesob)\n+- #11686 `54aedc0` Make ISSUE_TEMPLATE a bit shorter, mention hardware tests (TheBlueMatt)\n+- #11704 `ea68190` Windows build doc update (sipsorcery)\n+- #11706 `5197100` Make default issue text all comments to make issues more readable (TheBlueMatt)\n+- #11140 `1429132` Improve #endif comments (danra)\n+- #11729 `7a43fbb` links to code style guides (Sjors)\n+- #11793 `8879d50` Bump OS X version to 10.13 (Varunram)\n+- #11783 `16fff80` Fix shutdown in case of errors during initialization (laanwj)\n+- #11804 `00d25e9` Fixed outdated link with archive.is (TimothyShimmin)\n+- #11960 `4307062` Fix link to installation script (laudaa)\n+- #12027 `63a4dc1` Remove boost --c++ flag from osx build instructions (fernandezpablo85)\n+- #12062 `5961b23` Increment MIT Licence copyright header year on files modified in 2017 (akx20000a)\n+- #12063 `36a5a44` Update license year range to 2018 (akx20000a)\n+- #12093 `5691028` Fix incorrect Markdown link (practicalswift)\n+- #12143 `b0d626d` Fix link for BIP159 pull request (azuchi)\n+- #12112 `3c62868` Remove the ending slashes from RPC URI format (jackycjh)\n+- #12166 `e839d65` Clarify -walletdir usage (jnewbery)\n+- #12241 `b030133` Fix incorrect link in /test/ README.md (fanquake)\n+- #12187 `b5e4b9b` Updating benchmarkmarking.md with an updated sample output (jeffrade)\n+- #12294 `7cf1aea` Create NetBSD build instructions and fix compilation (fanquake)\n+- #12251 `cc5870a` initwallet: Do not translate highly technical addresstype help (MarcoFalke)\n+- #11984 `efae366` Update OpenBSD build instructions for 6.2 (cont'd) (laanwj)\n+- #12293 `9d9c418` Mention that HD is enabled if hdmasterkeyid is present in getwalletinfo RPC help (fanquake)\n+- #12077 `c04cb48` Correct `sendmany` curl example (251Labs)\n+- #10677 `b3ecb7b` Document that addmultisigaddress is intended for non-watchonly addresses (instagibbs)\n+- #12177 `cad504b` Fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)\n+\n+### Refactoring\n+- #9964 `b6a4891` Add const to methods that do not modify the object for which it is called (practicalswift)\n+- #10965 `655970d` Replace deprecated throw() with noexcept specifier (C++11) (practicalswift)\n+- #10645 `c484ec6` Use nullptr (C++11) instead of zero (0) as the null pointer constant (practicalswift)\n+- #10901 `22e301a` Fix constness of ArgsManager methods (promag)\n+- #10969 `4afb5aa` Declare single-argument (non-converting) constructors \"explicit\" (practicalswift)\n+- #11071 `dbf6bd6` Use static_assert(\u2026, \u2026) (C++11) instead of assert(\u2026) where appropriate (practicalswift)\n+- #10809 `c559884` optim: mark a few classes final (theuni)\n+- #10843 `2ab7c63` Add attribute [[noreturn]] (C++11) to functions that will not return (practicalswift)\n+- #11151 `7fd49d0` Fix header guards using reserved identifiers (danra)\n+- #11138 `2982511` Compat: Simplify bswap_16 implementation (danra)\n+- #11161 `745bbdc` Remove redundant explicitly defined copy ctors (danra)\n+- #11144 `cee4fe1` Move local include to before system includes (danra)\n+- #10781 `60dd9cc` Python cleanups (practicalswift)\n+- #10701 `50fae68` Remove the virtual specifier for functions with the override specifier (practicalswift)\n+- #11164 `38a54a5` Fix boost headers included as user instead of system headers (danra)\n+- #11143 `3aa60b7` Fix include path for bitcoin-config.h (danra)\n+- #8330 `59e1789` Structure Packing Optimizations in C{,Mutable}Transaction (JeremyRubin)\n+- #10845 `39ae413` Remove unreachable code (practicalswift)\n+- #11238 `6acdb1f` Add assertions before potential null deferences (MeshCollider)\n+- #11259 `089b742` Remove duplicate destination decoding (promag)\n+- #11232 `2f0d3e6` Ensure that data types are consistent (jjz)\n+- #10793 `efb4383` Changing &var[0] to var.data() (MeshCollider)\n+- #11196 `e278f86` Switch memory_cleanse implementation to BoringSSL's to ensure memory clearing even with -lto (maaku)\n+- #10888 `9821274` range-based loops and const qualifications in net.cpp (benma)\n+- #11351 `6c4fecf` Refactor: Modernize disallowed copy constructors/assignment (danra)\n+- #11385 `94c9015` Remove some unused functions and methods (sipa)\n+- #11301 `8776787` add m_added_nodes to connman options (benma)\n+- #11432 `058c0f9` Remove unused fTry from push_lock (promag)\n+- #11107 `e93fff1` Fix races in AppInitMain and others with lock and atomic bools (MeshCollider)\n+- #9572 `17f2ace` Skip witness sighash cache for non-segwit transactions (jl2012)\n+- #10961 `da0478e` Improve readability of DecodeBase58Check(...) (practicalswift)\n+- #11133 `a865b38` Document assumptions that are being made to avoid division by zero (practicalswift)\n+- #11073 `3bb77eb` Remove dead store in ecdsa_signature_parse_der_lax (BitonicEelis)\n+- #10898 `470c730` Fix invalid checks (NULL checks after dereference, redundant checks, etc.) (practicalswift)\n+- #11495 `50d72b3` [trivial] Make namespace explicit for is_regular_file (jnewbery)\n+- #11511 `db2f83e` [Init] Remove redundant exit(EXIT_FAILURE) instances and replace with return false (donaloconnor)\n+- #10866 `ef8a634` Fix -Wthread-safety-analysis warnings. Compile with -Wthread-safety-analysis if available (practicalswift)\n+- #11221 `0dec4cc` Refactor: simpler read (gnuser)\n+- #10696 `ef3758d` Remove redundant nullptr checks before deallocation (practicalswift)\n+- #11043 `5e9be16` Use std::unique_ptr (C++11) where possible (practicalswift)\n+- #11353 `05a7619` Small refactor of CCoinsViewCache::BatchWrite() (danra)\n+- #10749 `2adbddb` Use compile-time constants instead of unnamed enumerations (remove \"enum hack\") (practicalswift)\n+- #11603 `a933cb1` Move RPC registration out of AppInitParameterInteraction (ryanofsky)\n+- #11722 `26efc22` Switched sync.{cpp,h} to std threading primitives (tjps)\n+- #10493 `fbce66a` Use range-based for loops (C++11) when looping over map elements (practicalswift)\n+- #11337 `0d7e0a3` Fix code constness in CBlockIndex::GetAncestor() overloads (danra)\n+- #11516 `0e722e8` crypto: Add test cases covering the relevant HMAC-SHA{256,512} key length boundaries (practicalswift)\n+- #10574 `5d132e8` Remove includes in .cpp files for things the corresponding .h file already included (practicalswift)\n+- #11884 `66479c0` Remove unused include in hash.cpp (kallewoof)\n+- #10839 `c66adb2` Don't use pass by reference to const for cheaply-copied types (bool, char, etc.) (practicalswift)\n+- #10657 `79399c8` Utils: Improvements to ECDSA key-handling code (str4d)\n+- #12250 `e37ca2b` Make CKey::Load references const (ryanofsky)\n+- #12108 `9220426` Remove unused fQuit var from checkqueue.h (donaloconnor)\n+- #12159 `f3c7062` Use the character based overload for std::string::find (kekimusmaximus)\n+- #12266 `3448907` Move scheduler/threadGroup into common-init instead of per-app (TheBlueMatt)\n+\n+### Miscellaneous\n+- #11246 `777519b` github-merge: Coalesce git fetches (laanwj)\n+- #10871 `c9a4aa8` Handle getinfo in bitcoin-cli w/ -getinfo (revival of #8843) (achow101)\n+- #11419 `093074b` Utils: Fix launchctl not being able to stop bitcoind (OmeGak)\n+- #11394 `6e4e98e` Perform a weaker subtree check in Travis (sipa)\n+- #11702 `4122112` [build] Add a script for installing db4 (jamesob)\n+- #11794 `dd49862` Prefix leveldb debug logging (laanwj)\n+- #11781 `24df9af` Add `-debuglogfile` option (laanwj)\n+- #10773 `c17f11f` Shell script cleanups (practicalswift)\n+- #11829 `7630a1f` Test datadir specified in conf file exists (MeshCollider)\n+- #11836 `d44535d` Rename rpcuser.py to rpcauth.py (hkjn)\n+- #11831 `d48ab83` Always return true if AppInitMain got to the end (TheBlueMatt)\n+- #11943 `1808660` contrib: fix typo in install_db4.sh help message (laanwj)\n+- #12075 `c991b30` [scripts] Add missing univalue file to copyright_header.py (fanquake)\n+- #12197 `000ac4f` Log debug build status and warn when running benchmarks (laanwj)\n+- #10672 `6ab0e4c` Avoid division by zero in the case of a corrupt estimates file (practicalswift)\n+- #11273 `cdd6bbf` Ignore old format estimation file (Xekyo)\n+- #11951 `1fb34e0` Remove dead feeest-file read code for old versions (TheBlueMatt)\n+- #11421 `9ccafb1` Merge current secp256k1 subtree (MarcoFalke)\n+- #11573 `2631d55` [Util] Update tinyformat.h (fanquake)\n+- #10529 `331352f` Improve bitcoind systemd service file (Flowdalic)\n+- #11620 `70fec9e` [build] .gitignore: add background.tiff (Sjors)\n+- #11558 `68e021e` Minimal code changes to allow msvc compilation (sipsorcery)\n+- #11284 `10bee0d` Fix invalid memory access in CScript::operator+= (guidovranken, ajtowns)\n+- #10939 `a1f7f18` [init] Check non-emptiness of -blocknotify command prior to executing (practicalswift)\n+- #11467 `937613d` Fix typos. Use nullptr instead of NULL (practicalswift)\n+- #11834 `5bea05b` [verify-commits] Fix gpg.sh's echoing for commits with '\\n' (TheBlueMatt)\n+- #11830 `a13e443` rpcuser.py: Use 'python' not 'python2' (hkjn)\n+- #12194 `7abb0f0` Add change type option to fundrawtransaction (promag)\n+- #12269 `2ae7cf8` Update defaultAssumeValid to block 506067 (gmaxwell)\n+- #11952 `9ab9963` univalue: Bump subtree (MarcoFalke)\n+- #12367 `09fc859` Fix two fast-shutdown bugs (TheBlueMatt)\n+- #12422 `4d54e7a` util: Make LockDirectory thread-safe, consistent, and fix OpenBSD 6.2 build (laanwj)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 251\n+- Aaron Clauson\n+- Aaron Golliver\n+- aaron-hanson\n+- Adam Langley\n+- Akio Nakamura\n+- Akira Takizawa\n+- Alejandro Avil\u00e9s\n+- Alex Morcos\n+- Alin Rus\n+- Anditto Heristyo\n+- Andras Elso\n+- Andreas Schildbach\n+- Andrew Chow\n+- Anthony Towns\n+- azuchi\n+- Carl Dong\n+- Chris Moore\n+- Chris Stewart\n+- Christian Gentry\n+- Cory Fields\n+- Cristian Mircea Messel\n+- CryptAxe\n+- Dan Raviv\n+- Daniel Edgecumbe\n+- danra\n+- david60\n+- Donal O'Connor\n+- dongsamb\n+- Dusty Williams\n+- Eelis\n+- esneider\n+- Evan Klitzke\n+- fanquake\n+- Ferdinando M. Ametrano\n+- fivepiece\n+- flack\n+- Florian Schmaus\n+- gnuser\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Henrik Jonsson\n+- Jack Grigg\n+- Jacky C\n+- James Evans\n+- James O'Beirne\n+- Jan Sarenik\n+- Jeff Rade\n+- Jeremiah Buddenhagen\n+- Jeremy Rubin\n+- Jim Posen\n+- jjz\n+- Joe Harvell\n+- Johannes Kanig\n+- John Newbery\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Karel B\u00edlek\n+- Karl-Johan Alm\n+- klemens\n+- Kyuntae Ethan Kim\n+- laudaa\n+- Lawrence Nahum\n+- Lucas Betschart\n+- Luke Dashjr\n+- Luke Mlsna\n+- MarcoFalke\n+- Mark Friedenbach\n+- Marko Bencun\n+- Martin Ankerl\n+- Matt Corallo\n+- mruddy\n+- Murch\n+- NicolasDorier\n+- Pablo Fernandez\n+- Paul Berg\n+- Pedro Branco\n+- Pierre Rochard\n+- Pieter Wuille\n+- practicalswift\n+- Randolf Richardson\n+- Russell Yanofsky\n+- Samuel Dobson\n+- Sean Erle Johnson\n+- Shooter\n+- Sjors Provoost\n+- Suhas Daftuar\n+- Thomas Snider\n+- Thoragh\n+- Tim Shimmin\n+- Tomas van der Wansem\n+- Utsav Gupta\n+- Varunram Ganesh\n+- Vivek Ganesan\n+- Werner Lemberg\n+- William Casarin\n+- Willy Ko\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "228b086b9a3de02b534474027353a80dead2c292",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjhiMDg2YjlhM2RlMDJiNTM0NDc0MDI3MzUzYTgwZGVhZDJjMjky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T15:35:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T15:51:20Z"
      },
      "message": "Merge #12083: Improve getchaintxstats test coverage\n\n57e6786 qa: Improve getchaintxstats functional test (Jo\u00e3o Barbosa)\n501b439 rpc: Refactor blockhash parse in getchaintxstats (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 61dec5cb68122998df7ec7b5239830f3caf0fe7185c107a66f27653ab2531a800db19a09050671b6fa8dbb5b53181da861eb31199c79d8635f246ccfa0d10efd",
      "tree": {
        "sha": "8216f04c1463d6de3e5ddb69f9dfdb4a4aa85f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8216f04c1463d6de3e5ddb69f9dfdb4a4aa85f19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/228b086b9a3de02b534474027353a80dead2c292",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJalCz4AAoJEB5K7WKYbNJd7iUH/045roAUVpMXeX75jSLtGbky\nc3e6US3/wSoo1R1rEns//4MpXqTB2AeXFdsshL9mm6WzQabUKyz8zMeQHZFz9Tj1\nsJ1/zi7toy3Ywjw+7XHpKx7qxYpspPeuutVN6tY85AjXNudTb1837EC5MyO6/Cpr\nFucR4QVz19jb8CTMXxlNuUJ6qAStrw6lcIvN/h6h08jXWW8+CaV/Rf09uoTxn26E\nUAfMPkj9dQVQhBCGcxXi4a4KDu70xpIGASCZxO/92ysxzHW+z9OTlMG4/KEVADaR\n8pR5CCPjTF7RC4oyO/K+xIaodcBHFRWu7RnDV34QIeZQ/8QcSmUkq+usmF6TmW0=\n=QxOE\n-----END PGP SIGNATURE-----",
        "payload": "tree 8216f04c1463d6de3e5ddb69f9dfdb4a4aa85f19\nparent d3f4dd313e5fe58903caf2f4d04827e7f7944e17\nparent 57e6786203ad2f8beb0d2ff34b0ff7626bc7e877\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519659356 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519660280 +0100\n\nMerge #12083: Improve getchaintxstats test coverage\n\n57e6786 qa: Improve getchaintxstats functional test (Jo\u00e3o Barbosa)\n501b439 rpc: Refactor blockhash parse in getchaintxstats (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 61dec5cb68122998df7ec7b5239830f3caf0fe7185c107a66f27653ab2531a800db19a09050671b6fa8dbb5b53181da861eb31199c79d8635f246ccfa0d10efd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f4dd313e5fe58903caf2f4d04827e7f7944e17"
      },
      {
        "sha": "57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 28,
      "deletions": 20
    },
    "files": [
      {
        "sha": "8007cebc37493cb93a6038ff1ce375394b22d659",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/228b086b9a3de02b534474027353a80dead2c292/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/228b086b9a3de02b534474027353a80dead2c292/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=228b086b9a3de02b534474027353a80dead2c292",
        "patch": "@@ -1542,25 +1542,19 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n-    bool havehash = !request.params[1].isNull();\n-    uint256 hash;\n-    if (havehash) {\n-        hash = uint256S(request.params[1].get_str());\n-    }\n-\n-    {\n+    if (request.params[1].isNull()) {\n         LOCK(cs_main);\n-        if (havehash) {\n-            auto it = mapBlockIndex.find(hash);\n-            if (it == mapBlockIndex.end()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-            }\n-            pindex = it->second;\n-            if (!chainActive.Contains(pindex)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n-            }\n-        } else {\n-            pindex = chainActive.Tip();\n+        pindex = chainActive.Tip();\n+    } else {\n+        uint256 hash = uint256S(request.params[1].get_str());\n+        LOCK(cs_main);\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        pindex = it->second;\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n         }\n     }\n "
      },
      {
        "sha": "a9e14d3e3c52723c240a5b321738a5609eec18c4",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/228b086b9a3de02b534474027353a80dead2c292/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/228b086b9a3de02b534474027353a80dead2c292/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=228b086b9a3de02b534474027353a80dead2c292",
        "patch": "@@ -102,6 +102,22 @@ def _test_getblockchaininfo(self):\n     def _test_getchaintxstats(self):\n         self.log.info(\"Test getchaintxstats\")\n \n+        # Test `getchaintxstats` invalid extra parameters\n+        assert_raises_rpc_error(-1, 'getchaintxstats', self.nodes[0].getchaintxstats, 0, '', 0)\n+\n+        # Test `getchaintxstats` invalid `nblocks`\n+        assert_raises_rpc_error(-1, \"JSON value is not an integer as expected\", self.nodes[0].getchaintxstats, '')\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, -1)\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, self.nodes[0].getblockcount())\n+\n+        # Test `getchaintxstats` invalid `blockhash`\n+        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getchaintxstats, blockhash=0)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getchaintxstats, blockhash='0')\n+        blockhash = self.nodes[0].getblockhash(200)\n+        self.nodes[0].invalidateblock(blockhash)\n+        assert_raises_rpc_error(-8, \"Block is not in main chain\", self.nodes[0].getchaintxstats, blockhash=blockhash)\n+        self.nodes[0].reconsiderblock(blockhash)\n+\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n@@ -133,8 +149,6 @@ def _test_getchaintxstats(self):\n         assert('window_interval' not in chaintxstats)\n         assert('txrate' not in chaintxstats)\n \n-        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n-\n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()"
      }
    ]
  },
  {
    "sha": "d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGIxM2Q0NTNjMWQ3NDAyMjdkMzE2YjdiYjRlZmU1ZWUzYjk3Mjlj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T15:35:56Z"
      },
      "committer": {
        "name": "Bedri \u00d6zg\u00fcr G\u00fcler",
        "email": "bedriguler@gmail.com",
        "date": "2018-02-27T04:02:39Z"
      },
      "message": "Merge #12083: Improve getchaintxstats test coverage\n\n57e6786 qa: Improve getchaintxstats functional test (Jo\u00e3o Barbosa)\n501b439 rpc: Refactor blockhash parse in getchaintxstats (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 61dec5cb68122998df7ec7b5239830f3caf0fe7185c107a66f27653ab2531a800db19a09050671b6fa8dbb5b53181da861eb31199c79d8635f246ccfa0d10efd",
      "tree": {
        "sha": "588251b01edfd79d3729f672e1c30d6fafae6c88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/588251b01edfd79d3729f672e1c30d6fafae6c88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bedri",
      "id": 765487,
      "node_id": "MDQ6VXNlcjc2NTQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/765487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedri",
      "html_url": "https://github.com/bedri",
      "followers_url": "https://api.github.com/users/bedri/followers",
      "following_url": "https://api.github.com/users/bedri/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedri/subscriptions",
      "organizations_url": "https://api.github.com/users/bedri/orgs",
      "repos_url": "https://api.github.com/users/bedri/repos",
      "events_url": "https://api.github.com/users/bedri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedri/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228b086b9a3de02b534474027353a80dead2c292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292"
      }
    ],
    "stats": {
      "total": 1810,
      "additions": 1809,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e0284f42573a21b9d3f32775068f4dc233bf1c27",
        "filename": "bitcoin.config",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin.config?ref=d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "patch": "@@ -0,0 +1,2 @@\n+// Add predefined macros for your project here. For example:\n+// #define THE_ANSWER 42"
      },
      {
        "sha": "e94cbbd3027df32cb00f4fca093d5c72d9696a85",
        "filename": "bitcoin.creator",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.creator",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.creator",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin.creator?ref=d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "patch": "@@ -0,0 +1 @@\n+[General]"
      },
      {
        "sha": "55cf08d8b1e5b176db64c3d4eec29a4225fd761e",
        "filename": "bitcoin.files",
        "status": "added",
        "additions": 1765,
        "deletions": 0,
        "changes": 1765,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.files",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.files",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin.files?ref=d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "patch": "@@ -0,0 +1,1765 @@\n+CONTRIBUTING.md\n+COPYING\n+INSTALL.md\n+README.md\n+aclocal.m4\n+autogen.sh\n+autom4te.cache/output.0\n+autom4te.cache/output.1\n+autom4te.cache/output.2\n+autom4te.cache/requests\n+autom4te.cache/traces.0\n+autom4te.cache/traces.1\n+autom4te.cache/traces.2\n+build-aux/compile\n+build-aux/config.guess\n+build-aux/config.sub\n+build-aux/depcomp\n+build-aux/install-sh\n+build-aux/ltmain.sh\n+build-aux/m4/ax_boost_base.m4\n+build-aux/m4/ax_boost_chrono.m4\n+build-aux/m4/ax_boost_filesystem.m4\n+build-aux/m4/ax_boost_program_options.m4\n+build-aux/m4/ax_boost_system.m4\n+build-aux/m4/ax_boost_thread.m4\n+build-aux/m4/ax_boost_unit_test_framework.m4\n+build-aux/m4/ax_check_compile_flag.m4\n+build-aux/m4/ax_check_link_flag.m4\n+build-aux/m4/ax_check_preproc_flag.m4\n+build-aux/m4/ax_cxx_compile_stdcxx.m4\n+build-aux/m4/ax_gcc_func_attribute.m4\n+build-aux/m4/ax_pthread.m4\n+build-aux/m4/bitcoin_find_bdb48.m4\n+build-aux/m4/bitcoin_qt.m4\n+build-aux/m4/bitcoin_subdir_to_include.m4\n+build-aux/m4/l_atomic.m4\n+build-aux/m4/libtool.m4\n+build-aux/m4/ltoptions.m4\n+build-aux/m4/ltsugar.m4\n+build-aux/m4/ltversion.m4\n+build-aux/m4/lt~obsolete.m4\n+build-aux/missing\n+build-aux/test-driver\n+config.log\n+config.status\n+configure\n+configure.ac\n+contrib/README.md\n+contrib/bitcoin-cli.bash-completion\n+contrib/bitcoin-qt.pro\n+contrib/bitcoin-tx.bash-completion\n+contrib/bitcoind.bash-completion\n+contrib/debian/README.md\n+contrib/debian/bitcoin-qt.desktop\n+contrib/debian/bitcoin-qt.install\n+contrib/debian/bitcoin-qt.lintian-overrides\n+contrib/debian/bitcoin-qt.manpages\n+contrib/debian/bitcoin-qt.protocol\n+contrib/debian/bitcoin-tx.bash-completion\n+contrib/debian/bitcoin-tx.install\n+contrib/debian/bitcoin-tx.manpages\n+contrib/debian/bitcoind.bash-completion\n+contrib/debian/bitcoind.examples\n+contrib/debian/bitcoind.install\n+contrib/debian/bitcoind.lintian-overrides\n+contrib/debian/bitcoind.manpages\n+contrib/debian/changelog\n+contrib/debian/compat\n+contrib/debian/control\n+contrib/debian/copyright\n+contrib/debian/examples/bitcoin.conf\n+contrib/debian/gbp.conf\n+contrib/debian/patches/README\n+contrib/debian/patches/series\n+contrib/debian/rules\n+contrib/debian/source/format\n+contrib/debian/watch\n+contrib/devtools/README.md\n+contrib/devtools/check-doc.py\n+contrib/devtools/check-rpc-mappings.py\n+contrib/devtools/clang-format-diff.py\n+contrib/devtools/commit-script-check.sh\n+contrib/devtools/copyright_header.py\n+contrib/devtools/gen-manpages.sh\n+contrib/devtools/git-subtree-check.sh\n+contrib/devtools/github-merge.py\n+contrib/devtools/lint-all.sh\n+contrib/devtools/lint-python.sh\n+contrib/devtools/lint-whitespace.sh\n+contrib/devtools/optimize-pngs.py\n+contrib/devtools/security-check.py\n+contrib/devtools/split-debug.sh\n+contrib/devtools/split-debug.sh.in\n+contrib/devtools/symbol-check.py\n+contrib/devtools/test-security-check.py\n+contrib/devtools/update-translations.py\n+contrib/filter-lcov.py\n+contrib/gitian-build.sh\n+contrib/gitian-descriptors/gitian-linux.yml\n+contrib/gitian-descriptors/gitian-osx-signer.yml\n+contrib/gitian-descriptors/gitian-osx.yml\n+contrib/gitian-descriptors/gitian-win-signer.yml\n+contrib/gitian-descriptors/gitian-win.yml\n+contrib/gitian-keys/README.md\n+contrib/gitian-keys/keys.txt\n+contrib/init/README.md\n+contrib/init/bitcoind.conf\n+contrib/init/bitcoind.init\n+contrib/init/bitcoind.openrc\n+contrib/init/bitcoind.openrcconf\n+contrib/init/bitcoind.service\n+contrib/init/org.bitcoin.bitcoind.plist\n+contrib/install_db4.sh\n+contrib/linearize/README.md\n+contrib/linearize/example-linearize.cfg\n+contrib/linearize/linearize-data.py\n+contrib/linearize/linearize-hashes.py\n+contrib/macdeploy/LICENSE\n+contrib/macdeploy/README.md\n+contrib/macdeploy/background.svg\n+contrib/macdeploy/custom_dsstore.py\n+contrib/macdeploy/detached-sig-apply.sh\n+contrib/macdeploy/detached-sig-create.sh\n+contrib/macdeploy/extract-osx-sdk.sh\n+contrib/macdeploy/fancy.plist\n+contrib/macdeploy/macdeployqtplus\n+contrib/qos/README.md\n+contrib/qos/tc.sh\n+contrib/rpm/README.md\n+contrib/rpm/bitcoin-0.12.0-libressl.patch\n+contrib/rpm/bitcoin.fc\n+contrib/rpm/bitcoin.if\n+contrib/rpm/bitcoin.spec\n+contrib/rpm/bitcoin.te\n+contrib/seeds/README.md\n+contrib/seeds/generate-seeds.py\n+contrib/seeds/makeseeds.py\n+contrib/seeds/nodes_main.txt\n+contrib/seeds/nodes_test.txt\n+contrib/testgen/README.md\n+contrib/testgen/base58.py\n+contrib/testgen/gen_base58_test_vectors.py\n+contrib/tidy_datadir.sh\n+contrib/valgrind.supp\n+contrib/verify-commits/README.md\n+contrib/verify-commits/allow-revsig-commits\n+contrib/verify-commits/gpg.sh\n+contrib/verify-commits/pre-push-hook.sh\n+contrib/verify-commits/trusted-git-root\n+contrib/verify-commits/trusted-keys\n+contrib/verify-commits/trusted-sha512-root-commit\n+contrib/verify-commits/verify-commits.sh\n+contrib/verifybinaries/README.md\n+contrib/verifybinaries/verify.sh\n+contrib/windeploy/detached-sig-create.sh\n+contrib/windeploy/win-codesign.cert\n+contrib/zmq/zmq_sub.py\n+contrib/zmq/zmq_sub3.4.py\n+depends/README.md\n+depends/builders/darwin.mk\n+depends/builders/default.mk\n+depends/builders/linux.mk\n+depends/config.guess\n+depends/config.site.in\n+depends/config.sub\n+depends/description.md\n+depends/funcs.mk\n+depends/hosts/darwin.mk\n+depends/hosts/default.mk\n+depends/hosts/linux.mk\n+depends/hosts/mingw32.mk\n+depends/packages.md\n+depends/packages/bdb.mk\n+depends/packages/boost.mk\n+depends/packages/dbus.mk\n+depends/packages/expat.mk\n+depends/packages/fontconfig.mk\n+depends/packages/freetype.mk\n+depends/packages/libICE.mk\n+depends/packages/libSM.mk\n+depends/packages/libX11.mk\n+depends/packages/libXau.mk\n+depends/packages/libXext.mk\n+depends/packages/libevent.mk\n+depends/packages/libxcb.mk\n+depends/packages/miniupnpc.mk\n+depends/packages/native_biplist.mk\n+depends/packages/native_ccache.mk\n+depends/packages/native_cctools.mk\n+depends/packages/native_cdrkit.mk\n+depends/packages/native_ds_store.mk\n+depends/packages/native_libdmg-hfsplus.mk\n+depends/packages/native_mac_alias.mk\n+depends/packages/native_protobuf.mk\n+depends/packages/openssl.mk\n+depends/packages/packages.mk\n+depends/packages/protobuf.mk\n+depends/packages/qrencode.mk\n+depends/packages/qt.mk\n+depends/packages/xcb_proto.mk\n+depends/packages/xextproto.mk\n+depends/packages/xproto.mk\n+depends/packages/xtrans.mk\n+depends/packages/zeromq.mk\n+depends/packages/zlib.mk\n+depends/patches/native_biplist/sorted_list.patch\n+depends/patches/native_cdrkit/cdrkit-deterministic.patch\n+depends/patches/qt/fix-xcb-include-order.patch\n+depends/patches/qt/fix_qt_pkgconfig.patch\n+depends/patches/qt/mac-qmake.conf\n+depends/patches/qt/mingw-uuidof.patch\n+depends/patches/qt/pidlist_absolute.patch\n+depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch\n+doc/Doxyfile.in\n+doc/README.md\n+doc/README_osx.md\n+doc/README_windows.txt\n+doc/REST-interface.md\n+doc/assets-attribution.md\n+doc/benchmarking.md\n+doc/bips.md\n+doc/bitcoin_logo_doxygen.png\n+doc/build-netbsd.md\n+doc/build-openbsd.md\n+doc/build-osx.md\n+doc/build-unix.md\n+doc/build-windows.md\n+doc/dependencies.md\n+doc/developer-notes.md\n+doc/dnsseed-policy.md\n+doc/files.md\n+doc/fuzzing.md\n+doc/gitian-building.md\n+doc/init.md\n+doc/man/bitcoin-cli.1\n+doc/man/bitcoin-qt.1\n+doc/man/bitcoin-tx.1\n+doc/man/bitcoind.1\n+doc/reduce-traffic.md\n+doc/release-notes.md\n+doc/release-notes/release-notes-0.10.0.md\n+doc/release-notes/release-notes-0.10.1.md\n+doc/release-notes/release-notes-0.10.2.md\n+doc/release-notes/release-notes-0.10.3.md\n+doc/release-notes/release-notes-0.10.4.md\n+doc/release-notes/release-notes-0.11.0.md\n+doc/release-notes/release-notes-0.11.1.md\n+doc/release-notes/release-notes-0.11.2.md\n+doc/release-notes/release-notes-0.12.0.md\n+doc/release-notes/release-notes-0.12.1.md\n+doc/release-notes/release-notes-0.13.0.md\n+doc/release-notes/release-notes-0.13.1.md\n+doc/release-notes/release-notes-0.13.2.md\n+doc/release-notes/release-notes-0.14.0.md\n+doc/release-notes/release-notes-0.14.1.md\n+doc/release-notes/release-notes-0.14.2.md\n+doc/release-notes/release-notes-0.15.0.1.md\n+doc/release-notes/release-notes-0.15.0.md\n+doc/release-notes/release-notes-0.15.1.md\n+doc/release-notes/release-notes-0.16.0.md\n+doc/release-notes/release-notes-0.3.12.md\n+doc/release-notes/release-notes-0.3.13.md\n+doc/release-notes/release-notes-0.3.14.md\n+doc/release-notes/release-notes-0.3.15.md\n+doc/release-notes/release-notes-0.3.16.md\n+doc/release-notes/release-notes-0.3.17.md\n+doc/release-notes/release-notes-0.3.18.md\n+doc/release-notes/release-notes-0.3.19.md\n+doc/release-notes/release-notes-0.3.20.1.md\n+doc/release-notes/release-notes-0.3.20.2.md\n+doc/release-notes/release-notes-0.3.20.md\n+doc/release-notes/release-notes-0.3.21.md\n+doc/release-notes/release-notes-0.3.22.md\n+doc/release-notes/release-notes-0.3.23.md\n+doc/release-notes/release-notes-0.3.24.md\n+doc/release-notes/release-notes-0.4.0.md\n+doc/release-notes/release-notes-0.4.1.md\n+doc/release-notes/release-notes-0.4.2.md\n+doc/release-notes/release-notes-0.4.3.md\n+doc/release-notes/release-notes-0.4.4.md\n+doc/release-notes/release-notes-0.4.5.md\n+doc/release-notes/release-notes-0.4.6.md\n+doc/release-notes/release-notes-0.5.0.md\n+doc/release-notes/release-notes-0.5.1.md\n+doc/release-notes/release-notes-0.5.2.md\n+doc/release-notes/release-notes-0.5.3.md\n+doc/release-notes/release-notes-0.5.4.md\n+doc/release-notes/release-notes-0.5.5.md\n+doc/release-notes/release-notes-0.6.0.md\n+doc/release-notes/release-notes-0.6.1.md\n+doc/release-notes/release-notes-0.6.2.md\n+doc/release-notes/release-notes-0.6.3.md\n+doc/release-notes/release-notes-0.7.0.md\n+doc/release-notes/release-notes-0.7.1.md\n+doc/release-notes/release-notes-0.7.2.md\n+doc/release-notes/release-notes-0.8.0.md\n+doc/release-notes/release-notes-0.8.1.md\n+doc/release-notes/release-notes-0.8.2.md\n+doc/release-notes/release-notes-0.8.3.md\n+doc/release-notes/release-notes-0.8.4.md\n+doc/release-notes/release-notes-0.8.5.md\n+doc/release-notes/release-notes-0.8.6.md\n+doc/release-notes/release-notes-0.9.0.md\n+doc/release-notes/release-notes-0.9.1.md\n+doc/release-notes/release-notes-0.9.2.1.md\n+doc/release-notes/release-notes-0.9.2.md\n+doc/release-notes/release-notes-0.9.3.md\n+doc/release-notes/release-notes-0.9.4.md\n+doc/release-notes/release-notes-0.9.5.md\n+doc/release-process.md\n+doc/shared-libraries.md\n+doc/tor.md\n+doc/translation_process.md\n+doc/translation_strings_policy.md\n+doc/travis-ci.md\n+doc/zmq.md\n+libbitcoinconsensus.pc\n+libbitcoinconsensus.pc.in\n+libtool\n+share/genbuild.sh\n+share/pixmaps/bitcoin.ico\n+share/pixmaps/bitcoin128.png\n+share/pixmaps/bitcoin128.xpm\n+share/pixmaps/bitcoin16.png\n+share/pixmaps/bitcoin16.xpm\n+share/pixmaps/bitcoin256.png\n+share/pixmaps/bitcoin256.xpm\n+share/pixmaps/bitcoin32.png\n+share/pixmaps/bitcoin32.xpm\n+share/pixmaps/bitcoin64.png\n+share/pixmaps/bitcoin64.xpm\n+share/pixmaps/nsis-header.bmp\n+share/pixmaps/nsis-wizard.bmp\n+share/qt/Info.plist\n+share/qt/Info.plist.in\n+share/qt/extract_strings_qt.py\n+share/rpcauth/README.md\n+share/rpcauth/rpcauth.py\n+share/setup.nsi\n+share/setup.nsi.in\n+src/addrdb.cpp\n+src/addrdb.h\n+src/addrman.cpp\n+src/addrman.h\n+src/amount.h\n+src/arith_uint256.cpp\n+src/arith_uint256.h\n+src/base58.cpp\n+src/base58.h\n+src/bech32.cpp\n+src/bech32.h\n+src/bench/Examples.cpp\n+src/bench/base58.cpp\n+src/bench/bench.cpp\n+src/bench/bench.h\n+src/bench/bench_bitcoin\n+src/bench/bench_bitcoin.cpp\n+src/bench/ccoins_caching.cpp\n+src/bench/checkblock.cpp\n+src/bench/checkqueue.cpp\n+src/bench/coin_selection.cpp\n+src/bench/crypto_hash.cpp\n+src/bench/data/block413567.raw\n+src/bench/data/block413567.raw.h\n+src/bench/lockedpool.cpp\n+src/bench/mempool_eviction.cpp\n+src/bench/perf.cpp\n+src/bench/perf.h\n+src/bench/prevector_destructor.cpp\n+src/bench/rollingbloom.cpp\n+src/bench/verify_script.cpp\n+src/bitcoin-cli\n+src/bitcoin-cli-res.rc\n+src/bitcoin-cli.cpp\n+src/bitcoin-tx\n+src/bitcoin-tx-res.rc\n+src/bitcoin-tx.cpp\n+src/bitcoind\n+src/bitcoind-res.rc\n+src/bitcoind.cpp\n+src/blockencodings.cpp\n+src/blockencodings.h\n+src/bloom.cpp\n+src/bloom.h\n+src/chain.cpp\n+src/chain.h\n+src/chainparams.cpp\n+src/chainparams.h\n+src/chainparamsbase.cpp\n+src/chainparamsbase.h\n+src/chainparamsseeds.h\n+src/checkpoints.cpp\n+src/checkpoints.h\n+src/checkqueue.h\n+src/clientversion.cpp\n+src/clientversion.h\n+src/coins.cpp\n+src/coins.h\n+src/compat.h\n+src/compat/byteswap.h\n+src/compat/endian.h\n+src/compat/glibc_compat.cpp\n+src/compat/glibc_sanity.cpp\n+src/compat/glibcxx_sanity.cpp\n+src/compat/sanity.h\n+src/compat/strnlen.cpp\n+src/compressor.cpp\n+src/compressor.h\n+src/config/bitcoin-config.h\n+src/config/bitcoin-config.h.in\n+src/config/stamp-h1\n+src/consensus/consensus.h\n+src/consensus/merkle.cpp\n+src/consensus/merkle.h\n+src/consensus/params.h\n+src/consensus/tx_verify.cpp\n+src/consensus/tx_verify.h\n+src/consensus/validation.h\n+src/core_io.h\n+src/core_memusage.h\n+src/core_read.cpp\n+src/core_write.cpp\n+src/crypto/aes.cpp\n+src/crypto/aes.h\n+src/crypto/chacha20.cpp\n+src/crypto/chacha20.h\n+src/crypto/common.h\n+src/crypto/ctaes/COPYING\n+src/crypto/ctaes/README.md\n+src/crypto/ctaes/bench.c\n+src/crypto/ctaes/ctaes.c\n+src/crypto/ctaes/ctaes.h\n+src/crypto/ctaes/test.c\n+src/crypto/hmac_sha256.cpp\n+src/crypto/hmac_sha256.h\n+src/crypto/hmac_sha512.cpp\n+src/crypto/hmac_sha512.h\n+src/crypto/libbitcoin_crypto.a\n+src/crypto/ripemd160.cpp\n+src/crypto/ripemd160.h\n+src/crypto/sha1.cpp\n+src/crypto/sha1.h\n+src/crypto/sha256.cpp\n+src/crypto/sha256.h\n+src/crypto/sha256_sse4.cpp\n+src/crypto/sha512.cpp\n+src/crypto/sha512.h\n+src/cuckoocache.h\n+src/dbwrapper.cpp\n+src/dbwrapper.h\n+src/fs.cpp\n+src/fs.h\n+src/hash.cpp\n+src/hash.h\n+src/httprpc.cpp\n+src/httprpc.h\n+src/httpserver.cpp\n+src/httpserver.h\n+src/indirectmap.h\n+src/init.cpp\n+src/init.h\n+src/key.cpp\n+src/key.h\n+src/keystore.cpp\n+src/keystore.h\n+src/leveldb/AUTHORS\n+src/leveldb/CONTRIBUTING.md\n+src/leveldb/LICENSE\n+src/leveldb/NEWS\n+src/leveldb/README.md\n+src/leveldb/TODO\n+src/leveldb/WINDOWS.md\n+src/leveldb/build_detect_platform\n+src/leveldb/db/autocompact_test.cc\n+src/leveldb/db/builder.cc\n+src/leveldb/db/builder.h\n+src/leveldb/db/c.cc\n+src/leveldb/db/c_test.c\n+src/leveldb/db/corruption_test.cc\n+src/leveldb/db/db_bench.cc\n+src/leveldb/db/db_impl.cc\n+src/leveldb/db/db_impl.h\n+src/leveldb/db/db_iter.cc\n+src/leveldb/db/db_iter.h\n+src/leveldb/db/db_test.cc\n+src/leveldb/db/dbformat.cc\n+src/leveldb/db/dbformat.h\n+src/leveldb/db/dbformat_test.cc\n+src/leveldb/db/dumpfile.cc\n+src/leveldb/db/fault_injection_test.cc\n+src/leveldb/db/filename.cc\n+src/leveldb/db/filename.h\n+src/leveldb/db/filename_test.cc\n+src/leveldb/db/leveldbutil.cc\n+src/leveldb/db/log_format.h\n+src/leveldb/db/log_reader.cc\n+src/leveldb/db/log_reader.h\n+src/leveldb/db/log_test.cc\n+src/leveldb/db/log_writer.cc\n+src/leveldb/db/log_writer.h\n+src/leveldb/db/memtable.cc\n+src/leveldb/db/memtable.h\n+src/leveldb/db/recovery_test.cc\n+src/leveldb/db/repair.cc\n+src/leveldb/db/skiplist.h\n+src/leveldb/db/skiplist_test.cc\n+src/leveldb/db/snapshot.h\n+src/leveldb/db/table_cache.cc\n+src/leveldb/db/table_cache.h\n+src/leveldb/db/version_edit.cc\n+src/leveldb/db/version_edit.h\n+src/leveldb/db/version_edit_test.cc\n+src/leveldb/db/version_set.cc\n+src/leveldb/db/version_set.h\n+src/leveldb/db/version_set_test.cc\n+src/leveldb/db/write_batch.cc\n+src/leveldb/db/write_batch_internal.h\n+src/leveldb/db/write_batch_test.cc\n+src/leveldb/doc/bench/db_bench_sqlite3.cc\n+src/leveldb/doc/bench/db_bench_tree_db.cc\n+src/leveldb/doc/benchmark.html\n+src/leveldb/doc/impl.md\n+src/leveldb/doc/index.md\n+src/leveldb/doc/log_format.md\n+src/leveldb/doc/table_format.md\n+src/leveldb/helpers/memenv/memenv.cc\n+src/leveldb/helpers/memenv/memenv.h\n+src/leveldb/helpers/memenv/memenv_test.cc\n+src/leveldb/include/leveldb/c.h\n+src/leveldb/include/leveldb/cache.h\n+src/leveldb/include/leveldb/comparator.h\n+src/leveldb/include/leveldb/db.h\n+src/leveldb/include/leveldb/dumpfile.h\n+src/leveldb/include/leveldb/env.h\n+src/leveldb/include/leveldb/filter_policy.h\n+src/leveldb/include/leveldb/iterator.h\n+src/leveldb/include/leveldb/options.h\n+src/leveldb/include/leveldb/slice.h\n+src/leveldb/include/leveldb/status.h\n+src/leveldb/include/leveldb/table.h\n+src/leveldb/include/leveldb/table_builder.h\n+src/leveldb/include/leveldb/write_batch.h\n+src/leveldb/issues/issue178_test.cc\n+src/leveldb/issues/issue200_test.cc\n+src/leveldb/libleveldb.a\n+src/leveldb/libleveldb_sse42.a\n+src/leveldb/libmemenv.a\n+src/leveldb/port/README\n+src/leveldb/port/atomic_pointer.h\n+src/leveldb/port/port.h\n+src/leveldb/port/port_example.h\n+src/leveldb/port/port_posix.cc\n+src/leveldb/port/port_posix.h\n+src/leveldb/port/port_posix_sse.cc\n+src/leveldb/port/port_win.cc\n+src/leveldb/port/port_win.h\n+src/leveldb/port/thread_annotations.h\n+src/leveldb/port/win/stdint.h\n+src/leveldb/table/block.cc\n+src/leveldb/table/block.h\n+src/leveldb/table/block_builder.cc\n+src/leveldb/table/block_builder.h\n+src/leveldb/table/filter_block.cc\n+src/leveldb/table/filter_block.h\n+src/leveldb/table/filter_block_test.cc\n+src/leveldb/table/format.cc\n+src/leveldb/table/format.h\n+src/leveldb/table/iterator.cc\n+src/leveldb/table/iterator_wrapper.h\n+src/leveldb/table/merger.cc\n+src/leveldb/table/merger.h\n+src/leveldb/table/table.cc\n+src/leveldb/table/table_builder.cc\n+src/leveldb/table/table_test.cc\n+src/leveldb/table/two_level_iterator.cc\n+src/leveldb/table/two_level_iterator.h\n+src/leveldb/util/arena.cc\n+src/leveldb/util/arena.h\n+src/leveldb/util/arena_test.cc\n+src/leveldb/util/bloom.cc\n+src/leveldb/util/bloom_test.cc\n+src/leveldb/util/cache.cc\n+src/leveldb/util/cache_test.cc\n+src/leveldb/util/coding.cc\n+src/leveldb/util/coding.h\n+src/leveldb/util/coding_test.cc\n+src/leveldb/util/comparator.cc\n+src/leveldb/util/crc32c.cc\n+src/leveldb/util/crc32c.h\n+src/leveldb/util/crc32c_test.cc\n+src/leveldb/util/env.cc\n+src/leveldb/util/env_posix.cc\n+src/leveldb/util/env_posix_test.cc\n+src/leveldb/util/env_posix_test_helper.h\n+src/leveldb/util/env_test.cc\n+src/leveldb/util/env_win.cc\n+src/leveldb/util/filter_policy.cc\n+src/leveldb/util/hash.cc\n+src/leveldb/util/hash.h\n+src/leveldb/util/hash_test.cc\n+src/leveldb/util/histogram.cc\n+src/leveldb/util/histogram.h\n+src/leveldb/util/logging.cc\n+src/leveldb/util/logging.h\n+src/leveldb/util/mutexlock.h\n+src/leveldb/util/options.cc\n+src/leveldb/util/posix_logger.h\n+src/leveldb/util/random.h\n+src/leveldb/util/status.cc\n+src/leveldb/util/testharness.cc\n+src/leveldb/util/testharness.h\n+src/leveldb/util/testutil.cc\n+src/leveldb/util/testutil.h\n+src/libbitcoin_cli.a\n+src/libbitcoin_common.a\n+src/libbitcoin_consensus.a\n+src/libbitcoin_server.a\n+src/libbitcoin_util.a\n+src/libbitcoin_wallet.a\n+src/limitedmap.h\n+src/memusage.h\n+src/merkleblock.cpp\n+src/merkleblock.h\n+src/miner.cpp\n+src/miner.h\n+src/net.cpp\n+src/net.h\n+src/net_processing.cpp\n+src/net_processing.h\n+src/netaddress.cpp\n+src/netaddress.h\n+src/netbase.cpp\n+src/netbase.h\n+src/netmessagemaker.h\n+src/noui.cpp\n+src/noui.h\n+src/obj/build.h\n+src/policy/feerate.cpp\n+src/policy/feerate.h\n+src/policy/fees.cpp\n+src/policy/fees.h\n+src/policy/policy.cpp\n+src/policy/policy.h\n+src/policy/rbf.cpp\n+src/policy/rbf.h\n+src/pow.cpp\n+src/pow.h\n+src/prevector.h\n+src/primitives/block.cpp\n+src/primitives/block.h\n+src/primitives/transaction.cpp\n+src/primitives/transaction.h\n+src/protocol.cpp\n+src/protocol.h\n+src/pubkey.cpp\n+src/pubkey.h\n+src/qt/README.md\n+src/qt/addressbookpage.cpp\n+src/qt/addressbookpage.h\n+src/qt/addresstablemodel.cpp\n+src/qt/addresstablemodel.h\n+src/qt/askpassphrasedialog.cpp\n+src/qt/askpassphrasedialog.h\n+src/qt/bantablemodel.cpp\n+src/qt/bantablemodel.h\n+src/qt/bitcoin-qt\n+src/qt/bitcoin.cpp\n+src/qt/bitcoin.moc\n+src/qt/bitcoin.qrc\n+src/qt/bitcoin_locale.qrc\n+src/qt/bitcoinaddressvalidator.cpp\n+src/qt/bitcoinaddressvalidator.h\n+src/qt/bitcoinamountfield.cpp\n+src/qt/bitcoinamountfield.h\n+src/qt/bitcoinamountfield.moc\n+src/qt/bitcoingui.cpp\n+src/qt/bitcoingui.h\n+src/qt/bitcoinstrings.cpp\n+src/qt/bitcoinunits.cpp\n+src/qt/bitcoinunits.h\n+src/qt/callback.h\n+src/qt/clientmodel.cpp\n+src/qt/clientmodel.h\n+src/qt/coincontroldialog.cpp\n+src/qt/coincontroldialog.h\n+src/qt/coincontroltreewidget.cpp\n+src/qt/coincontroltreewidget.h\n+src/qt/csvmodelwriter.cpp\n+src/qt/csvmodelwriter.h\n+src/qt/editaddressdialog.cpp\n+src/qt/editaddressdialog.h\n+src/qt/forms/addressbookpage.ui\n+src/qt/forms/askpassphrasedialog.ui\n+src/qt/forms/coincontroldialog.ui\n+src/qt/forms/debugwindow.ui\n+src/qt/forms/editaddressdialog.ui\n+src/qt/forms/helpmessagedialog.ui\n+src/qt/forms/intro.ui\n+src/qt/forms/modaloverlay.ui\n+src/qt/forms/openuridialog.ui\n+src/qt/forms/optionsdialog.ui\n+src/qt/forms/overviewpage.ui\n+src/qt/forms/receivecoinsdialog.ui\n+src/qt/forms/receiverequestdialog.ui\n+src/qt/forms/sendcoinsdialog.ui\n+src/qt/forms/sendcoinsentry.ui\n+src/qt/forms/signverifymessagedialog.ui\n+src/qt/forms/transactiondescdialog.ui\n+src/qt/forms/ui_addressbookpage.h\n+src/qt/forms/ui_askpassphrasedialog.h\n+src/qt/forms/ui_coincontroldialog.h\n+src/qt/forms/ui_debugwindow.h\n+src/qt/forms/ui_editaddressdialog.h\n+src/qt/forms/ui_helpmessagedialog.h\n+src/qt/forms/ui_intro.h\n+src/qt/forms/ui_modaloverlay.h\n+src/qt/forms/ui_openuridialog.h\n+src/qt/forms/ui_optionsdialog.h\n+src/qt/forms/ui_overviewpage.h\n+src/qt/forms/ui_receivecoinsdialog.h\n+src/qt/forms/ui_receiverequestdialog.h\n+src/qt/forms/ui_sendcoinsdialog.h\n+src/qt/forms/ui_sendcoinsentry.h\n+src/qt/forms/ui_signverifymessagedialog.h\n+src/qt/forms/ui_transactiondescdialog.h\n+src/qt/guiconstants.h\n+src/qt/guiutil.cpp\n+src/qt/guiutil.h\n+src/qt/intro.cpp\n+src/qt/intro.h\n+src/qt/intro.moc\n+src/qt/libbitcoinqt.a\n+src/qt/locale/bitcoin_af.qm\n+src/qt/locale/bitcoin_af.ts\n+src/qt/locale/bitcoin_af_ZA.qm\n+src/qt/locale/bitcoin_af_ZA.ts\n+src/qt/locale/bitcoin_ar.qm\n+src/qt/locale/bitcoin_ar.ts\n+src/qt/locale/bitcoin_be_BY.qm\n+src/qt/locale/bitcoin_be_BY.ts\n+src/qt/locale/bitcoin_bg.qm\n+src/qt/locale/bitcoin_bg.ts\n+src/qt/locale/bitcoin_bg_BG.qm\n+src/qt/locale/bitcoin_bg_BG.ts\n+src/qt/locale/bitcoin_ca.qm\n+src/qt/locale/bitcoin_ca.ts\n+src/qt/locale/bitcoin_ca@valencia.qm\n+src/qt/locale/bitcoin_ca@valencia.ts\n+src/qt/locale/bitcoin_ca_ES.qm\n+src/qt/locale/bitcoin_ca_ES.ts\n+src/qt/locale/bitcoin_cs.qm\n+src/qt/locale/bitcoin_cs.ts\n+src/qt/locale/bitcoin_cy.qm\n+src/qt/locale/bitcoin_cy.ts\n+src/qt/locale/bitcoin_da.qm\n+src/qt/locale/bitcoin_da.ts\n+src/qt/locale/bitcoin_de.qm\n+src/qt/locale/bitcoin_de.ts\n+src/qt/locale/bitcoin_el.qm\n+src/qt/locale/bitcoin_el.ts\n+src/qt/locale/bitcoin_el_GR.qm\n+src/qt/locale/bitcoin_el_GR.ts\n+src/qt/locale/bitcoin_en.qm\n+src/qt/locale/bitcoin_en.ts\n+src/qt/locale/bitcoin_en_GB.qm\n+src/qt/locale/bitcoin_en_GB.ts\n+src/qt/locale/bitcoin_eo.qm\n+src/qt/locale/bitcoin_eo.ts\n+src/qt/locale/bitcoin_es.qm\n+src/qt/locale/bitcoin_es.ts\n+src/qt/locale/bitcoin_es_AR.qm\n+src/qt/locale/bitcoin_es_AR.ts\n+src/qt/locale/bitcoin_es_CL.qm\n+src/qt/locale/bitcoin_es_CL.ts\n+src/qt/locale/bitcoin_es_CO.qm\n+src/qt/locale/bitcoin_es_CO.ts\n+src/qt/locale/bitcoin_es_DO.qm\n+src/qt/locale/bitcoin_es_DO.ts\n+src/qt/locale/bitcoin_es_ES.qm\n+src/qt/locale/bitcoin_es_ES.ts\n+src/qt/locale/bitcoin_es_MX.qm\n+src/qt/locale/bitcoin_es_MX.ts\n+src/qt/locale/bitcoin_es_UY.qm\n+src/qt/locale/bitcoin_es_UY.ts\n+src/qt/locale/bitcoin_es_VE.qm\n+src/qt/locale/bitcoin_es_VE.ts\n+src/qt/locale/bitcoin_et.qm\n+src/qt/locale/bitcoin_et.ts\n+src/qt/locale/bitcoin_et_EE.qm\n+src/qt/locale/bitcoin_et_EE.ts\n+src/qt/locale/bitcoin_eu_ES.qm\n+src/qt/locale/bitcoin_eu_ES.ts\n+src/qt/locale/bitcoin_fa.qm\n+src/qt/locale/bitcoin_fa.ts\n+src/qt/locale/bitcoin_fa_IR.qm\n+src/qt/locale/bitcoin_fa_IR.ts\n+src/qt/locale/bitcoin_fi.qm\n+src/qt/locale/bitcoin_fi.ts\n+src/qt/locale/bitcoin_fr.qm\n+src/qt/locale/bitcoin_fr.ts\n+src/qt/locale/bitcoin_fr_CA.qm\n+src/qt/locale/bitcoin_fr_CA.ts\n+src/qt/locale/bitcoin_fr_FR.qm\n+src/qt/locale/bitcoin_fr_FR.ts\n+src/qt/locale/bitcoin_gl.qm\n+src/qt/locale/bitcoin_gl.ts\n+src/qt/locale/bitcoin_he.qm\n+src/qt/locale/bitcoin_he.ts\n+src/qt/locale/bitcoin_hi_IN.qm\n+src/qt/locale/bitcoin_hi_IN.ts\n+src/qt/locale/bitcoin_hr.qm\n+src/qt/locale/bitcoin_hr.ts\n+src/qt/locale/bitcoin_hu.qm\n+src/qt/locale/bitcoin_hu.ts\n+src/qt/locale/bitcoin_id_ID.qm\n+src/qt/locale/bitcoin_id_ID.ts\n+src/qt/locale/bitcoin_it.qm\n+src/qt/locale/bitcoin_it.ts\n+src/qt/locale/bitcoin_it_IT.qm\n+src/qt/locale/bitcoin_it_IT.ts\n+src/qt/locale/bitcoin_ja.qm\n+src/qt/locale/bitcoin_ja.ts\n+src/qt/locale/bitcoin_ka.qm\n+src/qt/locale/bitcoin_ka.ts\n+src/qt/locale/bitcoin_kk_KZ.qm\n+src/qt/locale/bitcoin_kk_KZ.ts\n+src/qt/locale/bitcoin_ko_KR.qm\n+src/qt/locale/bitcoin_ko_KR.ts\n+src/qt/locale/bitcoin_ku_IQ.qm\n+src/qt/locale/bitcoin_ku_IQ.ts\n+src/qt/locale/bitcoin_ky.qm\n+src/qt/locale/bitcoin_ky.ts\n+src/qt/locale/bitcoin_la.qm\n+src/qt/locale/bitcoin_la.ts\n+src/qt/locale/bitcoin_lt.qm\n+src/qt/locale/bitcoin_lt.ts\n+src/qt/locale/bitcoin_lv_LV.qm\n+src/qt/locale/bitcoin_lv_LV.ts\n+src/qt/locale/bitcoin_mk_MK.qm\n+src/qt/locale/bitcoin_mk_MK.ts\n+src/qt/locale/bitcoin_mn.qm\n+src/qt/locale/bitcoin_mn.ts\n+src/qt/locale/bitcoin_ms_MY.qm\n+src/qt/locale/bitcoin_ms_MY.ts\n+src/qt/locale/bitcoin_nb.qm\n+src/qt/locale/bitcoin_nb.ts\n+src/qt/locale/bitcoin_ne.qm\n+src/qt/locale/bitcoin_ne.ts\n+src/qt/locale/bitcoin_nl.qm\n+src/qt/locale/bitcoin_nl.ts\n+src/qt/locale/bitcoin_pam.qm\n+src/qt/locale/bitcoin_pam.ts\n+src/qt/locale/bitcoin_pl.qm\n+src/qt/locale/bitcoin_pl.ts\n+src/qt/locale/bitcoin_pt_BR.qm\n+src/qt/locale/bitcoin_pt_BR.ts\n+src/qt/locale/bitcoin_pt_PT.qm\n+src/qt/locale/bitcoin_pt_PT.ts\n+src/qt/locale/bitcoin_ro.qm\n+src/qt/locale/bitcoin_ro.ts\n+src/qt/locale/bitcoin_ro_RO.qm\n+src/qt/locale/bitcoin_ro_RO.ts\n+src/qt/locale/bitcoin_ru.qm\n+src/qt/locale/bitcoin_ru.ts\n+src/qt/locale/bitcoin_ru_RU.qm\n+src/qt/locale/bitcoin_ru_RU.ts\n+src/qt/locale/bitcoin_sk.qm\n+src/qt/locale/bitcoin_sk.ts\n+src/qt/locale/bitcoin_sl_SI.qm\n+src/qt/locale/bitcoin_sl_SI.ts\n+src/qt/locale/bitcoin_sq.qm\n+src/qt/locale/bitcoin_sq.ts\n+src/qt/locale/bitcoin_sr.qm\n+src/qt/locale/bitcoin_sr.ts\n+src/qt/locale/bitcoin_sr@latin.qm\n+src/qt/locale/bitcoin_sr@latin.ts\n+src/qt/locale/bitcoin_sv.qm\n+src/qt/locale/bitcoin_sv.ts\n+src/qt/locale/bitcoin_ta.qm\n+src/qt/locale/bitcoin_ta.ts\n+src/qt/locale/bitcoin_th_TH.qm\n+src/qt/locale/bitcoin_th_TH.ts\n+src/qt/locale/bitcoin_tr.qm\n+src/qt/locale/bitcoin_tr.ts\n+src/qt/locale/bitcoin_tr_TR.qm\n+src/qt/locale/bitcoin_tr_TR.ts\n+src/qt/locale/bitcoin_uk.qm\n+src/qt/locale/bitcoin_uk.ts\n+src/qt/locale/bitcoin_ur_PK.qm\n+src/qt/locale/bitcoin_ur_PK.ts\n+src/qt/locale/bitcoin_uz@Cyrl.qm\n+src/qt/locale/bitcoin_uz@Cyrl.ts\n+src/qt/locale/bitcoin_vi.qm\n+src/qt/locale/bitcoin_vi.ts\n+src/qt/locale/bitcoin_vi_VN.qm\n+src/qt/locale/bitcoin_vi_VN.ts\n+src/qt/locale/bitcoin_zh.qm\n+src/qt/locale/bitcoin_zh.ts\n+src/qt/locale/bitcoin_zh_CN.qm\n+src/qt/locale/bitcoin_zh_CN.ts\n+src/qt/locale/bitcoin_zh_HK.qm\n+src/qt/locale/bitcoin_zh_HK.ts\n+src/qt/locale/bitcoin_zh_TW.qm\n+src/qt/locale/bitcoin_zh_TW.ts\n+src/qt/macdockiconhandler.h\n+src/qt/macdockiconhandler.mm\n+src/qt/macnotificationhandler.h\n+src/qt/macnotificationhandler.mm\n+src/qt/moc_addressbookpage.cpp\n+src/qt/moc_addresstablemodel.cpp\n+src/qt/moc_askpassphrasedialog.cpp\n+src/qt/moc_bantablemodel.cpp\n+src/qt/moc_bitcoinaddressvalidator.cpp\n+src/qt/moc_bitcoinamountfield.cpp\n+src/qt/moc_bitcoingui.cpp\n+src/qt/moc_bitcoinunits.cpp\n+src/qt/moc_callback.cpp\n+src/qt/moc_clientmodel.cpp\n+src/qt/moc_coincontroldialog.cpp\n+src/qt/moc_coincontroltreewidget.cpp\n+src/qt/moc_csvmodelwriter.cpp\n+src/qt/moc_editaddressdialog.cpp\n+src/qt/moc_guiutil.cpp\n+src/qt/moc_intro.cpp\n+src/qt/moc_macdockiconhandler.cpp\n+src/qt/moc_macnotificationhandler.cpp\n+src/qt/moc_modaloverlay.cpp\n+src/qt/moc_notificator.cpp\n+src/qt/moc_openuridialog.cpp\n+src/qt/moc_optionsdialog.cpp\n+src/qt/moc_optionsmodel.cpp\n+src/qt/moc_overviewpage.cpp\n+src/qt/moc_paymentserver.cpp\n+src/qt/moc_peertablemodel.cpp\n+src/qt/moc_qvalidatedlineedit.cpp\n+src/qt/moc_qvaluecombobox.cpp\n+src/qt/moc_receivecoinsdialog.cpp\n+src/qt/moc_receiverequestdialog.cpp\n+src/qt/moc_recentrequeststablemodel.cpp\n+src/qt/moc_rpcconsole.cpp\n+src/qt/moc_sendcoinsdialog.cpp\n+src/qt/moc_sendcoinsentry.cpp\n+src/qt/moc_signverifymessagedialog.cpp\n+src/qt/moc_splashscreen.cpp\n+src/qt/moc_trafficgraphwidget.cpp\n+src/qt/moc_transactiondesc.cpp\n+src/qt/moc_transactiondescdialog.cpp\n+src/qt/moc_transactionfilterproxy.cpp\n+src/qt/moc_transactiontablemodel.cpp\n+src/qt/moc_transactionview.cpp\n+src/qt/moc_utilitydialog.cpp\n+src/qt/moc_walletframe.cpp\n+src/qt/moc_walletmodel.cpp\n+src/qt/moc_walletview.cpp\n+src/qt/modaloverlay.cpp\n+src/qt/modaloverlay.h\n+src/qt/networkstyle.cpp\n+src/qt/networkstyle.h\n+src/qt/notificator.cpp\n+src/qt/notificator.h\n+src/qt/openuridialog.cpp\n+src/qt/openuridialog.h\n+src/qt/optionsdialog.cpp\n+src/qt/optionsdialog.h\n+src/qt/optionsmodel.cpp\n+src/qt/optionsmodel.h\n+src/qt/overviewpage.cpp\n+src/qt/overviewpage.h\n+src/qt/overviewpage.moc\n+src/qt/paymentrequest.pb.cc\n+src/qt/paymentrequest.pb.h\n+src/qt/paymentrequest.proto\n+src/qt/paymentrequestplus.cpp\n+src/qt/paymentrequestplus.h\n+src/qt/paymentserver.cpp\n+src/qt/paymentserver.h\n+src/qt/peertablemodel.cpp\n+src/qt/peertablemodel.h\n+src/qt/platformstyle.cpp\n+src/qt/platformstyle.h\n+src/qt/qrc_bitcoin.cpp\n+src/qt/qrc_bitcoin_locale.cpp\n+src/qt/qvalidatedlineedit.cpp\n+src/qt/qvalidatedlineedit.h\n+src/qt/qvaluecombobox.cpp\n+src/qt/qvaluecombobox.h\n+src/qt/receivecoinsdialog.cpp\n+src/qt/receivecoinsdialog.h\n+src/qt/receiverequestdialog.cpp\n+src/qt/receiverequestdialog.h\n+src/qt/recentrequeststablemodel.cpp\n+src/qt/recentrequeststablemodel.h\n+src/qt/res/bitcoin-qt-res.rc\n+src/qt/res/icons/about.png\n+src/qt/res/icons/about_qt.png\n+src/qt/res/icons/add.png\n+src/qt/res/icons/address-book.png\n+src/qt/res/icons/bitcoin.icns\n+src/qt/res/icons/bitcoin.ico\n+src/qt/res/icons/bitcoin.png\n+src/qt/res/icons/bitcoin_testnet.ico\n+src/qt/res/icons/chevron.png\n+src/qt/res/icons/clock1.png\n+src/qt/res/icons/clock2.png\n+src/qt/res/icons/clock3.png\n+src/qt/res/icons/clock4.png\n+src/qt/res/icons/clock5.png\n+src/qt/res/icons/configure.png\n+src/qt/res/icons/connect0.png\n+src/qt/res/icons/connect1.png\n+src/qt/res/icons/connect2.png\n+src/qt/res/icons/connect3.png\n+src/qt/res/icons/connect4.png\n+src/qt/res/icons/debugwindow.png\n+src/qt/res/icons/edit.png\n+src/qt/res/icons/editcopy.png\n+src/qt/res/icons/editpaste.png\n+src/qt/res/icons/export.png\n+src/qt/res/icons/eye.png\n+src/qt/res/icons/eye_minus.png\n+src/qt/res/icons/eye_plus.png\n+src/qt/res/icons/filesave.png\n+src/qt/res/icons/fontbigger.png\n+src/qt/res/icons/fontsmaller.png\n+src/qt/res/icons/hd_disabled.png\n+src/qt/res/icons/hd_enabled.png\n+src/qt/res/icons/history.png\n+src/qt/res/icons/info.png\n+src/qt/res/icons/key.png\n+src/qt/res/icons/lock_closed.png\n+src/qt/res/icons/lock_open.png\n+src/qt/res/icons/network_disabled.png\n+src/qt/res/icons/open.png\n+src/qt/res/icons/overview.png\n+src/qt/res/icons/quit.png\n+src/qt/res/icons/receive.png\n+src/qt/res/icons/remove.png\n+src/qt/res/icons/send.png\n+src/qt/res/icons/synced.png\n+src/qt/res/icons/transaction0.png\n+src/qt/res/icons/transaction2.png\n+src/qt/res/icons/transaction_abandoned.png\n+src/qt/res/icons/transaction_conflicted.png\n+src/qt/res/icons/tx_inout.png\n+src/qt/res/icons/tx_input.png\n+src/qt/res/icons/tx_mined.png\n+src/qt/res/icons/tx_output.png\n+src/qt/res/icons/verify.png\n+src/qt/res/icons/warning.png\n+src/qt/res/movies/makespinner.sh\n+src/qt/res/movies/spinner-000.png\n+src/qt/res/movies/spinner-001.png\n+src/qt/res/movies/spinner-002.png\n+src/qt/res/movies/spinner-003.png\n+src/qt/res/movies/spinner-004.png\n+src/qt/res/movies/spinner-005.png\n+src/qt/res/movies/spinner-006.png\n+src/qt/res/movies/spinner-007.png\n+src/qt/res/movies/spinner-008.png\n+src/qt/res/movies/spinner-009.png\n+src/qt/res/movies/spinner-010.png\n+src/qt/res/movies/spinner-011.png\n+src/qt/res/movies/spinner-012.png\n+src/qt/res/movies/spinner-013.png\n+src/qt/res/movies/spinner-014.png\n+src/qt/res/movies/spinner-015.png\n+src/qt/res/movies/spinner-016.png\n+src/qt/res/movies/spinner-017.png\n+src/qt/res/movies/spinner-018.png\n+src/qt/res/movies/spinner-019.png\n+src/qt/res/movies/spinner-020.png\n+src/qt/res/movies/spinner-021.png\n+src/qt/res/movies/spinner-022.png\n+src/qt/res/movies/spinner-023.png\n+src/qt/res/movies/spinner-024.png\n+src/qt/res/movies/spinner-025.png\n+src/qt/res/movies/spinner-026.png\n+src/qt/res/movies/spinner-027.png\n+src/qt/res/movies/spinner-028.png\n+src/qt/res/movies/spinner-029.png\n+src/qt/res/movies/spinner-030.png\n+src/qt/res/movies/spinner-031.png\n+src/qt/res/movies/spinner-032.png\n+src/qt/res/movies/spinner-033.png\n+src/qt/res/movies/spinner-034.png\n+src/qt/res/movies/spinner-035.png\n+src/qt/res/src/bitcoin.svg\n+src/qt/res/src/clock_0.svg\n+src/qt/res/src/clock_1.svg\n+src/qt/res/src/clock_2.svg\n+src/qt/res/src/clock_3.svg\n+src/qt/res/src/clock_4.svg\n+src/qt/res/src/connect-0.svg\n+src/qt/res/src/connect-1.svg\n+src/qt/res/src/connect-2.svg\n+src/qt/res/src/connect-3.svg\n+src/qt/res/src/connect-4.svg\n+src/qt/res/src/hd_disabled.svg\n+src/qt/res/src/hd_enabled.svg\n+src/qt/res/src/mine.svg\n+src/qt/res/src/network_disabled.svg\n+src/qt/res/src/qt.svg\n+src/qt/res/src/spinner.png\n+src/qt/res/src/transaction0.svg\n+src/qt/res/src/tx_in.svg\n+src/qt/res/src/tx_inout.svg\n+src/qt/res/src/verify.svg\n+src/qt/rpcconsole.cpp\n+src/qt/rpcconsole.h\n+src/qt/rpcconsole.moc\n+src/qt/sendcoinsdialog.cpp\n+src/qt/sendcoinsdialog.h\n+src/qt/sendcoinsentry.cpp\n+src/qt/sendcoinsentry.h\n+src/qt/signverifymessagedialog.cpp\n+src/qt/signverifymessagedialog.h\n+src/qt/splashscreen.cpp\n+src/qt/splashscreen.h\n+src/qt/test/compattests.cpp\n+src/qt/test/compattests.h\n+src/qt/test/moc_compattests.cpp\n+src/qt/test/moc_paymentservertests.cpp\n+src/qt/test/moc_rpcnestedtests.cpp\n+src/qt/test/moc_uritests.cpp\n+src/qt/test/moc_wallettests.cpp\n+src/qt/test/paymentrequestdata.h\n+src/qt/test/paymentservertests.cpp\n+src/qt/test/paymentservertests.h\n+src/qt/test/rpcnestedtests.cpp\n+src/qt/test/rpcnestedtests.h\n+src/qt/test/test_bitcoin-qt\n+src/qt/test/test_bitcoin-qt.log\n+src/qt/test/test_bitcoin-qt.trs\n+src/qt/test/test_main.cpp\n+src/qt/test/uritests.cpp\n+src/qt/test/uritests.h\n+src/qt/test/wallettests.cpp\n+src/qt/test/wallettests.h\n+src/qt/trafficgraphwidget.cpp\n+src/qt/trafficgraphwidget.h\n+src/qt/transactiondesc.cpp\n+src/qt/transactiondesc.h\n+src/qt/transactiondescdialog.cpp\n+src/qt/transactiondescdialog.h\n+src/qt/transactionfilterproxy.cpp\n+src/qt/transactionfilterproxy.h\n+src/qt/transactionrecord.cpp\n+src/qt/transactionrecord.h\n+src/qt/transactiontablemodel.cpp\n+src/qt/transactiontablemodel.h\n+src/qt/transactionview.cpp\n+src/qt/transactionview.h\n+src/qt/utilitydialog.cpp\n+src/qt/utilitydialog.h\n+src/qt/walletframe.cpp\n+src/qt/walletframe.h\n+src/qt/walletmodel.cpp\n+src/qt/walletmodel.h\n+src/qt/walletmodeltransaction.cpp\n+src/qt/walletmodeltransaction.h\n+src/qt/walletview.cpp\n+src/qt/walletview.h\n+src/qt/winshutdownmonitor.cpp\n+src/qt/winshutdownmonitor.h\n+src/random.cpp\n+src/random.h\n+src/rest.cpp\n+src/reverse_iterator.h\n+src/reverselock.h\n+src/rpc/blockchain.cpp\n+src/rpc/blockchain.h\n+src/rpc/client.cpp\n+src/rpc/client.h\n+src/rpc/mining.cpp\n+src/rpc/mining.h\n+src/rpc/misc.cpp\n+src/rpc/net.cpp\n+src/rpc/protocol.cpp\n+src/rpc/protocol.h\n+src/rpc/rawtransaction.cpp\n+src/rpc/rawtransaction.h\n+src/rpc/register.h\n+src/rpc/safemode.cpp\n+src/rpc/safemode.h\n+src/rpc/server.cpp\n+src/rpc/server.h\n+src/rpc/util.cpp\n+src/rpc/util.h\n+src/scheduler.cpp\n+src/scheduler.h\n+src/script/bitcoinconsensus.cpp\n+src/script/bitcoinconsensus.h\n+src/script/interpreter.cpp\n+src/script/interpreter.h\n+src/script/ismine.cpp\n+src/script/ismine.h\n+src/script/script.cpp\n+src/script/script.h\n+src/script/script_error.cpp\n+src/script/script_error.h\n+src/script/sigcache.cpp\n+src/script/sigcache.h\n+src/script/sign.cpp\n+src/script/sign.h\n+src/script/standard.cpp\n+src/script/standard.h\n+src/secp256k1/COPYING\n+src/secp256k1/README.md\n+src/secp256k1/TODO\n+src/secp256k1/aclocal.m4\n+src/secp256k1/autogen.sh\n+src/secp256k1/autom4te.cache/output.0\n+src/secp256k1/autom4te.cache/output.1\n+src/secp256k1/autom4te.cache/output.2\n+src/secp256k1/autom4te.cache/requests\n+src/secp256k1/autom4te.cache/traces.0\n+src/secp256k1/autom4te.cache/traces.1\n+src/secp256k1/autom4te.cache/traces.2\n+src/secp256k1/build-aux/compile\n+src/secp256k1/build-aux/config.guess\n+src/secp256k1/build-aux/config.sub\n+src/secp256k1/build-aux/depcomp\n+src/secp256k1/build-aux/install-sh\n+src/secp256k1/build-aux/ltmain.sh\n+src/secp256k1/build-aux/m4/ax_jni_include_dir.m4\n+src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4\n+src/secp256k1/build-aux/m4/bitcoin_secp.m4\n+src/secp256k1/build-aux/m4/libtool.m4\n+src/secp256k1/build-aux/m4/ltoptions.m4\n+src/secp256k1/build-aux/m4/ltsugar.m4\n+src/secp256k1/build-aux/m4/ltversion.m4\n+src/secp256k1/build-aux/m4/lt~obsolete.m4\n+src/secp256k1/build-aux/missing\n+src/secp256k1/build-aux/test-driver\n+src/secp256k1/config.log\n+src/secp256k1/config.status\n+src/secp256k1/configure\n+src/secp256k1/configure.ac\n+src/secp256k1/contrib/lax_der_parsing.c\n+src/secp256k1/contrib/lax_der_parsing.h\n+src/secp256k1/contrib/lax_der_privatekey_parsing.c\n+src/secp256k1/contrib/lax_der_privatekey_parsing.h\n+src/secp256k1/exhaustive_tests\n+src/secp256k1/exhaustive_tests.log\n+src/secp256k1/exhaustive_tests.trs\n+src/secp256k1/gen_context\n+src/secp256k1/include/secp256k1.h\n+src/secp256k1/include/secp256k1_ecdh.h\n+src/secp256k1/include/secp256k1_recovery.h\n+src/secp256k1/libsecp256k1.pc\n+src/secp256k1/libsecp256k1.pc.in\n+src/secp256k1/libtool\n+src/secp256k1/sage/group_prover.sage\n+src/secp256k1/sage/secp256k1.sage\n+src/secp256k1/sage/weierstrass_prover.sage\n+src/secp256k1/src/asm/field_10x26_arm.s\n+src/secp256k1/src/basic-config.h\n+src/secp256k1/src/bench.h\n+src/secp256k1/src/bench_ecdh.c\n+src/secp256k1/src/bench_internal.c\n+src/secp256k1/src/bench_recover.c\n+src/secp256k1/src/bench_sign.c\n+src/secp256k1/src/bench_verify.c\n+src/secp256k1/src/ecdsa.h\n+src/secp256k1/src/ecdsa_impl.h\n+src/secp256k1/src/eckey.h\n+src/secp256k1/src/eckey_impl.h\n+src/secp256k1/src/ecmult.h\n+src/secp256k1/src/ecmult_const.h\n+src/secp256k1/src/ecmult_const_impl.h\n+src/secp256k1/src/ecmult_gen.h\n+src/secp256k1/src/ecmult_gen_impl.h\n+src/secp256k1/src/ecmult_impl.h\n+src/secp256k1/src/ecmult_static_context.h\n+src/secp256k1/src/field.h\n+src/secp256k1/src/field_10x26.h\n+src/secp256k1/src/field_10x26_impl.h\n+src/secp256k1/src/field_5x52.h\n+src/secp256k1/src/field_5x52_asm_impl.h\n+src/secp256k1/src/field_5x52_impl.h\n+src/secp256k1/src/field_5x52_int128_impl.h\n+src/secp256k1/src/field_impl.h\n+src/secp256k1/src/gen_context.c\n+src/secp256k1/src/group.h\n+src/secp256k1/src/group_impl.h\n+src/secp256k1/src/hash.h\n+src/secp256k1/src/hash_impl.h\n+src/secp256k1/src/java/org/bitcoin/NativeSecp256k1.java\n+src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java\n+src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java\n+src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java\n+src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c\n+src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.h\n+src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c\n+src/secp256k1/src/java/org_bitcoin_Secp256k1Context.h\n+src/secp256k1/src/libsecp256k1-config.h\n+src/secp256k1/src/libsecp256k1-config.h.in\n+src/secp256k1/src/modules/ecdh/main_impl.h\n+src/secp256k1/src/modules/ecdh/tests_impl.h\n+src/secp256k1/src/modules/recovery/main_impl.h\n+src/secp256k1/src/modules/recovery/tests_impl.h\n+src/secp256k1/src/num.h\n+src/secp256k1/src/num_gmp.h\n+src/secp256k1/src/num_gmp_impl.h\n+src/secp256k1/src/num_impl.h\n+src/secp256k1/src/scalar.h\n+src/secp256k1/src/scalar_4x64.h\n+src/secp256k1/src/scalar_4x64_impl.h\n+src/secp256k1/src/scalar_8x32.h\n+src/secp256k1/src/scalar_8x32_impl.h\n+src/secp256k1/src/scalar_impl.h\n+src/secp256k1/src/scalar_low.h\n+src/secp256k1/src/scalar_low_impl.h\n+src/secp256k1/src/secp256k1.c\n+src/secp256k1/src/stamp-h1\n+src/secp256k1/src/testrand.h\n+src/secp256k1/src/testrand_impl.h\n+src/secp256k1/src/tests.c\n+src/secp256k1/src/tests_exhaustive.c\n+src/secp256k1/src/util.h\n+src/secp256k1/test-suite.log\n+src/secp256k1/tests\n+src/secp256k1/tests.log\n+src/secp256k1/tests.trs\n+src/serialize.h\n+src/streams.h\n+src/support/allocators/secure.h\n+src/support/allocators/zeroafterfree.h\n+src/support/cleanse.cpp\n+src/support/cleanse.h\n+src/support/events.h\n+src/support/lockedpool.cpp\n+src/support/lockedpool.h\n+src/sync.cpp\n+src/sync.h\n+src/test-suite.log\n+src/test/DoS_tests.cpp\n+src/test/README.md\n+src/test/addrman_tests.cpp\n+src/test/allocator_tests.cpp\n+src/test/amount_tests.cpp\n+src/test/arith_uint256_tests.cpp\n+src/test/base32_tests.cpp\n+src/test/base58_tests.cpp\n+src/test/base64_tests.cpp\n+src/test/bech32_tests.cpp\n+src/test/bip32_tests.cpp\n+src/test/blockchain_tests.cpp\n+src/test/blockencodings_tests.cpp\n+src/test/bloom_tests.cpp\n+src/test/bswap_tests.cpp\n+src/test/checkqueue_tests.cpp\n+src/test/coins_tests.cpp\n+src/test/compress_tests.cpp\n+src/test/crypto_tests.cpp\n+src/test/cuckoocache_tests.cpp\n+src/test/data/README.md\n+src/test/data/base58_encode_decode.json\n+src/test/data/base58_encode_decode.json.h\n+src/test/data/base58_keys_invalid.json\n+src/test/data/base58_keys_invalid.json.h\n+src/test/data/base58_keys_valid.json\n+src/test/data/base58_keys_valid.json.h\n+src/test/data/script_tests.json\n+src/test/data/script_tests.json.h\n+src/test/data/sighash.json\n+src/test/data/sighash.json.h\n+src/test/data/tx_invalid.json\n+src/test/data/tx_invalid.json.h\n+src/test/data/tx_valid.json\n+src/test/data/tx_valid.json.h\n+src/test/dbwrapper_tests.cpp\n+src/test/getarg_tests.cpp\n+src/test/hash_tests.cpp\n+src/test/key_tests.cpp\n+src/test/limitedmap_tests.cpp\n+src/test/main_tests.cpp\n+src/test/mempool_tests.cpp\n+src/test/merkle_tests.cpp\n+src/test/merkleblock_tests.cpp\n+src/test/miner_tests.cpp\n+src/test/multisig_tests.cpp\n+src/test/net_tests.cpp\n+src/test/netbase_tests.cpp\n+src/test/pmt_tests.cpp\n+src/test/policyestimator_tests.cpp\n+src/test/pow_tests.cpp\n+src/test/prevector_tests.cpp\n+src/test/raii_event_tests.cpp\n+src/test/random_tests.cpp\n+src/test/reverselock_tests.cpp\n+src/test/rpc_tests.cpp\n+src/test/sanity_tests.cpp\n+src/test/scheduler_tests.cpp\n+src/test/script_P2SH_tests.cpp\n+src/test/script_standard_tests.cpp\n+src/test/script_tests.cpp\n+src/test/scriptnum10.h\n+src/test/scriptnum_tests.cpp\n+src/test/serialize_tests.cpp\n+src/test/sighash_tests.cpp\n+src/test/sigopcount_tests.cpp\n+src/test/skiplist_tests.cpp\n+src/test/streams_tests.cpp\n+src/test/test_bitcoin\n+src/test/test_bitcoin.cpp\n+src/test/test_bitcoin.h\n+src/test/test_bitcoin.log\n+src/test/test_bitcoin.trs\n+src/test/test_bitcoin_fuzzy\n+src/test/test_bitcoin_fuzzy.cpp\n+src/test/test_bitcoin_main.cpp\n+src/test/timedata_tests.cpp\n+src/test/torcontrol_tests.cpp\n+src/test/transaction_tests.cpp\n+src/test/txvalidation_tests.cpp\n+src/test/txvalidationcache_tests.cpp\n+src/test/uint256_tests.cpp\n+src/test/util_tests.cpp\n+src/test/versionbits_tests.cpp\n+src/threadinterrupt.cpp\n+src/threadinterrupt.h\n+src/threadsafety.h\n+src/timedata.cpp\n+src/timedata.h\n+src/tinyformat.h\n+src/torcontrol.cpp\n+src/torcontrol.h\n+src/txdb.cpp\n+src/txdb.h\n+src/txmempool.cpp\n+src/txmempool.h\n+src/ui_interface.cpp\n+src/ui_interface.h\n+src/uint256.cpp\n+src/uint256.h\n+src/undo.h\n+src/univalue/COPYING\n+src/univalue/README.md\n+src/univalue/TODO\n+src/univalue/aclocal.m4\n+src/univalue/autogen.sh\n+src/univalue/autom4te.cache/output.0\n+src/univalue/autom4te.cache/output.1\n+src/univalue/autom4te.cache/output.2\n+src/univalue/autom4te.cache/requests\n+src/univalue/autom4te.cache/traces.0\n+src/univalue/autom4te.cache/traces.1\n+src/univalue/autom4te.cache/traces.2\n+src/univalue/build-aux/compile\n+src/univalue/build-aux/config.guess\n+src/univalue/build-aux/config.sub\n+src/univalue/build-aux/depcomp\n+src/univalue/build-aux/install-sh\n+src/univalue/build-aux/ltmain.sh\n+src/univalue/build-aux/m4/libtool.m4\n+src/univalue/build-aux/m4/ltoptions.m4\n+src/univalue/build-aux/m4/ltsugar.m4\n+src/univalue/build-aux/m4/ltversion.m4\n+src/univalue/build-aux/m4/lt~obsolete.m4\n+src/univalue/build-aux/missing\n+src/univalue/build-aux/test-driver\n+src/univalue/config.log\n+src/univalue/config.status\n+src/univalue/configure\n+src/univalue/configure.ac\n+src/univalue/gen/gen.cpp\n+src/univalue/include/univalue.h\n+src/univalue/lib/univalue.cpp\n+src/univalue/lib/univalue_escapes.h\n+src/univalue/lib/univalue_get.cpp\n+src/univalue/lib/univalue_read.cpp\n+src/univalue/lib/univalue_utffilter.h\n+src/univalue/lib/univalue_write.cpp\n+src/univalue/libtool\n+src/univalue/pc/libunivalue-uninstalled.pc\n+src/univalue/pc/libunivalue-uninstalled.pc.in\n+src/univalue/pc/libunivalue.pc\n+src/univalue/pc/libunivalue.pc.in\n+src/univalue/stamp-h1\n+src/univalue/test-suite.log\n+src/univalue/test/fail1.json\n+src/univalue/test/fail10.json\n+src/univalue/test/fail11.json\n+src/univalue/test/fail12.json\n+src/univalue/test/fail13.json\n+src/univalue/test/fail14.json\n+src/univalue/test/fail15.json\n+src/univalue/test/fail16.json\n+src/univalue/test/fail17.json\n+src/univalue/test/fail18.json\n+src/univalue/test/fail19.json\n+src/univalue/test/fail2.json\n+src/univalue/test/fail20.json\n+src/univalue/test/fail21.json\n+src/univalue/test/fail22.json\n+src/univalue/test/fail23.json\n+src/univalue/test/fail24.json\n+src/univalue/test/fail25.json\n+src/univalue/test/fail26.json\n+src/univalue/test/fail27.json\n+src/univalue/test/fail28.json\n+src/univalue/test/fail29.json\n+src/univalue/test/fail3.json\n+src/univalue/test/fail30.json\n+src/univalue/test/fail31.json\n+src/univalue/test/fail32.json\n+src/univalue/test/fail33.json\n+src/univalue/test/fail34.json\n+src/univalue/test/fail35.json\n+src/univalue/test/fail36.json\n+src/univalue/test/fail37.json\n+src/univalue/test/fail38.json\n+src/univalue/test/fail39.json\n+src/univalue/test/fail4.json\n+src/univalue/test/fail40.json\n+src/univalue/test/fail41.json\n+src/univalue/test/fail42.json\n+src/univalue/test/fail44.json\n+src/univalue/test/fail5.json\n+src/univalue/test/fail6.json\n+src/univalue/test/fail7.json\n+src/univalue/test/fail8.json\n+src/univalue/test/fail9.json\n+src/univalue/test/no_nul\n+src/univalue/test/no_nul.cpp\n+src/univalue/test/no_nul.log\n+src/univalue/test/no_nul.trs\n+src/univalue/test/object\n+src/univalue/test/object.cpp\n+src/univalue/test/object.log\n+src/univalue/test/object.trs\n+src/univalue/test/pass1.json\n+src/univalue/test/pass2.json\n+src/univalue/test/pass3.json\n+src/univalue/test/round1.json\n+src/univalue/test/round2.json\n+src/univalue/test/round3.json\n+src/univalue/test/round4.json\n+src/univalue/test/round5.json\n+src/univalue/test/round6.json\n+src/univalue/test/round7.json\n+src/univalue/test/test_json\n+src/univalue/test/test_json.cpp\n+src/univalue/test/unitester\n+src/univalue/test/unitester.cpp\n+src/univalue/test/unitester.log\n+src/univalue/test/unitester.trs\n+src/univalue/univalue-config.h\n+src/univalue/univalue-config.h.in\n+src/util.cpp\n+src/util.h\n+src/utilmoneystr.cpp\n+src/utilmoneystr.h\n+src/utilstrencodings.cpp\n+src/utilstrencodings.h\n+src/utiltime.cpp\n+src/utiltime.h\n+src/validation.cpp\n+src/validation.h\n+src/validationinterface.cpp\n+src/validationinterface.h\n+src/version.h\n+src/versionbits.cpp\n+src/versionbits.h\n+src/wallet/coincontrol.h\n+src/wallet/crypter.cpp\n+src/wallet/crypter.h\n+src/wallet/db.cpp\n+src/wallet/db.h\n+src/wallet/feebumper.cpp\n+src/wallet/feebumper.h\n+src/wallet/fees.cpp\n+src/wallet/fees.h\n+src/wallet/init.cpp\n+src/wallet/init.h\n+src/wallet/rpcdump.cpp\n+src/wallet/rpcwallet.cpp\n+src/wallet/rpcwallet.h\n+src/wallet/test/accounting_tests.cpp\n+src/wallet/test/crypto_tests.cpp\n+src/wallet/test/wallet_test_fixture.cpp\n+src/wallet/test/wallet_test_fixture.h\n+src/wallet/test/wallet_tests.cpp\n+src/wallet/wallet.cpp\n+src/wallet/wallet.h\n+src/wallet/walletdb.cpp\n+src/wallet/walletdb.h\n+src/wallet/walletutil.cpp\n+src/wallet/walletutil.h\n+src/warnings.cpp\n+src/warnings.h\n+src/zmq/zmqabstractnotifier.cpp\n+src/zmq/zmqabstractnotifier.h\n+src/zmq/zmqconfig.h\n+src/zmq/zmqnotificationinterface.cpp\n+src/zmq/zmqnotificationinterface.h\n+src/zmq/zmqpublishnotifier.cpp\n+src/zmq/zmqpublishnotifier.h\n+test/README.md\n+test/config.ini\n+test/config.ini.in\n+test/functional/README.md\n+test/functional/combine_logs.py\n+test/functional/combined_log_template.html\n+test/functional/create_cache.py\n+test/functional/example_test.py\n+test/functional/feature_assumevalid.py\n+test/functional/feature_bip68_sequence.py\n+test/functional/feature_bip9_softforks.py\n+test/functional/feature_block.py\n+test/functional/feature_cltv.py\n+test/functional/feature_config_args.py\n+test/functional/feature_csv_activation.py\n+test/functional/feature_dbcrash.py\n+test/functional/feature_dersig.py\n+test/functional/feature_fee_estimation.py\n+test/functional/feature_logging.py\n+test/functional/feature_maxuploadtarget.py\n+test/functional/feature_minchainwork.py\n+test/functional/feature_notifications.py\n+test/functional/feature_nulldummy.py\n+test/functional/feature_proxy.py\n+test/functional/feature_pruning.py\n+test/functional/feature_rbf.py\n+test/functional/feature_reindex.py\n+test/functional/feature_segwit.py\n+test/functional/feature_uacomment.py\n+test/functional/feature_versionbits_warning.py\n+test/functional/interface_bitcoin_cli.py\n+test/functional/interface_http.py\n+test/functional/interface_rest.py\n+test/functional/interface_zmq.py\n+test/functional/mempool_limit.py\n+test/functional/mempool_packages.py\n+test/functional/mempool_persist.py\n+test/functional/mempool_reorg.py\n+test/functional/mempool_resurrect.py\n+test/functional/mempool_spend_coinbase.py\n+test/functional/mining_basic.py\n+test/functional/mining_getblocktemplate_longpoll.py\n+test/functional/mining_prioritisetransaction.py\n+test/functional/p2p_compactblocks.py\n+test/functional/p2p_disconnect_ban.py\n+test/functional/p2p_feefilter.py\n+test/functional/p2p_fingerprint.py\n+test/functional/p2p_invalid_block.py\n+test/functional/p2p_invalid_tx.py\n+test/functional/p2p_leak.py\n+test/functional/p2p_mempool.py\n+test/functional/p2p_node_network_limited.py\n+test/functional/p2p_segwit.py\n+test/functional/p2p_sendheaders.py\n+test/functional/p2p_timeouts.py\n+test/functional/p2p_unrequested_blocks.py\n+test/functional/rpc_bind.py\n+test/functional/rpc_blockchain.py\n+test/functional/rpc_decodescript.py\n+test/functional/rpc_deprecated.py\n+test/functional/rpc_fundrawtransaction.py\n+test/functional/rpc_getchaintips.py\n+test/functional/rpc_invalidateblock.py\n+test/functional/rpc_listtransactions.py\n+test/functional/rpc_named_arguments.py\n+test/functional/rpc_net.py\n+test/functional/rpc_preciousblock.py\n+test/functional/rpc_rawtransaction.py\n+test/functional/rpc_signmessage.py\n+test/functional/rpc_signrawtransaction.py\n+test/functional/rpc_txoutproof.py\n+test/functional/rpc_uptime.py\n+test/functional/rpc_users.py\n+test/functional/test_framework/__init__.py\n+test/functional/test_framework/address.py\n+test/functional/test_framework/authproxy.py\n+test/functional/test_framework/bignum.py\n+test/functional/test_framework/blockstore.py\n+test/functional/test_framework/blocktools.py\n+test/functional/test_framework/comptool.py\n+test/functional/test_framework/coverage.py\n+test/functional/test_framework/key.py\n+test/functional/test_framework/messages.py\n+test/functional/test_framework/mininode.py\n+test/functional/test_framework/netutil.py\n+test/functional/test_framework/script.py\n+test/functional/test_framework/segwit_addr.py\n+test/functional/test_framework/siphash.py\n+test/functional/test_framework/socks5.py\n+test/functional/test_framework/test_framework.py\n+test/functional/test_framework/test_node.py\n+test/functional/test_framework/util.py\n+test/functional/test_runner.py\n+test/functional/wallet_abandonconflict.py\n+test/functional/wallet_accounts.py\n+test/functional/wallet_address_types.py\n+test/functional/wallet_backup.py\n+test/functional/wallet_basic.py\n+test/functional/wallet_bumpfee.py\n+test/functional/wallet_disable.py\n+test/functional/wallet_dump.py\n+test/functional/wallet_encryption.py\n+test/functional/wallet_hd.py\n+test/functional/wallet_import_rescan.py\n+test/functional/wallet_importmulti.py\n+test/functional/wallet_importprunedfunds.py\n+test/functional/wallet_keypool.py\n+test/functional/wallet_keypool_topup.py\n+test/functional/wallet_listreceivedby.py\n+test/functional/wallet_listsinceblock.py\n+test/functional/wallet_multiwallet.py\n+test/functional/wallet_resendwallettransactions.py\n+test/functional/wallet_txn_clone.py\n+test/functional/wallet_txn_doublespend.py\n+test/functional/wallet_zapwallettxes.py\n+test/util/bitcoin-util-test.py\n+test/util/data/bitcoin-util-test.json\n+test/util/data/blanktxv1.hex\n+test/util/data/blanktxv1.json\n+test/util/data/blanktxv2.hex\n+test/util/data/blanktxv2.json\n+test/util/data/tt-delin1-out.hex\n+test/util/data/tt-delin1-out.json\n+test/util/data/tt-delout1-out.hex\n+test/util/data/tt-delout1-out.json\n+test/util/data/tt-locktime317000-out.hex\n+test/util/data/tt-locktime317000-out.json\n+test/util/data/tx394b54bb.hex\n+test/util/data/txcreate1.hex\n+test/util/data/txcreate1.json\n+test/util/data/txcreate2.hex\n+test/util/data/txcreate2.json\n+test/util/data/txcreatedata1.hex\n+test/util/data/txcreatedata1.json\n+test/util/data/txcreatedata2.hex\n+test/util/data/txcreatedata2.json\n+test/util/data/txcreatedata_seq0.hex\n+test/util/data/txcreatedata_seq0.json\n+test/util/data/txcreatedata_seq1.hex\n+test/util/data/txcreatedata_seq1.json\n+test/util/data/txcreatemultisig1.hex\n+test/util/data/txcreatemultisig1.json\n+test/util/data/txcreatemultisig2.hex\n+test/util/data/txcreatemultisig2.json\n+test/util/data/txcreatemultisig3.hex\n+test/util/data/txcreatemultisig3.json\n+test/util/data/txcreatemultisig4.hex\n+test/util/data/txcreatemultisig4.json\n+test/util/data/txcreatemultisig5.json\n+test/util/data/txcreateoutpubkey1.hex\n+test/util/data/txcreateoutpubkey1.json\n+test/util/data/txcreateoutpubkey2.hex\n+test/util/data/txcreateoutpubkey2.json\n+test/util/data/txcreateoutpubkey3.hex\n+test/util/data/txcreateoutpubkey3.json\n+test/util/data/txcreatescript1.hex\n+test/util/data/txcreatescript1.json\n+test/util/data/txcreatescript2.hex\n+test/util/data/txcreatescript2.json\n+test/util/data/txcreatescript3.hex\n+test/util/data/txcreatescript3.json\n+test/util/data/txcreatescript4.hex\n+test/util/data/txcreatescript4.json\n+test/util/data/txcreatesignv1.hex\n+test/util/data/txcreatesignv1.json\n+test/util/data/txcreatesignv2.hex"
      },
      {
        "sha": "afe239cf6e7e8fa5bcf3ffb7e34684549d06cd69",
        "filename": "bitcoin.includes",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.includes",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/bitcoin.includes",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin.includes?ref=d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "patch": "@@ -0,0 +1,39 @@\n+src\n+src/bench\n+src/bench/data\n+src/compat\n+src/config\n+src/consensus\n+src/crypto\n+src/crypto/ctaes\n+src/leveldb/db\n+src/leveldb/helpers/memenv\n+src/leveldb/include/leveldb\n+src/leveldb/port\n+src/leveldb/port/win\n+src/leveldb/table\n+src/leveldb/util\n+src/obj\n+src/policy\n+src/primitives\n+src/qt\n+src/qt/forms\n+src/qt/test\n+src/rpc\n+src/script\n+src/secp256k1/contrib\n+src/secp256k1/include\n+src/secp256k1/src\n+src/secp256k1/src/java\n+src/secp256k1/src/modules/ecdh\n+src/secp256k1/src/modules/recovery\n+src/support\n+src/support/allocators\n+src/test\n+src/test/data\n+src/univalue\n+src/univalue/include\n+src/univalue/lib\n+src/wallet\n+src/wallet/test\n+src/zmq"
      },
      {
        "sha": "978ac2efdf0d5dd09684d7dafd41720374f4ea9a",
        "filename": "src/leveldb/port/port_posix.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/src/leveldb/port/port_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/src/leveldb/port/port_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_posix.cc?ref=d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "patch": "@@ -56,6 +56,7 @@ void InitOnce(OnceType* once, void (*initializer)()) {\n bool HasAcceleratedCRC32C() {\n #if (defined(__x86_64__) || defined(__i386__)) && defined(__GNUC__)\n   unsigned int eax, ebx, ecx, edx;\n+  ecx = 0;\n   __get_cpuid(1, &eax, &ebx, &ecx, &edx);\n   return (ecx & (1 << 20)) != 0;\n #else"
      },
      {
        "sha": "46f15aceda73a0ef6073a2a1c0621fdfcdce5100",
        "filename": "src/leveldb/util/logging.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/src/leveldb/util/logging.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8b13d453c1d740227d316b7bb4efe5ee3b9729c/src/leveldb/util/logging.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/logging.cc?ref=d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "patch": "@@ -55,7 +55,7 @@ bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {\n       const int delta = (c - '0');\n       static const uint64_t kMaxUint64 = ~static_cast<uint64_t>(0);\n       if (v > kMaxUint64/10 ||\n-          (v == kMaxUint64/10 && delta > kMaxUint64%10)) {\n+          (v == kMaxUint64/10 && (uint64_t) delta > kMaxUint64%10)) {\n         // Overflow\n         return false;\n       }"
      }
    ]
  },
  {
    "sha": "6e7240c40ea74b1ed29f2679a724eb972db52d6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTcyNDBjNDBlYTc0YjFlZDI5ZjI2NzlhNzI0ZWI5NzJkYjUyZDZi",
    "commit": {
      "author": {
        "name": "Bedri \u00d6zg\u00fcr G\u00fcler",
        "email": "bedriguler@gmail.com",
        "date": "2018-02-27T04:11:03Z"
      },
      "committer": {
        "name": "Bedri \u00d6zg\u00fcr G\u00fcler",
        "email": "bedriguler@gmail.com",
        "date": "2018-02-27T04:11:03Z"
      },
      "message": "fixes 'leveldb/util/logging.cc:58:40: warning: comparison between signed and unsigned integer expressions' compile warning message",
      "tree": {
        "sha": "e22988d5581e29d3ea30a547f827c07aa6a55fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e22988d5581e29d3ea30a547f827c07aa6a55fb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e7240c40ea74b1ed29f2679a724eb972db52d6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e7240c40ea74b1ed29f2679a724eb972db52d6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e7240c40ea74b1ed29f2679a724eb972db52d6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e7240c40ea74b1ed29f2679a724eb972db52d6b/comments",
    "author": {
      "login": "bedri",
      "id": 765487,
      "node_id": "MDQ6VXNlcjc2NTQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/765487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedri",
      "html_url": "https://github.com/bedri",
      "followers_url": "https://api.github.com/users/bedri/followers",
      "following_url": "https://api.github.com/users/bedri/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedri/subscriptions",
      "organizations_url": "https://api.github.com/users/bedri/orgs",
      "repos_url": "https://api.github.com/users/bedri/repos",
      "events_url": "https://api.github.com/users/bedri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedri/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bedri",
      "id": 765487,
      "node_id": "MDQ6VXNlcjc2NTQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/765487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedri",
      "html_url": "https://github.com/bedri",
      "followers_url": "https://api.github.com/users/bedri/followers",
      "following_url": "https://api.github.com/users/bedri/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedri/subscriptions",
      "organizations_url": "https://api.github.com/users/bedri/orgs",
      "repos_url": "https://api.github.com/users/bedri/repos",
      "events_url": "https://api.github.com/users/bedri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedri/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b13d453c1d740227d316b7bb4efe5ee3b9729c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b13d453c1d740227d316b7bb4efe5ee3b9729c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bba0f66106b2b47c05d1d87531b7dc27cbedd8c2",
        "filename": "src/leveldb/util/logging.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e7240c40ea74b1ed29f2679a724eb972db52d6b/src/leveldb/util/logging.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e7240c40ea74b1ed29f2679a724eb972db52d6b/src/leveldb/util/logging.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/logging.cc?ref=6e7240c40ea74b1ed29f2679a724eb972db52d6b",
        "patch": "@@ -55,7 +55,7 @@ bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {\n       const int delta = (c - '0');\n       static const uint64_t kMaxUint64 = ~static_cast<uint64_t>(0);\n       if (v > kMaxUint64/10 ||\n-          (v == kMaxUint64/10 && (uint64_t) delta > kMaxUint64%10)) {\n+         (v == kMaxUint64/10 && (uint64_t) delta > kMaxUint64%10)) {\n         // Overflow\n         return false;\n       }"
      }
    ]
  },
  {
    "sha": "1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDljYjRlYmFjZjk3YTJiNGVkZjRmNTVhMWU2ODQ2MGY0NzlmZWI2",
    "commit": {
      "author": {
        "name": "Bedri \u00d6zg\u00fcr G\u00fcler",
        "email": "bedriguler@gmail.com",
        "date": "2018-02-27T04:11:59Z"
      },
      "committer": {
        "name": "Bedri \u00d6zg\u00fcr G\u00fcler",
        "email": "bedriguler@gmail.com",
        "date": "2018-02-27T04:11:59Z"
      },
      "message": "fixes 'leveldb/port/port_posix.cc:60:15: warning: \u2018ecx\u2019 may be used uninitialized in this function' compile warning message",
      "tree": {
        "sha": "c3f8cac65a864e4145a33bf2c739a909dbf6cf5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3f8cac65a864e4145a33bf2c739a909dbf6cf5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6/comments",
    "author": {
      "login": "bedri",
      "id": 765487,
      "node_id": "MDQ6VXNlcjc2NTQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/765487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedri",
      "html_url": "https://github.com/bedri",
      "followers_url": "https://api.github.com/users/bedri/followers",
      "following_url": "https://api.github.com/users/bedri/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedri/subscriptions",
      "organizations_url": "https://api.github.com/users/bedri/orgs",
      "repos_url": "https://api.github.com/users/bedri/repos",
      "events_url": "https://api.github.com/users/bedri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedri/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bedri",
      "id": 765487,
      "node_id": "MDQ6VXNlcjc2NTQ4Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/765487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bedri",
      "html_url": "https://github.com/bedri",
      "followers_url": "https://api.github.com/users/bedri/followers",
      "following_url": "https://api.github.com/users/bedri/following{/other_user}",
      "gists_url": "https://api.github.com/users/bedri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bedri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bedri/subscriptions",
      "organizations_url": "https://api.github.com/users/bedri/orgs",
      "repos_url": "https://api.github.com/users/bedri/repos",
      "events_url": "https://api.github.com/users/bedri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bedri/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e7240c40ea74b1ed29f2679a724eb972db52d6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e7240c40ea74b1ed29f2679a724eb972db52d6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e7240c40ea74b1ed29f2679a724eb972db52d6b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4d18c48ce70c2caa2723c6af193fad5804aa0507",
        "filename": "src/leveldb/port/port_posix.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6/src/leveldb/port/port_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6/src/leveldb/port/port_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_posix.cc?ref=1d9cb4ebacf97a2b4edf4f55a1e68460f479feb6",
        "patch": "@@ -64,5 +64,5 @@ bool HasAcceleratedCRC32C() {\n #endif\n }\n \n-}  // namespace port\n-}  // namespace leveldb\n+} // namespace port\n+} // namespace leveldb"
      }
    ]
  }
]