[
  {
    "sha": "a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGQxYmQxYTI5YmUyZGNjNWUwMGM2M2I2YjQxOTE2YjFjNDY2ZGUw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-12-19T02:54:40Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-06-06T10:03:55Z"
      },
      "message": "Add private key derivation functions to descriptors",
      "tree": {
        "sha": "1903812b9613b0c5183dbf583dfa82d4f31cfb03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1903812b9613b0c5183dbf583dfa82d4f31cfb03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03858b23fe1d17e681eb18d24602b276020295a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03858b23fe1d17e681eb18d24602b276020295a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03858b23fe1d17e681eb18d24602b276020295a0"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 48,
      "deletions": 8
    },
    "files": [
      {
        "sha": "50119ba1845fe8e1a6c19373509d44e853356e5d",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 8,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
        "patch": "@@ -164,6 +164,9 @@ struct PubkeyProvider\n \n     /** Get the descriptor string form including private data (if available in arg). */\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n+\n+    /** Derive a private key, if private data is available in arg. */\n+    virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n };\n \n class OriginPubkeyProvider final : public PubkeyProvider\n@@ -195,6 +198,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n+    bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n+    {\n+        return m_provider->GetPrivKey(pos, arg, key);\n+    }\n };\n \n /** An object representing a parsed constant public key in a descriptor. */\n@@ -222,6 +229,10 @@ class ConstPubkeyProvider final : public PubkeyProvider\n         ret = EncodeSecret(key);\n         return true;\n     }\n+    bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n+    {\n+        return arg.GetKey(m_pubkey.GetID(), key);\n+    }\n };\n \n enum class DeriveType {\n@@ -266,14 +277,9 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     {\n         if (key) {\n             if (IsHardened()) {\n-                CExtKey extkey;\n-                if (!GetExtKey(arg, extkey)) return false;\n-                for (auto entry : m_path) {\n-                    extkey.Derive(extkey, entry);\n-                }\n-                if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n-                if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n-                *key = extkey.Neuter().pubkey;\n+                CKey priv_key;\n+                if (!GetPrivKey(pos, arg, priv_key)) return false;\n+                *key = priv_key.GetPubKey();\n             } else {\n                 // TODO: optimize by caching\n                 CExtPubKey extkey = m_extkey;\n@@ -312,6 +318,18 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n+    bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n+    {\n+        CExtKey extkey;\n+        if (!GetExtKey(arg, extkey)) return false;\n+        for (auto entry : m_path) {\n+            extkey.Derive(extkey, entry);\n+        }\n+        if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n+        if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n+        key = extkey.key;\n+        return true;\n+    }\n };\n \n /** Base class for all Descriptor implementations. */\n@@ -462,6 +480,20 @@ class DescriptorImpl : public Descriptor\n         Span<const unsigned char> span = MakeSpan(cache);\n         return ExpandHelper(pos, DUMMY_SIGNING_PROVIDER, &span, output_scripts, out, nullptr) && span.size() == 0;\n     }\n+\n+    void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const final\n+    {\n+        for (const auto& p : m_pubkey_args) {\n+            CKey key;\n+            if (!p->GetPrivKey(pos, provider, key)) continue;\n+            out.keys.emplace(key.GetPubKey().GetID(), key);\n+        }\n+        if (m_script_arg) {\n+            FlatSigningProvider subprovider;\n+            m_script_arg->ExpandPrivate(pos, provider, subprovider);\n+            out = Merge(out, subprovider);\n+        }\n+    }\n };\n \n /** Construct a vector with one element, which is moved into it. */"
      },
      {
        "sha": "af7ae229ca73c09f39d925d8e97b19a93e4bd3bb",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
        "patch": "@@ -60,6 +60,14 @@ struct Descriptor {\n      * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n      */\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n+\n+    /** Expand the private key for a descriptor at a specified position, if possible.\n+     *\n+     * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * provider: the provider to query for the private keys.\n+     * out: any private keys available for the specified pos will be placed here.\n+     */\n+    virtual void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const = 0;\n };\n \n /** Parse a descriptor string. Included private keys are put in out."
      }
    ]
  },
  {
    "sha": "81a884bbd0dbee108d11776794d9627ca07504aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWE4ODRiYmQwZGJlZTEwOGQxMTc3Njc5NGQ5NjI3Y2EwNzUwNGFh",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-12-19T02:56:42Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-06-06T10:03:55Z"
      },
      "message": "Import private keys from descriptor with importmulti if provided",
      "tree": {
        "sha": "65ba185efead2da56c491731aa3ba8e420d2e699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65ba185efead2da56c491731aa3ba8e420d2e699"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81a884bbd0dbee108d11776794d9627ca07504aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81a884bbd0dbee108d11776794d9627ca07504aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81a884bbd0dbee108d11776794d9627ca07504aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81a884bbd0dbee108d11776794d9627ca07504aa/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4d1bd1a29be2dcc5e00c63b6b41916b1c466de0"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1d9ca963f4ae6bbafd1ababc242f2a9f9285cb06",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81a884bbd0dbee108d11776794d9627ca07504aa/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81a884bbd0dbee108d11776794d9627ca07504aa/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=81a884bbd0dbee108d11776794d9627ca07504aa",
        "patch": "@@ -1166,8 +1166,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n \n     const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n \n-    // Expand all descriptors to get public keys and scripts.\n-    // TODO: get private keys from descriptors too\n+    // Expand all descriptors to get public keys and scripts, and private keys if available.\n     for (int i = range_start; i <= range_end; ++i) {\n         FlatSigningProvider out_keys;\n         std::vector<CScript> scripts_temp;\n@@ -1181,7 +1180,10 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n             import_data.import_scripts.emplace(x.second);\n         }\n \n+        parsed_desc->ExpandPrivate(i, keys, out_keys);\n+\n         std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n+        std::copy(out_keys.keys.begin(), out_keys.keys.end(), std::inserter(privkey_map, privkey_map.end()));\n         import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     }\n "
      },
      {
        "sha": "82de566c5332811ba327712e4dae1cde7ad5fdca",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81a884bbd0dbee108d11776794d9627ca07504aa/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81a884bbd0dbee108d11776794d9627ca07504aa/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=81a884bbd0dbee108d11776794d9627ca07504aa",
        "patch": "@@ -579,17 +579,17 @@ def run_test(self):\n                               error_code=-8,\n                               error_message='Descriptor is ranged, please specify the range')\n \n-        # Test importing of a ranged descriptor without keys\n+        # Test importing of a ranged descriptor with xpriv\n         self.log.info(\"Should import the ranged descriptor with specified range as solvable\")\n         self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\",\n                                \"range\": 1},\n-                              success=True,\n-                              warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n+                              success=True)\n         for address in addresses:\n             test_address(self.nodes[1],\n-                         key.p2sh_p2wpkh_addr,\n-                         solvable=True)\n+                         address,\n+                         solvable=True,\n+                         ismine=True)\n \n         self.test_importmulti({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n                               success=False, error_code=-8, error_message='End of range is too high')"
      }
    ]
  },
  {
    "sha": "2857bc4a64cc8dc7914bc984ac878397ac64292d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODU3YmM0YTY0Y2M4ZGM3OTE0YmM5ODRhYzg3ODM5N2FjNjQyOTJk",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-06-07T08:05:00Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-06-07T09:14:55Z"
      },
      "message": "Extend importmulti descriptor tests",
      "tree": {
        "sha": "aef8a1c48dd5e2cbfa730caa5fc7afa93f7ae518",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aef8a1c48dd5e2cbfa730caa5fc7afa93f7ae518"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2857bc4a64cc8dc7914bc984ac878397ac64292d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2857bc4a64cc8dc7914bc984ac878397ac64292d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2857bc4a64cc8dc7914bc984ac878397ac64292d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2857bc4a64cc8dc7914bc984ac878397ac64292d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81a884bbd0dbee108d11776794d9627ca07504aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81a884bbd0dbee108d11776794d9627ca07504aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81a884bbd0dbee108d11776794d9627ca07504aa"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12287d0df687fdfd0cc2740c7abaf9122ee33a7e",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2857bc4a64cc8dc7914bc984ac878397ac64292d/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2857bc4a64cc8dc7914bc984ac878397ac64292d/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=2857bc4a64cc8dc7914bc984ac878397ac64292d",
        "patch": "@@ -571,6 +571,7 @@ def run_test(self):\n         # Test ranged descriptor fails if range is not specified\n         xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n         addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n         desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n         self.log.info(\"Ranged descriptor import should fail without a specified range\")\n         self.test_importmulti({\"desc\": descsum_create(desc),\n@@ -606,6 +607,19 @@ def run_test(self):\n         self.test_importmulti({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n                               success=False, error_code=-8, error_message='Range is too large')\n \n+        # Test importing a descriptor containing a WIF private key\n+        wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n+        address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n+        desc = \"sh(wpkh(\" + wif_priv + \"))\"\n+        self.log.info(\"Should import a descriptor with a WIF private key as spendable\")\n+        self.test_importmulti({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True)\n+        test_address(self.nodes[1],\n+                     address,\n+                     solvable=True,\n+                     ismine=True)\n+\n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n         self.log.info(\"Should import a p2pkh address from descriptor\")"
      }
    ]
  },
  {
    "sha": "53b7de629d3d9281dc6f8fa10e32c4cdec59c140",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2I3ZGU2MjlkM2Q5MjgxZGM2ZjhmYTEwZTMyYzRjZGVjNTljMTQw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-06-07T13:34:58Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-06-07T13:34:58Z"
      },
      "message": "Add test for dumping the private key imported from descriptor",
      "tree": {
        "sha": "d91db38d1545a874c3d66c309a8207b2ff7036bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d91db38d1545a874c3d66c309a8207b2ff7036bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b7de629d3d9281dc6f8fa10e32c4cdec59c140",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b7de629d3d9281dc6f8fa10e32c4cdec59c140",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b7de629d3d9281dc6f8fa10e32c4cdec59c140",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b7de629d3d9281dc6f8fa10e32c4cdec59c140/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2857bc4a64cc8dc7914bc984ac878397ac64292d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2857bc4a64cc8dc7914bc984ac878397ac64292d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2857bc4a64cc8dc7914bc984ac878397ac64292d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e19c7919a96690b47360dcf046e3fb0209ec4c5f",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b7de629d3d9281dc6f8fa10e32c4cdec59c140/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b7de629d3d9281dc6f8fa10e32c4cdec59c140/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=53b7de629d3d9281dc6f8fa10e32c4cdec59c140",
        "patch": "@@ -620,6 +620,10 @@ def run_test(self):\n                      solvable=True,\n                      ismine=True)\n \n+        # dump the private key to ensure it matches what was imported\n+        privkey = self.nodes[1].dumpprivkey(address)\n+        assert_equal(privkey, wif_priv)\n+\n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n         self.log.info(\"Should import a p2pkh address from descriptor\")"
      }
    ]
  }
]