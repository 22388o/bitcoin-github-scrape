DrahtBot,2021-08-06 09:31:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23114](https://github.com/bitcoin/bitcoin/pull/23114) (Add minisketch subtree and integrate into build/test by fanquake)",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-894134343,894134343,
jnewbery,2021-08-06 09:47:02,"Strong concept ACK!\n\nAs well as the technical benefits listed in the PR description, a strong reason to go in this direction is to lower our maintenance and testing burden. Being able to build with a system univalue library really doesn't provide any benefit to users, but results in issues like #22412 which suck up reviewer and maintainer time. Maintaining support for different versions of uni",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-894142812,894142812,
ryanofsky,2021-08-06 10:22:12,"I know that the forking process already began before this PR, and I think that forking in open source can be very good. But I also think that when you fork, it is better practically and ethically to _rename the fork_. In the case of a library, this doesn't need to involve renaming functions and classes in the library, but the forked library should at least have different library filenames (`libuni",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-894163012,894163012,
Rspigler,2021-08-06 22:24:52,Concept ACK.  More control over our build is better.,https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-894547829,894547829,
practicalswift,2021-08-15 18:53:11,Concept ACK for the reasons @jnewbery gave in https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-894142812,https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-899095035,899095035,
laanwj,2021-08-16 13:00:18,"Concept ACK. \n\n> Please ignore this suggestion if it's too cumbersome. Just wanted to de scribe a possible way to make forking less confusing and contentious.\n\nNot sure about this. As said in the OP, we have done a similar thing for the `leveldb` and `crc32c` libraries with regard to maintaining our own fork without renaming them. The subsequent repositories have a mention in their github ",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-899489691,899489691,
MarcoFalke,2021-08-17 06:47:18,Maybe the GitHub projects could be renamed to `bitcoin-core/${upstream-name}-subtree` to clarify this is a repo only used for bitcoin-core internal subtrees? I agree that renaming the project name itself (in the code) is too much and might even send the wrong impression that this is maintained for someone other than bitcoin-core itself.,https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-900038840,900038840,
luke-jr,2021-09-02 12:23:27,"Concept NACK.\n\nUniValue is not comparable to secp256k1 and LevelDB - the latter are used in consensus-critical code, and so it's important to be careful about which bugs get fixed in them. Using the system UniValue isn't and shouldn't not be dangerous nor unsupported.\n\nThere is basically no reason to embed a copy of UniValue at all. If upstream support is lacking, we should just release ou",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-911617873,911617873,
MarcoFalke,2021-09-02 13:04:43,"Concept ACK.\n\nSurely, in a world with enough maintenance resources, univalue could be released and integrated as a separate library. As there are evidently neither resources to maintain it as a separate library, nor maintain the integration of an external univalue, this seems like a good move.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-911658749,911658749,
luke-jr,2021-09-02 13:21:23,"It's literally less effort to maintain it properly.\n\nAll the work to integrate it is already done. The bugs recently introduced, have also been fixed aside from gatekeepers blocking the fixes from being merged.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-911676600,911676600,
laanwj,2021-09-16 18:46:52,"> Maybe the GitHub projects could be renamed to bitcoin-core/${upstream-name}-subtree to clarify this is a repo only used for bitcoin-core internal subtrees?\n\nSure, sounds good to me. \n\nEdit: ok, i've renamed:\n- `bitcoin-core/univalue` → `bitcoin-core/univalue-subtree`\n- `bitcoin-core/leveldb` → `bitcoin-core/leveldb-subtree`\n- `bitcoin-core/crc32c` → `bitcoin-core/crc32c-subtree`\n",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-921154730,921154730,
jnewbery,2021-10-04 08:26:01,https://github.com/bitcoin-core/univalue-subtree/pull/19 is merged. Does this need rebasing?,https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-933259869,933259869,
fanquake,2021-10-04 11:36:08,"> bitcoin-core/univalue-subtree#19 is merged. Does this need rebasing?\n\nI've rebased on master and dropped the cherry-picks in favour of a subtree update. I've also fixed up the integration commit so that `make dist` is working properly, and made some other minor changes. Also updated the PR description.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-933397672,933397672,
MarcoFalke,2021-10-04 12:18:07,"The changes without the last commit will break building with git-bisect? If yes, the changes should probably be squashed into the previous merge commit (`git reset --soft HEAD~ && git commit --amend`).",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-933427798,933427798,
fanquake,2021-10-04 23:34:00,"Pushed a fix for the CI failures. The `fail*.json` sources were missing from the dist tarball, which was causing `unitester` to fail.\n\n> The changes without the last commit will break building with git-bisect?\n\nThey shouldn't do. After the subtree pull, univalue is still buildable using autotools. We atomically swap from building univalue using autotools, to integrating univalue into our b",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-933934705,933934705,
fanquake,2021-10-05 01:06:19,"Similar to what we are doing with the [minisketch integration](https://github.com/bitcoin/bitcoin/pull/23114/files#diff-d4537436596f04e21cc7507f185f355d2f9bff213eca7969382faff5c3336e57R31), pushed a change to skip building the univalue tests if fuzzing is enabled.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-933975173,933975173,
fanquake,2021-10-05 02:23:07,"At least one issue to fix from a [sanitizer CI](https://github.com/bitcoin/bitcoin/pull/22646/checks?check_run_id=3798223718):\n```bash\n********* Start testing of URITests *********\nConfig: Using QtTest library 5.15.2, Qt 5.15.2 (x86_64-little_endian-lp64 shared (dynamic) release build; by GCC 10.3.0), ubuntu 21.04\nPASS   : URITests::initTestCase()\nPASS   : URITests::uriTests()\nPASS   :",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-934004878,934004878,
MarcoFalke,2021-10-06 10:21:48,"You can fix the CI error with this diff:\n\n```diff\ndiff --git a/src/univalue/lib/univalue_read.cpp b/src/univalue/lib/univalue_read.cpp\nindex f8a5d4d76f..d68d263858 100644\n--- a/src/univalue/lib/univalue_read.cpp\n+++ b/src/univalue/lib/univalue_read.cpp\n@@ -244,7 +244,7 @@ enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n     }\n }\n \n-enum expect_bits",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-935917366,935917366,
MarcoFalke,2021-10-07 12:49:27,"Aw sorry, looks like I missed some more:\n\n```diff\ndiff --git a/src/univalue/lib/univalue_read.cpp b/src/univalue/lib/univalue_read.cpp\nindex d68d263858..be39bfe57a 100644\n--- a/src/univalue/lib/univalue_read.cpp\n+++ b/src/univalue/lib/univalue_read.cpp\n@@ -227,7 +227,7 @@ enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n             }\n \n             e",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-937760230,937760230,
MarcoFalke,2021-10-08 07:30:09,all green now :green_apple: :green_book: ,https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-938411975,938411975,
fanquake,2021-10-11 22:01:41,"Guix build:\n```bash\nbash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum\n1ede0a3901a0cbb7f226f83e1fda345886fe3255abd9a5a9113f8da222adb51d  guix-build-0f9524724634/output/aarch64-linux-gnu/SHA256SUMS.part\nce62c2d422394b6fd35522aa247aeb8bd5938df1709aa387316fadf71c2feec0  guix-build-0f9524724634/output/aarch64-linux-gn",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-940473337,940473337,
dongcarl,2021-10-12 14:47:52,"ACK 0f95247246 less my comment above, always nice to have an include-able `sources.mk` which makes integration easier.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-941083296,941083296,
DrahtBot,2021-10-17 23:11:08,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 6419bdfeb130b20ccfed229d9ba7eca7f385d036<br>(master) | commit adc92847897c09fa661948fc76609cddbb8e752e<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`57430d4cfea534e7...`](https://drahtbot.space/guix/bitcoin/bitcoin/6419bdfeb130b20ccfed229d9ba7eca7f385d036/SHA256SUMS.part) | [`90eacc0a4d12e195...`](https://,https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-945212055,945212055,
fanquake,2021-10-20 03:00:14,"I'm going to go ahead and merge this. In regards to the comments earlier in this PR, we've done some work to make it more clear that our fork is an internal (for our use only) subtree, by renaming the repository, and I've also opened a PR to adjust the README to mention that our API has diverged from upstream: https://github.com/bitcoin-core/univalue-subtree/pull/30.\n\n> After some discussion i",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-947277632,947277632,
jnewbery,2021-10-20 11:37:33,"post-merge ACK 0f95247246344510c9a51810c14c633abb382e95\n\nI've tested the changes and confirmed that the subconfigure isn't run (and that it's slightly faster). I'm not an autotools expert so can only lightly review the diff, but it all looks reasonable to me.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-947580838,947580838,
hebasto,2021-11-21 09:15:59,"This PR breaks builds with depends for `HOST=x86_64-w64-mingw32 DEBUG=1` due to massive errors like that:\n```\n/usr/bin/x86_64-w64-mingw32-ld: ./.libs/libunivalue.a(libunivalue_la-univalue.o):univalue.cpp:(.text+0x890): undefined reference to `__imp_pthread_mutex_lock'\n/usr/bin/x86_64-w64-mingw32-ld: ./.libs/libunivalue.a(libunivalue_la-univalue.o):univalue.cpp:(.text+0x8b0): undefined refere",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-974780821,974780821,
fanquake,2021-11-21 09:19:01,"> This PR breaks builds with depends for HOST=x86_64-w64-mingw32 DEBUG=1 due to massive errors like that:\n\nThis is the same as #19772.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-974781227,974781227,
hebasto,2021-11-27 14:27:36,"> > This PR breaks builds with depends for HOST=x86_64-w64-mingw32 DEBUG=1 due to massive errors like that:\n> \n> This is the same as #19772.\n\nThe fix has been suggested on #23612.",https://github.com/bitcoin/bitcoin/pull/22646#issuecomment-980636057,980636057,
dongcarl,2021-10-12 14:44:43,"Would it be appropriate to split this into other Automake primaries like `DATA`, `HEADERS`, etc?",https://github.com/bitcoin/bitcoin/pull/22646#discussion_r727211791,727211791,src/Makefile.univalue.include
theuni,2021-10-19 16:30:44,"Wouldn't hurt, but it doesn't matter a ton for now since it's all `noinst_`.\n\nI suspect we _will_ end up needing to make a distinction between headers and source files when we get to c++20 and [modules](https://en.cppreference.com/w/cpp/language/modules), though.",https://github.com/bitcoin/bitcoin/pull/22646#discussion_r732047906,732047906,src/Makefile.univalue.include
fanquake,2021-10-20 02:58:24,I'm going to save this for a followup.,https://github.com/bitcoin/bitcoin/pull/22646#discussion_r732379687,732379687,src/Makefile.univalue.include
