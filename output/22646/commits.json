[
  {
    "sha": "9b49ed656fb2b687fbbe8a3236d18285957eee16",
    "node_id": "C_kwDOABII59oAKDliNDllZDY1NmZiMmI2ODdmYmJlOGEzMjM2ZDE4Mjg1OTU3ZWVlMTY",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-11T12:45:56Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-11T12:45:56Z"
      },
      "message": "Squashed 'src/univalue/' changes from 98fadc0909..a44caf65fe\n\na44caf65fe Merge bitcoin-core/univalue-subtree#28: Import fixes for sanitizer reported issues\n135254331e Import fixes for sanitizer reported issues\nd5fb86940e refactor: use c++11 range based for loop in checkObject\nff9c379304 refactor: Use nullptr (c++11) instead of NULL\n08a99754d5 build: use ax_cxx_compile_stdcxx.m4 to check for C++11 support\n66d3713ce7 Merge bitcoin-core/univalue#29: ci: travis -> cirrus\n808d487292 ci: travis -> cirrus\nc390ac375f Merge bitcoin-core/univalue#19: Split sources for easier buildsystem integration\n4a5b0a1c65 build: Move source entries out to sources.mk\n6c7d94b33c build: cleanup wonky gen usage\na222637c6d Merge #23: Merge changes from jgarzik/univalue@1ae6a23\nf77d0f718d Merge commit '1ae6a231a0169938eb3972c1d48dd17cba5947e1' into HEAD\n1ae6a231a0 Merge pull request #57 from MarcoFalke/test_fix\n92bdd11f0b univalue_write: remove unneeded sstream.h include\nffb621c130 Merge pull request #56 from drodil/remove_sstream_header\nf33acf9fe8 Merge commit '7890db9~' into HEAD\n66e0adec4d Remove unnecessary sstream header from univalue.h\n88967f6586 Version 1.0.4\n1dc113dbef Merge pull request #50 from luke-jr/pushKV_bool\n72392fb227 [tests] test pushKV for boolean values\nc23132bcf4 Pushing boolean value to univalue correctly\n81faab26a1 Merge pull request #48 from fwolfst/47-UPDATE_MIT_LINK_TO_HTTPS\nb17634ef24 Update URLs to MIT license.\n88ab64f6b5 Merge pull request #46 from jasonbcox/master\n35ed96da31 Merge pull request #44 from MarcoFalke/Mf1709-univalue-cherrypick-explicit\n420c226290 Merge pull request #45 from MarcoFalke/Mf1710-univalue-revert-test\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: a44caf65fe55b9dd8ddb08f04c0f70409efd53b3",
      "tree": {
        "sha": "3313812f4165d185703744b9633eadb4109eeb4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3313812f4165d185703744b9633eadb4109eeb4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b49ed656fb2b687fbbe8a3236d18285957eee16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b49ed656fb2b687fbbe8a3236d18285957eee16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b49ed656fb2b687fbbe8a3236d18285957eee16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b49ed656fb2b687fbbe8a3236d18285957eee16/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a55a0ed3055a2ce0a33b58a3a7bbf6e30df3dfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a55a0ed3055a2ce0a33b58a3a7bbf6e30df3dfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a55a0ed3055a2ce0a33b58a3a7bbf6e30df3dfd"
      }
    ],
    "stats": {
      "total": 1745,
      "additions": 1369,
      "deletions": 376
    },
    "files": [
      {
        "sha": "f140fee12bc8cdaced93ff06c0f60e3bf4daac7b",
        "filename": ".cirrus.yml",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -0,0 +1,44 @@\n+env:\n+  MAKEJOBS: \"-j4\"\n+  RUN_TESTS: \"true\"\n+  BASE_OUTDIR: \"$CIRRUS_WORKING_DIR/out_dir_base\"\n+  DEBIAN_FRONTEND: \"noninteractive\"\n+\n+task:\n+  container:\n+    image: ubuntu:focal\n+    cpu: 1\n+    memory: 1G\n+    greedy: true  # https://medium.com/cirruslabs/introducing-greedy-container-instances-29aad06dc2b4\n+\n+  matrix:\n+    - name: \"gcc\"\n+      env:\n+        CC: \"gcc\"\n+        CXX: \"g++\"\n+        APT_PKGS: \"gcc\"\n+    - name: \"clang\"\n+      env:\n+        CC: \"clang\"\n+        CXX: \"clang++\"\n+        APT_PKGS: \"clang\"\n+    - name: \"mingw\"\n+      env:\n+        CC: \"\"\n+        CXX: \"\"\n+        UNIVALUE_CONFIG: \"--host=x86_64-w64-mingw32\"\n+        APT_PKGS: \"g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 binutils-mingw-w64-x86-64\"\n+        RUN_TESTS: \"false\"\n+\n+  install_script:\n+    - apt update\n+    - apt install -y pkg-config build-essential libtool autotools-dev automake bsdmainutils\n+    - apt install -y $APT_PKGS\n+  autogen_script:\n+     - ./autogen.sh\n+  configure_script:\n+     - ./configure --cache-file=config.cache --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib $UNIVALUE_CONFIG\n+  make_script:\n+     - make $MAKEJOBS V=1\n+  test_script:\n+     - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS distcheck; fi"
      },
      {
        "sha": "43a1ed362e7e54d33c28a30da803f89ee8219d26",
        "filename": ".travis.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a55a0ed3055a2ce0a33b58a3a7bbf6e30df3dfd/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a55a0ed3055a2ce0a33b58a3a7bbf6e30df3dfd/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=2a55a0ed3055a2ce0a33b58a3a7bbf6e30df3dfd",
        "patch": "@@ -1,51 +0,0 @@\n-language: cpp\n-\n-compiler:\n-  - clang\n-  - gcc\n-\n-os:\n-  - linux\n-  - osx\n-\n-sudo: false\n-\n-env:\n-  global:\n-    - MAKEJOBS=-j3\n-    - RUN_TESTS=true\n-    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n-\n-cache:\n-  apt: true\n-\n-addons:\n-  apt:\n-    packages:\n-      - pkg-config\n-\n-before_script:\n-  - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n-  - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n-\n-script:\n-  - if [ -n \"$UNIVALUE_CONFIG\" ]; then unset CC; unset CXX; fi\n-  - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n-  - UNIVALUE_CONFIG_ALL=\"--prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n-  - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n-  - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n-  - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-  - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS distcheck; fi\n-\n-matrix:\n-  fast_finish: true\n-  include:\n-    - os: linux\n-      compiler: gcc\n-      env: UNIVALUE_CONFIG=--host=x86_64-w64-mingw32 RUN_TESTS=false\n-      addons:\n-        apt:\n-          packages:\n-            - g++-mingw-w64-x86-64\n-            - gcc-mingw-w64-x86-64\n-            - binutils-mingw-w64-x86-64"
      },
      {
        "sha": "476f14b922ebf140a5a6d864241ff1e6bcc88ee3",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 15,
        "deletions": 75,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,20 +1,17 @@\n+include sources.mk\n ACLOCAL_AMFLAGS = -I build-aux/m4\n-.PHONY: gen\n+.PHONY: gen FORCE\n .INTERMEDIATE: $(GENBIN)\n \n-include_HEADERS = include/univalue.h\n-noinst_HEADERS = lib/univalue_escapes.h lib/univalue_utffilter.h\n+include_HEADERS = $(UNIVALUE_DIST_HEADERS_INT)\n+noinst_HEADERS = $(UNIVALUE_LIB_HEADERS_INT)\n \n lib_LTLIBRARIES = libunivalue.la\n \n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA = pc/libunivalue.pc\n \n-libunivalue_la_SOURCES = \\\n-\tlib/univalue.cpp \\\n-\tlib/univalue_get.cpp \\\n-\tlib/univalue_read.cpp \\\n-\tlib/univalue_write.cpp\n+libunivalue_la_SOURCES = $(UNIVALUE_LIB_SOURCES_INT)\n \n libunivalue_la_LDFLAGS = \\\n \t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n@@ -30,89 +27,32 @@ $(GENBIN): $(GEN_SRCS)\n \t@echo Building $@\n \t$(AM_V_at)c++ -I$(top_srcdir)/include -o $@ $<\n \n-gen: lib/univalue_escapes.h $(GENBIN)\n-\t@echo Updating $<\n+gen: $(GENBIN) FORCE\n+\t@echo Updating lib/univalue_escapes.h\n \t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n \n noinst_PROGRAMS = $(TESTS) test/test_json\n \n-TEST_DATA_DIR=test\n-\n-test_unitester_SOURCES = test/unitester.cpp\n+test_unitester_SOURCES = $(UNIVALUE_TEST_UNITESTER_INT)\n test_unitester_LDADD = libunivalue.la\n-test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n+test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(UNIVALUE_TEST_DATA_DIR_INT)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-test_test_json_SOURCES = test/test_json.cpp\n+test_test_json_SOURCES = $(UNIVALUE_TEST_JSON_INT)\n test_test_json_LDADD = libunivalue.la\n test_test_json_CXXFLAGS = -I$(top_srcdir)/include\n test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-test_no_nul_SOURCES = test/no_nul.cpp\n+test_no_nul_SOURCES = $(UNIVALUE_TEST_NO_NUL_INT)\n test_no_nul_LDADD = libunivalue.la\n test_no_nul_CXXFLAGS = -I$(top_srcdir)/include\n test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-test_object_SOURCES = test/object.cpp\n+test_object_SOURCES = $(UNIVALUE_TEST_OBJECT_INT)\n test_object_LDADD = libunivalue.la\n test_object_CXXFLAGS = -I$(top_srcdir)/include\n test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-TEST_FILES = \\\n-\t$(TEST_DATA_DIR)/fail10.json \\\n-\t$(TEST_DATA_DIR)/fail11.json \\\n-\t$(TEST_DATA_DIR)/fail12.json \\\n-\t$(TEST_DATA_DIR)/fail13.json \\\n-\t$(TEST_DATA_DIR)/fail14.json \\\n-\t$(TEST_DATA_DIR)/fail15.json \\\n-\t$(TEST_DATA_DIR)/fail16.json \\\n-\t$(TEST_DATA_DIR)/fail17.json \\\n-\t$(TEST_DATA_DIR)/fail18.json \\\n-\t$(TEST_DATA_DIR)/fail19.json \\\n-\t$(TEST_DATA_DIR)/fail1.json \\\n-\t$(TEST_DATA_DIR)/fail20.json \\\n-\t$(TEST_DATA_DIR)/fail21.json \\\n-\t$(TEST_DATA_DIR)/fail22.json \\\n-\t$(TEST_DATA_DIR)/fail23.json \\\n-\t$(TEST_DATA_DIR)/fail24.json \\\n-\t$(TEST_DATA_DIR)/fail25.json \\\n-\t$(TEST_DATA_DIR)/fail26.json \\\n-\t$(TEST_DATA_DIR)/fail27.json \\\n-\t$(TEST_DATA_DIR)/fail28.json \\\n-\t$(TEST_DATA_DIR)/fail29.json \\\n-\t$(TEST_DATA_DIR)/fail2.json \\\n-\t$(TEST_DATA_DIR)/fail30.json \\\n-\t$(TEST_DATA_DIR)/fail31.json \\\n-\t$(TEST_DATA_DIR)/fail32.json \\\n-\t$(TEST_DATA_DIR)/fail33.json \\\n-\t$(TEST_DATA_DIR)/fail34.json \\\n-\t$(TEST_DATA_DIR)/fail35.json \\\n-\t$(TEST_DATA_DIR)/fail36.json \\\n-\t$(TEST_DATA_DIR)/fail37.json \\\n-\t$(TEST_DATA_DIR)/fail38.json \\\n-\t$(TEST_DATA_DIR)/fail39.json \\\n-\t$(TEST_DATA_DIR)/fail40.json \\\n-\t$(TEST_DATA_DIR)/fail41.json \\\n-\t$(TEST_DATA_DIR)/fail42.json \\\n-\t$(TEST_DATA_DIR)/fail44.json \\\n-\t$(TEST_DATA_DIR)/fail45.json \\\n-\t$(TEST_DATA_DIR)/fail3.json \\\n-\t$(TEST_DATA_DIR)/fail4.json \\\n-\t$(TEST_DATA_DIR)/fail5.json \\\n-\t$(TEST_DATA_DIR)/fail6.json \\\n-\t$(TEST_DATA_DIR)/fail7.json \\\n-\t$(TEST_DATA_DIR)/fail8.json \\\n-\t$(TEST_DATA_DIR)/fail9.json \\\n-\t$(TEST_DATA_DIR)/pass1.json \\\n-\t$(TEST_DATA_DIR)/pass2.json \\\n-\t$(TEST_DATA_DIR)/pass3.json \\\n-\t$(TEST_DATA_DIR)/pass4.json \\\n-\t$(TEST_DATA_DIR)/round1.json \\\n-\t$(TEST_DATA_DIR)/round2.json \\\n-\t$(TEST_DATA_DIR)/round3.json \\\n-\t$(TEST_DATA_DIR)/round4.json \\\n-\t$(TEST_DATA_DIR)/round5.json \\\n-\t$(TEST_DATA_DIR)/round6.json \\\n-\t$(TEST_DATA_DIR)/round7.json\n-\n-EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)\n+TEST_FILES = $(UNIVALUE_TEST_FILES_INT)\n+\n+EXTRA_DIST=$(UNIVALUE_TEST_FILES_INT) $(GEN_SRCS)"
      },
      {
        "sha": "f7e5137003cfd07327b1f9d552508ad47b39a840",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "added",
        "additions": 962,
        "deletions": 0,
        "changes": 962,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -0,0 +1,962 @@\n+# ===========================================================================\n+#  https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX(VERSION, [ext|noext], [mandatory|optional])\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the specified\n+#   version of the C++ standard.  If necessary, add switches to CXX and\n+#   CXXCPP to enable support.  VERSION may be '11' (for the C++11 standard)\n+#   or '14' (for the C++14 standard).\n+#\n+#   The second argument, if specified, indicates whether you insist on an\n+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n+#   -std=c++11).  If neither is specified, you get whatever works, with\n+#   preference for no added switch, and then for an extended mode.\n+#\n+#   The third argument, if specified 'mandatory' or if left unspecified,\n+#   indicates that baseline support for the specified C++ standard is\n+#   required and that the macro should error out if no mode with that\n+#   support is found.  If specified 'optional', then configuration proceeds\n+#   regardless, after defining HAVE_CXX${VERSION} if and only if a\n+#   supporting mode is found.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>\n+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>\n+#   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n+#   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n+#   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#   Copyright (c) 2016, 2018 Krzesimir Nowak <qdlacz@gmail.com>\n+#   Copyright (c) 2019 Enji Cooper <yaneurabeya@gmail.com>\n+#   Copyright (c) 2020 Jason Merrill <jason@redhat.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 12\n+\n+dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n+dnl  (serial version number 13).\n+\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n+  m4_if([$1], [11], [ax_cxx_compile_alternatives=\"11 0x\"],\n+        [$1], [14], [ax_cxx_compile_alternatives=\"14 1y\"],\n+        [$1], [17], [ax_cxx_compile_alternatives=\"17 1z\"],\n+        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$2], [], [],\n+        [$2], [ext], [],\n+        [$2], [noext], [],\n+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n+        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  AC_LANG_PUSH([C++])dnl\n+  ac_success=no\n+\n+  m4_if([$2], [], [dnl\n+    AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n+       ax_cv_cxx_compile_cxx$1,\n+      [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+        [ax_cv_cxx_compile_cxx$1=yes],\n+        [ax_cv_cxx_compile_cxx$1=no])])\n+    if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n+      ac_success=yes\n+    fi])\n+\n+  m4_if([$2], [noext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      switch=\"-std=gnu++${alternative}\"\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXX=\"$ac_save_CXX\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+\n+  m4_if([$2], [ext], [], [dnl\n+  if test x$ac_success = xno; then\n+    dnl HP's aCC needs +std=c++11 according to:\n+    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n+    dnl Cray's crayCC needs \"-h std=c++11\"\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      for switch in -std=c++${alternative} +std=c++${alternative} \"-h std=c++${alternative}\"; do\n+        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                       $cachevar,\n+          [ac_save_CXX=\"$CXX\"\n+           CXX=\"$CXX $switch\"\n+           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+            [eval $cachevar=yes],\n+            [eval $cachevar=no])\n+           CXX=\"$ac_save_CXX\"])\n+        if eval test x\\$$cachevar = xyes; then\n+          CXX=\"$CXX $switch\"\n+          if test -n \"$CXXCPP\" ; then\n+            CXXCPP=\"$CXXCPP $switch\"\n+          fi\n+          ac_success=yes\n+          break\n+        fi\n+      done\n+      if test x$ac_success = xyes; then\n+        break\n+      fi\n+    done\n+  fi])\n+  AC_LANG_POP([C++])\n+  if test x$ax_cxx_compile_cxx$1_required = xtrue; then\n+    if test x$ac_success = xno; then\n+      AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])\n+    fi\n+  fi\n+  if test x$ac_success = xno; then\n+    HAVE_CXX$1=0\n+    AC_MSG_NOTICE([No compiler with C++$1 support was found])\n+  else\n+    HAVE_CXX$1=1\n+    AC_DEFINE(HAVE_CXX$1,1,\n+              [define if the compiler supports basic C++$1 syntax])\n+  fi\n+  AC_SUBST(HAVE_CXX$1)\n+])\n+\n+\n+dnl  Test body for checking C++11 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_11],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+)\n+\n+\n+dnl  Test body for checking C++14 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+)\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_17],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_17\n+)\n+\n+dnl  Tests for new features in C++11\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_11], [[\n+\n+// If the compiler admits that it is not ready for C++11, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201103L\n+\n+#error \"This is not a C++11 compiler\"\n+\n+#else\n+\n+namespace cxx11\n+{\n+\n+  namespace test_static_assert\n+  {\n+\n+    template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+  }\n+\n+  namespace test_final_override\n+  {\n+\n+    struct Base\n+    {\n+      virtual ~Base() {}\n+      virtual void f() {}\n+    };\n+\n+    struct Derived : public Base\n+    {\n+      virtual ~Derived() override {}\n+      virtual void f() override {}\n+    };\n+\n+  }\n+\n+  namespace test_double_right_angle_brackets\n+  {\n+\n+    template < typename T >\n+    struct check {};\n+\n+    typedef check<void> single_type;\n+    typedef check<check<void>> double_type;\n+    typedef check<check<check<void>>> triple_type;\n+    typedef check<check<check<check<void>>>> quadruple_type;\n+\n+  }\n+\n+  namespace test_decltype\n+  {\n+\n+    int\n+    f()\n+    {\n+      int a = 1;\n+      decltype(a) b = 2;\n+      return a + b;\n+    }\n+\n+  }\n+\n+  namespace test_type_deduction\n+  {\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static const bool value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static const bool value = true;\n+    };\n+\n+    template < typename T1, typename T2 >\n+    auto\n+    add(T1 a1, T2 a2) -> decltype(a1 + a2)\n+    {\n+      return a1 + a2;\n+    }\n+\n+    int\n+    test(const int c, volatile int v)\n+    {\n+      static_assert(is_same<int, decltype(0)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(c)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(v)>::value == false, \"\");\n+      auto ac = c;\n+      auto av = v;\n+      auto sumi = ac + av + 'x';\n+      auto sumf = ac + av + 1.0;\n+      static_assert(is_same<int, decltype(ac)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(av)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumi)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumf)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(add(c, v))>::value == true, \"\");\n+      return (sumf > 0.0) ? sumi : add(c, v);\n+    }\n+\n+  }\n+\n+  namespace test_noexcept\n+  {\n+\n+    int f() { return 0; }\n+    int g() noexcept { return 0; }\n+\n+    static_assert(noexcept(f()) == false, \"\");\n+    static_assert(noexcept(g()) == true, \"\");\n+\n+  }\n+\n+  namespace test_constexpr\n+  {\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c_r(const CharT *const s, const unsigned long acc) noexcept\n+    {\n+      return *s ? strlen_c_r(s + 1, acc + 1) : acc;\n+    }\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      return strlen_c_r(s, 0UL);\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"1\") == 1UL, \"\");\n+    static_assert(strlen_c(\"example\") == 7UL, \"\");\n+    static_assert(strlen_c(\"another\\0example\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_rvalue_references\n+  {\n+\n+    template < int N >\n+    struct answer\n+    {\n+      static constexpr int value = N;\n+    };\n+\n+    answer<1> f(int&)       { return answer<1>(); }\n+    answer<2> f(const int&) { return answer<2>(); }\n+    answer<3> f(int&&)      { return answer<3>(); }\n+\n+    void\n+    test()\n+    {\n+      int i = 0;\n+      const int c = 0;\n+      static_assert(decltype(f(i))::value == 1, \"\");\n+      static_assert(decltype(f(c))::value == 2, \"\");\n+      static_assert(decltype(f(0))::value == 3, \"\");\n+    }\n+\n+  }\n+\n+  namespace test_uniform_initialization\n+  {\n+\n+    struct test\n+    {\n+      static const int zero {};\n+      static const int one {1};\n+    };\n+\n+    static_assert(test::zero == 0, \"\");\n+    static_assert(test::one == 1, \"\");\n+\n+  }\n+\n+  namespace test_lambdas\n+  {\n+\n+    void\n+    test1()\n+    {\n+      auto lambda1 = [](){};\n+      auto lambda2 = lambda1;\n+      lambda1();\n+      lambda2();\n+    }\n+\n+    int\n+    test2()\n+    {\n+      auto a = [](int i, int j){ return i + j; }(1, 2);\n+      auto b = []() -> int { return '0'; }();\n+      auto c = [=](){ return a + b; }();\n+      auto d = [&](){ return c; }();\n+      auto e = [a, &b](int x) mutable {\n+        const auto identity = [](int y){ return y; };\n+        for (auto i = 0; i < a; ++i)\n+          a += b--;\n+        return x + identity(a + b);\n+      }(0);\n+      return a + b + c + d + e;\n+    }\n+\n+    int\n+    test3()\n+    {\n+      const auto nullary = [](){ return 0; };\n+      const auto unary = [](int x){ return x; };\n+      using nullary_t = decltype(nullary);\n+      using unary_t = decltype(unary);\n+      const auto higher1st = [](nullary_t f){ return f(); };\n+      const auto higher2nd = [unary](nullary_t f1){\n+        return [unary, f1](unary_t f2){ return f2(unary(f1())); };\n+      };\n+      return higher1st(nullary) + higher2nd(nullary)(unary);\n+    }\n+\n+  }\n+\n+  namespace test_variadic_templates\n+  {\n+\n+    template <int...>\n+    struct sum;\n+\n+    template <int N0, int... N1toN>\n+    struct sum<N0, N1toN...>\n+    {\n+      static constexpr auto value = N0 + sum<N1toN...>::value;\n+    };\n+\n+    template <>\n+    struct sum<>\n+    {\n+      static constexpr auto value = 0;\n+    };\n+\n+    static_assert(sum<>::value == 0, \"\");\n+    static_assert(sum<1>::value == 1, \"\");\n+    static_assert(sum<23>::value == 23, \"\");\n+    static_assert(sum<1, 2>::value == 3, \"\");\n+    static_assert(sum<5, 5, 11>::value == 21, \"\");\n+    static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, \"\");\n+\n+  }\n+\n+  // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae\n+  // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function\n+  // because of this.\n+  namespace test_template_alias_sfinae\n+  {\n+\n+    struct foo {};\n+\n+    template<typename T>\n+    using member = typename T::member_type;\n+\n+    template<typename T>\n+    void func(...) {}\n+\n+    template<typename T>\n+    void func(member<T>*) {}\n+\n+    void test();\n+\n+    void test() { func<foo>(0); }\n+\n+  }\n+\n+}  // namespace cxx11\n+\n+#endif  // __cplusplus >= 201103L\n+\n+]])\n+\n+\n+dnl  Tests for new features in C++14\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_14], [[\n+\n+// If the compiler admits that it is not ready for C++14, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201402L\n+\n+#error \"This is not a C++14 compiler\"\n+\n+#else\n+\n+namespace cxx14\n+{\n+\n+  namespace test_polymorphic_lambdas\n+  {\n+\n+    int\n+    test()\n+    {\n+      const auto lambda = [](auto&&... args){\n+        const auto istiny = [](auto x){\n+          return (sizeof(x) == 1UL) ? 1 : 0;\n+        };\n+        const int aretiny[] = { istiny(args)... };\n+        return aretiny[0];\n+      };\n+      return lambda(1, 1L, 1.0f, '1');\n+    }\n+\n+  }\n+\n+  namespace test_binary_literals\n+  {\n+\n+    constexpr auto ivii = 0b0000000000101010;\n+    static_assert(ivii == 42, \"wrong value\");\n+\n+  }\n+\n+  namespace test_generalized_constexpr\n+  {\n+\n+    template < typename CharT >\n+    constexpr unsigned long\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      auto length = 0UL;\n+      for (auto p = s; *p; ++p)\n+        ++length;\n+      return length;\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"x\") == 1UL, \"\");\n+    static_assert(strlen_c(\"test\") == 4UL, \"\");\n+    static_assert(strlen_c(\"another\\0test\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_lambda_init_capture\n+  {\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      const auto lambda1 = [a = x](int b){ return a + b; };\n+      const auto lambda2 = [a = lambda1(x)](){ return a; };\n+      return lambda2();\n+    }\n+\n+  }\n+\n+  namespace test_digit_separators\n+  {\n+\n+    constexpr auto ten_million = 100'000'000;\n+    static_assert(ten_million == 100000000, \"\");\n+\n+  }\n+\n+  namespace test_return_type_deduction\n+  {\n+\n+    auto f(int& x) { return x; }\n+    decltype(auto) g(int& x) { return x; }\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static constexpr auto value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static constexpr auto value = true;\n+    };\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      static_assert(is_same<int, decltype(f(x))>::value, \"\");\n+      static_assert(is_same<int&, decltype(g(x))>::value, \"\");\n+      return x;\n+    }\n+\n+  }\n+\n+}  // namespace cxx14\n+\n+#endif  // __cplusplus >= 201402L\n+\n+]])\n+\n+\n+dnl  Tests for new features in C++17\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_17], [[\n+\n+// If the compiler admits that it is not ready for C++17, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201703L\n+\n+#error \"This is not a C++17 compiler\"\n+\n+#else\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <type_traits>\n+\n+namespace cxx17\n+{\n+\n+  namespace test_constexpr_lambdas\n+  {\n+\n+    constexpr int foo = [](){return 42;}();\n+\n+  }\n+\n+  namespace test::nested_namespace::definitions\n+  {\n+\n+  }\n+\n+  namespace test_fold_expression\n+  {\n+\n+    template<typename... Args>\n+    int multiply(Args... args)\n+    {\n+      return (args * ... * 1);\n+    }\n+\n+    template<typename... Args>\n+    bool all(Args... args)\n+    {\n+      return (args && ...);\n+    }\n+\n+  }\n+\n+  namespace test_extended_static_assert\n+  {\n+\n+    static_assert (true);\n+\n+  }\n+\n+  namespace test_auto_brace_init_list\n+  {\n+\n+    auto foo = {5};\n+    auto bar {5};\n+\n+    static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);\n+    static_assert(std::is_same<int, decltype(bar)>::value);\n+  }\n+\n+  namespace test_typename_in_template_template_parameter\n+  {\n+\n+    template<template<typename> typename X> struct D;\n+\n+  }\n+\n+  namespace test_fallthrough_nodiscard_maybe_unused_attributes\n+  {\n+\n+    int f1()\n+    {\n+      return 42;\n+    }\n+\n+    [[nodiscard]] int f2()\n+    {\n+      [[maybe_unused]] auto unused = f1();\n+\n+      switch (f1())\n+      {\n+      case 17:\n+        f1();\n+        [[fallthrough]];\n+      case 42:\n+        f1();\n+      }\n+      return f1();\n+    }\n+\n+  }\n+\n+  namespace test_extended_aggregate_initialization\n+  {\n+\n+    struct base1\n+    {\n+      int b1, b2 = 42;\n+    };\n+\n+    struct base2\n+    {\n+      base2() {\n+        b3 = 42;\n+      }\n+      int b3;\n+    };\n+\n+    struct derived : base1, base2\n+    {\n+        int d;\n+    };\n+\n+    derived d1 {{1, 2}, {}, 4};  // full initialization\n+    derived d2 {{}, {}, 4};      // value-initialized bases\n+\n+  }\n+\n+  namespace test_general_range_based_for_loop\n+  {\n+\n+    struct iter\n+    {\n+      int i;\n+\n+      int& operator* ()\n+      {\n+        return i;\n+      }\n+\n+      const int& operator* () const\n+      {\n+        return i;\n+      }\n+\n+      iter& operator++()\n+      {\n+        ++i;\n+        return *this;\n+      }\n+    };\n+\n+    struct sentinel\n+    {\n+      int i;\n+    };\n+\n+    bool operator== (const iter& i, const sentinel& s)\n+    {\n+      return i.i == s.i;\n+    }\n+\n+    bool operator!= (const iter& i, const sentinel& s)\n+    {\n+      return !(i == s);\n+    }\n+\n+    struct range\n+    {\n+      iter begin() const\n+      {\n+        return {0};\n+      }\n+\n+      sentinel end() const\n+      {\n+        return {5};\n+      }\n+    };\n+\n+    void f()\n+    {\n+      range r {};\n+\n+      for (auto i : r)\n+      {\n+        [[maybe_unused]] auto v = i;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_lambda_capture_asterisk_this_by_value\n+  {\n+\n+    struct t\n+    {\n+      int i;\n+      int foo()\n+      {\n+        return [*this]()\n+        {\n+          return i;\n+        }();\n+      }\n+    };\n+\n+  }\n+\n+  namespace test_enum_class_construction\n+  {\n+\n+    enum class byte : unsigned char\n+    {};\n+\n+    byte foo {42};\n+\n+  }\n+\n+  namespace test_constexpr_if\n+  {\n+\n+    template <bool cond>\n+    int f ()\n+    {\n+      if constexpr(cond)\n+      {\n+        return 13;\n+      }\n+      else\n+      {\n+        return 42;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_selection_statement_with_initializer\n+  {\n+\n+    int f()\n+    {\n+      return 13;\n+    }\n+\n+    int f2()\n+    {\n+      if (auto i = f(); i > 0)\n+      {\n+        return 3;\n+      }\n+\n+      switch (auto i = f(); i + 4)\n+      {\n+      case 17:\n+        return 2;\n+\n+      default:\n+        return 1;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_template_argument_deduction_for_class_templates\n+  {\n+\n+    template <typename T1, typename T2>\n+    struct pair\n+    {\n+      pair (T1 p1, T2 p2)\n+        : m1 {p1},\n+          m2 {p2}\n+      {}\n+\n+      T1 m1;\n+      T2 m2;\n+    };\n+\n+    void f()\n+    {\n+      [[maybe_unused]] auto p = pair{13, 42u};\n+    }\n+\n+  }\n+\n+  namespace test_non_type_auto_template_parameters\n+  {\n+\n+    template <auto n>\n+    struct B\n+    {};\n+\n+    B<5> b1;\n+    B<'a'> b2;\n+\n+  }\n+\n+  namespace test_structured_bindings\n+  {\n+\n+    int arr[2] = { 1, 2 };\n+    std::pair<int, int> pr = { 1, 2 };\n+\n+    auto f1() -> int(&)[2]\n+    {\n+      return arr;\n+    }\n+\n+    auto f2() -> std::pair<int, int>&\n+    {\n+      return pr;\n+    }\n+\n+    struct S\n+    {\n+      int x1 : 2;\n+      volatile double y1;\n+    };\n+\n+    S f3()\n+    {\n+      return {};\n+    }\n+\n+    auto [ x1, y1 ] = f1();\n+    auto& [ xr1, yr1 ] = f1();\n+    auto [ x2, y2 ] = f2();\n+    auto& [ xr2, yr2 ] = f2();\n+    const auto [ x3, y3 ] = f3();\n+\n+  }\n+\n+  namespace test_exception_spec_type_system\n+  {\n+\n+    struct Good {};\n+    struct Bad {};\n+\n+    void g1() noexcept;\n+    void g2();\n+\n+    template<typename T>\n+    Bad\n+    f(T*, T*);\n+\n+    template<typename T1, typename T2>\n+    Good\n+    f(T1*, T2*);\n+\n+    static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);\n+\n+  }\n+\n+  namespace test_inline_variables\n+  {\n+\n+    template<class T> void f(T)\n+    {}\n+\n+    template<class T> inline T g(T)\n+    {\n+      return T{};\n+    }\n+\n+    template<> inline void f<>(int)\n+    {}\n+\n+    template<> int g<>(int)\n+    {\n+      return 5;\n+    }\n+\n+  }\n+\n+}  // namespace cxx17\n+\n+#endif  // __cplusplus < 201703L\n+\n+]])"
      },
      {
        "sha": "495b25a53d8ef7d5371dbb745b2f703e62fd0152",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [3])\n-m4_define([libunivalue_interface_age], [3])\n+m4_define([libunivalue_micro_version], [4])\n+m4_define([libunivalue_interface_age], [4])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.3],\n+AC_INIT([univalue], [1.0.4],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used\n@@ -45,6 +45,9 @@ AC_SUBST(LIBUNIVALUE_AGE)\n LT_INIT\n LT_LANG([C++])\n \n+dnl Require C++11 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+\n case $host in\n   *mingw*)\n     LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\""
      },
      {
        "sha": "b8a6c73f4ec4985298c949c8867a8ecbc4177198",
        "filename": "gen/gen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/gen/gen.cpp?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n //\n // To re-create univalue_escapes.h:\n@@ -45,7 +45,7 @@ static void outputEscape()\n \n \tfor (unsigned int i = 0; i < 256; i++) {\n \t\tif (escapes[i].empty()) {\n-\t\t\tprintf(\"\\tNULL,\\n\");\n+\t\t\tprintf(\"\\tnullptr,\\n\");\n \t\t} else {\n \t\t\tprintf(\"\\t\\\"\");\n "
      },
      {
        "sha": "fc5cf402be3ce7359bc622f75e7cf1fa4221d775",
        "filename": "include/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright 2014 BitPay Inc.\n // Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #ifndef __UNIVALUE_H__\n #define __UNIVALUE_H__\n@@ -14,8 +14,6 @@\n #include <map>\n #include <cassert>\n \n-#include <sstream>        // .get_int64()\n-\n class UniValue {\n public:\n     enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };"
      },
      {
        "sha": "c4e59fae744b6dab4b5f7c45f6a77a25adfae853",
        "filename": "lib/univalue.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue.cpp?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright 2014 BitPay Inc.\n // Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n #include <iomanip>\n@@ -178,17 +178,19 @@ bool UniValue::findKey(const std::string& key, size_t& retIdx) const\n \n bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const\n {\n-    if (typ != VOBJ)\n+    if (typ != VOBJ) {\n         return false;\n+    }\n \n-    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n-         it != t.end(); ++it) {\n+    for (const auto& object: t) {\n         size_t idx = 0;\n-        if (!findKey(it->first, idx))\n+        if (!findKey(object.first, idx)) {\n             return false;\n+        }\n \n-        if (values.at(idx).getType() != it->second)\n+        if (values.at(idx).getType() != object.second) {\n             return false;\n+        }\n     }\n \n     return true;\n@@ -228,7 +230,7 @@ const char *uvTypeName(UniValue::VType t)\n     }\n \n     // not reached\n-    return NULL;\n+    return nullptr;\n }\n \n const UniValue& find_value(const UniValue& obj, const std::string& name)"
      },
      {
        "sha": "3f714f8e5bc4dad87eea84f82df754387e6fa2b6",
        "filename": "lib/univalue_escapes.h",
        "status": "modified",
        "additions": 221,
        "deletions": 221,
        "changes": 442,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_escapes.h?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -34,229 +34,229 @@ static const char *escapes[256] = {\n \t\"\\\\u001d\",\n \t\"\\\\u001e\",\n \t\"\\\\u001f\",\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n \t\"\\\\\\\"\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n \t\"\\\\\\\\\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n \t\"\\\\u007f\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n };\n #endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "5af89a3561c1927057f7d1eab1f1355f0aa48eb9",
        "filename": "lib/univalue_get.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_get.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_get.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_get.cpp?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright 2014 BitPay Inc.\n // Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n #include <errno.h>\n@@ -11,6 +11,7 @@\n #include <vector>\n #include <limits>\n #include <string>\n+#include <sstream>\n \n #include \"univalue.h\"\n \n@@ -31,7 +32,7 @@ bool ParseInt32(const std::string& str, int32_t *out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n-    char *endp = NULL;\n+    char *endp = nullptr;\n     errno = 0; // strtol will not set errno if valid\n     long int n = strtol(str.c_str(), &endp, 10);\n     if(out) *out = (int32_t)n;\n@@ -47,7 +48,7 @@ bool ParseInt64(const std::string& str, int64_t *out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n-    char *endp = NULL;\n+    char *endp = nullptr;\n     errno = 0; // strtoll will not set errno if valid\n     long long int n = strtoll(str.c_str(), &endp, 10);\n     if(out) *out = (int64_t)n;"
      },
      {
        "sha": "be39bfe57a7a770dd827f49ec338f8db4778bf6c",
        "filename": "lib/univalue_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_read.cpp?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <string.h>\n #include <vector>\n@@ -227,7 +227,7 @@ enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n             }\n \n             else {\n-                writer.push_back(*raw);\n+                writer.push_back(static_cast<unsigned char>(*raw));\n                 raw++;\n             }\n         }\n@@ -244,7 +244,7 @@ enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n     }\n }\n \n-enum expect_bits {\n+enum expect_bits : unsigned {\n     EXP_OBJ_NAME = (1U << 0),\n     EXP_COLON = (1U << 1),\n     EXP_ARR_VALUE = (1U << 2),"
      },
      {
        "sha": "c24ac58eaf2bebcd77ce77722a1700c09dec32fa",
        "filename": "lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_utffilter.h?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2016 Wladimir J. van der Laan\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n #ifndef UNIVALUE_UTFFILTER_H\n #define UNIVALUE_UTFFILTER_H\n "
      },
      {
        "sha": "3a2c580c7f69258b0c090400c668cc3c99eb143e",
        "filename": "lib/univalue_write.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_write.cpp?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,9 +1,8 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <iomanip>\n-#include <sstream>\n #include <stdio.h>\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n@@ -14,13 +13,13 @@ static std::string json_escape(const std::string& inS)\n     outS.reserve(inS.size() * 2);\n \n     for (unsigned int i = 0; i < inS.size(); i++) {\n-        unsigned char ch = inS[i];\n+        unsigned char ch = static_cast<unsigned char>(inS[i]);\n         const char *escStr = escapes[ch];\n \n         if (escStr)\n             outS += escStr;\n         else\n-            outS += ch;\n+            outS += static_cast<char>(ch);\n     }\n \n     return outS;"
      },
      {
        "sha": "efab6d277f93a41abf74ef199dc313ccc8707b5d",
        "filename": "sources.mk",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/sources.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/sources.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/sources.mk?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -0,0 +1,95 @@\n+# - All variables are namespaced with UNIVALUE_ to avoid colliding with\n+#     downstream makefiles.\n+# - All Variables ending in _HEADERS or _SOURCES confuse automake, so the\n+#     _INT postfix is applied.\n+# - Convenience variables, for example a UNIVALUE_TEST_DIR should not be used\n+#     as they interfere with automatic dependency generation\n+# - The %reldir% is the relative path from the Makefile.am. This allows\n+#   downstreams to use these variables without having to manually account for\n+#   the path change.\n+\n+UNIVALUE_INCLUDE_DIR_INT = %reldir%/include\n+\n+UNIVALUE_DIST_HEADERS_INT =\n+UNIVALUE_DIST_HEADERS_INT += %reldir%/include/univalue.h\n+\n+UNIVALUE_LIB_HEADERS_INT =\n+UNIVALUE_LIB_HEADERS_INT += %reldir%/lib/univalue_utffilter.h\n+UNIVALUE_LIB_HEADERS_INT += %reldir%/lib/univalue_escapes.h\n+\n+UNIVALUE_LIB_SOURCES_INT =\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue.cpp\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue_get.cpp\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue_read.cpp\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue_write.cpp\n+\n+UNIVALUE_TEST_DATA_DIR_INT = %reldir%/test\n+\n+UNIVALUE_TEST_UNITESTER_INT =\n+UNIVALUE_TEST_UNITESTER_INT += %reldir%/test/unitester.cpp\n+\n+UNIVALUE_TEST_JSON_INT =\n+UNIVALUE_TEST_JSON_INT += %reldir%/test/test_json.cpp\n+\n+UNIVALUE_TEST_NO_NUL_INT =\n+UNIVALUE_TEST_NO_NUL_INT += %reldir%/test/no_nul.cpp\n+\n+UNIVALUE_TEST_OBJECT_INT =\n+UNIVALUE_TEST_OBJECT_INT += %reldir%/test/object.cpp\n+\n+UNIVALUE_TEST_FILES_INT =\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail1.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail2.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail3.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail4.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail5.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail6.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail7.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail8.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail9.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail10.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail11.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail12.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail13.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail14.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail15.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail16.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail17.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail18.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail19.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail20.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail21.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail22.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail23.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail24.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail25.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail26.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail27.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail28.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail29.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail30.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail31.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail32.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail33.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail34.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail35.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail36.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail37.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail38.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail39.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail40.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail41.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail42.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail44.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail45.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass1.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass2.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass3.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass4.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round1.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round2.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round3.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round4.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round5.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round6.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round7.json"
      },
      {
        "sha": "c2f52f83ac21796462e13ca6ebb6eaf77edb1faf",
        "filename": "test/object.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/object.cpp?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright (c) 2014 BitPay Inc.\n // Copyright (c) 2014-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n #include <vector>"
      },
      {
        "sha": "02e1a83c6dffa86bb263eb90759848127cdadedd",
        "filename": "test/unitester.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b49ed656fb2b687fbbe8a3236d18285957eee16/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b49ed656fb2b687fbbe8a3236d18285957eee16/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/unitester.cpp?ref=9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdlib.h>\n #include <stdio.h>\n@@ -58,7 +58,7 @@ static void runtest_file(const char *filename_)\n         std::string basename(filename_);\n         std::string filename = srcdir + \"/\" + basename;\n         FILE *f = fopen(filename.c_str(), \"r\");\n-        assert(f != NULL);\n+        assert(f != nullptr);\n \n         std::string jdata;\n "
      }
    ]
  },
  {
    "sha": "304319367595b51abfd69f1c4abddeef0acca3a9",
    "node_id": "C_kwDOABII59oAKDMwNDMxOTM2NzU5NWI1MWFiZmQ2OWYxYzRhYmRkZWVmMGFjY2EzYTk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-11T12:45:56Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-11T12:45:56Z"
      },
      "message": "Update univalue subtree to latest upstream",
      "tree": {
        "sha": "21489a4be6d6656a08569eeffe212277283deac0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21489a4be6d6656a08569eeffe212277283deac0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/304319367595b51abfd69f1c4abddeef0acca3a9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFkMhQACgkQLuufXMCV\nJsE1vBAApniKrE6FwCCMvzZ3mgzz3Wgen5VnR3s9LMFWLyyhLHDPoJlnq5GQpO83\nV927Ic8QCqng8YzZv/WcA1wzKhVzSFs8g9NkcYm0mlKNBd8dcWg8iimGsh8RVM45\nei+Zo4vbhwGwLlICPjULLjCVSgloYaSdPEt9VtS1iXdTahNJP5VGerdgtYWCo7jz\nuN4oMIo9xmGeszTh51vZNrIKd4FJP70iBeB7YeUfm+QaQAWJhT7M2/1mFQV6sOrb\nR4rgSmBInBB8R8zntQbLvlDfsqZn26IRenGtu7ngLmACToraGp7sCR6iRp7M9NwL\naDueW9KSOLIplJA4Hs224UwZ4JtnWLwbIHmBs0n+vTwhVSLHwSvOXdMKFISIm5e+\n2IA5OEPfNXYq/5ALTb8tjg/jw/zK/YZtMKWyc5ycYTv+9AYNbeJWcjPe8HF13xzy\nUxzm0RPj8QT+cSwEjn7JCV/P/474lbuGHZmFbYXpKJntsw3ELkwNIqO7fQ1wT1lg\nfXsSk0+wRVTBwN7FbfbV4UE3+5bFq+VC53yA2/d0ustCeuJHB6hSXf7TxZMGEx9m\nNupWoXNo/q09HCz3k04d2MjOKUL9HFtRDgeFEAOjMi7KuNPYbi/WNV/Xu4Dez0wA\nfAMZ2pcqi1rEY8Xa5F4pb+zVYAi+ELddxhohXG7gHb/gM4YP024=\n=fPQ4\n-----END PGP SIGNATURE-----",
        "payload": "tree 21489a4be6d6656a08569eeffe212277283deac0\nparent 1790a8ddacae0d52135f5020894ef1ceef625cf9\nparent 9b49ed656fb2b687fbbe8a3236d18285957eee16\nauthor fanquake <fanquake@gmail.com> 1633956356 +0800\ncommitter fanquake <fanquake@gmail.com> 1633956356 +0800\n\nUpdate univalue subtree to latest upstream\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/304319367595b51abfd69f1c4abddeef0acca3a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/304319367595b51abfd69f1c4abddeef0acca3a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/304319367595b51abfd69f1c4abddeef0acca3a9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1790a8ddacae0d52135f5020894ef1ceef625cf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1790a8ddacae0d52135f5020894ef1ceef625cf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1790a8ddacae0d52135f5020894ef1ceef625cf9"
      },
      {
        "sha": "9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b49ed656fb2b687fbbe8a3236d18285957eee16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b49ed656fb2b687fbbe8a3236d18285957eee16"
      }
    ],
    "stats": {
      "total": 1745,
      "additions": 1369,
      "deletions": 376
    },
    "files": [
      {
        "sha": "f140fee12bc8cdaced93ff06c0f60e3bf4daac7b",
        "filename": "src/univalue/.cirrus.yml",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.cirrus.yml?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -0,0 +1,44 @@\n+env:\n+  MAKEJOBS: \"-j4\"\n+  RUN_TESTS: \"true\"\n+  BASE_OUTDIR: \"$CIRRUS_WORKING_DIR/out_dir_base\"\n+  DEBIAN_FRONTEND: \"noninteractive\"\n+\n+task:\n+  container:\n+    image: ubuntu:focal\n+    cpu: 1\n+    memory: 1G\n+    greedy: true  # https://medium.com/cirruslabs/introducing-greedy-container-instances-29aad06dc2b4\n+\n+  matrix:\n+    - name: \"gcc\"\n+      env:\n+        CC: \"gcc\"\n+        CXX: \"g++\"\n+        APT_PKGS: \"gcc\"\n+    - name: \"clang\"\n+      env:\n+        CC: \"clang\"\n+        CXX: \"clang++\"\n+        APT_PKGS: \"clang\"\n+    - name: \"mingw\"\n+      env:\n+        CC: \"\"\n+        CXX: \"\"\n+        UNIVALUE_CONFIG: \"--host=x86_64-w64-mingw32\"\n+        APT_PKGS: \"g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 binutils-mingw-w64-x86-64\"\n+        RUN_TESTS: \"false\"\n+\n+  install_script:\n+    - apt update\n+    - apt install -y pkg-config build-essential libtool autotools-dev automake bsdmainutils\n+    - apt install -y $APT_PKGS\n+  autogen_script:\n+     - ./autogen.sh\n+  configure_script:\n+     - ./configure --cache-file=config.cache --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib $UNIVALUE_CONFIG\n+  make_script:\n+     - make $MAKEJOBS V=1\n+  test_script:\n+     - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS distcheck; fi"
      },
      {
        "sha": "43a1ed362e7e54d33c28a30da803f89ee8219d26",
        "filename": "src/univalue/.travis.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1790a8ddacae0d52135f5020894ef1ceef625cf9/src/univalue/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1790a8ddacae0d52135f5020894ef1ceef625cf9/src/univalue/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.travis.yml?ref=1790a8ddacae0d52135f5020894ef1ceef625cf9",
        "patch": "@@ -1,51 +0,0 @@\n-language: cpp\n-\n-compiler:\n-  - clang\n-  - gcc\n-\n-os:\n-  - linux\n-  - osx\n-\n-sudo: false\n-\n-env:\n-  global:\n-    - MAKEJOBS=-j3\n-    - RUN_TESTS=true\n-    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n-\n-cache:\n-  apt: true\n-\n-addons:\n-  apt:\n-    packages:\n-      - pkg-config\n-\n-before_script:\n-  - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n-  - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n-\n-script:\n-  - if [ -n \"$UNIVALUE_CONFIG\" ]; then unset CC; unset CXX; fi\n-  - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n-  - UNIVALUE_CONFIG_ALL=\"--prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n-  - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n-  - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n-  - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-  - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS distcheck; fi\n-\n-matrix:\n-  fast_finish: true\n-  include:\n-    - os: linux\n-      compiler: gcc\n-      env: UNIVALUE_CONFIG=--host=x86_64-w64-mingw32 RUN_TESTS=false\n-      addons:\n-        apt:\n-          packages:\n-            - g++-mingw-w64-x86-64\n-            - gcc-mingw-w64-x86-64\n-            - binutils-mingw-w64-x86-64"
      },
      {
        "sha": "476f14b922ebf140a5a6d864241ff1e6bcc88ee3",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 15,
        "deletions": 75,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,20 +1,17 @@\n+include sources.mk\n ACLOCAL_AMFLAGS = -I build-aux/m4\n-.PHONY: gen\n+.PHONY: gen FORCE\n .INTERMEDIATE: $(GENBIN)\n \n-include_HEADERS = include/univalue.h\n-noinst_HEADERS = lib/univalue_escapes.h lib/univalue_utffilter.h\n+include_HEADERS = $(UNIVALUE_DIST_HEADERS_INT)\n+noinst_HEADERS = $(UNIVALUE_LIB_HEADERS_INT)\n \n lib_LTLIBRARIES = libunivalue.la\n \n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA = pc/libunivalue.pc\n \n-libunivalue_la_SOURCES = \\\n-\tlib/univalue.cpp \\\n-\tlib/univalue_get.cpp \\\n-\tlib/univalue_read.cpp \\\n-\tlib/univalue_write.cpp\n+libunivalue_la_SOURCES = $(UNIVALUE_LIB_SOURCES_INT)\n \n libunivalue_la_LDFLAGS = \\\n \t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n@@ -30,89 +27,32 @@ $(GENBIN): $(GEN_SRCS)\n \t@echo Building $@\n \t$(AM_V_at)c++ -I$(top_srcdir)/include -o $@ $<\n \n-gen: lib/univalue_escapes.h $(GENBIN)\n-\t@echo Updating $<\n+gen: $(GENBIN) FORCE\n+\t@echo Updating lib/univalue_escapes.h\n \t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n \n noinst_PROGRAMS = $(TESTS) test/test_json\n \n-TEST_DATA_DIR=test\n-\n-test_unitester_SOURCES = test/unitester.cpp\n+test_unitester_SOURCES = $(UNIVALUE_TEST_UNITESTER_INT)\n test_unitester_LDADD = libunivalue.la\n-test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n+test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(UNIVALUE_TEST_DATA_DIR_INT)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-test_test_json_SOURCES = test/test_json.cpp\n+test_test_json_SOURCES = $(UNIVALUE_TEST_JSON_INT)\n test_test_json_LDADD = libunivalue.la\n test_test_json_CXXFLAGS = -I$(top_srcdir)/include\n test_test_json_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-test_no_nul_SOURCES = test/no_nul.cpp\n+test_no_nul_SOURCES = $(UNIVALUE_TEST_NO_NUL_INT)\n test_no_nul_LDADD = libunivalue.la\n test_no_nul_CXXFLAGS = -I$(top_srcdir)/include\n test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-test_object_SOURCES = test/object.cpp\n+test_object_SOURCES = $(UNIVALUE_TEST_OBJECT_INT)\n test_object_LDADD = libunivalue.la\n test_object_CXXFLAGS = -I$(top_srcdir)/include\n test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n \n-TEST_FILES = \\\n-\t$(TEST_DATA_DIR)/fail10.json \\\n-\t$(TEST_DATA_DIR)/fail11.json \\\n-\t$(TEST_DATA_DIR)/fail12.json \\\n-\t$(TEST_DATA_DIR)/fail13.json \\\n-\t$(TEST_DATA_DIR)/fail14.json \\\n-\t$(TEST_DATA_DIR)/fail15.json \\\n-\t$(TEST_DATA_DIR)/fail16.json \\\n-\t$(TEST_DATA_DIR)/fail17.json \\\n-\t$(TEST_DATA_DIR)/fail18.json \\\n-\t$(TEST_DATA_DIR)/fail19.json \\\n-\t$(TEST_DATA_DIR)/fail1.json \\\n-\t$(TEST_DATA_DIR)/fail20.json \\\n-\t$(TEST_DATA_DIR)/fail21.json \\\n-\t$(TEST_DATA_DIR)/fail22.json \\\n-\t$(TEST_DATA_DIR)/fail23.json \\\n-\t$(TEST_DATA_DIR)/fail24.json \\\n-\t$(TEST_DATA_DIR)/fail25.json \\\n-\t$(TEST_DATA_DIR)/fail26.json \\\n-\t$(TEST_DATA_DIR)/fail27.json \\\n-\t$(TEST_DATA_DIR)/fail28.json \\\n-\t$(TEST_DATA_DIR)/fail29.json \\\n-\t$(TEST_DATA_DIR)/fail2.json \\\n-\t$(TEST_DATA_DIR)/fail30.json \\\n-\t$(TEST_DATA_DIR)/fail31.json \\\n-\t$(TEST_DATA_DIR)/fail32.json \\\n-\t$(TEST_DATA_DIR)/fail33.json \\\n-\t$(TEST_DATA_DIR)/fail34.json \\\n-\t$(TEST_DATA_DIR)/fail35.json \\\n-\t$(TEST_DATA_DIR)/fail36.json \\\n-\t$(TEST_DATA_DIR)/fail37.json \\\n-\t$(TEST_DATA_DIR)/fail38.json \\\n-\t$(TEST_DATA_DIR)/fail39.json \\\n-\t$(TEST_DATA_DIR)/fail40.json \\\n-\t$(TEST_DATA_DIR)/fail41.json \\\n-\t$(TEST_DATA_DIR)/fail42.json \\\n-\t$(TEST_DATA_DIR)/fail44.json \\\n-\t$(TEST_DATA_DIR)/fail45.json \\\n-\t$(TEST_DATA_DIR)/fail3.json \\\n-\t$(TEST_DATA_DIR)/fail4.json \\\n-\t$(TEST_DATA_DIR)/fail5.json \\\n-\t$(TEST_DATA_DIR)/fail6.json \\\n-\t$(TEST_DATA_DIR)/fail7.json \\\n-\t$(TEST_DATA_DIR)/fail8.json \\\n-\t$(TEST_DATA_DIR)/fail9.json \\\n-\t$(TEST_DATA_DIR)/pass1.json \\\n-\t$(TEST_DATA_DIR)/pass2.json \\\n-\t$(TEST_DATA_DIR)/pass3.json \\\n-\t$(TEST_DATA_DIR)/pass4.json \\\n-\t$(TEST_DATA_DIR)/round1.json \\\n-\t$(TEST_DATA_DIR)/round2.json \\\n-\t$(TEST_DATA_DIR)/round3.json \\\n-\t$(TEST_DATA_DIR)/round4.json \\\n-\t$(TEST_DATA_DIR)/round5.json \\\n-\t$(TEST_DATA_DIR)/round6.json \\\n-\t$(TEST_DATA_DIR)/round7.json\n-\n-EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)\n+TEST_FILES = $(UNIVALUE_TEST_FILES_INT)\n+\n+EXTRA_DIST=$(UNIVALUE_TEST_FILES_INT) $(GEN_SRCS)"
      },
      {
        "sha": "f7e5137003cfd07327b1f9d552508ad47b39a840",
        "filename": "src/univalue/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "added",
        "additions": 962,
        "deletions": 0,
        "changes": 962,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -0,0 +1,962 @@\n+# ===========================================================================\n+#  https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX(VERSION, [ext|noext], [mandatory|optional])\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the specified\n+#   version of the C++ standard.  If necessary, add switches to CXX and\n+#   CXXCPP to enable support.  VERSION may be '11' (for the C++11 standard)\n+#   or '14' (for the C++14 standard).\n+#\n+#   The second argument, if specified, indicates whether you insist on an\n+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n+#   -std=c++11).  If neither is specified, you get whatever works, with\n+#   preference for no added switch, and then for an extended mode.\n+#\n+#   The third argument, if specified 'mandatory' or if left unspecified,\n+#   indicates that baseline support for the specified C++ standard is\n+#   required and that the macro should error out if no mode with that\n+#   support is found.  If specified 'optional', then configuration proceeds\n+#   regardless, after defining HAVE_CXX${VERSION} if and only if a\n+#   supporting mode is found.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>\n+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>\n+#   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n+#   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n+#   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#   Copyright (c) 2016, 2018 Krzesimir Nowak <qdlacz@gmail.com>\n+#   Copyright (c) 2019 Enji Cooper <yaneurabeya@gmail.com>\n+#   Copyright (c) 2020 Jason Merrill <jason@redhat.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 12\n+\n+dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n+dnl  (serial version number 13).\n+\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n+  m4_if([$1], [11], [ax_cxx_compile_alternatives=\"11 0x\"],\n+        [$1], [14], [ax_cxx_compile_alternatives=\"14 1y\"],\n+        [$1], [17], [ax_cxx_compile_alternatives=\"17 1z\"],\n+        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$2], [], [],\n+        [$2], [ext], [],\n+        [$2], [noext], [],\n+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl\n+  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n+        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n+        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  AC_LANG_PUSH([C++])dnl\n+  ac_success=no\n+\n+  m4_if([$2], [], [dnl\n+    AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n+       ax_cv_cxx_compile_cxx$1,\n+      [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+        [ax_cv_cxx_compile_cxx$1=yes],\n+        [ax_cv_cxx_compile_cxx$1=no])])\n+    if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n+      ac_success=yes\n+    fi])\n+\n+  m4_if([$2], [noext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      switch=\"-std=gnu++${alternative}\"\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXX=\"$ac_save_CXX\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n+        fi\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+\n+  m4_if([$2], [ext], [], [dnl\n+  if test x$ac_success = xno; then\n+    dnl HP's aCC needs +std=c++11 according to:\n+    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n+    dnl Cray's crayCC needs \"-h std=c++11\"\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      for switch in -std=c++${alternative} +std=c++${alternative} \"-h std=c++${alternative}\"; do\n+        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                       $cachevar,\n+          [ac_save_CXX=\"$CXX\"\n+           CXX=\"$CXX $switch\"\n+           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+            [eval $cachevar=yes],\n+            [eval $cachevar=no])\n+           CXX=\"$ac_save_CXX\"])\n+        if eval test x\\$$cachevar = xyes; then\n+          CXX=\"$CXX $switch\"\n+          if test -n \"$CXXCPP\" ; then\n+            CXXCPP=\"$CXXCPP $switch\"\n+          fi\n+          ac_success=yes\n+          break\n+        fi\n+      done\n+      if test x$ac_success = xyes; then\n+        break\n+      fi\n+    done\n+  fi])\n+  AC_LANG_POP([C++])\n+  if test x$ax_cxx_compile_cxx$1_required = xtrue; then\n+    if test x$ac_success = xno; then\n+      AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])\n+    fi\n+  fi\n+  if test x$ac_success = xno; then\n+    HAVE_CXX$1=0\n+    AC_MSG_NOTICE([No compiler with C++$1 support was found])\n+  else\n+    HAVE_CXX$1=1\n+    AC_DEFINE(HAVE_CXX$1,1,\n+              [define if the compiler supports basic C++$1 syntax])\n+  fi\n+  AC_SUBST(HAVE_CXX$1)\n+])\n+\n+\n+dnl  Test body for checking C++11 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_11],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+)\n+\n+\n+dnl  Test body for checking C++14 support\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+)\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_17],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_17\n+)\n+\n+dnl  Tests for new features in C++11\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_11], [[\n+\n+// If the compiler admits that it is not ready for C++11, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201103L\n+\n+#error \"This is not a C++11 compiler\"\n+\n+#else\n+\n+namespace cxx11\n+{\n+\n+  namespace test_static_assert\n+  {\n+\n+    template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+  }\n+\n+  namespace test_final_override\n+  {\n+\n+    struct Base\n+    {\n+      virtual ~Base() {}\n+      virtual void f() {}\n+    };\n+\n+    struct Derived : public Base\n+    {\n+      virtual ~Derived() override {}\n+      virtual void f() override {}\n+    };\n+\n+  }\n+\n+  namespace test_double_right_angle_brackets\n+  {\n+\n+    template < typename T >\n+    struct check {};\n+\n+    typedef check<void> single_type;\n+    typedef check<check<void>> double_type;\n+    typedef check<check<check<void>>> triple_type;\n+    typedef check<check<check<check<void>>>> quadruple_type;\n+\n+  }\n+\n+  namespace test_decltype\n+  {\n+\n+    int\n+    f()\n+    {\n+      int a = 1;\n+      decltype(a) b = 2;\n+      return a + b;\n+    }\n+\n+  }\n+\n+  namespace test_type_deduction\n+  {\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static const bool value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static const bool value = true;\n+    };\n+\n+    template < typename T1, typename T2 >\n+    auto\n+    add(T1 a1, T2 a2) -> decltype(a1 + a2)\n+    {\n+      return a1 + a2;\n+    }\n+\n+    int\n+    test(const int c, volatile int v)\n+    {\n+      static_assert(is_same<int, decltype(0)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(c)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(v)>::value == false, \"\");\n+      auto ac = c;\n+      auto av = v;\n+      auto sumi = ac + av + 'x';\n+      auto sumf = ac + av + 1.0;\n+      static_assert(is_same<int, decltype(ac)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(av)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumi)>::value == true, \"\");\n+      static_assert(is_same<int, decltype(sumf)>::value == false, \"\");\n+      static_assert(is_same<int, decltype(add(c, v))>::value == true, \"\");\n+      return (sumf > 0.0) ? sumi : add(c, v);\n+    }\n+\n+  }\n+\n+  namespace test_noexcept\n+  {\n+\n+    int f() { return 0; }\n+    int g() noexcept { return 0; }\n+\n+    static_assert(noexcept(f()) == false, \"\");\n+    static_assert(noexcept(g()) == true, \"\");\n+\n+  }\n+\n+  namespace test_constexpr\n+  {\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c_r(const CharT *const s, const unsigned long acc) noexcept\n+    {\n+      return *s ? strlen_c_r(s + 1, acc + 1) : acc;\n+    }\n+\n+    template < typename CharT >\n+    unsigned long constexpr\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      return strlen_c_r(s, 0UL);\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"1\") == 1UL, \"\");\n+    static_assert(strlen_c(\"example\") == 7UL, \"\");\n+    static_assert(strlen_c(\"another\\0example\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_rvalue_references\n+  {\n+\n+    template < int N >\n+    struct answer\n+    {\n+      static constexpr int value = N;\n+    };\n+\n+    answer<1> f(int&)       { return answer<1>(); }\n+    answer<2> f(const int&) { return answer<2>(); }\n+    answer<3> f(int&&)      { return answer<3>(); }\n+\n+    void\n+    test()\n+    {\n+      int i = 0;\n+      const int c = 0;\n+      static_assert(decltype(f(i))::value == 1, \"\");\n+      static_assert(decltype(f(c))::value == 2, \"\");\n+      static_assert(decltype(f(0))::value == 3, \"\");\n+    }\n+\n+  }\n+\n+  namespace test_uniform_initialization\n+  {\n+\n+    struct test\n+    {\n+      static const int zero {};\n+      static const int one {1};\n+    };\n+\n+    static_assert(test::zero == 0, \"\");\n+    static_assert(test::one == 1, \"\");\n+\n+  }\n+\n+  namespace test_lambdas\n+  {\n+\n+    void\n+    test1()\n+    {\n+      auto lambda1 = [](){};\n+      auto lambda2 = lambda1;\n+      lambda1();\n+      lambda2();\n+    }\n+\n+    int\n+    test2()\n+    {\n+      auto a = [](int i, int j){ return i + j; }(1, 2);\n+      auto b = []() -> int { return '0'; }();\n+      auto c = [=](){ return a + b; }();\n+      auto d = [&](){ return c; }();\n+      auto e = [a, &b](int x) mutable {\n+        const auto identity = [](int y){ return y; };\n+        for (auto i = 0; i < a; ++i)\n+          a += b--;\n+        return x + identity(a + b);\n+      }(0);\n+      return a + b + c + d + e;\n+    }\n+\n+    int\n+    test3()\n+    {\n+      const auto nullary = [](){ return 0; };\n+      const auto unary = [](int x){ return x; };\n+      using nullary_t = decltype(nullary);\n+      using unary_t = decltype(unary);\n+      const auto higher1st = [](nullary_t f){ return f(); };\n+      const auto higher2nd = [unary](nullary_t f1){\n+        return [unary, f1](unary_t f2){ return f2(unary(f1())); };\n+      };\n+      return higher1st(nullary) + higher2nd(nullary)(unary);\n+    }\n+\n+  }\n+\n+  namespace test_variadic_templates\n+  {\n+\n+    template <int...>\n+    struct sum;\n+\n+    template <int N0, int... N1toN>\n+    struct sum<N0, N1toN...>\n+    {\n+      static constexpr auto value = N0 + sum<N1toN...>::value;\n+    };\n+\n+    template <>\n+    struct sum<>\n+    {\n+      static constexpr auto value = 0;\n+    };\n+\n+    static_assert(sum<>::value == 0, \"\");\n+    static_assert(sum<1>::value == 1, \"\");\n+    static_assert(sum<23>::value == 23, \"\");\n+    static_assert(sum<1, 2>::value == 3, \"\");\n+    static_assert(sum<5, 5, 11>::value == 21, \"\");\n+    static_assert(sum<2, 3, 5, 7, 11, 13>::value == 41, \"\");\n+\n+  }\n+\n+  // http://stackoverflow.com/questions/13728184/template-aliases-and-sfinae\n+  // Clang 3.1 fails with headers of libstd++ 4.8.3 when using std::function\n+  // because of this.\n+  namespace test_template_alias_sfinae\n+  {\n+\n+    struct foo {};\n+\n+    template<typename T>\n+    using member = typename T::member_type;\n+\n+    template<typename T>\n+    void func(...) {}\n+\n+    template<typename T>\n+    void func(member<T>*) {}\n+\n+    void test();\n+\n+    void test() { func<foo>(0); }\n+\n+  }\n+\n+}  // namespace cxx11\n+\n+#endif  // __cplusplus >= 201103L\n+\n+]])\n+\n+\n+dnl  Tests for new features in C++14\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_14], [[\n+\n+// If the compiler admits that it is not ready for C++14, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201402L\n+\n+#error \"This is not a C++14 compiler\"\n+\n+#else\n+\n+namespace cxx14\n+{\n+\n+  namespace test_polymorphic_lambdas\n+  {\n+\n+    int\n+    test()\n+    {\n+      const auto lambda = [](auto&&... args){\n+        const auto istiny = [](auto x){\n+          return (sizeof(x) == 1UL) ? 1 : 0;\n+        };\n+        const int aretiny[] = { istiny(args)... };\n+        return aretiny[0];\n+      };\n+      return lambda(1, 1L, 1.0f, '1');\n+    }\n+\n+  }\n+\n+  namespace test_binary_literals\n+  {\n+\n+    constexpr auto ivii = 0b0000000000101010;\n+    static_assert(ivii == 42, \"wrong value\");\n+\n+  }\n+\n+  namespace test_generalized_constexpr\n+  {\n+\n+    template < typename CharT >\n+    constexpr unsigned long\n+    strlen_c(const CharT *const s) noexcept\n+    {\n+      auto length = 0UL;\n+      for (auto p = s; *p; ++p)\n+        ++length;\n+      return length;\n+    }\n+\n+    static_assert(strlen_c(\"\") == 0UL, \"\");\n+    static_assert(strlen_c(\"x\") == 1UL, \"\");\n+    static_assert(strlen_c(\"test\") == 4UL, \"\");\n+    static_assert(strlen_c(\"another\\0test\") == 7UL, \"\");\n+\n+  }\n+\n+  namespace test_lambda_init_capture\n+  {\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      const auto lambda1 = [a = x](int b){ return a + b; };\n+      const auto lambda2 = [a = lambda1(x)](){ return a; };\n+      return lambda2();\n+    }\n+\n+  }\n+\n+  namespace test_digit_separators\n+  {\n+\n+    constexpr auto ten_million = 100'000'000;\n+    static_assert(ten_million == 100000000, \"\");\n+\n+  }\n+\n+  namespace test_return_type_deduction\n+  {\n+\n+    auto f(int& x) { return x; }\n+    decltype(auto) g(int& x) { return x; }\n+\n+    template < typename T1, typename T2 >\n+    struct is_same\n+    {\n+      static constexpr auto value = false;\n+    };\n+\n+    template < typename T >\n+    struct is_same<T, T>\n+    {\n+      static constexpr auto value = true;\n+    };\n+\n+    int\n+    test()\n+    {\n+      auto x = 0;\n+      static_assert(is_same<int, decltype(f(x))>::value, \"\");\n+      static_assert(is_same<int&, decltype(g(x))>::value, \"\");\n+      return x;\n+    }\n+\n+  }\n+\n+}  // namespace cxx14\n+\n+#endif  // __cplusplus >= 201402L\n+\n+]])\n+\n+\n+dnl  Tests for new features in C++17\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_17], [[\n+\n+// If the compiler admits that it is not ready for C++17, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201703L\n+\n+#error \"This is not a C++17 compiler\"\n+\n+#else\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <type_traits>\n+\n+namespace cxx17\n+{\n+\n+  namespace test_constexpr_lambdas\n+  {\n+\n+    constexpr int foo = [](){return 42;}();\n+\n+  }\n+\n+  namespace test::nested_namespace::definitions\n+  {\n+\n+  }\n+\n+  namespace test_fold_expression\n+  {\n+\n+    template<typename... Args>\n+    int multiply(Args... args)\n+    {\n+      return (args * ... * 1);\n+    }\n+\n+    template<typename... Args>\n+    bool all(Args... args)\n+    {\n+      return (args && ...);\n+    }\n+\n+  }\n+\n+  namespace test_extended_static_assert\n+  {\n+\n+    static_assert (true);\n+\n+  }\n+\n+  namespace test_auto_brace_init_list\n+  {\n+\n+    auto foo = {5};\n+    auto bar {5};\n+\n+    static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);\n+    static_assert(std::is_same<int, decltype(bar)>::value);\n+  }\n+\n+  namespace test_typename_in_template_template_parameter\n+  {\n+\n+    template<template<typename> typename X> struct D;\n+\n+  }\n+\n+  namespace test_fallthrough_nodiscard_maybe_unused_attributes\n+  {\n+\n+    int f1()\n+    {\n+      return 42;\n+    }\n+\n+    [[nodiscard]] int f2()\n+    {\n+      [[maybe_unused]] auto unused = f1();\n+\n+      switch (f1())\n+      {\n+      case 17:\n+        f1();\n+        [[fallthrough]];\n+      case 42:\n+        f1();\n+      }\n+      return f1();\n+    }\n+\n+  }\n+\n+  namespace test_extended_aggregate_initialization\n+  {\n+\n+    struct base1\n+    {\n+      int b1, b2 = 42;\n+    };\n+\n+    struct base2\n+    {\n+      base2() {\n+        b3 = 42;\n+      }\n+      int b3;\n+    };\n+\n+    struct derived : base1, base2\n+    {\n+        int d;\n+    };\n+\n+    derived d1 {{1, 2}, {}, 4};  // full initialization\n+    derived d2 {{}, {}, 4};      // value-initialized bases\n+\n+  }\n+\n+  namespace test_general_range_based_for_loop\n+  {\n+\n+    struct iter\n+    {\n+      int i;\n+\n+      int& operator* ()\n+      {\n+        return i;\n+      }\n+\n+      const int& operator* () const\n+      {\n+        return i;\n+      }\n+\n+      iter& operator++()\n+      {\n+        ++i;\n+        return *this;\n+      }\n+    };\n+\n+    struct sentinel\n+    {\n+      int i;\n+    };\n+\n+    bool operator== (const iter& i, const sentinel& s)\n+    {\n+      return i.i == s.i;\n+    }\n+\n+    bool operator!= (const iter& i, const sentinel& s)\n+    {\n+      return !(i == s);\n+    }\n+\n+    struct range\n+    {\n+      iter begin() const\n+      {\n+        return {0};\n+      }\n+\n+      sentinel end() const\n+      {\n+        return {5};\n+      }\n+    };\n+\n+    void f()\n+    {\n+      range r {};\n+\n+      for (auto i : r)\n+      {\n+        [[maybe_unused]] auto v = i;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_lambda_capture_asterisk_this_by_value\n+  {\n+\n+    struct t\n+    {\n+      int i;\n+      int foo()\n+      {\n+        return [*this]()\n+        {\n+          return i;\n+        }();\n+      }\n+    };\n+\n+  }\n+\n+  namespace test_enum_class_construction\n+  {\n+\n+    enum class byte : unsigned char\n+    {};\n+\n+    byte foo {42};\n+\n+  }\n+\n+  namespace test_constexpr_if\n+  {\n+\n+    template <bool cond>\n+    int f ()\n+    {\n+      if constexpr(cond)\n+      {\n+        return 13;\n+      }\n+      else\n+      {\n+        return 42;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_selection_statement_with_initializer\n+  {\n+\n+    int f()\n+    {\n+      return 13;\n+    }\n+\n+    int f2()\n+    {\n+      if (auto i = f(); i > 0)\n+      {\n+        return 3;\n+      }\n+\n+      switch (auto i = f(); i + 4)\n+      {\n+      case 17:\n+        return 2;\n+\n+      default:\n+        return 1;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_template_argument_deduction_for_class_templates\n+  {\n+\n+    template <typename T1, typename T2>\n+    struct pair\n+    {\n+      pair (T1 p1, T2 p2)\n+        : m1 {p1},\n+          m2 {p2}\n+      {}\n+\n+      T1 m1;\n+      T2 m2;\n+    };\n+\n+    void f()\n+    {\n+      [[maybe_unused]] auto p = pair{13, 42u};\n+    }\n+\n+  }\n+\n+  namespace test_non_type_auto_template_parameters\n+  {\n+\n+    template <auto n>\n+    struct B\n+    {};\n+\n+    B<5> b1;\n+    B<'a'> b2;\n+\n+  }\n+\n+  namespace test_structured_bindings\n+  {\n+\n+    int arr[2] = { 1, 2 };\n+    std::pair<int, int> pr = { 1, 2 };\n+\n+    auto f1() -> int(&)[2]\n+    {\n+      return arr;\n+    }\n+\n+    auto f2() -> std::pair<int, int>&\n+    {\n+      return pr;\n+    }\n+\n+    struct S\n+    {\n+      int x1 : 2;\n+      volatile double y1;\n+    };\n+\n+    S f3()\n+    {\n+      return {};\n+    }\n+\n+    auto [ x1, y1 ] = f1();\n+    auto& [ xr1, yr1 ] = f1();\n+    auto [ x2, y2 ] = f2();\n+    auto& [ xr2, yr2 ] = f2();\n+    const auto [ x3, y3 ] = f3();\n+\n+  }\n+\n+  namespace test_exception_spec_type_system\n+  {\n+\n+    struct Good {};\n+    struct Bad {};\n+\n+    void g1() noexcept;\n+    void g2();\n+\n+    template<typename T>\n+    Bad\n+    f(T*, T*);\n+\n+    template<typename T1, typename T2>\n+    Good\n+    f(T1*, T2*);\n+\n+    static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);\n+\n+  }\n+\n+  namespace test_inline_variables\n+  {\n+\n+    template<class T> void f(T)\n+    {}\n+\n+    template<class T> inline T g(T)\n+    {\n+      return T{};\n+    }\n+\n+    template<> inline void f<>(int)\n+    {}\n+\n+    template<> int g<>(int)\n+    {\n+      return 5;\n+    }\n+\n+  }\n+\n+}  // namespace cxx17\n+\n+#endif  // __cplusplus < 201703L\n+\n+]])"
      },
      {
        "sha": "495b25a53d8ef7d5371dbb745b2f703e62fd0152",
        "filename": "src/univalue/configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [3])\n-m4_define([libunivalue_interface_age], [3])\n+m4_define([libunivalue_micro_version], [4])\n+m4_define([libunivalue_interface_age], [4])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.3],\n+AC_INIT([univalue], [1.0.4],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used\n@@ -45,6 +45,9 @@ AC_SUBST(LIBUNIVALUE_AGE)\n LT_INIT\n LT_LANG([C++])\n \n+dnl Require C++11 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+\n case $host in\n   *mingw*)\n     LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\""
      },
      {
        "sha": "b8a6c73f4ec4985298c949c8867a8ecbc4177198",
        "filename": "src/univalue/gen/gen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen/gen.cpp?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n //\n // To re-create univalue_escapes.h:\n@@ -45,7 +45,7 @@ static void outputEscape()\n \n \tfor (unsigned int i = 0; i < 256; i++) {\n \t\tif (escapes[i].empty()) {\n-\t\t\tprintf(\"\\tNULL,\\n\");\n+\t\t\tprintf(\"\\tnullptr,\\n\");\n \t\t} else {\n \t\t\tprintf(\"\\t\\\"\");\n "
      },
      {
        "sha": "fc5cf402be3ce7359bc622f75e7cf1fa4221d775",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright 2014 BitPay Inc.\n // Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #ifndef __UNIVALUE_H__\n #define __UNIVALUE_H__\n@@ -14,8 +14,6 @@\n #include <map>\n #include <cassert>\n \n-#include <sstream>        // .get_int64()\n-\n class UniValue {\n public:\n     enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };"
      },
      {
        "sha": "c4e59fae744b6dab4b5f7c45f6a77a25adfae853",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright 2014 BitPay Inc.\n // Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n #include <iomanip>\n@@ -178,17 +178,19 @@ bool UniValue::findKey(const std::string& key, size_t& retIdx) const\n \n bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t) const\n {\n-    if (typ != VOBJ)\n+    if (typ != VOBJ) {\n         return false;\n+    }\n \n-    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n-         it != t.end(); ++it) {\n+    for (const auto& object: t) {\n         size_t idx = 0;\n-        if (!findKey(it->first, idx))\n+        if (!findKey(object.first, idx)) {\n             return false;\n+        }\n \n-        if (values.at(idx).getType() != it->second)\n+        if (values.at(idx).getType() != object.second) {\n             return false;\n+        }\n     }\n \n     return true;\n@@ -228,7 +230,7 @@ const char *uvTypeName(UniValue::VType t)\n     }\n \n     // not reached\n-    return NULL;\n+    return nullptr;\n }\n \n const UniValue& find_value(const UniValue& obj, const std::string& name)"
      },
      {
        "sha": "3f714f8e5bc4dad87eea84f82df754387e6fa2b6",
        "filename": "src/univalue/lib/univalue_escapes.h",
        "status": "modified",
        "additions": 221,
        "deletions": 221,
        "changes": 442,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_escapes.h?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -34,229 +34,229 @@ static const char *escapes[256] = {\n \t\"\\\\u001d\",\n \t\"\\\\u001e\",\n \t\"\\\\u001f\",\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n \t\"\\\\\\\"\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n \t\"\\\\\\\\\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n \t\"\\\\u007f\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n+\tnullptr,\n };\n #endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "5af89a3561c1927057f7d1eab1f1355f0aa48eb9",
        "filename": "src/univalue/lib/univalue_get.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_get.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_get.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_get.cpp?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright 2014 BitPay Inc.\n // Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n #include <errno.h>\n@@ -11,6 +11,7 @@\n #include <vector>\n #include <limits>\n #include <string>\n+#include <sstream>\n \n #include \"univalue.h\"\n \n@@ -31,7 +32,7 @@ bool ParseInt32(const std::string& str, int32_t *out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n-    char *endp = NULL;\n+    char *endp = nullptr;\n     errno = 0; // strtol will not set errno if valid\n     long int n = strtol(str.c_str(), &endp, 10);\n     if(out) *out = (int32_t)n;\n@@ -47,7 +48,7 @@ bool ParseInt64(const std::string& str, int64_t *out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n-    char *endp = NULL;\n+    char *endp = nullptr;\n     errno = 0; // strtoll will not set errno if valid\n     long long int n = strtoll(str.c_str(), &endp, 10);\n     if(out) *out = (int64_t)n;"
      },
      {
        "sha": "be39bfe57a7a770dd827f49ec338f8db4778bf6c",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <string.h>\n #include <vector>\n@@ -227,7 +227,7 @@ enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n             }\n \n             else {\n-                writer.push_back(*raw);\n+                writer.push_back(static_cast<unsigned char>(*raw));\n                 raw++;\n             }\n         }\n@@ -244,7 +244,7 @@ enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,\n     }\n }\n \n-enum expect_bits {\n+enum expect_bits : unsigned {\n     EXP_OBJ_NAME = (1U << 0),\n     EXP_COLON = (1U << 1),\n     EXP_ARR_VALUE = (1U << 2),"
      },
      {
        "sha": "c24ac58eaf2bebcd77ce77722a1700c09dec32fa",
        "filename": "src/univalue/lib/univalue_utffilter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_utffilter.h?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2016 Wladimir J. van der Laan\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n #ifndef UNIVALUE_UTFFILTER_H\n #define UNIVALUE_UTFFILTER_H\n "
      },
      {
        "sha": "3a2c580c7f69258b0c090400c668cc3c99eb143e",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,9 +1,8 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <iomanip>\n-#include <sstream>\n #include <stdio.h>\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n@@ -14,13 +13,13 @@ static std::string json_escape(const std::string& inS)\n     outS.reserve(inS.size() * 2);\n \n     for (unsigned int i = 0; i < inS.size(); i++) {\n-        unsigned char ch = inS[i];\n+        unsigned char ch = static_cast<unsigned char>(inS[i]);\n         const char *escStr = escapes[ch];\n \n         if (escStr)\n             outS += escStr;\n         else\n-            outS += ch;\n+            outS += static_cast<char>(ch);\n     }\n \n     return outS;"
      },
      {
        "sha": "efab6d277f93a41abf74ef199dc313ccc8707b5d",
        "filename": "src/univalue/sources.mk",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/sources.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/sources.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/sources.mk?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -0,0 +1,95 @@\n+# - All variables are namespaced with UNIVALUE_ to avoid colliding with\n+#     downstream makefiles.\n+# - All Variables ending in _HEADERS or _SOURCES confuse automake, so the\n+#     _INT postfix is applied.\n+# - Convenience variables, for example a UNIVALUE_TEST_DIR should not be used\n+#     as they interfere with automatic dependency generation\n+# - The %reldir% is the relative path from the Makefile.am. This allows\n+#   downstreams to use these variables without having to manually account for\n+#   the path change.\n+\n+UNIVALUE_INCLUDE_DIR_INT = %reldir%/include\n+\n+UNIVALUE_DIST_HEADERS_INT =\n+UNIVALUE_DIST_HEADERS_INT += %reldir%/include/univalue.h\n+\n+UNIVALUE_LIB_HEADERS_INT =\n+UNIVALUE_LIB_HEADERS_INT += %reldir%/lib/univalue_utffilter.h\n+UNIVALUE_LIB_HEADERS_INT += %reldir%/lib/univalue_escapes.h\n+\n+UNIVALUE_LIB_SOURCES_INT =\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue.cpp\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue_get.cpp\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue_read.cpp\n+UNIVALUE_LIB_SOURCES_INT += %reldir%/lib/univalue_write.cpp\n+\n+UNIVALUE_TEST_DATA_DIR_INT = %reldir%/test\n+\n+UNIVALUE_TEST_UNITESTER_INT =\n+UNIVALUE_TEST_UNITESTER_INT += %reldir%/test/unitester.cpp\n+\n+UNIVALUE_TEST_JSON_INT =\n+UNIVALUE_TEST_JSON_INT += %reldir%/test/test_json.cpp\n+\n+UNIVALUE_TEST_NO_NUL_INT =\n+UNIVALUE_TEST_NO_NUL_INT += %reldir%/test/no_nul.cpp\n+\n+UNIVALUE_TEST_OBJECT_INT =\n+UNIVALUE_TEST_OBJECT_INT += %reldir%/test/object.cpp\n+\n+UNIVALUE_TEST_FILES_INT =\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail1.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail2.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail3.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail4.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail5.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail6.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail7.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail8.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail9.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail10.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail11.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail12.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail13.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail14.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail15.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail16.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail17.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail18.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail19.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail20.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail21.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail22.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail23.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail24.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail25.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail26.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail27.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail28.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail29.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail30.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail31.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail32.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail33.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail34.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail35.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail36.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail37.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail38.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail39.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail40.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail41.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail42.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail44.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/fail45.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass1.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass2.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass3.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/pass4.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round1.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round2.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round3.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round4.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round5.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round6.json\n+UNIVALUE_TEST_FILES_INT += %reldir%/test/round7.json"
      },
      {
        "sha": "c2f52f83ac21796462e13ca6ebb6eaf77edb1faf",
        "filename": "src/univalue/test/object.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright (c) 2014 BitPay Inc.\n // Copyright (c) 2014-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n #include <vector>"
      },
      {
        "sha": "02e1a83c6dffa86bb263eb90759848127cdadedd",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/304319367595b51abfd69f1c4abddeef0acca3a9/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=304319367595b51abfd69f1c4abddeef0acca3a9",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright 2014 BitPay Inc.\n // Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+// file COPYING or https://opensource.org/licenses/mit-license.php.\n \n #include <stdlib.h>\n #include <stdio.h>\n@@ -58,7 +58,7 @@ static void runtest_file(const char *filename_)\n         std::string basename(filename_);\n         std::string filename = srcdir + \"/\" + basename;\n         FILE *f = fopen(filename.c_str(), \"r\");\n-        assert(f != NULL);\n+        assert(f != nullptr);\n \n         std::string jdata;\n "
      }
    ]
  },
  {
    "sha": "0f95247246344510c9a51810c14c633abb382e95",
    "node_id": "C_kwDOABII59oAKDBmOTUyNDcyNDYzNDQ1MTBjOWE1MTgxMGMxNGM2MzNhYmIzODJlOTU",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2021-07-15T18:42:17Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-11T12:46:25Z"
      },
      "message": "Integrate univalue into our buildsystem\n\nThis addresses issues like the one in #12467, where some of our compiler flags\nend up being dropped during the subconfigure of Univalue. Specifically, we're\nstill using the compiler-default c++ version rather than forcing c++17.\n\nWe can drop the need subconfigure completely in favor of a tighter build\nintegration, where the sources are listed separately from the build recipes,\nso that they may be included directly by upstream projects. This is\nsimilar to the way leveldb build integration works in Core.\n\nCore benefits of this approach include:\n- Better caching (for ex. ccache and autoconf)\n- No need for a slow subconfigure\n- Faster autoconf\n- No more missing compile flags\n- Compile only the objects needed\n\nThere are no benefits to Univalue itself that I can think of. These changes\nshould be a no-op there, and to downstreams as well until they take advantage\nof the new sources.mk.\n\nThis also removes the option to use an external univalue to avoid similar ABI\nissues with mystery binaries.\n\nCo-authored-by: fanquake <fanquake@gmail.com>",
      "tree": {
        "sha": "2a358d0f78162cb6a2b1bb36a1df5a7acdc5a431",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a358d0f78162cb6a2b1bb36a1df5a7acdc5a431"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f95247246344510c9a51810c14c633abb382e95",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmFkMiEACgkQLuufXMCV\nJsFkCA/9EeaRR+lYIIHn582OH8fcC1U3pM5Q2suf5Q8Lm9Bc0u+59+lnMGGqigAH\nyPJVvs/xYQtRrE3gz8N1gOOA9/VMnee/NlQaGOHBjD8bnObZxxZafd6RH7dG87ot\nkMs4tWGc5YFIAbGWjgs1Iq9XEagb+h9Pml7DqFvtnDgPTV120RWnsPcZ6wnUuYH6\nBhIraCcBxUMy9/RFXJHNbeCXe69EjmA3hL/OLbqXHIBJstdiz9iO7K6xsh6cbpjQ\nLSoeBp/Q6kZToXuZYaqY8eTIUD8SUa18miRGuO9ZdbNnnNy/pdRDqc+lw6PvhY7F\n+fc8uLSfNRw7XxNIebIM1HJPRuKmAB9138ZQGdYcqBTIyqSQBRvQaeHI4T084Tay\ny9I18wkI5L4yksKylB+2mYuD+Fd2R4Ytw95b6mFeM4RLPBbYWGuljSmn6Conj6PM\nayr7g2f2PX2kgdw1iuEUkAgEzTflghot1FOzpZaVOnFL3LXc7ue03BnEJRs/5UgT\nzxpu1tV+d25yMZg9XpAQRw0l30tbymVqnzJg8DhaigYWrOI2mqNBitH/KWh38uUy\ni7hedwejiWIxLAjPjSg0jpp5bLkbsk7HZT8188vE8K9ANPHiqx3jiyd7ZVuFs0dk\nIaWrhRLaZyO70GtCoIPS0JLXfKy+yW8m5XeI1ilqf5+Mn/Ex+jI=\n=72kW\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a358d0f78162cb6a2b1bb36a1df5a7acdc5a431\nparent 304319367595b51abfd69f1c4abddeef0acca3a9\nauthor Cory Fields <cory-nospam-@coryfields.com> 1626374537 +0000\ncommitter fanquake <fanquake@gmail.com> 1633956385 +0800\n\nIntegrate univalue into our buildsystem\n\nThis addresses issues like the one in #12467, where some of our compiler flags\nend up being dropped during the subconfigure of Univalue. Specifically, we're\nstill using the compiler-default c++ version rather than forcing c++17.\n\nWe can drop the need subconfigure completely in favor of a tighter build\nintegration, where the sources are listed separately from the build recipes,\nso that they may be included directly by upstream projects. This is\nsimilar to the way leveldb build integration works in Core.\n\nCore benefits of this approach include:\n- Better caching (for ex. ccache and autoconf)\n- No need for a slow subconfigure\n- Faster autoconf\n- No more missing compile flags\n- Compile only the objects needed\n\nThere are no benefits to Univalue itself that I can think of. These changes\nshould be a no-op there, and to downstreams as well until they take advantage\nof the new sources.mk.\n\nThis also removes the option to use an external univalue to avoid similar ABI\nissues with mystery binaries.\n\nCo-authored-by: fanquake <fanquake@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f95247246344510c9a51810c14c633abb382e95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f95247246344510c9a51810c14c633abb382e95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f95247246344510c9a51810c14c633abb382e95/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "304319367595b51abfd69f1c4abddeef0acca3a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/304319367595b51abfd69f1c4abddeef0acca3a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/304319367595b51abfd69f1c4abddeef0acca3a9"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 32,
      "deletions": 57
    },
    "files": [
      {
        "sha": "311a43755a04474e05223e579f0f31cd879b4897",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f95247246344510c9a51810c14c633abb382e95/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f95247246344510c9a51810c14c633abb382e95/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=0f95247246344510c9a51810c14c633abb382e95",
        "patch": "@@ -9,14 +9,12 @@ export LC_ALL=C.UTF-8\n if [[ $HOST = *-mingw32 ]]; then\n   # Generate all binaries, so that they can be wrapped\n   DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n-  DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-wine.sh\"\n fi\n \n if [ -n \"$QEMU_USER_CMD\" ]; then\n   # Generate all binaries, so that they can be wrapped\n   DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n-  DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-qemu.sh\"\n fi\n "
      },
      {
        "sha": "08ae53c921d46c4c7a84c8ed5b2482ed527b4529",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f95247246344510c9a51810c14c633abb382e95/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f95247246344510c9a51810c14c633abb382e95/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=0f95247246344510c9a51810c14c633abb382e95",
        "patch": "@@ -262,12 +262,6 @@ if test \"x$use_asm\" = xyes; then\n   AC_DEFINE(USE_ASM, 1, [Define this symbol to build in assembly routines])\n fi\n \n-AC_ARG_WITH([system-univalue],\n-  [AS_HELP_STRING([--with-system-univalue],\n-  [Build with system UniValue (default is no)])],\n-  [system_univalue=$withval],\n-  [system_univalue=no]\n-)\n AC_ARG_ENABLE([zmq],\n   [AS_HELP_STRING([--disable-zmq],\n   [disable ZMQ notifications])],\n@@ -1546,34 +1540,6 @@ if test \"x$use_zmq\" = xyes; then\n   esac\n fi\n \n-dnl univalue check\n-\n-need_bundled_univalue=yes\n-if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_util$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnononononononono; then\n-  need_bundled_univalue=no\n-else\n-  if test x$system_univalue != xno; then\n-    PKG_CHECK_MODULES([UNIVALUE], [libunivalue >= 1.0.4], [found_univalue=yes], [found_univalue=no])\n-    if test x$found_univalue = xyes; then\n-      system_univalue=yes\n-      need_bundled_univalue=no\n-    elif test x$system_univalue = xyes; then\n-      AC_MSG_ERROR([univalue not found])\n-    else\n-      system_univalue=no\n-    fi\n-  fi\n-\n-  if test x$need_bundled_univalue = xyes; then\n-    UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n-    UNIVALUE_LIBS='univalue/libunivalue.la'\n-  fi\n-fi\n-\n-AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n-AC_SUBST(UNIVALUE_CFLAGS)\n-AC_SUBST(UNIVALUE_LIBS)\n-\n dnl libmultiprocess library check\n \n libmultiprocess_found=no\n@@ -1936,10 +1902,6 @@ PKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"\n unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n-if test x$need_bundled_univalue = xyes; then\n-  AC_CONFIG_SUBDIRS([src/univalue])\n-fi\n-\n ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n "
      },
      {
        "sha": "bffe524dbcdf91446d7af3631af7d1b9d54f2a6f",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f95247246344510c9a51810c14c633abb382e95/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f95247246344510c9a51810c14c633abb382e95/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=0f95247246344510c9a51810c14c633abb382e95",
        "patch": "@@ -297,7 +297,7 @@ mkdir -p \"$DISTSRC\"\n                     ${HOST_CXXFLAGS:+CXXFLAGS=\"${HOST_CXXFLAGS}\"} \\\n                     ${HOST_LDFLAGS:+LDFLAGS=\"${HOST_LDFLAGS}\"}\n \n-    sed -i.old 's/-lstdc++ //g' config.status libtool src/univalue/config.status src/univalue/libtool\n+    sed -i.old 's/-lstdc++ //g' config.status libtool\n \n     # Build Bitcoin Core\n     make --jobs=\"$JOBS\" ${V:+V=1}"
      },
      {
        "sha": "0deae6c387b0ea241879b9fb8b76c8e7684e4b1e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f95247246344510c9a51810c14c633abb382e95/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f95247246344510c9a51810c14c633abb382e95/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0f95247246344510c9a51810c14c633abb382e95",
        "patch": "@@ -6,7 +6,7 @@\n print-%: FORCE\n \t@echo '$*'='$($*)'\n \n-DIST_SUBDIRS = secp256k1 univalue\n+DIST_SUBDIRS = secp256k1\n \n AM_LDFLAGS = $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS) $(GPROF_LDFLAGS) $(SANITIZER_LDFLAGS)\n AM_CXXFLAGS = $(DEBUG_CXXFLAGS) $(HARDENED_CXXFLAGS) $(WARN_CXXFLAGS) $(NOWARN_CXXFLAGS) $(ERROR_CXXFLAGS) $(GPROF_CXXFLAGS) $(SANITIZER_CXXFLAGS)\n@@ -15,18 +15,7 @@ AM_LIBTOOLFLAGS = --preserve-dup-deps\n PTHREAD_FLAGS = $(PTHREAD_CFLAGS) $(PTHREAD_LIBS)\n EXTRA_LIBRARIES =\n \n-if EMBEDDED_UNIVALUE\n-LIBUNIVALUE = univalue/libunivalue.la\n-\n-$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n-\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n-else\n-LIBUNIVALUE = $(UNIVALUE_LIBS)\n-endif\n-\n-BITCOIN_INCLUDES=-I$(builddir) -I$(srcdir)/secp256k1/include $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)\n-\n-BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) -I$(srcdir)/secp256k1/include -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n@@ -80,6 +69,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_ZMQ)\n \n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n+noinst_LTLIBRARIES =\n \n bin_PROGRAMS =\n noinst_PROGRAMS =\n@@ -797,7 +787,6 @@ $(top_srcdir)/$(subdir)/config/bitcoin-config.h.in:  $(am__configure_deps)\n \n clean-local:\n \t-$(MAKE) -C secp256k1 clean\n-\t-$(MAKE) -C univalue clean\n \t-rm -f leveldb/*/*.gcda leveldb/*/*.gcno leveldb/helpers/memenv/*.gcda leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n \t-rm -rf test/__pycache__\n@@ -887,3 +876,5 @@ endif\n if ENABLE_QT_TESTS\n include Makefile.qttest.include\n endif\n+\n+include Makefile.univalue.include"
      },
      {
        "sha": "27f93826313cb0ee30ea05c31787254716d91f3c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f95247246344510c9a51810c14c633abb382e95/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f95247246344510c9a51810c14c633abb382e95/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0f95247246344510c9a51810c14c633abb382e95",
        "patch": "@@ -350,8 +350,26 @@ if ENABLE_BENCH\n endif\n endif\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n-if EMBEDDED_UNIVALUE\n-\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check\n+\n+if !ENABLE_FUZZ\n+UNIVALUE_TESTS = univalue/test/object univalue/test/unitester univalue/test/no_nul\n+noinst_PROGRAMS += $(UNIVALUE_TESTS)\n+TESTS += $(UNIVALUE_TESTS)\n+\n+univalue_test_unitester_SOURCES = $(UNIVALUE_TEST_UNITESTER_INT)\n+univalue_test_unitester_LDADD = $(LIBUNIVALUE)\n+univalue_test_unitester_CPPFLAGS = -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT) -DJSON_TEST_SRC=\\\"$(srcdir)/$(UNIVALUE_TEST_DATA_DIR_INT)\\\"\n+univalue_test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+univalue_test_no_nul_SOURCES = $(UNIVALUE_TEST_NO_NUL_INT)\n+univalue_test_no_nul_LDADD = $(LIBUNIVALUE)\n+univalue_test_no_nul_CPPFLAGS = -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT)\n+univalue_test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+univalue_test_object_SOURCES = $(UNIVALUE_TEST_OBJECT_INT)\n+univalue_test_object_LDADD = $(LIBUNIVALUE)\n+univalue_test_object_CPPFLAGS = -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT)\n+univalue_test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n endif\n \n %.cpp.test: %.cpp"
      },
      {
        "sha": "3644e363688de126af6a237f4977dd0d931c8ac4",
        "filename": "src/Makefile.univalue.include",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f95247246344510c9a51810c14c633abb382e95/src/Makefile.univalue.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f95247246344510c9a51810c14c633abb382e95/src/Makefile.univalue.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.univalue.include?ref=0f95247246344510c9a51810c14c633abb382e95",
        "patch": "@@ -0,0 +1,6 @@\n+include univalue/sources.mk\n+\n+LIBUNIVALUE = libunivalue.la\n+noinst_LTLIBRARIES += $(LIBUNIVALUE)\n+libunivalue_la_SOURCES = $(UNIVALUE_LIB_SOURCES_INT) $(UNIVALUE_DIST_HEADERS_INT) $(UNIVALUE_LIB_HEADERS_INT) $(UNIVALUE_TEST_FILES_INT)\n+libunivalue_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT)"
      }
    ]
  }
]