[
  {
    "sha": "f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzM1M2ExZTQ3ZmFjMWNjYzY2ZjFjZWU2MzZlODE4MmYxYzZmMzgw",
    "commit": {
      "author": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-06-13T20:03:40Z"
      },
      "committer": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-06-13T20:22:54Z"
      },
      "message": "Avoid remaking makefiles.\n\nThe purpose of this commit is to reduce the amount of work make does.\nThis simplifies make -d output and improves performance (this\nperformance gain is hardly noticeable).\n\nBy default make remakes all makefiles.\nThis build system does not have rules to remake makefiles.\nThis commit adds an explicit rule for each makefile.\n\nEach rule serves 2 purposes.\n1. Each rule prevents make from searching for an implicit rule.\n2. Once found, the rule prevents make from remaking the makefile.\nThat's why the rule is double colon. Make won't use a double colon rule to\nremake a makefile. See\nhttps://www.gnu.org/software/make/manual/make.html#Remaking-Makefiles.\n\n$ # on this branch.\n$ make -d print-host |grep expat\nReading makefile 'packages/expat.mk' (search path) (no ~ expansion)...\nMakefile 'packages/expat.mk' might loop; not remaking it.\n$ git co master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n$ make -d print-host |grep expat |wc\n    367    1916   19918\n$\n\nMake prints 367 lines per makefile.\nWith this change make prints 2 lines per makefile.",
      "tree": {
        "sha": "98c76682408d1057c8c45d15202c08f3faee45db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98c76682408d1057c8c45d15202c08f3faee45db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/comments",
    "author": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3d644a127e1432fbaf1c9d719edb28301943c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d644a127e1432fbaf1c9d719edb28301943c60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3d644a127e1432fbaf1c9d719edb28301943c60"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a428d330e8a52f20b82058bc77b7bf575568042a",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -284,3 +284,4 @@ download: download-osx download-linux download-win\n $(foreach package,$(all_packages),$(eval $(call ext_add_stages,$(package))))\n \n .PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources\n+Makefile:: ;"
      },
      {
        "sha": "ddc9c6c6f1013be1390926f1094b09889b34157d",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -21,3 +21,4 @@ darwin_NM:=$(shell xcrun -f nm)\n darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n darwin_native_binutils=\n darwin_native_toolchain=\n+builders/darwin.mk:: ;"
      },
      {
        "sha": "f59823424abac9620696b00db8daac3c29cccf71",
        "filename": "depends/builders/default.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/builders/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/builders/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/default.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -18,3 +18,4 @@ build_$(build_arch)_$(build_os)_$1 += $(build_$(build_os)_$1)\n build_$1=$$(build_$(build_arch)_$(build_os)_$1)\n endef\n $(foreach flags, CFLAGS CXXFLAGS LDFLAGS, $(eval $(call add_build_flags_func,$(flags))))\n+builders/default.mk:: ;"
      },
      {
        "sha": "c88e639113c8991bcd9bcda0760ab5fca0607729",
        "filename": "depends/builders/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/builders/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/builders/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/linux.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,2 +1,3 @@\n build_linux_SHA256SUM = sha256sum\n build_linux_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n+builders/linux.mk:: ;"
      },
      {
        "sha": "d7b4ad6ef9a4aa0dff2fb77ab3c8dc641df89e34",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -280,3 +280,4 @@ $(foreach package,$(all_packages),$(eval $(call int_add_cmds,$(package))))\n \n #special exception: if a toolchain package exists, all non-native packages depend on it\n $(foreach package,$(packages),$(eval $($(package)_extracted): |$($($(host_arch)_$(host_os)_native_toolchain)_cached) $($($(host_arch)_$(host_os)_native_binutils)_cached) ))\n+funcs.mk:: ;"
      },
      {
        "sha": "a7a7ed9b9bb50c5ca5af8d6be3347522808b0b6f",
        "filename": "depends/hosts/android.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/android.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/android.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/android.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -10,3 +10,4 @@ android_CC=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang\n android_RANLIB=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)-ranlib\n endif\n android_cmake_system=Android\n+hosts/android.mk:: ;"
      },
      {
        "sha": "36faec3dd0d6c8505f23a2eac4290243eb742431",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -119,3 +119,4 @@ darwin_debug_CFLAGS=-O1\n darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)\n \n darwin_cmake_system=Darwin\n+hosts/darwin.mk:: ;"
      },
      {
        "sha": "f7470c96edbaa792d8d6cb3885471c5bbc9402bd",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -37,3 +37,4 @@ endef\n \n $(foreach tool,CC CXX AR RANLIB STRIP NM LIBTOOL OTOOL INSTALL_NAME_TOOL,$(eval $(call add_host_tool_func,$(tool))))\n $(foreach flags,CFLAGS CXXFLAGS CPPFLAGS LDFLAGS, $(eval $(call add_host_flags_func,$(flags))))\n+hosts/default.mk:: ;"
      },
      {
        "sha": "216ea04f51ea7067dc93d60bc32416978c3bd61c",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -30,3 +30,4 @@ x86_64_linux_CC=$(default_host_CC) -m64\n x86_64_linux_CXX=$(default_host_CXX) -m64\n endif\n linux_cmake_system=Linux\n+hosts/linux.mk:: ;"
      },
      {
        "sha": "b886c225d744e19a6276748ba43d6a2de6e47ef2",
        "filename": "depends/hosts/mingw32.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/mingw32.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/hosts/mingw32.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/mingw32.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -10,3 +10,4 @@ mingw32_debug_CXXFLAGS=$(mingw32_debug_CFLAGS)\n mingw32_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC\n \n mingw_cmake_system=Windows\n+hosts/mingw32.mk:: ;"
      },
      {
        "sha": "6495cb1280f4dd081f3bcce8e3a7c234ebd208c1",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -32,3 +32,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install_lib install_include\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "1308200cca5616ce9a0f95d74628417974310dfe",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -44,3 +44,4 @@ endef\n define $(package)_stage_cmds\n   b2 -d0 -j4 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) toolset=$($(package)_toolset_$(host_os)) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "b2a6acded8e3c5498f968c05159108cb3549c1e0",
        "filename": "depends/packages/capnp.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/capnp.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "0dac62a02c8ed7b723381c7c879581bf0fae8b99",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -25,3 +25,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "b6bea21d96a68863f362df95b869b55822a2c8e9",
        "filename": "depends/packages/fontconfig.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/fontconfig.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/fontconfig.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/fontconfig.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "c79c4f492dfbc0fef8a8b7b992b57f223b69986d",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -25,3 +25,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "629bc62a935fca0d85c62d0b8d08a17351807ae8",
        "filename": "depends/packages/libXau.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libXau.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libXau.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libXau.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -32,3 +32,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "a3ba41bb63130e0a1df9dc3c94d3c84ad9f22094",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "a94c2b99ddd0005c88dab5763e3a8a08c4562238",
        "filename": "depends/packages/libmultiprocess.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libmultiprocess.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "007d1123afade4351f691a5ad98ea065468a8635",
        "filename": "depends/packages/libnatpmp.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libnatpmp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libnatpmp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libnatpmp.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -20,3 +20,4 @@ define $(package)_stage_cmds\n   install *.h $($(package)_staging_prefix_dir)/include &&\\\n   install libnatpmp.a $($(package)_staging_prefix_dir)/lib\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "f8b5e7314f1d69c4c410a4b3f5aa40c14ffc642f",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -42,3 +42,4 @@ endef\n define $(package)_postprocess_cmds\n   rm -rf share lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "9dbfa7febabd08e3079456b55948d801b26b3d20",
        "filename": "depends/packages/libxkbcommon.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libxkbcommon.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/libxkbcommon.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxkbcommon.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -30,3 +30,4 @@ define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n \n+packages/$(package).mk:: ;"
      },
      {
        "sha": "92e9bc1f0467ff7ea014b4e9838fde38897a3e19",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -25,3 +25,4 @@ define $(package)_stage_cmds\n \tinstall *.h $($(package)_staging_prefix_dir)/include/miniupnpc &&\\\n \tinstall libminiupnpc.a $($(package)_staging_prefix_dir)/lib\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "559a42ff28eab90e99040f8af694f9a402d90cc6",
        "filename": "depends/packages/native_b2.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_b2.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_b2.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_b2.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -18,3 +18,4 @@ define $(package)_stage_cmds\n   mkdir -p \"$($(package)_staging_prefix_dir)\"/bin/ && \\\n   cp b2 \"$($(package)_staging_prefix_dir)\"/bin/\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "e4740158d60f28b75c7a05af0f1cc7770472f5e7",
        "filename": "depends/packages/native_capnp.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_capnp.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "fe9de03eec8586e05fbbc84590c5845432641703",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm -rf share\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "1841bf31aa41d3bc92ace5c1a8efcde68a6a8d95",
        "filename": "depends/packages/native_clang.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_clang.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_clang.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_clang.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -24,3 +24,4 @@ endef\n define $(package)_postprocess_cmds\n   rmdir include\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "f29a17c02b73ff85a31c0c90c5a967cc8aed9667",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -13,3 +13,4 @@ define $(package)_stage_cmds\n     mkdir -p $($(package)_install_libdir) && \\\n     python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "e13a590b3c8f34f74ce53c20f31b1f15f39aff87",
        "filename": "depends/packages/native_libdmg-hfsplus.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_libdmg-hfsplus.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_libdmg-hfsplus.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libdmg-hfsplus.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -22,3 +22,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) -C dmg install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "21946ed4018997804eddffbc14a0d09beb25ff8c",
        "filename": "depends/packages/native_libmultiprocess.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libmultiprocess.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -16,3 +16,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "af9531028a32e39dc3891fa6f49cff5e3d39e226",
        "filename": "depends/packages/native_libtapi.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_libtapi.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_libtapi.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libtapi.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -18,3 +18,4 @@ define $(package)_stage_cmds\n   mkdir -p $($(package)_staging_prefix_dir)/include/llvm-c && \\\n   cp src/llvm/include/llvm-c/lto.h $($(package)_staging_prefix_dir)/include/llvm-c\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "39a2f99e22ba806fa9b4b815dce0c9238a3d53ab",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -13,3 +13,4 @@ define $(package)_stage_cmds\n     mkdir -p $($(package)_install_libdir) && \\\n     python3 setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "3cd7d8795974b7e097249772bdac1d1816e04724",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -31,3 +31,4 @@ darwin_native_packages+= native_clang\n endif\n \n endif\n+packages/packages.mk:: ;"
      },
      {
        "sha": "030648fd98b0e901dfab061afc3a9e6c7e2e4bb1",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -31,3 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "3d325c260bf3bf358867140158721dbd68c2bcd9",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -282,3 +282,4 @@ define $(package)_postprocess_cmds\n   rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n   rm -f lib/lib*.la lib/*.prl plugins/*/*.prl\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "a8b62aee35d90292ee1cf6915b73e8dc746116d2",
        "filename": "depends/packages/sqlite.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/sqlite.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/sqlite.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/sqlite.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -24,3 +24,4 @@ endef\n define $(package)_postprocess_cmds\n   rm lib/*.la\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "e2816074c40a3a2b187d73c33532429189caeeb3",
        "filename": "depends/packages/xcb_proto.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/xcb_proto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/xcb_proto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xcb_proto.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -20,3 +20,4 @@ define $(package)_postprocess_cmds\n   find -name \"*.pyc\" -delete && \\\n   find -name \"*.pyo\" -delete\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "ee0de2df0e966835a10352fe9c87624a7521af47",
        "filename": "depends/packages/xproto.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/xproto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/xproto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xproto.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -24,3 +24,4 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install\n endef\n+packages/$(package).mk:: ;"
      },
      {
        "sha": "2bc1681a53758345f05a232bce6e902d73f23b20",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -35,3 +35,4 @@ endef\n define $(package)_postprocess_cmds\n   rm -rf bin share lib/*.la\n endef\n+packages/$(package).mk:: ;"
      }
    ]
  },
  {
    "sha": "bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDQxODM0ZjQ4NGJlOTk2MGNiZDk5YmM5YmM4MGE3Y2EzNWJiZTc5",
    "commit": {
      "author": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-07-18T20:28:49Z"
      },
      "committer": {
        "name": "Dmitry Goncharov",
        "email": "dgoncharov@users.sf.net",
        "date": "2021-07-18T20:28:49Z"
      },
      "message": "Merge branch 'master' into avoid_rebuilding_makefiles\n\n* master: (436 commits)\n  Test that descriptor wallet upgrade does nothing\n  Make IsSegWitOutput return true for taproot outputs\n  bench: fix 32-bit narrowing warning in bench/peer_eviction.cpp\n  Change ScriptPubKeyMan::Upgrade to default to return true\n  test: move rpc_rawtransaction tests to < 30s group\n  test: whitelist rpc_rawtransaction peers to speed up tests\n  test: Fix wallet_listdescriptors.py if bdb is not compiled\n  Move implementations of non-template fuzz helpers\n  refactor: move UpdateTip into CChainState\n  refactor: no mempool arg to GetCoinsCacheSizeState\n  refactor: move UpdateMempoolForReorg into CChainState\n  validation: make CChainState::m_mempool optional\n  init: remove straggling boost thread_group code\n  fix incorrect testmempoolaccept doc\n  doc: mention that we enforce port=0 in I2P\n  addrman: reset I2P ports to 0 when loading from disk\n  test: ensure I2P ports are handled as expected\n  net: do not connect to I2P hosts on port!=0\n  net: distinguish default port per network\n  net: change I2P seeds' ports to 0\n  ...",
      "tree": {
        "sha": "7a6bd9c6cce088ade5795f62ad8bfd23a0744f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a6bd9c6cce088ade5795f62ad8bfd23a0744f8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/comments",
    "author": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gtkiller",
      "id": 328089,
      "node_id": "MDQ6VXNlcjMyODA4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/328089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtkiller",
      "html_url": "https://github.com/gtkiller",
      "followers_url": "https://api.github.com/users/gtkiller/followers",
      "following_url": "https://api.github.com/users/gtkiller/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtkiller/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtkiller/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtkiller/subscriptions",
      "organizations_url": "https://api.github.com/users/gtkiller/orgs",
      "repos_url": "https://api.github.com/users/gtkiller/repos",
      "events_url": "https://api.github.com/users/gtkiller/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtkiller/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7353a1e47fac1ccc66f1cee636e8182f1c6f380"
      },
      {
        "sha": "e8f85e0e86e92e583b8984455b7bf9d0a777578a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f85e0e86e92e583b8984455b7bf9d0a777578a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f85e0e86e92e583b8984455b7bf9d0a777578a"
      }
    ],
    "stats": {
      "total": 25435,
      "additions": 16202,
      "deletions": 9233
    },
    "files": [
      {
        "sha": "3ca7818ecad24cdb4937763142a5ff746aa92605",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -7,9 +7,9 @@ clone_depth: 5\n environment:\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n-  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt51210x64_vs2019_1694/Qt5.12.10_x64_static_vs2019_1694.zip'\n-  QT_DOWNLOAD_HASH: '3035a1307e8302bb3a76eba9bb3102979f945ab4022cc3bc2e1583edd44bdc99'\n-  QT_LOCAL_PATH: 'C:\\Qt5.12.10_x64_static_vs2019_1694'\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt51211x64_static_vs2019_16101/Qt5.12.11_x64_static_vs2019_16101.zip'\n+  QT_DOWNLOAD_HASH: 'cf1b58107fadbf0d9a957d14dab16cde6b6eb6936a1908472da1f967dda34a3a'\n+  QT_LOCAL_PATH: 'C:\\Qt5.12.11_x64_static_vs2019_16101'\n   VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'\n install:\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes."
      },
      {
        "sha": "26bd27754f10eab3cc37e96aeacc54cd6c3e3bac",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -197,12 +197,11 @@ task:\n task:\n   name: 'macOS 11 native [gui] [no depends]'\n   brew_install_script:\n-    - brew update\n     - brew install boost libevent berkeley-db4 qt@5 miniupnpc libnatpmp ccache zeromq qrencode sqlite libtool automake pkg-config gnu-getopt\n   << : *GLOBAL_TASK_TEMPLATE\n   osx_instance:\n     # Use latest image, but hardcode version to avoid silent upgrades (and breaks)\n-    image: big-sur-xcode-12.4  # https://cirrus-ci.org/guide/macOS\n+    image: big-sur-xcode-12.5  # https://cirrus-ci.org/guide/macOS\n   env:\n     << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n     CI_USE_APT_INSTALL: \"no\""
      },
      {
        "sha": "79c294fd15859d25238ba5c3b52daeea35ce86ba",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n ACLOCAL_AMFLAGS = -I build-aux/m4\n@@ -58,6 +58,7 @@ DIST_SHARE = \\\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py \\\n+           $(top_srcdir)/contrib/devtools/utils.py \\\n            $(top_srcdir)/contrib/devtools/pixie.py\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n@@ -366,14 +367,14 @@ clean-local: clean-docs\n \n test-security-check:\n if TARGET_DARWIN\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n endif\n if TARGET_WINDOWS\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n endif\n if TARGET_LINUX\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n-\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n+\t$(AM_V_at) CC='$(CC)' CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n endif"
      },
      {
        "sha": "e048036e4236d8f7f321eea8501fd12af3ed78ce",
        "filename": "REVIEWERS",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/REVIEWERS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/REVIEWERS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/REVIEWERS?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -57,8 +57,6 @@\n /src/util/settings.*                        @ryanofsky\n \n # Fuzzing\n-/src/test/fuzz/                             @practicalswift\n-/doc/fuzzing.md                             @practicalswift\n \n # Tests\n /src/test/net_peer_eviction_tests.cpp       @jonatack\n@@ -117,7 +115,6 @@\n /src/dbwrapper.*                            @jamesob\n \n # Linter\n-/test/lint/                                 @practicalswift\n /test/lint/lint-shell.sh                    @hebasto\n \n # Bech32"
      },
      {
        "sha": "7aac53c8155f1938a6bbed5fb407b573f85f81b8",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,7 +11,7 @@\n #   Test for the Boost C++ libraries of a particular version (or newer)\n #\n #   If no path to the installed boost library is given the macro searchs\n-#   under /usr, /usr/local, /opt and /opt/local and evaluates the\n+#   under /usr, /usr/local, /opt, /opt/local and /opt/homebrew and evaluates the\n #   $BOOST_ROOT environment variable. Further documentation is available at\n #   <http://randspringer.de/boost/index.html>.\n #\n@@ -151,7 +151,7 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n         else\n             search_libsubdirs=\"$multiarch_libsubdir $libsubdirs\"\n         fi\n-        for _AX_BOOST_BASE_boost_path_tmp in /usr /usr/local /opt /opt/local ; do\n+        for _AX_BOOST_BASE_boost_path_tmp in /usr /usr/local /opt /opt/local /opt/homebrew/; do\n             if test -d \"$_AX_BOOST_BASE_boost_path_tmp/include/boost\" && test -r \"$_AX_BOOST_BASE_boost_path_tmp/include/boost\" ; then\n                 for libsubdir in $search_libsubdirs ; do\n                     if ls \"$_AX_BOOST_BASE_boost_path_tmp/$libsubdir/libboost_\"* >/dev/null 2>&1 ; then break; fi\n@@ -227,7 +227,7 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n             fi\n         else\n             if test \"x$cross_compiling\" != \"xyes\" ; then\n-                for _AX_BOOST_BASE_boost_path in /usr /usr/local /opt /opt/local ; do\n+                for _AX_BOOST_BASE_boost_path in /usr /usr/local /opt /opt/local /opt/homebrew ; do\n                     if test -d \"$_AX_BOOST_BASE_boost_path\" && test -r \"$_AX_BOOST_BASE_boost_path\" ; then\n                         for i in `ls -d $_AX_BOOST_BASE_boost_path/include/boost-* 2>/dev/null`; do\n                             _version_tmp=`echo $i | sed \"s#$_AX_BOOST_BASE_boost_path##\" | sed 's/\\/include\\/boost-//' | sed 's/_/./'`"
      },
      {
        "sha": "5b5a8ed16e252844d88785da1ab26facc8e3b27f",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -146,10 +146,11 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       dnl https://bugreports.qt.io/browse/QTBUG-27097.\n       AX_CHECK_LINK_FLAG([-lwtsapi32], [QT_LIBS=\"$QT_LIBS -lwtsapi32\"], [AC_MSG_ERROR([could not link against -lwtsapi32])])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsIntegrationPlugin], [-lqwindows])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsVistaStylePlugin], [-lqwindowsvistastyle])\n       AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n     elif test \"x$TARGET_OS\" = xlinux; then\n       dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n-      AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"-lxcb-shm $QT_LIBS\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n+      AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"$QT_LIBS -lxcb-shm\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n       AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n     elif test \"x$TARGET_OS\" = xdarwin; then"
      },
      {
        "sha": "a697c1dfb68cd0921f5e85e92e773692193eb34e",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -55,6 +55,7 @@\n       <AdditionalIncludeDirectories>$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n+      <SubSystem>Windows</SubSystem>\n       <AdditionalDependencies>$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n       <AdditionalOptions>/ignore:4206 /LTCG:OFF</AdditionalOptions>\n     </Link>"
      },
      {
        "sha": "3a6aa4a83715081a1a5cbad193a3460f39182cea",
        "filename": "build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-util/bitcoin-util.vcxproj?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n+  <Import Project=\"..\\common.init.vcxproj\" />\n+  <PropertyGroup Label=\"Globals\">\n+    <ProjectGuid>{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}</ProjectGuid>\n+  </PropertyGroup>\n+  <PropertyGroup Label=\"Configuration\">\n+    <ConfigurationType>Application</ConfigurationType>\n+    <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n+  </PropertyGroup>\n+  <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\bitcoin-util.cpp\" />\n+  </ItemGroup>\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n+      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n+      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n+      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n+      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n+      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n+    </ProjectReference>\n+    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n+      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n+    </ProjectReference>\n+  </ItemGroup>\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n+  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n+  <Import Project=\"..\\common.vcxproj\" />\n+</Project>"
      },
      {
        "sha": "7d8591c10bd02b7feeac9bf4b6c67aec8ea5a05b",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -32,6 +32,8 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitc\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n EndProject\n+Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-util\", \"bitcoin-util\\bitcoin-util.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n+EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-wallet\", \"bitcoin-wallet\\bitcoin-wallet.vcxproj\", \"{84DE8790-EDE3-4483-81AC-C32F15E861F4}\"\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_wallet_tool\", \"libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\", \"{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}\""
      },
      {
        "sha": "ce66a7ab34b95fc6e5692fecb568090a2122fa72",
        "filename": "build_msvc/common.qt.init.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/common.qt.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/common.qt.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.qt.init.vcxproj?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -2,15 +2,15 @@\n <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n \n   <PropertyGroup Label=\"QtGlobals\">\n-    <QtBaseDir>C:\\Qt5.12.10_x64_static_vs2019_1694</QtBaseDir>\n+    <QtBaseDir>C:\\Qt5.12.11_x64_static_vs2019_16101</QtBaseDir>\n     <QtPluginsLibraryDir>$(QtBaseDir)\\plugins</QtPluginsLibraryDir>\n     <QtLibraryDir>$(QtBaseDir)\\lib</QtLibraryDir>\n     <QtIncludeDir>$(QtBaseDir)\\include</QtIncludeDir>\n     <QtIncludes>$(QtIncludeDir);$(QtIncludeDir)\\QtNetwork;$(QtIncludeDir)\\QtCore;$(QtIncludeDir)\\QtWidgets;$(QtIncludeDir)\\QtGui;</QtIncludes>\n     <GeneratedFilesOutDir>.\\QtGeneratedFiles\\qt</GeneratedFilesOutDir>\n     <QtToolsDir>$(QtBaseDir)\\bin</QtToolsDir>\n-    <QtReleaseLibraries>$(QtPluginsLibraryDir)\\platforms\\qminimal.lib;$(QtPluginsLibraryDir)\\platforms\\qwindows.lib;$(QtLibraryDir)\\Qt5WindowsUIAutomationSupport.lib;$(QtLibraryDir)\\qtfreetype.lib;$(QtLibraryDir)\\qtharfbuzz.lib;$(QtLibraryDir)\\qtlibpng.lib;$(QtLibraryDir)\\qtpcre2.lib;$(QtLibraryDir)\\Qt5AccessibilitySupport.lib;$(QtLibraryDir)\\Qt5Core.lib;$(QtLibraryDir)\\Qt5Concurrent.lib;$(QtLibraryDir)\\Qt5EventDispatcherSupport.lib;$(QtLibraryDir)\\Qt5FontDatabaseSupport.lib;$(QtLibraryDir)\\Qt5Gui.lib;$(QtLibraryDir)\\Qt5Network.lib;$(QtLibraryDir)\\Qt5PlatformCompositorSupport.lib;$(QtLibraryDir)\\Qt5ThemeSupport.lib;$(QtLibraryDir)\\Qt5Widgets.lib;$(QtLibraryDir)\\Qt5WinExtras.lib;$(QtLibraryDir)\\qtmain.lib;Wtsapi32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtReleaseLibraries>\n-    <QtDebugLibraries>$(QtPluginsLibraryDir)\\platforms\\qwindowsd.lib;$(QtPluginsLibraryDir)\\platforms\\qminimald.lib;$(QtLibraryDir)\\*d.lib;Wtsapi32.lib;crypt32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtDebugLibraries>\n+    <QtReleaseLibraries>$(QtPluginsLibraryDir)\\platforms\\qminimal.lib;$(QtPluginsLibraryDir)\\platforms\\qwindows.lib;$(QtPluginsLibraryDir)\\styles\\qwindowsvistastyle.lib;$(QtLibraryDir)\\Qt5WindowsUIAutomationSupport.lib;$(QtLibraryDir)\\qtfreetype.lib;$(QtLibraryDir)\\qtharfbuzz.lib;$(QtLibraryDir)\\qtlibpng.lib;$(QtLibraryDir)\\qtpcre2.lib;$(QtLibraryDir)\\Qt5AccessibilitySupport.lib;$(QtLibraryDir)\\Qt5Core.lib;$(QtLibraryDir)\\Qt5Concurrent.lib;$(QtLibraryDir)\\Qt5EventDispatcherSupport.lib;$(QtLibraryDir)\\Qt5FontDatabaseSupport.lib;$(QtLibraryDir)\\Qt5Gui.lib;$(QtLibraryDir)\\Qt5Network.lib;$(QtLibraryDir)\\Qt5PlatformCompositorSupport.lib;$(QtLibraryDir)\\Qt5ThemeSupport.lib;$(QtLibraryDir)\\Qt5Widgets.lib;$(QtLibraryDir)\\Qt5WinExtras.lib;$(QtLibraryDir)\\qtmain.lib;Wtsapi32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtReleaseLibraries>\n+    <QtDebugLibraries>$(QtPluginsLibraryDir)\\platforms\\qwindowsd.lib;$(QtPluginsLibraryDir)\\platforms\\qminimald.lib;$(QtPluginsLibraryDir)\\styles\\qwindowsvistastyled.lib;$(QtLibraryDir)\\*d.lib;Wtsapi32.lib;crypt32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtDebugLibraries>\n   </PropertyGroup>\n \n </Project>"
      },
      {
        "sha": "f9b0a7975cb9198dc0a1b6375b5fffd46663ac76",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -10,13 +10,14 @@\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\secp256k1\\src\\secp256k1.c\" />\n   </ItemGroup>\n-    <ItemDefinitionGroup>\n+  <ItemDefinitionGroup>\n     <ClCompile>\n       <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;ENABLE_MODULE_EXTRAKEYS;ENABLE_MODULE_SCHNORRSIG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-       <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n-     </ClCompile>\n+      <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+      <DisableSpecificWarnings>4146;4244;4267;4334</DisableSpecificWarnings>\n+    </ClCompile>\n   </ItemDefinitionGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n   <Import Project=\"..\\common.vcxproj\" />\n-</Project>\n\\ No newline at end of file\n+</Project>"
      },
      {
        "sha": "8a9d808f5de9aa9471d99e205ececc278d42ef7d",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -47,7 +47,7 @@ export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n export EXPECTED_TESTS_DURATION_IN_SECONDS=${EXPECTED_TESTS_DURATION_IN_SECONDS:-1000}\n \n export CONTAINER_NAME=${CONTAINER_NAME:-ci_unnamed}\n-export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n+export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:20.04}\n # Randomize test order.\n # See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html\n export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}"
      },
      {
        "sha": "8d2b70e549c9af0435891eff2b2f7ed19d2684d9",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -25,4 +25,4 @@ export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\"\n # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n # This could be removed once the ABI change warning does not show up by default\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\""
      },
      {
        "sha": "2ddb93290706e0aa52503dbcc4bbb29108016e5c",
        "filename": "ci/test/00_setup_env_i686_centos.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_i686_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_i686_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_centos.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,6 +11,6 @@ export CONTAINER_NAME=ci_i686_centos_8\n export DOCKER_NAME_TAG=centos:8\n export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python3-zmq which patch lbzip2 dash rsync coreutils bison\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports\"\n export CONFIG_SHELL=\"/bin/dash\"\n export TEST_RUNNER_ENV=\"LC_ALL=en_US.UTF-8\""
      },
      {
        "sha": "73ac09c1de1c6199e5f90cefd969db15b49dce96",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -15,4 +15,4 @@ export XCODE_BUILD_ID=12A7403\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"deploy\"\n-export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports\""
      },
      {
        "sha": "c0d951a04171535372a71cda362d8c3427fd9d24",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -9,7 +9,7 @@ export LC_ALL=C.UTF-8\n export HOST=x86_64-apple-darwin18\n export PIP_PACKAGES=\"zmq lief\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports\"\n export CI_OS_NAME=\"macos\"\n export NO_DEPENDS=1\n export OSX_SDK=\"\""
      },
      {
        "sha": "ab185b6e7142f98fa44792677d5e6aa9760db532",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,4 +11,4 @@ export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-\n export DOCKER_NAME_TAG=ubuntu:hirsute\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++ --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\""
      },
      {
        "sha": "58388fa92882193ffc8559009bf660d0392acd4a",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -14,5 +14,5 @@ export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined,integer CC=clang CXX=clang++ --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined,integer CC=clang CXX=clang++\"\n export CCACHE_SIZE=200M"
      },
      {
        "sha": "8869b2a08396a24be4f67b1397cb7a8973f057c0",
        "filename": "ci/test/00_setup_env_native_multiprocess.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_multiprocess.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,7 +11,6 @@ export DOCKER_NAME_TAG=ubuntu:20.04\n export PACKAGES=\"cmake python3 python3-pip llvm clang\"\n export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-external-signer --enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n+export BITCOIN_CONFIG=\"--enable-debug CC=clang CXX=clang++\"  # Use clang to avoid OOM\n export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n-export RUN_SECURITY_TESTS=\"true\"\n export PIP_PACKAGES=\"lief\""
      },
      {
        "sha": "d167c9198ad29d96bf97dda37c5efdaeeecbddd5",
        "filename": "ci/test/00_setup_env_native_nowallet.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_nowallet.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,4 +11,4 @@ export DOCKER_NAME_TAG=ubuntu:18.04  # Use bionic to have one config run the tes\n export PACKAGES=\"python3-zmq clang-5.0 llvm-5.0\"  # Use clang-5 to test C++17 compatibility, see doc/dependencies.md\n export DEP_OPTS=\"NO_WALLET=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0 --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CC=clang-5.0 CXX=clang++-5.0\""
      },
      {
        "sha": "b3e967c89866eb44809b1da6f236eca98795b772",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -14,6 +14,6 @@ export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude fe\n export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\"\n-export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1\"\n+export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1 v0.20.1\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports\n---enable-debug --disable-fuzz-binary  CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\" --enable-external-signer\"\n+--enable-debug --disable-fuzz-binary  CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\""
      },
      {
        "sha": "a5082bdaab37c2c5ece085944fb873dbba6c2e51",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,4 +11,4 @@ export DOCKER_NAME_TAG=ubuntu:hirsute\n export PACKAGES=\"clang llvm libc++abi-dev libc++-dev python3-zmq\"\n export DEP_OPTS=\"CC=clang CXX='clang++ -stdlib=libc++'\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=no CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' CXXFLAGS='-g' --with-sanitizers=thread CC=clang CXX='clang++ -stdlib=libc++' --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=no CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' CXXFLAGS='-g' --with-sanitizers=thread CC=clang CXX='clang++ -stdlib=libc++'\""
      },
      {
        "sha": "51a0fd9117d865d57a3ae6f369d804125f5aeb9f",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -23,4 +23,4 @@ export RUN_UNIT_TESTS=true\n export TEST_RUNNER_ENV=\"LC_ALL=C\"\n export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb --enable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\""
      },
      {
        "sha": "2079d2ed2be7d6f409d55b3d925e08633fb86d55",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,6 +11,7 @@ if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n fi\n \n if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n+  sudo -H pip3 install --upgrade pip\n   IN_GETOPT_BIN=\"/usr/local/opt/gnu-getopt/bin/getopt\" ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n fi\n \n@@ -83,11 +84,14 @@ fi\n DOCKER_EXEC echo \"Free disk space:\"\n DOCKER_EXEC df -h\n \n-if [ ! -d ${DIR_QA_ASSETS} ]; then\n-  DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n+  if [ ! -d ${DIR_QA_ASSETS} ]; then\n+    DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+  fi\n+\n+  export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n+  export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n fi\n-export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n-export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n \n DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n "
      },
      {
        "sha": "fa1b580cf582793ec95631bc834a1263a521f1a3",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 43,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -318,13 +318,6 @@ AC_ARG_ENABLE([gprof],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-dnl Pass compiler & linker flags that make builds deterministic\n-AC_ARG_ENABLE([determinism],\n-    [AS_HELP_STRING([--enable-determinism],\n-                    [Enable compilation flags that make builds deterministic (default is no)])],\n-    [enable_determinism=$enableval],\n-    [enable_determinism=no])\n-\n dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n@@ -333,9 +326,9 @@ AC_ARG_ENABLE([werror],\n     [enable_werror=no])\n \n AC_ARG_ENABLE([external-signer],\n-    [AS_HELP_STRING([--enable-external-signer],[compile external signer support (default is no, requires Boost::Process)])],\n+    [AS_HELP_STRING([--enable-external-signer],[compile external signer support (default is yes, requires Boost::Process)])],\n     [use_external_signer=$enableval],\n-    [use_external_signer=no])\n+    [use_external_signer=yes])\n \n AC_LANG_PUSH([C++])\n \n@@ -433,6 +426,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Werror=unreachable-code-loop-increment],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=mismatched-tags], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=mismatched-tags\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Werror=implicit-fallthrough], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=implicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n   if test x$suppress_external_warnings != xno ; then\n     AX_CHECK_COMPILE_FLAG([-Werror=documentation],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=documentation\"],,[[$CXXFLAG_WERROR]])\n@@ -463,6 +457,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n   AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wimplicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n   if test x$suppress_external_warnings != xno ; then\n     AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n@@ -474,8 +469,9 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n+  if test x$suppress_external_warnings != xyes ; then\n+    AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n+  fi\n fi\n \n dnl Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\n@@ -905,6 +901,7 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n+  AX_CHECK_LINK_FLAG([[-Wl,--enable-reloc-section]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])\n@@ -929,12 +926,6 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n fi\n \n-if test x$enable_determinism = xyes; then\n-  if test x$TARGET_OS = xwindows; then\n-    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"],, [[$LDFLAG_WERROR]])\n-  fi\n-fi\n-\n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n AC_CHECK_DECLS([getifaddrs, freeifaddrs],[CHECK_SOCKET],,\n@@ -1357,13 +1348,15 @@ if test x$enable_wallet != xno; then\n fi\n \n if test x$use_ebpf != xno; then\n-  AC_CHECK_HEADER([sys/sdt.h], [have_sdt=yes], [have_sdt=no])\n-else\n-  have_sdt=no\n-fi\n-\n-if test x$have_sdt = xyes; then\n-  AC_DEFINE([ENABLE_TRACING], [1], [Define to 1 to enable eBPF user static defined tracepoints])\n+  AC_MSG_CHECKING([whether eBPF tracepoints are supported])\n+  AC_COMPILE_IFELSE([\n+    AC_LANG_PROGRAM(\n+      [#include <sys/sdt.h>],\n+      [DTRACE_PROBE(\"context\", \"event\");]\n+    )],\n+    [AC_MSG_RESULT(yes); have_sdt=yes; AC_DEFINE([ENABLE_TRACING], [1], [Define to 1 to enable eBPF user static defined tracepoints])],\n+    [AC_MSG_RESULT(no); have_sdt=no;]\n+  )\n fi\n \n dnl Check for libminiupnpc (optional)\n@@ -1411,37 +1404,23 @@ fi\n if test x$use_boost = xyes; then\n \n   dnl Check for Boost headers\n-  AX_BOOST_BASE([1.58.0],[],[AC_MSG_ERROR([Boost is not available!])])\n+  AX_BOOST_BASE([1.64.0],[],[AC_MSG_ERROR([Boost is not available!])])\n   if test x$want_boost = xno; then\n     AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n   fi\n   AX_BOOST_SYSTEM\n   AX_BOOST_FILESYSTEM\n \n-  dnl Opt-in to Boost Process if external signer support is requested\n-  if test \"x$use_external_signer\" != xno; then\n-    AC_MSG_CHECKING(for Boost Process)\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/process.hpp>]],\n-     [[ boost::process::child* child = new boost::process::child; delete child; ]])],\n-     [ AC_MSG_RESULT(yes)\n-     AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n-     ],\n-     [ AC_MSG_ERROR([Boost::Process is required for external signer support, but not available!])]\n-    )\n-  fi\n-\n   if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n   fi\n \n-  dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n-  dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n-  m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\n-  BOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n-\n   BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n fi\n \n+if test \"x$use_external_signer\" != xno; then\n+  AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n+fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n dnl Check for reduced exports\n@@ -1915,7 +1894,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT"
      },
      {
        "sha": "64660968ad255886df97501115de636ae8873a73",
        "filename": "contrib/devtools/pixie.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/pixie.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/pixie.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/pixie.py?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -217,7 +217,7 @@ def _parse_verneed(section: Section, strings: bytes, eh: ELFHeader) -> Dict[int,\n     result = {}\n     while True:\n         verneed = Verneed(data, ofs, eh)\n-        aofs = verneed.vn_aux\n+        aofs = ofs + verneed.vn_aux\n         while True:\n             vernaux = Vernaux(data, aofs, eh, strings)\n             result[vernaux.vna_other] = vernaux.name"
      },
      {
        "sha": "61f727fa6342689775e2301c2d5736b59d906cce",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 45,
        "deletions": 19,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -3,21 +3,22 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-A script to check that the executables produced by gitian only contain\n-certain symbols and are only linked against allowed libraries.\n+A script to check that release executables only contain certain symbols\n+and are only linked against allowed libraries.\n \n Example usage:\n \n-    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n+    find ../path/to/binaries -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n import subprocess\n import sys\n-import os\n from typing import List, Optional\n \n import lief\n import pixie\n \n+from utils import determine_wellknown_cmd\n+\n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n # - g++ version 4.9.2 (https://packages.debian.org/search?suite=jessie&arch=any&searchon=names&keywords=g%2B%2B)\n@@ -41,8 +42,16 @@\n #\n MAX_VERSIONS = {\n 'GCC':       (4,8,0),\n-'GLIBC':     (2,17),\n-'LIBATOMIC': (1,0)\n+'GLIBC': {\n+    pixie.EM_386:    (2,17),\n+    pixie.EM_X86_64: (2,17),\n+    pixie.EM_ARM:    (2,17),\n+    pixie.EM_AARCH64:(2,17),\n+    pixie.EM_PPC64:  (2,17),\n+    pixie.EM_RISCV:  (2,27),\n+},\n+'LIBATOMIC': (1,0),\n+'V':         (0,5,0),  # xkb (bitcoin-qt only)\n }\n # See here for a description of _IO_stdin_used:\n # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=634261#109\n@@ -52,7 +61,6 @@\n '_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n 'environ', '_environ', '__environ',\n }\n-CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n \n # Allowed NEEDED libraries\n ELF_ALLOWED_LIBRARIES = {\n@@ -78,14 +86,6 @@\n 'libfreetype.so.6', # font parsing\n 'libdl.so.2' # programming interface to dynamic linker\n }\n-ARCH_MIN_GLIBC_VER = {\n-pixie.EM_386:    (2,1),\n-pixie.EM_X86_64: (2,2,5),\n-pixie.EM_ARM:    (2,4),\n-pixie.EM_AARCH64:(2,17),\n-pixie.EM_PPC64:  (2,17),\n-pixie.EM_RISCV:  (2,27)\n-}\n \n MACHO_ALLOWED_LIBRARIES = {\n # bitcoind and bitcoin-qt\n@@ -140,7 +140,7 @@ class CPPFilt(object):\n     Use a pipe to the 'c++filt' command.\n     '''\n     def __init__(self):\n-        self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n+        self.proc = subprocess.Popen(determine_wellknown_cmd('CPPFILT', 'c++filt'), stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n \n     def __call__(self, mangled):\n         self.proc.stdin.write(mangled + '\\n')\n@@ -161,7 +161,10 @@ def check_version(max_versions, version, arch) -> bool:\n     ver = tuple([int(x) for x in ver.split('.')])\n     if not lib in max_versions:\n         return False\n-    return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n+    if isinstance(max_versions[lib], tuple):\n+        return ver <= max_versions[lib]\n+    else:\n+        return ver <= max_versions[lib][arch]\n \n def check_imported_symbols(filename) -> bool:\n     elf = pixie.load(filename)\n@@ -212,6 +215,18 @@ def check_MACHO_libraries(filename) -> bool:\n             ok = False\n     return ok\n \n+def check_MACHO_min_os(filename) -> bool:\n+    binary = lief.parse(filename)\n+    if binary.build_version.minos == [10,14,0]:\n+        return True\n+    return False\n+\n+def check_MACHO_sdk(filename) -> bool:\n+    binary = lief.parse(filename)\n+    if binary.build_version.sdk == [10, 15, 6]:\n+        return True\n+    return False\n+\n def check_PE_libraries(filename) -> bool:\n     ok: bool = True\n     binary = lief.parse(filename)\n@@ -221,17 +236,28 @@ def check_PE_libraries(filename) -> bool:\n             ok = False\n     return ok\n \n+def check_PE_subsystem_version(filename) -> bool:\n+    binary = lief.parse(filename)\n+    major: int = binary.optional_header.major_subsystem_version\n+    minor: int = binary.optional_header.minor_subsystem_version\n+    if major == 6 and minor == 1:\n+        return True\n+    return False\n+\n CHECKS = {\n 'ELF': [\n     ('IMPORTED_SYMBOLS', check_imported_symbols),\n     ('EXPORTED_SYMBOLS', check_exported_symbols),\n     ('LIBRARY_DEPENDENCIES', check_ELF_libraries)\n ],\n 'MACHO': [\n-    ('DYNAMIC_LIBRARIES', check_MACHO_libraries)\n+    ('DYNAMIC_LIBRARIES', check_MACHO_libraries),\n+    ('MIN_OS', check_MACHO_min_os),\n+    ('SDK', check_MACHO_sdk),\n ],\n 'PE' : [\n-    ('DYNAMIC_LIBRARIES', check_PE_libraries)\n+    ('DYNAMIC_LIBRARIES', check_PE_libraries),\n+    ('SUBSYSTEM_VERSION', check_PE_subsystem_version),\n ]\n }\n "
      },
      {
        "sha": "14058e2cc8d5295ebcaa6007ac681d87e6b53a98",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -9,6 +9,8 @@\n import subprocess\n import unittest\n \n+from utils import determine_wellknown_cmd\n+\n def write_testcode(filename):\n     with open(filename, 'w', encoding=\"utf8\") as f:\n         f.write('''\n@@ -25,15 +27,15 @@ def clean_files(source, executable):\n     os.remove(executable)\n \n def call_security_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     return (p.returncode, p.stdout.rstrip())\n \n class TestSecurityChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n@@ -54,26 +56,28 @@ def test_ELF(self):\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))  # -pie -fPIE does nothing unless --dynamicbase is also supplied\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+            (1, executable+': failed HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n             (0, ''))\n \n         clean_files(source, executable)\n \n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fno-stack-protector']),\n@@ -95,4 +99,3 @@ def test_MACHO(self):\n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "7d83c5f751f0f901cd8cdc953bfa6435a7238aeb",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "modified",
        "additions": 57,
        "deletions": 21,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -7,41 +7,51 @@\n '''\n import os\n import subprocess\n+from typing import List\n import unittest\n \n-def call_symbol_check(cc, source, executable, options):\n-    subprocess.run([cc,source,'-o',executable] + options, check=True)\n+from utils import determine_wellknown_cmd\n+\n+def call_symbol_check(cc: List[str], source, executable, options):\n+    subprocess.run([*cc,source,'-o',executable] + options, check=True)\n     p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n     os.remove(source)\n     os.remove(executable)\n     return (p.returncode, p.stdout.rstrip())\n \n+def get_machine(cc: List[str]):\n+    p = subprocess.run([*cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n+    return p.stdout.rstrip()\n+\n class TestSymbolChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'gcc'\n+        cc = determine_wellknown_cmd('CC', 'gcc')\n \n-        # renameat2 was introduced in GLIBC 2.28, so is newer than the upper limit\n-        # of glibc for all platforms\n+        # there's no way to do this test for RISC-V at the moment; we build for\n+        # RISC-V in a glibc 2.27 envinonment and we allow all symbols from 2.27.\n+        if 'riscv' in get_machine(cc):\n+            self.skipTest(\"test not available for RISC-V\")\n+\n+        # nextup was introduced in GLIBC 2.24, so is newer than our supported\n+        # glibc (2.17), and available in our release build environment (2.24).\n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n                 #define _GNU_SOURCE\n-                #include <stdio.h>\n-                #include <linux/fs.h>\n+                #include <math.h>\n \n-                int renameat2(int olddirfd, const char *oldpath,\n-                    int newdirfd, const char *newpath, unsigned int flags);\n+                double nextup(double x);\n \n                 int main()\n                 {\n-                    renameat2(0, \"test\", 0, \"test_\", RENAME_EXCHANGE);\n+                    nextup(3.14);\n                     return 0;\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, []),\n-                (1, executable + ': symbol renameat2 from unsupported version GLIBC_2.28\\n' +\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n+                (1, executable + ': symbol nextup from unsupported version GLIBC_2.24\\n' +\n                     executable + ': failed IMPORTED_SYMBOLS'))\n \n         # -lutil is part of the libc6 package so a safe bet that it's installed\n@@ -82,7 +92,7 @@ def test_ELF(self):\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = 'clang'\n+        cc = determine_wellknown_cmd('CC', 'clang')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -96,9 +106,9 @@ def test_MACHO(self):\n \n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n             (1, 'libexpat.1.dylib is not in ALLOWED_LIBRARIES!\\n' +\n-                executable + ': failed DYNAMIC_LIBRARIES'))\n+                f'{executable}: failed DYNAMIC_LIBRARIES MIN_OS SDK'))\n \n         source = 'test2.c'\n         executable = 'test2'\n@@ -113,13 +123,26 @@ def test_MACHO(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics']),\n-                (0, ''))\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n+                (1, f'{executable}: failed MIN_OS SDK'))\n+\n+        source = 'test3.c'\n+        executable = 'test3'\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                int main()\n+                {\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.14', '-Wl,11.4']),\n+                (1, f'{executable}: failed SDK'))\n \n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = 'x86_64-w64-mingw32-gcc'\n+        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n \n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n@@ -132,12 +155,26 @@ def test_PE(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lpdh']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lpdh', '-Wl,--major-subsystem-version', '-Wl,6', '-Wl,--minor-subsystem-version', '-Wl,1']),\n             (1, 'pdh.dll is not in ALLOWED_LIBRARIES!\\n' +\n                  executable + ': failed DYNAMIC_LIBRARIES'))\n \n         source = 'test2.c'\n         executable = 'test2.exe'\n+\n+        with open(source, 'w', encoding=\"utf8\") as f:\n+            f.write('''\n+                int main()\n+                {\n+                    return 0;\n+                }\n+        ''')\n+\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,--major-subsystem-version', '-Wl,9', '-Wl,--minor-subsystem-version', '-Wl,9']),\n+            (1, executable + ': failed SUBSYSTEM_VERSION'))\n+\n+        source = 'test3.c'\n+        executable = 'test3.exe'\n         with open(source, 'w', encoding=\"utf8\") as f:\n             f.write('''\n                 #include <windows.h>\n@@ -149,10 +186,9 @@ def test_PE(self):\n                 }\n         ''')\n \n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lole32']),\n+        self.assertEqual(call_symbol_check(cc, source, executable, ['-lole32', '-Wl,--major-subsystem-version', '-Wl,6', '-Wl,--minor-subsystem-version', '-Wl,1']),\n                 (0, ''))\n \n \n if __name__ == '__main__':\n     unittest.main()\n-"
      },
      {
        "sha": "68ad1c3aba1915fe44309f802a16e74be4f54e42",
        "filename": "contrib/devtools/utils.py",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/utils.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/devtools/utils.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/utils.py?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Common utility functions\n+'''\n+import shutil\n+import sys\n+import os\n+from typing import List\n+\n+\n+def determine_wellknown_cmd(envvar, progname) -> List[str]:\n+    maybe_env = os.getenv(envvar)\n+    maybe_which = shutil.which(progname)\n+    if maybe_env:\n+        return maybe_env.split(' ')  # Well-known vars are often meant to be word-split\n+    elif maybe_which:\n+        return [ maybe_which ]\n+    else:\n+        sys.exit(f\"{progname} not found\")"
      },
      {
        "sha": "e6dce7a8c664fc102b06f281eb1fc33a75670992",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -56,7 +56,6 @@ script: |\n   HOST_CXXFLAGS=\"-O2 -g\"\n   HOST_LDFLAGS_BASE=\"-static-libstdc++ -Wl,-O2\"\n \n-  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n   export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n@@ -100,7 +99,7 @@ script: |\n   done\n   }\n \n-  pip3 install lief==0.11.4\n+  pip3 install lief==0.11.5\n \n   # Faketime for depends so intermediate results are comparable\n   export PATH_orig=${PATH}"
      },
      {
        "sha": "addad0a5d27a0320a5384894e9a7f09aa97c8e1c",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -14,7 +14,7 @@ remotes:\n   \"dir\": \"signature\"\n - \"url\": \"https://github.com/achow101/signapple.git\"\n   \"dir\": \"signapple\"\n-  \"commit\": \"c7e73aa27a7615ac9506559173f787e2906b25eb\"\n+  \"commit\": \"b084cbbf44d5330448ffce0c7d118f75781b64bd\"\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n script: |"
      },
      {
        "sha": "a39618adb78d5c3403c9f47e0b58111a6811bbec",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -42,7 +42,6 @@ script: |\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg xorrisofs\"\n \n-  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n   export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n@@ -79,7 +78,7 @@ script: |\n   done\n   }\n \n-  pip3 install lief==0.11.4\n+  pip3 install lief==0.11.5\n \n   # Faketime for depends so intermediate results are comparable\n   export PATH_orig=${PATH}"
      },
      {
        "sha": "ffe228a032e6dd72af86ea2187c3737f3783e1f8",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -38,7 +38,6 @@ script: |\n   HOST_CFLAGS=\"-O2 -g -fno-ident\"\n   HOST_CXXFLAGS=\"-O2 -g -fno-ident\"\n \n-  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n   export TZ=\"UTC\"\n   export BUILD_DIR=\"$PWD\"\n   mkdir -p ${WRAP_DIR}\n@@ -87,7 +86,7 @@ script: |\n   done\n   }\n \n-  pip3 install lief==0.11.4\n+  pip3 install lief==0.11.5\n \n   # Faketime for depends so intermediate results are comparable\n   export PATH_orig=${PATH}"
      },
      {
        "sha": "c8cf73d40011ad8d9a438044a441cab8520d2778",
        "filename": "contrib/guix/guix-attest",
        "status": "modified",
        "additions": 101,
        "deletions": 68,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/guix-attest",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/guix-attest",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-attest?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -99,24 +99,34 @@ fi\n # We should be able to find at least one output\n ################\n \n-echo \"Looking for build output directories in ${OUTDIR_BASE}\"\n+echo \"Looking for build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n \n shopt -s nullglob\n-OUTDIRS=( \"${OUTDIR_BASE}\"/* ) # This expands to an array of directories...\n+sha256sum_fragments=( \"$OUTDIR_BASE\"/*/SHA256SUMS.part ) # This expands to an array of directories...\n shopt -u nullglob\n \n-if (( ${#OUTDIRS[@]} )); then\n-    echo \"Found build output directories:\"\n-    for outdir in \"${OUTDIRS[@]}\"; do\n+noncodesigned_fragments=()\n+codesigned_fragments=()\n+\n+if (( ${#sha256sum_fragments[@]} )); then\n+    echo \"Found build output SHA256SUMS fragments:\"\n+    for outdir in \"${sha256sum_fragments[@]}\"; do\n         echo \"    '$outdir'\"\n+        case \"$outdir\" in\n+            \"$OUTDIR_BASE\"/*-codesigned/SHA256SUMS.part)\n+                codesigned_fragments+=(\"$outdir\")\n+                ;;\n+            *)\n+                noncodesigned_fragments+=(\"$outdir\")\n+                ;;\n+        esac\n     done\n     echo\n else\n-    echo \"ERR: Could not find any build output directories in ${OUTDIR_BASE}\"\n+    echo \"ERR: Could not find any build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n     exit 1\n fi\n \n-\n ##############\n ##  Attest  ##\n ##############\n@@ -126,82 +136,105 @@ fi\n #   HOST: The output directory being attested\n #\n out_name() {\n-    basename \"$1\"\n+    basename \"$(dirname \"$1\")\"\n }\n \n-# Usage: out_sig_dir $outdir\n-#\n-#   outdir: The output directory being attested\n-#\n-out_sig_dir() {\n-    echo \"$GUIX_SIGS_REPO/$VERSION/$(out_name \"$1\")/$signer_name\"\n-}\n+shasum_already_exists() {\n+cat <<EOF\n+--\n \n-# Accumulate a list of signature directories that already exist...\n-outdirs_already_attested_to=()\n+ERR: An ${1} file already exists for '${VERSION}' and attests\n+     differently. You likely previously attested to a partial build (e.g. one\n+     where you specified the HOST environment variable).\n \n-echo \"Attesting to build outputs for version: '${VERSION}'\"\n-echo \"\"\n+     See the diff above for more context.\n \n-# MAIN LOGIC: Loop through each output for VERSION and attest to output in\n-#             GUIX_SIGS_REPO as SIGNER, if attestation does not exist\n-for outdir in \"${OUTDIRS[@]}\"; do\n-    if [ -e \"${outdir}/SKIPATTEST.TAG\" ]; then\n-        echo \"${outname}: SKIPPING: Output directory marked with SKIPATTEST.TAG file\"\n-        continue\n-    fi\n-    outname=\"$(out_name \"$outdir\")\"\n-    outsigdir=\"$(out_sig_dir \"$outdir\")\"\n-    if [ -e \"$outsigdir\" ]; then\n-        echo \"${outname}: SKIPPING: Signature directory already exists in the specified guix.sigs repository\"\n-        outdirs_already_attested_to+=(\"$outdir\")\n-    else\n-        # Clean up incomplete sigdir if something fails (likely gpg)\n-        trap 'rm -rf \"$outsigdir\"' ERR\n+Hint: You may wish to remove the existing attestations and their signatures by\n+      invoking:\n \n-        mkdir -p \"$outsigdir\"\n+          rm '${PWD}/${1}'{,.asc}\n \n-        (\n-            cd \"$outdir\"\n+      Then try running this script again.\n \n-            if [ -e inputs.SHA256SUMS ]; then\n-                echo \"${outname}: Including existent input SHA256SUMS\"\n-                cat inputs.SHA256SUMS >> \"$outsigdir\"/SHA256SUMS\n-            fi\n+EOF\n+}\n \n-            echo \"${outname}: Hashing build outputs to produce SHA256SUMS\"\n-            files=\"$(find -L . -type f ! -iname '*.SHA256SUMS')\"\n-            if [ -n \"$files\" ]; then\n-                cut -c3- <<< \"$files\" | env LC_ALL=C sort | xargs sha256sum >> \"$outsigdir\"/SHA256SUMS\n+echo \"Attesting to build outputs for version: '${VERSION}'\"\n+echo \"\"\n+\n+outsigdir=\"$GUIX_SIGS_REPO/$VERSION/$signer_name\"\n+mkdir -p \"$outsigdir\"\n+(\n+    cd \"$outsigdir\"\n+\n+    temp_noncodesigned=\"$(mktemp)\"\n+    trap 'rm -rf -- \"$temp_noncodesigned\"' EXIT\n+\n+    if (( ${#noncodesigned_fragments[@]} )); then\n+        cat \"${noncodesigned_fragments[@]}\" \\\n+            | sort -u \\\n+            | sort -k2 \\\n+                   > \"$temp_noncodesigned\"\n+        if [ -e noncodesigned.SHA256SUMS ]; then\n+            # The SHA256SUMS already exists, make sure it's exactly what we\n+            # expect, error out if not\n+            if diff -u noncodesigned.SHA256SUMS \"$temp_noncodesigned\"; then\n+                echo \"A noncodesigned.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n             else\n-                echo \"ERR: ${outname}: No outputs found in '${outdir}'\"\n+                shasum_already_exists noncodesigned.SHA256SUMS\n                 exit 1\n             fi\n-        )\n-        if [ -z \"$NO_SIGN\" ]; then\n-            echo \"${outname}: Signing SHA256SUMS to produce SHA256SUMS.asc\"\n-            gpg --detach-sign --local-user \"$gpg_key_name\" --armor --output \"$outsigdir\"/SHA256SUMS.asc \"$outsigdir\"/SHA256SUMS\n         else\n-            echo \"${outname}: Not signing SHA256SUMS as \\$NO_SIGN is not empty\"\n+            mv \"$temp_noncodesigned\" noncodesigned.SHA256SUMS\n         fi\n-        echo \"\"\n-\n-        trap - ERR  # Reset ERR trap\n+    else\n+        echo \"ERR: No noncodesigned outputs found for '${VERSION}', exiting...\"\n+        exit 1\n     fi\n-done\n-\n-if (( ${#outdirs_already_attested_to[@]} )); then\n-# ...so that we can print them out nicely in a warning message\n-cat << EOF\n \n-WARN: Signature directories from '$signer_name' already exist in the specified\n-      guix.sigs repository for the following output directories and were\n-      skipped:\n+    temp_codesigned=\"$(mktemp)\"\n+    trap 'rm -rf -- \"$temp_codesigned\"' EXIT\n+\n+    if (( ${#codesigned_fragments[@]} )); then\n+        # Note: all.SHA256SUMS attests to all of $sha256sum_fragments, but is\n+        #       not needed if there are no $codesigned_fragments\n+        cat \"${sha256sum_fragments[@]}\" \\\n+            | sort -u \\\n+            | sort -k2 \\\n+                   > \"$temp_codesigned\"\n+        if [ -e codesigned.SHA256SUMS ]; then\n+            # The SHA256SUMS already exists, make sure it's exactly what we\n+            # expect, error out if not\n+            if diff -u all.SHA256SUMS \"$temp_codesigned\"; then\n+                echo \"An all.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n+            else\n+                shasum_already_exists all.SHA256SUMS\n+                exit 1\n+            fi\n+        else\n+            mv \"$temp_codesigned\" codesigned.SHA256SUMS\n+        fi\n+    else\n+        # It is fine to have the codesigned outputs be missing (perhaps the\n+        # detached codesigs have not been published yet), just print a log\n+        # message instead of erroring out\n+        echo \"INFO: No codesigned outputs found for '${VERSION}', skipping...\"\n+    fi\n \n-EOF\n-for outdir in \"${outdirs_already_attested_to[@]}\"; do\n-    echo \"    '${outdir}'\"\n-    echo \"    Corresponds to: '$(out_sig_dir \"$outdir\")'\"\n+    if [ -z \"$NO_SIGN\" ]; then\n+        echo \"Signing SHA256SUMS to produce SHA256SUMS.asc\"\n+        for i in *.SHA256SUMS; do\n+            if [ ! -e \"$i\".asc ]; then\n+                gpg --detach-sign \\\n+                    --local-user \"$gpg_key_name\" \\\n+                    --armor \\\n+                    --output \"$i\".asc \"$i\"\n+            else\n+                echo \"Signature already there\"\n+            fi\n+        done\n+    else\n+        echo \"Not signing SHA256SUMS as \\$NO_SIGN is not empty\"\n+    fi\n     echo \"\"\n-done\n-fi\n+)"
      },
      {
        "sha": "29d6701b253624c575a0da30d20a37be83758c12",
        "filename": "contrib/guix/guix-build",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/guix-build",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/guix-build",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -138,6 +138,28 @@ for host in $HOSTS; do\n     esac\n done\n \n+################\n+# VERSION_BASE should have enough space\n+################\n+\n+avail_KiB=\"$(df -Pk \"$VERSION_BASE\" | sed 1d | tr -s ' ' | cut -d' ' -f4)\"\n+total_required_KiB=0\n+for host in $HOSTS; do\n+    case \"$host\" in\n+        *darwin*) required_KiB=440000 ;;\n+        *mingw*)  required_KiB=7600000 ;;\n+        *)        required_KiB=6400000 ;;\n+    esac\n+    total_required_KiB=$((total_required_KiB+required_KiB))\n+done\n+\n+if (( total_required_KiB > avail_KiB )); then\n+    total_required_GiB=$((total_required_KiB / 1048576))\n+    avail_GiB=$((avail_KiB / 1048576))\n+    echo \"Performing a Bitcoin Core Guix build for the selected HOSTS requires ${total_required_GiB} GiB, however, only ${avail_GiB} GiB is available. Please free up some disk space before performing the build.\"\n+    exit 1\n+fi\n+\n ################\n # Check that we can connect to the guix-daemon\n ################"
      },
      {
        "sha": "a6e2c4065ecc4c6d154dc768b3af403169898061",
        "filename": "contrib/guix/guix-verify",
        "status": "modified",
        "additions": 69,
        "deletions": 40,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/guix-verify",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/guix-verify",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-verify?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -56,58 +56,87 @@ cmd_usage\n exit 1\n fi\n \n-################\n-# We should be able to find at least one output\n-################\n+##############\n+##  Verify  ##\n+##############\n \n OUTSIGDIR_BASE=\"${GUIX_SIGS_REPO}/${VERSION}\"\n-echo \"Looking for output signature directories in '${OUTSIGDIR_BASE}'\"\n+echo \"Looking for signature directories in '${OUTSIGDIR_BASE}'\"\n+echo \"\"\n+\n+# Usage: verify compare_manifest current_manifest\n+verify() {\n+    local compare_manifest=\"$1\"\n+    local current_manifest=\"$2\"\n+    if ! gpg --quiet --batch --verify \"$current_manifest\".asc \"$current_manifest\" 1>&2; then\n+        echo \"ERR: Failed to verify GPG signature in '${current_manifest}'\"\n+        echo \"\"\n+        echo \"Hint: Either the signature is invalid or the public key is missing\"\n+        echo \"\"\n+    elif ! diff --report-identical \"$compare_manifest\" \"$current_manifest\" 1>&2; then\n+        echo \"ERR: The SHA256SUMS attestation in these two directories differ:\"\n+        echo \"    '${compare_manifest}'\"\n+        echo \"    '${current_manifest}'\"\n+        echo \"\"\n+    else\n+        echo \"Verified: '${current_manifest}'\"\n+        echo \"\"\n+    fi\n+}\n \n shopt -s nullglob\n-OUTSIGDIRS=( \"$OUTSIGDIR_BASE\"/* ) # This expands to an array of directories...\n+all_noncodesigned=( \"$OUTSIGDIR_BASE\"/*/noncodesigned.SHA256SUMS )\n shopt -u nullglob\n \n-if (( ${#OUTSIGDIRS[@]} )); then\n-    echo \"Found output signature directories:\"\n-    for outsigdir in \"${OUTSIGDIRS[@]}\"; do\n-        echo \"    '$outsigdir'\"\n+echo \"--------------------\"\n+echo \"\"\n+if (( ${#all_noncodesigned[@]} )); then\n+    compare_noncodesigned=\"${all_noncodesigned[0]}\"\n+\n+    for current_manifest in \"${all_noncodesigned[@]}\"; do\n+        verify \"$compare_noncodesigned\" \"$current_manifest\"\n     done\n-    echo\n+\n+    echo \"DONE: Checking output signatures for noncodesigned.SHA256SUMS\"\n+    echo \"\"\n else\n-    echo \"ERR: Could not find any output signature directories in ${OUTSIGDIR_BASE}\"\n-    exit 1\n+    echo \"WARN: No signature directories with noncodesigned.SHA256SUMS found\"\n+    echo \"\"\n fi\n \n+shopt -s nullglob\n+all_all=( \"$OUTSIGDIR_BASE\"/*/all.SHA256SUMS )\n+shopt -u nullglob\n \n-##############\n-##  Verify  ##\n-##############\n+echo \"--------------------\"\n+echo \"\"\n+if (( ${#all_all[@]} )); then\n+    compare_all=\"${all_all[0]}\"\n \n-# MAIN LOGIC: Loop through each output for VERSION and check that the SHA256SUMS\n-#             and SHA256SUMS.asc file match between signers, using the first\n-#             available signer as the arbitrary comparison base.\n-for outsigdir in \"${OUTSIGDIRS[@]}\"; do\n-    echo \"BEGIN: Checking output signatures for $(basename \"$outsigdir\")\"\n-    echo \"\"\n-    signer_dirs=( \"$outsigdir\"/* ) # This expands to an array of directories...\n-    compare_signer_dir=\"${signer_dirs[0]}\" # ...we just want the first one\n-    for current_signer_dir in \"${signer_dirs[@]}\"; do\n-        if ! gpg --quiet --batch --verify \"$current_signer_dir\"/SHA256SUMS.asc \"$current_signer_dir\"/SHA256SUMS; then\n-            echo \"ERR: Failed to verify GPG signature in '${current_signer_dir}/SHA256SUMS.asc'\"\n-            echo \"\"\n-            echo \"Hint: Either the signature is invalid or the public key is missing\"\n-            echo \"\"\n-        elif ! diff --report-identical \"$compare_signer_dir\"/SHA256SUMS \"$current_signer_dir\"/SHA256SUMS; then\n-            echo \"ERR: The SHA256SUMS attestation in these two directories differ:\"\n-            echo \"    '${compare_signer_dir}'\"\n-            echo \"    '${current_signer_dir}'\"\n-            echo \"\"\n-        else\n-            echo \"Verified: '${current_signer_dir}'\"\n-            echo \"\"\n-        fi\n+    for current_manifest in \"${all_all[@]}\"; do\n+        verify \"$compare_all\" \"$current_manifest\"\n     done\n-    echo \"DONE: Checking output signatures for $(basename \"$outsigdir\")\"\n+\n+    # Sanity check: there should be no entries that exist in\n+    # noncodesigned.SHA256SUMS that doesn't exist in all.SHA256SUMS\n+    if [[ \"$(comm -23 <(sort \"$compare_noncodesigned\") <(sort \"$compare_all\") | wc -c)\" -ne 0 ]]; then\n+        echo \"ERR: There are unique lines in noncodesigned.SHA256SUMS which\"\n+        echo \"     do not exist in all.SHA256SUMS, something went very wrong.\"\n+        exit 1\n+    fi\n+\n+    echo \"DONE: Checking output signatures for all.SHA256SUMS\"\n     echo \"\"\n+else\n+    echo \"WARN: No signature directories with all.SHA256SUMS found\"\n+    echo \"\"\n+fi\n+\n+echo \"====================\"\n+echo \"\"\n+if (( ${#all_noncodesigned[@]} + ${#all_all[@]} == 0 )); then\n+    echo \"ERR: Unable to perform any verifications as no signature directories\"\n+    echo \"     were found\"\n     echo \"\"\n-done\n+    exit 1\n+fi"
      },
      {
        "sha": "bc3391e0896e223aba28b5534cf8452c9b2e9e66",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 31,
        "deletions": 19,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -178,7 +178,6 @@ case \"$HOST\" in\n esac\n \n # Environment variables for determinism\n-export QT_RCC_SOURCE_DATE_OVERRIDE=1\n export TAR_OPTIONS=\"--owner=0 --group=0 --numeric-owner --mtime='@${SOURCE_DATE_EPOCH}' --sort=name\"\n export TZ=\"UTC\"\n case \"$HOST\" in\n@@ -215,6 +214,7 @@ make -C depends --jobs=\"$JOBS\" HOST=\"$HOST\" \\\n                                    x86_64_linux_NM=x86_64-linux-gnu-nm \\\n                                    x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n                                    qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n+                                   qt_config_opts_x86_64_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n                                    FORCE_USE_SYSTEM_CLANG=1\n \n \n@@ -231,20 +231,7 @@ if [ ! -e \"$GIT_ARCHIVE\" ]; then\n     git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n fi\n \n-# tmpdir=\"$(mktemp -d)\"\n-# (\n-#     cd \"$tmpdir\"\n-#     mkdir -p inputs\n-#     ln -sf --target-directory=inputs \"$GIT_ARCHIVE\"\n-\n-#     mkdir -p \"$OUTDIR\"\n-#     find -L inputs -type f -print0 | xargs -0 sha256sum > \"${OUTDIR}/inputs.SHA256SUMS\"\n-# )\n-\n mkdir -p \"$OUTDIR\"\n-cat << EOF > \"$OUTDIR\"/inputs.SHA256SUMS\n-$(sha256sum \"$GIT_ARCHIVE\" | cut -d' ' -f1)  inputs/$(basename \"$GIT_ARCHIVE\")\n-EOF\n \n ###########################\n # Binary Tarball Building #\n@@ -253,7 +240,7 @@ EOF\n # CONFIGFLAGS\n CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n case \"$HOST\" in\n-    *linux*) CONFIGFLAGS+=\" --enable-glibc-back-compat\" ;;\n+    *linux*) CONFIGFLAGS+=\" --disable-threadlocal\" ;;\n esac\n \n # CFLAGS\n@@ -267,12 +254,23 @@ esac\n # CXXFLAGS\n HOST_CXXFLAGS=\"$HOST_CFLAGS\"\n \n+case \"$HOST\" in\n+    arm-linux-gnueabihf) HOST_CXXFLAGS=\"${HOST_CXXFLAGS} -Wno-psabi\" ;;\n+esac\n+\n # LDFLAGS\n case \"$HOST\" in\n     *linux*)  HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++ -Wl,-O2\" ;;\n     *mingw*)  HOST_LDFLAGS=\"-Wl,--no-insert-timestamp\" ;;\n esac\n \n+# Using --no-tls-get-addr-optimize retains compatibility with glibc 2.17, by\n+# avoiding a PowerPC64 optimisation available in glibc 2.22 and later.\n+# https://sourceware.org/binutils/docs-2.35/ld/PowerPC64-ELF64.html\n+case \"$HOST\" in\n+    *powerpc64*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,--no-tls-get-addr-optimize\" ;;\n+esac\n+\n case \"$HOST\" in\n     powerpc64-linux-*|riscv64-linux-*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,-z,noexecstack\" ;;\n esac\n@@ -305,10 +303,11 @@ mkdir -p \"$DISTSRC\"\n     # Build Bitcoin Core\n     make --jobs=\"$JOBS\" ${V:+V=1}\n \n-    # Perform basic ELF security checks on a series of executables.\n+    # Check that symbol/security checks tools are sane.\n+    make test-security-check ${V:+V=1}\n+    # Perform basic security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n-    # Check that executables only contain allowed gcc, glibc and libstdc++\n-    # version symbols for Linux distro back-compatibility.\n+    # Check that executables only contain allowed version symbols.\n     make -C src --jobs=1 check-symbols  ${V:+V=1}\n \n     mkdir -p \"$OUTDIR\"\n@@ -448,4 +447,17 @@ mkdir -p \"$DISTSRC\"\n     esac\n )  # $DISTSRC\n \n-mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\"\n+rm -rf \"$ACTUAL_OUTDIR\"\n+mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n+    || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n+\n+(\n+    cd /outdir-base\n+    {\n+        echo \"$GIT_ARCHIVE\"\n+        find \"$ACTUAL_OUTDIR\" -type f\n+    } | xargs realpath --relative-base=\"$PWD\" \\\n+      | xargs sha256sum \\\n+      | sort -k2 \\\n+      | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n+)"
      },
      {
        "sha": "f484ac5774c7e9a29f8b8884863559f27692e19a",
        "filename": "contrib/guix/libexec/codesign.sh",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/libexec/codesign.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/libexec/codesign.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/codesign.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -55,10 +55,6 @@ if [ ! -e \"$CODESIGNATURE_GIT_ARCHIVE\" ]; then\n fi\n \n mkdir -p \"$OUTDIR\"\n-cat << EOF > \"$OUTDIR\"/inputs.SHA256SUMS\n-$(sha256sum \"$UNSIGNED_TARBALL\" | cut -d' ' -f1)  inputs/$(basename \"$UNSIGNED_TARBALL\")\n-$(sha256sum \"$CODESIGNATURE_GIT_ARCHIVE\" | cut -d' ' -f1)  inputs/$(basename \"$CODESIGNATURE_GIT_ARCHIVE\")\n-EOF\n \n mkdir -p \"$DISTSRC\"\n (\n@@ -100,4 +96,18 @@ mkdir -p \"$DISTSRC\"\n     esac\n )  # $DISTSRC\n \n-mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\"\n+rm -rf \"$ACTUAL_OUTDIR\"\n+mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n+    || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n+\n+(\n+    cd /outdir-base\n+    {\n+        echo \"$UNSIGNED_TARBALL\"\n+        echo \"$CODESIGNATURE_GIT_ARCHIVE\"\n+        find \"$ACTUAL_OUTDIR\" -type f\n+    } | xargs realpath --relative-base=\"$PWD\" \\\n+        | xargs sha256sum \\\n+        | sort -k2 \\\n+        | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n+)"
      },
      {
        "sha": "e71cf525332d7a3d6c330a13c1b2878178beaa0f",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 53,
        "deletions": 8,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -22,6 +22,7 @@\n              (gnu packages linux)\n              (gnu packages llvm)\n              (gnu packages mingw)\n+             (gnu packages moreutils)\n              (gnu packages perl)\n              (gnu packages pkg-config)\n              (gnu packages python)\n@@ -79,6 +80,10 @@ http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n                  ((\"-rpath=\") \"-rpath-link=\"))\n                #t))))))))\n \n+(define (make-binutils-with-mingw-w64-disable-flags xbinutils)\n+  (package-with-extra-patches xbinutils\n+    (search-our-patches \"binutils-mingw-w64-disable-flags.patch\")))\n+\n (define (make-cross-toolchain target\n                               base-gcc-for-libc\n                               base-kernel-headers\n@@ -134,11 +139,25 @@ chain for \" target \" development.\"))\n   (package-with-extra-patches gcc-8\n     (search-our-patches \"gcc-8-sort-libtool-find-output.patch\")))\n \n+;; Building glibc with stack smashing protector first landed in glibc 2.25, use\n+;; this function to disable for older glibcs\n+;;\n+;; From glibc 2.25 changelog:\n+;;\n+;;   * Most of glibc can now be built with the stack smashing protector enabled.\n+;;     It is recommended to build glibc with --enable-stack-protector=strong.\n+;;     Implemented by Nick Alcock (Oracle).\n+(define (make-glibc-without-ssp xglibc)\n+  (package-with-extra-configure-variable\n+   (package-with-extra-configure-variable\n+    xglibc \"libc_cv_ssp\" \"no\")\n+   \"libc_cv_ssp_strong\" \"no\"))\n+\n (define* (make-bitcoin-cross-toolchain target\n                                        #:key\n                                        (base-gcc-for-libc gcc-7)\n                                        (base-kernel-headers linux-libre-headers-5.4)\n-                                       (base-libc glibc)  ; glibc 2.31\n+                                       (base-libc (make-glibc-without-ssp glibc-2.24))\n                                        (base-gcc (make-gcc-rpath-link base-gcc)))\n   \"Convenience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n desirable for building Bitcoin Core release binaries.\"\n@@ -153,7 +172,7 @@ desirable for building Bitcoin Core release binaries.\"\n \n (define (make-mingw-pthreads-cross-toolchain target)\n   \"Create a cross-compilation toolchain package for TARGET\"\n-  (let* ((xbinutils (cross-binutils target))\n+  (let* ((xbinutils (make-binutils-with-mingw-w64-disable-flags (cross-binutils target)))\n          (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n          (pthreads-xgcc (make-gcc-with-pthreads\n                          (cross-gcc target\n@@ -205,7 +224,7 @@ chain for \" target \" development.\"))\n (define-public lief\n   (package\n    (name \"python-lief\")\n-   (version \"0.11.4\")\n+   (version \"0.11.5\")\n    (source\n     (origin\n      (method git-fetch)\n@@ -215,7 +234,7 @@ chain for \" target \" development.\"))\n      (file-name (git-file-name name version))\n      (sha256\n       (base32\n-       \"0h4kcwr9z478almjqhmils8imfpflzk0r7d05g4xbkdyknn162qf\"))))\n+       \"0qahjfg1n0x76ps2mbyljvws1l3qhkqvmxqbahps4qgywl2hbdkj\"))))\n    (build-system python-build-system)\n    (native-inputs\n     `((\"cmake\" ,cmake)))\n@@ -524,20 +543,20 @@ and endian independent.\")\n     (license license:expat)))\n \n (define-public python-signapple\n-  (let ((commit \"4ff1c1754e37042c002a3f6375c47fd931f2030b\"))\n+  (let ((commit \"b084cbbf44d5330448ffce0c7d118f75781b64bd\"))\n     (package\n       (name \"python-signapple\")\n       (version (git-version \"0.1\" \"1\" commit))\n       (source\n        (origin\n          (method git-fetch)\n          (uri (git-reference\n-               (url \"https://github.com/dongcarl/signapple\")\n+               (url \"https://github.com/achow101/signapple\")\n                (commit commit)))\n          (file-name (git-file-name name commit))\n          (sha256\n           (base32\n-           \"043czyzfm04rcx5xsp59vsppla3vm5g45dbp1npy2hww4066rlnh\"))))\n+           \"0k7inccl2mzac3wq4asbr0kl8s4cghm8982z54kfascqg45shv01\"))))\n       (build-system python-build-system)\n       (propagated-inputs\n        `((\"python-asn1crypto\" ,python-asn1crypto)\n@@ -556,6 +575,28 @@ and endian independent.\")\n inspecting signatures in Mach-O binaries.\")\n       (license license:expat))))\n \n+(define-public glibc-2.24\n+  (package\n+    (inherit glibc)\n+    (version \"2.24\")\n+    (source (origin\n+              (method git-fetch)\n+              (uri (git-reference\n+                    (url \"https://sourceware.org/git/glibc.git\")\n+                    (commit \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\")))\n+              (file-name (git-file-name \"glibc\" \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\"))\n+              (sha256\n+               (base32\n+                \"0g5hryia5v1k0qx97qffgwzrz4lr4jw3s5kj04yllhswsxyjbic3\"))\n+              (patches (search-our-patches \"glibc-ldd-x86_64.patch\"\n+                                           \"glibc-versioned-locpath.patch\"\n+                                           \"glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch\"\n+                                           \"glibc-2.24-no-build-time-cxx-header-run.patch\"))))))\n+\n+(define glibc-2.27/bitcoin-patched\n+  (package-with-extra-patches glibc-2.27\n+    (search-our-patches \"glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch\")))\n+\n (packages->manifest\n  (append\n   (list ;; The Basics\n@@ -572,6 +613,7 @@ inspecting signatures in Mach-O binaries.\")\n         patch\n         gawk\n         sed\n+        moreutils\n         ;; Compression and archiving\n         tar\n         bzip2\n@@ -604,7 +646,10 @@ inspecting signatures in Mach-O binaries.\")\n                  (make-nsis-with-sde-support nsis-x86_64)\n                  osslsigncode))\n           ((string-contains target \"-linux-\")\n-           (list (make-bitcoin-cross-toolchain target)))\n+           (list (cond ((string-contains target \"riscv64-\")\n+                        (make-bitcoin-cross-toolchain target #:base-libc glibc-2.27/bitcoin-patched))\n+                       (else\n+                        (make-bitcoin-cross-toolchain target)))))\n           ((string-contains target \"darwin\")\n            (list clang-toolchain-10 binutils imagemagick libtiff librsvg font-tuffy cmake xorriso python-signapple))\n           (else '())))))"
      },
      {
        "sha": "8f88eb9dfd5926e6ef83066ccb8ca51a12a5e980",
        "filename": "contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,171 @@\n+Description: Add disable opposites to the security-related flags\n+Author: Stephen Kitt <skitt@debian.org>\n+\n+This patch adds \"no-\" variants to disable the various security flags:\n+\"no-dynamicbase\", \"no-nxcompat\", \"no-high-entropy-va\", \"disable-reloc-section\".\n+\n+--- a/ld/emultempl/pe.em\n++++ b/ld/emultempl/pe.em\n+@@ -259,9 +261,11 @@\n+ \t\t\t\t\t(OPTION_ENABLE_LONG_SECTION_NAMES + 1)\n+ /* DLLCharacteristics flags.  */\n+ #define OPTION_DYNAMIC_BASE\t\t(OPTION_DISABLE_LONG_SECTION_NAMES + 1)\n+-#define OPTION_FORCE_INTEGRITY\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_NO_DYNAMIC_BASE\t\t(OPTION_DYNAMIC_BASE + 1)\n++#define OPTION_FORCE_INTEGRITY\t\t(OPTION_NO_DYNAMIC_BASE + 1)\n+ #define OPTION_NX_COMPAT\t\t(OPTION_FORCE_INTEGRITY + 1)\n+-#define OPTION_NO_ISOLATION\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_NX_COMPAT\t\t(OPTION_NX_COMPAT + 1)\n++#define OPTION_NO_ISOLATION\t\t(OPTION_NO_NX_COMPAT + 1)\n+ #define OPTION_NO_SEH\t\t\t(OPTION_NO_ISOLATION + 1)\n+ #define OPTION_NO_BIND\t\t\t(OPTION_NO_SEH + 1)\n+ #define OPTION_WDM_DRIVER\t\t(OPTION_NO_BIND + 1)\n+@@ -271,6 +275,7 @@\n+ #define OPTION_NO_INSERT_TIMESTAMP\t(OPTION_INSERT_TIMESTAMP + 1)\n+ #define OPTION_BUILD_ID\t\t\t(OPTION_NO_INSERT_TIMESTAMP + 1)\n+ #define OPTION_ENABLE_RELOC_SECTION\t(OPTION_BUILD_ID + 1)\n++#define OPTION_DISABLE_RELOC_SECTION\t(OPTION_ENABLE_RELOC_SECTION + 1)\n+ \n+ static void\n+ gld${EMULATION_NAME}_add_options\n+@@ -342,8 +347,10 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -351,6 +358,7 @@\n+     {\"tsaware\", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -485,9 +494,12 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH. No SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -862,12 +874,21 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pe_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pe_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;\n+--- a/ld/emultempl/pep.em\n++++ b/ld/emultempl/pep.em\n+@@ -237,9 +240,12 @@\n+   OPTION_ENABLE_LONG_SECTION_NAMES,\n+   OPTION_DISABLE_LONG_SECTION_NAMES,\n+   OPTION_HIGH_ENTROPY_VA,\n++  OPTION_NO_HIGH_ENTROPY_VA,\n+   OPTION_DYNAMIC_BASE,\n++  OPTION_NO_DYNAMIC_BASE,\n+   OPTION_FORCE_INTEGRITY,\n+   OPTION_NX_COMPAT,\n++  OPTION_NO_NX_COMPAT,\n+   OPTION_NO_ISOLATION,\n+   OPTION_NO_SEH,\n+   OPTION_NO_BIND,\n+@@ -248,7 +254,8 @@\n+   OPTION_NO_INSERT_TIMESTAMP,\n+   OPTION_TERMINAL_SERVER_AWARE,\n+   OPTION_BUILD_ID,\n+-  OPTION_ENABLE_RELOC_SECTION\n++  OPTION_ENABLE_RELOC_SECTION,\n++  OPTION_DISABLE_RELOC_SECTION\n+ };\n+ \n+ static void\n+@@ -315,9 +322,12 @@\n+     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n+     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n+     {\"high-entropy-va\", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},\n++    {\"no-high-entropy-va\", no_argument, NULL, OPTION_NO_HIGH_ENTROPY_VA},\n+     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n++    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n+     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n+     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n++    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n+     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n+     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n+     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n+@@ -327,6 +337,7 @@\n+     {\"no-insert-timestamp\", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},\n+     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n+     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n++    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n+     {NULL, no_argument, NULL, 0}\n+   };\n+ \n+@@ -448,11 +461,15 @@\n+                                        in object files\\n\"));\n+   fprintf (file, _(\"  --high-entropy-va                  Image is compatible with 64-bit address space\\n\\\n+                                        layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-high-entropy-va               Image is not compatible with 64-bit ASLR\\n\"));\n+   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n+                                        address space layout randomization (ASLR)\\n\"));\n++  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n+   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n++  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n+   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n+   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n++  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n+   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n+   fprintf (file, _(\"  --no-seh                   Image does not use SEH; no SE handler may\\n\\\n+                                        be called in this image\\n\"));\n+@@ -809,12 +826,24 @@\n+     case OPTION_ENABLE_RELOC_SECTION:\n+       pep_dll_enable_reloc_section = 1;\n+       break;\n++    case OPTION_DISABLE_RELOC_SECTION:\n++      pep_dll_enable_reloc_section = 0;\n++      /* fall through */\n++    case OPTION_NO_DYNAMIC_BASE:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n++      /* fall through */\n++    case OPTION_NO_HIGH_ENTROPY_VA:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;\n++      break;\n+     case OPTION_FORCE_INTEGRITY:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n+       break;\n+     case OPTION_NX_COMPAT:\n+       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n+       break;\n++    case OPTION_NO_NX_COMPAT:\n++      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n++      break;\n+     case OPTION_NO_ISOLATION:\n+       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n+       break;"
      },
      {
        "sha": "f327c464f3ec3ca38140300e7e099bbe20afd6d3",
        "filename": "contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,3 +1,11 @@\n+guix: repro: Sort find output in libtool for gcc-8\n+\n+Otherwise the resulting .a static libraries (e.g. libstdc++.a) will not\n+be reproducible and end up making the Bitcoin binaries non-reproducible\n+as well.\n+\n+See: https://reproducible-builds.org/docs/archives/#gnu-libtool\n+\n diff --git a/gcc/configure b/gcc/configure\n index 97ba7d7d69c..e37a96f0c0c 100755\n --- a/gcc/configure"
      },
      {
        "sha": "5c4d0c6ebe19699444a222e7fc0ec8bdd175ea3a",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,62 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=a68ba2f3cd3cbe32c1f31e13c20ed13487727b32\n+\n+commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n+Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n+Date:   Wed Oct 18 17:26:23 2017 +0100\n+\n+    [AARCH64] Rewrite elf_machine_load_address using _DYNAMIC symbol\n+    \n+    This patch rewrites aarch64 elf_machine_load_address to use special _DYNAMIC\n+    symbol instead of _dl_start.\n+    \n+    The static address of _DYNAMIC symbol is stored in the first GOT entry.\n+    Here is the change which makes this solution work (part of binutils 2.24):\n+    https://sourceware.org/ml/binutils/2013-06/msg00248.html\n+    \n+    i386, x86_64 targets use the same method to do this as well.\n+    \n+    The original implementation relies on a trick that R_AARCH64_ABS32 relocation\n+    being resolved at link time and the static address fits in the 32bits.\n+    However, in LP64, normally, the address is defined to be 64 bit.\n+    \n+    Here is the C version one which should be portable in all cases.\n+    \n+            * sysdeps/aarch64/dl-machine.h (elf_machine_load_address): Use\n+            _DYNAMIC symbol to calculate load address.\n+\n+diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h\n+index e86d8b5b63..5a5b8a5de5 100644\n+--- a/sysdeps/aarch64/dl-machine.h\n++++ b/sysdeps/aarch64/dl-machine.h\n+@@ -49,26 +49,11 @@ elf_machine_load_address (void)\n+   /* To figure out the load address we use the definition that for any symbol:\n+      dynamic_addr(symbol) = static_addr(symbol) + load_addr\n+ \n+-     The choice of symbol is arbitrary. The static address we obtain\n+-     by constructing a non GOT reference to the symbol, the dynamic\n+-     address of the symbol we compute using adrp/add to compute the\n+-     symbol's address relative to the PC.\n+-     This depends on 32bit relocations being resolved at link time\n+-     and that the static address fits in the 32bits.  */\n+-\n+-  ElfW(Addr) static_addr;\n+-  ElfW(Addr) dynamic_addr;\n+-\n+-  asm (\"\t\t\t\t\t\\n\"\n+-\"\tadrp\t%1, _dl_start;\t\t\t\\n\"\n+-\"\tadd\t%1, %1, #:lo12:_dl_start\t\\n\"\n+-\"\tldr\t%w0, 1f\t\t\t\t\\n\"\n+-\"\tb\t2f\t\t\t\t\\n\"\n+-\"1:\t\t\t\t\t\t\\n\"\n+-\"\t.word\t_dl_start\t\t\t\\n\"\n+-\"2:\t\t\t\t\t\t\\n\"\n+-    : \"=r\" (static_addr),  \"=r\" (dynamic_addr));\n+-  return dynamic_addr - static_addr;\n++    _DYNAMIC sysmbol is used here as its link-time address stored in\n++    the special unrelocated first GOT entry.  */\n++\n++    extern ElfW(Dyn) _DYNAMIC[] attribute_hidden;\n++    return (ElfW(Addr)) &_DYNAMIC - elf_machine_dynamic ();\n+ }\n+ \n+ /* Set up the loaded object described by L so its unrelocated PLT"
      },
      {
        "sha": "11fe7fdc99c05c89c01ca7d2278be2d17f109aef",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,100 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=fc3e1337be1c6935ab58bd13520f97a535cf70cc\n+\n+commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n+Author: Florian Weimer <fweimer@redhat.com>\n+Date:   Wed Sep 21 10:45:32 2016 +0200\n+\n+    Avoid running $(CXX) during build to obtain header file paths\n+    \n+    This reduces the build time somewhat and is particularly noticeable\n+    during rebuilds with few code changes.\n+\n+diff --git a/Makerules b/Makerules\n+index 7e4077ee50..c338850de5 100644\n+--- a/Makerules\n++++ b/Makerules\n+@@ -121,14 +121,10 @@ ifneq (,$(CXX))\n+ # will be used instead of /usr/include/stdlib.h and /usr/include/math.h.\n+ before-compile := $(common-objpfx)cstdlib $(common-objpfx)cmath \\\n+ \t          $(before-compile)\n+-cstdlib=$(shell echo \"\\#include <cstdlib>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cstdlib:/{s/:$$//;p}\")\n+-$(common-objpfx)cstdlib: $(cstdlib)\n++$(common-objpfx)cstdlib: $(c++-cstdlib-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+-cmath=$(shell echo \"\\#include <cmath>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cmath:/{s/:$$//;p}\")\n+-$(common-objpfx)cmath: $(cmath)\n++$(common-objpfx)cmath: $(c++-cmath-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+ endif\n+diff --git a/config.make.in b/config.make.in\n+index 95c6f36876..04a8b3ed7f 100644\n+--- a/config.make.in\n++++ b/config.make.in\n+@@ -45,6 +45,8 @@ defines = @DEFINES@\n+ sysheaders = @sysheaders@\n+ sysincludes = @SYSINCLUDES@\n+ c++-sysincludes = @CXX_SYSINCLUDES@\n++c++-cstdlib-header = @CXX_CSTDLIB_HEADER@\n++c++-cmath-header = @CXX_CMATH_HEADER@\n+ all-warnings = @all_warnings@\n+ enable-werror = @enable_werror@\n+ \n+diff --git a/configure b/configure\n+index 17625e1041..6ff252744b 100755\n+--- a/configure\n++++ b/configure\n+@@ -635,6 +635,8 @@ BISON\n+ INSTALL_INFO\n+ PERL\n+ BASH_SHELL\n++CXX_CMATH_HEADER\n++CXX_CSTDLIB_HEADER\n+ CXX_SYSINCLUDES\n+ SYSINCLUDES\n+ AUTOCONF\n+@@ -5054,6 +5056,18 @@ fi\n+ \n+ \n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++\n++\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following\n+diff --git a/configure.ac b/configure.ac\n+index 33bcd62180..9938ab0dc2 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -1039,6 +1039,18 @@ fi\n+ AC_SUBST(SYSINCLUDES)\n+ AC_SUBST(CXX_SYSINCLUDES)\n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++AC_SUBST(CXX_CSTDLIB_HEADER)\n++AC_SUBST(CXX_CMATH_HEADER)\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following"
      },
      {
        "sha": "d6217157ee57e9b67af70db0fe22964caa34afb4",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,72 @@\n+https://sourceware.org/git/?p=glibc.git;a=commit;h=0b9c84906f653978fb8768c7ebd0ee14a47e662e\n+\n+From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n+From: \"H.J. Lu\" <hjl.tools@gmail.com>\n+Date: Mon, 31 Dec 2018 09:26:42 -0800\n+Subject: [PATCH] riscv: Use __has_include__ to include <asm/syscalls.h> [BZ\n+ #24022]\n+\n+<asm/syscalls.h> has been removed by\n+\n+commit 27f8899d6002e11a6e2d995e29b8deab5aa9cc25\n+Author: David Abdurachmanov <david.abdurachmanov@gmail.com>\n+Date:   Thu Nov 8 20:02:39 2018 +0100\n+\n+    riscv: add asm/unistd.h UAPI header\n+\n+    Marcin Juszkiewicz reported issues while generating syscall table for riscv\n+    using 4.20-rc1. The patch refactors our unistd.h files to match some other\n+    architectures.\n+\n+    - Add asm/unistd.h UAPI header, which has __ARCH_WANT_NEW_STAT only for 64-bit\n+    - Remove asm/syscalls.h UAPI header and merge to asm/unistd.h\n+    - Adjust kernel asm/unistd.h\n+\n+    So now asm/unistd.h UAPI header should show all syscalls for riscv.\n+\n+<asm/syscalls.h> may be restored by\n+\n+Subject: [PATCH] riscv: restore asm/syscalls.h UAPI header\n+Date: Tue, 11 Dec 2018 09:09:35 +0100\n+\n+UAPI header asm/syscalls.h was merged into UAPI asm/unistd.h header,\n+which did resolve issue with missing syscalls macros resulting in\n+glibc (2.28) build failure. It also broke glibc in a different way:\n+asm/syscalls.h is being used by glibc. I noticed this while doing\n+Fedora 30/Rawhide mass rebuild.\n+\n+The patch returns asm/syscalls.h header and incl. it into asm/unistd.h.\n+I plan to send a patch to glibc to use asm/unistd.h instead of\n+asm/syscalls.h\n+\n+In the meantime, we use __has_include__, which was added to GCC 5, to\n+check if <asm/syscalls.h> exists before including it.  Tested with\n+build-many-glibcs.py for riscv against kernel 4.19.12 and 4.20-rc7.\n+\n+\t[BZ #24022]\n+\t* sysdeps/unix/sysv/linux/riscv/flush-icache.c: Check if\n+\t<asm/syscalls.h> exists with __has_include__ before including it.\n+---\n+ sysdeps/unix/sysv/linux/riscv/flush-icache.c | 6 +++++-\n+ 1 file changed, 5 insertions(+), 1 deletion(-)\n+\n+diff --git a/sysdeps/unix/sysv/linux/riscv/flush-icache.c b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+index d612ef4c6c..0b2042620b 100644\n+--- a/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n++++ b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+@@ -21,7 +21,11 @@\n+ #include <stdlib.h>\n+ #include <atomic.h>\n+ #include <sys/cachectl.h>\n+-#include <asm/syscalls.h>\n++#if __has_include__ (<asm/syscalls.h>)\n++# include <asm/syscalls.h>\n++#else\n++# include <asm/unistd.h>\n++#endif\n+ \n+ typedef int (*func_type) (void *, void *, unsigned long int);\n+ \n+-- \n+2.31.1\n+"
      },
      {
        "sha": "b1b6d5a54863cbcb6a2d92e3bdb9127defbb4d99",
        "filename": "contrib/guix/patches/glibc-ldd-x86_64.patch",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-ldd-x86_64.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,10 @@\n+By default, 'RTDLLIST' in 'ldd' refers to 'lib64/ld-linux-x86-64.so', whereas\n+it's in 'lib/' for us.  This patch fixes that.\n+\n+--- glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2012-12-25 04:02:13.000000000 +0100\n++++ glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2013-09-15 23:08:03.000000000 +0200\n+@@ -1,3 +1,3 @@\n+ /LD_TRACE_LOADED_OBJECTS=1/a\\\n+ add_env=\"$add_env LD_LIBRARY_VERSION=\\\\$verify_out\"\n+-s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\264\\4-x86-64\\6 \\2x32\\4-x32\\6\"_\n++s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\2\\4-x86-64\\6 \\2x32\\4-x32\\6\"_"
      },
      {
        "sha": "bc7652127fa5a2aca5e7cea1793b5679ac17aa06",
        "filename": "contrib/guix/patches/glibc-versioned-locpath.patch",
        "status": "added",
        "additions": 240,
        "deletions": 0,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-versioned-locpath.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/glibc-versioned-locpath.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-versioned-locpath.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,240 @@\n+The format of locale data can be incompatible between libc versions, and\n+loading incompatible data can lead to 'setlocale' returning EINVAL at best\n+or triggering an assertion failure at worst.  See\n+https://lists.gnu.org/archive/html/guix-devel/2015-09/msg00717.html\n+for background information.\n+\n+To address that, this patch changes libc to honor a new 'GUIX_LOCPATH'\n+variable, and to look for locale data in version-specific sub-directories of\n+that variable.  So, if GUIX_LOCPATH=/foo:/bar, locale data is searched for in\n+/foo/X.Y and /bar/X.Y, where X.Y is the libc version number.\n+\n+That way, a single 'GUIX_LOCPATH' setting can work even if different libc\n+versions coexist on the system.\n+\n+--- a/locale/newlocale.c\n++++ b/locale/newlocale.c\n+@@ -30,6 +30,7 @@\n+ /* Lock for protecting global data.  */\n+ __libc_rwlock_define (extern , __libc_setlocale_lock attribute_hidden)\n+ \n++extern error_t compute_locale_search_path (char **, size_t *);\n+ \n+ /* Use this when we come along an error.  */\n+ #define ERROR_RETURN\t\t\t\t\t\t\t      \\\n+@@ -48,7 +49,6 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   __locale_t result_ptr;\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   int cnt;\n+   size_t names_len;\n+ \n+@@ -102,17 +102,8 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n+-    {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0)\n+-\treturn NULL;\n+-\n+-      if (__argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t  _nl_default_locale_path, ':') != 0)\n+-\treturn NULL;\n+-    }\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n++    return NULL;\n+ \n+   /* Get the names for the locales we are interested in.  We either\n+      allow a composite name or a single name.  */\n+diff --git a/locale/setlocale.c b/locale/setlocale.c\n+index ead030d..0c0e314 100644\n+--- a/locale/setlocale.c\n++++ b/locale/setlocale.c\n+@@ -215,12 +215,65 @@ setdata (int category, struct __locale_data *data)\n+     }\n+ }\n+ \n++/* Return in *LOCALE_PATH and *LOCALE_PATH_LEN the locale data search path as\n++   a colon-separated list.  Return ENOMEN on error, zero otherwise.  */\n++error_t\n++compute_locale_search_path (char **locale_path, size_t *locale_path_len)\n++{\n++  char* guix_locpath_var = getenv (\"GUIX_LOCPATH\");\n++  char *locpath_var = getenv (\"LOCPATH\");\n++\n++  if (guix_locpath_var != NULL && guix_locpath_var[0] != '\\0')\n++    {\n++      /* Entries in 'GUIX_LOCPATH' take precedence over 'LOCPATH'.  These\n++\t entries are systematically prefixed with \"/X.Y\" where \"X.Y\" is the\n++\t libc version.  */\n++      if (__argz_create_sep (guix_locpath_var, ':',\n++\t\t\t     locale_path, locale_path_len) != 0\n++\t  || __argz_suffix_entries (locale_path, locale_path_len,\n++\t\t\t\t    \"/\" VERSION) != 0)\n++\tgoto bail_out;\n++    }\n++\n++  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++    {\n++      char *reg_locale_path = NULL;\n++      size_t reg_locale_path_len = 0;\n++\n++      if (__argz_create_sep (locpath_var, ':',\n++\t\t\t     &reg_locale_path, &reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      if (__argz_append (locale_path, locale_path_len,\n++\t\t\t reg_locale_path, reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      free (reg_locale_path);\n++    }\n++\n++  if (*locale_path != NULL)\n++    {\n++      /* Append the system default locale directory.  */\n++      if (__argz_add_sep (locale_path, locale_path_len,\n++\t\t\t  _nl_default_locale_path, ':') != 0)\n++\tgoto bail_out;\n++    }\n++\n++  return 0;\n++\n++ bail_out:\n++  free (*locale_path);\n++  *locale_path = NULL;\n++  *locale_path_len = 0;\n++\n++  return ENOMEM;\n++}\n++\n+ char *\n+ setlocale (int category, const char *locale)\n+ {\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   char *composite;\n+ \n+   /* Sanity check for CATEGORY argument.  */\n+@@ -251,17 +304,10 @@ setlocale (int category, const char *locale)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n+     {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0\n+-\t  || __argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t     _nl_default_locale_path, ':') != 0)\n+-\t{\n+-\t  __libc_rwlock_unlock (__libc_setlocale_lock);\n+-\t  return NULL;\n+-\t}\n++      __libc_rwlock_unlock (__libc_setlocale_lock);\n++      return NULL;\n+     }\n+ \n+   if (category == LC_ALL)\n+diff --git a/string/Makefile b/string/Makefile\n+index 8424a61..f925503 100644\n+--- a/string/Makefile\n++++ b/string/Makefile\n+@@ -38,7 +38,7 @@ routines\t:= strcat strchr strcmp strcoll strcpy strcspn\t\t\\\n+ \t\t   swab strfry memfrob memmem rawmemchr strchrnul\t\\\n+ \t\t   $(addprefix argz-,append count create ctsep next\t\\\n+ \t\t\t\t     delete extract insert stringify\t\\\n+-\t\t\t\t     addsep replace)\t\t\t\\\n++\t\t\t\t     addsep replace suffix)\t\t\\\n+ \t\t   envz basename\t\t\t\t\t\\\n+ \t\t   strcoll_l strxfrm_l string-inlines memrchr\t\t\\\n+ \t\t   xpg-strerror strerror_l\n+diff --git a/string/argz-suffix.c b/string/argz-suffix.c\n+new file mode 100644\n+index 0000000..505b0f2\n+--- /dev/null\n++++ b/string/argz-suffix.c\n+@@ -0,0 +1,56 @@\n++/* Copyright (C) 2015 Free Software Foundation, Inc.\n++   This file is part of the GNU C Library.\n++   Contributed by Ludovic Court\u00e8s <ludo@gnu.org>.\n++\n++   The GNU C Library is free software; you can redistribute it and/or\n++   modify it under the terms of the GNU Lesser General Public\n++   License as published by the Free Software Foundation; either\n++   version 2.1 of the License, or (at your option) any later version.\n++\n++   The GNU C Library is distributed in the hope that it will be useful,\n++   but WITHOUT ANY WARRANTY; without even the implied warranty of\n++   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n++   Lesser General Public License for more details.\n++\n++   You should have received a copy of the GNU Lesser General Public\n++   License along with the GNU C Library; if not, see\n++   <http://www.gnu.org/licenses/>.  */\n++\n++#include <argz.h>\n++#include <errno.h>\n++#include <stdlib.h>\n++#include <string.h>\n++\n++\n++error_t\n++__argz_suffix_entries (char **argz, size_t *argz_len, const char *suffix)\n++\n++{\n++  size_t suffix_len = strlen (suffix);\n++  size_t count = __argz_count (*argz, *argz_len);\n++  size_t new_argz_len = *argz_len + count * suffix_len;\n++  char *new_argz = malloc (new_argz_len);\n++\n++  if (new_argz)\n++    {\n++      char *p = new_argz, *entry;\n++\n++      for (entry = *argz;\n++\t   entry != NULL;\n++\t   entry = argz_next (*argz, *argz_len, entry))\n++\t{\n++\t  p = stpcpy (p, entry);\n++\t  p = stpcpy (p, suffix);\n++\t  p++;\n++\t}\n++\n++      free (*argz);\n++      *argz = new_argz;\n++      *argz_len = new_argz_len;\n++\n++      return 0;\n++    }\n++  else\n++    return ENOMEM;\n++}\n++weak_alias (__argz_suffix_entries, argz_suffix_entries)\n+diff --git a/string/argz.h b/string/argz.h\n+index bb62a31..d276a35 100644\n+--- a/string/argz.h\n++++ b/string/argz.h\n+@@ -134,6 +134,16 @@ extern error_t argz_replace (char **__restrict __argz,\n+ \t\t\t     const char *__restrict __str,\n+ \t\t\t     const char *__restrict __with,\n+ \t\t\t     unsigned int *__restrict __replace_count);\n++\n++/* Suffix each entry of ARGZ & ARGZ_LEN with SUFFIX.  Return 0 on success,\n++   and ENOMEN if memory cannot be allocated.  */\n++extern error_t __argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t      size_t *__restrict __argz_len,\n++\t\t\t\t      const char *__restrict __suffix);\n++extern error_t argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t    size_t *__restrict __argz_len,\n++\t\t\t\t    const char *__restrict __suffix);\n++\n+ \f\n+ /* Returns the next entry in ARGZ & ARGZ_LEN after ENTRY, or NULL if there\n+    are no more.  If entry is NULL, then the first entry is returned.  This"
      },
      {
        "sha": "f58406a7a08901a413dec1223f1f881e04de956d",
        "filename": "contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/nsis-SConstruct-sde-support.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,3 +1,6 @@\n+https://github.com/kichik/nsis/pull/13\n+https://sourceforge.net/p/nsis/code/7248/\n+\n diff --git a/SConstruct b/SConstruct\n index e8252c9..41786f2 100755\n --- a/SConstruct"
      },
      {
        "sha": "dbecba7d1db77154a2225306ca60cf2244a7bd50",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -37,7 +37,7 @@\n class BIP155Network(Enum):\n     IPV4 = 1\n     IPV6 = 2\n-    TORV2 = 3\n+    TORV2 = 3  # no longer supported\n     TORV3 = 4\n     I2P = 5\n     CJDNS = 6\n@@ -46,11 +46,11 @@ def name_to_bip155(addr):\n     '''Convert address string to BIP155 (networkID, addr) tuple.'''\n     if addr.endswith('.onion'):\n         vchAddr = b32decode(addr[0:-6], True)\n-        if len(vchAddr) == 10:\n-            return (BIP155Network.TORV2, vchAddr)\n-        elif len(vchAddr) == 35:\n-            assert(vchAddr[34] == 3)\n+        if len(vchAddr) == 35:\n+            assert vchAddr[34] == 3\n             return (BIP155Network.TORV3, vchAddr[:32])\n+        elif len(vchAddr) == 10:\n+            return (BIP155Network.TORV2, vchAddr)\n         else:\n             raise ValueError('Invalid onion %s' % vchAddr)\n     elif addr.endswith('.b32.i2p'):\n@@ -100,7 +100,10 @@ def parse_spec(s):\n \n     host = name_to_bip155(host)\n \n-    return host + (port, )\n+    if host[0] == BIP155Network.TORV2:\n+        return None  # TORV2 is no longer supported, so we ignore it\n+    else:\n+        return host + (port, )\n \n def ser_compact_size(l):\n     r = b\"\"\n@@ -136,6 +139,8 @@ def process_nodes(g, f, structname):\n             continue\n \n         spec = parse_spec(line)\n+        if spec is None:  # ignore this entry (e.g. no longer supported addresses like TORV2)\n+            continue\n         blob = bip155_serialize(spec)\n         hoststr = ','.join(('0x%02x' % b) for b in blob)\n         g.write(f'    {hoststr},\\n')"
      },
      {
        "sha": "f7bfb6eb0a239ba17ff2aa8579a4ba85217cc498",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 8,
        "deletions": 520,
        "changes": 528,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -650,518 +650,6 @@\n [2a0f:df00:0:254::46]:8333\n [2c0f:f598:5:1:1001::1]:8333\n [2c0f:fce8:0:400:b7c::1]:8333\n-226eupdnaouu4h2v.onion:8333\n-22h7b6f3caabqqsu.onion:8333\n-23wdfqkzttmenvki.onion:8333\n-23yi3frxymtwdgre.onion:8333\n-2ajon3moyf4i2hbb.onion:8333\n-2bfmlpk55hffpl6e.onion:8333\n-2ckmbf6sglwydeth.onion:8333\n-2hkusi5gcaautwqf.onion:8333\n-2ivhmlbxbgnkcykl.onion:8333\n-2mmxouhv6nebowkq.onion:8333\n-2qsnv6exnuuiar7z.onion:8333\n-2qudbhlnvqpli3sz.onion:8333\n-2ujxdfovfyjpmdto.onion:8333\n-2xdgeufrek3eumkw.onion:8333\n-2xdzsruhsej4tsiw.onion:8333\n-34ran2woq4easmss.onion:8333\n-36q7khhej2lxd3wf.onion:8333\n-373wjdspuo52utzq.onion:8333\n-376klet5xqbrg2jv.onion:8333\n-37kwd7fxop766l5k.onion:8333\n-3e5t7hq4alt5tovx.onion:8333\n-3gbxhebfhouuwgc3.onion:8333\n-3hgbjze2nbwyuewf.onion:8333\n-3iuuvrd2waha2cxo.onion:8333\n-3jtxujdaiwh6iltu.onion:8333\n-3l5eq2du7mvscj4a.onion:8333\n-3nofngnqlqeehn7o.onion:8333\n-3r44ddzjitznyahw.onion:8333\n-3vtbuwmton7vq5qz.onion:8333\n-46ohzttz4peki43g.onion:8333\n-47fl3ivl4v56jstr.onion:8333\n-47i6qrl2ijqcwlg6.onion:8333\n-47uupgzcnrwahoto.onion:8333\n-4c5cki37evofds6d.onion:8333\n-4eq36jrx7xuytfpc.onion:8333\n-4ewkdxvcg57adrni.onion:8333\n-4flvgibnm2nld3na.onion:8333\n-4iaontym47imawe4.onion:8333\n-4jxz37oou5ag763c.onion:8333\n-4mnkvj6ha73eqnbk.onion:8333\n-4nnuyxm5k5tlyjq3.onion:8333\n-4nz2yg4cnote3ej7.onion:8333\n-4pozwh6564ygzddk.onion:8333\n-4qgfb56rvpbmesx7.onion:8333\n-4rsax23taqzwmimj.onion:8333\n-4u5j5ay6rasowt4m.onion:8333\n-4vorvtoyegh4zbvr.onion:8333\n-52s4j5pldwlpzhtw.onion:8333\n-5abpiiqfvekoejro.onion:8333\n-5aydzxx6jyoz3nez.onion:8333\n-5cxzdsrtok5dgo4a.onion:8333\n-5eduikpudie3jyrf.onion:8333\n-5epeafkmya4fv5d5.onion:8333\n-5fyxlztic3t6notz.onion:8333\n-5hd6eyew5ybnq6gb.onion:8333\n-5jyfzhwksb6urrp2.onion:8333\n-5nooqgct567ig57v.onion:8333\n-5nsfm4nqqzzprjrp.onion:8333\n-5oqstxspzhlgjef6.onion:8333\n-5pzzmd4tfonrqzb2.onion:8333\n-5sckmx4yucbnp4io.onion:8333\n-5ue7worzbn6hon3e.onion:8333\n-5wxhx2tozpovf6z3.onion:8333\n-5xk3yun36e32e34i.onion:8333\n-5zght2g7vcsapi65.onion:8333\n-62dcdpvdolfzkdzl.onion:8333\n-63bko2mhixnn2b7d.onion:8333\n-67hjvfv6wictalm5.onion:8333\n-6g6ko4klkf5atldi.onion:8333\n-6k5zreexw4cadxi5.onion:8333\n-6kf5ayhlpenywgas.onion:8333\n-6maigxjvcet4pite.onion:8333\n-6ressv4dvplb5ihh.onion:8333\n-6rjex6gyuaui3c5e.onion:8333\n-6skgnf43pphdvjua.onion:8333\n-6stxaoduwisg5sqh.onion:8333\n-6xqy4ts6bo6u5dgm.onion:8333\n-7avnl3dqpgu23jva.onion:8333\n-7ff4wk266no23txn.onion:8333\n-7hipbuzfdcyzqkkg.onion:8333\n-7sjmlzrthjlpfydk.onion:8333\n-7tut3zt2akwrmw6x.onion:8333\n-7uhsjzj6nx3dfnxt.onion:8333\n-7wm4wso3wvatxnbt.onion:8333\n-7ykmzuybwd2ptzg4.onion:8333\n-a27bvhina4y23jxo.onion:8333\n-a53vtdm7uiet5vdl.onion:8333\n-a56572xjuofnt2dp.onion:8333\n-abp25knifdsnc2rv.onion:8333\n-aefx7ubzpal7clak.onion:8333\n-ai5r2diozoe7rrdz.onion:8333\n-aipupphit3enggpj.onion:8333\n-algpjjygd3gtnmpp.onion:8333\n-alihua7rhyc452hr.onion:8333\n-am3gyyfynxzwyxhx.onion:8333\n-ankozzfhl2r3uc6u.onion:8333\n-at3twjlbtc2lqnq5.onion:8333\n-avqobl72pmc64dyi.onion:8333\n-awmdz2fs3b5h5ut5.onion:8333\n-ayywpiy77butdjrj.onion:8333\n-b2i3pj7c24cvprs7.onion:8333\n-b4ilebyxcu6nttio.onion:8333\n-b4vvkbqipcmkwp4v.onion:8333\n-bddfqxps5ibd3ftw.onion:8333\n-be5bgcpo4ooux5qy.onion:8333\n-bgla4m6zetvtv7ls.onion:8333\n-bh32gzw3nyckzqut.onion:8333\n-bho4kodpehn7xr3x.onion:8333\n-bitcoin4rlfa4wqx.onion:8333\n-biw7s6jf6r2mf3cu.onion:8333\n-bk7yp6epnmcllq72.onion:8333\n-blcktrgve5vetjsk.onion:8333\n-blwbp7gfdffdsx4g.onion:8333\n-bnxn6qqc55gvn5op.onion:8333\n-bp7o22lvcjawelvv.onion:8333\n-bqqyqucgj4tchn64.onion:8333\n-bvdzmutcqf7gzzn5.onion:8333\n-c36zmegjkinftmtf.onion:8333\n-c4fn62gnltlgrptv.onion:8333\n-caael5yedviooqzk.onion:8333\n-caq54ablfbrnumdd.onion:8333\n-cernrmrk5zomzozn.onion:8333\n-chri6itgjaagof4t.onion:8333\n-cncwik3tnd2ejm5z.onion:8333\n-cuyjqoziemcmwaxl.onion:8333\n-cx7qa2gpqyp7pld5.onion:8333\n-czp7wgaus4gvio72.onion:8333\n-d2fn54rfyjdangi4.onion:8333\n-d2sk45u6ca64yeqh.onion:8333\n-d3aowmngvktsziae.onion:8333\n-d5iu4aiz3y2kgcgj.onion:8333\n-d6zbw2sxnxgj5sv3.onion:8333\n-db5rd5e46t7mgini.onion:8333\n-dci2gulorl44yj55.onion:8333\n-ddpth2mwt3rsvoog.onion:8333\n-dfrwza7fcecknnms.onion:8333\n-djwhjfj4rh3oz3yj.onion:8333\n-dkk5mmpe5jtjodk5.onion:8333\n-doj3zgmsbzurmqgp.onion:8333\n-dpce4f3rcqddzbx5.onion:8333\n-drwo3vnxch5ozfbo.onion:8333\n-duikkidxip3lyexn.onion:8333\n-duqdliptc22i6hf5.onion:8333\n-duyp4coh5d7nh3ud.onion:8333\n-duz5two3z7c55lxj.onion:8333\n-dvu6dlar6ezc6xen.onion:8333\n-dy6zqs46ycleayyp.onion:8333\n-dz2ydmj3yqrcm4r7.onion:8333\n-e2b2a5suvdawzxud.onion:8333\n-e33h57j2ewkkqsn5.onion:8333\n-e5kjiay7pzj5qpzv.onion:8333\n-e7iko42d2wzcmvy4.onion:8333\n-ea6boh4kotq56ws5.onion:8333\n-efdx6gc4s5ezyqeg.onion:8333\n-efrpuuic6ukeyqcs.onion:8333\n-egruc3bi3itru6gq.onion:8333\n-erc6tjs2ucyadl23.onion:8333\n-eue2n5sk5tktg5bv.onion:8333\n-ezkr7stq4w7ohjrt.onion:8333\n-f3nyyjba6kpxznhk.onion:8333\n-faq73vj4pcs73thu.onion:8333\n-fdvtlj3pscbxuh75.onion:8333\n-fgdpxov4nzxvhcpv.onion:8333\n-fisqq6vzk3m6t225.onion:8333\n-fkgp3qwegacrd2bj.onion:8333\n-fo3tdfwx27takqq5.onion:8333\n-fqkxtchwypispkpv.onion:8333\n-fqunuhlwvd7rq6d5.onion:8333\n-frwt5mscpyhiuwpe.onion:8333\n-fta4gfjiuv6f2le2.onion:8333\n-fuoy2ipuqrqwe5cf.onion:8333\n-fz6nsij6jiyuwlsc.onion:8333\n-g3vlnaaaog5sgui5.onion:8333\n-g44i6jwsutkwmspz.onion:8333\n-g55t65d5ckjixcnw.onion:8333\n-gajd6eyrl2qwkfmg.onion:8333\n-gblue3hr53p4grx7.onion:8333\n-gbpro5tzduiuff4v.onion:8333\n-gc4l3tql32qhfgmi.onion:8333\n-gcnlorvtpycuajc6.onion:8333\n-gdsib2nk2eeoidgc.onion:8333\n-ge5gm7c6w7yahpz7.onion:8333\n-gegcteeep4cwftl5.onion:8333\n-gfoyraudgv5qjdku.onion:8333\n-ggpbuypmxgi26lc6.onion:8333\n-ghqivye7cfckisnt.onion:8333\n-girakxomne5fby64.onion:8333\n-glz5gfk33tuug5ne.onion:8333\n-gplatxoyg5nxl5rj.onion:8333\n-gripl5xjwy2dcr6c.onion:8333\n-gthhzlmqci22nxru.onion:8333\n-gto2d64swosfmk6c.onion:8333\n-guaciney52mgcbp2.onion:8333\n-gwktgrmtwk6nv5sc.onion:8333\n-gwoxnokdcwc7hy4p.onion:8333\n-h333f4qnwe7mrymn.onion:8333\n-h6a32n4blbwwyn4d.onion:8333\n-hafwtrbooszoembm.onion:8333\n-hbwhgsb3eeinnr6t.onion:8333\n-hcv6foxh5mk7fhb5.onion:8333\n-hd6hktcl6wamzlzm.onion:8333\n-hda6msa4v4rt77gx.onion:8333\n-hdgnxkuqsd6wjwwx.onion:8333\n-hgh3azn3eesddvcg.onion:8333\n-hhyxu6bwkjefejoz.onion:8333\n-hizn6rmofsg3upmn.onion:8333\n-hjqxxsy2osemfvev.onion:8333\n-hkbp7mbgw6klls4s.onion:8333\n-hlojuwiwbkoj4kdz.onion:8333\n-hlzxsjr7ob3qzzqq.onion:8333\n-hniuzplezebyhv7a.onion:8333\n-hondewkj4s4rdcwf.onion:8333\n-hql5nv6vhceid3bn.onion:8333\n-hspjo7mqrre5gyxr.onion:8333\n-hu64s2mdr3x7yxka.onion:8333\n-hvwvq2swkqw3qvyo.onion:8333\n-hwo2biyndrrvpl6f.onion:8333\n-hzxj3dth3y2xt45o.onion:8333\n-i3ufxuw3t7cxfdpq.onion:8333\n-ia3n3q5u45gvpx7a.onion:8333\n-icfgs3fctckd4yeo.onion:8333\n-icpz6thqvdjcwlvb.onion:8333\n-if32zo5u4mhdunfd.onion:8333\n-ig4lguql6vxkbmmr.onion:8333\n-ihhcr7fhczqdac4y.onion:8333\n-ijm2tyxob7vkvazz.onion:8333\n-ip3puuqghumfz5ww.onion:8333\n-iq3ket72f3y2frpg.onion:8333\n-iqagt5co4dt7h6hf.onion:8333\n-iugw42ih6hprqr26.onion:8333\n-ivf774v4t7k63i6d.onion:8333\n-ivfacdf7cig2z2y2.onion:8333\n-ivsxdwku5og2zj4l.onion:8333\n-ixwgrhaklvu4g6o7.onion:8333\n-iz56moo6mkp3g7xo.onion:8333\n-j2cp5muw5j3lumcx.onion:8333\n-j2lrkrwugldwewws.onion:8333\n-j2qtmkd2dablssz4.onion:8333\n-j5e2yuan57v2h5el.onion:8333\n-j5jfrdthqt5g25xz.onion:8333\n-j5lk2uv2bspfqxfk.onion:8333\n-janvvzsmzcsj3fil.onion:8333\n-jenn2tmyl3xxarmq.onion:8333\n-jfoe5f2sczojfp32.onion:8333\n-jgcgi6k2pxooi5q3.onion:8333\n-jhana24s3dzkitzp.onion:8333\n-jitgulb24mvfqrdg.onion:8333\n-jjuvwbjfzljmn7t3.onion:8333\n-jlcfomgr5xfexaif.onion:8333\n-jlehs6ybb26qlnna.onion:8333\n-jljzz4tmbqrxq3q5.onion:8333\n-joc4oqceedkg77vf.onion:8333\n-jr5y6njubcbv6g37.onion:8333\n-jroaos6la4vieho4.onion:8333\n-jsmphgkay7iihbkr.onion:8333\n-jtksnokusbzms7wl.onion:8333\n-ju5duo3r6p6diznc.onion:8333\n-jw6zymxcnebahuuj.onion:8333\n-jxalvhf7w7wevqzw.onion:8333\n-jyzhe3ig44ickysb.onion:8333\n-jze6ukn4idrh44eo.onion:8333\n-k4glotlxnmttb6ct.onion:8333\n-k7uy3iwmvguzygd2.onion:8333\n-kl23ofag3ukb6hxl.onion:8333\n-kokt2qr6d4pmyb2d.onion:8333\n-kpalu3h5ydkoaivs.onion:8333\n-krdpbdvtqw5c5lee.onion:8333\n-kriw6kzjzarzgb3g.onion:8333\n-krp2thcmwrpsoue6.onion:8333\n-kvyvdwjwtae5mo77.onion:8333\n-kyrxri5rbr6ipurs.onion:8333\n-kz3oxg7745dxt62q.onion:8333\n-l3w5fcki2wbro2qb.onion:8333\n-l44bisuxhh7reb5q.onion:8333\n-l565g523emjebusj.onion:8333\n-l6w5kdeigwsgnf5t.onion:8333\n-l7a4emryfxkjgmmb.onion:8333\n-l7sloscjqqbifcsw.onion:8333\n-laafjqvtog7djfl2.onion:8333\n-lah676kxbgbgw3u2.onion:8333\n-lbq2a7pnpmviw2qo.onion:8333\n-lc4wnpql27vymi35.onion:8333\n-ldoffbfpk3j6c7y7.onion:8333\n-lehpmglkivobq2qo.onion:8333\n-lgewpjz7ie7daqqr.onion:8333\n-lgkvbvro67jomosw.onion:8333\n-liw5z4ngic6b7vnv.onion:8333\n-ljs7gwrmmza6q6ga.onion:8333\n-lmvax3e6awaxvhqi.onion:8333\n-lrz77dwf7yq4cgnt.onion:8333\n-lva54pnbq2nsmjyr.onion:8333\n-lxc2uphxyyxflhnf.onion:8333\n-lyjybdr4hmj3bqab.onion:8333\n-lz2zlnmyynwtgwf2.onion:8333\n-m6hcnpikimyh37yp.onion:8333\n-md635omjnrgheed3.onion:8333\n-mdb3oupwf4f2qyjb.onion:8333\n-me6d4esx7ohdnxne.onion:8333\n-mecfkik5ci47wckj.onion:8333\n-mfrvevn7w6rwsp4r.onion:8333\n-mimuutlew5srtduk.onion:8333\n-mnysk3izxvra3huv.onion:8333\n-mqu6gqtrhm6xzwwh.onion:8333\n-mwuc6vom4ngijtb3.onion:8333\n-mxdtrjhe2yfsx3pg.onion:8333\n-n4ibet4piscv22nj.onion:8333\n-n6d46vbzx43bevlb.onion:8333\n-n6t6kfgzlvozxhfm.onion:8333\n-n7rrochwerf2qxze.onion:8333\n-ncsdiqmnxhnnjbsz.onion:8333\n-nitxw3ilffngpumv.onion:8333\n-njlsvubildehluwr.onion:8333\n-njslfsivyyhixbsp.onion:8333\n-nkf5e6b7pl4jfd4a.onion:8333\n-nkppsb3t3ducje6m.onion:8333\n-nlfwyqksmeqe45zz.onion:8333\n-nlyjmpcmpaz5b4aa.onion:8333\n-nnmv7z65k65mcesr.onion:8333\n-nrrfwdmrm3imuebn.onion:8333\n-nrrmkgmulpgsbwlt.onion:8333\n-nw4h7leckut7eapv.onion:8333\n-nwky3wd3ihoidvb5.onion:8333\n-ny4kkemmmqv4lptm.onion:8333\n-o25wkcw7eorg2toi.onion:8333\n-o2gumvbkw6pm45cf.onion:8333\n-o4yjshdwlbshylqw.onion:8333\n-ofx4qgw6lppnvtgv.onion:8333\n-oketipl4gndqcaus.onion:8333\n-oq5q4qrqijr2kpun.onion:8333\n-oqw3mfoiobqcklxh.onion:8333\n-orsy2v63ecrmdj55.onion:8333\n-ot4tzmznyimmlszk.onion:8333\n-owk6c2jfthwkyahe.onion:8333\n-oy7ss3hm2okx4tun.onion:8333\n-p2pc6wbaepvdi6ce.onion:8333\n-p2x24gdhasmgcl5j.onion:8333\n-p6couujr2ndhllv3.onion:8333\n-pa7dw5bln5lqmu53.onion:8333\n-pasmchtoooj2kchd.onion:8333\n-pdapkkhk6pbcy2tj.onion:8333\n-peh5ajouuw6mw4sr.onion:8333\n-pkuuc5pwl5xygwhr.onion:8333\n-pq4wjl7vg7tsfycc.onion:8333\n-ptbwqhusps5qieql.onion:8333\n-ptwpbwyj5lnyew2f.onion:8333\n-pu7w3jfyrzp7sxsi.onion:8333\n-pwylbyvfuc62hhvx.onion:8333\n-q2fhnnyt5b2ayvce.onion:8333\n-q3i3apuionbazmfe.onion:8333\n-qd6fcpu3pvbf2y3x.onion:8333\n-qfewv3y7a3p4i3bd.onion:8333\n-qhytdttflhbc4rsh.onion:8333\n-qkn35rb3x2gxbwq4.onion:8333\n-qlvlexs7pwac2f4b.onion:8333\n-qogcqirtuta6rlxg.onion:8333\n-qrzqfxkhrmu5v5ro.onion:8333\n-qsyjasq46b2syiys.onion:8333\n-quu4b2zjbnr2ue4y.onion:8333\n-quycfj2wenz6bfyd.onion:8333\n-qvdy3cmocnlv5v7c.onion:8333\n-qvwhpqygan2xky5h.onion:8333\n-qyutwc26ullujafb.onion:8333\n-r45qg2d6iwfdhqwl.onion:8333\n-r4xudr6u4r5nyga4.onion:8333\n-r6apa5ssujxbwd34.onion:8333\n-r6z2gcsu37k3gaah.onion:8333\n-rbrjgfcca6v5b7yo.onion:8333\n-rcifxibawqt6rxzz.onion:8333\n-rdo3xctk3zkzjvln.onion:8333\n-rdvlepy6ghgpapzo.onion:8333\n-recs3a27chv2lg65.onion:8333\n-rfmbiy5vztvn6hyn.onion:8333\n-rli5lbje4k77inzw.onion:8333\n-roqwnmepcj453vfh.onion:8333\n-rpbnx54qniivrmh3.onion:8333\n-rsvvogqdlijp77hv.onion:8333\n-rwm5d4hg3hc77kdt.onion:8333\n-s3yelkvc5f5xeysw.onion:8333\n-s6rx52hitmpp4lge.onion:8333\n-sa6m3rvycipgemky.onion:8333\n-savebeesmkivmfbo.onion:8333\n-sbyjr5npk2mlmfw7.onion:8333\n-serwj42jme5xhhmw.onion:8333\n-sg4vmubv3djrzvuh.onion:8333\n-shsgksluz6jkgp6g.onion:8333\n-sjyzmwwu6diiit3r.onion:8333\n-sk3en3reudg3sdg5.onion:8333\n-skoifp4oj7l4osu5.onion:8333\n-sle2caplkln33e7y.onion:8333\n-smdd7q7gonajdmjq.onion:8333\n-spmhuxjb2cd7leun.onion:8333\n-srkgyv5edn2pa7il.onion:8333\n-sslnjjhnmwllysv4.onion:8333\n-su66ygras6rkdtnl.onion:8333\n-sundvmbjrtgdfahx.onion:8333\n-svd65k5jpal2p3lt.onion:8333\n-svua5hiqluw7o2sw.onion:8333\n-sxqjubmum4rmfgpu.onion:8333\n-t245vi742ti3tnka.onion:8333\n-t4fbovvgzpnimd2p.onion:8333\n-t4l4wv3erkhpde2p.onion:8333\n-t5qchwbr6u5v2agk.onion:8333\n-t7jlaj6ggyx7s5vy.onion:8333\n-ta6sjeqyb27f4n4a.onion:8333\n-tav7utpw4pfy7j6k.onion:8333\n-taxg5z2sxfm5c4d6.onion:8333\n-tekwvnbodbzrlufs.onion:8333\n-tg4uwrjmtr2jlbjy.onion:8333\n-th4cjvffjtw6vomu.onion:8333\n-th6fxymtwnfifqeu.onion:8333\n-thtchhl25u26nglq.onion:8333\n-tiiah7csuoklcvi6.onion:8333\n-tk63x5fk3337z3ud.onion:8333\n-tkgootat6cqn7vyy.onion:8333\n-tnj565wwqz5wpjvs.onion:8333\n-ts6qx37mmpu6nj5y.onion:8333\n-ttjisvxydgbtp56f.onion:8333\n-twn54v7ra2xjgd55.onion:8333\n-txem5meug24g2ezd.onion:8333\n-tyiunn36lmfcq5lr.onion:8333\n-tyv56xs6g6ndzqux.onion:8333\n-u47f3hxwq65sgs4o.onion:8333\n-u4r7fnholrdwwlni.onion:8333\n-u556ofb3myarafwn.onion:8333\n-u5q3gbz4qpz4wvlr.onion:8333\n-uakly3ydrevvpxwi.onion:8333\n-ug6hapi4qtekzc7v.onion:8333\n-ui553qotd6ron3rf.onion:8333\n-uir7f3wltoka6bbb.onion:8333\n-ukrjjhwodl44wmof.onion:8333\n-ul5gm2ixy7kqdfwg.onion:8333\n-undd7rsj4pen3wo4.onion:8333\n-uorwpzfehtykrg43.onion:8333\n-uovsp2yltnaojq6l.onion:8333\n-usazmdcs32ny24dy.onion:8333\n-usazs7glm7geyxkl.onion:8333\n-uss2kedg7qkwgdr5.onion:8333\n-utgyrvw75wv2nymi.onion:8333\n-uzwacms7kyzhehbl.onion:8333\n-v2kdcetvslmdfcwr.onion:8333\n-v5lhnzzv6nngfg5d.onion:8333\n-vc44gb4veppobrt3.onion:8333\n-vfwyhju43wxhzvux.onion:8333\n-vgujufk53lqyolio.onion:8333\n-vheejqq2v5dkb4xr.onion:8333\n-vj64edev4jnqfdsb.onion:8333\n-vmai5uigezr2khkj.onion:8333\n-vmuykd7sxbmi7w57.onion:8333\n-vomeacttinx3mpml.onion:8333\n-vpow2xofg3fwzsdq.onion:8333\n-vsawli4l5ifxdzaw.onion:8333\n-vunubqkfms7sifok.onion:8333\n-vuombnevwul4bqsb.onion:8333\n-vxcpvdng65aefz6t.onion:8333\n-vyxoizdzavp3obau.onion:8333\n-wbeon2ci7lfio6ay.onion:8333\n-wbwevew62mgsrrdz.onion:8333\n-wfaydlg6zyfzjcu5.onion:8333\n-wfz56s5lyn5dysez.onion:8333\n-wg3mq4ugyy2gx32b.onion:8333\n-whky54bctkf2n4p3.onion:8333\n-whmjanqoyzizzc4t.onion:8333\n-wlhou2wxgqyi3x3f.onion:8333\n-wlvkfrplfiioz22o.onion:8333\n-x3ngb3va7dovuenw.onion:8333\n-x57x62bmmnylvo7r.onion:8333\n-xgvm57mhgv564dka.onion:8333\n-xhs3glfwnwiumivn.onion:8333\n-xje5fwvyfdue2u6k.onion:8333\n-xlgubgyly2blvsg5.onion:8333\n-xnlu3tvakngy7tkp.onion:8333\n-xo5marilhuyo7but.onion:8333\n-xsaaxihdygnwxrix.onion:8333\n-xu5mlugdsmzfkvzh.onion:8333\n-xvrxqcptqvieedb2.onion:8333\n-xwzhrrygftq3q4w4.onion:8333\n-y4swmsaxdcos2bnu.onion:8333\n-y5tl4lqi365pplud.onion:8333\n-y5wzeqyaets5na6t.onion:8333\n-y73qk2mzkjkhoky7.onion:8333\n-y7oz3ydnvib4xhbb.onion:8333\n-yah7qgfqqrteoche.onion:8333\n-yba4brm555denlt7.onion:8333\n-ygeqkg4inplsace3.onion:8333\n-yjhnfu75lazbi34h.onion:8333\n-yjw7kqapxx5vggoj.onion:8333\n-ym7inmovbrna4gco.onion:8333\n-yq5cusnuokscy64z.onion:8333\n-yrcaioqrqrdwokqt.onion:8333\n-yrcr7pgjuazad254.onion:8333\n-yrksvon3tmvoohdv.onion:8333\n-ytpus4vx5w7j6wp2.onion:8333\n-ytqcigk2hhdl45ho.onion:8333\n-yxojl3xmjus3dik2.onion:8333\n-yzdqdsqx4fdung6w.onion:8333\n-z33nukt7ngik3cpe.onion:8333\n-z3ywbadw46ndnxgh.onion:8333\n-z6mbqq7llxlrn4kq.onion:8333\n-zb3lrcksn4rzhzje.onion:8333\n-ze7odp7pzarjplsr.onion:8333\n-zgbmhtbja4fy2373.onion:8333\n-zh7hvalcgvjpoaqm.onion:8333\n-ziztvxehmj5mehpg.onion:8333\n-zjii3yecdrmq73y3.onion:8333\n-zkrwmgjuvsza6ye2.onion:8333\n-zoz2aopwi3wfuqwg.onion:8333\n-ztdcfnh46773bivu.onion:8333\n-zuxhc6d3nwpgc4af.onion:8333\n-zuytrfevzjcpizli.onion:8333\n-zvq6dpt3i2ofdp3g.onion:8333\n-zwwm6ga7u2hqe2sd.onion:8333\n-zyqb4lenfspntj5m.onion:8333\n \n # manually added 2021-03 for minimal torv3 bootstrap support\n 2g5qfdkn2vvcbqhzcyvyiitg4ceukybxklraxjnu7atlhd22gdwywaid.onion:8333\n@@ -1190,11 +678,11 @@ vi5bnbxkleeqi6hfccjochnn65lcxlfqs4uwgmhudph554zibiusqnad.onion:8333\n xqt25cobm5zqucac3634zfght72he6u3eagfyej5ellbhcdgos7t2had.onion:8333\n \n # manually added 2021-05 for minimal i2p bootstrap support\n-72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p:8333\n-c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:8333\n-gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:8333\n-h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:8333\n-hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:8333\n-pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p:8333\n-wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:8333\n-zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:8333\n+72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p:0\n+c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:0\n+gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:0\n+h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:0\n+hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:0\n+pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p:0\n+wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:0\n+zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:0"
      },
      {
        "sha": "706b296c54942848642ed7fe8cec18a548235b8a",
        "filename": "contrib/signet/README.md",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/signet/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/signet/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/README.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -21,27 +21,28 @@ accept one claim per day. See `--password` above.\n miner\n =====\n \n-To mine the first block in your custom chain, you can run:\n+You will first need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target appropriate for your hardware, eg:\n \n     cd src/\n-    CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n-    MINER=\"..contrib/signet/miner\"\n+    MINER=\"../contrib/signet/miner\"\n     GRIND=\"./bitcoin-util grind\"\n-    ADDR=$($CLI -signet getnewaddress)\n-    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n-\n-This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n-\n-You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n-\n     $MINER calibrate --grind-cmd=\"$GRIND\"\n     nbits=1e00f403 for 25s average mining time\n \n It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n \n-Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+To mine the first block in your custom chain, you can run:\n \n-    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+    CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+    ADDR=$($CLI -signet getnewaddress)\n+    NBITS=1e00f403\n+    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=$NBITS\n+\n+This will mine a single block with a backdated timestamp designed to allow 100 blocks to be mined as quickly as possible, so that it is possible to do transactions.\n+\n+Adding the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=$NBITS --ongoing\n \n Other options\n -------------\n@@ -50,9 +51,11 @@ The --debug and --quiet options are available to control how noisy the signet mi\n \n Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n \n-Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+The --set-block-time option is available to manually move timestamps forward or backward (subject to the rules that blocktime must be greater than mediantime, and dates can't be more than two hours in the future). It can only be used when mining a single block (ie, not when using --ongoing or --max-blocks greater than 1).\n+\n+Instead of using a single address, a ranged descriptor may be provided via the --descriptor parameter, with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n \n-Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the minimum signet difficulty will be targeted. Signet's minimum difficulty corresponds to --nbits=1e0377ae.\n \n By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.\n \n@@ -76,5 +79,5 @@ These steps can instead be done explicitly:\n       $MINER --cli=\"$CLI\" solvepsbt --grind-cmd=\"$GRIND\" |\n       $CLI -signet -stdin submitblock\n \n-This is intended to allow you to replace part of the pipeline for further experimentation, if desired.\n+This is intended to allow you to replace part of the pipeline for further experimentation (eg, to sign the block with a hardware wallet).\n "
      },
      {
        "sha": "78e1fa5ecd2663a2fbd37ef575fd6850fba5f424",
        "filename": "contrib/signet/miner",
        "status": "modified",
        "additions": 14,
        "deletions": 22,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -23,7 +23,7 @@ PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNE\n sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n \n from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n-from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, from_hex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n from test_framework.script import CScriptOp # noqa: E402\n \n logging.basicConfig(\n@@ -37,7 +37,7 @@ RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n \n # #### some helpers that could go into test_framework\n \n-# like FromHex, but without the hex part\n+# like from_hex, but without the hex part\n def FromBinary(cls, stream):\n     \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n     # handle bytes object by turning it into a stream\n@@ -195,7 +195,7 @@ def finish_block(block, signet_solution, grind_cmd):\n         headhex = CBlockHeader.serialize(block).hex()\n         cmd = grind_cmd.split(\" \") + [headhex]\n         newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n-        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        newhead = from_hex(CBlockHeader(), newheadhex.decode('utf8'))\n         block.nNonce = newhead.nNonce\n         block.rehash()\n     return block\n@@ -216,7 +216,7 @@ def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n         block.nTime = tmpl[\"mintime\"]\n     block.nBits = int(tmpl[\"bits\"], 16)\n     block.nNonce = 0\n-    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+    block.vtx = [cbtx] + [tx_from_hex(t[\"data\"]) for t in tmpl[\"transactions\"]]\n \n     witnonce = 0\n     witroot = block.calc_witness_merkle_root()\n@@ -274,7 +274,7 @@ def do_genpsbt(args):\n def do_solvepsbt(args):\n     block, signet_solution = do_decode_psbt(sys.stdin.read())\n     block = finish_block(block, signet_solution, args.grind_cmd)\n-    print(ToHex(block))\n+    print(block.serialize().hex())\n \n def nbits_to_target(nbits):\n     shift = (nbits >> 24) & 0xff\n@@ -428,10 +428,13 @@ def do_generate(args):\n             action_time = now\n             is_mine = True\n         elif bestheader[\"height\"] == 0:\n-            logging.error(\"When mining first block in a new signet, must specify --set-block-time\")\n-            return 1\n+            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n+            time_delta *= 100 # 100 blocks\n+            logging.info(\"Backdating time for first block to %d minutes ago\" % (time_delta/60))\n+            mine_time = now - time_delta\n+            action_time = now\n+            is_mine = True\n         else:\n-\n             time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n             mine_time = bestheader[\"time\"] + time_delta\n \n@@ -500,7 +503,7 @@ def do_generate(args):\n         block = finish_block(block, signet_solution, args.grind_cmd)\n \n         # submit block\n-        r = args.bcli(\"-stdin\", \"submitblock\", input=ToHex(block).encode('utf8'))\n+        r = args.bcli(\"-stdin\", \"submitblock\", input=block.serialize().hex().encode('utf8'))\n \n         # report\n         bstr = \"block\" if is_mine else \"backup block\"\n@@ -520,36 +523,26 @@ def do_calibrate(args):\n         sys.stderr.write(\"Can only specify one of --nbits or --seconds\\n\")\n         return 1\n     if args.nbits is not None and len(args.nbits) != 8:\n-        sys.stderr.write(\"Must specify 8 hex digits for --nbits\")\n+        sys.stderr.write(\"Must specify 8 hex digits for --nbits\\n\")\n         return 1\n \n     TRIALS = 600 # gets variance down pretty low\n     TRIAL_BITS = 0x1e3ea75f # takes about 5m to do 600 trials\n-    #TRIAL_BITS = 0x1e7ea75f # XXX\n \n     header = CBlockHeader()\n     header.nBits = TRIAL_BITS\n     targ = nbits_to_target(header.nBits)\n \n     start = time.time()\n     count = 0\n-    #CHECKS=[]\n     for i in range(TRIALS):\n         header.nTime = i\n         header.nNonce = 0\n         headhex = header.serialize().hex()\n         cmd = args.grind_cmd.split(\" \") + [headhex]\n         newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n-        #newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n-        #count += newhead.nNonce\n-        #if (i+1) % 100 == 0:\n-        #   CHECKS.append((i+1, count, time.time()-start))\n-\n-    #print(\"checks =\", [c*1.0 / (b*targ*2**-256) for _,b,c in CHECKS])\n \n     avg = (time.time() - start) * 1.0 / TRIALS\n-    #exp_count = 2**256 / targ * TRIALS\n-    #print(\"avg =\", avg, \"count =\", count, \"exp_count =\", exp_count)\n \n     if args.nbits is not None:\n         want_targ = nbits_to_target(int(args.nbits,16))\n@@ -590,7 +583,6 @@ def main():\n     generate.add_argument(\"--nbits\", default=None, type=str, help=\"Target nBits (specify difficulty)\")\n     generate.add_argument(\"--min-nbits\", action=\"store_true\", help=\"Target minimum nBits (use min difficulty)\")\n     generate.add_argument(\"--poisson\", action=\"store_true\", help=\"Simulate randomised block times\")\n-    #generate.add_argument(\"--signcmd\", default=None, type=str, help=\"Alternative signing command\")\n     generate.add_argument(\"--multiminer\", default=None, type=str, help=\"Specify which set of blocks to mine (eg: 1-40/100 for the first 40%%, 2/3 for the second 3rd)\")\n     generate.add_argument(\"--backup-delay\", default=300, type=int, help=\"Seconds to delay before mining blocks reserved for other miners (default=300)\")\n     generate.add_argument(\"--standby-delay\", default=0, type=int, help=\"Seconds to delay before mining blocks (default=0)\")\n@@ -605,7 +597,7 @@ def main():\n         sp.add_argument(\"--descriptor\", default=None, type=str, help=\"Descriptor for block reward payment\")\n \n     for sp in [solvepsbt, generate, calibrate]:\n-        sp.add_argument(\"--grind-cmd\", default=None, type=str, help=\"Command to grind a block header for proof-of-work\")\n+        sp.add_argument(\"--grind-cmd\", default=None, type=str, required=(sp==calibrate), help=\"Command to grind a block header for proof-of-work\")\n \n     args = parser.parse_args(sys.argv[1:])\n "
      },
      {
        "sha": "7a6ab89a82bbd50f1c0689e1168c4962eff08e41",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,7 +1,7 @@\n .NOTPARALLEL :\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n # When invoking a sub-make, keep only the command line variable definitions\n@@ -284,4 +284,5 @@ download: download-osx download-linux download-win\n $(foreach package,$(all_packages),$(eval $(call ext_add_stages,$(package))))\n \n .PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources\n+.PHONY: FORCE\n Makefile:: ;"
      },
      {
        "sha": "4f3b6df4871a340f6c3816a759bb2f285770c76b",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -87,6 +87,14 @@ For linux S390X cross compilation:\n \n     sudo apt-get install g++-s390x-linux-gnu binutils-s390x-linux-gnu\n \n+### Install the required dependencies: M1-based macOS\n+\n+To be able to build the `qt` package, ensure that Rosetta 2 is installed:\n+\n+```\n+softwareupdate --install-rosetta\n+```\n+\n ### Dependency Options\n \n The following can be set when running make: `make FOO=bar`"
      },
      {
        "sha": "5205ae5db2f806f8af723158840f219efc9b4053",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 22,
        "deletions": 37,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,11 +6,13 @@ $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=1c1b4e33137ca77881074c140d54c3c9747e845a31338cfe8680f171f0bc3a39\n $(package)_linux_dependencies=freetype fontconfig libxcb libxkbcommon\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_no_printer.patch no-xlib.patch\n+$(package)_linguist_tools = lrelease lupdate lconvert\n+$(package)_patches = qt.pro qttools_src.pro\n+$(package)_patches += fix_qt_pkgconfig.patch mac-qmake.conf fix_no_printer.patch no-xlib.patch\n $(package)_patches+= fix_android_qmake_conf.patch fix_android_jni_static.patch dont_hardcode_pwd.patch\n-$(package)_patches+= drop_lrelease_dependency.patch no_sdk_version_check.patch\n+$(package)_patches+= no_sdk_version_check.patch\n $(package)_patches+= fix_lib_paths.patch fix_android_pch.patch\n-$(package)_patches+= qtbase-moc-ignore-gcc-macro.patch\n+$(package)_patches+= qtbase-moc-ignore-gcc-macro.patch fix_limits_header.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=577b0668a777eb2b451c61e8d026d79285371597ce9df06b6dee6c814164b7c3\n@@ -64,6 +66,7 @@ $(package)_config_opts += -no-system-proxies\n $(package)_config_opts += -no-use-gold-linker\n $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n+$(package)_config_opts += -nomake tools\n $(package)_config_opts += -opensource\n $(package)_config_opts += -pkg-config\n $(package)_config_opts += -prefix $(host_prefix)\n@@ -113,20 +116,19 @@ $(package)_config_opts_darwin = -no-dbus\n $(package)_config_opts_darwin += -no-opengl\n $(package)_config_opts_darwin += -pch\n $(package)_config_opts_darwin += -no-feature-corewlan\n-$(package)_config_opts_darwin += -device-option QMAKE_MACOSX_DEPLOYMENT_TARGET=$(OSX_MIN_VERSION)\n+$(package)_config_opts_darwin += QMAKE_MACOSX_DEPLOYMENT_TARGET=$(OSX_MIN_VERSION)\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin += -xplatform macx-clang-linux\n $(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n $(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSION)\n $(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n-$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n $(package)_config_opts_darwin += -device-option XCODE_VERSION=$(XCODE_VERSION)\n endif\n \n # for macOS on Apple Silicon (ARM) see https://bugreports.qt.io/browse/QTBUG-85279\n-$(package)_config_opts_arm_darwin += -device-option QMAKE_APPLE_DEVICE_ARCHS=arm64\n+$(package)_config_opts_aarch64_darwin += -device-option QMAKE_APPLE_DEVICE_ARCHS=arm64\n \n $(package)_config_opts_linux = -qt-xcb\n $(package)_config_opts_linux += -no-xcb-xlib\n@@ -175,8 +177,6 @@ $(package)_config_opts_aarch64_android += -android-arch arm64-v8a\n $(package)_config_opts_armv7a_android += -android-arch armeabi-v7a\n $(package)_config_opts_x86_64_android += -android-arch x86_64\n $(package)_config_opts_i686_android += -android-arch i686\n-\n-$(package)_build_env += QT_RCC_SOURCE_DATE_OVERRIDE=1\n endef\n \n define $(package)_fetch_cmds\n@@ -203,26 +203,24 @@ endef\n #\n # 1. Apply our patches to the extracted source. See each patch for more info.\n #\n-# 2. Point to lrelease in qttools/bin/lrelease; otherwise Qt will look for it in\n-# $(host)/native/bin/lrelease and not find it.\n-#\n-# 3. Create a macOS-Clang-Linux mkspec using our mac-qmake.conf.\n+# 2. Create a macOS-Clang-Linux mkspec using our mac-qmake.conf.\n #\n-# 4. After making a copy of the mkspec for the linux-arm-gnueabi host, named\n+# 3. After making a copy of the mkspec for the linux-arm-gnueabi host, named\n # bitcoin-linux-g++, replace instances of linux-arm-gnueabi with $(host). This\n # way we can generically support hosts like riscv64-linux-gnu, which Qt doesn't\n # ship a mkspec for. See it's usage in config_opts_* above.\n #\n-# 5. Put our C, CXX and LD FLAGS into gcc-base.conf. Only used for non-host builds.\n+# 4. Put our C, CXX and LD FLAGS into gcc-base.conf. Only used for non-host builds.\n #\n-# 6. Do similar for the win32-g++ mkspec.\n+# 5. Do similar for the win32-g++ mkspec.\n #\n-# 7. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n+# 6. In clang.conf, swap out clang & clang++, for our compiler + flags. See #17466.\n #\n-# 8. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n+# 7. Adjust a regex in toolchain.prf, to accommodate Guix's usage of\n # CROSS_LIBRARY_PATH. See #15277.\n define $(package)_preprocess_cmds\n-  patch -p1 -i $($(package)_patch_dir)/drop_lrelease_dependency.patch && \\\n+  cp $($(package)_patch_dir)/qt.pro qt.pro && \\\n+  cp $($(package)_patch_dir)/qttools_src.pro qttools/src/src.pro && \\\n   patch -p1 -i $($(package)_patch_dir)/dont_hardcode_pwd.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch && \\\n@@ -233,7 +231,7 @@ define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/no_sdk_version_check.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/fix_lib_paths.patch && \\\n   patch -p1 -i $($(package)_patch_dir)/qtbase-moc-ignore-gcc-macro.patch && \\\n-  sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n+  patch -p1 -i $($(package)_patch_dir)/fix_limits_header.patch && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n@@ -250,36 +248,23 @@ endef\n define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n-  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n+  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig && \\\n   cd qtbase && \\\n-  ./configure $($(package)_config_opts) && \\\n-  cd .. && \\\n-  $(MAKE) -C qtbase sub-src-clean && \\\n-  qtbase/bin/qmake -o qttranslations/Makefile qttranslations/qttranslations.pro && \\\n-  qtbase/bin/qmake -o qttranslations/translations/Makefile qttranslations/translations/translations.pro && \\\n-  qtbase/bin/qmake -o qttools/src/linguist/lrelease/Makefile qttools/src/linguist/lrelease/lrelease.pro && \\\n-  qtbase/bin/qmake -o qttools/src/linguist/lupdate/Makefile qttools/src/linguist/lupdate/lupdate.pro && \\\n-  qtbase/bin/qmake -o qttools/src/linguist/lconvert/Makefile qttools/src/linguist/lconvert/lconvert.pro\n+  ./configure -top-level $($(package)_config_opts)\n endef\n \n define $(package)_build_cmds\n-  $(MAKE) -C qtbase/src $(addprefix sub-,$($(package)_qt_libs)) && \\\n-  $(MAKE) -C qttools/src/linguist/lrelease && \\\n-  $(MAKE) -C qttools/src/linguist/lupdate && \\\n-  $(MAKE) -C qttools/src/linguist/lconvert && \\\n-  $(MAKE) -C qttranslations\n+  $(MAKE)\n endef\n \n define $(package)_stage_cmds\n   $(MAKE) -C qtbase/src INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_qt_libs))) && \\\n-  $(MAKE) -C qttools/src/linguist/lrelease INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n-  $(MAKE) -C qttools/src/linguist/lupdate INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n-  $(MAKE) -C qttools/src/linguist/lconvert INSTALL_ROOT=$($(package)_staging_dir) install_target && \\\n+  $(MAKE) -C qttools/src/linguist INSTALL_ROOT=$($(package)_staging_dir) $(addsuffix -install_subtargets,$(addprefix sub-,$($(package)_linguist_tools))) && \\\n   $(MAKE) -C qttranslations INSTALL_ROOT=$($(package)_staging_dir) install_subtargets\n endef\n \n define $(package)_postprocess_cmds\n   rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n-  rm -f lib/lib*.la lib/*.prl plugins/*/*.prl\n+  rm -f lib/lib*.la\n endef\n packages/$(package).mk:: ;"
      },
      {
        "sha": "9b918af77c464278eb796f20fcf7bc67d04e3dad",
        "filename": "depends/patches/qt/drop_lrelease_dependency.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/patches/qt/drop_lrelease_dependency.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/depends/patches/qt/drop_lrelease_dependency.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/drop_lrelease_dependency.patch?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,20 +0,0 @@\n-commit 67b3ed7406e1d0762188dbad2c44a06824ba0778\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Tue Aug 18 15:24:01 2020 +0800\n-\n-    Drop dependency on lrelease\n-\n-    Qts buildsystem insists on using the installed lrelease, but gets\n-    confused about how to find it. Since we manually control the build\n-    order, just drop the dependency.\n-\n-    See #9469\n-\n-diff --git a/qttranslations/translations/translations.pro b/qttranslations/translations/translations.pro\n-index 694544c..eff339d 100644\n---- a/qttranslations/translations/translations.pro\n-+++ b/qttranslations/translations/translations.pro\n-@@ -107,3 +107,2 @@ updateqm.commands = $$LRELEASE ${QMAKE_FILE_IN} -qm ${QMAKE_FILE_OUT}\n- silent:updateqm.commands = @echo lrelease ${QMAKE_FILE_IN} && $$updateqm.commands\n--updateqm.depends = $$LRELEASE_EXE\n- updateqm.name = LRELEASE ${QMAKE_FILE_IN}"
      },
      {
        "sha": "e4313770e5a8b9c12bbebbc8bb75b8a7585a1992",
        "filename": "depends/patches/qt/fix_limits_header.patch",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/fix_limits_header.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/fix_limits_header.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_limits_header.patch?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,44 @@\n+Fix compiling with GCC 11\n+\n+See: https://bugreports.qt.io/browse/QTBUG-90395.\n+\n+Upstream commits:\n+ - Qt 5.15 -- unavailable as open source\n+ - Qt 6.0: b2af6332ea37e45ab230a7a5d2d278f86d961b83\n+ - Qt 6.1: 9c56d4da2ff631a8c1c30475bd792f6c86bda53c\n+\n+--- old/qtbase/src/corelib/global/qendian.h\n++++ new/qtbase/src/corelib/global/qendian.h\n+@@ -44,6 +44,8 @@\n+ #include <QtCore/qfloat16.h>\n+ #include <QtCore/qglobal.h>\n+ \n++#include <limits>\n++\n+ // include stdlib.h and hope that it defines __GLIBC__ for glibc-based systems\n+ #include <stdlib.h>\n+ #include <string.h>\n+\n+--- old/qtbase/src/corelib/tools/qbytearraymatcher.h\n++++ new/qtbase/src/corelib/tools/qbytearraymatcher.h\n+@@ -42,6 +42,8 @@\n+ \n+ #include <QtCore/qbytearray.h>\n+ \n++#include <limits>\n++\n+ QT_BEGIN_NAMESPACE\n+ \n+ \n+\n+--- old/qtbase/src/tools/moc/generator.cpp\n++++ new/qtbase/src/tools/moc/generator.cpp\n+@@ -40,6 +40,8 @@\n+ #include <QtCore/qplugin.h>\n+ #include <QtCore/qstringview.h>\n+ \n++#include <limits>\n++\n+ #include <math.h>\n+ #include <stdio.h>\n+ "
      },
      {
        "sha": "190ab7a160e49bf135c6991e84edc4c27f6d15de",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -8,7 +8,6 @@ include(../common/clang-mac.conf)\n QMAKE_MAC_SDK_PATH=$${MAC_SDK_PATH}\n QMAKE_XCODE_VERSION = $${XCODE_VERSION}\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n-QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx\n QMAKE_MAC_SDK.macosx.Path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx"
      },
      {
        "sha": "8f2e900a840fbd3f19dd77772d1157cdefbe1527",
        "filename": "depends/patches/qt/qt.pro",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt.pro?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,16 @@\n+# Create the super cache so modules will add themselves to it.\n+cache(, super)\n+\n+!QTDIR_build: cache(CONFIG, add, $$list(QTDIR_build))\n+\n+prl = no_install_prl\n+CONFIG += $$prl\n+cache(CONFIG, add stash, prl)\n+\n+TEMPLATE = subdirs\n+SUBDIRS = qtbase qttools qttranslations\n+\n+qttools.depends = qtbase\n+qttranslations.depends = qttools\n+\n+load(qt_configure)"
      },
      {
        "sha": "6ef71a094273503f3cdac2618e3877e428bfb52b",
        "filename": "depends/patches/qt/qttools_src.pro",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/qttools_src.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/depends/patches/qt/qttools_src.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qttools_src.pro?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,6 @@\n+TEMPLATE = subdirs\n+SUBDIRS = linguist\n+\n+fb = force_bootstrap\n+CONFIG += $$fb\n+cache(CONFIG, add, fb)"
      },
      {
        "sha": "38f6b1d3275c8516d961a4c2500aa5a8f52ddf84",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -30,8 +30,8 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on the [Bitcoin StackExchange](https://bitcoin.stackexchange.com)\n-* Ask for help on [#bitcoin](https://webchat.freenode.net/#bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin).\n+* Ask for help on [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+* Ask for help on #bitcoin on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin).\n * Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n@@ -68,20 +68,20 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Libera Chat. If you don't have an IRC client, use [webchat here](https://web.libera.chat/#bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Libera Chat. If you don't have an IRC client, you can use [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n - [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n+- [I2P Support](i2p.md)\n+- [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [PSBT support](psbt.md)\n - [Reduce Memory](reduce-memory.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n-- [Init Scripts (systemd/upstart/openrc)](init.md)\n - [ZMQ](zmq.md)\n-- [PSBT support](psbt.md)\n \n License\n ---------------------"
      },
      {
        "sha": "84d5f2c444ba3e5f37b81c8cdb35223c48f538e1",
        "filename": "doc/benchmarking.md",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -8,8 +8,10 @@ thread queue, wallet balance.\n Running\n ---------------------\n \n-For benchmarks purposes you only need to compile `bitcoin_bench`. Beware of configuring without `--enable-debug` as this would impact\n-benchmarking by unlatching log printers and lock analysis.\n+For benchmarking, you only need to compile `bitcoin_bench`.  The bench runner\n+warns if you configure with `--enable-debug`, but consider if building without\n+it will impact the benchmark(s) you are interested in by unlatching log printers\n+and lock analysis.\n \n     make -C src bitcoin_bench\n \n@@ -19,19 +21,28 @@ After compiling bitcoin-core, the benchmarks can be run with:\n \n The output will look similar to:\n ```\n-|             ns/byte |              byte/s | error % | benchmark\n-|--------------------:|--------------------:|--------:|:----------------------------------------------\n-|               64.13 |       15,592,356.01 |    0.1% | `Base58CheckEncode`\n-|               24.56 |       40,722,672.68 |    0.2% | `Base58Decode`\n+|               ns/op |                op/s |    err% |     total | benchmark\n+|--------------------:|--------------------:|--------:|----------:|:----------\n+|       57,927,463.00 |               17.26 |    3.6% |      0.66 | `AddrManAdd`\n+|          677,816.00 |            1,475.33 |    4.9% |      0.01 | `AddrManGetAddr`\n+\n+...\n+\n+|             ns/byte |              byte/s |    err% |     total | benchmark\n+|--------------------:|--------------------:|--------:|----------:|:----------\n+|              127.32 |        7,854,302.69 |    0.3% |      0.00 | `Base58CheckEncode`\n+|               31.95 |       31,303,226.99 |    0.2% |      0.00 | `Base58Decode`\n+\n ...\n ```\n \n Help\n ---------------------\n \n-    src/bench/bench_bitcoin --help\n+    src/bench/bench_bitcoin -?\n \n-To print options like scaling factor or per-benchmark filter.\n+To print the various options, like listing the benchmarks without running them\n+or using a regex filter to only run certain benchmarks.\n \n Notes\n ---------------------"
      },
      {
        "sha": "8c9035c45b6fc258bd12d4c1b11a925b00f5942a",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -4,6 +4,8 @@ The configuration file is used by `bitcoind`, `bitcoin-qt` and `bitcoin-cli`.\n \n All command-line options (except for `-?`, `-help`, `-version` and `-conf`) may be specified in a configuration file, and all configuration file options (except for `includeconf`) may also be specified on the command line. Command-line options override values set in the configuration file and configuration file options override values set in the GUI.\n \n+Changes to the configuration file while `bitcoind` or `bitcoin-qt` is running only take effect after restarting.\n+\n ## Configuration File Format\n \n The configuration file is a plain text file and consists of `option=value` entries, one per line. Leading and trailing whitespaces are removed."
      },
      {
        "sha": "89fd506f1399a7d4b8d4b64918cd54fea7303cc0",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.7)\n+(updated for OpenBSD 6.9)\n \n This guide describes how to build bitcoind, bitcoin-qt, and command-line utilities on OpenBSD.\n \n@@ -67,22 +67,29 @@ export AUTOMAKE_VERSION=1.16\n ```\n Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n \n+Note that building with external signer support currently fails on OpenBSD,\n+hence you have to explicitely disable it by passing the parameter\n+`--disable-external-signer` to the configure script.\n+(Background: the feature requires the header-only library boost::process, which\n+is available on OpenBSD 6.9 via Boost 1.72.0, but contains certain system calls\n+and preprocessor defines like `waitid()` and `WEXITED` that are not available.)\n+\n To configure with wallet:\n ```bash\n-./configure --with-gui=no CC=cc CXX=c++ \\\n+./configure --with-gui=no --disable-external-signer CC=cc CXX=c++ \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n     BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n     MAKE=gmake\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n+./configure --disable-wallet --with-gui=no --disable-external-signer CC=cc CC_FOR_BUILD=cc CXX=c++ MAKE=gmake\n ```\n \n To configure with GUI:\n ```bash\n-./configure --with-gui=yes CC=cc CXX=c++ \\\n+./configure --with-gui=yes --disable-external-signer CC=cc CXX=c++ \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n     BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n     MAKE=gmake"
      },
      {
        "sha": "f88b9739deb840afb3261e418e58453345f0a0ec",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -81,9 +81,26 @@ The first step is to install the mingw-w64 cross-compilation tool chain:\n \n     sudo apt install g++-mingw-w64-x86-64\n \n-Ubuntu Bionic 18.04 <sup>[1](#footnote1)</sup>:\n+Next, set the default `mingw32 g++` compiler option to POSIX<sup>[1](#footnote1)</sup>:\n \n-    sudo update-alternatives --config x86_64-w64-mingw32-g++ # Set the default mingw32 g++ compiler option to posix.\n+```\n+sudo update-alternatives --config x86_64-w64-mingw32-g++\n+```\n+\n+After running the above command, you should see output similar to that below.\n+Choose the option that ends with `posix`.\n+\n+```\n+There are 2 choices for the alternative x86_64-w64-mingw32-g++ (providing /usr/bin/x86_64-w64-mingw32-g++).\n+\n+  Selection    Path                                   Priority   Status\n+------------------------------------------------------------\n+  0            /usr/bin/x86_64-w64-mingw32-g++-win32   60        auto mode\n+* 1            /usr/bin/x86_64-w64-mingw32-g++-posix   30        manual mode\n+  2            /usr/bin/x86_64-w64-mingw32-g++-win32   60        manual mode\n+\n+Press <enter> to keep the current choice[*], or type selection number:\n+```\n \n Once the toolchain is installed the build steps are common:\n "
      },
      {
        "sha": "66c5a76b3b8b2127560c3cf0809fcccdd041ceea",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,8 +6,8 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n-| Boost | [1.71.0](https://www.boost.org/users/download/) | [1.58.0](https://github.com/bitcoin/bitcoin/pull/19667) | No |  |  |\n-| Clang |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n+| Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n+| Clang<sup>[ \\* ](#note1)</sup> |  | [5.0+](https://releases.llvm.org/download.html) (C++17 support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Android only) |\n@@ -28,6 +28,8 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n \n+<a name=\"note1\">Note \\*</a> : When compiling with `-stdlib=libc++`, the minimum supported libc++ version is 7.0.\n+\n Controlling dependencies\n ------------------------\n Some dependencies are not needed in all configurations. The following are some factors that affect the dependency list."
      },
      {
        "sha": "e27ff8754684561ad115131c6ecf2e2a7e422e2e",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -30,6 +30,7 @@ Output descriptors currently support:\n - Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n - Pay-to-script-hash scripts (P2SH), through the `sh` function.\n - Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Pay-to-taproot outputs (P2TR), through the `tr` function.\n - Multisig scripts, through the `multi` function.\n - Multisig scripts where the public keys are sorted lexicographically, through the `sortedmulti` function.\n - Any type of supported address through the `addr` function.\n@@ -54,20 +55,22 @@ Output descriptors currently support:\n - `pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)` describes a set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint `d34db33f`, and derived using path `44'/0'/0'`.\n - `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n - `wsh(sortedmulti(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where one multisig key is the *1/0/`i`* child of the first specified xpub and the other multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default). The order of public keys in the resulting witnessScripts is determined by the lexicographic order of the public keys at that index.\n+- `tr(c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5,{pk(fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556),pk(e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)})` describes a P2TR output with the `c6...` x-only pubkey as internal key, and two script paths.\n \n ## Reference\n \n Descriptors consist of several types of expressions. The top level expression is either a `SCRIPT`, or `SCRIPT#CHECKSUM` where `CHECKSUM` is an 8-character alphanumeric descriptor checksum.\n \n `SCRIPT` expressions:\n - `sh(SCRIPT)` (top level only): P2SH embed the argument.\n-- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `wsh(SCRIPT)` (top level or inside `sh` only): P2WSH embed the argument.\n - `pk(KEY)` (anywhere): P2PK output for the given public key.\n-- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n-- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `pkh(KEY)` (not inside `tr`): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (top level or inside `sh` only): P2WPKH output for the given compressed pubkey.\n - `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)` and `pkh(KEY)`. If the key is compressed, it also includes `wpkh(KEY)` and `sh(wpkh(KEY))`.\n-- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n-- `sortedmulti(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script with keys sorted lexicographically in the resulting script.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (not inside `tr`): k-of-n multisig script.\n+- `sortedmulti(k,KEY_1,KEY_2,...,KEY_n)` (not inside `tr`): k-of-n multisig script with keys sorted lexicographically in the resulting script.\n+- `tr(KEY)` or `tr(KEY,TREE)` (top level only): P2TR output with the specified key as internal key, and optionally a tree of script paths.\n - `addr(ADDR)` (top level only): the script which ADDR expands to.\n - `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n \n@@ -80,12 +83,17 @@ Descriptors consist of several types of expressions. The top level expression is\n - Followed by the actual key, which is either:\n   - Hex encoded public keys (either 66 characters starting with `02` or `03` for a compressed pubkey, or 130 characters starting with `04` for an uncompressed pubkey).\n     - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+    - Inside `tr`, x-only pubkeys are also permitted (64 hex characters).\n   - [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n   - `xpub` encoded extended public key or `xprv` encoded extended private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n     - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n     - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n     - The usage of hardened derivation steps requires providing the private key.\n \n+`TREE` expressions:\n+- any `SCRIPT` expression\n+- An open brace `{`, a `TREE` expression, a comma `,`, a `TREE` expression, and a closing brace `}`\n+\n (Anywhere a `'` suffix is permitted to denote hardened derivation, the suffix `h` can be used instead.)\n \n `ADDR` expressions are any type of supported address:"
      },
      {
        "sha": "583c50a76363fa4d0eee3aba7c7b0e00dc9cb6d9",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -88,7 +88,7 @@ code.\n     separate words (snake_case).\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n-  - Compile-time constant names are all uppercase, and use `_` to separate words.\n+  - Constant names are all uppercase, and use `_` to separate words.\n   - Class names, function names, and method names are UpperCamelCase\n     (PascalCase). Do not prefix class names with `C`.\n   - Test suite naming convention: The Boost test suite in file\n@@ -1160,13 +1160,6 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n   - *Rationale*: If not, the call can not be used with name-based arguments.\n \n-- Set okSafeMode in the RPC command table to a sensible value: safe mode is when the\n-  blockchain is regarded to be in a confused state, and the client deems it unsafe to\n-  do anything irreversible such as send. Anything that just queries should be permitted.\n-\n-  - *Rationale*: Troubleshooting a node in safe mode is difficult if half the\n-    RPCs don't work.\n-\n - Add every non-string RPC argument `(method, idx, name)` to the table `vRPCConvertParams` in `rpc/client.cpp`.\n \n   - *Rationale*: `bitcoin-cli` and the GUI debug console use this table to determine how to"
      },
      {
        "sha": "e670d77ae5d24ca10c40182fc759ea18b9fbc50f",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -56,7 +56,8 @@ Subdirectory       | File(s)               | Description\n `indexes/coinstats/db/` | LevelDB database | Coinstats index; *optional*, used if `-coinstatsindex=1`\n `wallets/`         |                       | [Contains wallets](#multi-wallet-environment); can be specified by `-walletdir` option; if `wallets/` subdirectory does not exist, wallets reside in the [data directory](#data-directory-location)\n `./`               | `anchors.dat`         | Anchor IP address database, created on shutdown and deleted at startup. Anchors are last known outgoing block-relay-only peers that are tried to re-connect to on startup\n-`./`               | `banlist.dat`         | Stores the IPs/subnets of banned nodes\n+`./`               | `banlist.dat`         | Stores the addresses/subnets of banned nodes (deprecated). `bitcoind` or `bitcoin-qt` no longer save the banlist to this file, but read it on startup if `banlist.json` is not present.\n+`./`               | `banlist.json`        | Stores the addresses/subnets of banned nodes.\n `./`               | `bitcoin.conf`        | User-defined [configuration settings](bitcoin-conf.md) for `bitcoind` or `bitcoin-qt`. File is not written to by the software and must be created manually. Path can be specified by `-conf` option\n `./`               | `bitcoind.pid`        | Stores the process ID (PID) of `bitcoind` or `bitcoin-qt` while running; created at start and deleted on shutdown; can be specified by `-pid` option\n `./`               | `debug.log`           | Contains debug information and general logging generated by `bitcoind` or `bitcoin-qt`; can be specified by `-debuglogfile` option\n@@ -109,7 +110,7 @@ Subdirectory | File                 | Description\n \n ## Legacy subdirectories and files\n \n-These subdirectories and files are no longer used by the Bitcoin Core:\n+These subdirectories and files are no longer used by Bitcoin Core:\n \n Path           | Description | Repository notes\n ---------------|-------------|-----------------"
      },
      {
        "sha": "27ef4d9d9f0d995bbebff7af816bc0f55b655693",
        "filename": "doc/i2p.md",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,87 @@\n+# I2P support in Bitcoin Core\n+\n+It is possible to run Bitcoin Core as an\n+[I2P (Invisible Internet Project)](https://en.wikipedia.org/wiki/I2P)\n+service and connect to such services.\n+\n+This [glossary](https://geti2p.net/en/about/glossary) may be useful to get\n+started with I2P terminology.\n+\n+## Run Bitcoin Core with an I2P router (proxy)\n+\n+A running I2P router (proxy) with [SAM](https://geti2p.net/en/docs/api/samv3)\n+enabled is required (there is an [official one](https://geti2p.net) and\n+[a few alternatives](https://en.wikipedia.org/wiki/I2P#Routers)). Notice the IP\n+address and port the SAM proxy is listening to; usually, it is\n+`127.0.0.1:7656`. Once it is up and running with SAM enabled, use the following\n+Bitcoin Core options:\n+\n+```\n+-i2psam=<ip:port>\n+     I2P SAM proxy to reach I2P peers and accept I2P connections (default:\n+     none)\n+\n+-i2pacceptincoming\n+     If set and -i2psam is also set then incoming I2P connections are\n+     accepted via the SAM proxy. If this is not set but -i2psam is set\n+     then only outgoing connections will be made to the I2P network.\n+     Ignored if -i2psam is not set. Listening for incoming I2P\n+     connections is done through the SAM proxy, not by binding to a\n+     local address and port (default: 1)\n+```\n+\n+In a typical situation, this suffices:\n+\n+```\n+bitcoind -i2psam=127.0.0.1:7656\n+```\n+\n+The first time Bitcoin Core connects to the I2P router, its I2P address (and\n+corresponding private key) will be automatically generated and saved in a file\n+named `i2p_private_key` in the Bitcoin Core data directory.\n+\n+## Additional configuration options related to I2P\n+\n+You may set the `debug=i2p` config logging option to have additional\n+information in the debug log about your I2P configuration and connections. Run\n+`bitcoin-cli help logging` for more information.\n+\n+It is possible to restrict outgoing connections in the usual way with\n+`onlynet=i2p`. I2P support was added to Bitcoin Core in version 22.0 (mid 2021)\n+and there may be fewer I2P peers than Tor or IP ones. Therefore, using\n+`onlynet=i2p` alone (without other `onlynet=`) may make a node more susceptible\n+to [Sybil attacks](https://en.bitcoin.it/wiki/Weaknesses#Sybil_attack). Use\n+`bitcoin-cli -addrinfo` to see the number of I2P addresses known to your node.\n+\n+## I2P related information in Bitcoin Core\n+\n+There are several ways to see your I2P address in Bitcoin Core:\n+- in the debug log (grep for `AddLocal`, the I2P address ends in `.b32.i2p`)\n+- in the output of the `getnetworkinfo` RPC in the \"localaddresses\" section\n+- in the output of `bitcoin-cli -netinfo` peer connections dashboard\n+\n+To see which I2P peers your node is connected to, use `bitcoin-cli -netinfo 4`\n+or the `getpeerinfo` RPC (e.g. `bitcoin-cli getpeerinfo`).\n+\n+To see which I2P addresses your node knows, use the `getnodeaddresses 0 i2p`\n+RPC.\n+\n+## Compatibility\n+\n+Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3) protocol\n+to connect to the I2P network. Any I2P router that supports it can be used.\n+\n+## Ports in I2P and Bitcoin Core\n+\n+Bitcoin Core uses the [SAM v3.1](https://geti2p.net/en/docs/api/samv3)\n+protocol. One particularity of SAM v3.1 is that it does not support ports,\n+unlike newer versions of SAM (v3.2 and up) that do support them and default the\n+port numbers to 0. From the point of view of peers that use newer versions of\n+SAM or other protocols that support ports, a SAM v3.1 peer is connecting to them\n+on port 0, from source port 0.\n+\n+To allow future upgrades to newer versions of SAM, Bitcoin Core sets its\n+listening port to 0 when listening for incoming I2P connections and advertises\n+its own I2P address with port 0. Furthermore, it will not attempt to connect to\n+I2P addresses with a non-zero port number because with SAM v3.1 the destination\n+port (`TO_PORT`) is always set to 0 and is not in the control of Bitcoin Core."
      },
      {
        "sha": "9a02bbd275f616c77fa9d4de5f6f24d7106356ae",
        "filename": "doc/release-notes-20833.md",
        "status": "removed",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/doc/release-notes-20833.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/doc/release-notes-20833.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20833.md?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,12 +0,0 @@\n-Updated RPCs\n-------------\n-\n-- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n-  API may be unstable). This is intended for testing transaction packages with dependency\n-  relationships; it is not recommended for batch-validating independent transactions. In addition to\n-  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n-  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n-  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n-  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n-  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n-"
      },
      {
        "sha": "60eed6838f7b4690f945fdcc253f9f2224667038",
        "filename": "doc/release-notes-20867.md",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/doc/release-notes-20867.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/doc/release-notes-20867.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20867.md?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,11 +0,0 @@\n-Wallet\n-------\n-\n-- We now support up to 20 keys in `multi()` and `sortedmulti()` descriptors\n-  under `wsh()`. (#20867)\n-\n-Updated RPCs\n-------------\n-\n-- `addmultisigaddress` and `createmultisig` now support up to 20 keys for\n-  Segwit addresses."
      },
      {
        "sha": "dc28ccb9edd5feaa24ea1ff5d9671c0ca89f86f5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,3 +1,5 @@\n+# Release notes now being edited on https://github.com/bitcoin-core/bitcoin-devwiki/wiki/22.0-Release-Notes-draft\n+\n *After branching off for a major version release of Bitcoin Core, use this\n template to create the initial release notes draft.*\n \n@@ -59,6 +61,13 @@ Notable changes\n P2P and network changes\n -----------------------\n \n+- This release removes support for Tor version 2 hidden services in favor of Tor\n+  v3 only, as the Tor network [dropped support for Tor\n+  v2](https://blog.torproject.org/v2-deprecation-timeline) with the release of\n+  Tor version 0.4.6.  Henceforth, Bitcoin Core ignores Tor v2 addresses; it\n+  neither rumors them over the network to other peers, nor stores them in memory\n+  or to `peers.dat`.  (#22050)\n+\n - Added NAT-PMP port mapping support via\n   [`libnatpmp`](https://miniupnp.tuxfamily.org/libnatpmp.html). (#18077)\n \n@@ -114,6 +123,18 @@ Updated RPCs\n - `getnodeaddresses` now also accepts a \"network\" argument (ipv4, ipv6, onion,\n   or i2p) to return only addresses of the specified network.  (#21843)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,\n+  API may be unstable). This is intended for testing transaction packages with dependency\n+  relationships; it is not recommended for batch-validating independent transactions. In addition to\n+  mempool policy, package policies apply: the list cannot contain more than 25 transactions or have a\n+  total size exceeding 101K virtual bytes, and cannot conflict with (spend the same inputs as) each other or\n+  the mempool, even if it would be a valid BIP125 replace-by-fee. There are some known limitations to\n+  the accuracy of the test accept: it's possible for `testmempoolaccept` to return \"allowed\"=True for a\n+  group of transactions, but \"too-long-mempool-chain\" if they are actually submitted. (#20833)\n+\n+- `addmultisigaddress` and `createmultisig` now support up to 20 keys for\n+  Segwit addresses. (#20867)\n+\n Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n \n New RPCs\n@@ -142,8 +163,12 @@ Tools and Utilities\n - A new CLI `-addrinfo` command returns the number of addresses known to the\n   node per network type (including Tor v2 versus v3) and total. This can be\n   useful to see if the node knows enough addresses in a network to use options\n-  like `-onlynet=<network>` or to upgrade to current and future Tor releases\n-  that support Tor v3 addresses only.  (#21595)\n+  like `-onlynet=<network>` or to upgrade to this release of Bitcoin Core 22.0\n+  that supports Tor v3 only.  (#21595)\n+\n+- A new `-rpcwaittimeout` argument to `bitcoin-cli` sets the timeout\n+  in seconds to use with `-rpcwait`. If the timeout expires,\n+  `bitcoin-cli` will report a failure. (#21056)\n \n Wallet\n ------\n@@ -160,6 +185,9 @@ Wallet\n   Note that the resulting transaction may become invalid if one of the unsafe inputs disappears.\n   If that happens, the transaction must be funded with different inputs and republished. (#21359)\n \n+- We now support up to 20 keys in `multi()` and `sortedmulti()` descriptors\n+  under `wsh()`. (#20867)\n+\n GUI changes\n -----------\n "
      },
      {
        "sha": "75a574ee318fdeac4c1cb76b35d8d88b069ecc9b",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 12,
        "deletions": 19,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -37,6 +37,12 @@ Release Process\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n      that causes rejection of blocks in the past history.\n - Clear the release notes and move them to the wiki (see \"Write the release notes\" below).\n+- Translations on Transifex\n+    - Create [a new resource](https://www.transifex.com/bitcoin/bitcoin/content/) named after the major version with the slug `[bitcoin.qt-translation-<RRR>x]`, where `RRR` is the major branch number padded with zeros. Use `src/qt/locale/bitcoin_en.xlf` to create it.\n+    - In the project workflow settings, ensure that [Translation Memory Fill-up](https://docs.transifex.com/translation-memory/enabling-autofill) is enabled and that [Translation Memory Context Matching](https://docs.transifex.com/translation-memory/translation-memory-with-context) is disabled.\n+    - Update the Transifex slug in [`.tx/config`](/.tx/config) to the slug of the resource created in the first step. This identifies which resource the translations will be synchronized from.\n+    - Make an announcement that translators can start translating for the new version. You can use one of the [previous announcements](https://www.transifex.com/bitcoin/bitcoin/announcements/) as a template.\n+    - Change the auto-update URL for the resource to `master`, e.g. `https://raw.githubusercontent.com/bitcoin/bitcoin/master/src/qt/locale/bitcoin_en.xlf`. (Do this only after the previous steps, to prevent an auto-update from interfering.)\n \n #### After branch-off (on master)\n \n@@ -46,6 +52,8 @@ Release Process\n \n - Update the versions.\n - Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/17079) for an example) and provide a link to it in the release announcements where useful.\n+- Translations on Transifex\n+    - Change the auto-update URL for the new major version's resource away from `master` and to the branch, e.g. `https://raw.githubusercontent.com/bitcoin/bitcoin/<branch>/src/qt/locale/bitcoin_en.xlf`. Do not forget this or it will keep tracking the translations on master instead, drifting away from the specific major release.\n \n #### Before final release\n \n@@ -278,7 +286,7 @@ The `*-debug*` files generated by the gitian build contain debug symbols\n for troubleshooting by developers. It is assumed that anyone that is interested\n in debugging can run gitian to generate the files for themselves. To avoid\n end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoin.org server, nor put them in the torrent*.\n+space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n - GPG-sign it, delete the unsigned file:\n ```\n@@ -288,32 +296,17 @@ rm SHA256SUMS\n (the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n+- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n   into `/var/www/bin/bitcoin-core-${VERSION}`\n \n - A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n ```bash\n transmission-show -m <torrent file>\n ```\n Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoin.org` to download the binary distribution.\n+people without access to `bitcoincore.org` to download the binary distribution.\n Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoin.org (see below for bitcoin.org update instructions).\n-\n-- Update bitcoin.org version\n-\n-  - First, check to see if the Bitcoin.org maintainers have prepared a\n-    release: https://github.com/bitcoin-dot-org/bitcoin.org/labels/Core\n-\n-      - If they have, it will have previously failed their CI\n-        checks because the final release files weren't uploaded.\n-        Trigger a CI rebuild---if it passes, merge.\n-\n-  - If they have not prepared a release, follow the Bitcoin.org release\n-    instructions: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n-\n-  - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n-    as update the OS download links.\n+bitcoincore.org.\n \n - Update other repositories and websites for new version\n "
      },
      {
        "sha": "7d134b64e0e2a455976fd3306de76e1a4c13a73c",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -5,6 +5,14 @@ It is possible to run Bitcoin Core as a Tor onion service, and connect to such s\n The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on port 9150. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort) for how to properly\n configure Tor.\n \n+## Compatibility\n+\n+- Starting with version 22.0, Bitcoin Core only supports Tor version 3 hidden\n+  services (Tor v3). Tor v2 addresses are ignored by Bitcoin Core and neither\n+  relayed nor stored.\n+\n+- Tor removed v2 support beginning with version 0.4.6.\n+\n ## How to see information about your Tor configuration via Bitcoin Core\n \n There are several ways to see your local onion address in Bitcoin Core:\n@@ -18,7 +26,7 @@ information in the debug log about your Tor configuration.\n CLI `-addrinfo` returns the number of addresses known to your node per network\n type, including Tor v2 and v3. This is useful to see how many onion addresses\n are known to your node for `-onlynet=onion` and how many Tor v3 addresses it\n-knows when upgrading to current and future Tor releases that support Tor v3 only.\n+knows when upgrading to Bitcoin Core v22.0 and up that supports Tor v3 only.\n \n ## 1. Run Bitcoin Core behind a Tor proxy\n "
      },
      {
        "sha": "97a8fbfff21970a7c26c5ab29d1b0f597d221251",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -63,17 +63,12 @@ username = USERNAME\n The Transifex Bitcoin project config file is included as part of the repo. It can be found at `.tx/config`, however you shouldn\u2019t need to change anything.\n \n ### Synchronising translations\n-To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools).\n \n-1. `python3 ../bitcoin-maintainer-tools/update-translations.py`\n-2. `git add` new translations from `src/qt/locale/`\n-3. Update `src/qt/bitcoin_locale.qrc` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/        <file alias=\"\\2\">locale\\/\\1.qm<\\/file>/'\n+To assist in updating translations, a helper script is available in the [maintainer-tools repo](https://github.com/bitcoin-core/bitcoin-maintainer-tools). To use it and commit the result, simply do:\n+\n ```\n-4. Update `src/Makefile.qt_locale.include` manually or via\n-```bash\n-git ls-files src/qt/locale/*ts|xargs -n1 basename|sed 's/\\(bitcoin_\\(.*\\)\\).ts/  qt\\/locale\\/\\1.ts \\\\/'\n+python3 ../bitcoin-maintainer-tools/update-translations.py\n+git commit -a\n ```\n \n **Do not directly download translations** one by one from the Transifex website, as we do a few post-processing steps before committing the translations."
      },
      {
        "sha": "407fdf5a8fd4795411536d00a57c7a84567a1542",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%:\n+print-%: FORCE\n \t@echo '$*'='$($*)'\n \n DIST_SUBDIRS = secp256k1 univalue\n@@ -145,6 +145,8 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentinfo.h \\\n+  deploymentstatus.h \\\n   external_signer.h \\\n   flatfile.h \\\n   fs.h \\\n@@ -272,7 +274,6 @@ BITCOIN_CORE_H = \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n-  versionbitsinfo.h \\\n   wallet/bdb.h \\\n   wallet/coincontrol.h \\\n   wallet/coinselection.h \\\n@@ -328,6 +329,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   consensus/tx_verify.cpp \\\n   dbwrapper.cpp \\\n+  deploymentstatus.cpp \\\n   flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n@@ -351,6 +353,7 @@ libbitcoin_server_a_SOURCES = \\\n   node/ui_interface.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n+  policy/packages.cpp \\\n   policy/rbf.cpp \\\n   policy/settings.cpp \\\n   pow.cpp \\\n@@ -539,6 +542,7 @@ libbitcoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n+  deploymentinfo.cpp \\\n   external_signer.cpp \\\n   init/common.cpp \\\n   key.cpp \\\n@@ -560,7 +564,6 @@ libbitcoin_common_a_SOURCES = \\\n   script/sign.cpp \\\n   script/signingprovider.cpp \\\n   script/standard.cpp \\\n-  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n \n@@ -811,23 +814,23 @@ clean-local:\n check-symbols: $(bin_PROGRAMS)\n if TARGET_DARWIN\n \t@echo \"Checking macOS dynamic libraries...\"\n-\t$(AM_V_at) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n if TARGET_WINDOWS\n \t@echo \"Checking Windows dynamic libraries...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n-if GLIBC_BACK_COMPAT\n+if TARGET_LINUX\n \t@echo \"Checking glibc back compat...\"\n-\t$(AM_V_at) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) CPPFILT='$(CPPFILT)' $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n check-security: $(bin_PROGRAMS)\n if HARDEN\n \t@echo \"Checking binary security...\"\n-\t$(AM_V_at) OBJDUMP=$(OBJDUMP) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n+\t$(AM_V_at) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n endif\n \n libbitcoin_ipc_mpgen_input = \\"
      },
      {
        "sha": "2a8e4a0aaca0b6f83487290e3b47f1b1f138142f",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/mempool_stress.cpp \\\n   bench/nanobench.h \\\n   bench/nanobench.cpp \\\n+  bench/peer_eviction.cpp \\\n   bench/rpc_blockchain.cpp \\\n   bench/rpc_mempool.cpp \\\n   bench/util_time.cpp \\"
      },
      {
        "sha": "ce1f93f11f3b50d1e30f439b56767e7199205ff8",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -22,6 +22,7 @@ LEVELDB_CPPFLAGS_INT += -DHAVE_SNAPPY=0 -DHAVE_CRC32C=1\n LEVELDB_CPPFLAGS_INT += -DHAVE_FDATASYNC=@HAVE_FDATASYNC@\n LEVELDB_CPPFLAGS_INT += -DHAVE_FULLFSYNC=@HAVE_FULLFSYNC@\n LEVELDB_CPPFLAGS_INT += -DHAVE_O_CLOEXEC=@HAVE_O_CLOEXEC@\n+LEVELDB_CPPFLAGS_INT += -DFALLTHROUGH_INTENDED=[[fallthrough]]\n \n if WORDS_BIGENDIAN\n LEVELDB_CPPFLAGS_INT += -DLEVELDB_IS_BIG_ENDIAN=1"
      },
      {
        "sha": "a1821cafe3512e575bcd5084fef0dc27b02c37ab",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -365,12 +365,12 @@ translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCO\n $(QT_QRC_LOCALE_CPP): $(QT_QRC_LOCALE) $(QT_QM)\n \t@test -f $(RCC)\n \t@cp -f $< $(@D)/temp_$(<F)\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin_locale $(@D)/temp_$(<F) > $@\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin_locale --format-version 1 $(@D)/temp_$(<F) > $@\n \t@rm $(@D)/temp_$(<F)\n \n $(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_FONTS) $(RES_ICONS) $(RES_ANIMATION)\n \t@test -f $(RCC)\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin $< > $@\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name bitcoin --format-version 1 $< > $@\n \n CLEAN_QT = $(nodist_qt_libbitcoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt/*.gcda qt/*.gcno qt/temp_bitcoin_locale.qrc\n "
      },
      {
        "sha": "fc2fd801660325d9a12787c5882bc460d1732479",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -35,11 +35,12 @@ BITCOIN_TEST_SUITE = \\\n   $(TEST_UTIL_H)\n \n FUZZ_SUITE_LD_COMMON = \\\n+ $(LIBTEST_UTIL) \\\n+ $(LIBTEST_FUZZ) \\\n  $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_WALLET) \\\n  $(LIBBITCOIN_COMMON) \\\n  $(LIBBITCOIN_UTIL) \\\n- $(LIBTEST_UTIL) \\\n- $(LIBTEST_FUZZ) \\\n  $(LIBBITCOIN_CONSENSUS) \\\n  $(LIBBITCOIN_CRYPTO) \\\n  $(LIBBITCOIN_CLI) \\\n@@ -160,7 +161,6 @@ BITCOIN_TESTS += \\\n   wallet/test/scriptpubkeyman_tests.cpp\n \n FUZZ_SUITE_LD_COMMON +=\\\n- $(LIBBITCOIN_WALLET) \\\n  $(SQLITE_LIBS) \\\n  $(BDB_LIBS)\n "
      },
      {
        "sha": "b8fd019bab9c335410a50e21ba4abff8a16dceeb",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 108,
        "deletions": 13,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,19 +11,78 @@\n #include <cstdint>\n #include <hash.h>\n #include <logging/timer.h>\n+#include <netbase.h>\n #include <random.h>\n #include <streams.h>\n #include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/settings.h>\n #include <util/system.h>\n \n+CBanEntry::CBanEntry(const UniValue& json)\n+    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n+      nBanUntil(json[\"banned_until\"].get_int64())\n+{\n+}\n+\n+UniValue CBanEntry::ToJson() const\n+{\n+    UniValue json(UniValue::VOBJ);\n+    json.pushKV(\"version\", nVersion);\n+    json.pushKV(\"ban_created\", nCreateTime);\n+    json.pushKV(\"banned_until\", nBanUntil);\n+    return json;\n+}\n+\n namespace {\n \n+static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n+\n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans)\n+{\n+    UniValue bans_json(UniValue::VARR);\n+    for (const auto& it : bans) {\n+        const auto& address = it.first;\n+        const auto& ban_entry = it.second;\n+        UniValue j = ban_entry.ToJson();\n+        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n+        bans_json.push_back(j);\n+    }\n+    return bans_json;\n+}\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n+{\n+    for (const auto& ban_entry_json : bans_json.getValues()) {\n+        CSubNet subnet;\n+        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n+        if (!LookupSubNet(subnet_str, subnet)) {\n+            throw std::runtime_error(\n+                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+        }\n+        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n+    }\n+}\n+\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {\n     // Write and commit header, data\n     try {\n-        CHashWriter hasher(SER_DISK, CLIENT_VERSION);\n+        CHashWriter hasher(stream.GetType(), stream.GetVersion());\n         stream << Params().MessageStart() << data;\n         hasher << Params().MessageStart() << data;\n         stream << hasher.GetHash();\n@@ -35,7 +94,7 @@ bool SerializeDB(Stream& stream, const Data& data)\n }\n \n template <typename Data>\n-bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data)\n+bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data, int version)\n {\n     // Generate random temporary filename\n     uint16_t randv = 0;\n@@ -45,7 +104,7 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n     // open temp output file, and associate with CAutoFile\n     fs::path pathTmp = gArgs.GetDataDirNet() / tmpfn;\n     FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n-    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(file, SER_DISK, version);\n     if (fileout.IsNull()) {\n         fileout.fclose();\n         remove(pathTmp);\n@@ -106,11 +165,11 @@ bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n }\n \n template <typename Data>\n-bool DeserializeFileDB(const fs::path& path, Data& data)\n+bool DeserializeFileDB(const fs::path& path, Data& data, int version)\n {\n     // open input file, and associate with CAutoFile\n     FILE* file = fsbridge::fopen(path, \"rb\");\n-    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(file, SER_DISK, version);\n     if (filein.IsNull()) {\n         LogPrintf(\"Missing or invalid file %s\\n\", path.string());\n         return false;\n@@ -119,18 +178,54 @@ bool DeserializeFileDB(const fs::path& path, Data& data)\n }\n } // namespace\n \n-CBanDB::CBanDB(fs::path ban_list_path) : m_ban_list_path(std::move(ban_list_path))\n+CBanDB::CBanDB(fs::path ban_list_path)\n+    : m_banlist_dat(ban_list_path.string() + \".dat\"),\n+      m_banlist_json(ban_list_path.string() + \".json\")\n {\n }\n \n bool CBanDB::Write(const banmap_t& banSet)\n {\n-    return SerializeFileDB(\"banlist\", m_ban_list_path, banSet);\n+    std::vector<std::string> errors;\n+    if (util::WriteSettings(m_banlist_json, {{JSON_KEY, BanMapToJson(banSet)}}, errors)) {\n+        return true;\n+    }\n+\n+    for (const auto& err : errors) {\n+        error(\"%s\", err);\n+    }\n+    return false;\n }\n \n-bool CBanDB::Read(banmap_t& banSet)\n+bool CBanDB::Read(banmap_t& banSet, bool& dirty)\n {\n-    return DeserializeFileDB(m_ban_list_path, banSet);\n+    // If the JSON banlist does not exist, then try to read the non-upgraded banlist.dat.\n+    if (!fs::exists(m_banlist_json)) {\n+        // If this succeeds then we need to flush to disk in order to create the JSON banlist.\n+        dirty = true;\n+        return DeserializeFileDB(m_banlist_dat, banSet, CLIENT_VERSION);\n+    }\n+\n+    dirty = false;\n+\n+    std::map<std::string, util::SettingsValue> settings;\n+    std::vector<std::string> errors;\n+\n+    if (!util::ReadSettings(m_banlist_json, settings, errors)) {\n+        for (const auto& err : errors) {\n+            LogPrintf(\"Cannot load banlist %s: %s\\n\", m_banlist_json.string(), err);\n+        }\n+        return false;\n+    }\n+\n+    try {\n+        BanMapFromJson(settings[JSON_KEY], banSet);\n+    } catch (const std::runtime_error& e) {\n+        LogPrintf(\"Cannot parse banlist %s: %s\\n\", m_banlist_json.string(), e.what());\n+        return false;\n+    }\n+\n+    return true;\n }\n \n CAddrDB::CAddrDB()\n@@ -140,12 +235,12 @@ CAddrDB::CAddrDB()\n \n bool CAddrDB::Write(const CAddrMan& addr)\n {\n-    return SerializeFileDB(\"peers\", pathAddr, addr);\n+    return SerializeFileDB(\"peers\", pathAddr, addr, CLIENT_VERSION);\n }\n \n bool CAddrDB::Read(CAddrMan& addr)\n {\n-    return DeserializeFileDB(pathAddr, addr);\n+    return DeserializeFileDB(pathAddr, addr, CLIENT_VERSION);\n }\n \n bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n@@ -161,13 +256,13 @@ bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& anchors)\n {\n     LOG_TIME_SECONDS(strprintf(\"Flush %d outbound block-relay-only peer addresses to anchors.dat\", anchors.size()));\n-    SerializeFileDB(\"anchors\", anchors_db_path, anchors);\n+    SerializeFileDB(\"anchors\", anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT);\n }\n \n std::vector<CAddress> ReadAnchors(const fs::path& anchors_db_path)\n {\n     std::vector<CAddress> anchors;\n-    if (DeserializeFileDB(anchors_db_path, anchors)) {\n+    if (DeserializeFileDB(anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT)) {\n         LogPrintf(\"Loaded %i addresses from %s\\n\", anchors.size(), anchors_db_path.filename());\n     } else {\n         anchors.clear();"
      },
      {
        "sha": "399103c99199d661c12e6c21de20cfd563a2085b",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -9,6 +9,7 @@\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <serialize.h>\n+#include <univalue.h>\n \n #include <string>\n #include <vector>\n@@ -36,6 +37,13 @@ class CBanEntry\n         nCreateTime = nCreateTimeIn;\n     }\n \n+    /**\n+     * Create a ban entry from JSON.\n+     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n+     * @throw std::runtime_error if the JSON does not have the expected fields.\n+     */\n+    explicit CBanEntry(const UniValue& json);\n+\n     SERIALIZE_METHODS(CBanEntry, obj)\n     {\n         uint8_t ban_reason = 2; //! For backward compatibility\n@@ -48,6 +56,12 @@ class CBanEntry\n         nCreateTime = 0;\n         nBanUntil = 0;\n     }\n+\n+    /**\n+     * Generate a JSON representation of this ban entry.\n+     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n+     */\n+    UniValue ToJson() const;\n };\n \n /** Access to the (IP) address database (peers.dat) */\n@@ -62,15 +76,30 @@ class CAddrDB\n     static bool Read(CAddrMan& addr, CDataStream& ssPeers);\n };\n \n-/** Access to the banlist database (banlist.dat) */\n+/** Access to the banlist databases (banlist.json and banlist.dat) */\n class CBanDB\n {\n private:\n-    const fs::path m_ban_list_path;\n+    /**\n+     * JSON key under which the data is stored in the json database.\n+     */\n+    static constexpr const char* JSON_KEY = \"banned_nets\";\n+\n+    const fs::path m_banlist_dat;\n+    const fs::path m_banlist_json;\n public:\n     explicit CBanDB(fs::path ban_list_path);\n     bool Write(const banmap_t& banSet);\n-    bool Read(banmap_t& banSet);\n+\n+    /**\n+     * Read the banlist from disk.\n+     * @param[out] banSet The loaded list. Set if `true` is returned, otherwise it is left\n+     * in an undefined state.\n+     * @param[out] dirty Indicates whether the loaded list needs flushing to disk. Set if\n+     * `true` is returned, otherwise it is left in an undefined state.\n+     * @return true on success\n+     */\n+    bool Read(banmap_t& banSet, bool& dirty);\n };\n \n /**"
      },
      {
        "sha": "389d106164d5995f195067ccec7c58edb733ab39",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 169,
        "deletions": 5,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,12 +6,15 @@\n #include <addrman.h>\n \n #include <hash.h>\n+#include <i2p.h>\n #include <logging.h>\n #include <netaddress.h>\n #include <serialize.h>\n \n #include <cmath>\n #include <optional>\n+#include <unordered_map>\n+#include <unordered_set>\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey, const std::vector<bool> &asmap) const\n {\n@@ -75,21 +78,57 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n+void CAddrMan::RemoveInvalid()\n+{\n+    for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n+        for (size_t i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvNew[bucket][i];\n+            if (id != -1 && !mapInfo[id].IsValid()) {\n+                ClearNew(bucket, i);\n+            }\n+        }\n+    }\n+\n+    for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; ++bucket) {\n+        for (size_t i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvTried[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            const auto& addr_info = mapInfo[id];\n+            if (addr_info.IsValid()) {\n+                continue;\n+            }\n+            vvTried[bucket][i] = -1;\n+            --nTried;\n+            SwapRandom(addr_info.nRandomPos, vRandom.size() - 1);\n+            vRandom.pop_back();\n+            mapAddr.erase(addr_info);\n+            mapInfo.erase(id);\n+            m_tried_collisions.erase(id);\n+        }\n+    }\n+}\n+\n CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n {\n-    std::map<CNetAddr, int>::iterator it = mapAddr.find(addr);\n+    AssertLockHeld(cs);\n+\n+    const auto it = mapAddr.find(addr);\n     if (it == mapAddr.end())\n         return nullptr;\n     if (pnId)\n         *pnId = (*it).second;\n-    std::map<int, CAddrInfo>::iterator it2 = mapInfo.find((*it).second);\n+    const auto it2 = mapInfo.find((*it).second);\n     if (it2 != mapInfo.end())\n         return &(*it2).second;\n     return nullptr;\n }\n \n CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)\n {\n+    AssertLockHeld(cs);\n+\n     int nId = nIdCount++;\n     mapInfo[nId] = CAddrInfo(addr, addrSource);\n     mapAddr[addr] = nId;\n@@ -102,6 +141,8 @@ CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, in\n \n void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)\n {\n+    AssertLockHeld(cs);\n+\n     if (nRndPos1 == nRndPos2)\n         return;\n \n@@ -122,6 +163,8 @@ void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)\n \n void CAddrMan::Delete(int nId)\n {\n+    AssertLockHeld(cs);\n+\n     assert(mapInfo.count(nId) != 0);\n     CAddrInfo& info = mapInfo[nId];\n     assert(!info.fInTried);\n@@ -136,6 +179,8 @@ void CAddrMan::Delete(int nId)\n \n void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)\n {\n+    AssertLockHeld(cs);\n+\n     // if there is an entry in the specified bucket, delete it.\n     if (vvNew[nUBucket][nUBucketPos] != -1) {\n         int nIdDelete = vvNew[nUBucket][nUBucketPos];\n@@ -151,6 +196,8 @@ void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)\n \n void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n {\n+    AssertLockHeld(cs);\n+\n     // remove the entry from all new buckets\n     for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n         int pos = info.GetBucketPosition(nKey, true, bucket);\n@@ -199,6 +246,8 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n \n void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime)\n {\n+    AssertLockHeld(cs);\n+\n     int nId;\n \n     nLastGood = nTime;\n@@ -265,6 +314,8 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n \n bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n {\n+    AssertLockHeld(cs);\n+\n     if (!addr.IsRoutable())\n         return false;\n \n@@ -338,6 +389,8 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n \n void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n {\n+    AssertLockHeld(cs);\n+\n     CAddrInfo* pinfo = Find(addr);\n \n     // if not found, bail out\n@@ -360,7 +413,9 @@ void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n \n CAddrInfo CAddrMan::Select_(bool newOnly)\n {\n-    if (size() == 0)\n+    AssertLockHeld(cs);\n+\n+    if (vRandom.empty())\n         return CAddrInfo();\n \n     if (newOnly && nNew == 0)\n@@ -408,8 +463,10 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n #ifdef DEBUG_ADDRMAN\n int CAddrMan::Check_()\n {\n-    std::set<int> setTried;\n-    std::map<int, int> mapNew;\n+    AssertLockHeld(cs);\n+\n+    std::unordered_set<int> setTried;\n+    std::unordered_map<int, int> mapNew;\n \n     if (vRandom.size() != (size_t)(nTried + nNew))\n         return -7;\n@@ -485,6 +542,8 @@ int CAddrMan::Check_()\n \n void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size_t max_pct, std::optional<Network> network)\n {\n+    AssertLockHeld(cs);\n+\n     size_t nNodes = vRandom.size();\n     if (max_pct != 0) {\n         nNodes = max_pct * nNodes / 100;\n@@ -517,6 +576,8 @@ void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size\n \n void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n {\n+    AssertLockHeld(cs);\n+\n     CAddrInfo* pinfo = Find(addr);\n \n     // if not found, bail out\n@@ -537,6 +598,8 @@ void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n \n void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n {\n+    AssertLockHeld(cs);\n+\n     CAddrInfo* pinfo = Find(addr);\n \n     // if not found, bail out\n@@ -555,6 +618,8 @@ void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n \n void CAddrMan::ResolveCollisions_()\n {\n+    AssertLockHeld(cs);\n+\n     for (std::set<int>::iterator it = m_tried_collisions.begin(); it != m_tried_collisions.end();) {\n         int id_new = *it;\n \n@@ -614,6 +679,8 @@ void CAddrMan::ResolveCollisions_()\n \n CAddrInfo CAddrMan::SelectTriedCollision_()\n {\n+    AssertLockHeld(cs);\n+\n     if (m_tried_collisions.size() == 0) return CAddrInfo();\n \n     std::set<int>::iterator it = m_tried_collisions.begin();\n@@ -665,3 +732,100 @@ std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n     }\n     return bits;\n }\n+\n+void CAddrMan::ResetI2PPorts()\n+{\n+    for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n+        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvNew[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            auto it = mapInfo.find(id);\n+            if (it == mapInfo.end()) {\n+                return;\n+            }\n+            auto& addr_info = it->second;\n+            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n+                continue;\n+            }\n+\n+            auto addr_info_newport = addr_info;\n+            // The below changes addr_info_newport.GetKey(), which is used in finding a\n+            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n+            addr_info_newport.port = I2P_SAM31_PORT;\n+\n+            // Reposition entries of vvNew within the same bucket because we don't know the source\n+            // address which led to the decision to store the entry in vvNew[bucket] so we can't\n+            // re-evaluate that decision, but even if we could, CAddrInfo::GetNewBucket() does not\n+            // use CAddrInfo::GetKey() so it would end up in the same bucket as before the port\n+            // change.\n+            const auto i_target = addr_info_newport.GetBucketPosition(nKey, true, bucket);\n+\n+            if (i_target == i) { // No need to re-position.\n+                addr_info = addr_info_newport;\n+                continue;\n+            }\n+\n+            // Reposition from i to i_target, removing the entry from i_target (if any).\n+            ClearNew(bucket, i_target);\n+            vvNew[bucket][i_target] = id;\n+            vvNew[bucket][i] = -1;\n+            addr_info = addr_info_newport;\n+        }\n+    }\n+\n+    for (int bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; ++bucket) {\n+        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n+            const auto id = vvTried[bucket][i];\n+            if (id == -1) {\n+                continue;\n+            }\n+            auto it = mapInfo.find(id);\n+            if (it == mapInfo.end()) {\n+                return;\n+            }\n+            auto& addr_info = it->second;\n+            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n+                continue;\n+            }\n+\n+            auto addr_info_newport = addr_info;\n+            // The below changes addr_info_newport.GetKey(), which is used in finding a\n+            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n+            addr_info_newport.port = I2P_SAM31_PORT;\n+\n+            const auto bucket_target = addr_info_newport.GetTriedBucket(nKey, m_asmap);\n+            const auto i_target = addr_info_newport.GetBucketPosition(nKey, false, bucket_target);\n+\n+            if (bucket_target == bucket && i_target == i) { // No need to re-position.\n+                addr_info = addr_info_newport;\n+                continue;\n+            }\n+\n+            // Reposition from (bucket, i) to (bucket_target, i_target). If the latter is\n+            // occupied, then move the entry from there to vvNew.\n+\n+            const auto old_target_id = vvTried[bucket_target][i_target];\n+            if (old_target_id != -1) {\n+                CAddrInfo& old_target_info = mapInfo[old_target_id];\n+\n+                old_target_info.fInTried = false;\n+                vvTried[bucket_target][i_target] = -1;\n+                --nTried;\n+\n+                const auto new_bucket = old_target_info.GetNewBucket(nKey, m_asmap);\n+                const auto new_bucket_i = old_target_info.GetBucketPosition(nKey, true, new_bucket);\n+                ClearNew(new_bucket, new_bucket_i);\n+\n+                old_target_info.nRefCount = 1;\n+                vvNew[new_bucket][new_bucket_i] = old_target_id;\n+                ++nNew;\n+            }\n+\n+            vvTried[bucket_target][i_target] = id;\n+            vvTried[bucket][i] = -1;\n+            addr_info = addr_info_newport;\n+        }\n+    }\n+}"
      },
      {
        "sha": "2a5c6c06b4ef722a5a826d02506d3bb9151aa305",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 66,
        "deletions": 45,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -8,22 +8,22 @@\n \n #include <clientversion.h>\n #include <config/bitcoin-config.h>\n+#include <fs.h>\n+#include <hash.h>\n #include <netaddress.h>\n #include <protocol.h>\n #include <random.h>\n+#include <streams.h>\n #include <sync.h>\n #include <timedata.h>\n #include <tinyformat.h>\n #include <util/system.h>\n \n-#include <fs.h>\n-#include <hash.h>\n #include <iostream>\n-#include <map>\n #include <optional>\n #include <set>\n #include <stdint.h>\n-#include <streams.h>\n+#include <unordered_map>\n #include <vector>\n \n /**\n@@ -231,6 +231,7 @@ class CAddrMan\n      */\n     template <typename Stream>\n     void Serialize(Stream& s_) const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n \n@@ -251,7 +252,7 @@ class CAddrMan\n \n         int nUBuckets = ADDRMAN_NEW_BUCKET_COUNT ^ (1 << 30);\n         s << nUBuckets;\n-        std::map<int, int> mapUnkIds;\n+        std::unordered_map<int, int> mapUnkIds;\n         int nIds = 0;\n         for (const auto& entry : mapInfo) {\n             mapUnkIds[entry.first] = nIds;\n@@ -296,10 +297,11 @@ class CAddrMan\n \n     template <typename Stream>\n     void Unserialize(Stream& s_)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n \n-        Clear();\n+        assert(vRandom.empty());\n \n         Format format;\n         s_ >> Using<CustomUintFormatter<1>>(format);\n@@ -435,23 +437,28 @@ class CAddrMan\n \n         // Prune new entries with refcount 0 (as a result of collisions).\n         int nLostUnk = 0;\n-        for (std::map<int, CAddrInfo>::const_iterator it = mapInfo.begin(); it != mapInfo.end(); ) {\n+        for (auto it = mapInfo.cbegin(); it != mapInfo.cend(); ) {\n             if (it->second.fInTried == false && it->second.nRefCount == 0) {\n-                std::map<int, CAddrInfo>::const_iterator itCopy = it++;\n+                const auto itCopy = it++;\n                 Delete(itCopy->first);\n-                nLostUnk++;\n+                ++nLostUnk;\n             } else {\n-                it++;\n+                ++it;\n             }\n         }\n         if (nLost + nLostUnk > 0) {\n             LogPrint(BCLog::ADDRMAN, \"addrman lost %i new and %i tried addresses due to collisions\\n\", nLostUnk, nLost);\n         }\n \n+        RemoveInvalid();\n+\n+        ResetI2PPorts();\n+\n         Check();\n     }\n \n     void Clear()\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         std::vector<int>().swap(vRandom);\n@@ -487,26 +494,15 @@ class CAddrMan\n \n     //! Return the number of (unique) addresses in all tables.\n     size_t size() const\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n         return vRandom.size();\n     }\n \n-    //! Consistency check\n-    void Check()\n-    {\n-#ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n-    }\n-\n     //! Add a single address.\n     bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         bool fRet = false;\n@@ -521,6 +517,7 @@ class CAddrMan\n \n     //! Add multiple addresses.\n     bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         int nAdd = 0;\n@@ -536,6 +533,7 @@ class CAddrMan\n \n     //! Mark an entry as accessible.\n     void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n@@ -545,6 +543,7 @@ class CAddrMan\n \n     //! Mark an entry as connection attempted to.\n     void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n@@ -554,6 +553,7 @@ class CAddrMan\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n     void ResolveCollisions()\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n@@ -563,29 +563,25 @@ class CAddrMan\n \n     //! Randomly select an address in tried that another address is attempting to evict.\n     CAddrInfo SelectTriedCollision()\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n-        CAddrInfo ret;\n-        {\n-            LOCK(cs);\n-            Check();\n-            ret = SelectTriedCollision_();\n-            Check();\n-        }\n+        LOCK(cs);\n+        Check();\n+        const CAddrInfo ret = SelectTriedCollision_();\n+        Check();\n         return ret;\n     }\n \n     /**\n      * Choose an address to connect to.\n      */\n     CAddrInfo Select(bool newOnly = false)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n-        CAddrInfo addrRet;\n-        {\n-            LOCK(cs);\n-            Check();\n-            addrRet = Select_(newOnly);\n-            Check();\n-        }\n+        LOCK(cs);\n+        Check();\n+        const CAddrInfo addrRet = Select_(newOnly);\n+        Check();\n         return addrRet;\n     }\n \n@@ -597,19 +593,19 @@ class CAddrMan\n      * @param[in] network        Select only addresses of this network (nullopt = all).\n      */\n     std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n+        LOCK(cs);\n         Check();\n         std::vector<CAddress> vAddr;\n-        {\n-            LOCK(cs);\n-            GetAddr_(vAddr, max_addresses, max_pct, network);\n-        }\n+        GetAddr_(vAddr, max_addresses, max_pct, network);\n         Check();\n         return vAddr;\n     }\n \n     //! Outer function for Connected_()\n     void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n@@ -618,6 +614,7 @@ class CAddrMan\n     }\n \n     void SetServices(const CService &addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n@@ -633,8 +630,8 @@ class CAddrMan\n     FastRandomContext insecure_rand;\n \n private:\n-    //! critical section to protect the inner data structures\n-    mutable RecursiveMutex cs;\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n \n     //! Serialization versions.\n     enum Format : uint8_t {\n@@ -662,10 +659,10 @@ class CAddrMan\n     int nIdCount GUARDED_BY(cs);\n \n     //! table with information about all nIds\n-    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n+    std::unordered_map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n \n     //! find an nId based on its network address\n-    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n+    std::unordered_map<CNetAddr, int, CNetAddrHash> mapAddr GUARDED_BY(cs);\n \n     //! randomly-ordered vector of all nIds\n     std::vector<int> vRandom GUARDED_BY(cs);\n@@ -725,6 +722,19 @@ class CAddrMan\n     //! Return a random to-be-evicted tried table address.\n     CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    //! Consistency check\n+    void Check()\n+        EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        const int err = Check_();\n+        if (err) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif\n+    }\n+\n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n     int Check_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n@@ -756,6 +766,17 @@ class CAddrMan\n     //! Update an entry's service bits.\n     void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    //! Remove invalid addresses.\n+    void RemoveInvalid() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    /**\n+     * Reset the ports of I2P peers to 0.\n+     * This is needed as a temporary measure because now we enforce port 0 and\n+     * only connect to I2P hosts if the port is 0, but in the early days some\n+     * I2P addresses with port 8333 were rumoured and persisted into addrmans.\n+     */\n+    void ResetI2PPorts() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     friend class CAddrManTest;\n };\n "
      },
      {
        "sha": "d2437e67338cee2f592d85ea92fe2c7786992144",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -18,20 +18,18 @@ BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t\n     if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist\u2026\").translated);\n \n     int64_t n_start = GetTimeMillis();\n-    m_is_dirty = false;\n-    banmap_t banmap;\n-    if (m_ban_db.Read(banmap)) {\n-        SetBanned(banmap);        // thread save setter\n-        SetBannedSetDirty(false); // no need to write down, just read data\n-        SweepBanned();            // sweep out unused entries\n+    if (m_ban_db.Read(m_banned, m_is_dirty)) {\n+        SweepBanned(); // sweep out unused entries\n \n-        LogPrint(BCLog::NET, \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n-            m_banned.size(), GetTimeMillis() - n_start);\n+        LogPrint(BCLog::NET, \"Loaded %d banned node addresses/subnets  %dms\\n\", m_banned.size(),\n+                 GetTimeMillis() - n_start);\n     } else {\n-        LogPrintf(\"Recreating banlist.dat\\n\");\n-        SetBannedSetDirty(true); // force write\n-        DumpBanlist();\n+        LogPrintf(\"Recreating the banlist database\\n\");\n+        m_banned = {};\n+        m_is_dirty = true;\n     }\n+\n+    DumpBanlist();\n }\n \n BanMan::~BanMan()\n@@ -53,8 +51,8 @@ void BanMan::DumpBanlist()\n         SetBannedSetDirty(false);\n     }\n \n-    LogPrint(BCLog::NET, \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n-        banmap.size(), GetTimeMillis() - n_start);\n+    LogPrint(BCLog::NET, \"Flushed %d banned node addresses/subnets to disk  %dms\\n\", banmap.size(),\n+             GetTimeMillis() - n_start);\n }\n \n void BanMan::ClearBanned()\n@@ -167,13 +165,6 @@ void BanMan::GetBanned(banmap_t& banmap)\n     banmap = m_banned; //create a thread safe copy\n }\n \n-void BanMan::SetBanned(const banmap_t& banmap)\n-{\n-    LOCK(m_cs_banned);\n-    m_banned = banmap;\n-    m_is_dirty = true;\n-}\n-\n void BanMan::SweepBanned()\n {\n     int64_t now = GetTime();\n@@ -188,7 +179,7 @@ void BanMan::SweepBanned()\n                 m_banned.erase(it++);\n                 m_is_dirty = true;\n                 notify_ui = true;\n-                LogPrint(BCLog::NET, \"%s: Removed banned node ip/subnet from banlist.dat: %s\\n\", __func__, sub_net.ToString());\n+                LogPrint(BCLog::NET, \"Removed banned node address/subnet: %s\\n\", sub_net.ToString());\n             } else\n                 ++it;\n         }"
      },
      {
        "sha": "8c75d4037e5fbd17b9174849a190798b0c4710e9",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -17,7 +17,8 @@\n \n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n-// How often to dump addresses to banlist.dat\n+\n+/// How often to dump banned addresses/subnets to disk.\n static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n class CClientUIInterface;\n@@ -30,7 +31,7 @@ class CSubNet;\n // If an address or subnet is banned, we never accept incoming connections from\n // it and never create outgoing connections to it. We won't gossip its address\n // to other peers in addr messages. Banned addresses and subnets are stored to\n-// banlist.dat on shutdown and reloaded on startup. Banning can be used to\n+// disk on shutdown and reloaded on startup. Banning can be used to\n // prevent connections with spy nodes or other griefers.\n //\n // 2. Discouragement. If a peer misbehaves enough (see Misbehaving() in\n@@ -79,7 +80,6 @@ class BanMan\n     void DumpBanlist();\n \n private:\n-    void SetBanned(const banmap_t& banmap);\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n     void SetBannedSetDirty(bool dirty = true);"
      },
      {
        "sha": "c4fcd80e33b0987221eb9a5d2797529ba48d81fa",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -18,16 +18,19 @@\n /*\n  * Usage:\n \n-static void CODE_TO_TIME(benchmark::Bench& bench)\n+static void NameOfYourBenchmarkFunction(benchmark::Bench& bench)\n {\n-    ... do any setup needed...\n-    nanobench::Config().run([&] {\n-       ... do stuff you want to time...\n+    ...do any setup needed...\n+\n+    bench.run([&] {\n+         ...do stuff you want to time; refer to src/bench/nanobench.h\n+            for more information and the options that can be passed here...\n     });\n-    ... do any cleanup needed...\n+\n+    ...do any cleanup needed...\n }\n \n-BENCHMARK(CODE_TO_TIME);\n+BENCHMARK(NameOfYourBenchmarkFunction);\n \n  */\n \n@@ -55,7 +58,8 @@ class BenchRunner\n \n     static void RunAll(const Args& args);\n };\n-}\n+} // namespace benchmark\n+\n // BENCHMARK(foo) expands to:  benchmark::BenchRunner bench_11foo(\"foo\", foo);\n #define BENCHMARK(n) \\\n     benchmark::BenchRunner PASTE2(bench_, PASTE2(__LINE__, n))(STRINGIZE(n), n);"
      },
      {
        "sha": "aab777cac15259675ea06f6de1958eef933113c2",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -16,11 +16,11 @@ static void SetupBenchArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n \n-    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-asymptote=n1,n2,n3,...\", \"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-asymptote=n1,n2,n3,...\", strprintf(\"Test asymptotic growth of the runtime of an algorithm, if supported by the benchmark\"), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-list\", \"List benchmarks without executing them\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-output_csv=<output.csv>\", \"Generate CSV file with the most important benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-output_json=<output.json>\", \"Generate JSON file with all benchmark results\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n // parses a comma separated list like \"10,20,30,50\""
      },
      {
        "sha": "5beb833b48bf8b313065fb9227e33ebb58b11d2b",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -56,7 +56,7 @@ static void CoinSelection(benchmark::Bench& bench)\n     bench.run([&] {\n         std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;\n-        bool success = wallet.SelectCoinsMinConf(1003 * COIN, filter_standard, coins, setCoinsRet, nValueRet, coin_selection_params);\n+        bool success = wallet.AttemptSelection(1003 * COIN, filter_standard, coins, setCoinsRet, nValueRet, coin_selection_params);\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);"
      },
      {
        "sha": "8703a1cf942b6b91d5e4dbf39fa34fd7cf0772ba",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -25,7 +25,6 @@ static void DuplicateInputs(benchmark::Bench& bench)\n     CMutableTransaction naughtyTx{};\n \n     LOCK(cs_main);\n-    assert(std::addressof(::ChainActive()) == std::addressof(testing_setup->m_node.chainman->ActiveChain()));\n     CBlockIndex* pindexPrev = testing_setup->m_node.chainman->ActiveChain().Tip();\n     assert(pindexPrev != nullptr);\n     block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());"
      },
      {
        "sha": "46fd9d999e120bb3e904b5705d5dd99b79ad1272",
        "filename": "src/bench/peer_eviction.cpp",
        "status": "added",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/peer_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bench/peer_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/peer_eviction.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <net.h>\n+#include <netaddress.h>\n+#include <random.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <vector>\n+\n+static void EvictionProtectionCommon(\n+    benchmark::Bench& bench,\n+    int num_candidates,\n+    std::function<void(NodeEvictionCandidate&)> candidate_setup_fn)\n+{\n+    using Candidates = std::vector<NodeEvictionCandidate>;\n+    FastRandomContext random_context{true};\n+    bench.warmup(100).epochIterations(1100);\n+\n+    Candidates candidates{GetRandomNodeEvictionCandidates(num_candidates, random_context)};\n+    for (auto& c : candidates) {\n+        candidate_setup_fn(c);\n+    }\n+\n+    std::vector<Candidates> copies{\n+        static_cast<size_t>(bench.epochs() * bench.epochIterations()), candidates};\n+    size_t i{0};\n+    bench.run([&] {\n+        ProtectEvictionCandidatesByRatio(copies.at(i));\n+        ++i;\n+    });\n+}\n+\n+/* Benchmarks */\n+\n+static void EvictionProtection0Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_network = NET_IPV4;\n+        });\n+}\n+\n+static void EvictionProtection1Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+            if (c.id >= 130 && c.id < 240) { // 110 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection2Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+            if (c.id >= 90 && c.id < 160) { // 70 Tor\n+                c.m_network = NET_ONION;\n+            } else if (c.id >= 170 && c.id < 250) { // 80 I2P\n+                c.m_network = NET_I2P;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks050Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        50 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id == 28 || c.id == 47); //  2 localhost\n+            if (c.id >= 30 && c.id < 47) {             // 17 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 24 && c.id < 28) { //  4 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks100Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        100 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id >= 55 && c.id < 60); //  5 localhost\n+            if (c.id >= 70 && c.id < 80) {            // 10 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 80 && c.id < 96) { // 16 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+static void EvictionProtection3Networks250Candidates(benchmark::Bench& bench)\n+{\n+    EvictionProtectionCommon(\n+        bench,\n+        250 /* num_candidates */,\n+        [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id >= 140 && c.id < 160); // 20 localhost\n+            if (c.id >= 170 && c.id < 180) {            // 10 I2P\n+                c.m_network = NET_I2P;\n+            } else if (c.id >= 190 && c.id < 240) { // 50 Tor\n+                c.m_network = NET_ONION;\n+            } else {\n+                c.m_network = NET_IPV4;\n+            }\n+        });\n+}\n+\n+// Candidate numbers used for the benchmarks:\n+// -  50 candidates simulates a possible use of -maxconnections\n+// - 100 candidates approximates an average node with default settings\n+// - 250 candidates is the number of peers reported by operators of busy nodes\n+\n+// No disadvantaged networks, with 250 eviction candidates.\n+BENCHMARK(EvictionProtection0Networks250Candidates);\n+\n+// 1 disadvantaged network (Tor) with 250 eviction candidates.\n+BENCHMARK(EvictionProtection1Networks250Candidates);\n+\n+// 2 disadvantaged networks (I2P, Tor) with 250 eviction candidates.\n+BENCHMARK(EvictionProtection2Networks250Candidates);\n+\n+// 3 disadvantaged networks (I2P/localhost/Tor) with 50/100/250 eviction candidates.\n+BENCHMARK(EvictionProtection3Networks050Candidates);\n+BENCHMARK(EvictionProtection3Networks100Candidates);\n+BENCHMARK(EvictionProtection3Networks250Candidates);"
      },
      {
        "sha": "7a5f9455112d76bed33eb6ce5187859b60c44797",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -40,6 +40,7 @@ UrlDecodeFn* const URL_DECODE = urlDecode;\n \n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n+static constexpr int DEFAULT_WAIT_CLIENT_TIMEOUT = 0;\n static const bool DEFAULT_NAMED=false;\n static const int CONTINUE_EXECUTION=-1;\n static constexpr int8_t UNKNOWN_NETWORK{-1};\n@@ -73,6 +74,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -794,6 +796,9 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n+\n     do {\n         try {\n             response = CallRPC(rh, strMethod, args, rpcwallet);\n@@ -804,11 +809,12 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n                 }\n             }\n             break; // Connection succeeded, no need to retry.\n-        } catch (const CConnectionFailed&) {\n-            if (fWait) {\n-                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+        } catch (const CConnectionFailed& e) {\n+            const auto now{GetTime<std::chrono::microseconds>()};\n+            if (fWait && (timeout <= 0 || now < deadline)) {\n+                UninterruptibleSleep(1s);\n             } else {\n-                throw;\n+                throw CConnectionFailed(strprintf(\"timeout on transient error: %s\", e.what()));\n             }\n         }\n     } while (fWait);"
      },
      {
        "sha": "3fc87ae1ff325c61b23262b206dad9f1c1668808",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -506,11 +506,12 @@ static void MutateTxDelOutput(CMutableTransaction& tx, const std::string& strOut\n     tx.vout.erase(tx.vout.begin() + outIdx);\n }\n \n-static const unsigned int N_SIGHASH_OPTS = 6;\n+static const unsigned int N_SIGHASH_OPTS = 7;\n static const struct {\n     const char *flagStr;\n     int flags;\n } sighashOptions[N_SIGHASH_OPTS] = {\n+    {\"DEFAULT\", SIGHASH_DEFAULT},\n     {\"ALL\", SIGHASH_ALL},\n     {\"NONE\", SIGHASH_NONE},\n     {\"SINGLE\", SIGHASH_SINGLE},"
      },
      {
        "sha": "f534aecc199f996ead26fc563f29805be4d4670f",
        "filename": "src/bitcoin-util.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 80,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -7,28 +7,19 @@\n #endif\n \n #include <arith_uint256.h>\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n #include <clientversion.h>\n-#include <coins.h>\n-#include <consensus/consensus.h>\n #include <core_io.h>\n-#include <key_io.h>\n-#include <policy/rbf.h>\n-#include <primitives/transaction.h>\n-#include <script/script.h>\n-#include <script/sign.h>\n-#include <script/signingprovider.h>\n-#include <univalue.h>\n-#include <util/moneystr.h>\n-#include <util/rbf.h>\n-#include <util/strencodings.h>\n-#include <util/string.h>\n+#include <streams.h>\n #include <util/system.h>\n #include <util/translation.h>\n \n #include <atomic>\n+#include <cstdio>\n #include <functional>\n #include <memory>\n-#include <stdio.h>\n #include <thread>\n \n #include <boost/algorithm/string.hpp>\n@@ -43,35 +34,29 @@ static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n+    argsman.AddCommand(\"grind\", \"Perform proof of work on hex header string\");\n+\n     SetupChainParamsBaseOptions(argsman);\n }\n \n // This function returns either one of EXIT_ codes when it's expected to stop the process or\n // CONTINUE_EXECUTION when it's expected to continue further.\n-static int AppInitUtil(int argc, char* argv[])\n+static int AppInitUtil(ArgsManager& args, int argc, char* argv[])\n {\n-    SetupBitcoinUtilArgs(gArgs);\n+    SetupBitcoinUtilArgs(args);\n     std::string error;\n-    if (!gArgs.ParseParameters(argc, argv, error)) {\n+    if (!args.ParseParameters(argc, argv, error)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n \n-    // Check for chain settings (Params() calls are only valid after this clause)\n-    try {\n-        SelectParams(gArgs.GetChainName());\n-    } catch (const std::exception& e) {\n-        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n-        return EXIT_FAILURE;\n-    }\n-\n-    if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n+    if (HelpRequested(args) || args.IsArgSet(\"-version\")) {\n         // First part of help message is specific to this utility\n         std::string strUsage = PACKAGE_NAME \" bitcoin-util utility version \" + FormatFullVersion() + \"\\n\";\n-        if (!gArgs.IsArgSet(\"-version\")) {\n+        if (!args.IsArgSet(\"-version\")) {\n             strUsage += \"\\n\"\n                 \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\";\n-            strUsage += \"\\n\" + gArgs.GetHelpMessage();\n+            strUsage += \"\\n\" + args.GetHelpMessage();\n         }\n \n         tfm::format(std::cout, \"%s\", strUsage);\n@@ -82,6 +67,15 @@ static int AppInitUtil(int argc, char* argv[])\n         }\n         return EXIT_SUCCESS;\n     }\n+\n+    // Check for chain settings (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(args.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n     return CONTINUE_EXECUTION;\n }\n \n@@ -111,17 +105,17 @@ static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offse\n     }\n }\n \n-static int Grind(int argc, char* argv[], std::string& strPrint)\n+static int Grind(const std::vector<std::string>& args, std::string& strPrint)\n {\n-    if (argc != 1) {\n+    if (args.size() != 1) {\n         strPrint = \"Must specify block header to grind\";\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n \n     CBlockHeader header;\n-    if (!DecodeHexBlockHeader(header, argv[0])) {\n+    if (!DecodeHexBlockHeader(header, args[0])) {\n         strPrint = \"Could not decode block header\";\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n \n     uint32_t nBits = header.nBits;\n@@ -137,49 +131,13 @@ static int Grind(int argc, char* argv[], std::string& strPrint)\n     }\n     if (!found) {\n         strPrint = \"Could not satisfy difficulty target\";\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n \n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss << header;\n     strPrint = HexStr(ss);\n-    return 0;\n-}\n-\n-static int CommandLineUtil(int argc, char* argv[])\n-{\n-    if (argc <= 1) return 1;\n-\n-    std::string strPrint;\n-    int nRet = 0;\n-\n-    try {\n-        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n-            --argc;\n-            ++argv;\n-        }\n-\n-        char* command = argv[1];\n-        if (strcmp(command, \"grind\") == 0) {\n-            nRet = Grind(argc-2, argv+2, strPrint);\n-        } else {\n-            strPrint = strprintf(\"Unknown command %s\", command);\n-            nRet = 1;\n-        }\n-    }\n-    catch (const std::exception& e) {\n-        strPrint = std::string(\"error: \") + e.what();\n-        nRet = EXIT_FAILURE;\n-    }\n-    catch (...) {\n-        PrintExceptionContinue(nullptr, \"CommandLineUtil()\");\n-        throw;\n-    }\n-\n-    if (strPrint != \"\") {\n-        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint);\n-    }\n-    return nRet;\n+    return EXIT_SUCCESS;\n }\n \n #ifdef WIN32\n@@ -193,29 +151,45 @@ __declspec(dllexport) int main(int argc, char* argv[])\n int main(int argc, char* argv[])\n #endif\n {\n+    ArgsManager& args = gArgs;\n     SetupEnvironment();\n \n     try {\n-        int ret = AppInitUtil(argc, argv);\n-        if (ret != CONTINUE_EXECUTION)\n+        int ret = AppInitUtil(args, argc, argv);\n+        if (ret != CONTINUE_EXECUTION) {\n             return ret;\n-    }\n-    catch (const std::exception& e) {\n+        }\n+    } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitUtil()\");\n         return EXIT_FAILURE;\n     } catch (...) {\n         PrintExceptionContinue(nullptr, \"AppInitUtil()\");\n         return EXIT_FAILURE;\n     }\n \n+    const auto cmd = args.GetCommand();\n+    if (!cmd) {\n+        tfm::format(std::cerr, \"Error: must specify a command\\n\");\n+        return EXIT_FAILURE;\n+    }\n+\n     int ret = EXIT_FAILURE;\n+    std::string strPrint;\n     try {\n-        ret = CommandLineUtil(argc, argv);\n-    }\n-    catch (const std::exception& e) {\n-        PrintExceptionContinue(&e, \"CommandLineUtil()\");\n+        if (cmd->command == \"grind\") {\n+            ret = Grind(cmd->args, strPrint);\n+        } else {\n+            assert(false); // unknown command should be caught earlier\n+        }\n+    } catch (const std::exception& e) {\n+        strPrint = std::string(\"error: \") + e.what();\n     } catch (...) {\n-        PrintExceptionContinue(nullptr, \"CommandLineUtil()\");\n+        strPrint = \"unknown error\";\n+    }\n+\n+    if (strPrint != \"\") {\n+        tfm::format(ret == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint);\n     }\n+\n     return ret;\n }"
      },
      {
        "sha": "765954c92e401f34be3a07854f92debde4f3128b",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -33,11 +33,11 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n-    argsman.AddCommand(\"info\", \"Get wallet info\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"create\", \"Create new wallet file\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"dump\", \"Print out all of the wallet key-value records\", OptionsCategory::COMMANDS);\n-    argsman.AddCommand(\"createfromdump\", \"Create new wallet file from dumped records\", OptionsCategory::COMMANDS);\n+    argsman.AddCommand(\"info\", \"Get wallet info\");\n+    argsman.AddCommand(\"create\", \"Create new wallet file\");\n+    argsman.AddCommand(\"salvage\", \"Attempt to recover private keys from a corrupt wallet. Warning: 'salvage' is experimental.\");\n+    argsman.AddCommand(\"dump\", \"Print out all of the wallet key-value records\");\n+    argsman.AddCommand(\"createfromdump\", \"Create new wallet file from dumped records\");\n }\n \n static bool WalletAppInit(ArgsManager& args, int argc, char* argv[])"
      },
      {
        "sha": "654679af27e2d029d937dd0da3c011313032dd91",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -112,8 +112,8 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n     util::ThreadSetInternalName(\"init\");\n \n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n-    SetupServerArgs(node);\n     ArgsManager& args = *Assert(node.args);\n+    SetupServerArgs(args);\n     std::string error;\n     if (!args.ParseParameters(argc, argv, error)) {\n         return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));"
      },
      {
        "sha": "84a3a4e1e75d6d1541e41a61084f0c60aacfcf25",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -182,7 +182,7 @@ class CBlockIndex\n     //!\n     //! Note: this value is modified to show BLOCK_OPT_WITNESS during UTXO snapshot\n     //! load to avoid the block index being spuriously rewound.\n-    //! @sa RewindBlockIndex\n+    //! @sa NeedsRedownload\n     //! @sa ActivateSnapshot\n     uint32_t nStatus{0};\n "
      },
      {
        "sha": "58a27e053b9f3f8a17a4a072b5ec14416917e4f4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <deploymentinfo.h>\n #include <hash.h> // for signet block challenge hash\n #include <util/system.h>\n-#include <versionbitsinfo.h>\n \n #include <assert.h>\n \n@@ -423,7 +423,7 @@ class CRegTestParams : public CChainParams {\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n         nDefaultPort = 18444;\n-        nPruneAfterHeight = gArgs.GetBoolArg(\"-fastprune\", false) ? 100 : 1000;\n+        nPruneAfterHeight = args.GetBoolArg(\"-fastprune\", false) ? 100 : 1000;\n         m_assumed_blockchain_size = 0;\n         m_assumed_chain_state_size = 0;\n "
      },
      {
        "sha": "4faa6f8d06a1cfe482347fa606dc8685a4cd97c1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -8,11 +8,13 @@\n \n #include <chainparamsbase.h>\n #include <consensus/params.h>\n+#include <netaddress.h>\n #include <primitives/block.h>\n #include <protocol.h>\n #include <util/hash_type.h>\n \n #include <memory>\n+#include <string>\n #include <vector>\n \n typedef std::map<int, uint256> MapCheckpoints;\n@@ -80,6 +82,15 @@ class CChainParams\n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     uint16_t GetDefaultPort() const { return nDefaultPort; }\n+    uint16_t GetDefaultPort(Network net) const\n+    {\n+        return net == NET_I2P ? I2P_SAM31_PORT : GetDefaultPort();\n+    }\n+    uint16_t GetDefaultPort(const std::string& addr) const\n+    {\n+        CNetAddr a;\n+        return a.SetSpecial(addr) ? GetDefaultPort(a.GetNetwork()) : GetDefaultPort();\n+    }\n \n     const CBlock& GenesisBlock() const { return genesis; }\n     /** Default value for -checkmempool and -checkblockindex argument */"
      },
      {
        "sha": "a22529c38659d8714718b24ec7e0e5fc89df0363",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 8,
        "deletions": 520,
        "changes": 528,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -659,518 +659,6 @@ static const uint8_t chainparams_seed_main[] = {\n     0x02,0x10,0x2a,0x0f,0xdf,0x00,0x00,0x00,0x02,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x20,0x8d,\n     0x02,0x10,0x2c,0x0f,0xf5,0x98,0x00,0x05,0x00,0x01,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,\n     0x02,0x10,0x2c,0x0f,0xfc,0xe8,0x00,0x00,0x04,0x00,0x0b,0x7c,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x8d,\n-    0x03,0x0a,0xd6,0xbc,0x4a,0x3c,0x6d,0x03,0xa9,0x4e,0x1f,0x55,0x20,0x8d,\n-    0x03,0x0a,0xd6,0x8f,0xf0,0xf8,0xbb,0x10,0x00,0x18,0x42,0x54,0x20,0x8d,\n-    0x03,0x0a,0xd6,0xec,0x32,0xc1,0x59,0x9c,0xd8,0x46,0xd5,0x48,0x20,0x8d,\n-    0x03,0x0a,0xd6,0xf0,0x8d,0x96,0x37,0xc3,0x27,0x61,0x9a,0x24,0x20,0x8d,\n-    0x03,0x0a,0xd0,0x12,0xe6,0xed,0x8e,0xc1,0x78,0x8d,0x1c,0x21,0x20,0x8d,\n-    0x03,0x0a,0xd0,0x4a,0xc5,0xbd,0x5d,0xe9,0xca,0x57,0xaf,0xc4,0x20,0x8d,\n-    0x03,0x0a,0xd0,0x94,0xc0,0x97,0xd2,0x32,0xed,0x81,0x92,0x67,0x20,0x8d,\n-    0x03,0x0a,0xd1,0xd5,0x49,0x23,0xa6,0x10,0x01,0x49,0xda,0x05,0x20,0x8d,\n-    0x03,0x0a,0xd2,0x2a,0x76,0x2c,0x37,0x09,0x9a,0xa1,0x61,0x4b,0x20,0x8d,\n-    0x03,0x0a,0xd3,0x19,0x77,0x50,0xf5,0xf3,0x48,0x17,0x59,0x50,0x20,0x8d,\n-    0x03,0x0a,0xd4,0x24,0xda,0xf8,0x97,0x6d,0x28,0x80,0x47,0xf9,0x20,0x8d,\n-    0x03,0x0a,0xd4,0x28,0x30,0x9d,0x6d,0xac,0x1e,0xb4,0x6e,0x59,0x20,0x8d,\n-    0x03,0x0a,0xd5,0x13,0x71,0x95,0xd5,0x2e,0x12,0xf6,0x0e,0x6e,0x20,0x8d,\n-    0x03,0x0a,0xd5,0xc6,0x62,0x50,0xb1,0x22,0xb6,0x4a,0x31,0x56,0x20,0x8d,\n-    0x03,0x0a,0xd5,0xc7,0x99,0x46,0x87,0x91,0x13,0xc9,0xc9,0x16,0x20,0x8d,\n-    0x03,0x0a,0xdf,0x22,0x06,0xea,0xce,0x87,0x08,0x09,0x32,0x52,0x20,0x8d,\n-    0x03,0x0a,0xdf,0xa1,0xf5,0x1c,0xe4,0x4e,0x97,0x71,0xee,0xc5,0x20,0x8d,\n-    0x03,0x0a,0xdf,0xf7,0x64,0x8e,0x4f,0xa3,0xbb,0xaa,0x4f,0x30,0x20,0x8d,\n-    0x03,0x0a,0xdf,0xfc,0xa5,0x92,0x7d,0xbc,0x03,0x13,0x69,0x35,0x20,0x8d,\n-    0x03,0x0a,0xdf,0xd5,0x61,0xfc,0xb7,0x73,0xff,0xef,0x2f,0xaa,0x20,0x8d,\n-    0x03,0x0a,0xd9,0x3b,0x3f,0x9e,0x1c,0x02,0xe7,0xd9,0xba,0xb7,0x20,0x8d,\n-    0x03,0x0a,0xd9,0x83,0x73,0x90,0x25,0x3b,0xa9,0x4b,0x18,0x5b,0x20,0x8d,\n-    0x03,0x0a,0xd9,0xcc,0x14,0xe4,0x9a,0x68,0x6d,0x8a,0x12,0xc5,0x20,0x8d,\n-    0x03,0x0a,0xda,0x29,0x4a,0xc4,0x7a,0xb0,0x0e,0x0d,0x0a,0xee,0x20,0x8d,\n-    0x03,0x0a,0xda,0x67,0x7a,0x24,0x60,0x45,0x8f,0xe4,0x2e,0x74,0x20,0x8d,\n-    0x03,0x0a,0xda,0xfa,0x48,0x68,0x74,0xfb,0x2b,0x21,0x27,0x80,0x20,0x8d,\n-    0x03,0x0a,0xdb,0x5c,0x56,0x99,0xb0,0x5c,0x08,0x43,0xb7,0xee,0x20,0x8d,\n-    0x03,0x0a,0xdc,0x79,0xc1,0x8f,0x29,0x44,0xf2,0xdc,0x00,0xf6,0x20,0x8d,\n-    0x03,0x0a,0xdd,0x66,0x1a,0x59,0x93,0x73,0x7f,0x58,0x76,0x19,0x20,0x8d,\n-    0x03,0x0a,0xe7,0x9c,0x7c,0xce,0x79,0xe3,0xc8,0xa4,0x73,0x66,0x20,0x8d,\n-    0x03,0x0a,0xe7,0xca,0xbd,0xa2,0xab,0xe5,0x7b,0xe4,0xca,0x71,0x20,0x8d,\n-    0x03,0x0a,0xe7,0xd1,0xe8,0x45,0x7a,0x42,0x60,0x2b,0x2c,0xde,0x20,0x8d,\n-    0x03,0x0a,0xe7,0xe9,0x47,0x9b,0x22,0x6c,0x6c,0x03,0xba,0x6e,0x20,0x8d,\n-    0x03,0x0a,0xe0,0xba,0x25,0x23,0x7f,0x25,0x5c,0x51,0xcb,0xc3,0x20,0x8d,\n-    0x03,0x0a,0xe1,0x21,0xbf,0x26,0x37,0xfd,0xe9,0x89,0x95,0xe2,0x20,0x8d,\n-    0x03,0x0a,0xe1,0x2c,0xa1,0xde,0xa2,0x37,0x7e,0x01,0xc5,0xa8,0x20,0x8d,\n-    0x03,0x0a,0xe1,0x57,0x53,0x20,0x2d,0x66,0x9a,0xb1,0xed,0xa0,0x20,0x8d,\n-    0x03,0x0a,0xe2,0x00,0xe6,0xcf,0x0c,0xe7,0xd0,0xc0,0x58,0x9c,0x20,0x8d,\n-    0x03,0x0a,0xe2,0x6f,0x9d,0xfd,0xce,0xa7,0x40,0x6f,0xfb,0x62,0x20,0x8d,\n-    0x03,0x0a,0xe3,0x1a,0xaa,0xa7,0xc7,0x07,0xf6,0x48,0x34,0x2a,0x20,0x8d,\n-    0x03,0x0a,0xe3,0x5b,0x4c,0x5d,0x9d,0x57,0x66,0xbc,0x26,0x1b,0x20,0x8d,\n-    0x03,0x0a,0xe3,0x73,0xac,0x1b,0x82,0x6b,0xa6,0x4d,0x91,0x3f,0x20,0x8d,\n-    0x03,0x0a,0xe3,0xdd,0x9b,0x1f,0xdd,0xf7,0x30,0x6c,0x8c,0x6a,0x20,0x8d,\n-    0x03,0x0a,0xe4,0x0c,0x50,0xf7,0xd1,0xab,0xc2,0xc2,0x4a,0xff,0x20,0x8d,\n-    0x03,0x0a,0xe4,0x64,0x0b,0xeb,0x73,0x04,0x33,0x66,0x21,0x89,0x20,0x8d,\n-    0x03,0x0a,0xe5,0x3a,0x9e,0x83,0x1e,0x88,0x24,0xeb,0x4f,0x8c,0x20,0x8d,\n-    0x03,0x0a,0xe5,0x5d,0x1a,0xcd,0xd8,0x21,0x8f,0xcc,0x86,0xb1,0x20,0x8d,\n-    0x03,0x0a,0xee,0xa5,0xc4,0xf5,0xeb,0x1d,0x96,0xfc,0x9e,0x76,0x20,0x8d,\n-    0x03,0x0a,0xe8,0x02,0xf4,0x22,0x05,0xa9,0x14,0xe2,0x26,0x2e,0x20,0x8d,\n-    0x03,0x0a,0xe8,0x30,0x3c,0xde,0xfe,0x4e,0x1d,0x9d,0xb4,0x99,0x20,0x8d,\n-    0x03,0x0a,0xe8,0xaf,0x91,0xca,0x33,0x72,0xba,0x33,0x3b,0x80,0x20,0x8d,\n-    0x03,0x0a,0xe9,0x07,0x44,0x29,0xf4,0x1a,0x09,0xb4,0xe2,0x25,0x20,0x8d,\n-    0x03,0x0a,0xe9,0x1e,0x40,0x15,0x4c,0xc0,0x38,0x5a,0xf4,0x7d,0x20,0x8d,\n-    0x03,0x0a,0xe9,0x71,0x75,0xe6,0x68,0x16,0xe7,0xe6,0xba,0x79,0x20,0x8d,\n-    0x03,0x0a,0xe9,0xc7,0xe2,0x60,0x96,0xee,0x02,0xd8,0x78,0xc1,0x20,0x8d,\n-    0x03,0x0a,0xea,0x70,0x5c,0x9e,0xca,0x90,0x7d,0x48,0xc5,0xfa,0x20,0x8d,\n-    0x03,0x0a,0xeb,0x5c,0xe8,0x18,0x53,0xef,0xbe,0x83,0x77,0xf5,0x20,0x8d,\n-    0x03,0x0a,0xeb,0x64,0x56,0x71,0xb0,0x86,0x72,0xf8,0xa6,0x2f,0x20,0x8d,\n-    0x03,0x0a,0xeb,0xa1,0x29,0xde,0x4f,0xc9,0xd6,0x64,0x90,0xbe,0x20,0x8d,\n-    0x03,0x0a,0xeb,0xf3,0x96,0x0f,0x93,0x2b,0x9b,0x18,0x64,0x3a,0x20,0x8d,\n-    0x03,0x0a,0xec,0x84,0xa6,0x5f,0x98,0xa0,0x82,0xd7,0xf1,0x0e,0x20,0x8d,\n-    0x03,0x0a,0xed,0x09,0xfb,0x3a,0x39,0x0b,0x7c,0x77,0x37,0x64,0x20,0x8d,\n-    0x03,0x0a,0xed,0xae,0x7b,0xea,0x6e,0xcb,0xdd,0x52,0xfb,0x3b,0x20,0x8d,\n-    0x03,0x0a,0xed,0xd5,0xbc,0x51,0xbb,0xf1,0x37,0xa2,0x6f,0x88,0x20,0x8d,\n-    0x03,0x0a,0xee,0x4c,0x79,0xe8,0xdf,0xa8,0xa4,0x07,0xa3,0xdd,0x20,0x8d,\n-    0x03,0x0a,0xf6,0x86,0x21,0xbe,0xa3,0x72,0xcb,0x95,0x0f,0x2b,0x20,0x8d,\n-    0x03,0x0a,0xf6,0xc2,0xa7,0x69,0x87,0x45,0xda,0xdd,0x07,0xe3,0x20,0x8d,\n-    0x03,0x0a,0xf7,0xce,0x9a,0x96,0xbe,0xb2,0x05,0x30,0x2d,0x9d,0x20,0x8d,\n-    0x03,0x0a,0xf1,0xbc,0xa7,0x71,0x4b,0x51,0x7a,0x09,0xac,0x68,0x20,0x8d,\n-    0x03,0x0a,0xf2,0xbb,0x98,0x90,0x97,0xb7,0x04,0x01,0xdd,0x1d,0x20,0x8d,\n-    0x03,0x0a,0xf2,0x8b,0xd0,0x60,0xeb,0x79,0x1b,0x8b,0x18,0x12,0x20,0x8d,\n-    0x03,0x0a,0xf3,0x00,0x83,0x5d,0x35,0x11,0x27,0xc7,0xa2,0x64,0x20,0x8d,\n-    0x03,0x0a,0xf4,0x49,0x29,0x57,0x83,0xab,0xd6,0x1e,0xa0,0xe7,0x20,0x8d,\n-    0x03,0x0a,0xf4,0x52,0x4b,0xf8,0xd8,0xa0,0x28,0x8d,0x8b,0xa4,0x20,0x8d,\n-    0x03,0x0a,0xf4,0x94,0x66,0x97,0x9b,0x7b,0xce,0x3a,0xa6,0x80,0x20,0x8d,\n-    0x03,0x0a,0xf4,0xa7,0x70,0x38,0x74,0xb2,0x24,0x6e,0xca,0x07,0x20,0x8d,\n-    0x03,0x0a,0xf5,0xe1,0x8e,0x4e,0x5e,0x0b,0xbd,0x4e,0x8c,0xcc,0x20,0x8d,\n-    0x03,0x0a,0xf8,0x2a,0xd5,0xec,0x70,0x79,0xa9,0xad,0xa6,0xa0,0x20,0x8d,\n-    0x03,0x0a,0xf9,0x4b,0xcb,0x2b,0x5e,0xf3,0x5d,0xad,0xce,0xed,0x20,0x8d,\n-    0x03,0x0a,0xf9,0xd0,0xf0,0xd3,0x25,0x18,0xb1,0x98,0x29,0x46,0x20,0x8d,\n-    0x03,0x0a,0xfc,0x92,0xc5,0xe6,0x33,0x3a,0x56,0xf2,0xe0,0x6a,0x20,0x8d,\n-    0x03,0x0a,0xfc,0xe9,0x3d,0xe6,0x7a,0x02,0xad,0x16,0x5b,0xd7,0x20,0x8d,\n-    0x03,0x0a,0xfd,0x0f,0x24,0xe5,0x3e,0x6d,0xf6,0x32,0xb6,0xf3,0x20,0x8d,\n-    0x03,0x0a,0xfd,0x99,0xcb,0x49,0xdb,0xb5,0x41,0x3b,0xb4,0x33,0x20,0x8d,\n-    0x03,0x0a,0xfe,0x14,0xcc,0xd3,0x01,0xb0,0xf4,0xf9,0xe4,0xdc,0x20,0x8d,\n-    0x03,0x0a,0x06,0xbe,0x1a,0x9d,0x0d,0x07,0x31,0xad,0xa6,0xee,0x20,0x8d,\n-    0x03,0x0a,0x07,0x77,0x59,0x8d,0x9f,0xa2,0x09,0x3e,0xd4,0x6b,0x20,0x8d,\n-    0x03,0x0a,0x07,0x7d,0xdf,0xea,0xe9,0xa3,0x8a,0xd9,0xe8,0x6f,0x20,0x8d,\n-    0x03,0x0a,0x00,0x5f,0xae,0xa9,0xa8,0x28,0xe4,0xd1,0x6a,0x35,0x20,0x8d,\n-    0x03,0x0a,0x01,0x0b,0x7f,0xd0,0x39,0x78,0x17,0xf1,0x2c,0x0a,0x20,0x8d,\n-    0x03,0x0a,0x02,0x3b,0x1d,0x0d,0x0e,0xcb,0x89,0xf8,0xc4,0x79,0x20,0x8d,\n-    0x03,0x0a,0x02,0x1f,0x47,0xbc,0xe8,0x9e,0xc8,0xd3,0x19,0xe9,0x20,0x8d,\n-    0x03,0x0a,0x02,0xcc,0xf4,0xa7,0x06,0x1e,0xcd,0x36,0xb1,0xef,0x20,0x8d,\n-    0x03,0x0a,0x02,0xd0,0x7a,0x03,0xf1,0x3e,0x05,0xce,0xe8,0xf1,0x20,0x8d,\n-    0x03,0x0a,0x03,0x36,0x6c,0x60,0xb8,0x6d,0xf3,0x6c,0x5c,0xf7,0x20,0x8d,\n-    0x03,0x0a,0x03,0x54,0xec,0xe4,0xa7,0x5e,0xa3,0xba,0x0b,0xd4,0x20,0x8d,\n-    0x03,0x0a,0x04,0xf7,0x3b,0x25,0x61,0x98,0xb4,0xb8,0x36,0x1d,0x20,0x8d,\n-    0x03,0x0a,0x05,0x60,0xe0,0xaf,0xfa,0x7b,0x05,0xee,0x0f,0x08,0x20,0x8d,\n-    0x03,0x0a,0x05,0x98,0x3c,0xe8,0xb2,0xd8,0x7a,0x7e,0xd2,0x7d,0x20,0x8d,\n-    0x03,0x0a,0x06,0x31,0x67,0xa3,0x1f,0xf8,0x69,0x31,0xa6,0x29,0x20,0x8d,\n-    0x03,0x0a,0x0e,0x91,0xb7,0xa7,0xe2,0xd7,0x05,0x57,0xc6,0x5f,0x20,0x8d,\n-    0x03,0x0a,0x0f,0x10,0xb2,0x07,0x17,0x15,0x3c,0xd9,0xcd,0x0e,0x20,0x8d,\n-    0x03,0x0a,0x0f,0x2b,0x55,0x06,0x08,0x78,0x98,0xab,0x3f,0x95,0x20,0x8d,\n-    0x03,0x0a,0x08,0xc6,0x58,0x5d,0xf2,0xea,0x02,0x3d,0x96,0x76,0x20,0x8d,\n-    0x03,0x0a,0x09,0x3a,0x13,0x09,0xee,0xe3,0x9d,0x4b,0xf6,0x18,0x20,0x8d,\n-    0x03,0x0a,0x09,0x96,0x0e,0x33,0xd9,0x24,0xeb,0x3a,0xfd,0x72,0x20,0x8d,\n-    0x03,0x0a,0x09,0xf7,0xa3,0x66,0xdb,0x6e,0x04,0xac,0xc2,0x93,0x20,0x8d,\n-    0x03,0x0a,0x09,0xdd,0xc5,0x38,0x6f,0x21,0xdb,0xfb,0xc7,0x77,0x20,0x8d,\n-    0x03,0x0a,0x0a,0x26,0x27,0x21,0xbc,0x8a,0xca,0x0e,0x5a,0x17,0x20,0x8d,\n-    0x03,0x0a,0x0a,0x2d,0xf9,0x79,0x25,0xf4,0x74,0xc2,0xec,0x54,0x20,0x8d,\n-    0x03,0x0a,0x0a,0xbf,0x87,0xf8,0x8f,0x6b,0x04,0xb5,0xc3,0xfa,0x20,0x8d,\n-    0x03,0x0a,0x0a,0xc4,0xa9,0xc4,0xd5,0x27,0x6a,0x49,0xa6,0x4a,0x20,0x8d,\n-    0x03,0x0a,0x0a,0xec,0x17,0xfc,0xc5,0x19,0x4a,0x39,0x5f,0x86,0x20,0x8d,\n-    0x03,0x0a,0x0b,0x6e,0xdf,0x42,0x02,0xef,0x4d,0x56,0xf5,0xcf,0x20,0x8d,\n-    0x03,0x0a,0x0b,0xfe,0xed,0x69,0x75,0x12,0x41,0x62,0x2e,0xb5,0x20,0x8d,\n-    0x03,0x0a,0x0c,0x21,0x88,0x50,0x46,0x4f,0x26,0x23,0xb7,0xdc,0x20,0x8d,\n-    0x03,0x0a,0x0d,0x47,0x96,0x52,0x62,0x81,0x7e,0x6c,0xe5,0xbd,0x20,0x8d,\n-    0x03,0x0a,0x16,0xfd,0x96,0x10,0xc9,0x52,0x1a,0x59,0xb2,0x65,0x20,0x8d,\n-    0x03,0x0a,0x17,0x0a,0xdf,0x68,0xcd,0x5c,0xd6,0x68,0xbe,0x75,0x20,0x8d,\n-    0x03,0x0a,0x10,0x00,0x45,0xf7,0x04,0x1d,0x50,0xe7,0x43,0x2a,0x20,0x8d,\n-    0x03,0x0a,0x10,0x21,0xde,0x00,0x2b,0x28,0x62,0xda,0x30,0x63,0x20,0x8d,\n-    0x03,0x0a,0x11,0x22,0xd8,0xb2,0x2a,0xee,0x5c,0xcc,0xbb,0x2d,0x20,0x8d,\n-    0x03,0x0a,0x11,0xe2,0x8f,0x22,0x66,0x48,0x00,0x67,0x17,0x93,0x20,0x8d,\n-    0x03,0x0a,0x13,0x45,0x64,0x2b,0x73,0x68,0xf4,0x44,0xb3,0xb9,0x20,0x8d,\n-    0x03,0x0a,0x15,0x30,0x98,0x3b,0x28,0x23,0x04,0xcb,0x02,0xeb,0x20,0x8d,\n-    0x03,0x0a,0x15,0xff,0x00,0x68,0xcf,0x86,0x1f,0xf7,0xac,0x7d,0x20,0x8d,\n-    0x03,0x0a,0x16,0x5f,0xfb,0x18,0x14,0x97,0x0d,0x54,0x3b,0xfa,0x20,0x8d,\n-    0x03,0x0a,0x1e,0x8a,0xde,0xf2,0x25,0xc2,0x46,0x06,0x99,0x1c,0x20,0x8d,\n-    0x03,0x0a,0x1e,0xa4,0xae,0x76,0x9e,0x10,0x3d,0xcc,0x12,0x07,0x20,0x8d,\n-    0x03,0x0a,0x1e,0xc0,0xeb,0x31,0xa6,0xaa,0xa7,0x2c,0xa0,0x04,0x20,0x8d,\n-    0x03,0x0a,0x1f,0x51,0x4e,0x01,0x19,0xde,0x34,0xa3,0x08,0xc9,0x20,0x8d,\n-    0x03,0x0a,0x1f,0xb2,0x1b,0x6a,0x57,0x6d,0xcc,0x9e,0xca,0xbb,0x20,0x8d,\n-    0x03,0x0a,0x18,0x7b,0x11,0xf4,0x9c,0xf4,0xfe,0xc3,0x21,0xa8,0x20,0x8d,\n-    0x03,0x0a,0x18,0x91,0xa3,0x51,0x6e,0x8a,0xf9,0xcc,0x27,0xbd,0x20,0x8d,\n-    0x03,0x0a,0x18,0xdf,0x33,0xe9,0x96,0x9e,0xe3,0x2a,0xb9,0xc6,0x20,0x8d,\n-    0x03,0x0a,0x19,0x63,0x6c,0x83,0xe5,0x11,0x04,0xa6,0xb5,0x92,0x20,0x8d,\n-    0x03,0x0a,0x1a,0x6c,0x74,0x95,0x3c,0x89,0xf6,0xec,0xef,0x09,0x20,0x8d,\n-    0x03,0x0a,0x1a,0x95,0xd6,0x31,0xe4,0xea,0x66,0x97,0x0d,0x5d,0x20,0x8d,\n-    0x03,0x0a,0x1b,0x93,0xbc,0x99,0x92,0x0e,0x69,0x16,0x40,0xcf,0x20,0x8d,\n-    0x03,0x0a,0x1b,0xc4,0x4e,0x17,0x71,0x14,0x06,0x3c,0x86,0xfd,0x20,0x8d,\n-    0x03,0x0a,0x1c,0x6c,0xed,0xd5,0xb7,0x11,0xfa,0xec,0x94,0x2e,0x20,0x8d,\n-    0x03,0x0a,0x1d,0x10,0xa5,0x20,0x77,0x43,0xf6,0xbc,0x12,0xed,0x20,0x8d,\n-    0x03,0x0a,0x1d,0x20,0x35,0xa1,0xf3,0x16,0xb4,0x8f,0x1c,0xbd,0x20,0x8d,\n-    0x03,0x0a,0x1d,0x30,0xfe,0x09,0xc7,0xe8,0xfe,0xd3,0xee,0x83,0x20,0x8d,\n-    0x03,0x0a,0x1d,0x33,0xd9,0xd9,0xdb,0xcf,0xc5,0xde,0xae,0xe9,0x20,0x8d,\n-    0x03,0x0a,0x1d,0x69,0xe1,0xac,0x11,0xf1,0x32,0x2f,0x5c,0x8d,0x20,0x8d,\n-    0x03,0x0a,0x1e,0x3d,0x98,0x4b,0x9e,0xc0,0x96,0x40,0x63,0x0f,0x20,0x8d,\n-    0x03,0x0a,0x1e,0x75,0x81,0xb1,0x3b,0xc4,0x22,0x26,0x72,0x3f,0x20,0x8d,\n-    0x03,0x0a,0x26,0x83,0xa0,0x76,0x54,0xa8,0xc1,0x6c,0xde,0x83,0x20,0x8d,\n-    0x03,0x0a,0x26,0xf6,0x7e,0xfd,0x3a,0x25,0x94,0xa8,0x49,0xbd,0x20,0x8d,\n-    0x03,0x0a,0x27,0x54,0x94,0x03,0x1f,0x7e,0x53,0xd8,0x3f,0x35,0x20,0x8d,\n-    0x03,0x0a,0x27,0xd0,0xa7,0x73,0x43,0xd5,0xb2,0x26,0x57,0x1c,0x20,0x8d,\n-    0x03,0x0a,0x20,0x3c,0x17,0x1f,0x8a,0x74,0xe1,0xdf,0x5a,0x5d,0x20,0x8d,\n-    0x03,0x0a,0x21,0x47,0x7f,0x18,0x5c,0x97,0x49,0x9c,0x40,0x86,0x20,0x8d,\n-    0x03,0x0a,0x21,0x62,0xfa,0x51,0x02,0xf5,0x14,0x4c,0x40,0x52,0x20,0x8d,\n-    0x03,0x0a,0x21,0xa3,0x41,0x6c,0x28,0xda,0x27,0x1a,0x78,0xd0,0x20,0x8d,\n-    0x03,0x0a,0x24,0x45,0xe9,0xa6,0x5a,0xa0,0xb0,0x01,0xaf,0x5b,0x20,0x8d,\n-    0x03,0x0a,0x25,0x09,0xa6,0xf6,0x4a,0xec,0xd5,0x33,0x74,0x35,0x20,0x8d,\n-    0x03,0x0a,0x26,0x55,0x1f,0xca,0x70,0xe5,0xbe,0xe3,0xa6,0x33,0x20,0x8d,\n-    0x03,0x0a,0x2e,0xdb,0x8c,0x24,0x20,0xf2,0x9f,0x7c,0xb4,0xea,0x20,0x8d,\n-    0x03,0x0a,0x28,0x21,0xfd,0xd5,0x3c,0x78,0xa5,0xfd,0xcc,0xf4,0x20,0x8d,\n-    0x03,0x0a,0x28,0xeb,0x35,0xa7,0x6f,0x90,0x83,0x7a,0x1f,0xfd,0x20,0x8d,\n-    0x03,0x0a,0x29,0x86,0xfb,0xba,0xbc,0x6e,0x6f,0x53,0x89,0xf5,0x20,0x8d,\n-    0x03,0x0a,0x2a,0x25,0x08,0x7a,0xb9,0x56,0xd9,0xe9,0xeb,0x5d,0x20,0x8d,\n-    0x03,0x0a,0x2a,0x8c,0xfd,0xc2,0xc4,0x30,0x05,0x11,0xe8,0x29,0x20,0x8d,\n-    0x03,0x0a,0x2b,0xb7,0x31,0x96,0xd7,0xd7,0xe6,0x05,0x42,0x1d,0x20,0x8d,\n-    0x03,0x0a,0x2c,0x15,0x79,0x88,0xf6,0xc3,0xd1,0x27,0xa9,0xf5,0x20,0x8d,\n-    0x03,0x0a,0x2c,0x28,0xda,0x1d,0x76,0xa8,0xff,0x18,0x78,0x7d,0x20,0x8d,\n-    0x03,0x0a,0x2c,0x6d,0x3e,0xb2,0x42,0x7e,0x0e,0x8a,0x59,0xe4,0x20,0x8d,\n-    0x03,0x0a,0x2c,0xc1,0xc3,0x15,0x28,0xa5,0x7c,0x5d,0x2c,0x9a,0x20,0x8d,\n-    0x03,0x0a,0x2d,0x1d,0x8d,0x21,0xf4,0x84,0x61,0x62,0x74,0x45,0x20,0x8d,\n-    0x03,0x0a,0x2e,0x7c,0xd9,0x21,0x3e,0x4a,0x31,0x4b,0x2e,0x42,0x20,0x8d,\n-    0x03,0x0a,0x36,0xea,0xb6,0x80,0x00,0x71,0xbb,0x23,0x51,0x1d,0x20,0x8d,\n-    0x03,0x0a,0x37,0x38,0x8f,0x26,0xd2,0xa4,0xd5,0x66,0x49,0xf9,0x20,0x8d,\n-    0x03,0x0a,0x37,0x7b,0x3f,0x74,0x7d,0x12,0x92,0x8b,0x89,0xb6,0x20,0x8d,\n-    0x03,0x0a,0x30,0x12,0x3f,0x13,0x11,0x5e,0xa1,0x65,0x15,0x86,0x20,0x8d,\n-    0x03,0x0a,0x30,0x57,0x42,0x6c,0xf1,0xee,0xdf,0xc3,0x46,0xff,0x20,0x8d,\n-    0x03,0x0a,0x30,0x5f,0x17,0x76,0x79,0x1d,0x11,0x42,0x97,0x95,0x20,0x8d,\n-    0x03,0x0a,0x30,0xb8,0xbd,0xce,0x0b,0xde,0xa0,0x72,0x99,0x88,0x20,0x8d,\n-    0x03,0x0a,0x30,0x9a,0xb7,0x46,0xb3,0x7e,0x05,0x40,0x24,0x5e,0x20,0x8d,\n-    0x03,0x0a,0x30,0xe4,0x80,0xe9,0xaa,0xd1,0x08,0xe4,0x0c,0xc2,0x20,0x8d,\n-    0x03,0x0a,0x31,0x3a,0x66,0x7c,0x5e,0xb7,0xf0,0x03,0xbf,0x3f,0x20,0x8d,\n-    0x03,0x0a,0x31,0x0c,0x29,0x90,0x84,0x7f,0x05,0x62,0xcd,0x7d,0x20,0x8d,\n-    0x03,0x0a,0x31,0x5d,0x88,0x82,0x83,0x35,0x7b,0x04,0x8d,0x54,0x20,0x8d,\n-    0x03,0x0a,0x31,0x9e,0x1a,0x61,0xec,0xb9,0x91,0xaf,0x2c,0x5e,0x20,0x8d,\n-    0x03,0x0a,0x31,0xe0,0x8a,0xe0,0x9f,0x11,0x44,0xa4,0x49,0xb3,0x20,0x8d,\n-    0x03,0x0a,0x32,0x22,0x05,0x5d,0xcc,0x69,0x3a,0x50,0xe3,0xdc,0x20,0x8d,\n-    0x03,0x0a,0x32,0xf3,0xd3,0x15,0x5b,0xdc,0xe9,0x43,0x75,0xa4,0x20,0x8d,\n-    0x03,0x0a,0x33,0xd6,0x09,0xdd,0xd8,0x37,0x5b,0x75,0xf6,0x29,0x20,0x8d,\n-    0x03,0x0a,0x34,0x50,0xf5,0xf6,0xe9,0xb6,0x34,0x31,0x47,0xc2,0x20,0x8d,\n-    0x03,0x0a,0x34,0xce,0x7c,0xad,0x90,0x12,0x35,0xa6,0xde,0x34,0x20,0x8d,\n-    0x03,0x0a,0x34,0xdd,0xa1,0xfb,0x92,0xb3,0xa4,0x56,0x2b,0xc2,0x20,0x8d,\n-    0x03,0x0a,0x35,0x00,0x24,0x34,0x98,0xee,0x98,0x61,0x05,0xfa,0x20,0x8d,\n-    0x03,0x0a,0x35,0x95,0x33,0x45,0x93,0xb2,0xbc,0xda,0xf6,0x42,0x20,0x8d,\n-    0x03,0x0a,0x35,0x9d,0x76,0xb9,0x43,0x15,0x85,0xf3,0xe3,0x8f,0x20,0x8d,\n-    0x03,0x0a,0x3e,0xf7,0xb2,0xf2,0x0d,0xb1,0x3e,0xc8,0xe1,0x8d,0x20,0x8d,\n-    0x03,0x0a,0x3f,0x81,0xbd,0x37,0x81,0x58,0x6d,0x6c,0x37,0x83,0x20,0x8d,\n-    0x03,0x0a,0x38,0x0b,0x69,0xc4,0x2e,0x74,0xb2,0xe2,0x30,0x2c,0x20,0x8d,\n-    0x03,0x0a,0x38,0x6c,0x73,0x48,0x3b,0x21,0x10,0xd6,0xc7,0xd3,0x20,0x8d,\n-    0x03,0x0a,0x38,0xab,0xe2,0xba,0xe7,0xeb,0x15,0xf2,0x9c,0x3d,0x20,0x8d,\n-    0x03,0x0a,0x38,0xfc,0x75,0x4c,0x4b,0xf5,0x80,0xcc,0xaf,0x2c,0x20,0x8d,\n-    0x03,0x0a,0x38,0xc1,0xe6,0x48,0x1c,0xaf,0x23,0x3f,0xfc,0xd7,0x20,0x8d,\n-    0x03,0x0a,0x38,0xcc,0xdb,0xaa,0x90,0x90,0xfd,0x64,0xda,0xd7,0x20,0x8d,\n-    0x03,0x0a,0x39,0x8f,0xb0,0x65,0xbb,0x21,0x24,0x31,0xd4,0x46,0x20,0x8d,\n-    0x03,0x0a,0x39,0xf1,0x7a,0x78,0x36,0x52,0x48,0x52,0x25,0xd9,0x20,0x8d,\n-    0x03,0x0a,0x3a,0x32,0xdf,0x45,0x8e,0x2c,0x8d,0xba,0x3d,0x8d,0x20,0x8d,\n-    0x03,0x0a,0x3a,0x61,0x7b,0xcb,0x1a,0x74,0x88,0xc2,0xd4,0x95,0x20,0x8d,\n-    0x03,0x0a,0x3a,0x82,0xff,0xb0,0x26,0xb7,0x94,0xb5,0xcb,0x92,0x20,0x8d,\n-    0x03,0x0a,0x3a,0xdc,0x9a,0x59,0x16,0x0a,0x9c,0x9e,0x28,0x79,0x20,0x8d,\n-    0x03,0x0a,0x3a,0xf3,0x79,0x26,0x3f,0x70,0x77,0x0c,0xe6,0x10,0x20,0x8d,\n-    0x03,0x0a,0x3b,0x51,0x4c,0xbd,0x64,0xc9,0x03,0x83,0xd7,0xe0,0x20,0x8d,\n-    0x03,0x0a,0x3b,0x9a,0x32,0x59,0x49,0xe4,0xb9,0x11,0x8a,0xc5,0x20,0x8d,\n-    0x03,0x0a,0x3c,0x17,0xd6,0xd7,0xd5,0x38,0x88,0x81,0xec,0x2d,0x20,0x8d,\n-    0x03,0x0a,0x3c,0x9e,0x97,0x7d,0x90,0x8c,0x49,0xd3,0x62,0xf1,0x20,0x8d,\n-    0x03,0x0a,0x3d,0x3d,0xc9,0x69,0x83,0x8e,0xef,0xfc,0x5d,0x40,0x20,0x8d,\n-    0x03,0x0a,0x3d,0x6d,0x58,0x6a,0x56,0x54,0x2d,0xb8,0x57,0x0e,0x20,0x8d,\n-    0x03,0x0a,0x3d,0x9d,0xa0,0xa3,0x0d,0x1c,0x63,0x57,0xaf,0xc5,0x20,0x8d,\n-    0x03,0x0a,0x3e,0x6e,0x9d,0x8e,0x67,0xde,0x35,0x79,0xf3,0xae,0x20,0x8d,\n-    0x03,0x0a,0x46,0xe8,0x5b,0xd2,0xdb,0x9f,0xc5,0x72,0x8d,0xf0,0x20,0x8d,\n-    0x03,0x0a,0x40,0x36,0xdd,0xc3,0xb4,0xe7,0x4d,0x57,0xdf,0xe0,0x20,0x8d,\n-    0x03,0x0a,0x40,0x8a,0x69,0x6c,0xa2,0x98,0x94,0x3e,0x60,0x8e,0x20,0x8d,\n-    0x03,0x0a,0x40,0x9f,0x9f,0x4c,0xf0,0xa8,0xd2,0x2b,0x2e,0xa1,0x20,0x8d,\n-    0x03,0x0a,0x41,0x77,0xac,0xbb,0xb4,0xe3,0x0e,0x3a,0x34,0xa3,0x20,0x8d,\n-    0x03,0x0a,0x41,0xb8,0xb3,0x52,0x0b,0xf5,0x6e,0xa0,0xb1,0x91,0x20,0x8d,\n-    0x03,0x0a,0x41,0xce,0x28,0xfc,0xa7,0x16,0x60,0x30,0x0b,0x98,0x20,0x8d,\n-    0x03,0x0a,0x42,0x59,0xa9,0xe2,0xee,0x0f,0xea,0xaa,0x83,0x39,0x20,0x8d,\n-    0x03,0x0a,0x43,0xf6,0xfa,0x52,0x06,0x3d,0x18,0x5c,0xf6,0xd6,0x20,0x8d,\n-    0x03,0x0a,0x44,0x36,0xa2,0x4f,0xfa,0x2e,0xf1,0xa2,0xc5,0xe6,0x20,0x8d,\n-    0x03,0x0a,0x44,0x00,0x69,0xf4,0x4e,0xe0,0xe7,0xf3,0xf8,0xe5,0x20,0x8d,\n-    0x03,0x0a,0x45,0x0d,0x6e,0x69,0x07,0xf1,0xdf,0x18,0x47,0x5e,0x20,0x8d,\n-    0x03,0x0a,0x45,0x4b,0xff,0xf2,0xbc,0x9f,0xd5,0xed,0xa3,0xc3,0x20,0x8d,\n-    0x03,0x0a,0x45,0x4a,0x01,0x0c,0xbf,0x12,0x0d,0xac,0xeb,0x1a,0x20,0x8d,\n-    0x03,0x0a,0x45,0x65,0x71,0xd9,0x54,0xeb,0x8d,0xac,0xa7,0x8b,0x20,0x8d,\n-    0x03,0x0a,0x45,0xec,0x68,0x9c,0x0a,0x5d,0x69,0xc3,0x79,0xdf,0x20,0x8d,\n-    0x03,0x0a,0x46,0x7b,0xe6,0x39,0xde,0x62,0x9f,0xb3,0x7e,0xee,0x20,0x8d,\n-    0x03,0x0a,0x4e,0x84,0xfe,0xb2,0x96,0xea,0x76,0xba,0x30,0x57,0x20,0x8d,\n-    0x03,0x0a,0x4e,0x97,0x15,0x46,0xd4,0x32,0xc7,0x62,0x5a,0xd2,0x20,0x8d,\n-    0x03,0x0a,0x4e,0xa1,0x36,0x28,0x7a,0x18,0x02,0xb9,0x4b,0x3c,0x20,0x8d,\n-    0x03,0x0a,0x4f,0x49,0xac,0x50,0x0d,0xef,0xeb,0xa3,0xf4,0x8b,0x20,0x8d,\n-    0x03,0x0a,0x4f,0x52,0x58,0x8e,0x67,0x84,0xfa,0x6d,0x76,0xf9,0x20,0x8d,\n-    0x03,0x0a,0x4f,0x56,0xad,0x52,0xba,0x0c,0x9e,0x58,0x5c,0xaa,0x20,0x8d,\n-    0x03,0x0a,0x48,0x1b,0x5a,0xe6,0x4c,0xc8,0xa4,0x9d,0x95,0x0b,0x20,0x8d,\n-    0x03,0x0a,0x49,0x1a,0xdd,0x4d,0x98,0x5e,0xef,0x70,0x45,0x90,0x20,0x8d,\n-    0x03,0x0a,0x49,0x5c,0x4e,0x97,0x52,0x16,0x5c,0x92,0xbf,0x7a,0x20,0x8d,\n-    0x03,0x0a,0x49,0x84,0x64,0x79,0x5a,0x7d,0xdc,0xe4,0x76,0x1b,0x20,0x8d,\n-    0x03,0x0a,0x49,0xc0,0xd0,0x6b,0x92,0xd8,0xf2,0xa4,0x4f,0x2f,0x20,0x8d,\n-    0x03,0x0a,0x4a,0x26,0x6a,0x2c,0x3a,0xe3,0x2a,0x58,0x44,0x66,0x20,0x8d,\n-    0x03,0x0a,0x4a,0x69,0x5b,0x05,0x25,0xca,0xd2,0xc6,0xfe,0x7b,0x20,0x8d,\n-    0x03,0x0a,0x4a,0xc4,0x57,0x30,0xd1,0xed,0xca,0x4b,0x81,0x05,0x20,0x8d,\n-    0x03,0x0a,0x4a,0xc8,0x79,0x7b,0x01,0x0e,0xbd,0x05,0xb5,0xa0,0x20,0x8d,\n-    0x03,0x0a,0x4a,0xd3,0x9c,0xf2,0x6c,0x0c,0x23,0x78,0x6e,0x1d,0x20,0x8d,\n-    0x03,0x0a,0x4b,0x85,0xc7,0x40,0x44,0x20,0xd4,0x6f,0xfe,0xa5,0x20,0x8d,\n-    0x03,0x0a,0x4c,0x7b,0x8f,0x35,0x34,0x08,0x83,0x5f,0x1b,0x7f,0x20,0x8d,\n-    0x03,0x0a,0x4c,0x5c,0x07,0x4b,0xcb,0x07,0x2a,0x82,0x1d,0xdc,0x20,0x8d,\n-    0x03,0x0a,0x4c,0x98,0xf3,0x99,0x40,0xc7,0xd0,0x83,0x85,0x51,0x20,0x8d,\n-    0x03,0x0a,0x4c,0xd5,0x26,0xb9,0x54,0x90,0x72,0xc9,0x7e,0xcb,0x20,0x8d,\n-    0x03,0x0a,0x4d,0x3a,0x3a,0x3b,0x71,0xf3,0xfc,0x34,0x65,0xa2,0x20,0x8d,\n-    0x03,0x0a,0x4d,0xbd,0x9c,0x32,0xe2,0x69,0x02,0x03,0xd2,0x89,0x20,0x8d,\n-    0x03,0x0a,0x4d,0xc0,0xba,0x9c,0xbf,0xb7,0xec,0x4a,0xc3,0x36,0x20,0x8d,\n-    0x03,0x0a,0x4e,0x32,0x72,0x6d,0x06,0xe7,0x10,0x25,0x62,0x41,0x20,0x8d,\n-    0x03,0x0a,0x4e,0x49,0xea,0x29,0xbc,0x40,0xe2,0x7e,0x70,0x8e,0x20,0x8d,\n-    0x03,0x0a,0x57,0x0c,0xb7,0x4d,0x77,0x6b,0x27,0x30,0xf8,0x53,0x20,0x8d,\n-    0x03,0x0a,0x57,0xe9,0x8d,0xa2,0xcc,0xa9,0xa9,0x9c,0x18,0x7a,0x20,0x8d,\n-    0x03,0x0a,0x52,0xf5,0xb7,0x14,0x06,0xdd,0x14,0x1f,0x1e,0xeb,0x20,0x8d,\n-    0x03,0x0a,0x53,0x95,0x3d,0x42,0x3e,0x1f,0x1e,0xcc,0x07,0x43,0x20,0x8d,\n-    0x03,0x0a,0x53,0xc0,0xba,0x6c,0xfd,0xc0,0xd4,0xe0,0x22,0xb2,0x20,0x8d,\n-    0x03,0x0a,0x54,0x46,0xf0,0x8e,0xb3,0x85,0xba,0x2e,0xac,0x84,0x20,0x8d,\n-    0x03,0x0a,0x54,0x51,0x6f,0x2b,0x29,0xc8,0x23,0x93,0x07,0x66,0x20,0x8d,\n-    0x03,0x0a,0x54,0x5f,0xa9,0x9c,0x4c,0xb4,0x5f,0x27,0x50,0x9e,0x20,0x8d,\n-    0x03,0x0a,0x55,0x71,0x51,0xd9,0x36,0x98,0x09,0xd6,0x3b,0xff,0x20,0x8d,\n-    0x03,0x0a,0x56,0x23,0x78,0xa3,0xb1,0x0c,0x7c,0x87,0xd2,0x32,0x20,0x8d,\n-    0x03,0x0a,0x56,0x76,0xeb,0x9b,0xff,0xe7,0x47,0x79,0xfb,0x50,0x20,0x8d,\n-    0x03,0x0a,0x5e,0xed,0xd2,0x89,0x48,0xd5,0x83,0x17,0x6a,0x01,0x20,0x8d,\n-    0x03,0x0a,0x5f,0x38,0x14,0x4a,0x97,0x39,0xff,0x12,0x07,0xb0,0x20,0x8d,\n-    0x03,0x0a,0x5f,0x7d,0xd3,0x77,0x5b,0x23,0x12,0x40,0xd2,0x49,0x20,0x8d,\n-    0x03,0x0a,0x5f,0xad,0xd5,0x0c,0x88,0x35,0xa4,0x66,0x97,0xb3,0x20,0x8d,\n-    0x03,0x0a,0x5f,0xc1,0xc2,0x32,0x38,0x2d,0xd4,0x93,0x31,0x81,0x20,0x8d,\n-    0x03,0x0a,0x5f,0xe4,0xb7,0x48,0x49,0x84,0x02,0x82,0x8a,0x56,0x20,0x8d,\n-    0x03,0x0a,0x58,0x00,0x54,0xc2,0xb3,0x71,0xbe,0x34,0x95,0x7a,0x20,0x8d,\n-    0x03,0x0a,0x58,0x0f,0xef,0xf9,0x57,0x09,0x82,0x6b,0x6e,0x9a,0x20,0x8d,\n-    0x03,0x0a,0x58,0x61,0xa0,0x7d,0xed,0x7b,0x2a,0x8b,0x6a,0x0e,0x20,0x8d,\n-    0x03,0x0a,0x58,0xb9,0x66,0xbe,0x0b,0xd7,0xeb,0x86,0x23,0x7d,0x20,0x8d,\n-    0x03,0x0a,0x58,0xdc,0x52,0x84,0xaf,0x56,0xd3,0xe1,0x7f,0x1f,0x20,0x8d,\n-    0x03,0x0a,0x59,0x0e,0xf6,0x19,0x6a,0x45,0x5c,0x18,0x6a,0x0e,0x20,0x8d,\n-    0x03,0x0a,0x59,0x89,0x67,0xa7,0x3f,0x41,0x3e,0x30,0x42,0x11,0x20,0x8d,\n-    0x03,0x0a,0x59,0x95,0x50,0xd6,0x2e,0xf7,0xd2,0xe6,0x3a,0x56,0x20,0x8d,\n-    0x03,0x0a,0x5a,0x2d,0xdc,0xf1,0xa6,0x40,0xbc,0x1f,0xd5,0xb5,0x20,0x8d,\n-    0x03,0x0a,0x5a,0x65,0xf3,0x5a,0x2c,0x66,0x41,0xe8,0x78,0xc0,0x20,0x8d,\n-    0x03,0x0a,0x5b,0x2a,0x0b,0xec,0x9e,0x05,0x81,0x7a,0x9e,0x08,0x20,0x8d,\n-    0x03,0x0a,0x5c,0x73,0xff,0x8e,0xc5,0xfe,0x21,0xc1,0x19,0xb3,0x20,0x8d,\n-    0x03,0x0a,0x5d,0x41,0xde,0x3d,0xa1,0x86,0x9b,0x26,0x27,0x11,0x20,0x8d,\n-    0x03,0x0a,0x5d,0xc5,0xaa,0x3c,0xf7,0xc6,0x2e,0x55,0x9d,0xa5,0x20,0x8d,\n-    0x03,0x0a,0x5e,0x13,0x80,0x8e,0x3c,0x3b,0x13,0xb0,0xc0,0x01,0x20,0x8d,\n-    0x03,0x0a,0x5e,0x75,0x95,0xb5,0x98,0xc3,0x6d,0x33,0x58,0xba,0x20,0x8d,\n-    0x03,0x0a,0x67,0x8e,0x26,0xbd,0x0a,0x43,0x30,0x7d,0xff,0x0f,0x20,0x8d,\n-    0x03,0x0a,0x60,0xfd,0xbe,0xb9,0x89,0x6c,0x4c,0x72,0x10,0x7b,0x20,0x8d,\n-    0x03,0x0a,0x60,0xc3,0xb7,0x51,0xf6,0x2f,0x0b,0xa8,0x61,0x21,0x20,0x8d,\n-    0x03,0x0a,0x61,0x3c,0x3e,0x12,0x57,0xfb,0x8e,0x36,0xdd,0xa4,0x20,0x8d,\n-    0x03,0x0a,0x61,0x04,0x55,0x21,0x5d,0x12,0x39,0xfb,0x09,0x49,0x20,0x8d,\n-    0x03,0x0a,0x61,0x63,0x52,0x55,0xbf,0xb7,0xa3,0x69,0x3f,0x91,0x20,0x8d,\n-    0x03,0x0a,0x62,0x19,0x4a,0x4d,0x64,0xb7,0x65,0x19,0x8e,0x8a,0x20,0x8d,\n-    0x03,0x0a,0x63,0x71,0x25,0x6d,0x19,0xbd,0x62,0x0d,0x9e,0x95,0x20,0x8d,\n-    0x03,0x0a,0x64,0x29,0xe3,0x42,0x71,0x3b,0x3d,0x7c,0xda,0xc7,0x20,0x8d,\n-    0x03,0x0a,0x65,0xa8,0x2f,0x55,0xcc,0xe3,0x4c,0x84,0xcc,0x3b,0x20,0x8d,\n-    0x03,0x0a,0x65,0xc7,0x38,0xa4,0xe4,0xd6,0x0b,0x2b,0xed,0xe6,0x20,0x8d,\n-    0x03,0x0a,0x6f,0x10,0x12,0x4f,0x8f,0x44,0x85,0x5d,0x69,0xa9,0x20,0x8d,\n-    0x03,0x0a,0x6f,0x87,0xcf,0x54,0x39,0xbf,0x36,0x12,0x55,0x61,0x20,0x8d,\n-    0x03,0x0a,0x6f,0xa7,0xe5,0x14,0xd9,0x5d,0x5d,0x9b,0x9c,0xac,0x20,0x8d,\n-    0x03,0x0a,0x6f,0xe3,0x17,0x08,0xf6,0x24,0x4b,0xa8,0x5f,0x24,0x20,0x8d,\n-    0x03,0x0a,0x68,0xa4,0x34,0x41,0x8d,0xb9,0xda,0xd4,0x86,0x59,0x20,0x8d,\n-    0x03,0x0a,0x6a,0x27,0x7b,0x6d,0x0b,0x29,0x5a,0x67,0xd1,0x95,0x20,0x8d,\n-    0x03,0x0a,0x6a,0x57,0x2a,0xd0,0x28,0x58,0xc8,0x75,0xd2,0xd1,0x20,0x8d,\n-    0x03,0x0a,0x6a,0x64,0xb2,0xc9,0x15,0xc6,0x0e,0x8b,0x86,0x4f,0x20,0x8d,\n-    0x03,0x0a,0x6a,0x8b,0xd2,0x78,0x3f,0x7a,0xf8,0x92,0x8f,0x80,0x20,0x8d,\n-    0x03,0x0a,0x6a,0x9e,0xf9,0x07,0x73,0xd8,0xe8,0x24,0x93,0xcc,0x20,0x8d,\n-    0x03,0x0a,0x6a,0xcb,0x6c,0x41,0x52,0x61,0x20,0x4e,0x77,0x39,0x20,0x8d,\n-    0x03,0x0a,0x6a,0xf0,0x96,0x3c,0x4c,0x78,0x33,0xd0,0xf0,0x00,0x20,0x8d,\n-    0x03,0x0a,0x6b,0x59,0x5f,0xe7,0xdd,0x57,0xba,0xc1,0x12,0x51,0x20,0x8d,\n-    0x03,0x0a,0x6c,0x62,0x5b,0x0d,0x91,0x66,0xd0,0xca,0x10,0x2d,0x20,0x8d,\n-    0x03,0x0a,0x6c,0x62,0xc5,0x19,0x94,0x5b,0xcd,0x20,0xd9,0x73,0x20,0x8d,\n-    0x03,0x0a,0x6d,0xb8,0x7f,0xac,0x82,0x55,0x27,0xf2,0x01,0xf5,0x20,0x8d,\n-    0x03,0x0a,0x6d,0x95,0x8d,0xd8,0x7b,0x41,0xdc,0x81,0xd4,0x3d,0x20,0x8d,\n-    0x03,0x0a,0x6e,0x38,0xa5,0x11,0x8c,0x64,0x2b,0xc5,0xbe,0x6c,0x20,0x8d,\n-    0x03,0x0a,0x76,0xbb,0x65,0x0a,0xdf,0x23,0xa2,0x6d,0x4d,0xc8,0x20,0x8d,\n-    0x03,0x0a,0x76,0x8d,0x46,0x54,0x2a,0xb7,0x9e,0xce,0x74,0x45,0x20,0x8d,\n-    0x03,0x0a,0x77,0x30,0x99,0x1c,0x76,0x58,0x64,0x7c,0x2e,0x16,0x20,0x8d,\n-    0x03,0x0a,0x71,0x6f,0xc8,0x1a,0xde,0x5b,0xde,0xda,0xcc,0xd5,0x20,0x8d,\n-    0x03,0x0a,0x72,0x89,0x34,0x3d,0x7c,0x33,0x47,0x01,0x02,0x92,0x20,0x8d,\n-    0x03,0x0a,0x74,0x3b,0x0e,0x42,0x30,0x42,0x63,0xa5,0x3e,0x8d,0x20,0x8d,\n-    0x03,0x0a,0x74,0x2d,0xb6,0x15,0xc8,0x70,0x60,0x25,0x2e,0xe7,0x20,0x8d,\n-    0x03,0x0a,0x74,0x65,0x8d,0x57,0xdb,0x20,0xa2,0xc1,0xa7,0xbd,0x20,0x8d,\n-    0x03,0x0a,0x74,0xf9,0x3c,0xb3,0x2d,0xc2,0x18,0xc5,0xcb,0x2a,0x20,0x8d,\n-    0x03,0x0a,0x75,0x95,0xe1,0x69,0x25,0x99,0xec,0xac,0x00,0xe4,0x20,0x8d,\n-    0x03,0x0a,0x76,0x3f,0x29,0x6c,0xec,0xd3,0x95,0x7e,0x4e,0x8d,0x20,0x8d,\n-    0x03,0x0a,0x7e,0x9e,0x2f,0x58,0x20,0x23,0xea,0x34,0x78,0x44,0x20,0x8d,\n-    0x03,0x0a,0x7e,0xaf,0xae,0x18,0x67,0x04,0x98,0x61,0x2f,0xa9,0x20,0x8d,\n-    0x03,0x0a,0x7f,0x84,0xea,0x51,0x31,0xd3,0x46,0x75,0xae,0xbb,0x20,0x8d,\n-    0x03,0x0a,0x78,0x3e,0x3b,0x74,0x2b,0x6f,0x57,0x06,0x53,0xbb,0x20,0x8d,\n-    0x03,0x0a,0x78,0x24,0xc1,0x1e,0x6e,0x73,0x93,0xa5,0x08,0xe3,0x20,0x8d,\n-    0x03,0x0a,0x78,0xc0,0xf5,0x28,0xea,0xf3,0xc2,0x2c,0x6a,0x69,0x20,0x8d,\n-    0x03,0x0a,0x79,0x0f,0xd0,0x25,0xd4,0xa5,0xbc,0xcb,0x72,0x51,0x20,0x8d,\n-    0x03,0x0a,0x7a,0xa9,0x41,0x75,0xf6,0x5f,0x6f,0x83,0x58,0xf1,0x20,0x8d,\n-    0x03,0x0a,0x7c,0x39,0x64,0xaf,0xf5,0x37,0xe7,0x22,0xe0,0x42,0x20,0x8d,\n-    0x03,0x0a,0x7c,0xc3,0x68,0x1e,0x92,0x7c,0xbb,0x04,0x12,0x0b,0x20,0x8d,\n-    0x03,0x0a,0x7c,0xec,0xf0,0xdb,0x09,0xea,0xdb,0x82,0x5b,0x45,0x20,0x8d,\n-    0x03,0x0a,0x7d,0x3f,0x6d,0xa4,0xb8,0x8e,0x5f,0xf9,0x5e,0x48,0x20,0x8d,\n-    0x03,0x0a,0x7d,0xb0,0xb0,0xe2,0xa5,0xa0,0xbd,0xa3,0x9e,0xb7,0x20,0x8d,\n-    0x03,0x0a,0x86,0x8a,0x76,0xb7,0x13,0xe8,0x74,0x0c,0x54,0x44,0x20,0x8d,\n-    0x03,0x0a,0x86,0xd1,0xb0,0x3e,0x88,0x73,0x42,0x0c,0xb0,0xa4,0x20,0x8d,\n-    0x03,0x0a,0x80,0xfc,0x51,0x3e,0x9b,0x7d,0x42,0x5d,0x63,0x77,0x20,0x8d,\n-    0x03,0x0a,0x81,0x49,0x6a,0xef,0x1f,0x06,0xdf,0xc4,0x6c,0x23,0x20,0x8d,\n-    0x03,0x0a,0x81,0xf1,0x31,0xce,0x65,0x59,0xc2,0x2e,0x46,0x47,0x20,0x8d,\n-    0x03,0x0a,0x82,0x9b,0xbe,0xc4,0x3b,0xbe,0x8d,0x70,0xda,0x1c,0x20,0x8d,\n-    0x03,0x0a,0x82,0xea,0xb2,0x5e,0x5f,0x7d,0x80,0x2d,0x17,0x81,0x20,0x8d,\n-    0x03,0x0a,0x83,0x8c,0x28,0x22,0x33,0xa4,0xc1,0xe8,0xae,0xe6,0x20,0x8d,\n-    0x03,0x0a,0x84,0x73,0x02,0xdd,0x47,0x8b,0x29,0xda,0xf6,0x2e,0x20,0x8d,\n-    0x03,0x0a,0x84,0xb0,0x90,0x4a,0x1c,0xf0,0x75,0x2c,0x23,0x12,0x20,0x8d,\n-    0x03,0x0a,0x85,0x29,0xc0,0xeb,0x29,0x0b,0x63,0xaa,0x13,0x98,0x20,0x8d,\n-    0x03,0x0a,0x85,0x30,0x22,0xa7,0x56,0x23,0x73,0xe0,0x97,0x03,0x20,0x8d,\n-    0x03,0x0a,0x85,0x47,0x8d,0x89,0x8e,0x13,0x57,0x5e,0xd7,0xe2,0x20,0x8d,\n-    0x03,0x0a,0x85,0x6c,0x77,0xc3,0x06,0x03,0x75,0x75,0x63,0xa7,0x20,0x8d,\n-    0x03,0x0a,0x86,0x29,0x3b,0x0b,0x5e,0xa2,0xd7,0x44,0x80,0xa1,0x20,0x8d,\n-    0x03,0x0a,0x8f,0x3b,0x03,0x68,0x7e,0x45,0x8a,0x33,0xc2,0xcb,0x20,0x8d,\n-    0x03,0x0a,0x8f,0x2f,0x41,0xc7,0xd4,0xe4,0x7a,0xdc,0x18,0x1c,0x20,0x8d,\n-    0x03,0x0a,0x8f,0x80,0xf0,0x76,0x52,0xa2,0x6e,0x1b,0x0f,0x7c,0x20,0x8d,\n-    0x03,0x0a,0x8f,0xb3,0xa3,0x0a,0x54,0xdf,0xd5,0xb3,0x00,0x07,0x20,0x8d,\n-    0x03,0x0a,0x88,0x62,0x93,0x14,0x42,0x07,0xab,0xd0,0xff,0x0e,0x20,0x8d,\n-    0x03,0x0a,0x88,0x90,0x5b,0xa0,0x20,0xb4,0x27,0xe8,0xdf,0x39,0x20,0x8d,\n-    0x03,0x0a,0x88,0xdd,0xbb,0x8a,0x6a,0xde,0x55,0x94,0xd5,0x6d,0x20,0x8d,\n-    0x03,0x0a,0x88,0xea,0xb2,0x3f,0x1e,0x31,0xcc,0xf0,0x3f,0x2e,0x20,0x8d,\n-    0x03,0x0a,0x89,0x05,0x2d,0x83,0x5f,0x11,0xeb,0xa5,0x9b,0xdd,0x20,0x8d,\n-    0x03,0x0a,0x89,0x58,0x14,0x63,0xb5,0xcc,0xea,0xdf,0x1f,0x0d,0x20,0x8d,\n-    0x03,0x0a,0x8a,0xd1,0xd5,0x85,0x24,0xe2,0xbf,0xf4,0x37,0x36,0x20,0x8d,\n-    0x03,0x0a,0x8b,0xa1,0x66,0xb0,0x8f,0x12,0x79,0xdd,0xd4,0xa7,0x20,0x8d,\n-    0x03,0x0a,0x8b,0xc2,0xdb,0xf7,0x90,0x6a,0x11,0x58,0xb0,0xfb,0x20,0x8d,\n-    0x03,0x0a,0x8c,0xab,0x57,0x1a,0x03,0x5a,0x12,0xff,0xfc,0xf5,0x20,0x8d,\n-    0x03,0x0a,0x8d,0x99,0xd1,0xf0,0xe6,0xd9,0xc5,0xff,0xa8,0x73,0x20,0x8d,\n-    0x03,0x0a,0x96,0xf0,0x45,0xaa,0xa2,0xe9,0x7b,0x72,0x62,0x56,0x20,0x8d,\n-    0x03,0x0a,0x97,0xa3,0x7e,0xe8,0xe8,0x9b,0x1e,0xfe,0x2c,0xc4,0x20,0x8d,\n-    0x03,0x0a,0x90,0x3c,0xcd,0xc6,0xb8,0x12,0x1e,0x62,0x31,0x58,0x20,0x8d,\n-    0x03,0x0a,0x90,0x2a,0x40,0x90,0x92,0x62,0x91,0x56,0x14,0x2e,0x20,0x8d,\n-    0x03,0x0a,0x90,0x70,0x98,0xf5,0xaf,0x56,0x98,0xb6,0x16,0xdf,0x20,0x8d,\n-    0x03,0x0a,0x91,0x23,0x64,0xf3,0x49,0x61,0x3b,0x73,0x9d,0x96,0x20,0x8d,\n-    0x03,0x0a,0x91,0xb9,0x56,0x50,0x35,0xd8,0xd3,0x1c,0xd6,0x87,0x20,0x8d,\n-    0x03,0x0a,0x91,0xe4,0x65,0x49,0x74,0xcf,0x92,0xa3,0x3f,0xc6,0x20,0x8d,\n-    0x03,0x0a,0x92,0x71,0x96,0x5a,0xd4,0xf0,0xd0,0x84,0x4f,0x71,0x20,0x8d,\n-    0x03,0x0a,0x92,0xb6,0x46,0xee,0x24,0xa0,0xcd,0xb9,0x0c,0xdd,0x20,0x8d,\n-    0x03,0x0a,0x92,0x9c,0x82,0xbf,0x8e,0x4f,0xd7,0xc7,0x4a,0x9d,0x20,0x8d,\n-    0x03,0x0a,0x92,0xc9,0xa1,0x01,0xeb,0x52,0xdb,0xbd,0x93,0xf8,0x20,0x8d,\n-    0x03,0x0a,0x93,0x06,0x3f,0xc3,0xe6,0x73,0x40,0x91,0xb1,0x30,0x20,0x8d,\n-    0x03,0x0a,0x93,0xd8,0x7a,0x5d,0x21,0xd0,0x87,0xf5,0x92,0x8d,0x20,0x8d,\n-    0x03,0x0a,0x94,0x54,0x6c,0x57,0xa4,0x1b,0x74,0xf0,0x7d,0x0b,0x20,0x8d,\n-    0x03,0x0a,0x94,0x96,0xd4,0xa4,0xed,0x65,0x96,0xbc,0x4a,0xbc,0x20,0x8d,\n-    0x03,0x0a,0x95,0x3d,0xec,0x1a,0x20,0x97,0xa2,0xa1,0xcd,0xab,0x20,0x8d,\n-    0x03,0x0a,0x95,0x1a,0x3a,0xb0,0x29,0x8c,0xcc,0x32,0x80,0xf7,0x20,0x8d,\n-    0x03,0x0a,0x95,0x47,0xee,0xab,0xa9,0x78,0x17,0xa7,0xed,0x73,0x20,0x8d,\n-    0x03,0x0a,0x95,0x68,0x0e,0x9d,0x10,0x5d,0x2d,0xf7,0x6a,0x56,0x20,0x8d,\n-    0x03,0x0a,0x95,0xe0,0x9a,0x05,0x94,0x67,0x22,0xc2,0x99,0xf4,0x20,0x8d,\n-    0x03,0x0a,0x9e,0xb9,0xda,0xa3,0xfc,0xd4,0xd1,0xb9,0xb5,0x40,0x20,0x8d,\n-    0x03,0x0a,0x9f,0x0a,0x17,0x56,0xa6,0xcb,0xda,0x86,0x0f,0x4f,0x20,0x8d,\n-    0x03,0x0a,0x9f,0x17,0xcb,0x57,0x64,0x8a,0x8e,0xf1,0x93,0x4f,0x20,0x8d,\n-    0x03,0x0a,0x9f,0x60,0x23,0xd8,0x31,0xf5,0x3b,0x5d,0x00,0xca,0x20,0x8d,\n-    0x03,0x0a,0x9f,0xd2,0xb0,0x27,0xc6,0x36,0x2f,0xf9,0x76,0xb8,0x20,0x8d,\n-    0x03,0x0a,0x98,0x3d,0x24,0x92,0x18,0x0e,0xbe,0x5e,0x37,0x80,0x20,0x8d,\n-    0x03,0x0a,0x98,0x2b,0xfa,0x4d,0xf6,0xe3,0xcb,0x8f,0xa7,0xca,0x20,0x8d,\n-    0x03,0x0a,0x98,0x2e,0x6e,0xe7,0x52,0xb9,0x59,0xd1,0x70,0x7e,0x20,0x8d,\n-    0x03,0x0a,0x99,0x15,0x6a,0xb4,0x2e,0x18,0x73,0x15,0xd0,0xb2,0x20,0x8d,\n-    0x03,0x0a,0x99,0xb9,0x4b,0x45,0x2c,0x9c,0x74,0x95,0x85,0x38,0x20,0x8d,\n-    0x03,0x0a,0x99,0xf8,0x24,0xd4,0xa5,0x4c,0xed,0xea,0xb9,0x94,0x20,0x8d,\n-    0x03,0x0a,0x99,0xfc,0x5b,0xe1,0x93,0xb3,0x4a,0x82,0xc0,0x94,0x20,0x8d,\n-    0x03,0x0a,0x99,0xe6,0x23,0x9d,0x7a,0xed,0x35,0xe6,0x99,0x70,0x20,0x8d,\n-    0x03,0x0a,0x9a,0x10,0x03,0xfc,0x52,0xa3,0x94,0xb1,0x55,0x1e,0x20,0x8d,\n-    0x03,0x0a,0x9a,0xbd,0xbb,0xf4,0xaa,0xde,0xf7,0xfc,0xee,0x83,0x20,0x8d,\n-    0x03,0x0a,0x9a,0x8c,0xe7,0x4c,0x13,0xf0,0xa0,0xdf,0xd7,0x18,0x20,0x8d,\n-    0x03,0x0a,0x9b,0x53,0xdf,0x76,0xd6,0x86,0x7b,0x67,0xa6,0xb2,0x20,0x8d,\n-    0x03,0x0a,0x9c,0xbd,0x0b,0xef,0xec,0x63,0xe9,0xe6,0xa7,0xb8,0x20,0x8d,\n-    0x03,0x0a,0x9c,0xd2,0x89,0x56,0xf8,0x19,0x83,0x37,0xf7,0xc5,0x20,0x8d,\n-    0x03,0x0a,0x9d,0x9b,0xde,0x57,0xf1,0x06,0xae,0x93,0x0f,0xbd,0x20,0x8d,\n-    0x03,0x0a,0x9d,0xc8,0xce,0xb0,0x94,0x36,0xb8,0x6d,0x13,0x23,0x20,0x8d,\n-    0x03,0x0a,0x9e,0x11,0x46,0xb7,0x7e,0x5b,0x0a,0x28,0x75,0x71,0x20,0x8d,\n-    0x03,0x0a,0x9e,0x2b,0xdf,0x5e,0x5e,0x37,0x9a,0x3c,0xc2,0x97,0x20,0x8d,\n-    0x03,0x0a,0xa7,0x3e,0x5d,0x9e,0xf6,0x87,0xbb,0x23,0x4b,0x8e,0x20,0x8d,\n-    0x03,0x0a,0xa7,0x23,0xf2,0xb4,0xee,0x5c,0x47,0x6b,0x2d,0xa8,0x20,0x8d,\n-    0x03,0x0a,0xa7,0x7b,0xe7,0x14,0x3b,0x66,0x01,0x10,0x16,0xcd,0x20,0x8d,\n-    0x03,0x0a,0xa7,0x61,0xb3,0x07,0x3c,0x83,0xf3,0xcb,0x55,0x71,0x20,0x8d,\n-    0x03,0x0a,0xa0,0x14,0xbc,0x6f,0x03,0x89,0x2b,0x57,0xde,0xc8,0x20,0x8d,\n-    0x03,0x0a,0xa1,0xbc,0x70,0x3d,0x1c,0x84,0xc8,0xac,0x8b,0xf5,0x20,0x8d,\n-    0x03,0x0a,0xa2,0x3b,0xdd,0xc1,0xd3,0x1f,0xa2,0xe6,0xee,0x25,0x20,0x8d,\n-    0x03,0x0a,0xa2,0x23,0xf2,0xee,0xcb,0x9b,0x94,0x0f,0x04,0x21,0x20,0x8d,\n-    0x03,0x0a,0xa2,0xa2,0x94,0x9e,0xce,0x1a,0xf9,0xcb,0x31,0xc5,0x20,0x8d,\n-    0x03,0x0a,0xa2,0xfa,0x66,0x69,0x17,0xc7,0xd5,0x01,0x96,0xc6,0x20,0x8d,\n-    0x03,0x0a,0xa3,0x46,0x3f,0xc6,0x49,0xe3,0xc8,0xdd,0xd9,0xdc,0x20,0x8d,\n-    0x03,0x0a,0xa3,0xa3,0x67,0xe4,0xa4,0x3c,0xf0,0xa8,0x9b,0x9b,0x20,0x8d,\n-    0x03,0x0a,0xa3,0xab,0x27,0xeb,0x0b,0x9b,0x40,0xe4,0xc3,0xcb,0x20,0x8d,\n-    0x03,0x0a,0xa4,0x81,0x96,0x0c,0x52,0xde,0x9b,0x8d,0x70,0x78,0x20,0x8d,\n-    0x03,0x0a,0xa4,0x81,0x99,0x7c,0xcb,0x67,0xcc,0x4c,0x5d,0x4b,0x20,0x8d,\n-    0x03,0x0a,0xa4,0xa5,0xa5,0x10,0x66,0xfc,0x15,0x63,0x0e,0x3d,0x20,0x8d,\n-    0x03,0x0a,0xa4,0xcd,0x88,0xd6,0xdf,0xed,0xab,0xa6,0xe1,0x88,0x20,0x8d,\n-    0x03,0x0a,0xa6,0x6c,0x01,0x32,0x5f,0x56,0x32,0x72,0x1c,0x2b,0x20,0x8d,\n-    0x03,0x0a,0xae,0x94,0x31,0x12,0x75,0x92,0xd8,0x32,0x8a,0xd1,0x20,0x8d,\n-    0x03,0x0a,0xaf,0x56,0x76,0xe7,0x35,0xf3,0x5a,0x62,0x9b,0xa3,0x20,0x8d,\n-    0x03,0x0a,0xa8,0xb9,0xc3,0x07,0x95,0x23,0xde,0xe0,0xc6,0x7b,0x20,0x8d,\n-    0x03,0x0a,0xa9,0x6d,0x83,0xa6,0x9c,0xdd,0xae,0x7c,0xd6,0x97,0x20,0x8d,\n-    0x03,0x0a,0xa9,0xa8,0x9a,0x15,0x5d,0xda,0xe1,0x87,0x2d,0x0e,0x20,0x8d,\n-    0x03,0x0a,0xa9,0xc8,0x44,0xc2,0x1a,0xaf,0x46,0xa0,0xf2,0xf1,0x20,0x8d,\n-    0x03,0x0a,0xaa,0x7d,0xc2,0x0c,0x95,0xe2,0x5b,0x02,0x8e,0x41,0x20,0x8d,\n-    0x03,0x0a,0xab,0x00,0x8e,0xd1,0x06,0x26,0x63,0xa5,0x1d,0x49,0x20,0x8d,\n-    0x03,0x0a,0xab,0x29,0x85,0x0f,0xf2,0xb8,0x58,0x8f,0xdb,0xbf,0x20,0x8d,\n-    0x03,0x0a,0xab,0x98,0x40,0x0a,0x73,0x43,0x6f,0xb6,0x3d,0x8b,0x20,0x8d,\n-    0x03,0x0a,0xab,0xdd,0x6d,0x5d,0xc5,0x36,0xcb,0x6c,0xc8,0x70,0x20,0x8d,\n-    0x03,0x0a,0xac,0x81,0x65,0xa3,0x8b,0xea,0x0b,0x71,0xe4,0x16,0x20,0x8d,\n-    0x03,0x0a,0xad,0x1b,0x40,0xc1,0x45,0x64,0xbf,0x24,0x15,0xca,0x20,0x8d,\n-    0x03,0x0a,0xad,0x1c,0xc0,0xb4,0x95,0xb5,0x17,0xc0,0xc2,0x41,0x20,0x8d,\n-    0x03,0x0a,0xad,0xc4,0xfa,0x8d,0xa6,0xf7,0x40,0x42,0xe7,0xd3,0x20,0x8d,\n-    0x03,0x0a,0xae,0x2e,0xe4,0x64,0x79,0x05,0x5f,0xb7,0x04,0x14,0x20,0x8d,\n-    0x03,0x0a,0xb0,0x48,0xe6,0xe8,0x48,0xfa,0xca,0x87,0x78,0x18,0x20,0x8d,\n-    0x03,0x0a,0xb0,0x6c,0x4a,0x92,0xde,0xd3,0x0d,0x28,0xc4,0x79,0x20,0x8d,\n-    0x03,0x0a,0xb1,0x41,0x81,0xac,0xde,0xce,0x0b,0x94,0x8a,0x9d,0x20,0x8d,\n-    0x03,0x0a,0xb1,0x73,0xdf,0x4b,0xab,0xc3,0x7a,0x3c,0x48,0x99,0x20,0x8d,\n-    0x03,0x0a,0xb1,0xb6,0xc8,0x72,0x86,0xc6,0x34,0x6b,0xef,0x41,0x20,0x8d,\n-    0x03,0x0a,0xb1,0xd5,0x8e,0xf0,0x22,0x9a,0x8b,0xa6,0xf1,0xfb,0x20,0x8d,\n-    0x03,0x0a,0xb1,0xd8,0x90,0x36,0x0e,0xc6,0x51,0x9c,0x8b,0x93,0x20,0x8d,\n-    0x03,0x0a,0xb2,0xce,0xea,0x6a,0xd7,0x34,0x30,0x8d,0xdf,0x65,0x20,0x8d,\n-    0x03,0x0a,0xb2,0xea,0xa2,0xc5,0xeb,0x2a,0x10,0xec,0xeb,0x4e,0x20,0x8d,\n-    0x03,0x0a,0xbe,0xda,0x60,0xee,0xa0,0xf8,0xdd,0x5a,0x11,0xb6,0x20,0x8d,\n-    0x03,0x0a,0xbf,0x7f,0x7f,0x68,0x2c,0x63,0x70,0xba,0xbb,0xf1,0x20,0x8d,\n-    0x03,0x0a,0xb9,0xaa,0xce,0xfd,0x87,0x35,0x7b,0xee,0x0d,0x40,0x20,0x8d,\n-    0x03,0x0a,0xb9,0xe5,0xb3,0x2c,0xb6,0x6d,0x91,0x46,0x22,0xad,0x20,0x8d,\n-    0x03,0x0a,0xba,0x49,0xd2,0xda,0xb8,0x28,0xe8,0x4d,0x53,0xca,0x20,0x8d,\n-    0x03,0x0a,0xba,0xcd,0x40,0x9b,0x0b,0xc6,0x82,0xba,0xc8,0xdd,0x20,0x8d,\n-    0x03,0x0a,0xbb,0x57,0x4d,0xce,0xa0,0x53,0x4d,0x8f,0xcd,0x4f,0x20,0x8d,\n-    0x03,0x0a,0xbb,0xba,0xc0,0x45,0x0b,0x3d,0x30,0xef,0x86,0x93,0x20,0x8d,\n-    0x03,0x0a,0xbc,0x80,0x0b,0xa0,0xe3,0xc1,0x9b,0x6b,0xc5,0x17,0x20,0x8d,\n-    0x03,0x0a,0xbd,0x3a,0xc5,0xd0,0xc3,0x93,0x32,0x55,0x57,0x27,0x20,0x8d,\n-    0x03,0x0a,0xbd,0x63,0x78,0x09,0xf3,0x85,0x50,0x42,0x0c,0x3a,0x20,0x8d,\n-    0x03,0x0a,0xbd,0xb2,0x78,0xc7,0x06,0x2c,0xe1,0xb8,0x72,0xdc,0x20,0x8d,\n-    0x03,0x0a,0xc7,0x25,0x66,0x48,0x17,0x18,0x9d,0x2d,0x05,0xb4,0x20,0x8d,\n-    0x03,0x0a,0xc7,0x66,0xbe,0x2e,0x08,0xdf,0xba,0xf7,0xae,0x83,0x20,0x8d,\n-    0x03,0x0a,0xc7,0x6d,0x92,0x43,0x00,0x24,0xe5,0xd6,0x83,0xd3,0x20,0x8d,\n-    0x03,0x0a,0xc7,0xf7,0x05,0x69,0x99,0x52,0x54,0x77,0x2b,0x1f,0x20,0x8d,\n-    0x03,0x0a,0xc7,0xdd,0x9d,0xe0,0x6d,0xaa,0x03,0xcb,0x9c,0x21,0x20,0x8d,\n-    0x03,0x0a,0xc0,0x0f,0xf8,0x18,0xb0,0x84,0x66,0x47,0x08,0xe4,0x20,0x8d,\n-    0x03,0x0a,0xc0,0x41,0xc0,0xc5,0x9d,0xef,0x46,0x46,0xae,0x7f,0x20,0x8d,\n-    0x03,0x0a,0xc1,0x89,0x05,0x1b,0x88,0x6b,0xd7,0x20,0x08,0x9b,0x20,0x8d,\n-    0x03,0x0a,0xc2,0x4e,0xd2,0xd3,0xfd,0x58,0x32,0x14,0x6f,0x87,0x20,0x8d,\n-    0x03,0x0a,0xc2,0x6d,0xf5,0x40,0x0f,0xbd,0xfb,0x53,0x19,0xc9,0x20,0x8d,\n-    0x03,0x0a,0xc3,0x3e,0x86,0xb1,0xd5,0x0c,0x5a,0x0e,0x18,0x4e,0x20,0x8d,\n-    0x03,0x0a,0xc4,0x3a,0x2a,0x49,0xb4,0x72,0xa4,0x2c,0x7b,0x99,0x20,0x8d,\n-    0x03,0x0a,0xc4,0x44,0x04,0x3a,0x11,0x84,0x47,0x67,0x2a,0x13,0x20,0x8d,\n-    0x03,0x0a,0xc4,0x45,0x1f,0xbc,0xc9,0xa0,0x32,0x01,0xeb,0xbc,0x20,0x8d,\n-    0x03,0x0a,0xc4,0x55,0x2a,0xb9,0xbb,0x9b,0x2a,0xe7,0x1c,0x75,0x20,0x8d,\n-    0x03,0x0a,0xc4,0xdf,0x49,0x72,0xb7,0xed,0xbe,0x9f,0x59,0xfa,0x20,0x8d,\n-    0x03,0x0a,0xc4,0xe0,0x24,0x19,0x5a,0x39,0xc6,0xbe,0x74,0xee,0x20,0x8d,\n-    0x03,0x0a,0xc5,0xdc,0x95,0xee,0xec,0x4d,0x25,0xb1,0xa1,0x5a,0x20,0x8d,\n-    0x03,0x0a,0xc6,0x47,0x01,0xca,0x17,0xe1,0x47,0x46,0x9b,0xd6,0x20,0x8d,\n-    0x03,0x0a,0xce,0xf6,0xda,0x2a,0x7f,0x69,0x90,0xad,0x89,0xe4,0x20,0x8d,\n-    0x03,0x0a,0xce,0xf1,0x60,0x80,0x76,0xe7,0x9a,0x36,0xdc,0xc7,0x20,0x8d,\n-    0x03,0x0a,0xcf,0x98,0x18,0x43,0xeb,0x5d,0xd7,0x16,0xf1,0x50,0x20,0x8d,\n-    0x03,0x0a,0xc8,0x76,0xb8,0x89,0x52,0x6f,0x23,0x93,0xe5,0x24,0x20,0x8d,\n-    0x03,0x0a,0xc9,0x3e,0xe1,0xbf,0xef,0xc8,0x22,0x97,0xae,0x51,0x20,0x8d,\n-    0x03,0x0a,0xc9,0x82,0xc3,0xcc,0x29,0x07,0x0b,0x8d,0x6f,0xfb,0x20,0x8d,\n-    0x03,0x0a,0xc9,0xfe,0x7a,0x81,0x62,0x35,0x52,0xf7,0x02,0x0c,0x20,0x8d,\n-    0x03,0x0a,0xca,0x33,0x3a,0xdc,0x87,0x62,0x7a,0xc2,0x1d,0xe6,0x20,0x8d,\n-    0x03,0x0a,0xca,0x50,0x8d,0xe0,0x82,0x1c,0x59,0x0f,0xef,0x1b,0x20,0x8d,\n-    0x03,0x0a,0xca,0xa3,0x66,0x19,0x34,0xac,0xb2,0x0f,0x60,0x9a,0x20,0x8d,\n-    0x03,0x0a,0xcb,0xb3,0xa0,0x39,0xf6,0x46,0xec,0x5a,0x42,0xc6,0x20,0x8d,\n-    0x03,0x0a,0xcc,0xc6,0x22,0xb4,0xfc,0xf7,0xff,0xb0,0xa2,0xb4,0x20,0x8d,\n-    0x03,0x0a,0xcd,0x2e,0x71,0x78,0x7b,0x6d,0x9e,0x61,0x70,0x05,0x20,0x8d,\n-    0x03,0x0a,0xcd,0x31,0x38,0x94,0x95,0xca,0x44,0xf4,0x65,0x68,0x20,0x8d,\n-    0x03,0x0a,0xcd,0x61,0xe1,0xbe,0x7b,0x46,0x9c,0x51,0xbf,0x66,0x20,0x8d,\n-    0x03,0x0a,0xcd,0xac,0xcf,0x18,0x1f,0xa6,0x8f,0x02,0x6a,0x43,0x20,0x8d,\n-    0x03,0x0a,0xce,0x20,0x1e,0x2c,0x8d,0x2c,0x9e,0xd9,0xa7,0xac,0x20,0x8d,\n     0x04,0x20,0xd1,0xbb,0x02,0x8d,0x4d,0xd5,0x6a,0x20,0xc0,0xf9,0x16,0x2b,0x84,0x22,0x66,0xe0,0x89,0x45,0x60,0x37,0x52,0xe2,0x0b,0xa5,0xb4,0xf8,0x26,0xb3,0x8f,0x5a,0x30,0xed,0x20,0x8d,\n     0x04,0x20,0xd2,0x59,0x3b,0xd7,0x14,0x7e,0xd0,0x98,0xfe,0x9e,0xa5,0x69,0xf4,0x26,0x6d,0x72,0x6f,0xc3,0x76,0xce,0x1d,0x40,0x41,0xa2,0xa1,0xaf,0xf9,0x6e,0x57,0x2d,0x9d,0xc3,0x20,0x8d,\n     0x04,0x20,0xdf,0xd9,0xed,0x59,0xbf,0x1e,0x77,0x48,0x3c,0x13,0x3b,0xc5,0xc8,0x15,0x86,0x88,0x68,0xf0,0x08,0xe9,0xee,0x9b,0x3d,0xa4,0x33,0x0a,0x68,0x67,0x86,0x9d,0xe2,0x83,0x20,0x8d,\n@@ -1195,14 +683,14 @@ static const uint8_t chainparams_seed_main[] = {\n     0x04,0x20,0x98,0xc6,0x44,0x27,0x90,0x41,0xa6,0x98,0xf9,0x25,0x6c,0x59,0x0f,0x06,0x6d,0x44,0x59,0x0e,0xb2,0x46,0xb0,0xa4,0x37,0x88,0x69,0x8f,0xc1,0x32,0xcd,0x9f,0x15,0xd7,0x20,0x8d,\n     0x04,0x20,0xaa,0x3a,0x16,0x86,0xea,0x59,0x09,0x04,0x78,0xe5,0x10,0x92,0xe1,0x1d,0xad,0xf7,0x56,0x2b,0xac,0xb0,0x97,0x29,0x63,0x30,0xf4,0x1b,0xcf,0xde,0xf3,0x28,0x0a,0x29,0x20,0x8d,\n     0x04,0x20,0xbc,0x27,0xae,0x89,0xc1,0x67,0x73,0x0a,0x08,0x02,0xdf,0xb7,0xcc,0x94,0xc7,0x9f,0xf4,0x72,0x7a,0x9b,0x20,0x0c,0x5c,0x11,0x3d,0x22,0xd6,0x13,0x88,0x66,0x74,0xbf,0x20,0x8d,\n-    0x05,0x20,0xfe,0x97,0xba,0x09,0x2a,0xa4,0x85,0x10,0xa1,0x04,0x7b,0x88,0x7a,0x5a,0x06,0x53,0x71,0x93,0x3b,0xf9,0xa2,0x2f,0xd9,0xe3,0x8f,0xa5,0xa2,0xac,0x1e,0x6c,0x6c,0x8c,0x20,0x8d,\n-    0x05,0x20,0x17,0x0c,0x56,0xce,0x72,0xa5,0xa0,0xe6,0x23,0x06,0xa3,0xc7,0x08,0x43,0x18,0xee,0x3a,0x46,0x35,0x5d,0x17,0xf6,0x78,0x96,0xa0,0x9c,0x51,0xef,0xbe,0x23,0xfd,0x71,0x20,0x8d,\n-    0x05,0x20,0x31,0x0f,0x30,0x0b,0x9d,0x70,0x0c,0x7c,0xf7,0x98,0x7e,0x1c,0xf4,0x33,0xdc,0x64,0x17,0xf7,0x00,0x7a,0x0c,0x04,0xb5,0x83,0xfc,0x5f,0xa6,0x52,0x39,0x79,0x63,0x87,0x20,0x8d,\n-    0x05,0x20,0x3e,0xe3,0xe0,0xa9,0xbc,0xf4,0x2e,0x59,0xd9,0x20,0xee,0xdf,0x74,0x61,0x4d,0x99,0x0c,0x5c,0x15,0x30,0x9b,0x72,0x16,0x79,0x15,0xf4,0x7a,0xca,0x34,0xcc,0x81,0x99,0x20,0x8d,\n-    0x05,0x20,0x3b,0x42,0x1c,0x25,0xf7,0xbf,0x79,0xed,0x6d,0x7d,0xef,0x65,0x30,0x7d,0xee,0x16,0x37,0x22,0x72,0x43,0x33,0x28,0x40,0xa3,0xaa,0xf4,0x48,0x49,0x67,0xb1,0x4b,0xfd,0x20,0x8d,\n-    0x05,0x20,0x7a,0x65,0xf7,0x47,0x42,0x9d,0x66,0x42,0x3b,0xb3,0xa7,0x03,0x6c,0x46,0x78,0x19,0x28,0x78,0x1e,0xa3,0x7c,0x67,0x44,0xb7,0x83,0x05,0xe3,0xfe,0xa5,0xe4,0x0a,0x6e,0x20,0x8d,\n-    0x05,0x20,0xb5,0x83,0x6f,0xb6,0x11,0xd8,0x0e,0xa8,0x57,0xda,0x15,0x20,0x5b,0x1a,0x6d,0x21,0x15,0x5a,0xbd,0xb4,0x17,0x11,0xc2,0xfb,0x0e,0xfc,0xde,0xe8,0x26,0x56,0xa8,0xac,0x20,0x8d,\n-    0x05,0x20,0xcc,0xaf,0x6c,0x3b,0xd0,0x13,0x76,0x23,0xc3,0x36,0xbb,0x64,0x4a,0x4a,0x06,0x93,0x69,0x6d,0xb0,0x10,0x6e,0x66,0xa4,0x61,0xf8,0x2d,0xe7,0x80,0x72,0x4d,0x53,0x94,0x20,0x8d,\n+    0x05,0x20,0xfe,0x97,0xba,0x09,0x2a,0xa4,0x85,0x10,0xa1,0x04,0x7b,0x88,0x7a,0x5a,0x06,0x53,0x71,0x93,0x3b,0xf9,0xa2,0x2f,0xd9,0xe3,0x8f,0xa5,0xa2,0xac,0x1e,0x6c,0x6c,0x8c,0x00,0x00,\n+    0x05,0x20,0x17,0x0c,0x56,0xce,0x72,0xa5,0xa0,0xe6,0x23,0x06,0xa3,0xc7,0x08,0x43,0x18,0xee,0x3a,0x46,0x35,0x5d,0x17,0xf6,0x78,0x96,0xa0,0x9c,0x51,0xef,0xbe,0x23,0xfd,0x71,0x00,0x00,\n+    0x05,0x20,0x31,0x0f,0x30,0x0b,0x9d,0x70,0x0c,0x7c,0xf7,0x98,0x7e,0x1c,0xf4,0x33,0xdc,0x64,0x17,0xf7,0x00,0x7a,0x0c,0x04,0xb5,0x83,0xfc,0x5f,0xa6,0x52,0x39,0x79,0x63,0x87,0x00,0x00,\n+    0x05,0x20,0x3e,0xe3,0xe0,0xa9,0xbc,0xf4,0x2e,0x59,0xd9,0x20,0xee,0xdf,0x74,0x61,0x4d,0x99,0x0c,0x5c,0x15,0x30,0x9b,0x72,0x16,0x79,0x15,0xf4,0x7a,0xca,0x34,0xcc,0x81,0x99,0x00,0x00,\n+    0x05,0x20,0x3b,0x42,0x1c,0x25,0xf7,0xbf,0x79,0xed,0x6d,0x7d,0xef,0x65,0x30,0x7d,0xee,0x16,0x37,0x22,0x72,0x43,0x33,0x28,0x40,0xa3,0xaa,0xf4,0x48,0x49,0x67,0xb1,0x4b,0xfd,0x00,0x00,\n+    0x05,0x20,0x7a,0x65,0xf7,0x47,0x42,0x9d,0x66,0x42,0x3b,0xb3,0xa7,0x03,0x6c,0x46,0x78,0x19,0x28,0x78,0x1e,0xa3,0x7c,0x67,0x44,0xb7,0x83,0x05,0xe3,0xfe,0xa5,0xe4,0x0a,0x6e,0x00,0x00,\n+    0x05,0x20,0xb5,0x83,0x6f,0xb6,0x11,0xd8,0x0e,0xa8,0x57,0xda,0x15,0x20,0x5b,0x1a,0x6d,0x21,0x15,0x5a,0xbd,0xb4,0x17,0x11,0xc2,0xfb,0x0e,0xfc,0xde,0xe8,0x26,0x56,0xa8,0xac,0x00,0x00,\n+    0x05,0x20,0xcc,0xaf,0x6c,0x3b,0xd0,0x13,0x76,0x23,0xc3,0x36,0xbb,0x64,0x4a,0x4a,0x06,0x93,0x69,0x6d,0xb0,0x10,0x6e,0x66,0xa4,0x61,0xf8,0x2d,0xe7,0x80,0x72,0x4d,0x53,0x94,0x00,0x00,\n };\n \n static const uint8_t chainparams_seed_test[] = {"
      },
      {
        "sha": "ce0b131de6deb4690c8a5a9d4a529e231b32a5a6",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -13,7 +13,7 @@ bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return f\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n std::vector<uint256> CCoinsView::GetHeadBlocks() const { return std::vector<uint256>(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n-CCoinsViewCursor *CCoinsView::Cursor() const { return nullptr; }\n+std::unique_ptr<CCoinsViewCursor> CCoinsView::Cursor() const { return nullptr; }\n \n bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n {\n@@ -28,7 +28,7 @@ uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n std::vector<uint256> CCoinsViewBacked::GetHeadBlocks() const { return base->GetHeadBlocks(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n-CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n+std::unique_ptr<CCoinsViewCursor> CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}"
      },
      {
        "sha": "3151a260d94674571fe9f7162c5a1ff44ec3e5f2",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -180,7 +180,7 @@ class CCoinsView\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     //! Get a cursor to iterate over the whole state\n-    virtual CCoinsViewCursor *Cursor() const;\n+    virtual std::unique_ptr<CCoinsViewCursor> Cursor() const;\n \n     //! As we use CCoinsViews polymorphically, have a virtual destructor\n     virtual ~CCoinsView() {}\n@@ -204,7 +204,7 @@ class CCoinsViewBacked : public CCoinsView\n     std::vector<uint256> GetHeadBlocks() const override;\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n-    CCoinsViewCursor *Cursor() const override;\n+    std::unique_ptr<CCoinsViewCursor> Cursor() const override;\n     size_t EstimateSize() const override;\n };\n \n@@ -237,7 +237,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     uint256 GetBestBlock() const override;\n     void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n-    CCoinsViewCursor* Cursor() const override {\n+    std::unique_ptr<CCoinsViewCursor> Cursor() const override {\n         throw std::logic_error(\"CCoinsViewCache cursor iteration not supported.\");\n     }\n "
      },
      {
        "sha": "9205cfee874173316f97324421a6d2c8abf8915d",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 35,
        "deletions": 3,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,13 +11,27 @@\n \n namespace Consensus {\n \n-enum DeploymentPos\n-{\n+/**\n+ * A buried deployment is one where the height of the activation has been hardcoded into\n+ * the client implementation long after the consensus change has activated. See BIP 90.\n+ */\n+enum BuriedDeployment : int16_t {\n+    // buried deployments get negative values to avoid overlap with DeploymentPos\n+    DEPLOYMENT_HEIGHTINCB = std::numeric_limits<int16_t>::min(),\n+    DEPLOYMENT_CLTV,\n+    DEPLOYMENT_DERSIG,\n+    DEPLOYMENT_CSV,\n+    DEPLOYMENT_SEGWIT,\n+};\n+constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n+\n+enum DeploymentPos : uint16_t {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n-    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n+    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in deploymentinfo.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n+constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }\n \n /**\n  * Struct for each individual consensus rule change using BIP9.\n@@ -100,7 +114,25 @@ struct Params {\n      */\n     bool signet_blocks{false};\n     std::vector<uint8_t> signet_challenge;\n+\n+    int DeploymentHeight(BuriedDeployment dep) const\n+    {\n+        switch (dep) {\n+        case DEPLOYMENT_HEIGHTINCB:\n+            return BIP34Height;\n+        case DEPLOYMENT_CLTV:\n+            return BIP65Height;\n+        case DEPLOYMENT_DERSIG:\n+            return BIP66Height;\n+        case DEPLOYMENT_CSV:\n+            return CSVHeight;\n+        case DEPLOYMENT_SEGWIT:\n+            return SegwitHeight;\n+        } // no default case, so the compiler can warn about missing cases\n+        return std::numeric_limits<int>::max();\n+    }\n };\n+\n } // namespace Consensus\n \n #endif // BITCOIN_CONSENSUS_PARAMS_H"
      },
      {
        "sha": "88d8da6ed5cba07b61e43a0824e14a097f80daf3",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -20,6 +20,15 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n+\n+    // Even if tx.nLockTime isn't satisfied by nBlockHeight/nBlockTime, a\n+    // transaction is still considered final if all inputs' nSequence ==\n+    // SEQUENCE_FINAL (0xffffffff), in which case nLockTime is ignored.\n+    //\n+    // Because of this behavior OP_CHECKLOCKTIMEVERIFY/CheckLockTime() will\n+    // also check that the spending input's nSequence != SEQUENCE_FINAL,\n+    // ensuring that an unsatisfied nLockTime value will actually cause\n+    // IsFinalTx() to return false here:\n     for (const auto& txin : tx.vin) {\n         if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;"
      },
      {
        "sha": "d5fd43e1314bc9632130fec4671681ca57733c55",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -24,7 +24,7 @@ namespace Consensus {\n  * @param[out] txfee Set to the transaction fee if successful.\n  * Preconditions: tx.IsCoinBase() is false.\n  */\n-bool CheckTxInputs(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee);\n+[[nodiscard]] bool CheckTxInputs(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee);\n } // namespace Consensus\n \n /** Auxiliary functions for transaction validation (ideally should not be exposed) */"
      },
      {
        "sha": "61089610106782fed53d06f0e238a5a9f4ad5348",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -260,6 +260,7 @@ int ParseSighashString(const UniValue& sighash)\n     int hash_type = SIGHASH_ALL;\n     if (!sighash.isNull()) {\n         static std::map<std::string, int> map_sighash_values = {\n+            {std::string(\"DEFAULT\"), int(SIGHASH_DEFAULT)},\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n             {std::string(\"NONE\"), int(SIGHASH_NONE)},"
      },
      {
        "sha": "030a7806dec010009fc566bd7f53a099d3edbc3a",
        "filename": "src/deploymentinfo.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentinfo.h>\n+\n+#include <consensus/params.h>\n+\n+const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n+    {\n+        /*.name =*/ \"testdummy\",\n+        /*.gbt_force =*/ true,\n+    },\n+    {\n+        /*.name =*/ \"taproot\",\n+        /*.gbt_force =*/ true,\n+    },\n+};\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep)\n+{\n+    assert(ValidDeployment(dep));\n+    switch (dep) {\n+    case Consensus::DEPLOYMENT_HEIGHTINCB:\n+        return \"bip34\";\n+    case Consensus::DEPLOYMENT_CLTV:\n+        return \"bip65\";\n+    case Consensus::DEPLOYMENT_DERSIG:\n+        return \"bip66\";\n+    case Consensus::DEPLOYMENT_CSV:\n+        return \"csv\";\n+    case Consensus::DEPLOYMENT_SEGWIT:\n+        return \"segwit\";\n+    } // no default case, so the compiler can warn about missing cases\n+    return \"\";\n+}"
      },
      {
        "sha": "63d58a7da253913d0b3c81e6f66faa676932a5f4",
        "filename": "src/deploymentinfo.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTINFO_H\n+#define BITCOIN_DEPLOYMENTINFO_H\n+\n+#include <consensus/params.h>\n+\n+#include <string>\n+\n+struct VBDeploymentInfo {\n+    /** Deployment name */\n+    const char *name;\n+    /** Whether GBT clients can safely ignore this rule in simplified usage */\n+    bool gbt_force;\n+};\n+\n+extern const VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep);\n+\n+inline std::string DeploymentName(Consensus::DeploymentPos pos)\n+{\n+    assert(Consensus::ValidDeployment(pos));\n+    return VersionBitsDeploymentInfo[pos].name;\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTINFO_H"
      },
      {
        "sha": "9007800421870d61fda1a8ad984a5b0e5e3900b5",
        "filename": "src/deploymentstatus.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentstatus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentstatus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentstatus.h>\n+\n+#include <consensus/params.h>\n+#include <versionbits.h>\n+\n+VersionBitsCache g_versionbitscache;\n+\n+/* Basic sanity checking for BuriedDeployment/DeploymentPos enums and\n+ * ValidDeployment check */\n+\n+static_assert(ValidDeployment(Consensus::DEPLOYMENT_TESTDUMMY), \"sanity check of DeploymentPos failed (TESTDUMMY not valid)\");\n+static_assert(!ValidDeployment(Consensus::MAX_VERSION_BITS_DEPLOYMENTS), \"sanity check of DeploymentPos failed (MAX value considered valid)\");\n+static_assert(!ValidDeployment(static_cast<Consensus::BuriedDeployment>(Consensus::DEPLOYMENT_TESTDUMMY)), \"sanity check of BuriedDeployment failed (overlaps with DeploymentPos)\");"
      },
      {
        "sha": "f95c5996f5e4c3071b0fbfda0d049cd9edcdb721",
        "filename": "src/deploymentstatus.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTSTATUS_H\n+#define BITCOIN_DEPLOYMENTSTATUS_H\n+\n+#include <chain.h>\n+#include <versionbits.h>\n+\n+#include <limits>\n+\n+/** Global cache for versionbits deployment status */\n+extern VersionBitsCache g_versionbitscache;\n+\n+/** Determine if a deployment is active for the next block */\n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n+}\n+\n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return ThresholdState::ACTIVE == g_versionbitscache.State(pindexPrev, params, dep);\n+}\n+\n+/** Determine if a deployment is active for this block */\n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return index.nHeight >= params.DeploymentHeight(dep);\n+}\n+\n+inline bool DeploymentActiveAt(const CBlockIndex& index, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return DeploymentActiveAfter(index.pprev, params, dep);\n+}\n+\n+/** Determine if a deployment is enabled (can ever be active) */\n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n+}\n+\n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.vDeployments[dep].nStartTime != Consensus::BIP9Deployment::NEVER_ACTIVE;\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "d6388b759add7a0d2fec1244574353156554f52d",
        "filename": "src/external_signer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/external_signer.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -13,9 +13,7 @@\n #include <string>\n #include <vector>\n \n-#ifdef ENABLE_EXTERNAL_SIGNER\n-\n-ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, const std::string chain, const std::string name): m_command(command), m_fingerprint(fingerprint), m_chain(chain), m_name(name) {}\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string chain, const std::string& fingerprint, const std::string name): m_command(command), m_chain(chain), m_fingerprint(fingerprint), m_name(name) {}\n \n const std::string ExternalSigner::NetworkArg() const\n {\n@@ -55,7 +53,7 @@ bool ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalS\n         if (model_field.isStr() && model_field.getValStr() != \"\") {\n             name += model_field.getValStr();\n         }\n-        signers.push_back(ExternalSigner(command, fingerprintStr, chain, name));\n+        signers.push_back(ExternalSigner(command, chain, fingerprintStr, name));\n     }\n     return true;\n }\n@@ -116,5 +114,3 @@ bool ExternalSigner::SignTransaction(PartiallySignedTransaction& psbtx, std::str\n \n     return true;\n }\n-\n-#endif // ENABLE_EXTERNAL_SIGNER"
      },
      {
        "sha": "e40fd7f010738daafe5257235213501ae2c0248a",
        "filename": "src/external_signer.h",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/external_signer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/external_signer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/external_signer.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,8 +11,6 @@\n #include <string>\n #include <vector>\n \n-#ifdef ENABLE_EXTERNAL_SIGNER\n-\n struct PartiallySignedTransaction;\n \n //! Enables interaction with an external signing device or service, such as\n@@ -23,24 +21,24 @@ class ExternalSigner\n     //! The command which handles interaction with the external signer.\n     std::string m_command;\n \n+    //! Bitcoin mainnet, testnet, etc\n+    std::string m_chain;\n+\n+    const std::string NetworkArg() const;\n+\n public:\n     //! @param[in] command      the command which handles interaction with the external signer\n     //! @param[in] fingerprint  master key fingerprint of the signer\n     //! @param[in] chain        \"main\", \"test\", \"regtest\" or \"signet\"\n     //! @param[in] name         device name\n-    ExternalSigner(const std::string& command, const std::string& fingerprint, const std::string chain, const std::string name);\n+    ExternalSigner(const std::string& command, const std::string chain, const std::string& fingerprint, const std::string name);\n \n     //! Master key fingerprint of the signer\n     std::string m_fingerprint;\n \n-    //! Bitcoin mainnet, testnet, etc\n-    std::string m_chain;\n-\n     //! Name of signer\n     std::string m_name;\n \n-    const std::string NetworkArg() const;\n-\n     //! Obtain a list of signers. Calls `<command> enumerate`.\n     //! @param[in]              command the command which handles interaction with the external signer\n     //! @param[in,out] signers  vector to which new signers (with a unique master key fingerprint) are added\n@@ -65,6 +63,4 @@ class ExternalSigner\n     bool SignTransaction(PartiallySignedTransaction& psbt, std::string& error);\n };\n \n-#endif // ENABLE_EXTERNAL_SIGNER\n-\n #endif // BITCOIN_EXTERNAL_SIGNER_H"
      },
      {
        "sha": "3465caa3a937cad71670a06ae810c8a9af54bdb1",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -47,8 +47,10 @@ unsigned int MurmurHash3(unsigned int nHashSeed, Span<const unsigned char> vData\n     switch (vDataToHash.size() & 3) {\n         case 3:\n             k1 ^= tail[2] << 16;\n+            [[fallthrough]];\n         case 2:\n             k1 ^= tail[1] << 8;\n+            [[fallthrough]];\n         case 1:\n             k1 ^= tail[0];\n             k1 *= c1;"
      },
      {
        "sha": "8741ad9b863520262abb2256f5783fe2e916e49f",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -83,7 +83,7 @@ class WorkQueue\n     bool Enqueue(WorkItem* item)\n     {\n         LOCK(cs);\n-        if (queue.size() >= maxDepth) {\n+        if (!running || queue.size() >= maxDepth) {\n             return false;\n         }\n         queue.emplace_back(std::unique_ptr<WorkItem>(item));\n@@ -99,7 +99,7 @@ class WorkQueue\n                 WAIT_LOCK(cs, lock);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n-                if (!running)\n+                if (!running && queue.empty())\n                     break;\n                 i = std::move(queue.front());\n                 queue.pop_front();\n@@ -136,7 +136,7 @@ static struct evhttp* eventHTTP = nullptr;\n //! List of subnets to allow RPC connections from\n static std::vector<CSubNet> rpc_allow_subnets;\n //! Work queue for handling longer requests off the event loop thread\n-static WorkQueue<HTTPClosure>* workQueue = nullptr;\n+static std::unique_ptr<WorkQueue<HTTPClosure>> g_work_queue{nullptr};\n //! Handlers for (sub)paths\n static std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n@@ -256,10 +256,10 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     // Dispatch to worker thread\n     if (i != iend) {\n         std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n-        assert(workQueue);\n-        if (workQueue->Enqueue(item.get()))\n+        assert(g_work_queue);\n+        if (g_work_queue->Enqueue(item.get())) {\n             item.release(); /* if true, queue took ownership */\n-        else {\n+        } else {\n             LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n             item->req->WriteReply(HTTP_SERVICE_UNAVAILABLE, \"Work queue depth exceeded\");\n         }\n@@ -392,7 +392,7 @@ bool InitHTTPServer()\n     int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n-    workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n+    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n     // transfer ownership to eventBase/HTTP via .release()\n     eventBase = base_ctr.release();\n     eventHTTP = http_ctr.release();\n@@ -424,7 +424,7 @@ void StartHTTPServer()\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue, i);\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n     }\n }\n \n@@ -435,21 +435,20 @@ void InterruptHTTPServer()\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n     }\n-    if (workQueue)\n-        workQueue->Interrupt();\n+    if (g_work_queue) {\n+        g_work_queue->Interrupt();\n+    }\n }\n \n void StopHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (workQueue) {\n+    if (g_work_queue) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread: g_thread_http_workers) {\n+        for (auto& thread : g_thread_http_workers) {\n             thread.join();\n         }\n         g_thread_http_workers.clear();\n-        delete workQueue;\n-        workQueue = nullptr;\n     }\n     // Unlisten sockets, these are what make the event loop running, which means\n     // that after this and all connections are closed the event loop will quit.\n@@ -469,6 +468,7 @@ void StopHTTPServer()\n         event_base_free(eventBase);\n         eventBase = nullptr;\n     }\n+    g_work_queue.reset();\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n "
      },
      {
        "sha": "5e7e42fb775ad24c08130bfe8379d269c572fff6",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -159,7 +159,7 @@ bool Session::Accept(Connection& conn)\n             const std::string& peer_dest =\n                 conn.sock->RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt, MAX_MSG_SIZE);\n \n-            conn.peer = CService(DestB64ToAddr(peer_dest), Params().GetDefaultPort());\n+            conn.peer = CService(DestB64ToAddr(peer_dest), I2P_SAM31_PORT);\n \n             return true;\n         }\n@@ -172,6 +172,13 @@ bool Session::Accept(Connection& conn)\n \n bool Session::Connect(const CService& to, Connection& conn, bool& proxy_error)\n {\n+    // Refuse connecting to arbitrary ports. We don't specify any destination port to the SAM proxy\n+    // when connecting (SAM 3.1 does not use ports) and it forces/defaults it to I2P_SAM31_PORT.\n+    if (to.GetPort() != I2P_SAM31_PORT) {\n+        proxy_error = false;\n+        return false;\n+    }\n+\n     proxy_error = true;\n \n     std::string session_id;\n@@ -366,7 +373,7 @@ void Session::CreateIfNotCreatedAlready()\n     SendRequestAndGetReply(*sock, strprintf(\"SESSION CREATE STYLE=STREAM ID=%s DESTINATION=%s\",\n                                             session_id, private_key_b64));\n \n-    m_my_addr = CService(DestBinToAddr(MyDestination()), Params().GetDefaultPort());\n+    m_my_addr = CService(DestBinToAddr(MyDestination()), I2P_SAM31_PORT);\n     m_session_id = session_id;\n     m_control_sock = std::move(sock);\n "
      },
      {
        "sha": "6fd2701e2e8e30f4595ae67df1154ec0ab89a656",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -340,7 +340,6 @@ void BaseIndex::Interrupt()\n \n bool BaseIndex::Start(CChainState& active_chainstate)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     m_chainstate = &active_chainstate;\n     // Need to register this ValidationInterface before running Init(), so that\n     // callbacks are not missed if Init sets m_synced to true."
      },
      {
        "sha": "9afd76d62d4ce04bf4bedd803128abc195706e5f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 34,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -16,6 +16,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <compat/sanity.h>\n+#include <deploymentstatus.h>\n #include <fs.h>\n #include <hash.h>\n #include <httprpc.h>\n@@ -283,7 +284,7 @@ void Shutdown(NodeContext& node)\n     init::UnsetGlobals();\n     node.mempool.reset();\n     node.fee_estimator.reset();\n-    node.chainman = nullptr;\n+    node.chainman.reset();\n     node.scheduler.reset();\n \n     try {\n@@ -347,12 +348,8 @@ static void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-void SetupServerArgs(NodeContext& node)\n+void SetupServerArgs(ArgsManager& argsman)\n {\n-    assert(!node.args);\n-    node.args = &gArgs;\n-    ArgsManager& argsman = *node.args;\n-\n     SetupHelpOptions(argsman);\n     argsman.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n \n@@ -445,7 +442,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections. Not relevant for I2P (see doc/i2p.md).\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1165,7 +1162,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     assert(!node.addrman);\n     node.addrman = std::make_unique<CAddrMan>();\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n@@ -1179,8 +1176,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n-    node.chainman = &g_chainman;\n-    ChainstateManager& chainman = *Assert(node.chainman);\n+    node.chainman = std::make_unique<ChainstateManager>();\n+    ChainstateManager& chainman = *node.chainman;\n \n     assert(!node.peerman);\n     node.peerman = PeerManager::make(chainparams, *node.connman, *node.addrman, node.banman.get(),\n@@ -1352,7 +1349,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             try {\n                 LOCK(cs_main);\n-                chainman.InitializeChainstate(*Assert(node.mempool));\n+                chainman.InitializeChainstate(Assert(node.mempool.get()));\n                 chainman.m_total_coinstip_cache = nCoinCacheUsage;\n                 chainman.m_total_coinsdb_cache = nCoinDBCache;\n \n@@ -1376,7 +1373,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 // block file from disk.\n                 // Note that it also sets fReindex based on the disk flag!\n                 // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex(chainparams)) {\n+                if (!chainman.LoadBlockIndex()) {\n                     if (ShutdownRequested()) break;\n                     strLoadError = _(\"Error loading block database\");\n                     break;\n@@ -1385,7 +1382,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!chainman.BlockIndex().empty() &&\n-                        !g_chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n@@ -1400,7 +1397,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !::ChainstateActive().LoadGenesisBlock(chainparams)) {\n+                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1431,7 +1428,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                     }\n \n                     // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                    if (!chainstate->ReplayBlocks()) {\n                         strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n                         failed_chainstate_init = true;\n                         break;\n@@ -1443,7 +1440,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                     if (!is_coinsview_empty(chainstate)) {\n                         // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip(chainparams)) {\n+                        if (!chainstate->LoadChainTip()) {\n                             strLoadError = _(\"Error initializing block database\");\n                             failed_chainstate_init = true;\n                             break; // out of the per-chainstate loop\n@@ -1465,7 +1462,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 LOCK(cs_main);\n                 auto chainstates{chainman.GetAll()};\n                 if (std::any_of(chainstates.begin(), chainstates.end(),\n-                                [&chainparams](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                                [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n                     strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n                                              chainparams.GetConsensus().SegwitHeight);\n                     break;\n@@ -1549,21 +1546,21 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n-        if (!g_txindex->Start(::ChainstateActive())) {\n+        if (!g_txindex->Start(chainman.ActiveChainstate())) {\n             return false;\n         }\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n         InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n-        if (!GetBlockFilterIndex(filter_type)->Start(::ChainstateActive())) {\n+        if (!GetBlockFilterIndex(filter_type)->Start(chainman.ActiveChainstate())) {\n             return false;\n         }\n     }\n \n     if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX)) {\n         g_coin_stats_index = std::make_unique<CoinStatsIndex>(/* cache size */ 0, false, fReindex);\n-        if (!g_coin_stats_index->Start(::ChainstateActive())) {\n+        if (!g_coin_stats_index->Start(chainman.ActiveChainstate())) {\n             return false;\n         }\n     }\n@@ -1591,7 +1588,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         // Advertise witness capabilities.\n         // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n@@ -1611,7 +1608,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     boost::signals2::connection block_notify_genesis_wait_connection;\n-    if (::ChainActive().Tip() == nullptr) {\n+    if (chainman.ActiveChain().Tip() == nullptr) {\n         block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(std::bind(BlockNotifyGenesisWait, std::placeholders::_2));\n     } else {\n         fHaveGenesis = true;\n@@ -1720,25 +1717,34 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         return InitError(ResolveErrMsg(\"bind\", bind_arg));\n     }\n \n-    if (connOptions.onion_binds.empty()) {\n-        connOptions.onion_binds.push_back(DefaultOnionServiceTarget());\n-    }\n-\n-    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n-        const auto bind_addr = connOptions.onion_binds.front();\n-        if (connOptions.onion_binds.size() > 1) {\n-            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s for the automatically created Tor onion service.\"), bind_addr.ToStringIPPort()));\n-        }\n-        StartTorControl(bind_addr);\n-    }\n-\n     for (const std::string& strBind : args.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n         bilingual_str error;\n         if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n+    // If the user did not specify -bind= or -whitebind= then we bind\n+    // on any address - 0.0.0.0 (IPv4) and :: (IPv6).\n+    connOptions.bind_on_any = args.GetArgs(\"-bind\").empty() && args.GetArgs(\"-whitebind\").empty();\n+\n+    CService onion_service_target;\n+    if (!connOptions.onion_binds.empty()) {\n+        onion_service_target = connOptions.onion_binds.front();\n+    } else {\n+        onion_service_target = DefaultOnionServiceTarget();\n+        connOptions.onion_binds.push_back(onion_service_target);\n+    }\n+\n+    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n+        if (connOptions.onion_binds.size() > 1) {\n+            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s \"\n+                                    \"for the automatically created Tor onion service.\"),\n+                                  onion_service_target.ToStringIPPort()));\n+        }\n+        StartTorControl(onion_service_target);\n+    }\n+\n     for (const auto& net : args.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         bilingual_str error;"
      },
      {
        "sha": "5af6930a16cdbc966511f4952bb3c2dea9194644",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -20,9 +20,6 @@ struct NodeContext;\n namespace interfaces {\n struct BlockAndHeaderTipInfo;\n }\n-namespace boost {\n-class thread_group;\n-} // namespace boost\n \n /** Interrupt threads */\n void Interrupt(NodeContext& node);\n@@ -69,7 +66,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info\n /**\n  * Register all arguments with the ArgsManager\n  */\n-void SetupServerArgs(NodeContext& node);\n+void SetupServerArgs(ArgsManager& argsman);\n \n /** Returns licensing information (for -version) */\n std::string LicenseInfo();"
      },
      {
        "sha": "6b6157c139242c63c53e930d08fc1422dcd20793",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,6 +6,7 @@\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n #include <node/context.h>\n+#include <util/system.h>\n \n #include <memory>\n \n@@ -20,6 +21,7 @@ class BitcoinNodeInit : public interfaces::Init\n         : m_node(node),\n           m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n     {\n+        m_node.args = &gArgs;\n         m_node.init = this;\n     }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }"
      },
      {
        "sha": "1d4504c24f6e6f55418f718023836fd147457861",
        "filename": "src/init/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/init/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoind.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <interfaces/init.h>\n #include <node/context.h>\n+#include <util/system.h>\n \n #include <memory>\n \n@@ -14,6 +15,7 @@ class BitcoindInit : public interfaces::Init\n public:\n     BitcoindInit(NodeContext& node) : m_node(node)\n     {\n+        m_node.args = &gArgs;\n         m_node.init = this;\n     }\n     NodeContext& m_node;"
      },
      {
        "sha": "7cac435e9632b45b28cf9667f5c01408cd8bfcd7",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -277,6 +277,9 @@ class Chain\n     //! to be prepared to handle this by ignoring notifications about unknown\n     //! removed transactions and already added new transactions.\n     virtual void requestMempoolTransactions(Notifications& notifications) = 0;\n+\n+    //! Check if Taproot has activated\n+    virtual bool isTaprootActive() const = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "77129423db9b2f7e7e23b60ec0142f1a74a855d1",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_INTERFACES_NODE_H\n \n #include <amount.h>     // For CAmount\n+#include <external_signer.h>\n #include <net.h>        // For NodeId\n #include <net_types.h>  // For banmap_t\n #include <netaddress.h> // For Network\n@@ -110,6 +111,9 @@ class Node\n     //! Disconnect node by id.\n     virtual bool disconnectById(NodeId id) = 0;\n \n+    //! List external signers\n+    virtual std::vector<ExternalSigner> externalSigners() = 0;\n+\n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;\n "
      },
      {
        "sha": "fb1febc11b6db5c0162dc40bd0d5dc896191f6e2",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -112,14 +112,14 @@ class Wallet\n     //! Get wallet address list.\n     virtual std::vector<WalletAddress> getAddresses() = 0;\n \n-    //! Add dest data.\n-    virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n+    //! Get receive requests.\n+    virtual std::vector<std::string> getAddressReceiveRequests() = 0;\n \n-    //! Erase dest data.\n-    virtual bool eraseDestData(const CTxDestination& dest, const std::string& key) = 0;\n+    //! Save or remove receive request.\n+    virtual bool setAddressReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& value) = 0;\n \n-    //! Get dest values with prefix.\n-    virtual std::vector<std::string> getDestValues(const std::string& prefix) = 0;\n+    //! Display address on external signer\n+    virtual bool displayAddress(const CTxDestination& dest) = 0;\n \n     //! Lock coin.\n     virtual void lockCoin(const COutPoint& output) = 0;\n@@ -198,9 +198,9 @@ class Wallet\n     virtual TransactionError fillPSBT(int sighash_type,\n         bool sign,\n         bool bip32derivs,\n+        size_t* n_signed,\n         PartiallySignedTransaction& psbtx,\n-        bool& complete,\n-        size_t* n_signed) = 0;\n+        bool& complete) = 0;\n \n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;\n@@ -255,6 +255,9 @@ class Wallet\n     // Return whether private keys enabled.\n     virtual bool privateKeysDisabled() = 0;\n \n+    // Return whether wallet uses an external signer.\n+    virtual bool hasExternalSigner() = 0;\n+\n     // Get default address type.\n     virtual OutputType getDefaultAddressType() = 0;\n "
      },
      {
        "sha": "dcad386e7718428c05072694d1a6f1bbdf41aef6",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -7,10 +7,13 @@\n \n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n+#include <hash.h>\n #include <random.h>\n \n #include <secp256k1.h>\n+#include <secp256k1_extrakeys.h>\n #include <secp256k1_recovery.h>\n+#include <secp256k1_schnorrsig.h>\n \n static secp256k1_context* secp256k1_context_sign = nullptr;\n \n@@ -258,6 +261,24 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     return true;\n }\n \n+bool CKey::SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root, const uint256* aux) const\n+{\n+    assert(sig.size() == 64);\n+    secp256k1_keypair keypair;\n+    if (!secp256k1_keypair_create(secp256k1_context_sign, &keypair, begin())) return false;\n+    if (merkle_root) {\n+        secp256k1_xonly_pubkey pubkey;\n+        if (!secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, &keypair)) return false;\n+        unsigned char pubkey_bytes[32];\n+        if (!secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey)) return false;\n+        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);\n+        if (!secp256k1_keypair_xonly_tweak_add(GetVerifyContext(), &keypair, tweak.data())) return false;\n+    }\n+    bool ret = secp256k1_schnorrsig_sign(secp256k1_context_sign, sig.data(), hash.data(), &keypair, secp256k1_nonce_function_bip340, aux ? (void*)aux->data() : nullptr);\n+    memory_cleanse(&keypair, sizeof(keypair));\n+    return ret;\n+}\n+\n bool CKey::Load(const CPrivKey &seckey, const CPubKey &vchPubKey, bool fSkipCheck=false) {\n     if (!ec_seckey_import_der(secp256k1_context_sign, (unsigned char*)begin(), seckey.data(), seckey.size()))\n         return false;"
      },
      {
        "sha": "d47e54800cc154b720c179e207188f8772be0464",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -128,6 +128,18 @@ class CKey\n      */\n     bool SignCompact(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n+    /**\n+     * Create a BIP-340 Schnorr signature, for the xonly-pubkey corresponding to *this,\n+     * optionally tweaked by *merkle_root. Additional nonce entropy can be provided through\n+     * aux.\n+     *\n+     * When merkle_root is not nullptr, this results in a signature with a modified key as\n+     * specified in BIP341:\n+     * - If merkle_root->IsNull(): key + H_TapTweak(pubkey)*G\n+     * - Otherwise:                key + H_TapTweak(pubkey || *merkle_root)\n+     */\n+    bool SignSchnorr(const uint256& hash, Span<unsigned char> sig, const uint256* merkle_root = nullptr, const uint256* aux = nullptr) const;\n+\n     //! Derive BIP32 child key.\n     bool Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n "
      },
      {
        "sha": "615f4c93126f04148ece8315dca16e1f7c010897",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -54,6 +54,14 @@ class DestinationEncoder\n         return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n     }\n \n+    std::string operator()(const WitnessV1Taproot& tap) const\n+    {\n+        std::vector<unsigned char> data = {1};\n+        data.reserve(53);\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, tap.begin(), tap.end());\n+        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n+    }\n+\n     std::string operator()(const WitnessUnknown& id) const\n     {\n         if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n@@ -135,6 +143,13 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n                 return CNoDestination();\n             }\n \n+            if (version == 1 && data.size() == WITNESS_V1_TAPROOT_SIZE) {\n+                static_assert(WITNESS_V1_TAPROOT_SIZE == WitnessV1Taproot::size());\n+                WitnessV1Taproot tap;\n+                std::copy(data.begin(), data.end(), tap.begin());\n+                return tap;\n+            }\n+\n             if (version > 16) {\n                 error_str = \"Invalid Bech32 address witness version\";\n                 return CNoDestination();"
      },
      {
        "sha": "d9186a5d6dc4c9cc8403903b6fb17397f82a11e0",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -13,6 +13,7 @@\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <pow.h>\n@@ -45,15 +46,7 @@ void RegenerateCommitments(CBlock& block, ChainstateManager& chainman)\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    CBlockIndex* prev_block;\n-    {\n-        // TODO: Temporary scope to check correctness of refactored code.\n-        // Should be removed manually after merge of\n-        // https://github.com/bitcoin/bitcoin/pull/20158\n-        LOCK(::cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman.m_blockman));\n-        prev_block = chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n-    }\n+    CBlockIndex* prev_block = WITH_LOCK(::cs_main, return chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock));\n     GenerateCoinbaseCommitment(block, prev_block, Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);\n@@ -124,12 +117,11 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, m_mempool.cs);\n-    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*m_chainstate.m_chain.Tip()));\n     CBlockIndex* pindexPrev = m_chainstate.m_chain.Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n-    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    pblock->nVersion = g_versionbitscache.ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n@@ -146,12 +138,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // This is only needed in case the witness softfork activation is reverted\n     // (which would require a very deep reorganization).\n     // Note that the mempool would accept transactions with witness data before\n-    // IsWitnessEnabled, but we would only ever mine blocks after IsWitnessEnabled\n+    // the deployment is active, but we would only ever mine blocks after activation\n     // unless there is a massive block reorganization with the witness softfork\n     // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+    fIncludeWitness = DeploymentActiveAfter(pindexPrev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;\n@@ -184,7 +176,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(m_chainstate));\n     if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }"
      },
      {
        "sha": "70ba875c4b58669cb16f1432fe7e23d2fb1f5a64",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 57,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -42,6 +42,7 @@\n #endif\n \n #include <algorithm>\n+#include <array>\n #include <cstdint>\n #include <functional>\n #include <optional>\n@@ -401,7 +402,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n     // Resolve\n-    const uint16_t default_port{Params().GetDefaultPort()};\n+    const uint16_t default_port{pszDest != nullptr ? Params().GetDefaultPort(pszDest) :\n+                                                     Params().GetDefaultPort()};\n     if (pszDest) {\n         std::vector<CService> resolved;\n         if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n@@ -841,18 +843,6 @@ static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, cons\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n-static bool CompareLocalHostTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n-{\n-    if (a.m_is_local != b.m_is_local) return b.m_is_local;\n-    return a.nTimeConnected > b.nTimeConnected;\n-}\n-\n-static bool CompareOnionTimeConnected(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b)\n-{\n-    if (a.m_is_onion != b.m_is_onion) return b.m_is_onion;\n-    return a.nTimeConnected > b.nTimeConnected;\n-}\n-\n static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\n     return a.nKeyedNetGroup < b.nKeyedNetGroup;\n }\n@@ -883,6 +873,26 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+/**\n+ * Sort eviction candidates by network/localhost and connection uptime.\n+ * Candidates near the beginning are more likely to be evicted, and those\n+ * near the end are more likely to be protected, e.g. less likely to be evicted.\n+ * - First, nodes that are not `is_local` and that do not belong to `network`,\n+ *   sorted by increasing uptime (from most recently connected to connected longer).\n+ * - Then, nodes that are `is_local` or belong to `network`, sorted by increasing uptime.\n+ */\n+struct CompareNodeNetworkTime {\n+    const bool m_is_local;\n+    const Network m_network;\n+    CompareNodeNetworkTime(bool is_local, Network network) : m_is_local(is_local), m_network(network) {}\n+    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\n+    {\n+        if (m_is_local && a.m_is_local != b.m_is_local) return b.m_is_local;\n+        if ((a.m_network == m_network) != (b.m_network == m_network)) return b.m_network == m_network;\n+        return a.nTimeConnected > b.nTimeConnected;\n+    };\n+};\n+\n //! Sort an array by the specified comparator, then erase the last K elements where predicate is true.\n template <typename T, typename Comparator>\n static void EraseLastKElements(\n@@ -894,40 +904,77 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& eviction_candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n+    // To favorise the diversity of our peer connections, reserve up to half of these protected\n+    // spots for Tor/onion, localhost and I2P peers, even if they're not longest uptime overall.\n+    // This helps protect these higher-latency peers that tend to be otherwise\n     // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    const size_t initial_size = eviction_candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Disadvantaged networks to protect: I2P, localhost, Tor/onion. In case of equal counts, earlier\n+    // array members have first opportunity to recover unused slots from the previous iteration.\n+    struct Net { bool is_local; Network id; size_t count; };\n+    std::array<Net, 3> networks{\n+        {{false, NET_I2P, 0}, {/* localhost */ true, NET_MAX, 0}, {false, NET_ONION, 0}}};\n+\n+    // Count and store the number of eviction candidates per network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(eviction_candidates.cbegin(), eviction_candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) {\n+                                    return n.is_local ? c.m_is_local : c.m_network == n.id;\n+                                });\n+    }\n+    // Sort `networks` by ascending candidate count, to give networks having fewer candidates\n+    // the first opportunity to recover unused protected slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count < b.count; });\n+\n+    // Protect up to 25% of the eviction candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        // Count the number of disadvantaged networks from which we have peers to protect.\n+        auto num_networks = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+        if (num_networks == 0) {\n+            break;\n+        }\n+        const size_t disadvantaged_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(disadvantaged_to_protect / num_networks, static_cast<size_t>(1))};\n+        // Early exit flag if there are no remaining candidates by disadvantaged network.\n+        bool protected_at_least_one{false};\n+\n+        for (Net& n : networks) {\n+            if (n.count == 0) continue;\n+            const size_t before = eviction_candidates.size();\n+            EraseLastKElements(eviction_candidates, CompareNodeNetworkTime(n.is_local, n.id),\n+                               protect_per_network, [&n](const NodeEvictionCandidate& c) {\n+                                   return n.is_local ? c.m_is_local : c.m_network == n.id;\n+                               });\n+            const size_t after = eviction_candidates.size();\n+            if (before > after) {\n+                protected_at_least_one = true;\n+                const size_t delta{before - after};\n+                num_protected += delta;\n+                if (num_protected >= max_protect_by_network) {\n+                    break;\n+                }\n+                n.count -= delta;\n+            }\n+        }\n+        if (!protected_at_least_one) {\n+            break;\n+        }\n     }\n \n     // Calculate how many we removed, and update our total number of peers that\n     // we want to protect based on uptime accordingly.\n-    total_protect_size -= initial_size - vEvictionCandidates.size();\n-    EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, total_protect_size);\n+    assert(num_protected == initial_size - eviction_candidates.size());\n+    const size_t remaining_to_protect{total_protect_size - num_protected};\n+    EraseLastKElements(eviction_candidates, ReverseCompareNodeTimeConnected, remaining_to_protect);\n }\n \n [[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\n@@ -944,8 +991,7 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // An attacker cannot manipulate this metric without performing useful work.\n     EraseLastKElements(vEvictionCandidates, CompareNodeTXTime, 4);\n     // Protect up to 8 non-tx-relay peers that have sent us novel blocks.\n-    const size_t erase_size = std::min(size_t(8), vEvictionCandidates.size());\n-    EraseLastKElements(vEvictionCandidates, CompareNodeBlockRelayOnlyTime, erase_size,\n+    EraseLastKElements(vEvictionCandidates, CompareNodeBlockRelayOnlyTime, 8,\n                        [](const NodeEvictionCandidate& n) { return !n.fRelayTxes && n.fRelevantServices; });\n \n     // Protect 4 nodes that most recently sent us novel blocks.\n@@ -1024,7 +1070,7 @@ bool CConnman::AttemptToEvictConnection()\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n                                                node->m_prefer_evict, node->addr.IsLocal(),\n-                                               node->m_inbound_onion};\n+                                               node->ConnectedThroughNetwork()};\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n@@ -2019,8 +2065,9 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             // from advertising themselves as a service on another host and\n             // port, causing a DoS attack as nodes around the network attempt\n             // to connect to it fruitlessly.\n-            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != Params().GetDefaultPort(addr.GetNetwork()) && nTries < 50) {\n                 continue;\n+            }\n \n             addrConnect = addr;\n             break;\n@@ -2083,7 +2130,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo() const\n     }\n \n     for (const std::string& strAddNode : lAddresses) {\n-        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort(strAddNode)));\n         AddedNodeInfo addedNode{strAddNode, CService(), false, false};\n         if (service.IsValid()) {\n             // strAddNode is an IP:port\n@@ -2173,6 +2220,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n \n void CConnman::ThreadMessageHandler()\n {\n+    FastRandomContext rng;\n     while (!flagInterruptMsgProc)\n     {\n         std::vector<CNode*> vNodesCopy;\n@@ -2186,6 +2234,11 @@ void CConnman::ThreadMessageHandler()\n \n         bool fMoreWork = false;\n \n+        // Randomize the order in which we process messages from/to our peers.\n+        // This prevents attacks in which an attacker exploits having multiple\n+        // consecutive connections in the vNodes list.\n+        Shuffle(vNodesCopy.begin(), vNodesCopy.end(), rng);\n+\n         for (CNode* pnode : vNodesCopy)\n         {\n             if (pnode->fDisconnect)\n@@ -2419,38 +2472,33 @@ bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags\n     return true;\n }\n \n-bool CConnman::InitBinds(\n-    const std::vector<CService>& binds,\n-    const std::vector<NetWhitebindPermissions>& whiteBinds,\n-    const std::vector<CService>& onion_binds)\n+bool CConnman::InitBinds(const Options& options)\n {\n     bool fBound = false;\n-    for (const auto& addrBind : binds) {\n+    for (const auto& addrBind : options.vBinds) {\n         fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR), NetPermissionFlags::None);\n     }\n-    for (const auto& addrBind : whiteBinds) {\n+    for (const auto& addrBind : options.vWhiteBinds) {\n         fBound |= Bind(addrBind.m_service, (BF_EXPLICIT | BF_REPORT_ERROR), addrBind.m_flags);\n     }\n-    if (binds.empty() && whiteBinds.empty()) {\n+    for (const auto& addr_bind : options.onion_binds) {\n+        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n+    }\n+    if (options.bind_on_any) {\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = htonl(INADDR_ANY);\n         struct in6_addr inaddr6_any = IN6ADDR_ANY_INIT;\n         fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE, NetPermissionFlags::None);\n         fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE, NetPermissionFlags::None);\n     }\n-\n-    for (const auto& addr_bind : onion_binds) {\n-        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n-    }\n-\n     return fBound;\n }\n \n bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n     Init(connOptions);\n \n-    if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds, connOptions.onion_binds)) {\n+    if (fListen && !InitBinds(connOptions)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n                 _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),"
      },
      {
        "sha": "e1f109a2c4340e7461cf5176e9ac73c12b223ddf",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -768,6 +768,9 @@ class CConnman\n         std::vector<NetWhitebindPermissions> vWhiteBinds;\n         std::vector<CService> vBinds;\n         std::vector<CService> onion_binds;\n+        /// True if the user did not specify -bind= or -whitebind= and thus\n+        /// we should bind on `0.0.0.0` (IPv4) and `::` (IPv6).\n+        bool bind_on_any;\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n@@ -962,10 +965,7 @@ class CConnman\n \n     bool BindListenPort(const CService& bindAddr, bilingual_str& strError, NetPermissionFlags permissions);\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n-    bool InitBinds(\n-        const std::vector<CService>& binds,\n-        const std::vector<NetWhitebindPermissions>& whiteBinds,\n-        const std::vector<CService>& onion_binds);\n+    bool InitBinds(const Options& options);\n \n     void ThreadOpenAddedConnections();\n     void AddAddrFetch(const std::string& strDest);\n@@ -1209,7 +1209,7 @@ struct NodeEvictionCandidate\n     uint64_t nKeyedNetGroup;\n     bool prefer_evict;\n     bool m_is_local;\n-    bool m_is_onion;\n+    Network m_network;\n };\n \n /**\n@@ -1227,20 +1227,20 @@ struct NodeEvictionCandidate\n  * longest, to replicate the non-eviction implicit behavior and preclude attacks\n  * that start later.\n  *\n- * Half of these protected spots (1/4 of the total) are reserved for onion peers\n- * connected via our tor control service, if any, sorted by longest uptime, even\n- * if they're not longest uptime overall. Any remaining slots of the 1/4 are\n- * then allocated to protect localhost peers, if any (or up to 2 localhost peers\n- * if no slots remain and 2 or more onion peers were protected), sorted by\n- * longest uptime, as manually configured hidden services not using\n- * `-bind=addr[:port]=onion` will not be detected as inbound onion connections.\n+ * Half of these protected spots (1/4 of the total) are reserved for the\n+ * following categories of peers, sorted by longest uptime, even if they're not\n+ * longest uptime overall:\n+ *\n+ * - onion peers connected via our tor control service\n+ *\n+ * - localhost peers, as manually configured hidden services not using\n+ *   `-bind=addr[:port]=onion` will not be detected as inbound onion connections\n  *\n- * This helps protect onion peers, which tend to be otherwise disadvantaged\n- * under our eviction criteria for their higher min ping times relative to IPv4\n- * and IPv6 peers, and favorise the diversity of peer connections.\n+ * - I2P peers\n  *\n- * This function was extracted from SelectNodeToEvict() to be able to test the\n- * ratio-based protection logic deterministically.\n+ * This helps protect these privacy network peers, which tend to be otherwise\n+ * disadvantaged under our eviction criteria for their higher min ping times\n+ * relative to IPv4/IPv6 peers, and favorise the diversity of peer connections.\n  */\n void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates);\n "
      },
      {
        "sha": "315d2ac5cd82dea5af9da3b12b4faeb360ea95a5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 64,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,6 +11,7 @@\n #include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <merkleblock.h>\n@@ -159,10 +160,10 @@ static constexpr size_t MAX_ADDR_TO_SEND{1000};\n namespace {\n /** Blocks that are in flight, and that are in the queue to be downloaded. */\n struct QueuedBlock {\n-    uint256 hash;\n-    const CBlockIndex* pindex;                               //!< Optional.\n-    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n-    std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n+    /** BlockIndex. We must have this since we only request blocks when we've already validated the header. */\n+    const CBlockIndex* pindex;\n+    /** Optional, used for CMPCTBLOCK downloads */\n+    std::unique_ptr<PartiallyDownloadedBlock> partialBlock;\n };\n \n /**\n@@ -463,16 +464,20 @@ class PeerManagerImpl final : public PeerManager\n     Mutex m_recent_confirmed_transactions_mutex;\n     std::unique_ptr<CRollingBloomFilter> m_recent_confirmed_transactions GUARDED_BY(m_recent_confirmed_transactions_mutex);\n \n-    /* Returns a bool indicating whether we requested this block.\n-     * Also used if a block was /not/ received and timed out or started with another peer\n+    /** Have we requested this block from a peer */\n+    bool IsBlockRequested(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    /** Remove this block from our tracked requested blocks. Called if:\n+     *  - the block has been received from a peer\n+     *  - the request for the block has timed out\n      */\n-    bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void RemoveBlockRequest(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /* Mark a block as in flight\n      * Returns false, still setting pit, if the block was already in flight from the same peer\n      * pit will only be valid as long as the same cs_main lock is being held\n      */\n-    bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool BlockRequested(NodeId nodeid, const CBlockIndex& block, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool TipMayBeStale() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -512,7 +517,7 @@ class PeerManagerImpl final : public PeerManager\n     std::list<NodeId> lNodesAnnouncingHeaderAndIDs GUARDED_BY(cs_main);\n \n     /** Number of peers from which we're downloading blocks. */\n-    int nPeersWithValidatedDownloads GUARDED_BY(cs_main) = 0;\n+    int m_peers_downloading_from GUARDED_BY(cs_main) = 0;\n \n     /** Storage for orphan information */\n     TxOrphanage m_orphanage;\n@@ -627,7 +632,6 @@ struct CNodeState {\n     //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n     std::chrono::microseconds m_downloading_since{0us};\n     int nBlocksInFlight{0};\n-    int nBlocksInFlightValidHeaders{0};\n     //! Whether we consider this a preferred download peer.\n     bool fPreferredDownload{false};\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n@@ -758,32 +762,42 @@ static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUS\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n-bool PeerManagerImpl::MarkBlockAsReceived(const uint256& hash)\n+bool PeerManagerImpl::IsBlockRequested(const uint256& hash)\n {\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n-    if (itInFlight != mapBlocksInFlight.end()) {\n-        CNodeState *state = State(itInFlight->second.first);\n-        assert(state != nullptr);\n-        state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n-        if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n-            // Last validated block on the queue was received.\n-            nPeersWithValidatedDownloads--;\n-        }\n-        if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n-            // First block on the queue was received, update the start download time for the next one\n-            state->m_downloading_since = std::max(state->m_downloading_since, GetTime<std::chrono::microseconds>());\n-        }\n-        state->vBlocksInFlight.erase(itInFlight->second.second);\n-        state->nBlocksInFlight--;\n-        state->m_stalling_since = 0us;\n-        mapBlocksInFlight.erase(itInFlight);\n-        return true;\n+    return mapBlocksInFlight.find(hash) != mapBlocksInFlight.end();\n+}\n+\n+void PeerManagerImpl::RemoveBlockRequest(const uint256& hash)\n+{\n+    auto it = mapBlocksInFlight.find(hash);\n+    if (it == mapBlocksInFlight.end()) {\n+        // Block was not requested\n+        return;\n     }\n-    return false;\n+\n+    auto [node_id, list_it] = it->second;\n+    CNodeState *state = State(node_id);\n+    assert(state != nullptr);\n+\n+    if (state->vBlocksInFlight.begin() == list_it) {\n+        // First block on the queue was received, update the start download time for the next one\n+        state->m_downloading_since = std::max(state->m_downloading_since, GetTime<std::chrono::microseconds>());\n+    }\n+    state->vBlocksInFlight.erase(list_it);\n+\n+    state->nBlocksInFlight--;\n+    if (state->nBlocksInFlight == 0) {\n+        // Last validated block on the queue was received.\n+        m_peers_downloading_from--;\n+    }\n+    state->m_stalling_since = 0us;\n+    mapBlocksInFlight.erase(it);\n }\n \n-bool PeerManagerImpl::MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex, std::list<QueuedBlock>::iterator** pit)\n+bool PeerManagerImpl::BlockRequested(NodeId nodeid, const CBlockIndex& block, std::list<QueuedBlock>::iterator** pit)\n {\n+    const uint256& hash{block.GetBlockHash()};\n+\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -797,22 +811,20 @@ bool PeerManagerImpl::MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, co\n     }\n \n     // Make sure it's not listed somewhere already.\n-    MarkBlockAsReceived(hash);\n+    RemoveBlockRequest(hash);\n \n     std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n-            {hash, pindex, pindex != nullptr, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&m_mempool) : nullptr)});\n+            {&block, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&m_mempool) : nullptr)});\n     state->nBlocksInFlight++;\n-    state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n         // We're starting a block download (batch) from this peer.\n         state->m_downloading_since = GetTime<std::chrono::microseconds>();\n-    }\n-    if (state->nBlocksInFlightValidHeaders == 1 && pindex != nullptr) {\n-        nPeersWithValidatedDownloads++;\n+        m_peers_downloading_from++;\n     }\n     itInFlight = mapBlocksInFlight.insert(std::make_pair(hash, std::make_pair(nodeid, it))).first;\n-    if (pit)\n+    if (pit) {\n         *pit = &itInFlight->second.second;\n+    }\n     return true;\n }\n \n@@ -825,12 +837,27 @@ void PeerManagerImpl::MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid)\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n+        int num_outbound_hb_peers = 0;\n         for (std::list<NodeId>::iterator it = lNodesAnnouncingHeaderAndIDs.begin(); it != lNodesAnnouncingHeaderAndIDs.end(); it++) {\n             if (*it == nodeid) {\n                 lNodesAnnouncingHeaderAndIDs.erase(it);\n                 lNodesAnnouncingHeaderAndIDs.push_back(nodeid);\n                 return;\n             }\n+            CNodeState *state = State(*it);\n+            if (state != nullptr && !state->m_is_inbound) ++num_outbound_hb_peers;\n+        }\n+        if (nodestate->m_is_inbound) {\n+            // If we're adding an inbound HB peer, make sure we're not removing\n+            // our last outbound HB peer in the process.\n+            if (lNodesAnnouncingHeaderAndIDs.size() >= 3 && num_outbound_hb_peers == 1) {\n+                CNodeState *remove_node = State(lNodesAnnouncingHeaderAndIDs.front());\n+                if (remove_node != nullptr && !remove_node->m_is_inbound) {\n+                    // Put the HB outbound peer in the second slot, so that it\n+                    // doesn't get removed.\n+                    std::swap(lNodesAnnouncingHeaderAndIDs.front(), *std::next(lNodesAnnouncingHeaderAndIDs.begin()));\n+                }\n+            }\n         }\n         m_connman.ForNode(nodeid, [this](CNode* pfrom) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n             AssertLockHeld(::cs_main);\n@@ -971,14 +998,14 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+            if (!State(nodeid)->fHaveWitness && DeploymentActiveAt(*pindex, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n             if (pindex->nStatus & BLOCK_HAVE_DATA || m_chainman.ActiveChain().Contains(pindex)) {\n                 if (pindex->HaveTxsDownloaded())\n                     state->pindexLastCommonBlock = pindex;\n-            } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n+            } else if (!IsBlockRequested(pindex->GetBlockHash())) {\n                 // The block is not already downloaded, and not yet in flight.\n                 if (pindex->nHeight > nWindowEnd) {\n                     // We reached the end of the window.\n@@ -1129,13 +1156,13 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n         nSyncStarted--;\n \n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n-        mapBlocksInFlight.erase(entry.hash);\n+        mapBlocksInFlight.erase(entry.pindex->GetBlockHash());\n     }\n     WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n     nPreferredDownload -= state->fPreferredDownload;\n-    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n-    assert(nPeersWithValidatedDownloads >= 0);\n+    m_peers_downloading_from -= (state->nBlocksInFlight != 0);\n+    assert(m_peers_downloading_from >= 0);\n     m_outbound_peers_with_protect_from_disconnect -= state->m_chain_sync.m_protect;\n     assert(m_outbound_peers_with_protect_from_disconnect >= 0);\n     m_wtxid_relay_peers -= state->m_wtxid_relay;\n@@ -1147,7 +1174,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n         // Do a consistency check after the last peer is removed.\n         assert(mapBlocksInFlight.empty());\n         assert(nPreferredDownload == 0);\n-        assert(nPeersWithValidatedDownloads == 0);\n+        assert(m_peers_downloading_from == 0);\n         assert(m_outbound_peers_with_protect_from_disconnect == 0);\n         assert(m_wtxid_relay_peers == 0);\n         assert(m_txrequest.Size() == 0);\n@@ -1350,7 +1377,6 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_stale_tip_check_time(0),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n-    assert(std::addressof(g_chainman) == std::addressof(m_chainman));\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n \n@@ -1442,7 +1468,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n         return;\n     nHighestFastAnnounce = pindex->nHeight;\n \n-    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus());\n+    bool fWitnessEnabled = DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n     uint256 hashBlock(pblock->GetHash());\n \n     {\n@@ -1684,7 +1710,7 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv&\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!m_chainman.ActiveChainstate().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n+        if (!m_chainman.ActiveChainstate().ActivateBestChain(state, a_recent_block)) {\n             LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n@@ -2056,8 +2082,8 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !m_chainman.ActiveChain().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, m_chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n+                        !IsBlockRequested(pindexWalk->GetBlockHash()) &&\n+                        (!DeploymentActiveAt(*pindexWalk, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) || State(pfrom.GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -2081,7 +2107,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n                     }\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(pfrom.GetId(), pindex->GetBlockHash(), pindex);\n+                    BlockRequested(pfrom.GetId(), *pindex);\n                     LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom.GetId());\n                 }\n@@ -2827,7 +2853,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom.GetId());\n \n                 UpdateBlockAvailability(pfrom.GetId(), inv.hash);\n-                if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n+                if (!fAlreadyHave && !fImporting && !fReindex && !IsBlockRequested(inv.hash)) {\n                     // Headers-first is the primary method of announcement on\n                     // the network. If a node fell back to sending blocks by inv,\n                     // it's probably for a re-org. The final block hash\n@@ -2910,7 +2936,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 a_recent_block = most_recent_block;\n             }\n             BlockValidationState state;\n-            if (!m_chainman.ActiveChainstate().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n+            if (!m_chainman.ActiveChainstate().ActivateBestChain(state, a_recent_block)) {\n                 LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }\n@@ -3372,7 +3398,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        if (IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+        if (DeploymentActiveAt(*pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n             return;\n@@ -3384,7 +3410,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n                  (fAlreadyInFlight && blockInFlightIt->second.first == pfrom.GetId())) {\n                 std::list<QueuedBlock>::iterator* queuedBlockIt = nullptr;\n-                if (!MarkBlockAsInFlight(pfrom.GetId(), pindex->GetBlockHash(), pindex, &queuedBlockIt)) {\n+                if (!BlockRequested(pfrom.GetId(), *pindex, &queuedBlockIt)) {\n                     if (!(*queuedBlockIt)->partialBlock)\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&m_mempool));\n                     else {\n@@ -3397,7 +3423,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 PartiallyDownloadedBlock& partialBlock = *(*queuedBlockIt)->partialBlock;\n                 ReadStatus status = partialBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status == READ_STATUS_INVALID) {\n-                    MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case Misbehaving does not result in a disconnect\n+                    RemoveBlockRequest(pindex->GetBlockHash()); // Reset in-flight state in case Misbehaving does not result in a disconnect\n                     Misbehaving(pfrom.GetId(), 100, \"invalid compact block\");\n                     return;\n                 } else if (status == READ_STATUS_FAILED) {\n@@ -3492,7 +3518,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // process from some other peer.  We do this after calling\n                 // ProcessNewBlock so that a malleated cmpctblock announcement\n                 // can't be used to interfere with block relay.\n-                MarkBlockAsReceived(pblock->GetHash());\n+                RemoveBlockRequest(pblock->GetHash());\n             }\n         }\n         return;\n@@ -3524,7 +3550,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             PartiallyDownloadedBlock& partialBlock = *it->second.second->partialBlock;\n             ReadStatus status = partialBlock.FillBlock(*pblock, resp.txn);\n             if (status == READ_STATUS_INVALID) {\n-                MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case Misbehaving does not result in a disconnect\n+                RemoveBlockRequest(resp.blockhash); // Reset in-flight state in case Misbehaving does not result in a disconnect\n                 Misbehaving(pfrom.GetId(), 100, \"invalid compact block/non-matching block transactions\");\n                 return;\n             } else if (status == READ_STATUS_FAILED) {\n@@ -3550,7 +3576,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // though the block was successfully read, and rely on the\n                 // handling in ProcessNewBlock to ensure the block index is\n                 // updated, etc.\n-                MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n+                RemoveBlockRequest(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n                 // mapBlockSource is used for potentially punishing peers and\n                 // updating which peers send us compact blocks, so the race\n@@ -3615,9 +3641,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n-            // Also always process if we requested the block explicitly, as we may\n-            // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            // Always process the block if we requested it, since we may\n+            // need it even when it's not a candidate for a new best tip.\n+            forceProcessing = IsBlockRequested(hash);\n+            RemoveBlockRequest(hash);\n             // mapBlockSource is only used for punishing peers and setting\n             // which peers send us compact blocks, so the race between here and\n             // cs_main in ProcessNewBlock is fine.\n@@ -4712,9 +4739,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // to unreasonably increase our timeout.\n         if (state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n-            int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n+            int nOtherPeersWithValidatedDownloads = m_peers_downloading_from - 1;\n             if (current_time > state.m_downloading_since + std::chrono::seconds{consensusParams.nPowTargetSpacing} * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n-                LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->GetId());\n+                LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.pindex->GetBlockHash().ToString(), pto->GetId());\n                 pto->fDisconnect = true;\n                 return true;\n             }\n@@ -4767,7 +4794,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             for (const CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(*pto);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n+                BlockRequested(pto->GetId(), *pindex);\n                 LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->GetId());\n             }"
      },
      {
        "sha": "e7b3377475bc0687bbc7baf792f97249040f9d59",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 49,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -32,14 +32,7 @@ CNetAddr::BIP155Network CNetAddr::GetBIP155Network() const\n     case NET_IPV6:\n         return BIP155Network::IPV6;\n     case NET_ONION:\n-        switch (m_addr.size()) {\n-        case ADDR_TORV2_SIZE:\n-            return BIP155Network::TORV2;\n-        case ADDR_TORV3_SIZE:\n-            return BIP155Network::TORV3;\n-        default:\n-            assert(false);\n-        }\n+        return BIP155Network::TORV3;\n     case NET_I2P:\n         return BIP155Network::I2P;\n     case NET_CJDNS:\n@@ -72,14 +65,6 @@ bool CNetAddr::SetNetFromBIP155Network(uint8_t possible_bip155_net, size_t addre\n         throw std::ios_base::failure(\n             strprintf(\"BIP155 IPv6 address with length %u (should be %u)\", address_size,\n                       ADDR_IPV6_SIZE));\n-    case BIP155Network::TORV2:\n-        if (address_size == ADDR_TORV2_SIZE) {\n-            m_net = NET_ONION;\n-            return true;\n-        }\n-        throw std::ios_base::failure(\n-            strprintf(\"BIP155 TORv2 address with length %u (should be %u)\", address_size,\n-                      ADDR_TORV2_SIZE));\n     case BIP155Network::TORV3:\n         if (address_size == ADDR_TORV3_SIZE) {\n             m_net = NET_ONION;\n@@ -130,7 +115,7 @@ void CNetAddr::SetIP(const CNetAddr& ipIn)\n         assert(ipIn.m_addr.size() == ADDR_IPV6_SIZE);\n         break;\n     case NET_ONION:\n-        assert(ipIn.m_addr.size() == ADDR_TORV2_SIZE || ipIn.m_addr.size() == ADDR_TORV3_SIZE);\n+        assert(ipIn.m_addr.size() == ADDR_TORV3_SIZE);\n         break;\n     case NET_I2P:\n         assert(ipIn.m_addr.size() == ADDR_I2P_SIZE);\n@@ -161,9 +146,12 @@ void CNetAddr::SetLegacyIPv6(Span<const uint8_t> ipv6)\n         m_net = NET_IPV4;\n         skip = sizeof(IPV4_IN_IPV6_PREFIX);\n     } else if (HasPrefix(ipv6, TORV2_IN_IPV6_PREFIX)) {\n-        // TORv2-in-IPv6\n-        m_net = NET_ONION;\n-        skip = sizeof(TORV2_IN_IPV6_PREFIX);\n+        // TORv2-in-IPv6 (unsupported). Unserialize as !IsValid(), thus ignoring them.\n+        // Mimic a default-constructed CNetAddr object which is !IsValid() and thus\n+        // will not be gossiped, but continue reading next addresses from the stream.\n+        m_net = NET_IPV6;\n+        m_addr.assign(ADDR_IPV6_SIZE, 0x0);\n+        return;\n     } else if (HasPrefix(ipv6, INTERNAL_IN_IPV6_PREFIX)) {\n         // Internal-in-IPv6\n         m_net = NET_INTERNAL;\n@@ -254,12 +242,7 @@ bool CNetAddr::SetTor(const std::string& addr)\n         return false;\n     }\n \n-    switch (input.size()) {\n-    case ADDR_TORV2_SIZE:\n-        m_net = NET_ONION;\n-        m_addr.assign(input.begin(), input.end());\n-        return true;\n-    case torv3::TOTAL_LEN: {\n+    if (input.size() == torv3::TOTAL_LEN) {\n         Span<const uint8_t> input_pubkey{input.data(), ADDR_TORV3_SIZE};\n         Span<const uint8_t> input_checksum{input.data() + ADDR_TORV3_SIZE, torv3::CHECKSUM_LEN};\n         Span<const uint8_t> input_version{input.data() + ADDR_TORV3_SIZE + torv3::CHECKSUM_LEN, sizeof(torv3::VERSION)};\n@@ -279,7 +262,6 @@ bool CNetAddr::SetTor(const std::string& addr)\n         m_addr.assign(input_pubkey.begin(), input_pubkey.end());\n         return true;\n     }\n-    }\n \n     return false;\n }\n@@ -507,7 +489,7 @@ bool CNetAddr::IsValid() const\n  */\n bool CNetAddr::IsRoutable() const\n {\n-    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || (IsRFC4193() && !IsTor()) || IsRFC4843() || IsRFC7343() || IsLocal() || IsInternal());\n+    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || IsRFC4193() || IsRFC4843() || IsRFC7343() || IsLocal() || IsInternal());\n }\n \n /**\n@@ -528,7 +510,6 @@ bool CNetAddr::IsAddrV1Compatible() const\n     case NET_INTERNAL:\n         return true;\n     case NET_ONION:\n-        return m_addr.size() == ADDR_TORV2_SIZE;\n     case NET_I2P:\n     case NET_CJDNS:\n         return false;\n@@ -613,33 +594,26 @@ static std::string IPv6ToString(Span<const uint8_t> a, uint32_t scope_id)\n     return r;\n }\n \n+static std::string OnionToString(Span<const uint8_t> addr)\n+{\n+    uint8_t checksum[torv3::CHECKSUM_LEN];\n+    torv3::Checksum(addr, checksum);\n+    // TORv3 onion_address = base32(PUBKEY | CHECKSUM | VERSION) + \".onion\"\n+    prevector<torv3::TOTAL_LEN, uint8_t> address{addr.begin(), addr.end()};\n+    address.insert(address.end(), checksum, checksum + torv3::CHECKSUM_LEN);\n+    address.insert(address.end(), torv3::VERSION, torv3::VERSION + sizeof(torv3::VERSION));\n+    return EncodeBase32(address) + \".onion\";\n+}\n+\n std::string CNetAddr::ToStringIP() const\n {\n     switch (m_net) {\n     case NET_IPV4:\n         return IPv4ToString(m_addr);\n-    case NET_IPV6: {\n+    case NET_IPV6:\n         return IPv6ToString(m_addr, m_scope_id);\n-    }\n     case NET_ONION:\n-        switch (m_addr.size()) {\n-        case ADDR_TORV2_SIZE:\n-            return EncodeBase32(m_addr) + \".onion\";\n-        case ADDR_TORV3_SIZE: {\n-\n-            uint8_t checksum[torv3::CHECKSUM_LEN];\n-            torv3::Checksum(m_addr, checksum);\n-\n-            // TORv3 onion_address = base32(PUBKEY | CHECKSUM | VERSION) + \".onion\"\n-            prevector<torv3::TOTAL_LEN, uint8_t> address{m_addr.begin(), m_addr.end()};\n-            address.insert(address.end(), checksum, checksum + torv3::CHECKSUM_LEN);\n-            address.insert(address.end(), torv3::VERSION, torv3::VERSION + sizeof(torv3::VERSION));\n-\n-            return EncodeBase32(address) + \".onion\";\n-        }\n-        default:\n-            assert(false);\n-        }\n+        return OnionToString(m_addr);\n     case NET_I2P:\n         return EncodeBase32(m_addr, false /* don't pad with = */) + \".b32.i2p\";\n     case NET_CJDNS:"
      },
      {
        "sha": "5e1d9d2a6f32726383ae58ddf3cd956ebad4d720",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 27,
        "deletions": 18,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,7 +11,9 @@\n \n #include <attributes.h>\n #include <compat.h>\n+#include <crypto/siphash.h>\n #include <prevector.h>\n+#include <random.h>\n #include <serialize.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n@@ -97,9 +99,6 @@ static constexpr size_t ADDR_IPV4_SIZE = 4;\n /// Size of IPv6 address (in bytes).\n static constexpr size_t ADDR_IPV6_SIZE = 16;\n \n-/// Size of TORv2 address (in bytes).\n-static constexpr size_t ADDR_TORV2_SIZE = 10;\n-\n /// Size of TORv3 address (in bytes). This is the length of just the address\n /// as used in BIP155, without the checksum and the version byte.\n static constexpr size_t ADDR_TORV3_SIZE = 32;\n@@ -113,6 +112,9 @@ static constexpr size_t ADDR_CJDNS_SIZE = 16;\n /// Size of \"internal\" (NET_INTERNAL) address (in bytes).\n static constexpr size_t ADDR_INTERNAL_SIZE = 10;\n \n+/// SAM 3.1 and earlier do not support specifying ports and force the port to 0.\n+static constexpr uint16_t I2P_SAM31_PORT{0};\n+\n /**\n  * Network address.\n  */\n@@ -225,7 +227,7 @@ class CNetAddr\n          */\n         bool IsRelayable() const\n         {\n-            return IsIPv4() || IsIPv6() || IsTor();\n+            return IsIPv4() || IsIPv6() || IsTor() || IsI2P();\n         }\n \n         /**\n@@ -254,14 +256,14 @@ class CNetAddr\n             }\n         }\n \n+        friend class CNetAddrHash;\n         friend class CSubNet;\n \n     private:\n         /**\n          * Parse a Tor address and set this object to it.\n          * @param[in] addr Address to parse, must be a valid C string, for example\n-         * pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion or\n-         * 6hzph5hv6337r6p2.onion.\n+         * pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion.\n          * @returns Whether the operation was successful.\n          * @see CNetAddr::IsTor()\n          */\n@@ -303,7 +305,7 @@ class CNetAddr\n         /**\n          * Get the BIP155 network id of this address.\n          * Must not be called for IsInternal() objects.\n-         * @returns BIP155 network id\n+         * @returns BIP155 network id, except TORV2 which is no longer supported.\n          */\n         BIP155Network GetBIP155Network() const;\n \n@@ -334,31 +336,22 @@ class CNetAddr\n                 memcpy(arr, IPV4_IN_IPV6_PREFIX.data(), prefix_size);\n                 memcpy(arr + prefix_size, m_addr.data(), m_addr.size());\n                 return;\n-            case NET_ONION:\n-                if (m_addr.size() == ADDR_TORV3_SIZE) {\n-                    break;\n-                }\n-                prefix_size = sizeof(TORV2_IN_IPV6_PREFIX);\n-                assert(prefix_size + m_addr.size() == sizeof(arr));\n-                memcpy(arr, TORV2_IN_IPV6_PREFIX.data(), prefix_size);\n-                memcpy(arr + prefix_size, m_addr.data(), m_addr.size());\n-                return;\n             case NET_INTERNAL:\n                 prefix_size = sizeof(INTERNAL_IN_IPV6_PREFIX);\n                 assert(prefix_size + m_addr.size() == sizeof(arr));\n                 memcpy(arr, INTERNAL_IN_IPV6_PREFIX.data(), prefix_size);\n                 memcpy(arr + prefix_size, m_addr.data(), m_addr.size());\n                 return;\n+            case NET_ONION:\n             case NET_I2P:\n-                break;\n             case NET_CJDNS:\n                 break;\n             case NET_UNROUTABLE:\n             case NET_MAX:\n                 assert(false);\n             } // no default case, so the compiler can warn about missing cases\n \n-            // Serialize TORv3, I2P and CJDNS as all-zeros.\n+            // Serialize ONION, I2P and CJDNS as all-zeros.\n             memset(arr, 0x0, V1_SERIALIZATION_SIZE);\n         }\n \n@@ -477,6 +470,22 @@ class CNetAddr\n         }\n };\n \n+class CNetAddrHash\n+{\n+public:\n+    size_t operator()(const CNetAddr& a) const noexcept\n+    {\n+        CSipHasher hasher(m_salt_k0, m_salt_k1);\n+        hasher.Write(a.m_net);\n+        hasher.Write(a.m_addr.data(), a.m_addr.size());\n+        return static_cast<size_t>(hasher.Finalize());\n+    }\n+\n+private:\n+    const uint64_t m_salt_k0 = GetRand(std::numeric_limits<uint64_t>::max());\n+    const uint64_t m_salt_k1 = GetRand(std::numeric_limits<uint64_t>::max());\n+};\n+\n class CSubNet\n {\n     protected:"
      },
      {
        "sha": "0083b74b3382c3ccf470f0cf69898ad9a445e434",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -248,7 +248,6 @@ bool FindBlockPos(FlatFilePos& pos, unsigned int nAddSize, unsigned int nHeight,\n             // when the undo file is keeping up with the block file, we want to flush it explicitly\n             // when it is lagging behind (more blocks arrive than are being connected), we let the\n             // undo block write case handle it\n-            assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n             finalize_undo = (vinfoBlockFile[nFile].nHeightLast == (unsigned int)active_chain.Tip()->nHeight);\n             nFile++;\n             if (vinfoBlockFile.size() <= nFile) {\n@@ -494,7 +493,6 @@ struct CImportingNow {\n \n void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n {\n-    const CChainParams& chainparams = Params();\n     ScheduleBatchPriority();\n \n     {\n@@ -513,7 +511,7 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n                     break; // This error is logged in OpenBlockFile\n                 }\n                 LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-                chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file, &pos);\n+                chainman.ActiveChainstate().LoadExternalBlockFile(file, &pos);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;\n@@ -524,15 +522,15 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n             fReindex = false;\n             LogPrintf(\"Reindexing finished\\n\");\n             // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-            chainman.ActiveChainstate().LoadGenesisBlock(chainparams);\n+            chainman.ActiveChainstate().LoadGenesisBlock();\n         }\n \n         // -loadblock=\n         for (const fs::path& path : vImportFiles) {\n             FILE* file = fsbridge::fopen(path, \"rb\");\n             if (file) {\n                 LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-                chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file);\n+                chainman.ActiveChainstate().LoadExternalBlockFile(file);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;\n@@ -549,7 +547,7 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n         // the relevant pointers before the ABC call.\n         for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n             BlockValidationState state;\n-            if (!chainstate->ActivateBestChain(state, chainparams, nullptr)) {\n+            if (!chainstate->ActivateBestChain(state, nullptr)) {\n                 LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n                 StartShutdown();\n                 return;"
      },
      {
        "sha": "7c7bf68178864abc5524df440a9c66bbb791d8ea",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -5,12 +5,13 @@\n #ifndef BITCOIN_NODE_BLOCKSTORAGE_H\n #define BITCOIN_NODE_BLOCKSTORAGE_H\n \n-#include <cstdint>\n-#include <vector>\n-\n #include <fs.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n \n+#include <atomic>\n+#include <cstdint>\n+#include <vector>\n+\n class ArgsManager;\n class BlockValidationState;\n class CBlock;"
      },
      {
        "sha": "50fddf3ab0dc3877a54615f68781906434457a6a",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -13,7 +13,6 @@ void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n     assert(node.mempool);\n     assert(node.chainman);\n     LOCK2(cs_main, node.mempool->cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     CCoinsViewCache& chain_view = node.chainman->ActiveChainstate().CoinsTip();\n     CCoinsViewMemPool mempool_view(&chain_view, *node.mempool);\n     for (auto& coin : coins) {"
      },
      {
        "sha": "67e497c218aaaedcac98fd5f9970759391f8870b",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -97,7 +97,6 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n     if (!pindex) {\n         {\n             LOCK(cs_main);\n-            assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n             pindex = blockman.LookupBlockIndex(view->GetBestBlock());\n         }\n     }"
      },
      {
        "sha": "9afadd09a97edfa1e3a741b3e0c24a94f231b96f",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -12,6 +12,7 @@\n #include <policy/fees.h>\n #include <scheduler.h>\n #include <txmempool.h>\n+#include <validation.h>\n \n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "135f9ea1c6a68d5866b9833a3c1fa1b2d1eb05c9",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -44,7 +44,7 @@ struct NodeContext {\n     std::unique_ptr<CTxMemPool> mempool;\n     std::unique_ptr<CBlockPolicyEstimator> fee_estimator;\n     std::unique_ptr<PeerManager> peerman;\n-    ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n+    std::unique_ptr<ChainstateManager> chainman;\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;"
      },
      {
        "sha": "183b5a5d9122f20b3cde5a5415de3133d7c5f661",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 43,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,6 +6,8 @@\n #include <banman.h>\n #include <chain.h>\n #include <chainparams.h>\n+#include <deploymentstatus.h>\n+#include <external_signer.h>\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n@@ -170,6 +172,24 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n+    std::vector<ExternalSigner> externalSigners() override\n+    {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        std::vector<ExternalSigner> signers = {};\n+        const std::string command = gArgs.GetArg(\"-signer\", \"\");\n+        if (command == \"\") return signers;\n+        ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n+        return signers;\n+#else\n+        // This result is indistinguishable from a successful call that returns\n+        // no signers. For the current GUI this doesn't matter, because the wallet\n+        // creation dialog disables the external signer checkbox in both\n+        // cases. The return type could be changed to std::optional<std::vector>\n+        // (or something that also includes error messages) if this distinction\n+        // becomes important.\n+        return {};\n+#endif // ENABLE_EXTERNAL_SIGNER\n+    }\n     int64_t getTotalBytesRecv() override { return m_context->connman ? m_context->connman->GetTotalBytesRecv() : 0; }\n     int64_t getTotalBytesSent() override { return m_context->connman ? m_context->connman->GetTotalBytesSent() : 0; }\n     size_t getMempoolSize() override { return m_context->mempool ? m_context->mempool->size() : 0; }\n@@ -187,26 +207,16 @@ class NodeImpl : public Node\n     int getNumBlocks() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n         return chainman().ActiveChain().Height();\n     }\n     uint256 getBestBlockHash() override\n     {\n-        const CBlockIndex* tip;\n-        {\n-            // TODO: Temporary scope to check correctness of refactored code.\n-            // Should be removed manually after merge of\n-            // https://github.com/bitcoin/bitcoin/pull/20158\n-            LOCK(cs_main);\n-            assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n-            tip = chainman().ActiveChain().Tip();\n-        }\n+        const CBlockIndex* tip = WITH_LOCK(::cs_main, return chainman().ActiveChain().Tip());\n         return tip ? tip->GetBlockHash() : Params().GenesisBlock().GetHash();\n     }\n     int64_t getLastBlockTime() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n         if (chainman().ActiveChain().Tip()) {\n             return chainman().ActiveChain().Tip()->GetBlockTime();\n         }\n@@ -217,22 +227,12 @@ class NodeImpl : public Node\n         const CBlockIndex* tip;\n         {\n             LOCK(::cs_main);\n-            assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n             tip = chainman().ActiveChain().Tip();\n         }\n         return GuessVerificationProgress(Params().TxData(), tip);\n     }\n     bool isInitialBlockDownload() override {\n-        const CChainState* active_chainstate;\n-        {\n-            // TODO: Temporary scope to check correctness of refactored code.\n-            // Should be removed manually after merge of\n-            // https://github.com/bitcoin/bitcoin/pull/20158\n-            LOCK(::cs_main);\n-            active_chainstate = &m_context->chainman->ActiveChainstate();\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(*active_chainstate));\n-        }\n-        return active_chainstate->IsInitialBlockDownload();\n+        return chainman().ActiveChainstate().IsInitialBlockDownload();\n     }\n     bool getReindex() override { return ::fReindex; }\n     bool getImporting() override { return ::fImporting; }\n@@ -259,7 +259,6 @@ class NodeImpl : public Node\n     bool getUnspentOutput(const COutPoint& output, Coin& coin) override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(chainman().ActiveChainstate()));\n         return chainman().ActiveChainstate().CoinsTip().GetCoin(output, coin);\n     }\n     WalletClient& walletClient() override\n@@ -466,14 +465,12 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman().ActiveChain()));\n         return CheckFinalTx(chainman().ActiveChain().Tip(), tx);\n     }\n     std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (CBlockIndex* fork = m_node.chainman->m_blockman.FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n@@ -483,7 +480,6 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         return FillBlock(m_node.chainman->m_blockman.LookupBlockIndex(hash), block, lock, active);\n     }\n     bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n@@ -496,7 +492,6 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash)) {\n             if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n                 return FillBlock(ancestor, ancestor_out, lock, active);\n@@ -508,9 +503,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* ancestor = m_node.chainman->m_blockman.LookupBlockIndex(ancestor_hash);\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n         return FillBlock(ancestor, ancestor_out, lock, active);\n@@ -519,9 +512,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block1 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash1);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block2 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n         // Using & instead of && below to avoid short circuiting and leaving\n@@ -532,7 +523,6 @@ class ChainImpl : public Chain\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman().m_blockman));\n         return GuessVerificationProgress(Params().TxData(), chainman().m_blockman.LookupBlockIndex(block_hash));\n     }\n     bool hasBlocks(const uint256& block_hash, int min_height, std::optional<int> max_height) override\n@@ -545,7 +535,6 @@ class ChainImpl : public Chain\n         // used to limit the range, and passing min_height that's too low or\n         // max_height that's too high will not crash or change the result.\n         LOCK(::cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman().m_blockman));\n         if (CBlockIndex* block = chainman().m_blockman.LookupBlockIndex(block_hash)) {\n             if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n             for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n@@ -637,16 +626,7 @@ class ChainImpl : public Chain\n     }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n     bool isInitialBlockDownload() override {\n-        const CChainState* active_chainstate;\n-        {\n-            // TODO: Temporary scope to check correctness of refactored code.\n-            // Should be removed manually after merge of\n-            // https://github.com/bitcoin/bitcoin/pull/20158\n-            LOCK(::cs_main);\n-            active_chainstate = &chainman().ActiveChainstate();\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(*active_chainstate));\n-        }\n-        return active_chainstate->IsInitialBlockDownload();\n+        return chainman().ActiveChainstate().IsInitialBlockDownload();\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n@@ -709,6 +689,12 @@ class ChainImpl : public Chain\n             notifications.transactionAddedToMempool(entry.GetSharedTx(), 0 /* mempool_sequence */);\n         }\n     }\n+    bool isTaprootActive() const override\n+    {\n+        LOCK(::cs_main);\n+        const CBlockIndex* tip = Assert(m_node.chainman)->ActiveChain().Tip();\n+        return DeploymentActiveAfter(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n+    }\n     NodeContext& m_node;\n };\n } // namespace"
      },
      {
        "sha": "b013b6d579381cf3c7b1efb85dd375acf53944a8",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -23,6 +23,8 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n     result.inputs.resize(psbtx.tx->vin.size());\n \n+    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n+\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         PSBTInput& input = psbtx.inputs[i];\n         PSBTInputAnalysis& input_analysis = result.inputs[i];\n@@ -61,7 +63,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n             // Figure out what is missing\n             SignatureData outdata;\n-            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, 1, &outdata);\n \n             // Things are missing\n             if (!complete) {\n@@ -121,7 +123,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n             PSBTInput& input = psbtx.inputs[i];\n             Coin newcoin;\n \n-            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n+            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, nullptr, 1) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n                 success = false;\n                 break;\n             } else {"
      },
      {
        "sha": "f21b3909150925f8a80a0db0366585f412159621",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -40,7 +40,6 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     { // cs_main scope\n     assert(node.chainman);\n     LOCK(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     // If the transaction is already confirmed in the chain, don't do anything\n     // and return early.\n     CCoinsViewCache &view = node.chainman->ActiveChainstate().CoinsTip();"
      },
      {
        "sha": "8ede7b99745ba56ee8b1f111516e8e4de78e0525",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -18,6 +18,7 @@\n static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n+static const std::string OUTPUT_TYPE_STRING_BECH32M = \"bech32m\";\n \n bool ParseOutputType(const std::string& type, OutputType& output_type)\n {\n@@ -30,6 +31,9 @@ bool ParseOutputType(const std::string& type, OutputType& output_type)\n     } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n         output_type = OutputType::BECH32;\n         return true;\n+    } else if (type == OUTPUT_TYPE_STRING_BECH32M) {\n+        output_type = OutputType::BECH32M;\n+        return true;\n     }\n     return false;\n }\n@@ -40,6 +44,7 @@ const std::string& FormatOutputType(OutputType type)\n     case OutputType::LEGACY: return OUTPUT_TYPE_STRING_LEGACY;\n     case OutputType::P2SH_SEGWIT: return OUTPUT_TYPE_STRING_P2SH_SEGWIT;\n     case OutputType::BECH32: return OUTPUT_TYPE_STRING_BECH32;\n+    case OutputType::BECH32M: return OUTPUT_TYPE_STRING_BECH32M;\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -59,6 +64,7 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType type)\n             return witdest;\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should never be used with BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -98,6 +104,23 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n             return ScriptHash(witprog);\n         }\n     }\n+    case OutputType::BECH32M: {} // This function should not be used for BECH32M, so let it assert\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n+\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest) {\n+    if (std::holds_alternative<PKHash>(dest) ||\n+        std::holds_alternative<ScriptHash>(dest)) {\n+        return OutputType::LEGACY;\n+    }\n+    if (std::holds_alternative<WitnessV0KeyHash>(dest) ||\n+        std::holds_alternative<WitnessV0ScriptHash>(dest)) {\n+        return OutputType::BECH32;\n+    }\n+    if (std::holds_alternative<WitnessV1Taproot>(dest) ||\n+        std::holds_alternative<WitnessUnknown>(dest)) {\n+        return OutputType::BECH32M;\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "2b83235cd018ee127d4898a34a31abff4d59d67c",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -18,12 +18,14 @@ enum class OutputType {\n     LEGACY,\n     P2SH_SEGWIT,\n     BECH32,\n+    BECH32M,\n };\n \n static constexpr auto OUTPUT_TYPES = std::array{\n     OutputType::LEGACY,\n     OutputType::P2SH_SEGWIT,\n     OutputType::BECH32,\n+    OutputType::BECH32M,\n };\n \n [[nodiscard]] bool ParseOutputType(const std::string& str, OutputType& output_type);\n@@ -45,4 +47,7 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n  */\n CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n+/** Get the OutputType for a CTxDestination */\n+std::optional<OutputType> OutputTypeFromDestination(const CTxDestination& dest);\n+\n #endif // BITCOIN_OUTPUTTYPE_H"
      },
      {
        "sha": "cfd05399655d07f93494b959463d83f7d471df0d",
        "filename": "src/policy/packages.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/policy/packages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/policy/packages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <policy/packages.h>\n+#include <primitives/transaction.h>\n+#include <uint256.h>\n+#include <util/hasher.h>\n+\n+#include <numeric>\n+#include <unordered_set>\n+\n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+    }\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+    std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                // The parent is a subsequent transaction in the package.\n+                return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+            }\n+        }\n+        later_txids.erase(tx->GetHash());\n+    }\n+\n+    // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                // This input is also present in another tx in the package.\n+                return state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+            }\n+        }\n+        // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n+        // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n+        // and we want to report that from CheckTransaction instead.\n+        std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n+                       [](const auto& input) { return input.prevout; });\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "6b7ac3e450ebcfe58d18c0bf070e061030ad8199",
        "filename": "src/policy/packages.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/policy/packages.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/policy/packages.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_POLICY_PACKAGES_H\n \n #include <consensus/validation.h>\n+#include <policy/policy.h>\n #include <primitives/transaction.h>\n \n #include <vector>\n@@ -14,6 +15,7 @@\n static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n /** Default maximum total virtual size of transactions in a package in KvB. */\n static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n  * transactions is invalid or the package itself violates our rules.\n@@ -31,4 +33,12 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n+/** Context-free package policy checks:\n+ * 1. The number of transactions cannot exceed MAX_PACKAGE_COUNT.\n+ * 2. The total virtual size cannot exceed MAX_PACKAGE_SIZE.\n+ * 3. If any dependencies exist between transactions, parents must appear before children.\n+ * 4. Transactions cannot conflict, i.e., spend the same inputs.\n+ */\n+bool CheckPackage(const Package& txns, PackageValidationState& state);\n+\n #endif // BITCOIN_POLICY_PACKAGES_H"
      },
      {
        "sha": "f9248899dc5e8fba30c7f1d0832501cd3c9aa2c8",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 72,
        "deletions": 11,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -13,6 +13,7 @@\n #include <netaddress.h>\n #include <primitives/transaction.h>\n #include <serialize.h>\n+#include <streams.h>\n #include <uint256.h>\n #include <version.h>\n \n@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)\n+    {\n+        return a.nTime == b.nTime &&\n+               a.nServices == b.nServices &&\n+               static_cast<const CService&>(a) == static_cast<const CService&>(b);\n+    }\n };\n \n /** getdata message type flags */"
      },
      {
        "sha": "5445bc8aa11fd39ca311649e8c8a06c0397a6d35",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 5,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -59,12 +59,15 @@ bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput\n \n bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const\n {\n-    PSBTInput input = inputs[input_index];\n+    const PSBTInput& input = inputs[input_index];\n     uint32_t prevout_index = tx->vin[input_index].prevout.n;\n     if (input.non_witness_utxo) {\n         if (prevout_index >= input.non_witness_utxo->vout.size()) {\n             return false;\n         }\n+        if (input.non_witness_utxo->GetHash() != tx->vin[input_index].prevout.hash) {\n+            return false;\n+        }\n         utxo = input.non_witness_utxo->vout[prevout_index];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;\n@@ -227,7 +230,24 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n     psbt_out.FromSignatureData(sigdata);\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)\n+PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction& psbt)\n+{\n+    const CMutableTransaction& tx = *psbt.tx;\n+    bool have_all_spent_outputs = true;\n+    std::vector<CTxOut> utxos(tx.vin.size());\n+    for (size_t idx = 0; idx < tx.vin.size(); ++idx) {\n+        if (!psbt.GetInputUTXO(utxos[idx], idx)) have_all_spent_outputs = false;\n+    }\n+    PrecomputedTransactionData txdata;\n+    if (have_all_spent_outputs) {\n+        txdata.Init(tx, std::move(utxos), true);\n+    } else {\n+        txdata.Init(tx, {}, true);\n+    }\n+    return txdata;\n+}\n+\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash, SignatureData* out_sigdata)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n     const CMutableTransaction& tx = *psbt.tx;\n@@ -267,10 +287,10 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n \n     sigdata.witness = false;\n     bool sig_complete;\n-    if (use_dummy) {\n+    if (txdata == nullptr) {\n         sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n     } else {\n-        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, txdata, sighash);\n         sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n     }\n     // Verify that a witness signature was produced in case one was required.\n@@ -302,8 +322,9 @@ bool FinalizePSBT(PartiallySignedTransaction& psbtx)\n     //   PartiallySignedTransaction did not understand them), this will combine them into a final\n     //   script.\n     bool complete = true;\n+    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, SIGHASH_ALL);\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, SIGHASH_ALL);\n     }\n \n     return complete;"
      },
      {
        "sha": "f6b82b43de64af8fe56b47ab6fd60651061b1cb7",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -567,11 +567,18 @@ enum class PSBTRole {\n \n std::string PSBTRoleName(PSBTRole role);\n \n+/** Compute a PrecomputedTransactionData object from a psbt. */\n+PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction& psbt);\n+\n /** Checks whether a PSBTInput is already signed. */\n bool PSBTInputSigned(const PSBTInput& input);\n \n-/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed.\n+ *\n+ * txdata should be the output of PrecomputePSBTData (which can be shared across\n+ * multiple SignPSBTInput calls). If it is nullptr, a dummy signature will be created.\n+ **/\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr);\n \n /** Counts the unsigned inputs of a PSBT. */\n size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction& psbt);"
      },
      {
        "sha": "175a39b8053ec951f33ef9d15c4ffb4ba7fa1791",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 3,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -180,6 +180,12 @@ XOnlyPubKey::XOnlyPubKey(Span<const unsigned char> bytes)\n     std::copy(bytes.begin(), bytes.end(), m_keydata.begin());\n }\n \n+bool XOnlyPubKey::IsFullyValid() const\n+{\n+    secp256k1_xonly_pubkey pubkey;\n+    return secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &pubkey, m_keydata.data());\n+}\n+\n bool XOnlyPubKey::VerifySchnorr(const uint256& msg, Span<const unsigned char> sigbytes) const\n {\n     assert(sigbytes.size() == 64);\n@@ -188,13 +194,45 @@ bool XOnlyPubKey::VerifySchnorr(const uint256& msg, Span<const unsigned char> si\n     return secp256k1_schnorrsig_verify(secp256k1_context_verify, sigbytes.data(), msg.begin(), &pubkey);\n }\n \n-bool XOnlyPubKey::CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, bool parity) const\n+static const CHashWriter HASHER_TAPTWEAK = TaggedHash(\"TapTweak\");\n+\n+uint256 XOnlyPubKey::ComputeTapTweakHash(const uint256* merkle_root) const\n+{\n+    if (merkle_root == nullptr) {\n+        // We have no scripts. The actual tweak does not matter, but follow BIP341 here to\n+        // allow for reproducible tweaking.\n+        return (CHashWriter(HASHER_TAPTWEAK) << m_keydata).GetSHA256();\n+    } else {\n+        return (CHashWriter(HASHER_TAPTWEAK) << m_keydata << *merkle_root).GetSHA256();\n+    }\n+}\n+\n+bool XOnlyPubKey::CheckTapTweak(const XOnlyPubKey& internal, const uint256& merkle_root, bool parity) const\n+{\n+    secp256k1_xonly_pubkey internal_key;\n+    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &internal_key, internal.data())) return false;\n+    uint256 tweak = internal.ComputeTapTweakHash(&merkle_root);\n+    return secp256k1_xonly_pubkey_tweak_add_check(secp256k1_context_verify, m_keydata.begin(), parity, &internal_key, tweak.begin());\n+}\n+\n+std::optional<std::pair<XOnlyPubKey, bool>> XOnlyPubKey::CreateTapTweak(const uint256* merkle_root) const\n {\n     secp256k1_xonly_pubkey base_point;\n-    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &base_point, base.data())) return false;\n-    return secp256k1_xonly_pubkey_tweak_add_check(secp256k1_context_verify, m_keydata.begin(), parity, &base_point, hash.begin());\n+    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_verify, &base_point, data())) return std::nullopt;\n+    secp256k1_pubkey out;\n+    uint256 tweak = ComputeTapTweakHash(merkle_root);\n+    if (!secp256k1_xonly_pubkey_tweak_add(secp256k1_context_verify, &out, &base_point, tweak.data())) return std::nullopt;\n+    int parity = -1;\n+    std::pair<XOnlyPubKey, bool> ret;\n+    secp256k1_xonly_pubkey out_xonly;\n+    if (!secp256k1_xonly_pubkey_from_pubkey(secp256k1_context_verify, &out_xonly, &parity, &out)) return std::nullopt;\n+    secp256k1_xonly_pubkey_serialize(secp256k1_context_verify, ret.first.begin(), &out_xonly);\n+    assert(parity == 0 || parity == 1);\n+    ret.second = parity;\n+    return ret;\n }\n \n+\n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n@@ -335,3 +373,7 @@ ECCVerifyHandle::~ECCVerifyHandle()\n         secp256k1_context_verify = nullptr;\n     }\n }\n+\n+const secp256k1_context* GetVerifyContext() {\n+    return secp256k1_context_verify;\n+}"
      },
      {
        "sha": "eec34a89c2a3f303cfd34517b9b84d7f910f4688",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -13,6 +13,7 @@\n #include <uint256.h>\n \n #include <cstring>\n+#include <optional>\n #include <vector>\n \n const unsigned int BIP32_EXTKEY_SIZE = 74;\n@@ -222,19 +223,60 @@ class XOnlyPubKey\n     uint256 m_keydata;\n \n public:\n+    /** Construct an empty x-only pubkey. */\n+    XOnlyPubKey() = default;\n+\n+    XOnlyPubKey(const XOnlyPubKey&) = default;\n+    XOnlyPubKey& operator=(const XOnlyPubKey&) = default;\n+\n+    /** Determine if this pubkey is fully valid. This is true for approximately 50% of all\n+     *  possible 32-byte arrays. If false, VerifySchnorr and CreatePayToContract will always\n+     *  fail. */\n+    bool IsFullyValid() const;\n+\n+    /** Test whether this is the 0 key (the result of default construction). This implies\n+     *  !IsFullyValid(). */\n+    bool IsNull() const { return m_keydata.IsNull(); }\n+\n     /** Construct an x-only pubkey from exactly 32 bytes. */\n     explicit XOnlyPubKey(Span<const unsigned char> bytes);\n \n+    /** Construct an x-only pubkey from a normal pubkey. */\n+    explicit XOnlyPubKey(const CPubKey& pubkey) : XOnlyPubKey(Span<const unsigned char>(pubkey.begin() + 1, pubkey.begin() + 33)) {}\n+\n     /** Verify a Schnorr signature against this public key.\n      *\n      * sigbytes must be exactly 64 bytes.\n      */\n     bool VerifySchnorr(const uint256& msg, Span<const unsigned char> sigbytes) const;\n-    bool CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, bool parity) const;\n+\n+    /** Compute the Taproot tweak as specified in BIP341, with *this as internal\n+     * key:\n+     *  - if merkle_root == nullptr: H_TapTweak(xonly_pubkey)\n+     *  - otherwise:                 H_TapTweak(xonly_pubkey || *merkle_root)\n+     *\n+     * Note that the behavior of this function with merkle_root != nullptr is\n+     * consensus critical.\n+     */\n+    uint256 ComputeTapTweakHash(const uint256* merkle_root) const;\n+\n+    /** Verify that this is a Taproot tweaked output point, against a specified internal key,\n+     *  Merkle root, and parity. */\n+    bool CheckTapTweak(const XOnlyPubKey& internal, const uint256& merkle_root, bool parity) const;\n+\n+    /** Construct a Taproot tweaked output point with this point as internal key. */\n+    std::optional<std::pair<XOnlyPubKey, bool>> CreateTapTweak(const uint256* merkle_root) const;\n \n     const unsigned char& operator[](int pos) const { return *(m_keydata.begin() + pos); }\n     const unsigned char* data() const { return m_keydata.begin(); }\n-    size_t size() const { return m_keydata.size(); }\n+    static constexpr size_t size() { return decltype(m_keydata)::size(); }\n+    const unsigned char* begin() const { return m_keydata.begin(); }\n+    const unsigned char* end() const { return m_keydata.end(); }\n+    unsigned char* begin() { return m_keydata.begin(); }\n+    unsigned char* end() { return m_keydata.end(); }\n+    bool operator==(const XOnlyPubKey& other) const { return m_keydata == other.m_keydata; }\n+    bool operator!=(const XOnlyPubKey& other) const { return m_keydata != other.m_keydata; }\n+    bool operator<(const XOnlyPubKey& other) const { return m_keydata < other.m_keydata; }\n };\n \n struct CExtPubKey {\n@@ -274,4 +316,10 @@ class ECCVerifyHandle\n     ~ECCVerifyHandle();\n };\n \n+typedef struct secp256k1_context_struct secp256k1_context;\n+\n+/** Access to the internal secp256k1 context used for verification. Only intended to be used\n+ *  by key.cpp. */\n+const secp256k1_context* GetVerifyContext();\n+\n #endif // BITCOIN_PUBKEY_H"
      },
      {
        "sha": "c31f0aceeaa0b48c09e5fff4da3a3c6f9529df8f",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -114,12 +114,12 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n \n     // Build context menu\n     contextMenu = new QMenu(this);\n-    contextMenu->addAction(tr(\"Copy Address\"), this, &AddressBookPage::on_copyAddress_clicked);\n-    contextMenu->addAction(tr(\"Copy Label\"), this, &AddressBookPage::onCopyLabelAction);\n-    contextMenu->addAction(tr(\"Edit\"), this, &AddressBookPage::onEditAction);\n+    contextMenu->addAction(tr(\"&Copy Address\"), this, &AddressBookPage::on_copyAddress_clicked);\n+    contextMenu->addAction(tr(\"Copy &Label\"), this, &AddressBookPage::onCopyLabelAction);\n+    contextMenu->addAction(tr(\"&Edit\"), this, &AddressBookPage::onEditAction);\n \n     if (tab == SendingTab) {\n-        contextMenu->addAction(tr(\"Delete\"), this, &AddressBookPage::on_deleteAddress_clicked);\n+        contextMenu->addAction(tr(\"&Delete\"), this, &AddressBookPage::on_deleteAddress_clicked);\n     }\n \n     connect(ui->tableView, &QWidget::customContextMenuRequested, this, &AddressBookPage::contextualMenu);"
      },
      {
        "sha": "442c813a5a60abb9fa231462df6a2aaf272bf567",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -60,6 +60,7 @@\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)\n Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin);\n+Q_IMPORT_PLUGIN(QWindowsVistaStylePlugin);\n #elif defined(QT_QPA_PLATFORM_COCOA)\n Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n Q_IMPORT_PLUGIN(QMacStylePlugin);\n@@ -489,7 +490,8 @@ int GuiMain(int argc, char* argv[])\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n-    SetupServerArgs(node_context);\n+    node_context.args = &gArgs;\n+    SetupServerArgs(gArgs);\n     SetupUIArgs(gArgs);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {"
      },
      {
        "sha": "f8aeb016596c86138572df97b1a424825dc3974c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 10,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -105,6 +105,11 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n     {\n         /** Create wallet frame and make it the central widget */\n         walletFrame = new WalletFrame(_platformStyle, this);\n+        connect(walletFrame, &WalletFrame::createWalletButtonClicked, [this] {\n+            auto activity = new CreateWalletActivity(getWalletController(), this);\n+            connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n+            activity->create();\n+        });\n         setCentralWidget(walletFrame);\n     } else\n #endif // ENABLE_WALLET\n@@ -206,11 +211,6 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n \n     connect(labelBlocksIcon, &GUIUtil::ClickableLabel::clicked, this, &BitcoinGUI::showModalOverlay);\n     connect(progressBar, &GUIUtil::ClickableProgressBar::clicked, this, &BitcoinGUI::showModalOverlay);\n-#ifdef ENABLE_WALLET\n-    if(enableWallet) {\n-        connect(walletFrame, &WalletFrame::requestedSyncWarningInfo, this, &BitcoinGUI::showModalOverlay);\n-    }\n-#endif\n \n #ifdef Q_OS_MAC\n     m_app_nap_inhibitor = new CAppNapInhibitor;\n@@ -671,7 +671,10 @@ WalletController* BitcoinGUI::getWalletController()\n void BitcoinGUI::addWallet(WalletModel* walletModel)\n {\n     if (!walletFrame) return;\n-    if (!walletFrame->addWallet(walletModel)) return;\n+\n+    WalletView* wallet_view = new WalletView(platformStyle, walletFrame);\n+    if (!walletFrame->addWallet(walletModel, wallet_view)) return;\n+\n     rpcConsole->addWallet(walletModel);\n     if (m_wallet_selector->count() == 0) {\n         setWalletActionsEnabled(true);\n@@ -681,6 +684,18 @@ void BitcoinGUI::addWallet(WalletModel* walletModel)\n     }\n     const QString display_name = walletModel->getDisplayName();\n     m_wallet_selector->addItem(display_name, QVariant::fromValue(walletModel));\n+\n+    connect(wallet_view, &WalletView::outOfSyncWarningClicked, this, &BitcoinGUI::showModalOverlay);\n+    connect(wallet_view, &WalletView::transactionClicked, this, &BitcoinGUI::gotoHistoryPage);\n+    connect(wallet_view, &WalletView::coinsSent, this, &BitcoinGUI::gotoHistoryPage);\n+    connect(wallet_view, &WalletView::message, [this](const QString& title, const QString& message, unsigned int style) {\n+        this->message(title, message, style);\n+    });\n+    connect(wallet_view, &WalletView::encryptionStatusChanged, this, &BitcoinGUI::updateWalletStatus);\n+    connect(wallet_view, &WalletView::incomingTransaction, this, &BitcoinGUI::incomingTransaction);\n+    connect(wallet_view, &WalletView::hdEnabledStatusChanged, this, &BitcoinGUI::updateWalletStatus);\n+    connect(this, &BitcoinGUI::setPrivacy, wallet_view, &WalletView::setPrivacy);\n+    wallet_view->setPrivacy(isPrivacyModeActivated());\n }\n \n void BitcoinGUI::removeWallet(WalletModel* walletModel)\n@@ -1158,14 +1173,12 @@ void BitcoinGUI::message(const QString& title, QString message, unsigned int sty\n \n void BitcoinGUI::changeEvent(QEvent *e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         overviewAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/overview\")));\n         sendCoinsAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/send\")));\n         receiveCoinsAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/receiving_addresses\")));\n         historyAction->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/history\")));\n     }\n-#endif\n \n     QMainWindow::changeEvent(e);\n \n@@ -1496,14 +1509,14 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n \n void UnitDisplayStatusBarControl::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         QString style = QString(\"QLabel { color : %1 }\").arg(m_platform_style->SingleColor().name());\n         if (style != styleSheet()) {\n             setStyleSheet(style);\n         }\n     }\n-#endif\n+\n+    QLabel::changeEvent(e);\n }\n \n /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */"
      },
      {
        "sha": "d2d4079ea9748de34f715279d66faebeb9bb4f2f",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -42,6 +42,9 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Dumpfile version is not supported. This version of bitcoin-wallet \"\n \"only supports version 1 dumpfiles. Got dumpfile with version %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \"\n+\"\\\"bech32\\\" address types\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Error: Listening for incoming connections failed (listen returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -\"\n@@ -103,9 +106,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Total length of network version string (%i) exceeds maximum length (%i). \"\n \"Reduce the number or size of uacomments.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Transaction needs a change address, but we can't generate it. Please call \"\n-\"keypoolrefill first.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Unable to replay blocks. You will need to rebuild the database using -\"\n \"reindex-chainstate.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -160,6 +160,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Got key that was not hex: %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Got value that was not hex: %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Keypool ran out, please call keypoolrefill first\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Missing checksum\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: No %s addresses available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unable to parse version %u as a uint32_t\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unable to write record to new wallet\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n@@ -216,6 +217,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amount too small\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction amounts must not be negative\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction has too long of a mempool chain\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction must have at least one recipient\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction needs a change address, but we can't generate it. %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Transaction too large\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer. %s is probably already running.\"),\n@@ -228,12 +230,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown -blockfilterindex value %s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown address type '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown change type '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown new rules activated (versionbit %i)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported logging category %s=%s.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading UTXO database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrading txindex database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"User Agent comment (%s) contains unsafe characters.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks\u2026\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet(s)\u2026\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart %s to complete\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: unknown new rules activated (versionbit %i)\"),\n };"
      },
      {
        "sha": "d2a9365890cfacc491262a94e2f21bdd4e447022",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -52,13 +52,13 @@ CoinControlDialog::CoinControlDialog(CCoinControl& coin_control, WalletModel* _m\n \n     // context menu\n     contextMenu = new QMenu(this);\n-    contextMenu->addAction(tr(\"Copy address\"), this, &CoinControlDialog::copyAddress);\n-    contextMenu->addAction(tr(\"Copy label\"), this, &CoinControlDialog::copyLabel);\n-    contextMenu->addAction(tr(\"Copy amount\"), this, &CoinControlDialog::copyAmount);\n-    copyTransactionHashAction = contextMenu->addAction(tr(\"Copy transaction ID\"), this, &CoinControlDialog::copyTransactionHash);\n+    contextMenu->addAction(tr(\"&Copy address\"), this, &CoinControlDialog::copyAddress);\n+    contextMenu->addAction(tr(\"Copy &label\"), this, &CoinControlDialog::copyLabel);\n+    contextMenu->addAction(tr(\"Copy &amount\"), this, &CoinControlDialog::copyAmount);\n+    copyTransactionHashAction = contextMenu->addAction(tr(\"Copy transaction &ID\"), this, &CoinControlDialog::copyTransactionHash);\n     contextMenu->addSeparator();\n-    lockAction = contextMenu->addAction(tr(\"Lock unspent\"), this, &CoinControlDialog::lockCoin);\n-    unlockAction = contextMenu->addAction(tr(\"Unlock unspent\"), this, &CoinControlDialog::unlockCoin);\n+    lockAction = contextMenu->addAction(tr(\"L&ock unspent\"), this, &CoinControlDialog::lockCoin);\n+    unlockAction = contextMenu->addAction(tr(\"&Unlock unspent\"), this, &CoinControlDialog::unlockCoin);\n     connect(ui->treeWidget, &QWidget::customContextMenuRequested, this, &CoinControlDialog::showMenu);\n \n     // clipboard actions\n@@ -564,11 +564,11 @@ void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *\n \n void CoinControlDialog::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         updateView();\n     }\n-#endif\n+\n+    QDialog::changeEvent(e);\n }\n \n void CoinControlDialog::updateView()"
      },
      {
        "sha": "dc24bbc6a6979f153a7f84be72b30ed774a236e8",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 2,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,6 +6,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <external_signer.h>\n #include <qt/createwalletdialog.h>\n #include <qt/forms/ui_createwalletdialog.h>\n \n@@ -27,14 +28,40 @@ CreateWalletDialog::CreateWalletDialog(QWidget* parent) :\n     });\n \n     connect(ui->encrypt_wallet_checkbox, &QCheckBox::toggled, [this](bool checked) {\n-        // Disable the disable_privkeys_checkbox when isEncryptWalletChecked is\n+        // Disable the disable_privkeys_checkbox and external_signer_checkbox when isEncryptWalletChecked is\n         // set to true, enable it when isEncryptWalletChecked is false.\n         ui->disable_privkeys_checkbox->setEnabled(!checked);\n-\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        ui->external_signer_checkbox->setEnabled(!checked);\n+#endif\n         // When the disable_privkeys_checkbox is disabled, uncheck it.\n         if (!ui->disable_privkeys_checkbox->isEnabled()) {\n             ui->disable_privkeys_checkbox->setChecked(false);\n         }\n+\n+        // When the external_signer_checkbox box is disabled, uncheck it.\n+        if (!ui->external_signer_checkbox->isEnabled()) {\n+            ui->external_signer_checkbox->setChecked(false);\n+        }\n+\n+    });\n+\n+    connect(ui->external_signer_checkbox, &QCheckBox::toggled, [this](bool checked) {\n+        ui->encrypt_wallet_checkbox->setEnabled(!checked);\n+        ui->blank_wallet_checkbox->setEnabled(!checked);\n+        ui->disable_privkeys_checkbox->setEnabled(!checked);\n+        ui->descriptor_checkbox->setEnabled(!checked);\n+\n+        // The external signer checkbox is only enabled when a device is detected.\n+        // In that case it is checked by default. Toggling it restores the other\n+        // options to their default.\n+        ui->descriptor_checkbox->setChecked(checked);\n+        ui->encrypt_wallet_checkbox->setChecked(false);\n+        ui->disable_privkeys_checkbox->setChecked(checked);\n+        // The blank check box is ambiguous. This flag is always true for a\n+        // watch-only wallet, even though we immedidately fetch keys from the\n+        // external signer.\n+        ui->blank_wallet_checkbox->setChecked(checked);\n     });\n \n     connect(ui->disable_privkeys_checkbox, &QCheckBox::toggled, [this](bool checked) {\n@@ -63,18 +90,49 @@ CreateWalletDialog::CreateWalletDialog(QWidget* parent) :\n         ui->descriptor_checkbox->setToolTip(tr(\"Compiled without sqlite support (required for descriptor wallets)\"));\n         ui->descriptor_checkbox->setEnabled(false);\n         ui->descriptor_checkbox->setChecked(false);\n+        ui->external_signer_checkbox->setEnabled(false);\n+        ui->external_signer_checkbox->setChecked(false);\n #endif\n+\n #ifndef USE_BDB\n         ui->descriptor_checkbox->setEnabled(false);\n         ui->descriptor_checkbox->setChecked(true);\n #endif\n+\n+#ifndef ENABLE_EXTERNAL_SIGNER\n+        //: \"External signing\" means using devices such as hardware wallets.\n+        ui->external_signer_checkbox->setToolTip(tr(\"Compiled without external signing support (required for external signing)\"));\n+        ui->external_signer_checkbox->setEnabled(false);\n+        ui->external_signer_checkbox->setChecked(false);\n+#endif\n+\n }\n \n CreateWalletDialog::~CreateWalletDialog()\n {\n     delete ui;\n }\n \n+void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n+{\n+    if (!signers.empty()) {\n+        ui->external_signer_checkbox->setEnabled(true);\n+        ui->external_signer_checkbox->setChecked(true);\n+        ui->encrypt_wallet_checkbox->setEnabled(false);\n+        ui->encrypt_wallet_checkbox->setChecked(false);\n+        // The order matters, because connect() is called when toggling a checkbox:\n+        ui->blank_wallet_checkbox->setEnabled(false);\n+        ui->blank_wallet_checkbox->setChecked(false);\n+        ui->disable_privkeys_checkbox->setEnabled(false);\n+        ui->disable_privkeys_checkbox->setChecked(true);\n+        const std::string label = signers[0].m_name;\n+        ui->wallet_name_line_edit->setText(QString::fromStdString(label));\n+        ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);\n+    } else {\n+        ui->external_signer_checkbox->setEnabled(false);\n+    }\n+}\n+\n QString CreateWalletDialog::walletName() const\n {\n     return ui->wallet_name_line_edit->text();\n@@ -99,3 +157,8 @@ bool CreateWalletDialog::isDescriptorWalletChecked() const\n {\n     return ui->descriptor_checkbox->isChecked();\n }\n+\n+bool CreateWalletDialog::isExternalSignerChecked() const\n+{\n+    return ui->external_signer_checkbox->isChecked();\n+}"
      },
      {
        "sha": "25ddf97585094697264dc2c51277aa9be95a96f4",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <QDialog>\n \n+class ExternalSigner;\n class WalletModel;\n \n namespace Ui {\n@@ -23,11 +24,14 @@ class CreateWalletDialog : public QDialog\n     explicit CreateWalletDialog(QWidget* parent);\n     virtual ~CreateWalletDialog();\n \n+    void setSigners(const std::vector<ExternalSigner>& signers);\n+\n     QString walletName() const;\n     bool isEncryptWalletChecked() const;\n     bool isDisablePrivateKeysChecked() const;\n     bool isMakeBlankWalletChecked() const;\n     bool isDescriptorWalletChecked() const;\n+    bool isExternalSignerChecked() const;\n \n private:\n     Ui::CreateWalletDialog *ui;"
      },
      {
        "sha": "b11fb026b0f05ccf63a1dab900160221ad2f1602",
        "filename": "src/qt/forms/createwalletdialog.ui",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/createwalletdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/createwalletdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/createwalletdialog.ui?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -109,6 +109,16 @@\n         </property>\n        </widget>\n       </item>\n+      <item>\n+       <widget class=\"QCheckBox\" name=\"external_signer_checkbox\">\n+        <property name=\"toolTip\">\n+         <string>Use an external signing device such as a hardware wallet. Configure the external signer script in wallet preferences first.</string>\n+        </property>\n+        <property name=\"text\">\n+         <string>External signer</string>\n+        </property>\n+       </widget>\n+      </item>\n      </layout>\n     </widget>\n    </item>\n@@ -143,6 +153,7 @@\n   <tabstop>disable_privkeys_checkbox</tabstop>\n   <tabstop>blank_wallet_checkbox</tabstop>\n   <tabstop>descriptor_checkbox</tabstop>\n+  <tabstop>external_signer_checkbox</tabstop>\n  </tabstops>\n  <resources/>\n  <connections>"
      },
      {
        "sha": "15e0d3fad992d5bd3150e50540e1c9f647fe21c9",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 13,
        "deletions": 43,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -470,13 +470,7 @@\n           </spacer>\n          </item>\n          <item>\n-          <widget class=\"QPushButton\" name=\"fontSmallerButton\">\n-           <property name=\"maximumSize\">\n-            <size>\n-             <width>24</width>\n-             <height>24</height>\n-            </size>\n-           </property>\n+          <widget class=\"QToolButton\" name=\"fontSmallerButton\">\n            <property name=\"toolTip\">\n             <string>Decrease font size</string>\n            </property>\n@@ -489,26 +483,14 @@\n            </property>\n            <property name=\"iconSize\">\n             <size>\n-             <width>24</width>\n-             <height>16</height>\n+             <width>22</width>\n+             <height>22</height>\n             </size>\n            </property>\n-           <property name=\"autoDefault\">\n-            <bool>false</bool>\n-           </property>\n-           <property name=\"flat\">\n-            <bool>true</bool>\n-           </property>\n           </widget>\n          </item>\n          <item>\n-          <widget class=\"QPushButton\" name=\"fontBiggerButton\">\n-           <property name=\"maximumSize\">\n-            <size>\n-             <width>24</width>\n-             <height>24</height>\n-            </size>\n-           </property>\n+          <widget class=\"QToolButton\" name=\"fontBiggerButton\">\n            <property name=\"toolTip\">\n             <string>Increase font size</string>\n            </property>\n@@ -521,26 +503,14 @@\n            </property>\n            <property name=\"iconSize\">\n             <size>\n-             <width>24</width>\n-             <height>16</height>\n+             <width>22</width>\n+             <height>22</height>\n             </size>\n            </property>\n-           <property name=\"autoDefault\">\n-            <bool>false</bool>\n-           </property>\n-           <property name=\"flat\">\n-            <bool>true</bool>\n-           </property>\n           </widget>\n          </item>\n          <item>\n-          <widget class=\"QPushButton\" name=\"clearButton\">\n-           <property name=\"maximumSize\">\n-            <size>\n-             <width>24</width>\n-             <height>24</height>\n-            </size>\n-           </property>\n+          <widget class=\"QToolButton\" name=\"clearButton\">\n            <property name=\"toolTip\">\n             <string>Clear console</string>\n            </property>\n@@ -554,15 +524,15 @@\n             <iconset resource=\"../bitcoin.qrc\">\n              <normaloff>:/icons/remove</normaloff>:/icons/remove</iconset>\n            </property>\n+           <property name=\"iconSize\">\n+            <size>\n+             <width>22</width>\n+             <height>22</height>\n+            </size>\n+           </property>\n            <property name=\"shortcut\">\n             <string notr=\"true\">Ctrl+L</string>\n            </property>\n-           <property name=\"autoDefault\">\n-            <bool>false</bool>\n-           </property>\n-           <property name=\"flat\">\n-            <bool>true</bool>\n-           </property>\n           </widget>\n          </item>\n         </layout>"
      },
      {
        "sha": "bd72328c021a753b61ce8b00ede6d7fb7ce33d5a",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -229,6 +229,36 @@\n          </layout>\n         </widget>\n        </item>\n+       <item>\n+        <widget class=\"QGroupBox\" name=\"groupBoxHww\">\n+         <property name=\"title\">\n+          <string>External Signer (e.g. hardware wallet)</string>\n+         </property>\n+         <layout class=\"QVBoxLayout\" name=\"verticalLayoutHww\">\n+           <item>\n+            <layout class=\"QHBoxLayout\" name=\"horizontalLayoutHww\">\n+             <item>\n+              <widget class=\"QLabel\" name=\"externalSignerPathLabel\">\n+               <property name=\"text\">\n+                <string>&amp;External signer script path</string>\n+               </property>\n+               <property name=\"buddy\">\n+                <cstring>externalSignerPath</cstring>\n+               </property>\n+              </widget>\n+             </item>\n+             <item>\n+              <widget class=\"QLineEdit\" name=\"externalSignerPath\">\n+                <property name=\"toolTip\">\n+                  <string>Full path to a Bitcoin Core compatible script (e.g. C:\\Downloads\\hwi.exe or /Users/you/Downloads/hwi.py). Beware: malware can steal your coins!</string>\n+                </property>\n+              </widget>\n+             </item>\n+            </layout>\n+           </item>\n+         </layout>\n+        </widget>\n+       </item>\n        <item>\n         <spacer name=\"verticalSpacer_Wallet\">\n          <property name=\"orientation\">"
      },
      {
        "sha": "70a7cf71de9b3731110225752dba20e732dde4e4",
        "filename": "src/qt/forms/receiverequestdialog.ui",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/receiverequestdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/forms/receiverequestdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receiverequestdialog.ui?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -254,6 +254,19 @@\n        </property>\n       </widget>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"btnVerify\">\n+       <property name=\"text\">\n+        <string>&amp;Verify</string>\n+       </property>\n+       <property name=\"toolTip\">\n+        <string>Verify this address on e.g. a hardware wallet screen</string>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QPushButton\" name=\"btnSaveAs\">\n        <property name=\"text\">"
      },
      {
        "sha": "ecdfce2f5a4034559c49f156ba26724c510d2b11",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -809,11 +809,10 @@ void ThemedLabel::setThemedPixmap(const QString& image_filename, int width, int\n \n void ThemedLabel::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         updateThemedPixmap();\n     }\n-#endif\n+\n     QLabel::changeEvent(e);\n }\n "
      },
      {
        "sha": "7026f49c016de69dcefe13755f99641c2966059e",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 240,
        "deletions": 134,
        "changes": 374,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -55,11 +55,12 @@\n     </message>\n     <message>\n         <location line=\"-30\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"+122\"/>\n         <source>&amp;Delete</source>\n         <translation>&amp;Delete</translation>\n     </message>\n     <message>\n-        <location filename=\"../addressbookpage.cpp\" line=\"+84\"/>\n+        <location filename=\"../addressbookpage.cpp\" line=\"-38\"/>\n         <source>Choose the address to send coins to</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -96,26 +97,21 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n     </message>\n     <message>\n         <location line=\"+8\"/>\n-        <source>Copy Address</source>\n+        <source>&amp;Copy Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy Label</source>\n+        <source>Copy &amp;Label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Edit</source>\n+        <source>&amp;Edit</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n-        <source>Delete</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+161\"/>\n+        <location line=\"+164\"/>\n         <source>Export Address List</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -317,7 +313,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>BitcoinApplication</name>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+420\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+421\"/>\n         <source>Runaway exception</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -405,18 +401,18 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+358\"/>\n+        <location line=\"+373\"/>\n         <source>Network activity disabled.</source>\n         <extracomment>A substring of the tooltip.</extracomment>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+426\"/>\n+        <location line=\"+424\"/>\n         <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1096\"/>\n+        <location line=\"-1109\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -546,7 +542,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Tabs toolbar</translation>\n     </message>\n     <message>\n-        <location line=\"+422\"/>\n+        <location line=\"+437\"/>\n         <source>Syncing Headers (%1%)\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -576,7 +572,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-766\"/>\n+        <location line=\"-781\"/>\n         <source>Request payments (generates QR codes and bitcoin: URIs)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -596,7 +592,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+678\"/>\n+        <location line=\"+693\"/>\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation>\n             <numerusform>Processed %n block of transaction history.</numerusform>\n@@ -644,7 +640,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Up to date</translation>\n     </message>\n     <message>\n-        <location line=\"-715\"/>\n+        <location line=\"-730\"/>\n         <source>Load Partially Signed Bitcoin Transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -744,7 +740,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+248\"/>\n+        <location line=\"+263\"/>\n         <source>%1 client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -792,7 +788,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+110\"/>\n+        <location line=\"+108\"/>\n         <source>Date: %1\n </source>\n         <translation type=\"unfinished\"></translation>\n@@ -956,34 +952,38 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\">Confirmed</translation>\n     </message>\n     <message>\n-        <location filename=\"../coincontroldialog.cpp\" line=\"+55\"/>\n-        <source>Copy address</source>\n+        <location filename=\"../coincontroldialog.cpp\" line=\"+66\"/>\n+        <source>Copy amount</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-11\"/>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <location line=\"+9\"/>\n-        <source>Copy amount</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-8\"/>\n-        <source>Copy transaction ID</source>\n+        <location line=\"+1\"/>\n+        <source>Copy transaction &amp;ID</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <source>Lock unspent</source>\n+        <source>L&amp;ock unspent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Unlock unspent</source>\n+        <source>&amp;Unlock unspent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -1061,12 +1061,12 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>CreateWalletActivity</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"+253\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+254\"/>\n         <source>Creating Wallet &lt;b&gt;%1&lt;/b&gt;\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+28\"/>\n+        <location line=\"+31\"/>\n         <source>Create wallet failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1075,6 +1075,11 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <source>Create wallet warning</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+16\"/>\n+        <source>Can&apos;t list signers</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>CreateWalletDialog</name>\n@@ -1139,15 +1144,31 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../createwalletdialog.cpp\" line=\"+21\"/>\n+        <location line=\"+7\"/>\n+        <source>Use an external signing device such as a hardware wallet. Configure the external signer script in wallet preferences first.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>External signer</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location filename=\"../createwalletdialog.cpp\" line=\"+22\"/>\n         <source>Create</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+42\"/>\n+        <location line=\"+68\"/>\n         <source>Compiled without sqlite support (required for descriptor wallets)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+14\"/>\n+        <source>Compiled without external signing support (required for external signing)</source>\n+        <extracomment>&quot;External signing&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n </context>\n <context>\n     <name>EditAddressDialog</name>\n@@ -1472,7 +1493,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n <context>\n     <name>OpenWalletActivity</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"+39\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"+32\"/>\n         <source>Open wallet failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1530,7 +1551,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+171\"/>\n+        <location line=\"+201\"/>\n         <location line=\"+187\"/>\n         <source>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</source>\n         <translation type=\"unfinished\"></translation>\n@@ -1579,7 +1600,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>&amp;Network</translation>\n     </message>\n     <message>\n-        <location line=\"-188\"/>\n+        <location line=\"-218\"/>\n         <source>Prune &amp;block storage to</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1629,7 +1650,22 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+30\"/>\n+        <location line=\"+10\"/>\n+        <source>External Signer (e.g. hardware wallet)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+8\"/>\n+        <source>&amp;External signer script path</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>Full path to a Bitcoin Core compatible script (e.g. C:\\Downloads\\hwi.exe or /Users/you/Downloads/hwi.py). Beware: malware can steal your coins!</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+32\"/>\n         <source>Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.</source>\n         <translation>Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.</translation>\n     </message>\n@@ -1762,12 +1798,12 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>Choose the default subdivision unit to show in the interface and when sending coins.</translation>\n     </message>\n     <message>\n-        <location line=\"-463\"/>\n+        <location line=\"-493\"/>\n         <source>Whether to show coin control features or not.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+260\"/>\n+        <location line=\"+290\"/>\n         <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor onion services.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1812,7 +1848,13 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+104\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+97\"/>\n+        <source>Compiled without external signing support (required for external signing)</source>\n+        <extracomment>&quot;External signing&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+12\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1822,7 +1864,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+91\"/>\n+        <location line=\"+93\"/>\n         <source>Confirm options reset</source>\n         <translation>Confirm options reset</translation>\n     </message>\n@@ -1962,7 +2004,7 @@ Signing is only possible with addresses of the type &apos;legacy&apos;.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../overviewpage.cpp\" line=\"+193\"/>\n+        <location filename=\"../overviewpage.cpp\" line=\"+188\"/>\n         <source>Privacy mode activated for the Overview tab. To unmask the values, uncheck Settings-&gt;Mask values.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2168,7 +2210,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n <context>\n     <name>PeerTableModel</name>\n     <message>\n-        <location filename=\"../peertablemodel.h\" line=\"+101\"/>\n+        <location filename=\"../peertablemodel.h\" line=\"+107\"/>\n         <source>User Agent</source>\n         <extracomment>Title of Peers Table column which contains the peer&apos;s User Agent string.</extracomment>\n         <translation type=\"unfinished\"></translation>\n@@ -2384,7 +2426,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../bitcoin.cpp\" line=\"+111\"/>\n+        <location filename=\"../bitcoin.cpp\" line=\"+112\"/>\n         <source>Error: Specified data directory &quot;%1&quot; does not exist.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2418,12 +2460,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n     <name>QRImageWidget</name>\n     <message>\n         <location filename=\"../qrimagewidget.cpp\" line=\"+30\"/>\n-        <source>Save Image\u2026</source>\n+        <source>&amp;Save Image\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy Image</source>\n+        <source>&amp;Copy Image</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -2467,7 +2509,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <location line=\"+23\"/>\n         <location line=\"+36\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+722\"/>\n+        <location line=\"+692\"/>\n         <location line=\"+26\"/>\n         <location line=\"+26\"/>\n         <location line=\"+23\"/>\n@@ -2490,12 +2532,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+26\"/>\n-        <location filename=\"../rpcconsole.h\" line=\"+138\"/>\n+        <location filename=\"../rpcconsole.h\" line=\"+139\"/>\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n     <message>\n-        <location line=\"-1549\"/>\n+        <location line=\"-1519\"/>\n         <source>Client version</source>\n         <translation>Client version</translation>\n     </message>\n@@ -2536,12 +2578,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n     </message>\n     <message>\n         <location line=\"+29\"/>\n-        <location line=\"+922\"/>\n+        <location line=\"+892\"/>\n         <source>Network</source>\n         <translation>Network</translation>\n     </message>\n     <message>\n-        <location line=\"-915\"/>\n+        <location line=\"-885\"/>\n         <source>Name</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2581,7 +2623,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+241\"/>\n+        <location line=\"+211\"/>\n         <source>&amp;Reset</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2609,7 +2651,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n     </message>\n     <message>\n         <location line=\"+68\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+1091\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+1124\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2644,13 +2686,13 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1516\"/>\n-        <location line=\"+1081\"/>\n+        <location line=\"-1486\"/>\n+        <location line=\"+1051\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1155\"/>\n+        <location line=\"-1125\"/>\n         <source>Node window</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2665,17 +2707,17 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+84\"/>\n+        <location line=\"+78\"/>\n         <source>Decrease font size</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+32\"/>\n+        <location line=\"+20\"/>\n         <source>Increase font size</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+558\"/>\n+        <location line=\"+546\"/>\n         <source>Permissions</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2780,7 +2822,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-1288\"/>\n+        <location line=\"-1258\"/>\n         <source>Last block time</source>\n         <translation>Last block time</translation>\n     </message>\n@@ -2795,7 +2837,7 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation>&amp;Console</translation>\n     </message>\n     <message>\n-        <location line=\"+217\"/>\n+        <location line=\"+187\"/>\n         <source>&amp;Network Traffic</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2815,12 +2857,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/debugwindow.ui\" line=\"-321\"/>\n+        <location filename=\"../forms/debugwindow.ui\" line=\"-291\"/>\n         <source>Debug log file</source>\n         <translation>Debug log file</translation>\n     </message>\n     <message>\n-        <location line=\"+155\"/>\n+        <location line=\"+125\"/>\n         <source>Clear console</source>\n         <translation>Clear console</translation>\n     </message>\n@@ -2850,12 +2892,12 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+40\"/>\n         <source>Never</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.cpp\" line=\"-417\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"-429\"/>\n         <source>Inbound: initiated by peer</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2924,52 +2966,52 @@ If you are receiving this error you should request the merchant provide a BIP21\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+385\"/>\n-        <source>Network activity disabled</source>\n+        <location line=\"+150\"/>\n+        <source>&amp;Disconnect</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+77\"/>\n-        <source>Executing command without any wallet</source>\n+        <location line=\"+1\"/>\n+        <source>1 &amp;hour</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-2\"/>\n-        <source>Executing command using &quot;%1&quot; wallet</source>\n+        <location line=\"+1\"/>\n+        <source>1 d&amp;ay</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-319\"/>\n-        <source>Disconnect</source>\n+        <location line=\"+1\"/>\n+        <source>1 &amp;week</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>1 hour</source>\n+        <source>1 &amp;year</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 day</source>\n+        <location line=\"+22\"/>\n+        <source>&amp;Unban</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 week</source>\n+        <location line=\"+221\"/>\n+        <source>Network activity disabled</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>1 year</source>\n+        <location line=\"+77\"/>\n+        <source>Executing command without any wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n-        <source>Unban</source>\n+        <location line=\"-2\"/>\n+        <source>Executing command using &quot;%1&quot; wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+150\"/>\n+        <location line=\"-146\"/>\n         <source>Welcome to the %1 RPC console.\n Use up and down arrows to navigate history, and %2 to clear screen.\n Use %3 and %4 to increase or decrease the font size.\n@@ -2997,7 +3039,7 @@ For more information on using this console, type %6.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../rpcconsole.h\" line=\"-38\"/>\n+        <location filename=\"../rpcconsole.h\" line=\"-40\"/>\n         <source>Unknown</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3102,27 +3144,27 @@ For more information on using this console, type %6.\n     </message>\n     <message>\n         <location filename=\"../receivecoinsdialog.cpp\" line=\"+47\"/>\n-        <source>Copy URI</source>\n+        <source>Copy &amp;URI</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy address</source>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy message</source>\n+        <source>Copy &amp;message</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy amount</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n@@ -3178,6 +3220,16 @@ For more information on using this console, type %6.\n         <source>Copy &amp;Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+10\"/>\n+        <source>&amp;Verify</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Verify this address on e.g. a hardware wallet screen</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+10\"/>\n         <source>&amp;Save Image\u2026</source>\n@@ -3189,15 +3241,15 @@ For more information on using this console, type %6.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/receiverequestdialog.ui\" line=\"-221\"/>\n+        <location filename=\"../forms/receiverequestdialog.ui\" line=\"-234\"/>\n         <source>Payment information</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+30\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+32\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -3236,7 +3288,7 @@ For more information on using this console, type %6.\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+674\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+738\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>\n@@ -3423,7 +3475,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation>S&amp;end</translation>\n     </message>\n     <message>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"-582\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"-646\"/>\n         <source>Copy quantity</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3463,7 +3515,24 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+29\"/>\n+        <location line=\"+30\"/>\n+        <source>Sign on device</source>\n+        <extracomment>&quot;device&quot; usually means a hardware wallet</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Connect your hardware wallet first.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+4\"/>\n+        <source>Set external signer script path in Options -&gt; Wallet</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Cr&amp;eate Unsigned</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3508,7 +3577,29 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+44\"/>\n+        <location line=\"+0\"/>\n+        <source>Sign and send</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+25\"/>\n+        <source>Sign failed</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>External signer not found</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>External signer failure</source>\n+        <extracomment>&quot;External signer&quot; means using devices such as hardware wallets.</extracomment>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+58\"/>\n         <source>Save Transaction Data</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3524,7 +3615,12 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-76\"/>\n+        <location line=\"+175\"/>\n+        <source>External balance:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-302\"/>\n         <source>or</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3569,12 +3665,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Send</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+229\"/>\n+        <location line=\"+283\"/>\n         <source>Watch-only balance:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4434,62 +4525,62 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+75\"/>\n-        <source>Abandon transaction</source>\n+        <location line=\"-26\"/>\n+        <source>Range\u2026</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-3\"/>\n-        <source>Increase transaction fee</source>\n+        <location line=\"+90\"/>\n+        <source>&amp;Copy address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-8\"/>\n-        <source>Copy address</source>\n+        <location line=\"+1\"/>\n+        <source>Copy &amp;label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy label</source>\n+        <source>Copy &amp;amount</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy amount</source>\n+        <source>Copy transaction &amp;ID</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy transaction ID</source>\n+        <source>Copy &amp;raw transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy raw transaction</source>\n+        <source>Copy full transaction &amp;details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+1\"/>\n-        <source>Copy full transaction details</source>\n+        <source>&amp;Show transaction details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n-        <source>Edit address label</source>\n+        <location line=\"+2\"/>\n+        <source>Increase transaction &amp;fee</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-6\"/>\n-        <source>Show transaction details</source>\n+        <location line=\"+3\"/>\n+        <source>A&amp;bandon transaction</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-96\"/>\n-        <source>Range\u2026</source>\n+        <location line=\"+1\"/>\n+        <source>&amp;Edit address label</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+276\"/>\n+        <location line=\"+174\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4576,7 +4667,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n <context>\n     <name>WalletController</name>\n     <message>\n-        <location filename=\"../walletcontroller.cpp\" line=\"-250\"/>\n+        <location filename=\"../walletcontroller.cpp\" line=\"-262\"/>\n         <source>Close wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4604,7 +4695,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee rate of &quot;100\n <context>\n     <name>WalletFrame</name>\n     <message>\n-        <location filename=\"../walletframe.cpp\" line=\"+39\"/>\n+        <location filename=\"../walletframe.cpp\" line=\"+35\"/>\n         <source>No wallet has been loaded.\n Go to File &gt; Open Wallet to load a wallet.\n - OR -</source>\n@@ -4624,7 +4715,7 @@ Go to File &gt; Open Wallet to load a wallet.\n         <translation type=\"unfinished\">Send Coins</translation>\n     </message>\n     <message>\n-        <location line=\"+279\"/>\n+        <location line=\"+260\"/>\n         <location line=\"+52\"/>\n         <location line=\"+13\"/>\n         <location line=\"+5\"/>\n@@ -4692,7 +4783,12 @@ Go to File &gt; Open Wallet to load a wallet.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+20\"/>\n+        <location line=\"+14\"/>\n+        <source>Can&apos;t display address</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+18\"/>\n         <source>default wallet</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4840,6 +4936,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Error: Dumpfile version is not supported. This version of bitcoin-wallet only supports version 1 dumpfiles. Got dumpfile with version %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Error: Legacy wallets only support the &quot;legacy&quot;, &quot;p2sh-segwit&quot;, and &quot;bech32&quot; address types</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Error: Listening for incoming connections failed (listen returned error %s)</source>\n@@ -4945,11 +5046,6 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+3\"/>\n-        <source>Transaction needs a change address, but we can&apos;t generate it. Please call keypoolrefill first.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.</source>\n@@ -5160,6 +5256,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Error: Missing checksum</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Error: No %s addresses available.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Error: Unable to parse version %u as a uint32_t</source>\n@@ -5440,6 +5541,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Transaction must have at least one recipient</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Transaction needs a change address, but we can&apos;t generate it. %s</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Transaction too large</source>\n@@ -5500,6 +5606,11 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Unknown network specified in -onlynet: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unknown new rules activated (versionbit %i)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Unsupported logging category %s=%s.</source>\n@@ -5535,10 +5646,5 @@ Go to File &gt; Open Wallet to load a wallet.\n         <source>Wallet needed to be rewritten: restart %s to complete</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Warning: unknown new rules activated (versionbit %i)</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n </context>\n </TS>"
      },
      {
        "sha": "caefddc66332067d635453e134af8d5f016322c0",
        "filename": "src/qt/locale/bitcoin_en.xlf",
        "status": "modified",
        "additions": 1573,
        "deletions": 1467,
        "changes": 3040,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/locale/bitcoin_en.xlf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/locale/bitcoin_en.xlf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.xlf?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "b12fe9656759bfa47537b1c7d474089969345883",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -92,6 +92,11 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n         ui->thirdPartyTxUrls->setVisible(false);\n     }\n \n+#ifndef ENABLE_EXTERNAL_SIGNER\n+    //: \"External signing\" means using devices such as hardware wallets.\n+    ui->externalSignerPath->setToolTip(tr(\"Compiled without external signing support (required for external signing)\"));\n+    ui->externalSignerPath->setEnabled(false);\n+#endif\n     /* Display elements init */\n     QDir translations(\":translations\");\n \n@@ -199,6 +204,7 @@ void OptionsDialog::setModel(OptionsModel *_model)\n     connect(ui->prune, &QCheckBox::clicked, this, &OptionsDialog::togglePruneWarning);\n     connect(ui->pruneSize, qOverload<int>(&QSpinBox::valueChanged), this, &OptionsDialog::showRestartWarning);\n     connect(ui->databaseCache, qOverload<int>(&QSpinBox::valueChanged), this, &OptionsDialog::showRestartWarning);\n+    connect(ui->externalSignerPath, &QLineEdit::textChanged, [this]{ showRestartWarning(); });\n     connect(ui->threadsScriptVerif, qOverload<int>(&QSpinBox::valueChanged), this, &OptionsDialog::showRestartWarning);\n     /* Wallet */\n     connect(ui->spendZeroConfChange, &QCheckBox::clicked, this, &OptionsDialog::showRestartWarning);\n@@ -233,6 +239,7 @@ void OptionsDialog::setMapper()\n     /* Wallet */\n     mapper->addMapping(ui->spendZeroConfChange, OptionsModel::SpendZeroConfChange);\n     mapper->addMapping(ui->coinControlFeatures, OptionsModel::CoinControlFeatures);\n+    mapper->addMapping(ui->externalSignerPath, OptionsModel::ExternalSignerPath);\n \n     /* Network */\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);"
      },
      {
        "sha": "24a4e9ee968b8b611d9066cc1adf3ab2de189ee8",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -117,6 +117,13 @@ void OptionsModel::Init(bool resetSettings)\n         settings.setValue(\"bSpendZeroConfChange\", true);\n     if (!gArgs.SoftSetBoolArg(\"-spendzeroconfchange\", settings.value(\"bSpendZeroConfChange\").toBool()))\n         addOverriddenOption(\"-spendzeroconfchange\");\n+\n+    if (!settings.contains(\"external_signer_path\"))\n+        settings.setValue(\"external_signer_path\", \"\");\n+\n+    if (!gArgs.SoftSetArg(\"-signer\", settings.value(\"external_signer_path\").toString().toStdString())) {\n+        addOverriddenOption(\"-signer\");\n+    }\n #endif\n \n     // Network\n@@ -326,6 +333,8 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n             return settings.value(\"bSpendZeroConfChange\");\n+        case ExternalSignerPath:\n+            return settings.value(\"external_signer_path\");\n #endif\n         case DisplayUnit:\n             return nDisplayUnit;\n@@ -445,6 +454,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n                 setRestartRequired(true);\n             }\n             break;\n+        case ExternalSignerPath:\n+            if (settings.value(\"external_signer_path\") != value.toString()) {\n+                settings.setValue(\"external_signer_path\", value.toString());\n+                setRestartRequired(true);\n+            }\n+            break;\n #endif\n         case DisplayUnit:\n             setDisplayUnit(value);"
      },
      {
        "sha": "535843e8ba982bc72ad7bc68675416297e182ec9",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -65,6 +65,7 @@ class OptionsModel : public QAbstractListModel\n         Prune,                  // bool\n         PruneSize,              // int\n         DatabaseCache,          // int\n+        ExternalSignerPath,     // QString\n         SpendZeroConfChange,    // bool\n         Listen,                 // bool\n         OptionIDRowCount,"
      },
      {
        "sha": "864a62edc84b32c15504983f1a158793526676f2",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -69,20 +69,18 @@ class TxViewDelegate : public QAbstractItemDelegate\n             foreground = brush.color();\n         }\n \n-        painter->setPen(foreground);\n-        QRect boundingRect;\n-        painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n-        int address_rect_min_width = boundingRect.width();\n-\n-        if (index.data(TransactionTableModel::WatchonlyRole).toBool())\n-        {\n+        if (index.data(TransactionTableModel::WatchonlyRole).toBool()) {\n             QIcon iconWatchonly = qvariant_cast<QIcon>(index.data(TransactionTableModel::WatchonlyDecorationRole));\n-            QRect watchonlyRect(boundingRect.right() + 5, mainRect.top()+ypad+halfheight, 16, halfheight);\n+            QRect watchonlyRect(addressRect.left(), addressRect.top(), 16, addressRect.height());\n             iconWatchonly = platformStyle->TextColorIcon(iconWatchonly);\n             iconWatchonly.paint(painter, watchonlyRect);\n-            address_rect_min_width += 5 + watchonlyRect.width();\n+            addressRect.setLeft(addressRect.left() + watchonlyRect.width() + 5);\n         }\n \n+        painter->setPen(foreground);\n+        QRect boundingRect;\n+        painter->drawText(addressRect, Qt::AlignLeft | Qt::AlignVCenter, address, &boundingRect);\n+\n         if(amount < 0)\n         {\n             foreground = COLOR_NEGATIVE;\n@@ -109,7 +107,8 @@ class TxViewDelegate : public QAbstractItemDelegate\n         QRect date_bounding_rect;\n         painter->drawText(amountRect, Qt::AlignLeft | Qt::AlignVCenter, GUIUtil::dateTimeStr(date), &date_bounding_rect);\n \n-        const int minimum_width = std::max(address_rect_min_width, amount_bounding_rect.width() + date_bounding_rect.width());\n+        // 0.4*date_bounding_rect.width() is used to visually distinguish a date from an amount.\n+        const int minimum_width = 1.4 * date_bounding_rect.width() + amount_bounding_rect.width();\n         const auto search = m_minimum_width.find(index.row());\n         if (search == m_minimum_width.end() || search->second != minimum_width) {\n             m_minimum_width[index.row()] = minimum_width;\n@@ -166,8 +165,8 @@ OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent)\n \n     // start with displaying the \"out of sync\" warnings\n     showOutOfSyncWarning(true);\n-    connect(ui->labelWalletStatus, &QPushButton::clicked, this, &OverviewPage::handleOutOfSyncWarningClicks);\n-    connect(ui->labelTransactionsStatus, &QPushButton::clicked, this, &OverviewPage::handleOutOfSyncWarningClicks);\n+    connect(ui->labelWalletStatus, &QPushButton::clicked, this, &OverviewPage::outOfSyncWarningClicked);\n+    connect(ui->labelTransactionsStatus, &QPushButton::clicked, this, &OverviewPage::outOfSyncWarningClicked);\n }\n \n void OverviewPage::handleTransactionClicked(const QModelIndex &index)\n@@ -176,11 +175,6 @@ void OverviewPage::handleTransactionClicked(const QModelIndex &index)\n         Q_EMIT transactionClicked(filter->mapToSource(index));\n }\n \n-void OverviewPage::handleOutOfSyncWarningClicks()\n-{\n-    Q_EMIT outOfSyncWarningClicked();\n-}\n-\n void OverviewPage::setPrivacy(bool privacy)\n {\n     m_privacy = privacy;\n@@ -302,13 +296,13 @@ void OverviewPage::setWalletModel(WalletModel *model)\n \n void OverviewPage::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         QIcon icon = m_platform_style->SingleColorIcon(QStringLiteral(\":/icons/warning\"));\n         ui->labelTransactionsStatus->setIcon(icon);\n         ui->labelWalletStatus->setIcon(icon);\n     }\n-#endif\n+\n+    QWidget::changeEvent(e);\n }\n \n void OverviewPage::updateDisplayUnit()"
      },
      {
        "sha": "5270741c0d8e9e6cbb35cdc4f08dd08a01a55f51",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -65,7 +65,6 @@ private Q_SLOTS:\n     void handleTransactionClicked(const QModelIndex &index);\n     void updateAlerts(const QString &warnings);\n     void updateWatchOnlyLabels(bool showWatchOnly);\n-    void handleOutOfSyncWarningClicks();\n     void setMonospacedFont(bool use_embedded_font);\n };\n "
      },
      {
        "sha": "1b7fda6e7752db341ac2138508515e61e09f7f4a",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 52,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -14,52 +14,11 @@\n #include <QList>\n #include <QTimer>\n \n-// private implementation\n-class PeerTablePriv\n-{\n-public:\n-    /** Local cache of peer information */\n-    QList<CNodeCombinedStats> cachedNodeStats;\n-\n-    /** Pull a full list of peers from vNodes into our cache */\n-    void refreshPeers(interfaces::Node& node)\n-    {\n-            cachedNodeStats.clear();\n-\n-            interfaces::Node::NodesStats nodes_stats;\n-            node.getNodesStats(nodes_stats);\n-            cachedNodeStats.reserve(nodes_stats.size());\n-            for (const auto& node_stats : nodes_stats)\n-            {\n-                CNodeCombinedStats stats;\n-                stats.nodeStats = std::get<0>(node_stats);\n-                stats.fNodeStateStatsAvailable = std::get<1>(node_stats);\n-                stats.nodeStateStats = std::get<2>(node_stats);\n-                cachedNodeStats.append(stats);\n-            }\n-    }\n-\n-    int size() const\n-    {\n-        return cachedNodeStats.size();\n-    }\n-\n-    CNodeCombinedStats *index(int idx)\n-    {\n-        if (idx >= 0 && idx < cachedNodeStats.size())\n-            return &cachedNodeStats[idx];\n-\n-        return nullptr;\n-    }\n-};\n-\n PeerTableModel::PeerTableModel(interfaces::Node& node, QObject* parent) :\n     QAbstractTableModel(parent),\n     m_node(node),\n     timer(nullptr)\n {\n-    priv.reset(new PeerTablePriv());\n-\n     // set up timer for auto refresh\n     timer = new QTimer(this);\n     connect(timer, &QTimer::timeout, this, &PeerTableModel::refresh);\n@@ -84,23 +43,23 @@ void PeerTableModel::stopAutoRefresh()\n     timer->stop();\n }\n \n-int PeerTableModel::rowCount(const QModelIndex &parent) const\n+int PeerTableModel::rowCount(const QModelIndex& parent) const\n {\n     if (parent.isValid()) {\n         return 0;\n     }\n-    return priv->size();\n+    return m_peers_data.size();\n }\n \n-int PeerTableModel::columnCount(const QModelIndex &parent) const\n+int PeerTableModel::columnCount(const QModelIndex& parent) const\n {\n     if (parent.isValid()) {\n         return 0;\n     }\n     return columns.length();\n }\n \n-QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n+QVariant PeerTableModel::data(const QModelIndex& index, int role) const\n {\n     if(!index.isValid())\n         return QVariant();\n@@ -132,6 +91,7 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n     } else if (role == Qt::TextAlignmentRole) {\n         switch (column) {\n         case NetNodeId:\n+            return QVariant(Qt::AlignRight | Qt::AlignVCenter);\n         case Address:\n             return {};\n         case ConnectionType:\n@@ -172,19 +132,54 @@ Qt::ItemFlags PeerTableModel::flags(const QModelIndex &index) const\n     return retval;\n }\n \n-QModelIndex PeerTableModel::index(int row, int column, const QModelIndex &parent) const\n+QModelIndex PeerTableModel::index(int row, int column, const QModelIndex& parent) const\n {\n     Q_UNUSED(parent);\n-    CNodeCombinedStats *data = priv->index(row);\n \n-    if (data)\n-        return createIndex(row, column, data);\n+    if (0 <= row && row < rowCount() && 0 <= column && column < columnCount()) {\n+        return createIndex(row, column, const_cast<CNodeCombinedStats*>(&m_peers_data[row]));\n+    }\n+\n     return QModelIndex();\n }\n \n void PeerTableModel::refresh()\n {\n-    Q_EMIT layoutAboutToBeChanged();\n-    priv->refreshPeers(m_node);\n-    Q_EMIT layoutChanged();\n+    interfaces::Node::NodesStats nodes_stats;\n+    m_node.getNodesStats(nodes_stats);\n+    decltype(m_peers_data) new_peers_data;\n+    new_peers_data.reserve(nodes_stats.size());\n+    for (const auto& node_stats : nodes_stats) {\n+        const CNodeCombinedStats stats{std::get<0>(node_stats), std::get<2>(node_stats), std::get<1>(node_stats)};\n+        new_peers_data.append(stats);\n+    }\n+\n+    // Handle peer addition or removal as suggested in Qt Docs. See:\n+    // - https://doc.qt.io/qt-5/model-view-programming.html#inserting-and-removing-rows\n+    // - https://doc.qt.io/qt-5/model-view-programming.html#resizable-models\n+    // We take advantage of the fact that the std::vector returned\n+    // by interfaces::Node::getNodesStats is sorted by nodeid.\n+    for (int i = 0; i < m_peers_data.size();) {\n+        if (i < new_peers_data.size() && m_peers_data.at(i).nodeStats.nodeid == new_peers_data.at(i).nodeStats.nodeid) {\n+            ++i;\n+            continue;\n+        }\n+        // A peer has been removed from the table.\n+        beginRemoveRows(QModelIndex(), i, i);\n+        m_peers_data.erase(m_peers_data.begin() + i);\n+        endRemoveRows();\n+    }\n+\n+    if (m_peers_data.size() < new_peers_data.size()) {\n+        // Some peers have been added to the end of the table.\n+        beginInsertRows(QModelIndex(), m_peers_data.size(), new_peers_data.size() - 1);\n+        m_peers_data.swap(new_peers_data);\n+        endInsertRows();\n+    } else {\n+        m_peers_data.swap(new_peers_data);\n+    }\n+\n+    const auto top_left = index(0, 0);\n+    const auto bottom_right = index(rowCount() - 1, columnCount() - 1);\n+    Q_EMIT dataChanged(top_left, bottom_right);\n }"
      },
      {
        "sha": "0d841ebf28c5728df7457cbade158395d5da6fd4",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -8,10 +8,11 @@\n #include <net_processing.h> // For CNodeStateStats\n #include <net.h>\n \n-#include <memory>\n-\n #include <QAbstractTableModel>\n+#include <QList>\n+#include <QModelIndex>\n #include <QStringList>\n+#include <QVariant>\n \n class PeerTablePriv;\n \n@@ -61,18 +62,20 @@ class PeerTableModel : public QAbstractTableModel\n \n     /** @name Methods overridden from QAbstractTableModel\n         @{*/\n-    int rowCount(const QModelIndex &parent) const override;\n-    int columnCount(const QModelIndex &parent) const override;\n-    QVariant data(const QModelIndex &index, int role) const override;\n-    QVariant headerData(int section, Qt::Orientation orientation, int role) const override;\n-    QModelIndex index(int row, int column, const QModelIndex &parent) const override;\n+    int rowCount(const QModelIndex& parent = QModelIndex()) const override;\n+    int columnCount(const QModelIndex& parent = QModelIndex()) const override;\n+    QVariant data(const QModelIndex& index, int role = Qt::DisplayRole) const override;\n+    QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;\n+    QModelIndex index(int row, int column, const QModelIndex& parent = QModelIndex()) const override;\n     Qt::ItemFlags flags(const QModelIndex &index) const override;\n     /*@}*/\n \n public Q_SLOTS:\n     void refresh();\n \n private:\n+    //! Internal peer data structure.\n+    QList<CNodeCombinedStats> m_peers_data{};\n     interfaces::Node& m_node;\n     const QStringList columns{\n         /*: Title of Peers Table column which contains a\n@@ -99,7 +102,6 @@ public Q_SLOTS:\n         /*: Title of Peers Table column which contains the peer's\n             User Agent string. */\n         tr(\"User Agent\")};\n-    std::unique_ptr<PeerTablePriv> priv;\n     QTimer *timer;\n };\n "
      },
      {
        "sha": "2adfeeaaf0cd638b0c07eb30d29d6fc5bdbb1174",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -50,7 +50,7 @@ void PSBTOperationsDialog::openWithPSBT(PartiallySignedTransaction psbtx)\n     bool complete;\n     size_t n_could_sign;\n     FinalizePSBT(psbtx);  // Make sure all existing signatures are fully combined before checking for completeness.\n-    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */,  m_transaction_data, complete, &n_could_sign);\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, &n_could_sign, m_transaction_data, complete);\n     if (err != TransactionError::OK) {\n         showStatus(tr(\"Failed to load transaction: %1\")\n             .arg(QString::fromStdString(TransactionErrorString(err).translated)), StatusLevel::ERR);\n@@ -67,7 +67,7 @@ void PSBTOperationsDialog::signTransaction()\n {\n     bool complete;\n     size_t n_signed;\n-    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, m_transaction_data, complete, &n_signed);\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, &n_signed, m_transaction_data, complete);\n \n     if (err != TransactionError::OK) {\n         showStatus(tr(\"Failed to sign transaction: %1\")\n@@ -226,7 +226,7 @@ void PSBTOperationsDialog::showStatus(const QString &msg, StatusLevel level) {\n size_t PSBTOperationsDialog::couldSignInputs(const PartiallySignedTransaction &psbtx) {\n     size_t n_signed;\n     bool complete;\n-    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, false /* bip32derivs */, m_transaction_data, complete, &n_signed);\n+    TransactionError err = m_wallet_model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, false /* bip32derivs */, &n_signed, m_transaction_data, complete);\n \n     if (err != TransactionError::OK) {\n         return 0;"
      },
      {
        "sha": "7cdd568644ee857c661278e487aaf2d675d2d470",
        "filename": "src/qt/qrimagewidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/qrimagewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/qrimagewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrimagewidget.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -27,8 +27,8 @@ QRImageWidget::QRImageWidget(QWidget *parent):\n     QLabel(parent), contextMenu(nullptr)\n {\n     contextMenu = new QMenu(this);\n-    contextMenu->addAction(tr(\"Save Image\u2026\"), this, &QRImageWidget::saveImage);\n-    contextMenu->addAction(tr(\"Copy Image\"), this, &QRImageWidget::copyImage);\n+    contextMenu->addAction(tr(\"&Save Image\u2026\"), this, &QRImageWidget::saveImage);\n+    contextMenu->addAction(tr(\"&Copy Image\"), this, &QRImageWidget::copyImage);\n }\n \n bool QRImageWidget::setQR(const QString& data, const QString& text)"
      },
      {
        "sha": "d47ee95826f49656e867acb46d256886a6fb343f",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -44,11 +44,11 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWid\n \n     // context menu\n     contextMenu = new QMenu(this);\n-    contextMenu->addAction(tr(\"Copy URI\"), this, &ReceiveCoinsDialog::copyURI);\n-    contextMenu->addAction(tr(\"Copy address\"), this, &ReceiveCoinsDialog::copyAddress);\n-    copyLabelAction = contextMenu->addAction(tr(\"Copy label\"), this, &ReceiveCoinsDialog::copyLabel);\n-    copyMessageAction = contextMenu->addAction(tr(\"Copy message\"), this, &ReceiveCoinsDialog::copyMessage);\n-    copyAmountAction = contextMenu->addAction(tr(\"Copy amount\"), this, &ReceiveCoinsDialog::copyAmount);\n+    contextMenu->addAction(tr(\"Copy &URI\"), this, &ReceiveCoinsDialog::copyURI);\n+    contextMenu->addAction(tr(\"&Copy address\"), this, &ReceiveCoinsDialog::copyAddress);\n+    copyLabelAction = contextMenu->addAction(tr(\"Copy &label\"), this, &ReceiveCoinsDialog::copyLabel);\n+    copyMessageAction = contextMenu->addAction(tr(\"Copy &message\"), this, &ReceiveCoinsDialog::copyMessage);\n+    copyAmountAction = contextMenu->addAction(tr(\"Copy &amount\"), this, &ReceiveCoinsDialog::copyAmount);\n     connect(ui->recentRequestsView, &QWidget::customContextMenuRequested, this, &ReceiveCoinsDialog::showMenu);\n \n     connect(ui->clearButton, &QPushButton::clicked, this, &ReceiveCoinsDialog::clear);"
      },
      {
        "sha": "41f22e9c3416dca7ccb28236a382360474a2a210",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -89,6 +89,12 @@ void ReceiveRequestDialog::setInfo(const SendCoinsRecipient &_info)\n         ui->wallet_tag->hide();\n         ui->wallet_content->hide();\n     }\n+\n+    ui->btnVerify->setVisible(model->wallet().hasExternalSigner());\n+\n+    connect(ui->btnVerify, &QPushButton::clicked, [this] {\n+        model->displayAddress(info.address.toStdString());\n+    });\n }\n \n void ReceiveRequestDialog::updateDisplayUnit()"
      },
      {
        "sha": "ec3d970a7ff1088e913d96192f8c3a9e984b6b3e",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -10,7 +10,10 @@\n #include <qt/walletmodel.h>\n \n #include <clientversion.h>\n+#include <interfaces/wallet.h>\n+#include <key_io.h>\n #include <streams.h>\n+#include <util/string.h>\n \n #include <utility>\n \n@@ -21,10 +24,9 @@ RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n {\n     // Load entries from wallet\n-    std::vector<std::string> vReceiveRequests;\n-    parent->loadReceiveRequests(vReceiveRequests);\n-    for (const std::string& request : vReceiveRequests)\n+    for (const std::string& request : parent->wallet().getAddressReceiveRequests()) {\n         addNewRequest(request);\n+    }\n \n     /* These columns must match the indices in the ColumnIndex enumeration */\n     columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n@@ -150,7 +152,7 @@ bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex\n         for (int i = 0; i < count; ++i)\n         {\n             const RecentRequestEntry* rec = &list[row+i];\n-            if (!walletModel->saveReceiveRequest(rec->recipient.address.toStdString(), rec->id, \"\"))\n+            if (!walletModel->wallet().setAddressReceiveRequest(DecodeDestination(rec->recipient.address.toStdString()), ToString(rec->id), \"\"))\n                 return false;\n         }\n \n@@ -179,7 +181,7 @@ void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient\n     CDataStream ss(SER_DISK, CLIENT_VERSION);\n     ss << newEntry;\n \n-    if (!walletModel->saveReceiveRequest(recipient.address.toStdString(), newEntry.id, ss.str()))\n+    if (!walletModel->wallet().setAddressReceiveRequest(DecodeDestination(recipient.address.toStdString()), ToString(newEntry.id), ss.str()))\n         return;\n \n     addNewRequest(newEntry);"
      },
      {
        "sha": "56f55363b262204c0e2831711f5ef551a03e5ca7",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 18,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -34,19 +34,24 @@\n #include <wallet/wallet.h>\n #endif\n \n+#include <QAbstractButton>\n+#include <QAbstractItemModel>\n #include <QDateTime>\n #include <QFont>\n #include <QKeyEvent>\n+#include <QLatin1String>\n+#include <QLocale>\n #include <QMenu>\n #include <QMessageBox>\n #include <QScreen>\n #include <QScrollBar>\n #include <QSettings>\n #include <QString>\n #include <QStringList>\n+#include <QStyledItemDelegate>\n #include <QTime>\n #include <QTimer>\n-\n+#include <QVariant>\n \n const int CONSOLE_HISTORY = 50;\n const int INITIAL_TRAFFIC_GRAPH_MINS = 30;\n@@ -128,6 +133,20 @@ class QtRPCTimerInterface: public RPCTimerInterface\n     }\n };\n \n+class PeerIdViewDelegate : public QStyledItemDelegate\n+{\n+    Q_OBJECT\n+public:\n+    explicit PeerIdViewDelegate(QObject* parent = nullptr)\n+        : QStyledItemDelegate(parent) {}\n+\n+    QString displayText(const QVariant& value, const QLocale& locale) const override\n+    {\n+        // Additional spaces should visually separate right-aligned content\n+        // from the next column to the right.\n+        return value.toString() + QLatin1String(\"   \");\n+    }\n+};\n \n #include <qt/rpcconsole.moc>\n \n@@ -269,6 +288,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                 }\n                 if (breakParsing)\n                     break;\n+                [[fallthrough]];\n             }\n             case STATE_ARGUMENT: // In or after argument\n             case STATE_EATING_SPACES_IN_ARG:\n@@ -382,6 +402,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n                 strResult = lastResult.get_str();\n             else\n                 strResult = lastResult.write(2);\n+            [[fallthrough]];\n         case STATE_ARGUMENT:\n         case STATE_EATING_SPACES:\n             return true;\n@@ -469,6 +490,9 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n         ui->splitter->restoreState(settings.value(\"RPCConsoleWidgetPeersTabSplitterSizes\").toByteArray());\n     }\n \n+    m_peer_widget_header_state = settings.value(\"PeersTabPeerHeaderState\").toByteArray();\n+    m_banlist_widget_header_state = settings.value(\"PeersTabBanlistHeaderState\").toByteArray();\n+\n     constexpr QChar nonbreaking_hyphen(8209);\n     const std::vector<QString> CONNECTION_TYPE_DOC{\n         tr(\"Inbound: initiated by peer\"),\n@@ -508,14 +532,16 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n     //: Secondary shortcut to decrease the RPC console font size.\n     GUIUtil::AddButtonShortcut(ui->fontSmallerButton, tr(\"Ctrl+_\"));\n \n+    ui->promptIcon->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/prompticon\")));\n+\n     // Install event filter for up and down arrow\n     ui->lineEdit->installEventFilter(this);\n     ui->lineEdit->setMaxLength(16 * 1024 * 1024);\n     ui->messagesWidget->installEventFilter(this);\n \n-    connect(ui->clearButton, &QPushButton::clicked, [this] { clear(); });\n-    connect(ui->fontBiggerButton, &QPushButton::clicked, this, &RPCConsole::fontBigger);\n-    connect(ui->fontSmallerButton, &QPushButton::clicked, this, &RPCConsole::fontSmaller);\n+    connect(ui->clearButton, &QAbstractButton::clicked, [this] { clear(); });\n+    connect(ui->fontBiggerButton, &QAbstractButton::clicked, this, &RPCConsole::fontBigger);\n+    connect(ui->fontSmallerButton, &QAbstractButton::clicked, this, &RPCConsole::fontSmaller);\n     connect(ui->btnClearTrafficGraph, &QPushButton::clicked, ui->trafficGraph, &TrafficGraphWidget::clear);\n \n     // disable the wallet selector by default\n@@ -552,6 +578,9 @@ RPCConsole::~RPCConsole()\n         settings.setValue(\"RPCConsoleWidgetPeersTabSplitterSizes\", ui->splitter->saveState());\n     }\n \n+    settings.setValue(\"PeersTabPeerHeaderState\", m_peer_widget_header_state);\n+    settings.setValue(\"PeersTabBanlistHeaderState\", m_banlist_widget_header_state);\n+\n     m_node.rpcUnsetTimerInterface(rpcTimerInterface);\n     delete rpcTimerInterface;\n     delete ui;\n@@ -640,37 +669,44 @@ void RPCConsole::setClientModel(ClientModel *model, int bestblock_height, int64_\n         ui->peerWidget->setSelectionBehavior(QAbstractItemView::SelectRows);\n         ui->peerWidget->setSelectionMode(QAbstractItemView::ExtendedSelection);\n         ui->peerWidget->setContextMenuPolicy(Qt::CustomContextMenu);\n-        ui->peerWidget->setColumnWidth(PeerTableModel::Address, ADDRESS_COLUMN_WIDTH);\n-        ui->peerWidget->setColumnWidth(PeerTableModel::Subversion, SUBVERSION_COLUMN_WIDTH);\n-        ui->peerWidget->setColumnWidth(PeerTableModel::Ping, PING_COLUMN_WIDTH);\n+\n+        if (!ui->peerWidget->horizontalHeader()->restoreState(m_peer_widget_header_state)) {\n+            ui->peerWidget->setColumnWidth(PeerTableModel::Address, ADDRESS_COLUMN_WIDTH);\n+            ui->peerWidget->setColumnWidth(PeerTableModel::Subversion, SUBVERSION_COLUMN_WIDTH);\n+            ui->peerWidget->setColumnWidth(PeerTableModel::Ping, PING_COLUMN_WIDTH);\n+        }\n         ui->peerWidget->horizontalHeader()->setStretchLastSection(true);\n+        ui->peerWidget->setItemDelegateForColumn(PeerTableModel::NetNodeId, new PeerIdViewDelegate(this));\n \n         // create peer table context menu\n         peersTableContextMenu = new QMenu(this);\n-        peersTableContextMenu->addAction(tr(\"Disconnect\"), this, &RPCConsole::disconnectSelectedNode);\n-        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 hour\"), [this] { banSelectedNode(60 * 60); });\n-        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 day\"), [this] { banSelectedNode(60 * 60 * 24); });\n-        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 week\"), [this] { banSelectedNode(60 * 60 * 24 * 7); });\n-        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 year\"), [this] { banSelectedNode(60 * 60 * 24 * 365); });\n+        peersTableContextMenu->addAction(tr(\"&Disconnect\"), this, &RPCConsole::disconnectSelectedNode);\n+        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 &hour\"), [this] { banSelectedNode(60 * 60); });\n+        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 d&ay\"), [this] { banSelectedNode(60 * 60 * 24); });\n+        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 &week\"), [this] { banSelectedNode(60 * 60 * 24 * 7); });\n+        peersTableContextMenu->addAction(ts.ban_for + \" \" + tr(\"1 &year\"), [this] { banSelectedNode(60 * 60 * 24 * 365); });\n         connect(ui->peerWidget, &QTableView::customContextMenuRequested, this, &RPCConsole::showPeersTableContextMenu);\n \n         // peer table signal handling - update peer details when selecting new node\n         connect(ui->peerWidget->selectionModel(), &QItemSelectionModel::selectionChanged, this, &RPCConsole::updateDetailWidget);\n-        connect(model->getPeerTableModel(), &PeerTableModel::layoutChanged, this, &RPCConsole::updateDetailWidget);\n+        connect(model->getPeerTableModel(), &QAbstractItemModel::dataChanged, [this] { updateDetailWidget(); });\n \n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n         ui->banlistWidget->setSelectionBehavior(QAbstractItemView::SelectRows);\n         ui->banlistWidget->setSelectionMode(QAbstractItemView::SingleSelection);\n         ui->banlistWidget->setContextMenuPolicy(Qt::CustomContextMenu);\n-        ui->banlistWidget->setColumnWidth(BanTableModel::Address, BANSUBNET_COLUMN_WIDTH);\n-        ui->banlistWidget->setColumnWidth(BanTableModel::Bantime, BANTIME_COLUMN_WIDTH);\n+\n+        if (!ui->banlistWidget->horizontalHeader()->restoreState(m_banlist_widget_header_state)) {\n+            ui->banlistWidget->setColumnWidth(BanTableModel::Address, BANSUBNET_COLUMN_WIDTH);\n+            ui->banlistWidget->setColumnWidth(BanTableModel::Bantime, BANTIME_COLUMN_WIDTH);\n+        }\n         ui->banlistWidget->horizontalHeader()->setStretchLastSection(true);\n \n         // create ban table context menu\n         banTableContextMenu = new QMenu(this);\n-        banTableContextMenu->addAction(tr(\"Unban\"), this, &RPCConsole::unbanSelectedNode);\n+        banTableContextMenu->addAction(tr(\"&Unban\"), this, &RPCConsole::unbanSelectedNode);\n         connect(ui->banlistWidget, &QTableView::customContextMenuRequested, this, &RPCConsole::showBanTableContextMenu);\n \n         // ban table signal handling - clear peer details when clicking a peer in the ban table\n@@ -851,7 +887,6 @@ void RPCConsole::keyPressEvent(QKeyEvent *event)\n \n void RPCConsole::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->clearButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->fontBiggerButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/fontbigger\")));\n@@ -865,7 +900,8 @@ void RPCConsole::changeEvent(QEvent* e)\n                 platformStyle->SingleColorImage(ICON_MAPPING[i].source).scaled(QSize(consoleFontSize * 2, consoleFontSize * 2), Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n         }\n     }\n-#endif\n+\n+    QWidget::changeEvent(e);\n }\n \n void RPCConsole::message(int category, const QString &message, bool html)\n@@ -1171,6 +1207,11 @@ void RPCConsole::showEvent(QShowEvent *event)\n \n void RPCConsole::hideEvent(QHideEvent *event)\n {\n+    // It is too late to call QHeaderView::saveState() in ~RPCConsole(), as all of\n+    // the columns of QTableView child widgets will have zero width at that moment.\n+    m_peer_widget_header_state = ui->peerWidget->horizontalHeader()->saveState();\n+    m_banlist_widget_header_state = ui->banlistWidget->horizontalHeader()->saveState();\n+\n     QWidget::hideEvent(event);\n \n     if (!clientModel || !clientModel->getPeerTableModel())"
      },
      {
        "sha": "2412ae543c813dd06eee30153fd3a9d7e65f540d",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -10,9 +10,10 @@\n \n #include <net.h>\n \n-#include <QWidget>\n+#include <QByteArray>\n #include <QCompleter>\n #include <QThread>\n+#include <QWidget>\n \n class ClientModel;\n class PlatformStyle;\n@@ -167,6 +168,8 @@ public Q_SLOTS:\n     QThread thread;\n     WalletModel* m_last_wallet_model{nullptr};\n     bool m_is_executing{false};\n+    QByteArray m_peer_widget_header_state;\n+    QByteArray m_banlist_widget_header_state;\n \n     /** Update UI with latest network info from model. */\n     void updateNetworkState();"
      },
      {
        "sha": "c9bf757dfc9ca0296460128bf39d9d5421c978ce",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 10,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -199,7 +199,18 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         // set default rbf checkbox state\n         ui->optInRBF->setCheckState(Qt::Checked);\n \n-        if (model->wallet().privateKeysDisabled()) {\n+        if (model->wallet().hasExternalSigner()) {\n+            //: \"device\" usually means a hardware wallet\n+            ui->sendButton->setText(tr(\"Sign on device\"));\n+            if (gArgs.GetArg(\"-signer\", \"\") != \"\") {\n+                ui->sendButton->setEnabled(true);\n+                ui->sendButton->setToolTip(tr(\"Connect your hardware wallet first.\"));\n+            } else {\n+                ui->sendButton->setEnabled(false);\n+                //: \"External signer\" means using devices such as hardware wallets.\n+                ui->sendButton->setToolTip(tr(\"Set external signer script path in Options -> Wallet\"));\n+            }\n+        } else if (model->wallet().privateKeysDisabled()) {\n             ui->sendButton->setText(tr(\"Cr&eate Unsigned\"));\n             ui->sendButton->setToolTip(tr(\"Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n         }\n@@ -313,14 +324,14 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n         formatted.append(recipientElement);\n     }\n \n-    if (model->wallet().privateKeysDisabled()) {\n+    if (model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner()) {\n         question_string.append(tr(\"Do you want to draft this transaction?\"));\n     } else {\n         question_string.append(tr(\"Are you sure you want to send?\"));\n     }\n \n     question_string.append(\"<br /><span style='font-size:10pt;'>\");\n-    if (model->wallet().privateKeysDisabled()) {\n+    if (model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner()) {\n         question_string.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can save or copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n     } else {\n         question_string.append(tr(\"Please, review your transaction.\"));\n@@ -386,8 +397,8 @@ void SendCoinsDialog::sendButtonClicked([[maybe_unused]] bool checked)\n     if (!PrepareSendText(question_string, informative_text, detailed_text)) return;\n     assert(m_current_transaction);\n \n-    const QString confirmation = model->wallet().privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n-    const QString confirmButtonText = model->wallet().privateKeysDisabled() ? tr(\"Create Unsigned\") : tr(\"Send\");\n+    const QString confirmation = model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n+    const QString confirmButtonText = model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner() ? tr(\"Create Unsigned\") : tr(\"Sign and send\");\n     SendConfirmationDialog confirmationDialog(confirmation, question_string, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n@@ -403,9 +414,60 @@ void SendCoinsDialog::sendButtonClicked([[maybe_unused]] bool checked)\n         CMutableTransaction mtx = CMutableTransaction{*(m_current_transaction->getWtx())};\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete, nullptr);\n+        // Always fill without signing first. This prevents an external signer\n+        // from being called prematurely and is not expensive.\n+        TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, nullptr, psbtx, complete);\n         assert(!complete);\n         assert(err == TransactionError::OK);\n+        if (model->wallet().hasExternalSigner()) {\n+            try {\n+                err = model->wallet().fillPSBT(SIGHASH_ALL, true /* sign */, true /* bip32derivs */, nullptr, psbtx, complete);\n+            } catch (const std::runtime_error& e) {\n+                QMessageBox::critical(nullptr, tr(\"Sign failed\"), e.what());\n+                send_failure = true;\n+                return;\n+            }\n+            if (err == TransactionError::EXTERNAL_SIGNER_NOT_FOUND) {\n+                //: \"External signer\" means using devices such as hardware wallets.\n+                QMessageBox::critical(nullptr, tr(\"External signer not found\"), \"External signer not found\");\n+                send_failure = true;\n+                return;\n+            }\n+            if (err == TransactionError::EXTERNAL_SIGNER_FAILED) {\n+                //: \"External signer\" means using devices such as hardware wallets.\n+                QMessageBox::critical(nullptr, tr(\"External signer failure\"), \"External signer failure\");\n+                send_failure = true;\n+                return;\n+            }\n+            if (err != TransactionError::OK) {\n+                tfm::format(std::cerr, \"Failed to sign PSBT\");\n+                processSendCoinsReturn(WalletModel::TransactionCreationFailed);\n+                send_failure = true;\n+                return;\n+            }\n+            // fillPSBT does not always properly finalize\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+        }\n+\n+        // Broadcast transaction if complete (even with an external signer this\n+        // is not always the case, e.g. in a multisig wallet).\n+        if (complete) {\n+            const CTransactionRef tx = MakeTransactionRef(mtx);\n+            m_current_transaction->setWtx(tx);\n+            WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n+            // process sendStatus and on error generate message shown to user\n+            processSendCoinsReturn(sendStatus);\n+\n+            if (sendStatus.status == WalletModel::OK) {\n+                Q_EMIT coinsSent(m_current_transaction->getWtx()->GetHash());\n+            } else {\n+                send_failure = true;\n+            }\n+            return;\n+        }\n+\n+        // Copy PSBT to clipboard and offer to save\n+        assert(!complete);\n         // Serialize the PSBT\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n         ssTx << psbtx;\n@@ -447,7 +509,7 @@ void SendCoinsDialog::sendButtonClicked([[maybe_unused]] bool checked)\n             break;\n         default:\n             assert(false);\n-        }\n+        } // msgBox.exec()\n     } else {\n         // now send the prepared transaction\n         WalletModel::SendCoinsReturn sendStatus = model->sendCoins(*m_current_transaction);\n@@ -614,7 +676,9 @@ void SendCoinsDialog::setBalance(const interfaces::WalletBalances& balances)\n     if(model && model->getOptionsModel())\n     {\n         CAmount balance = balances.balance;\n-        if (model->wallet().privateKeysDisabled()) {\n+        if (model->wallet().hasExternalSigner()) {\n+            ui->labelBalanceName->setText(tr(\"External balance:\"));\n+        } else if (model->wallet().privateKeysDisabled()) {\n             balance = balances.watch_only_balance;\n             ui->labelBalanceName->setText(tr(\"Watch-only balance:\"));\n         }\n@@ -698,7 +762,7 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n {\n     // Include watch-only for wallets without private key\n-    m_coin_control->fAllowWatchOnly = model->wallet().privateKeysDisabled();\n+    m_coin_control->fAllowWatchOnly = model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner();\n \n     // Calculate available amount to send.\n     CAmount amount = model->wallet().getAvailableBalance(*m_coin_control);\n@@ -753,7 +817,7 @@ void SendCoinsDialog::updateCoinControlState()\n     m_coin_control->m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     m_coin_control->m_signal_bip125_rbf = ui->optInRBF->isChecked();\n     // Include watch-only for wallets without private key\n-    m_coin_control->fAllowWatchOnly = model->wallet().privateKeysDisabled();\n+    m_coin_control->fAllowWatchOnly = model->wallet().privateKeysDisabled() && !model->wallet().hasExternalSigner();\n }\n \n void SendCoinsDialog::updateNumberOfBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers, SynchronizationState sync_state) {"
      },
      {
        "sha": "683c0441fadda8bad143f5890653fb9cd12cb820",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -238,15 +238,15 @@ void SendCoinsEntry::updateDisplayUnit()\n \n void SendCoinsEntry::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->addressBookButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/address-book\")));\n         ui->pasteButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/editpaste\")));\n         ui->deleteButton->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->deleteButton_is->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n         ui->deleteButton_s->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n-#endif\n+\n+    QStackedWidget::changeEvent(e);\n }\n \n bool SendCoinsEntry::updateLabel(const QString &address)"
      },
      {
        "sha": "33589f09bfdeed4af9cc336101bcc677eac55324",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -286,7 +286,6 @@ bool SignVerifyMessageDialog::eventFilter(QObject *object, QEvent *event)\n \n void SignVerifyMessageDialog::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         ui->addressBookButton_SM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/address-book\")));\n         ui->pasteButton_SM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/editpaste\")));\n@@ -297,5 +296,6 @@ void SignVerifyMessageDialog::changeEvent(QEvent* e)\n         ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/transaction_0\")));\n         ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(QStringLiteral(\":/icons/remove\")));\n     }\n-#endif\n+\n+    QDialog::changeEvent(e);\n }"
      },
      {
        "sha": "9c31cd50dfd7cfc022499643099b588d7287a255",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -85,11 +85,6 @@ void AppTests::appTests()\n     // Reset global state to avoid interfering with later tests.\n     LogInstance().DisconnectTestLogger();\n     AbortShutdown();\n-    {\n-        LOCK(cs_main);\n-        UnloadBlockIndex(/* mempool */ nullptr, g_chainman);\n-        g_chainman.Reset();\n-    }\n }\n \n //! Entry point for BitcoinGUI tests."
      },
      {
        "sha": "e883337fb53c60f04db8532d55e17ddba9f4f830",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -69,7 +69,7 @@ uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CTxDe\n         ->findChild<QCheckBox*>(\"optInRBF\")\n         ->setCheckState(rbf ? Qt::Checked : Qt::Unchecked);\n     uint256 txid;\n-    boost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect([&txid](CWallet*, const uint256& hash, ChangeType status) {\n+    boost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect([&txid](const uint256& hash, ChangeType status) {\n         if (status == CT_NEW) txid = hash;\n     }));\n     ConfirmSend();\n@@ -146,14 +146,14 @@ void TestGUI(interfaces::Node& node)\n         LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n         spk_man->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n-        wallet->SetLastBlockProcessed(105, ::ChainActive().Tip()->GetBlockHash());\n+        wallet->SetLastBlockProcessed(105, node.context()->chainman->ActiveChain().Tip()->GetBlockHash());\n     }\n     {\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, 0 /* block height */, {} /* max height */, reserver, true /* fUpdate */);\n         QCOMPARE(result.status, CWallet::ScanResult::SUCCESS);\n-        QCOMPARE(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n+        QCOMPARE(result.last_scanned_block, node.context()->chainman->ActiveChain().Tip()->GetBlockHash());\n         QVERIFY(result.last_failed_block.IsNull());\n     }\n     wallet->SetBroadcastTransactions(true);\n@@ -224,6 +224,7 @@ void TestGUI(interfaces::Node& node)\n     int initialRowCount = requestTableModel->rowCount({});\n     QPushButton* requestPaymentButton = receiveCoinsDialog.findChild<QPushButton*>(\"receiveButton\");\n     requestPaymentButton->click();\n+    QString address;\n     for (QWidget* widget : QApplication::topLevelWidgets()) {\n         if (widget->inherits(\"ReceiveRequestDialog\")) {\n             ReceiveRequestDialog* receiveRequestDialog = qobject_cast<ReceiveRequestDialog*>(widget);\n@@ -232,6 +233,9 @@ void TestGUI(interfaces::Node& node)\n             QString uri = receiveRequestDialog->QObject::findChild<QLabel*>(\"uri_content\")->text();\n             QCOMPARE(uri.count(\"bitcoin:\"), 2);\n             QCOMPARE(receiveRequestDialog->QObject::findChild<QLabel*>(\"address_tag\")->text(), QString(\"Address:\"));\n+            QVERIFY(address.isEmpty());\n+            address = receiveRequestDialog->QObject::findChild<QLabel*>(\"address_content\")->text();\n+            QVERIFY(!address.isEmpty());\n \n             QCOMPARE(uri.count(\"amount=0.00000001\"), 2);\n             QCOMPARE(receiveRequestDialog->QObject::findChild<QLabel*>(\"amount_tag\")->text(), QString(\"Amount:\"));\n@@ -258,12 +262,30 @@ void TestGUI(interfaces::Node& node)\n     int currentRowCount = requestTableModel->rowCount({});\n     QCOMPARE(currentRowCount, initialRowCount+1);\n \n+    // Check addition to wallet\n+    std::vector<std::string> requests = walletModel.wallet().getAddressReceiveRequests();\n+    QCOMPARE(requests.size(), size_t{1});\n+    RecentRequestEntry entry;\n+    CDataStream{MakeUCharSpan(requests[0]), SER_DISK, CLIENT_VERSION} >> entry;\n+    QCOMPARE(entry.nVersion, int{1});\n+    QCOMPARE(entry.id, int64_t{1});\n+    QVERIFY(entry.date.isValid());\n+    QCOMPARE(entry.recipient.address, address);\n+    QCOMPARE(entry.recipient.label, QString{\"TEST_LABEL_1\"});\n+    QCOMPARE(entry.recipient.amount, CAmount{1});\n+    QCOMPARE(entry.recipient.message, QString{\"TEST_MESSAGE_1\"});\n+    QCOMPARE(entry.recipient.sPaymentRequest, std::string{});\n+    QCOMPARE(entry.recipient.authenticatedMerchant, QString{});\n+\n     // Check Remove button\n     QTableView* table = receiveCoinsDialog.findChild<QTableView*>(\"recentRequestsView\");\n     table->selectRow(currentRowCount-1);\n     QPushButton* removeRequestButton = receiveCoinsDialog.findChild<QPushButton*>(\"removeRequestButton\");\n     removeRequestButton->click();\n     QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n+\n+    // Check removal from wallet\n+    QCOMPARE(walletModel.wallet().getAddressReceiveRequests().size(), size_t{0});\n }\n \n } // namespace"
      },
      {
        "sha": "83d17a32c089c2c27e9d17949a00700f486c54ae",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -163,19 +163,19 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n \n     contextMenu = new QMenu(this);\n     contextMenu->setObjectName(\"contextMenu\");\n-    copyAddressAction = contextMenu->addAction(tr(\"Copy address\"), this, &TransactionView::copyAddress);\n-    copyLabelAction = contextMenu->addAction(tr(\"Copy label\"), this, &TransactionView::copyLabel);\n-    contextMenu->addAction(tr(\"Copy amount\"), this, &TransactionView::copyAmount);\n-    contextMenu->addAction(tr(\"Copy transaction ID\"), this, &TransactionView::copyTxID);\n-    contextMenu->addAction(tr(\"Copy raw transaction\"), this, &TransactionView::copyTxHex);\n-    contextMenu->addAction(tr(\"Copy full transaction details\"), this, &TransactionView::copyTxPlainText);\n-    contextMenu->addAction(tr(\"Show transaction details\"), this, &TransactionView::showDetails);\n+    copyAddressAction = contextMenu->addAction(tr(\"&Copy address\"), this, &TransactionView::copyAddress);\n+    copyLabelAction = contextMenu->addAction(tr(\"Copy &label\"), this, &TransactionView::copyLabel);\n+    contextMenu->addAction(tr(\"Copy &amount\"), this, &TransactionView::copyAmount);\n+    contextMenu->addAction(tr(\"Copy transaction &ID\"), this, &TransactionView::copyTxID);\n+    contextMenu->addAction(tr(\"Copy &raw transaction\"), this, &TransactionView::copyTxHex);\n+    contextMenu->addAction(tr(\"Copy full transaction &details\"), this, &TransactionView::copyTxPlainText);\n+    contextMenu->addAction(tr(\"&Show transaction details\"), this, &TransactionView::showDetails);\n     contextMenu->addSeparator();\n-    bumpFeeAction = contextMenu->addAction(tr(\"Increase transaction fee\"));\n+    bumpFeeAction = contextMenu->addAction(tr(\"Increase transaction &fee\"));\n     GUIUtil::ExceptionSafeConnect(bumpFeeAction, &QAction::triggered, this, &TransactionView::bumpFee);\n     bumpFeeAction->setObjectName(\"bumpFeeAction\");\n-    abandonAction = contextMenu->addAction(tr(\"Abandon transaction\"), this, &TransactionView::abandonTx);\n-    contextMenu->addAction(tr(\"Edit address label\"), this, &TransactionView::editLabel);\n+    abandonAction = contextMenu->addAction(tr(\"A&bandon transaction\"), this, &TransactionView::abandonTx);\n+    contextMenu->addAction(tr(\"&Edit address label\"), this, &TransactionView::editLabel);\n \n     connect(dateWidget, qOverload<int>(&QComboBox::activated), this, &TransactionView::chooseDate);\n     connect(typeWidget, qOverload<int>(&QComboBox::activated), this, &TransactionView::chooseType);\n@@ -245,7 +245,6 @@ void TransactionView::setModel(WalletModel *_model)\n \n void TransactionView::changeEvent(QEvent* e)\n {\n-#ifdef Q_OS_MACOS\n     if (e->type() == QEvent::PaletteChange) {\n         watchOnlyWidget->setItemIcon(\n             TransactionFilterProxy::WatchOnlyFilter_Yes,\n@@ -254,7 +253,8 @@ void TransactionView::changeEvent(QEvent* e)\n             TransactionFilterProxy::WatchOnlyFilter_No,\n             m_platform_style->SingleColorIcon(QStringLiteral(\":/icons/eye_minus\")));\n     }\n-#endif\n+\n+    QWidget::changeEvent(e);\n }\n \n void TransactionView::chooseDate(int idx)"
      },
      {
        "sha": "3cceb5ca5a4d572abe903460ce731892adedc438",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,6 +11,7 @@\n #include <qt/guiutil.h>\n #include <qt/walletmodel.h>\n \n+#include <external_signer.h>\n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n #include <util/string.h>\n@@ -263,6 +264,9 @@ void CreateWalletActivity::createWallet()\n     if (m_create_wallet_dialog->isDescriptorWalletChecked()) {\n         flags |= WALLET_FLAG_DESCRIPTORS;\n     }\n+    if (m_create_wallet_dialog->isExternalSignerChecked()) {\n+        flags |= WALLET_FLAG_EXTERNAL_SIGNER;\n+    }\n \n     QTimer::singleShot(500, worker(), [this, name, flags] {\n         std::unique_ptr<interfaces::Wallet> wallet = node().walletClient().createWallet(name, m_passphrase, flags, m_error_message, m_warning_message);\n@@ -291,6 +295,15 @@ void CreateWalletActivity::finish()\n void CreateWalletActivity::create()\n {\n     m_create_wallet_dialog = new CreateWalletDialog(m_parent_widget);\n+\n+    std::vector<ExternalSigner> signers;\n+    try {\n+        signers = node().externalSigners();\n+    } catch (const std::runtime_error& e) {\n+        QMessageBox::critical(nullptr, tr(\"Can't list signers\"), e.what());\n+    }\n+    m_create_wallet_dialog->setSigners(signers);\n+\n     m_create_wallet_dialog->setWindowModality(Qt::ApplicationModal);\n     m_create_wallet_dialog->show();\n "
      },
      {
        "sha": "a1f357e0db57cd8a7a01b3d8e628b443848068b5",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 31,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -4,10 +4,7 @@\n \n #include <qt/walletframe.h>\n \n-#include <qt/bitcoingui.h>\n-#include <qt/createwalletdialog.h>\n #include <qt/overviewpage.h>\n-#include <qt/walletcontroller.h>\n #include <qt/walletmodel.h>\n #include <qt/walletview.h>\n \n@@ -19,9 +16,8 @@\n #include <QPushButton>\n #include <QVBoxLayout>\n \n-WalletFrame::WalletFrame(const PlatformStyle* _platformStyle, BitcoinGUI* _gui)\n-    : QFrame(_gui),\n-      gui(_gui),\n+WalletFrame::WalletFrame(const PlatformStyle* _platformStyle, QWidget* parent)\n+    : QFrame(parent),\n       platformStyle(_platformStyle),\n       m_size_hint(OverviewPage{platformStyle, nullptr}.sizeHint())\n {\n@@ -42,11 +38,7 @@ WalletFrame::WalletFrame(const PlatformStyle* _platformStyle, BitcoinGUI* _gui)\n \n     // A button for create wallet dialog\n     QPushButton* create_wallet_button = new QPushButton(tr(\"Create a new wallet\"), walletStack);\n-    connect(create_wallet_button, &QPushButton::clicked, [this] {\n-        auto activity = new CreateWalletActivity(gui->getWalletController(), this);\n-        connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n-        activity->create();\n-    });\n+    connect(create_wallet_button, &QPushButton::clicked, this, &WalletFrame::createWalletButtonClicked);\n     no_wallet_layout->addWidget(create_wallet_button, 0, Qt::AlignHCenter | Qt::AlignTop);\n     no_wallet_group->setLayout(no_wallet_layout);\n \n@@ -66,17 +58,15 @@ void WalletFrame::setClientModel(ClientModel *_clientModel)\n     }\n }\n \n-bool WalletFrame::addWallet(WalletModel *walletModel)\n+bool WalletFrame::addWallet(WalletModel* walletModel, WalletView* walletView)\n {\n-    if (!gui || !clientModel || !walletModel) return false;\n+    if (!clientModel || !walletModel) return false;\n \n     if (mapWalletViews.count(walletModel) > 0) return false;\n \n-    WalletView *walletView = new WalletView(platformStyle, this);\n     walletView->setClientModel(clientModel);\n     walletView->setWalletModel(walletModel);\n     walletView->showOutOfSyncWarning(bOutOfSync);\n-    walletView->setPrivacy(gui->isPrivacyModeActivated());\n \n     WalletView* current_wallet_view = currentWalletView();\n     if (current_wallet_view) {\n@@ -88,17 +78,6 @@ bool WalletFrame::addWallet(WalletModel *walletModel)\n     walletStack->addWidget(walletView);\n     mapWalletViews[walletModel] = walletView;\n \n-    connect(walletView, &WalletView::outOfSyncWarningClicked, this, &WalletFrame::outOfSyncWarningClicked);\n-    connect(walletView, &WalletView::transactionClicked, gui, &BitcoinGUI::gotoHistoryPage);\n-    connect(walletView, &WalletView::coinsSent, gui, &BitcoinGUI::gotoHistoryPage);\n-    connect(walletView, &WalletView::message, [this](const QString& title, const QString& message, unsigned int style) {\n-        gui->message(title, message, style);\n-    });\n-    connect(walletView, &WalletView::encryptionStatusChanged, gui, &BitcoinGUI::updateWalletStatus);\n-    connect(walletView, &WalletView::incomingTransaction, gui, &BitcoinGUI::incomingTransaction);\n-    connect(walletView, &WalletView::hdEnabledStatusChanged, gui, &BitcoinGUI::updateWalletStatus);\n-    connect(gui, &BitcoinGUI::setPrivacy, walletView, &WalletView::setPrivacy);\n-\n     return true;\n }\n \n@@ -263,8 +242,3 @@ WalletModel* WalletFrame::currentWalletModel() const\n     WalletView* wallet_view = currentWalletView();\n     return wallet_view ? wallet_view->getWalletModel() : nullptr;\n }\n-\n-void WalletFrame::outOfSyncWarningClicked()\n-{\n-    Q_EMIT requestedSyncWarningInfo();\n-}"
      },
      {
        "sha": "4f77bd716fe8809e00e41638d292d76782820337",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -8,7 +8,6 @@\n #include <QFrame>\n #include <QMap>\n \n-class BitcoinGUI;\n class ClientModel;\n class PlatformStyle;\n class SendCoinsRecipient;\n@@ -31,12 +30,12 @@ class WalletFrame : public QFrame\n     Q_OBJECT\n \n public:\n-    explicit WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui = nullptr);\n+    explicit WalletFrame(const PlatformStyle* platformStyle, QWidget* parent);\n     ~WalletFrame();\n \n     void setClientModel(ClientModel *clientModel);\n \n-    bool addWallet(WalletModel *walletModel);\n+    bool addWallet(WalletModel* walletModel, WalletView* walletView);\n     void setCurrentWallet(WalletModel* wallet_model);\n     void removeWallet(WalletModel* wallet_model);\n     void removeAllWallets();\n@@ -48,12 +47,10 @@ class WalletFrame : public QFrame\n     QSize sizeHint() const override { return m_size_hint; }\n \n Q_SIGNALS:\n-    /** Notify that the user has requested more information about the out-of-sync warning */\n-    void requestedSyncWarningInfo();\n+    void createWalletButtonClicked();\n \n private:\n     QStackedWidget *walletStack;\n-    BitcoinGUI *gui;\n     ClientModel *clientModel;\n     QMap<WalletModel*, WalletView*> mapWalletViews;\n \n@@ -98,8 +95,6 @@ public Q_SLOTS:\n     void usedSendingAddresses();\n     /** Show used receiving addresses */\n     void usedReceivingAddresses();\n-    /** Pass on signal over requested out-of-sync-warning information */\n-    void outOfSyncWarningClicked();\n };\n \n #endif // BITCOIN_QT_WALLETFRAME_H"
      },
      {
        "sha": "967dd588b490bf8daee0d381704bcee88a859149",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 20,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -466,25 +466,6 @@ void WalletModel::UnlockContext::CopyFrom(UnlockContext&& rhs)\n     rhs.relock = false;\n }\n \n-void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n-{\n-    vReceiveRequests = m_wallet->getDestValues(\"rr\"); // receive request\n-}\n-\n-bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)\n-{\n-    CTxDestination dest = DecodeDestination(sAddress);\n-\n-    std::stringstream ss;\n-    ss << nId;\n-    std::string key = \"rr\" + ss.str(); // \"rr\" prefix = \"receive request\" in destdata\n-\n-    if (sRequest.empty())\n-        return m_wallet->eraseDestData(dest, key);\n-    else\n-        return m_wallet->addDestData(dest, key, sRequest);\n-}\n-\n bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n {\n     CCoinControl coin_control;\n@@ -544,7 +525,7 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     if (create_psbt) {\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete, nullptr);\n+        const TransactionError err = wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, nullptr, psbtx, complete);\n         if (err != TransactionError::OK || complete) {\n             QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Can't draft transaction.\"));\n             return false;\n@@ -571,6 +552,18 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     return true;\n }\n \n+bool WalletModel::displayAddress(std::string sAddress)\n+{\n+    CTxDestination dest = DecodeDestination(sAddress);\n+    bool res = false;\n+    try {\n+        res = m_wallet->displayAddress(dest);\n+    } catch (const std::runtime_error& e) {\n+        QMessageBox::critical(nullptr, tr(\"Can't display address\"), e.what());\n+    }\n+    return res;\n+}\n+\n bool WalletModel::isWalletEnabled()\n {\n    return !gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET);"
      },
      {
        "sha": "47a21bcfcf9e751e15bd9cdda6e61bf2f93371c8",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -135,10 +135,8 @@ class WalletModel : public QObject\n \n     UnlockContext requestUnlock();\n \n-    void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n-    bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n-\n     bool bumpFee(uint256 hash, uint256& new_hash);\n+    bool displayAddress(std::string sAddress);\n \n     static bool isWalletEnabled();\n "
      },
      {
        "sha": "d185ddb7e85aa1b51295eb779452d78e652f4ef7",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -26,6 +26,11 @@ CTransactionRef& WalletModelTransaction::getWtx()\n     return wtx;\n }\n \n+void WalletModelTransaction::setWtx(const CTransactionRef& newTx)\n+{\n+    wtx = newTx;\n+}\n+\n unsigned int WalletModelTransaction::getTransactionSize()\n {\n     return wtx ? GetVirtualTransactionSize(*wtx) : 0;"
      },
      {
        "sha": "120d240d917dd0500309945defe62e644834a351",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -27,6 +27,8 @@ class WalletModelTransaction\n     QList<SendCoinsRecipient> getRecipients() const;\n \n     CTransactionRef& getWtx();\n+    void setWtx(const CTransactionRef&);\n+\n     unsigned int getTransactionSize();\n \n     void setTransactionFee(const CAmount& newFee);"
      },
      {
        "sha": "3b8cf4c7ed2b6dcf8cc4bfcdb0981f05dea0643c",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -73,7 +73,7 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     // Clicking on a transaction on the overview pre-selects the transaction on the transaction history page\n     connect(overviewPage, &OverviewPage::transactionClicked, transactionView, qOverload<const QModelIndex&>(&TransactionView::focusTransaction));\n \n-    connect(overviewPage, &OverviewPage::outOfSyncWarningClicked, this, &WalletView::requestedSyncWarningInfo);\n+    connect(overviewPage, &OverviewPage::outOfSyncWarningClicked, this, &WalletView::outOfSyncWarningClicked);\n \n     connect(sendCoinsPage, &SendCoinsDialog::coinsSent, this, &WalletView::coinsSent);\n     // Highlight transaction after send\n@@ -347,8 +347,3 @@ void WalletView::showProgress(const QString &title, int nProgress)\n         }\n     }\n }\n-\n-void WalletView::requestedSyncWarningInfo()\n-{\n-    Q_EMIT outOfSyncWarningClicked();\n-}"
      },
      {
        "sha": "fedf06b710e65e770ac523a2b352ea6568a4dd5d",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -111,9 +111,6 @@ public Q_SLOTS:\n     /** Show progress dialog e.g. for rescan */\n     void showProgress(const QString &title, int nProgress);\n \n-    /** User has requested more information about the out of sync state */\n-    void requestedSyncWarningInfo();\n-\n Q_SIGNALS:\n     void setPrivacy(bool privacy);\n     void transactionClicked();"
      },
      {
        "sha": "e50ab33e5440a9fe40b39b1b927f9fc1dec90842",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -125,7 +125,7 @@ static ChainstateManager* GetChainman(const std::any& context, HTTPRequest* req)\n                           __FILE__, __LINE__, __func__, PACKAGE_BUGREPORT));\n         return nullptr;\n     }\n-    return node_context->chainman;\n+    return node_context->chainman.get();\n }\n \n static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n@@ -524,6 +524,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n         // convert hex to bin, continue then with bin part\n         std::vector<unsigned char> strRequestV = ParseHex(strRequestMutable);\n         strRequestMutable.assign(strRequestV.begin(), strRequestV.end());\n+        [[fallthrough]];\n     }\n \n     case RetFormat::BINARY: {"
      },
      {
        "sha": "c4a89c9772abfa94b85e7bc2d17dc933cc315e29",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 32,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -10,8 +10,11 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>\n@@ -37,6 +40,7 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <versionbits.h>\n #include <warnings.h>\n \n #include <stdint.h>\n@@ -84,7 +88,6 @@ ChainstateManager& EnsureChainman(const NodeContext& node)\n     if (!node.chainman) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n     }\n-    WITH_LOCK(::cs_main, CHECK_NONFATAL(std::addressof(g_chainman) == std::addressof(*node.chainman)));\n     return *node.chainman;\n }\n \n@@ -1344,32 +1347,29 @@ static RPCHelpMan verifychain()\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int softfork_height, int tip_height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     // For buried deployments.\n-    // A buried deployment is one where the height of the activation has been hardcoded into\n-    // the client implementation long after the consensus change has activated. See BIP 90.\n-    // Buried deployments with activation height value of\n-    // std::numeric_limits<int>::max() are disabled and thus hidden.\n-    if (softfork_height == std::numeric_limits<int>::max()) return;\n+\n+    if (!DeploymentEnabled(params, dep)) return;\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", tip_height + 1 >= softfork_height);\n-    rv.pushKV(\"height\", softfork_height);\n-    softforks.pushKV(name, rv);\n+    rv.pushKV(\"active\", DeploymentActiveAfter(active_chain_tip, params, dep));\n+    rv.pushKV(\"height\", params.DeploymentHeight(dep));\n+    softforks.pushKV(DeploymentName(dep), rv);\n }\n \n-static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n-    // Deployments that are never active are hidden.\n-    if (consensusParams.vDeployments[id].nStartTime == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n+\n+    if (!DeploymentEnabled(consensusParams, id)) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, versionbitscache);\n+    const ThresholdState thresholdState = g_versionbitscache.State(active_chain_tip, consensusParams, id);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1383,12 +1383,12 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, versionbitscache);\n+    int64_t since_height = g_versionbitscache.StateSinceHeight(active_chain_tip, consensusParams, id);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(active_chain_tip, consensusParams, id);\n+        BIP9Stats statsStruct = g_versionbitscache.Statistics(active_chain_tip, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n@@ -1406,7 +1406,7 @@ static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniVal\n     }\n     rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n \n-    softforks.pushKV(name, rv);\n+    softforks.pushKV(DeploymentName(id), rv);\n }\n \n RPCHelpMan getblockchaininfo()\n@@ -1503,14 +1503,14 @@ RPCHelpMan getblockchaininfo()\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     UniValue softforks(UniValue::VOBJ);\n-    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height, height);\n-    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height, height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight, height);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight, height);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(tip, softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n-    obj.pushKV(\"softforks\",             softforks);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CSV);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    obj.pushKV(\"softforks\", softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n     return obj;\n@@ -1707,7 +1707,7 @@ static RPCHelpMan preciousblock()\n     }\n \n     BlockValidationState state;\n-    chainman.ActiveChainstate().PreciousBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().PreciousBlock(state, pblockindex);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -1744,10 +1744,10 @@ static RPCHelpMan invalidateblock()\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n-    chainman.ActiveChainstate().InvalidateBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().InvalidateBlock(state, pblockindex);\n \n     if (state.IsValid()) {\n-        chainman.ActiveChainstate().ActivateBestChain(state, Params());\n+        chainman.ActiveChainstate().ActivateBestChain(state);\n     }\n \n     if (!state.IsValid()) {\n@@ -1788,7 +1788,7 @@ static RPCHelpMan reconsiderblock()\n     }\n \n     BlockValidationState state;\n-    chainman.ActiveChainstate().ActivateBestChain(state, Params());\n+    chainman.ActiveChainstate().ActivateBestChain(state);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -2259,13 +2259,15 @@ class CoinsViewScanReserver\n         if (g_scan_in_progress.exchange(true)) {\n             return false;\n         }\n+        CHECK_NONFATAL(g_scan_progress == 0);\n         m_could_reserve = true;\n         return true;\n     }\n \n     ~CoinsViewScanReserver() {\n         if (m_could_reserve) {\n             g_scan_in_progress = false;\n+            g_scan_progress = 0;\n         }\n     }\n };\n@@ -2382,7 +2384,6 @@ static RPCHelpMan scantxoutset()\n         std::vector<CTxOut> input_txos;\n         std::map<COutPoint, Coin> coins;\n         g_should_abort_scan = false;\n-        g_scan_progress = 0;\n         int64_t count = 0;\n         std::unique_ptr<CCoinsViewCursor> pcursor;\n         CBlockIndex* tip;\n@@ -2392,7 +2393,7 @@ static RPCHelpMan scantxoutset()\n             LOCK(cs_main);\n             CChainState& active_chainstate = chainman.ActiveChainstate();\n             active_chainstate.ForceFlushStateToDisk();\n-            pcursor = std::unique_ptr<CCoinsViewCursor>(active_chainstate.CoinsDB().Cursor());\n+            pcursor = active_chainstate.CoinsDB().Cursor();\n             CHECK_NONFATAL(pcursor);\n             tip = active_chainstate.m_chain.Tip();\n             CHECK_NONFATAL(tip);\n@@ -2591,7 +2592,7 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n \n-        pcursor = std::unique_ptr<CCoinsViewCursor>(chainstate.CoinsDB().Cursor());\n+        pcursor = chainstate.CoinsDB().Cursor();\n         tip = chainstate.m_blockman.LookupBlockIndex(stats.hashBlock);\n         CHECK_NONFATAL(tip);\n     }"
      },
      {
        "sha": "692096367c8ed2b422a81cdd81652989eb73dd3e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -10,6 +10,8 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n+#include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n@@ -34,7 +36,6 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n-#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <memory>\n@@ -114,7 +115,6 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\n \n     {\n         LOCK(cs_main);\n-        CHECK_NONFATAL(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n         IncrementExtraNonce(&block, chainman.ActiveChain().Tip(), extra_nonce);\n     }\n \n@@ -147,7 +147,6 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n-        CHECK_NONFATAL(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n         nHeight = chainman.ActiveChain().Height();\n         nHeightEnd = nHeight+nGenerate;\n     }\n@@ -776,7 +775,7 @@ static RPCHelpMan getblocktemplate()\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n+    const bool fPreSegWit = !DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n \n@@ -842,24 +841,24 @@ static RPCHelpMan getblocktemplate()\n     UniValue vbavailable(UniValue::VOBJ);\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n-        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n+        ThresholdState state = g_versionbitscache.State(pindexPrev, consensusParams, pos);\n         switch (state) {\n             case ThresholdState::DEFINED:\n             case ThresholdState::FAILED:\n                 // Not exposed to GBT at all\n                 break;\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n-                pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n-                // FALL THROUGH to get vbavailable set...\n+                pblock->nVersion |= g_versionbitscache.Mask(consensusParams, pos);\n+                [[fallthrough]];\n             case ThresholdState::STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n                 vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n-                        pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n+                        pblock->nVersion &= ~g_versionbitscache.Mask(consensusParams, pos);\n                     }\n                 }\n                 break;"
      },
      {
        "sha": "5178ce60e80bcbc5a13129305abcd37ce81f441b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -131,6 +131,9 @@ static RPCHelpMan createmultisig()\n         if (!ParseOutputType(request.params[2].get_str(), output_type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[2].get_str()));\n         }\n+        if (output_type == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"createmultisig cannot create bech32m multisig addresses\");\n+        }\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "3013c76825eca83d37efea03a908e56c1997cb21",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -939,7 +939,7 @@ static RPCHelpMan addpeeraddress()\n     bool success{false};\n \n     if (LookupHost(addr_string, net_addr, false)) {\n-        CAddress address{CAddress({net_addr, port}, ServiceFlags(NODE_NETWORK | NODE_WITNESS))};\n+        CAddress address{{net_addr, port}, ServiceFlags{NODE_NETWORK | NODE_WITNESS}};\n         address.nTime = GetAdjustedTime();\n         // The source address is set equal to the address. This is equivalent to the peer\n         // announcing itself."
      },
      {
        "sha": "617dfec98f84509be7748fa4af91aa12332d90fd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -753,7 +753,8 @@ static RPCHelpMan signrawtransactionwithkey()\n                                 },\n                         },\n                         },\n-                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"ALL\"}, \"The signature hash type. Must be one of:\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type. Must be one of:\\n\"\n+            \"       \\\"DEFAULT\\\"\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -889,12 +890,11 @@ static RPCHelpMan testmempoolaccept()\n                 \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n                 \"\\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\\n\"\n                 \"\\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\\n\"\n-                \"\\nThe maximum number of transactions allowed is 25 (MAX_PACKAGE_COUNT)\\n\"\n+                \"\\nThe maximum number of transactions allowed is \" + ToString(MAX_PACKAGE_COUNT) + \".\\n\"\n                 \"\\nThis checks if transactions violate the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n-                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\\n\"\n-            \"                                        Length must be one for now.\",\n+                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\",\n                         {\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n@@ -905,7 +905,7 @@ static RPCHelpMan testmempoolaccept()\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n                         \"Returns results for each transaction in the same order they were passed in.\\n\"\n-                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if another transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n@@ -939,7 +939,6 @@ static RPCHelpMan testmempoolaccept()\n         UniValue::VARR,\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n-\n     const UniValue raw_transactions = request.params[0].get_array();\n     if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER,\n@@ -951,6 +950,7 @@ static RPCHelpMan testmempoolaccept()\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     std::vector<CTransactionRef> txns;\n+    txns.reserve(raw_transactions.size());\n     for (const auto& rawtx : raw_transactions.getValues()) {\n         CMutableTransaction mtx;\n         if (!DecodeHexTx(mtx, rawtx.get_str())) {\n@@ -971,8 +971,8 @@ static RPCHelpMan testmempoolaccept()\n     }();\n \n     UniValue rpc_result(UniValue::VARR);\n-    // We will check transaction fees we iterate through txns in order. If any transaction fee\n-    // exceeds maxfeerate, we will keave the rest of the validation results blank, because it\n+    // We will check transaction fees while we iterate through txns in order. If any transaction fee\n+    // exceeds maxfeerate, we will leave the rest of the validation results blank, because it\n     // doesn't make sense to return a validation result for a transaction if its ancestor(s) would\n     // not be submitted.\n     bool exit_early{false};\n@@ -1655,6 +1655,7 @@ static RPCHelpMan utxoupdatepsbt()\n     }\n \n     // Fill the inputs\n+    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         PSBTInput& input = psbtx.inputs.at(i);\n \n@@ -1671,7 +1672,7 @@ static RPCHelpMan utxoupdatepsbt()\n         // Update script/keypath information using descriptor data.\n         // Note that SignPSBTInput does a lot more than just constructing ECDSA signatures\n         // we don't actually care about those here, in fact.\n-        SignPSBTInput(public_provider, psbtx, i, /* sighash_type */ 1);\n+        SignPSBTInput(public_provider, psbtx, i, &txdata, /* sighash_type */ 1);\n     }\n \n     // Update script/keypath information using descriptor data."
      },
      {
        "sha": "2059628b5401b7956a4781c69250b69b60f6e801",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -301,6 +301,16 @@ class DescribeAddressVisitor\n         return obj;\n     }\n \n+    UniValue operator()(const WitnessV1Taproot& tap) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 1);\n+        obj.pushKV(\"witness_program\", HexStr(tap));\n+        return obj;\n+    }\n+\n     UniValue operator()(const WitnessUnknown& id) const\n     {\n         UniValue obj(UniValue::VOBJ);"
      },
      {
        "sha": "682b55742a52ea132361a89905fbbe82b37c80f0",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 343,
        "deletions": 83,
        "changes": 426,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -166,7 +166,7 @@ struct PubkeyProvider\n      *  write_cache is the cache to write keys to (if not nullptr)\n      *  Caches are not exclusive but this is not tested. Currently we use them exclusively\n      */\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) = 0;\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const = 0;\n \n     /** Whether this represent multiple public keys at different positions. */\n     virtual bool IsRange() const = 0;\n@@ -181,7 +181,7 @@ struct PubkeyProvider\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n \n     /** Get the descriptor string form with the xpub at the last hardened derivation */\n-    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n@@ -199,7 +199,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n public:\n     OriginPubkeyProvider(uint32_t exp_index, KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : PubkeyProvider(exp_index), m_origin(std::move(info)), m_provider(std::move(provider)) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         if (!m_provider->GetPubKey(pos, arg, key, info, read_cache, write_cache)) return false;\n         std::copy(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint), info.fingerprint);\n@@ -216,10 +216,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n         ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n         std::string sub;\n-        if (!m_provider->ToNormalizedString(arg, sub, priv)) return false;\n+        if (!m_provider->ToNormalizedString(arg, sub, cache)) return false;\n         // If m_provider is a BIP32PubkeyProvider, we may get a string formatted like a OriginPubkeyProvider\n         // In that case, we need to strip out the leading square bracket and fingerprint from the substring,\n         // and append that to our own origin string.\n@@ -241,10 +241,11 @@ class OriginPubkeyProvider final : public PubkeyProvider\n class ConstPubkeyProvider final : public PubkeyProvider\n {\n     CPubKey m_pubkey;\n+    bool m_xonly;\n \n public:\n-    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey) : PubkeyProvider(exp_index), m_pubkey(pubkey) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    ConstPubkeyProvider(uint32_t exp_index, const CPubKey& pubkey, bool xonly) : PubkeyProvider(exp_index), m_pubkey(pubkey), m_xonly(xonly) {}\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         key = m_pubkey;\n         info.path.clear();\n@@ -254,17 +255,16 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     }\n     bool IsRange() const override { return false; }\n     size_t GetSize() const override { return m_pubkey.size(); }\n-    std::string ToString() const override { return HexStr(m_pubkey); }\n+    std::string ToString() const override { return m_xonly ? HexStr(m_pubkey).substr(2) : HexStr(m_pubkey); }\n     bool ToPrivateString(const SigningProvider& arg, std::string& ret) const override\n     {\n         CKey key;\n         if (!arg.GetKey(m_pubkey.GetID(), key)) return false;\n         ret = EncodeSecret(key);\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& ret, const DescriptorCache* cache) const override\n     {\n-        if (priv) return ToPrivateString(arg, ret);\n         ret = ToString();\n         return true;\n     }\n@@ -287,9 +287,6 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     CExtPubKey m_root_extkey;\n     KeyPath m_path;\n     DeriveType m_derive;\n-    // Cache of the parent of the final derived pubkeys.\n-    // Primarily useful for situations when no read_cache is provided\n-    CExtPubKey m_cached_xpub;\n \n     bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const\n     {\n@@ -304,11 +301,14 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n \n     // Derives the last xprv\n-    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv) const\n+    bool GetDerivedExtKey(const SigningProvider& arg, CExtKey& xprv, CExtKey& last_hardened) const\n     {\n         if (!GetExtKey(arg, xprv)) return false;\n         for (auto entry : m_path) {\n             xprv.Derive(xprv, entry);\n+            if (entry >> 31) {\n+                last_hardened = xprv;\n+            }\n         }\n         return true;\n     }\n@@ -326,7 +326,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     BIP32PubkeyProvider(uint32_t exp_index, const CExtPubKey& extkey, KeyPath path, DeriveType derive) : PubkeyProvider(exp_index), m_root_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key_out, KeyOriginInfo& final_info_out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n     {\n         // Info of parent of the to be derived pubkey\n         KeyOriginInfo parent_info;\n@@ -342,6 +342,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         // Derive keys or fetch them from cache\n         CExtPubKey final_extkey = m_root_extkey;\n         CExtPubKey parent_extkey = m_root_extkey;\n+        CExtPubKey last_hardened_extkey;\n         bool der = true;\n         if (read_cache) {\n             if (!read_cache->GetCachedDerivedExtPubKey(m_expr_index, pos, final_extkey)) {\n@@ -351,16 +352,17 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n                 final_extkey = parent_extkey;\n                 if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n             }\n-        } else if (m_cached_xpub.pubkey.IsValid() && m_derive != DeriveType::HARDENED) {\n-            parent_extkey = final_extkey = m_cached_xpub;\n-            if (m_derive == DeriveType::UNHARDENED) der = parent_extkey.Derive(final_extkey, pos);\n         } else if (IsHardened()) {\n             CExtKey xprv;\n-            if (!GetDerivedExtKey(arg, xprv)) return false;\n+            CExtKey lh_xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n             parent_extkey = xprv.Neuter();\n             if (m_derive == DeriveType::UNHARDENED) der = xprv.Derive(xprv, pos);\n             if (m_derive == DeriveType::HARDENED) der = xprv.Derive(xprv, pos | 0x80000000UL);\n             final_extkey = xprv.Neuter();\n+            if (lh_xprv.key.IsValid()) {\n+                last_hardened_extkey = lh_xprv.Neuter();\n+            }\n         } else {\n             for (auto entry : m_path) {\n                 der = parent_extkey.Derive(parent_extkey, entry);\n@@ -375,15 +377,14 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         final_info_out = final_info_out_tmp;\n         key_out = final_extkey.pubkey;\n \n-        // We rely on the consumer to check that m_derive isn't HARDENED as above\n-        // But we can't have already cached something in case we read something from the cache\n-        // and parent_extkey isn't actually the parent.\n-        if (!m_cached_xpub.pubkey.IsValid()) m_cached_xpub = parent_extkey;\n-\n         if (write_cache) {\n             // Only cache parent if there is any unhardened derivation\n             if (m_derive != DeriveType::HARDENED) {\n                 write_cache->CacheParentExtPubKey(m_expr_index, parent_extkey);\n+                // Cache last hardened xpub if we have it\n+                if (last_hardened_extkey.pubkey.IsValid()) {\n+                    write_cache->CacheLastHardenedExtPubKey(m_expr_index, last_hardened_extkey);\n+                }\n             } else if (final_info_out.path.size() > 0) {\n                 write_cache->CacheDerivedExtPubKey(m_expr_index, pos, final_extkey);\n             }\n@@ -411,11 +412,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         return true;\n     }\n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override\n     {\n         // For hardened derivation type, just return the typical string, nothing to normalize\n         if (m_derive == DeriveType::HARDENED) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n@@ -428,33 +428,42 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         }\n         // Either no derivation or all unhardened derivation\n         if (i == -1) {\n-            if (priv) return ToPrivateString(arg, out);\n             out = ToString();\n             return true;\n         }\n-        // Derive the xpub at the last hardened step\n-        CExtKey xprv;\n-        if (!GetExtKey(arg, xprv)) return false;\n+        // Get the path to the last hardened stup\n         KeyOriginInfo origin;\n         int k = 0;\n         for (; k <= i; ++k) {\n-            // Derive\n-            xprv.Derive(xprv, m_path.at(k));\n             // Add to the path\n             origin.path.push_back(m_path.at(k));\n-            // First derivation element, get the fingerprint for origin\n-            if (k == 0) {\n-                std::copy(xprv.vchFingerprint, xprv.vchFingerprint + 4, origin.fingerprint);\n-            }\n         }\n         // Build the remaining path\n         KeyPath end_path;\n         for (; k < (int)m_path.size(); ++k) {\n             end_path.push_back(m_path.at(k));\n         }\n+        // Get the fingerprint\n+        CKeyID id = m_root_extkey.pubkey.GetID();\n+        std::copy(id.begin(), id.begin() + 4, origin.fingerprint);\n+\n+        CExtPubKey xpub;\n+        CExtKey lh_xprv;\n+        // If we have the cache, just get the parent xpub\n+        if (cache != nullptr) {\n+            cache->GetCachedLastHardenedExtPubKey(m_expr_index, xpub);\n+        }\n+        if (!xpub.pubkey.IsValid()) {\n+            // Cache miss, or nor cache, or need privkey\n+            CExtKey xprv;\n+            if (!GetDerivedExtKey(arg, xprv, lh_xprv)) return false;\n+            xpub = lh_xprv.Neuter();\n+        }\n+        assert(xpub.pubkey.IsValid());\n+\n         // Build the string\n         std::string origin_str = HexStr(origin.fingerprint) + FormatHDKeypath(origin.path);\n-        out = \"[\" + origin_str + \"]\" + (priv ? EncodeExtKey(xprv) : EncodeExtPubKey(xprv.Neuter())) + FormatHDKeypath(end_path);\n+        out = \"[\" + origin_str + \"]\" + EncodeExtPubKey(xpub) + FormatHDKeypath(end_path);\n         if (IsRange()) {\n             out += \"/*\";\n             assert(m_derive == DeriveType::UNHARDENED);\n@@ -464,7 +473,8 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const override\n     {\n         CExtKey extkey;\n-        if (!GetDerivedExtKey(arg, extkey)) return false;\n+        CExtKey dummy;\n+        if (!GetDerivedExtKey(arg, extkey, dummy)) return false;\n         if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n         if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n         key = extkey.key;\n@@ -505,6 +515,14 @@ class DescriptorImpl : public Descriptor\n public:\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args() {}\n     DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::unique_ptr<DescriptorImpl> script, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(Vector(std::move(script))) {}\n+    DescriptorImpl(std::vector<std::unique_ptr<PubkeyProvider>> pubkeys, std::vector<std::unique_ptr<DescriptorImpl>> scripts, const std::string& name) : m_pubkey_args(std::move(pubkeys)), m_name(name), m_subdescriptor_args(std::move(scripts)) {}\n+\n+    enum class StringType\n+    {\n+        PUBLIC,\n+        PRIVATE,\n+        NORMALIZED,\n+    };\n \n     bool IsSolvable() const override\n     {\n@@ -525,37 +543,41 @@ class DescriptorImpl : public Descriptor\n         return false;\n     }\n \n-    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, bool priv, bool normalized) const\n+    virtual bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         size_t pos = 0;\n         for (const auto& scriptarg : m_subdescriptor_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (!scriptarg->ToStringHelper(arg, tmp, priv, normalized)) return false;\n+            if (!scriptarg->ToStringHelper(arg, tmp, type, cache)) return false;\n             ret += std::move(tmp);\n         }\n         return true;\n     }\n \n-    bool ToStringHelper(const SigningProvider* arg, std::string& out, bool priv, bool normalized) const\n+    bool ToStringHelper(const SigningProvider* arg, std::string& out, const StringType type, const DescriptorCache* cache = nullptr) const\n     {\n         std::string extra = ToStringExtra();\n         size_t pos = extra.size() > 0 ? 1 : 0;\n         std::string ret = m_name + \"(\" + extra;\n         for (const auto& pubkey : m_pubkey_args) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n-            if (normalized) {\n-                if (!pubkey->ToNormalizedString(*arg, tmp, priv)) return false;\n-            } else if (priv) {\n-                if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n-            } else {\n-                tmp = pubkey->ToString();\n+            switch (type) {\n+                case StringType::NORMALIZED:\n+                    if (!pubkey->ToNormalizedString(*arg, tmp, cache)) return false;\n+                    break;\n+                case StringType::PRIVATE:\n+                    if (!pubkey->ToPrivateString(*arg, tmp)) return false;\n+                    break;\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n             }\n             ret += std::move(tmp);\n         }\n         std::string subscript;\n-        if (!ToStringSubScriptHelper(arg, subscript, priv, normalized)) return false;\n+        if (!ToStringSubScriptHelper(arg, subscript, type, cache)) return false;\n         if (pos && subscript.size()) ret += ',';\n         out = std::move(ret) + std::move(subscript) + \")\";\n         return true;\n@@ -564,20 +586,20 @@ class DescriptorImpl : public Descriptor\n     std::string ToString() const final\n     {\n         std::string ret;\n-        ToStringHelper(nullptr, ret, false, false);\n+        ToStringHelper(nullptr, ret, StringType::PUBLIC);\n         return AddChecksum(ret);\n     }\n \n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const final\n     {\n-        bool ret = ToStringHelper(&arg, out, true, false);\n+        bool ret = ToStringHelper(&arg, out, StringType::PRIVATE);\n         out = AddChecksum(out);\n         return ret;\n     }\n \n-    bool ToNormalizedString(const SigningProvider& arg, std::string& out, bool priv) const override final\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache) const override final\n     {\n-        bool ret = ToStringHelper(&arg, out, priv, true);\n+        bool ret = ToStringHelper(&arg, out, StringType::NORMALIZED, cache);\n         out = AddChecksum(out);\n         return ret;\n     }\n@@ -651,15 +673,7 @@ class AddressDescriptor final : public DescriptorImpl\n \n     std::optional<OutputType> GetOutputType() const override\n     {\n-        switch (m_destination.index()) {\n-            case 1 /* PKHash */:\n-            case 2 /* ScriptHash */: return OutputType::LEGACY;\n-            case 3 /* WitnessV0ScriptHash */:\n-            case 4 /* WitnessV0KeyHash */:\n-            case 5 /* WitnessUnknown */: return OutputType::BECH32;\n-            case 0 /* CNoDestination */:\n-            default: return std::nullopt;\n-        }\n+        return OutputTypeFromDestination(m_destination);\n     }\n     bool IsSingleType() const final { return true; }\n };\n@@ -679,26 +693,28 @@ class RawDescriptor final : public DescriptorImpl\n     {\n         CTxDestination dest;\n         ExtractDestination(m_script, dest);\n-        switch (dest.index()) {\n-            case 1 /* PKHash */:\n-            case 2 /* ScriptHash */: return OutputType::LEGACY;\n-            case 3 /* WitnessV0ScriptHash */:\n-            case 4 /* WitnessV0KeyHash */:\n-            case 5 /* WitnessUnknown */: return OutputType::BECH32;\n-            case 0 /* CNoDestination */:\n-            default: return std::nullopt;\n-        }\n+        return OutputTypeFromDestination(dest);\n     }\n     bool IsSingleType() const final { return true; }\n };\n \n /** A parsed pk(P) descriptor. */\n class PKDescriptor final : public DescriptorImpl\n {\n+private:\n+    const bool m_xonly;\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override { return Vector(GetScriptForRawPubKey(keys[0])); }\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override\n+    {\n+        if (m_xonly) {\n+            CScript script = CScript() << ToByteVector(XOnlyPubKey(keys[0])) << OP_CHECKSIG;\n+            return Vector(std::move(script));\n+        } else {\n+            return Vector(GetScriptForRawPubKey(keys[0]));\n+        }\n+    }\n public:\n-    PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), \"pk\") {}\n+    PKDescriptor(std::unique_ptr<PubkeyProvider> prov, bool xonly = false) : DescriptorImpl(Vector(std::move(prov)), \"pk\"), m_xonly(xonly) {}\n     bool IsSingleType() const final { return true; }\n };\n \n@@ -816,6 +832,58 @@ class WSHDescriptor final : public DescriptorImpl\n     bool IsSingleType() const final { return true; }\n };\n \n+/** A parsed tr(...) descriptor. */\n+class TRDescriptor final : public DescriptorImpl\n+{\n+    std::vector<int> m_depths;\n+protected:\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript> scripts, FlatSigningProvider& out) const override\n+    {\n+        TaprootBuilder builder;\n+        assert(m_depths.size() == scripts.size());\n+        for (size_t pos = 0; pos < m_depths.size(); ++pos) {\n+            builder.Add(m_depths[pos], scripts[pos], TAPROOT_LEAF_TAPSCRIPT);\n+        }\n+        if (!builder.IsComplete()) return {};\n+        assert(keys.size() == 1);\n+        XOnlyPubKey xpk(keys[0]);\n+        if (!xpk.IsFullyValid()) return {};\n+        builder.Finalize(xpk);\n+        WitnessV1Taproot output = builder.GetOutput();\n+        out.tr_spenddata[output].Merge(builder.GetSpendData());\n+        return Vector(GetScriptForDestination(output));\n+    }\n+    bool ToStringSubScriptHelper(const SigningProvider* arg, std::string& ret, const StringType type, const DescriptorCache* cache = nullptr) const override\n+    {\n+        if (m_depths.empty()) return true;\n+        std::vector<bool> path;\n+        for (size_t pos = 0; pos < m_depths.size(); ++pos) {\n+            if (pos) ret += ',';\n+            while ((int)path.size() <= m_depths[pos]) {\n+                if (path.size()) ret += '{';\n+                path.push_back(false);\n+            }\n+            std::string tmp;\n+            if (!m_subdescriptor_args[pos]->ToStringHelper(arg, tmp, type, cache)) return false;\n+            ret += std::move(tmp);\n+            while (!path.empty() && path.back()) {\n+                if (path.size() > 1) ret += '}';\n+                path.pop_back();\n+            }\n+            if (!path.empty()) path.back() = true;\n+        }\n+        return true;\n+    }\n+public:\n+    TRDescriptor(std::unique_ptr<PubkeyProvider> internal_key, std::vector<std::unique_ptr<DescriptorImpl>> descs, std::vector<int> depths) :\n+        DescriptorImpl(Vector(std::move(internal_key)), std::move(descs), \"tr\"), m_depths(std::move(depths))\n+    {\n+        assert(m_subdescriptor_args.size() == m_depths.size());\n+    }\n+    std::optional<OutputType> GetOutputType() const override { return OutputType::BECH32M; }\n+    bool IsSingleType() const final { return true; }\n+};\n+\n ////////////////////////////////////////////////////////////////////////////\n // Parser                                                                 //\n ////////////////////////////////////////////////////////////////////////////\n@@ -825,6 +893,7 @@ enum class ParseScriptContext {\n     P2SH,    //!< Inside sh() (script becomes P2SH redeemScript)\n     P2WPKH,  //!< Inside wpkh() (no script, pubkey only)\n     P2WSH,   //!< Inside wsh() (script becomes v0 witness script)\n+    P2TR,    //!< Inside tr() (either internal key, or BIP342 script leaf)\n };\n \n /** Parse a key path, being passed a split list of elements (the first element is ignored). */\n@@ -868,11 +937,18 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             CPubKey pubkey(data);\n             if (pubkey.IsFullyValid()) {\n                 if (permit_uncompressed || pubkey.IsCompressed()) {\n-                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, false);\n                 } else {\n                     error = \"Uncompressed keys are not allowed\";\n                     return nullptr;\n                 }\n+            } else if (data.size() == 32 && ctx == ParseScriptContext::P2TR) {\n+                unsigned char fullkey[33] = {0x02};\n+                std::copy(data.begin(), data.end(), fullkey + 1);\n+                pubkey.Set(std::begin(fullkey), std::end(fullkey));\n+                if (pubkey.IsFullyValid()) {\n+                    return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, true);\n+                }\n             }\n             error = strprintf(\"Pubkey '%s' is invalid\", str);\n             return nullptr;\n@@ -882,7 +958,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(uint32_t key_exp_index, const S\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 out.keys.emplace(pubkey.GetID(), key);\n-                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey, ctx == ParseScriptContext::P2TR);\n             } else {\n                 error = \"Uncompressed keys are not allowed\";\n                 return nullptr;\n@@ -960,13 +1036,16 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n-        return std::make_unique<PKDescriptor>(std::move(pubkey));\n+        return std::make_unique<PKDescriptor>(std::move(pubkey), ctx == ParseScriptContext::P2TR);\n     }\n-    if (Func(\"pkh\", expr)) {\n+    if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && Func(\"pkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n         if (!pubkey) return nullptr;\n         ++key_exp_index;\n         return std::make_unique<PKHDescriptor>(std::move(pubkey));\n+    } else if (Func(\"pkh\", expr)) {\n+        error = \"Can only have pkh at top level, in sh(), or in wsh()\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ctx, out, error);\n@@ -977,7 +1056,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         error = \"Can only have combo() at top level\";\n         return nullptr;\n     }\n-    if ((sorted_multi = Func(\"sortedmulti\", expr)) || Func(\"multi\", expr)) {\n+    if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH) && ((sorted_multi = Func(\"sortedmulti\", expr)) || Func(\"multi\", expr))) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n@@ -1022,6 +1101,9 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n             }\n         }\n         return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n+    } else if (Func(\"sortedmulti\", expr) || Func(\"multi\", expr)) {\n+        error = \"Can only have multi/sortedmulti at top level, in sh(), or in wsh()\";\n+        return nullptr;\n     }\n     if ((ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH) && Func(\"wpkh\", expr)) {\n         auto pubkey = ParsePubkey(key_exp_index, expr, ParseScriptContext::P2WPKH, out, error);\n@@ -1059,6 +1141,67 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n         error = \"Can only have addr() at top level\";\n         return nullptr;\n     }\n+    if (ctx == ParseScriptContext::TOP && Func(\"tr\", expr)) {\n+        auto arg = Expr(expr);\n+        auto internal_key = ParsePubkey(key_exp_index, arg, ParseScriptContext::P2TR, out, error);\n+        if (!internal_key) return nullptr;\n+        ++key_exp_index;\n+        std::vector<std::unique_ptr<DescriptorImpl>> subscripts; //!< list of script subexpressions\n+        std::vector<int> depths; //!< depth in the tree of each subexpression (same length subscripts)\n+        if (expr.size()) {\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"tr: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n+            /** The path from the top of the tree to what we're currently processing.\n+             * branches[i] == false: left branch in the i'th step from the top; true: right branch.\n+             */\n+            std::vector<bool> branches;\n+            // Loop over all provided scripts. In every iteration exactly one script will be processed.\n+            // Use a do-loop because inside this if-branch we expect at least one script.\n+            do {\n+                // First process all open braces.\n+                while (Const(\"{\", expr)) {\n+                    branches.push_back(false); // new left branch\n+                    if (branches.size() > TAPROOT_CONTROL_MAX_NODE_COUNT) {\n+                        error = strprintf(\"tr() supports at most %i nesting levels\", TAPROOT_CONTROL_MAX_NODE_COUNT);\n+                        return nullptr;\n+                    }\n+                }\n+                // Process the actual script expression.\n+                auto sarg = Expr(expr);\n+                subscripts.emplace_back(ParseScript(key_exp_index, sarg, ParseScriptContext::P2TR, out, error));\n+                if (!subscripts.back()) return nullptr;\n+                depths.push_back(branches.size());\n+                // Process closing braces; one is expected for every right branch we were in.\n+                while (branches.size() && branches.back()) {\n+                    if (!Const(\"}\", expr)) {\n+                        error = strprintf(\"tr(): expected '}' after script expression\");\n+                        return nullptr;\n+                    }\n+                    branches.pop_back(); // move up one level after encountering '}'\n+                }\n+                // If after that, we're at the end of a left branch, expect a comma.\n+                if (branches.size() && !branches.back()) {\n+                    if (!Const(\",\", expr)) {\n+                        error = strprintf(\"tr(): expected ',' after script expression\");\n+                        return nullptr;\n+                    }\n+                    branches.back() = true; // And now we're in a right branch.\n+                }\n+            } while (branches.size());\n+            // After we've explored a whole tree, we must be at the end of the expression.\n+            if (expr.size()) {\n+                error = strprintf(\"tr(): expected ')' after script expression\");\n+                return nullptr;\n+            }\n+        }\n+        assert(TaprootBuilder::ValidDepths(depths));\n+        return std::make_unique<TRDescriptor>(std::move(internal_key), std::move(subscripts), std::move(depths));\n+    } else if (Func(\"tr\", expr)) {\n+        error = \"Can only have tr at top level\";\n+        return nullptr;\n+    }\n     if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n         std::string str(expr.begin(), expr.end());\n         if (!IsHex(str)) {\n@@ -1084,42 +1227,66 @@ std::unique_ptr<DescriptorImpl> ParseScript(uint32_t& key_exp_index, Span<const\n \n std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)\n {\n-    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey, false);\n     KeyOriginInfo info;\n     if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n         return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n     }\n     return key_provider;\n }\n \n+std::unique_ptr<PubkeyProvider> InferXOnlyPubkey(const XOnlyPubKey& xkey, ParseScriptContext ctx, const SigningProvider& provider)\n+{\n+    unsigned char full_key[CPubKey::COMPRESSED_SIZE] = {0x02};\n+    std::copy(xkey.begin(), xkey.end(), full_key + 1);\n+    CPubKey pubkey(full_key);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(0, pubkey, true);\n+    KeyOriginInfo info;\n+    if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n+        return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n+    } else {\n+        full_key[0] = 0x03;\n+        pubkey = CPubKey(full_key);\n+        if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n+            return std::make_unique<OriginPubkeyProvider>(0, std::move(info), std::move(key_provider));\n+        }\n+    }\n+    return key_provider;\n+}\n+\n std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptContext ctx, const SigningProvider& provider)\n {\n+    if (ctx == ParseScriptContext::P2TR && script.size() == 34 && script[0] == 32 && script[33] == OP_CHECKSIG) {\n+        XOnlyPubKey key{Span<const unsigned char>{script.data() + 1, script.data() + 33}};\n+        return std::make_unique<PKDescriptor>(InferXOnlyPubkey(key, ctx, provider));\n+    }\n+\n     std::vector<std::vector<unsigned char>> data;\n     TxoutType txntype = Solver(script, data);\n \n-    if (txntype == TxoutType::PUBKEY) {\n+    if (txntype == TxoutType::PUBKEY && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         CPubKey pubkey(data[0]);\n         if (pubkey.IsValid()) {\n             return std::make_unique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::PUBKEYHASH) {\n+    if (txntype == TxoutType::PUBKEYHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return std::make_unique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_KEYHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH)) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n             return std::make_unique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n-    if (txntype == TxoutType::MULTISIG) {\n+    if (txntype == TxoutType::MULTISIG && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH || ctx == ParseScriptContext::P2WSH)) {\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n         for (size_t i = 1; i + 1 < data.size(); ++i) {\n             CPubKey pubkey(data[i]);\n@@ -1136,7 +1303,7 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             if (sub) return std::make_unique<SHDescriptor>(std::move(sub));\n         }\n     }\n-    if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && ctx != ParseScriptContext::P2WSH) {\n+    if (txntype == TxoutType::WITNESS_V0_SCRIPTHASH && (ctx == ParseScriptContext::TOP || ctx == ParseScriptContext::P2SH)) {\n         CScriptID scriptid;\n         CRIPEMD160().Write(data[0].data(), data[0].size()).Finalize(scriptid.begin());\n         CScript subscript;\n@@ -1145,6 +1312,40 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             if (sub) return std::make_unique<WSHDescriptor>(std::move(sub));\n         }\n     }\n+    if (txntype == TxoutType::WITNESS_V1_TAPROOT && ctx == ParseScriptContext::TOP) {\n+        // Extract x-only pubkey from output.\n+        XOnlyPubKey pubkey;\n+        std::copy(data[0].begin(), data[0].end(), pubkey.begin());\n+        // Request spending data.\n+        TaprootSpendData tap;\n+        if (provider.GetTaprootSpendData(pubkey, tap)) {\n+            // If found, convert it back to tree form.\n+            auto tree = InferTaprootTree(tap, pubkey);\n+            if (tree) {\n+                // If that works, try to infer subdescriptors for all leaves.\n+                bool ok = true;\n+                std::vector<std::unique_ptr<DescriptorImpl>> subscripts; //!< list of script subexpressions\n+                std::vector<int> depths; //!< depth in the tree of each subexpression (same length subscripts)\n+                for (const auto& [depth, script, leaf_ver] : *tree) {\n+                    std::unique_ptr<DescriptorImpl> subdesc;\n+                    if (leaf_ver == TAPROOT_LEAF_TAPSCRIPT) {\n+                        subdesc = InferScript(script, ParseScriptContext::P2TR, provider);\n+                    }\n+                    if (!subdesc) {\n+                        ok = false;\n+                        break;\n+                    } else {\n+                        subscripts.push_back(std::move(subdesc));\n+                        depths.push_back(depth);\n+                    }\n+                }\n+                if (ok) {\n+                    auto key = InferXOnlyPubkey(tap.internal_key, ParseScriptContext::P2TR, provider);\n+                    return std::make_unique<TRDescriptor>(std::move(key), std::move(subscripts), std::move(depths));\n+                }\n+            }\n+        }\n+    }\n \n     CTxDestination dest;\n     if (ExtractDestination(script, dest)) {\n@@ -1230,6 +1431,11 @@ void DescriptorCache::CacheDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_i\n     xpubs[der_index] = xpub;\n }\n \n+void DescriptorCache::CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub)\n+{\n+    m_last_hardened_xpubs[key_exp_pos] = xpub;\n+}\n+\n bool DescriptorCache::GetCachedParentExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n {\n     const auto& it = m_parent_xpubs.find(key_exp_pos);\n@@ -1248,6 +1454,55 @@ bool DescriptorCache::GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t d\n     return true;\n }\n \n+bool DescriptorCache::GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const\n+{\n+    const auto& it = m_last_hardened_xpubs.find(key_exp_pos);\n+    if (it == m_last_hardened_xpubs.end()) return false;\n+    xpub = it->second;\n+    return true;\n+}\n+\n+DescriptorCache DescriptorCache::MergeAndDiff(const DescriptorCache& other)\n+{\n+    DescriptorCache diff;\n+    for (const auto& parent_xpub_pair : other.GetCachedParentExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+            if (xpub != parent_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+            }\n+            continue;\n+        }\n+        CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        diff.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+    }\n+    for (const auto& derived_xpub_map_pair : other.GetCachedDerivedExtPubKeys()) {\n+        for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+            CExtPubKey xpub;\n+            if (GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                if (xpub != derived_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                }\n+                continue;\n+            }\n+            CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            diff.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+        }\n+    }\n+    for (const auto& lh_xpub_pair : other.GetCachedLastHardenedExtPubKeys()) {\n+        CExtPubKey xpub;\n+        if (GetCachedLastHardenedExtPubKey(lh_xpub_pair.first, xpub)) {\n+            if (xpub != lh_xpub_pair.second) {\n+                throw std::runtime_error(std::string(__func__) + \": New cached last hardened xpub does not match already cached last hardened xpub\");\n+            }\n+            continue;\n+        }\n+        CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+        diff.CacheLastHardenedExtPubKey(lh_xpub_pair.first, lh_xpub_pair.second);\n+    }\n+    return diff;\n+}\n+\n const ExtPubKeyMap DescriptorCache::GetCachedParentExtPubKeys() const\n {\n     return m_parent_xpubs;\n@@ -1257,3 +1512,8 @@ const std::unordered_map<uint32_t, ExtPubKeyMap> DescriptorCache::GetCachedDeriv\n {\n     return m_derived_xpubs;\n }\n+\n+const ExtPubKeyMap DescriptorCache::GetCachedLastHardenedExtPubKeys() const\n+{\n+    return m_last_hardened_xpubs;\n+}"
      },
      {
        "sha": "ecd7c4eea5f10efd9eac0bdc035ebbf2ab3df822",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -22,6 +22,8 @@ class DescriptorCache {\n     std::unordered_map<uint32_t, ExtPubKeyMap> m_derived_xpubs;\n     /** Map key expression index -> parent xpub */\n     ExtPubKeyMap m_parent_xpubs;\n+    /** Map key expression index -> last hardened xpub */\n+    ExtPubKeyMap m_last_hardened_xpubs;\n \n public:\n     /** Cache a parent xpub\n@@ -50,11 +52,30 @@ class DescriptorCache {\n      * @param[in] xpub The CExtPubKey to get from cache\n      */\n     bool GetCachedDerivedExtPubKey(uint32_t key_exp_pos, uint32_t der_index, CExtPubKey& xpub) const;\n+    /** Cache a last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to cache\n+     */\n+    void CacheLastHardenedExtPubKey(uint32_t key_exp_pos, const CExtPubKey& xpub);\n+    /** Retrieve a cached last hardened xpub\n+     *\n+     * @param[in] key_exp_pos Position of the key expression within the descriptor\n+     * @param[in] xpub The CExtPubKey to get from cache\n+     */\n+    bool GetCachedLastHardenedExtPubKey(uint32_t key_exp_pos, CExtPubKey& xpub) const;\n \n     /** Retrieve all cached parent xpubs */\n     const ExtPubKeyMap GetCachedParentExtPubKeys() const;\n     /** Retrieve all cached derived xpubs */\n     const std::unordered_map<uint32_t, ExtPubKeyMap> GetCachedDerivedExtPubKeys() const;\n+    /** Retrieve all cached last hardened xpubs */\n+    const ExtPubKeyMap GetCachedLastHardenedExtPubKeys() const;\n+\n+    /** Combine another DescriptorCache into this one.\n+     * Returns a cache containing the items from the other cache unknown to current cache\n+     */\n+    DescriptorCache MergeAndDiff(const DescriptorCache& other);\n };\n \n /** \\brief Interface for parsed descriptor objects.\n@@ -94,7 +115,7 @@ struct Descriptor {\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n     /** Convert the descriptor to a normalized string. Normalized descriptors have the xpub at the last hardened step. This fails if the provided provider does not have the private keys to derive that xpub. */\n-    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, bool priv) const = 0;\n+    virtual bool ToNormalizedString(const SigningProvider& provider, std::string& out, const DescriptorCache* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position.\n      *"
      },
      {
        "sha": "ef48f89965817877c8ef1e4f6f9d4f6ff501cfbf",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 25,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1420,7 +1420,7 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n } // namespace\n \n template <class T>\n-void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent_outputs)\n+void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent_outputs, bool force)\n {\n     assert(!m_spent_outputs_ready);\n \n@@ -1431,9 +1431,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     }\n \n     // Determine which precomputation-impacting features this transaction uses.\n-    bool uses_bip143_segwit = false;\n-    bool uses_bip341_taproot = false;\n-    for (size_t inpos = 0; inpos < txTo.vin.size(); ++inpos) {\n+    bool uses_bip143_segwit = force;\n+    bool uses_bip341_taproot = force;\n+    for (size_t inpos = 0; inpos < txTo.vin.size() && !(uses_bip143_segwit && uses_bip341_taproot); ++inpos) {\n         if (!txTo.vin[inpos].scriptWitness.IsNull()) {\n             if (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.size() == 2 + WITNESS_V1_TAPROOT_SIZE &&\n                 m_spent_outputs[inpos].scriptPubKey[0] == OP_1) {\n@@ -1478,15 +1478,14 @@ PrecomputedTransactionData::PrecomputedTransactionData(const T& txTo)\n }\n \n // explicit instantiation\n-template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut>&& spent_outputs);\n-template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut>&& spent_outputs);\n+template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut>&& spent_outputs, bool force);\n+template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut>&& spent_outputs, bool force);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n-static const CHashWriter HASHER_TAPLEAF = TaggedHash(\"TapLeaf\");\n-static const CHashWriter HASHER_TAPBRANCH = TaggedHash(\"TapBranch\");\n-static const CHashWriter HASHER_TAPTWEAK = TaggedHash(\"TapTweak\");\n+const CHashWriter HASHER_TAPLEAF = TaggedHash(\"TapLeaf\");\n+const CHashWriter HASHER_TAPBRANCH = TaggedHash(\"TapBranch\");\n \n static bool HandleMissingData(MissingDataBehavior mdb)\n {\n@@ -1712,7 +1711,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<const uns\n         if (hashtype == SIGHASH_DEFAULT) return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }\n     uint256 sighash;\n-    assert(this->txdata);\n+    if (!this->txdata) return HandleMissingData(m_mdb);\n     if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, *this->txdata, m_mdb)) {\n         return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }\n@@ -1741,9 +1740,9 @@ bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLoc\n     if (nLockTime > (int64_t)txTo->nLockTime)\n         return false;\n \n-    // Finally the nLockTime feature can be disabled and thus\n-    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n-    // finalized by setting nSequence to maxint. The\n+    // Finally the nLockTime feature can be disabled in IsFinalTx()\n+    // and thus CHECKLOCKTIMEVERIFY bypassed if every txin has\n+    // been finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n     // the opcode ineffective.\n     //\n@@ -1848,16 +1847,14 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     return true;\n }\n \n-static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256& tapleaf_hash)\n+uint256 ComputeTapleafHash(uint8_t leaf_version, const CScript& script)\n+{\n+    return (CHashWriter(HASHER_TAPLEAF) << leaf_version << script).GetSHA256();\n+}\n+\n+uint256 ComputeTaprootMerkleRoot(Span<const unsigned char> control, const uint256& tapleaf_hash)\n {\n     const int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n-    //! The internal pubkey (x-only, so no Y coordinate parity).\n-    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n-    //! The output pubkey (taken from the scriptPubKey).\n-    const XOnlyPubKey q{uint256(program)};\n-    // Compute the tapleaf hash.\n-    tapleaf_hash = (CHashWriter(HASHER_TAPLEAF) << uint8_t(control[0] & TAPROOT_LEAF_MASK) << script).GetSHA256();\n-    // Compute the Merkle root from the leaf and the provided path.\n     uint256 k = tapleaf_hash;\n     for (int i = 0; i < path_len; ++i) {\n         CHashWriter ss_branch{HASHER_TAPBRANCH};\n@@ -1869,10 +1866,21 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n         }\n         k = ss_branch.GetSHA256();\n     }\n-    // Compute the tweak from the Merkle root and the internal pubkey.\n-    k = (CHashWriter(HASHER_TAPTWEAK) << MakeSpan(p) << k).GetSHA256();\n+    return k;\n+}\n+\n+static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const uint256& tapleaf_hash)\n+{\n+    assert(control.size() >= TAPROOT_CONTROL_BASE_SIZE);\n+    assert(program.size() >= uint256::size());\n+    //! The internal pubkey (x-only, so no Y coordinate parity).\n+    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n+    //! The output pubkey (taken from the scriptPubKey).\n+    const XOnlyPubKey q{uint256(program)};\n+    // Compute the Merkle root from the leaf and the provided path.\n+    const uint256 merkle_root = ComputeTaprootMerkleRoot(control, tapleaf_hash);\n     // Verify that the output pubkey matches the tweaked internal pubkey, after correcting for parity.\n-    return q.CheckPayToContract(p, k, control[0] & 1);\n+    return q.CheckTapTweak(p, merkle_root, control[0] & 1);\n }\n \n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror, bool is_p2sh)\n@@ -1932,7 +1940,8 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE || ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) {\n                 return set_error(serror, SCRIPT_ERR_TAPROOT_WRONG_CONTROL_SIZE);\n             }\n-            if (!VerifyTaprootCommitment(control, program, exec_script, execdata.m_tapleaf_hash)) {\n+            execdata.m_tapleaf_hash = ComputeTapleafHash(control[0] & TAPROOT_LEAF_MASK, exec_script);\n+            if (!VerifyTaprootCommitment(control, program, execdata.m_tapleaf_hash)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n             execdata.m_tapleaf_hash_init = true;"
      },
      {
        "sha": "034c937b99a5062921adacd08e5c3bf0159266ab",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_INTERPRETER_H\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n+#include <hash.h>\n #include <script/script_error.h>\n #include <span.h>\n #include <primitives/transaction.h>\n@@ -167,7 +168,7 @@ struct PrecomputedTransactionData\n     PrecomputedTransactionData() = default;\n \n     template <class T>\n-    void Init(const T& tx, std::vector<CTxOut>&& spent_outputs);\n+    void Init(const T& tx, std::vector<CTxOut>&& spent_outputs, bool force = false);\n \n     template <class T>\n     explicit PrecomputedTransactionData(const T& tx);\n@@ -218,6 +219,9 @@ static constexpr size_t TAPROOT_CONTROL_NODE_SIZE = 32;\n static constexpr size_t TAPROOT_CONTROL_MAX_NODE_COUNT = 128;\n static constexpr size_t TAPROOT_CONTROL_MAX_SIZE = TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * TAPROOT_CONTROL_MAX_NODE_COUNT;\n \n+extern const CHashWriter HASHER_TAPLEAF;    //!< Hasher with tag \"TapLeaf\" pre-fed to it.\n+extern const CHashWriter HASHER_TAPBRANCH;  //!< Hasher with tag \"TapBranch\" pre-fed to it.\n+\n template <class T>\n uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = nullptr);\n \n@@ -256,6 +260,9 @@ enum class MissingDataBehavior\n     FAIL,         //!< Just act as if the signature was invalid\n };\n \n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, uint32_t in_pos, uint8_t hash_type, SigVersion sigversion, const PrecomputedTransactionData& cache, MissingDataBehavior mdb);\n+\n template <class T>\n class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {\n@@ -310,6 +317,12 @@ class DeferringSignatureChecker : public BaseSignatureChecker\n     }\n };\n \n+/** Compute the BIP341 tapleaf hash from leaf version & script. */\n+uint256 ComputeTapleafHash(uint8_t leaf_version, const CScript& script);\n+/** Compute the BIP341 taproot script tree Merkle root from control block and leaf hash.\n+ *  Requires control block to have valid length (33 + k*32, with k in {0,1,..,128}). */\n+uint256 ComputeTaprootMerkleRoot(Span<const unsigned char> control, const uint256& tapleaf_hash);\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* error = nullptr);\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);"
      },
      {
        "sha": "7864e690d8d111d8585460a285e9c59ef3125ff7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 198,
        "deletions": 18,
        "changes": 216,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,13 +11,28 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <util/vector.h>\n \n typedef std::vector<unsigned char> valtype;\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn, MissingDataBehavior::FAIL) {}\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn)\n+    : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn, MissingDataBehavior::FAIL),\n+      m_txdata(nullptr)\n+{\n+}\n+\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn)\n+    : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn),\n+      checker(txdata ? MutableTransactionSignatureChecker(txTo, nIn, amount, *txdata, MissingDataBehavior::FAIL) :\n+          MutableTransactionSignatureChecker(txTo, nIn, amount, MissingDataBehavior::FAIL)),\n+      m_txdata(txdata)\n+{\n+}\n \n bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n+    assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0);\n+\n     CKey key;\n     if (!provider.GetKey(address, key))\n         return false;\n@@ -26,13 +41,61 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     if (sigversion == SigVersion::WITNESS_V0 && !key.IsCompressed())\n         return false;\n \n-    // Signing for witness scripts needs the amount.\n-    if (sigversion == SigVersion::WITNESS_V0 && amount < 0) return false;\n+    // Signing without known amount does not work in witness scripts.\n+    if (sigversion == SigVersion::WITNESS_V0 && !MoneyRange(amount)) return false;\n+\n+    // BASE/WITNESS_V0 signatures don't support explicit SIGHASH_DEFAULT, use SIGHASH_ALL instead.\n+    const int hashtype = nHashType == SIGHASH_DEFAULT ? SIGHASH_ALL : nHashType;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, hashtype, amount, sigversion, m_txdata);\n     if (!key.Sign(hash, vchSig))\n         return false;\n-    vchSig.push_back((unsigned char)nHashType);\n+    vchSig.push_back((unsigned char)hashtype);\n+    return true;\n+}\n+\n+bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const\n+{\n+    assert(sigversion == SigVersion::TAPROOT || sigversion == SigVersion::TAPSCRIPT);\n+\n+    CKey key;\n+    {\n+        // For now, use the old full pubkey-based key derivation logic. As it indexed by\n+        // Hash160(full pubkey), we need to try both a version prefixed with 0x02, and one\n+        // with 0x03.\n+        unsigned char b[33] = {0x02};\n+        std::copy(pubkey.begin(), pubkey.end(), b + 1);\n+        CPubKey fullpubkey;\n+        fullpubkey.Set(b, b + 33);\n+        CKeyID keyid = fullpubkey.GetID();\n+        if (!provider.GetKey(keyid, key)) {\n+            b[0] = 0x03;\n+            fullpubkey.Set(b, b + 33);\n+            CKeyID keyid = fullpubkey.GetID();\n+            if (!provider.GetKey(keyid, key)) return false;\n+        }\n+    }\n+\n+    // BIP341/BIP342 signing needs lots of precomputed transaction data. While some\n+    // (non-SIGHASH_DEFAULT) sighash modes exist that can work with just some subset\n+    // of data present, for now, only support signing when everything is provided.\n+    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return false;\n+\n+    ScriptExecutionData execdata;\n+    execdata.m_annex_init = true;\n+    execdata.m_annex_present = false; // Only support annex-less signing for now.\n+    if (sigversion == SigVersion::TAPSCRIPT) {\n+        execdata.m_codeseparator_pos_init = true;\n+        execdata.m_codeseparator_pos = 0xFFFFFFFF; // Only support non-OP_CODESEPARATOR BIP342 signing for now.\n+        if (!leaf_hash) return false; // BIP342 signing needs leaf hash.\n+        execdata.m_tapleaf_hash_init = true;\n+        execdata.m_tapleaf_hash = *leaf_hash;\n+    }\n+    uint256 hash;\n+    if (!SignatureHashSchnorr(hash, execdata, *txTo, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return false;\n+    sig.resize(64);\n+    if (!key.SignSchnorr(hash, sig, merkle_root, nullptr)) return false;\n+    if (nHashType) sig.push_back(nHashType);\n     return true;\n }\n \n@@ -92,6 +155,86 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n     return false;\n }\n \n+static bool CreateTaprootScriptSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const XOnlyPubKey& pubkey, const uint256& leaf_hash, SigVersion sigversion)\n+{\n+    auto lookup_key = std::make_pair(pubkey, leaf_hash);\n+    auto it = sigdata.taproot_script_sigs.find(lookup_key);\n+    if (it != sigdata.taproot_script_sigs.end()) {\n+        sig_out = it->second;\n+    }\n+    if (creator.CreateSchnorrSig(provider, sig_out, pubkey, &leaf_hash, nullptr, sigversion)) {\n+        sigdata.taproot_script_sigs[lookup_key] = sig_out;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+static bool SignTaprootScript(const SigningProvider& provider, const BaseSignatureCreator& creator, SignatureData& sigdata, int leaf_version, const CScript& script, std::vector<valtype>& result)\n+{\n+    // Only BIP342 tapscript signing is supported for now.\n+    if (leaf_version != TAPROOT_LEAF_TAPSCRIPT) return false;\n+    SigVersion sigversion = SigVersion::TAPSCRIPT;\n+\n+    uint256 leaf_hash = (CHashWriter(HASHER_TAPLEAF) << uint8_t(leaf_version) << script).GetSHA256();\n+\n+    // <xonly pubkey> OP_CHECKSIG\n+    if (script.size() == 34 && script[33] == OP_CHECKSIG && script[0] == 0x20) {\n+        XOnlyPubKey pubkey(MakeSpan(script).subspan(1, 32));\n+        std::vector<unsigned char> sig;\n+        if (CreateTaprootScriptSig(creator, sigdata, provider, sig, pubkey, leaf_hash, sigversion)) {\n+            result = Vector(std::move(sig));\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+static bool SignTaproot(const SigningProvider& provider, const BaseSignatureCreator& creator, const WitnessV1Taproot& output, SignatureData& sigdata, std::vector<valtype>& result)\n+{\n+    TaprootSpendData spenddata;\n+\n+    // Gather information about this output.\n+    if (provider.GetTaprootSpendData(output, spenddata)) {\n+        sigdata.tr_spenddata.Merge(spenddata);\n+    }\n+\n+    // Try key path spending.\n+    {\n+        std::vector<unsigned char> sig;\n+        if (sigdata.taproot_key_path_sig.size() == 0) {\n+            if (creator.CreateSchnorrSig(provider, sig, spenddata.internal_key, nullptr, &spenddata.merkle_root, SigVersion::TAPROOT)) {\n+                sigdata.taproot_key_path_sig = sig;\n+            }\n+        }\n+        if (sigdata.taproot_key_path_sig.size()) {\n+            result = Vector(sigdata.taproot_key_path_sig);\n+            return true;\n+        }\n+    }\n+\n+    // Try script path spending.\n+    std::vector<std::vector<unsigned char>> smallest_result_stack;\n+    for (const auto& [key, control_blocks] : sigdata.tr_spenddata.scripts) {\n+        const auto& [script, leaf_ver] = key;\n+        std::vector<std::vector<unsigned char>> result_stack;\n+        if (SignTaprootScript(provider, creator, sigdata, leaf_ver, script, result_stack)) {\n+            result_stack.emplace_back(std::begin(script), std::end(script)); // Push the script\n+            result_stack.push_back(*control_blocks.begin()); // Push the smallest control block\n+            if (smallest_result_stack.size() == 0 ||\n+                GetSerializeSize(result_stack, PROTOCOL_VERSION) < GetSerializeSize(smallest_result_stack, PROTOCOL_VERSION)) {\n+                smallest_result_stack = std::move(result_stack);\n+            }\n+        }\n+    }\n+    if (smallest_result_stack.size() != 0) {\n+        result = std::move(smallest_result_stack);\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n /**\n  * Sign scriptPubKey using signature made with creator.\n  * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n@@ -113,7 +256,6 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TxoutType::NONSTANDARD:\n     case TxoutType::NULL_DATA:\n     case TxoutType::WITNESS_UNKNOWN:\n-    case TxoutType::WITNESS_V1_TAPROOT:\n         return false;\n     case TxoutType::PUBKEY:\n         if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]), scriptPubKey, sigversion)) return false;\n@@ -175,6 +317,9 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         // Could not find witnessScript, add to missing\n         sigdata.missing_witness_script = uint256(vSolutions[0]);\n         return false;\n+\n+    case TxoutType::WITNESS_V1_TAPROOT:\n+        return SignTaproot(provider, creator, WitnessV1Taproot(XOnlyPubKey{vSolutions[0]}), sigdata, ret);\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);\n }\n@@ -205,7 +350,6 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     bool solved = SignStep(provider, creator, fromPubKey, result, whichType, SigVersion::BASE, sigdata);\n     bool P2SH = false;\n     CScript subscript;\n-    sigdata.scriptWitness.stack.clear();\n \n     if (solved && whichType == TxoutType::SCRIPTHASH)\n     {\n@@ -238,10 +382,17 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         sigdata.scriptWitness.stack = result;\n         sigdata.witness = true;\n         result.clear();\n+    } else if (whichType == TxoutType::WITNESS_V1_TAPROOT && !P2SH) {\n+        sigdata.witness = true;\n+        if (solved) {\n+            sigdata.scriptWitness.stack = std::move(result);\n+        }\n+        result.clear();\n     } else if (solved && whichType == TxoutType::WITNESS_UNKNOWN) {\n         sigdata.witness = true;\n     }\n \n+    if (!sigdata.witness) sigdata.scriptWitness.stack.clear();\n     if (P2SH) {\n         result.push_back(std::vector<unsigned char>(subscript.begin(), subscript.end()));\n     }\n@@ -402,6 +553,7 @@ class DummySignatureChecker final : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n     bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override { return true; }\n+    bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror) const override { return true; }\n };\n const DummySignatureChecker DUMMY_CHECKER;\n \n@@ -427,6 +579,11 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n         vchSig[6 + m_r_len + m_s_len] = SIGHASH_ALL;\n         return true;\n     }\n+    bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* tweak, SigVersion sigversion) const override\n+    {\n+        sig.assign(64, '\\000');\n+        return true;\n+    }\n };\n \n }\n@@ -455,15 +612,18 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n \n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n {\n-    std::vector<valtype> solutions;\n-    auto whichtype = Solver(script, solutions);\n-    if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n-    if (whichtype == TxoutType::SCRIPTHASH) {\n-        auto h160 = uint160(solutions[0]);\n-        CScript subscript;\n-        if (provider.GetCScript(CScriptID{h160}, subscript)) {\n-            whichtype = Solver(subscript, solutions);\n-            if (whichtype == TxoutType::WITNESS_V0_SCRIPTHASH || whichtype == TxoutType::WITNESS_V0_KEYHASH || whichtype == TxoutType::WITNESS_UNKNOWN) return true;\n+    int version;\n+    valtype program;\n+    if (script.IsWitnessProgram(version, program)) return true;\n+    if (script.IsPayToScriptHash()) {\n+        std::vector<valtype> solutions;\n+        auto whichtype = Solver(script, solutions);\n+        if (whichtype == TxoutType::SCRIPTHASH) {\n+            auto h160 = uint160(solutions[0]);\n+            CScript subscript;\n+            if (provider.GetCScript(CScriptID{h160}, subscript)) {\n+                if (subscript.IsWitnessProgram(version, program)) return true;\n+            }\n         }\n     }\n     return false;\n@@ -476,6 +636,26 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n     // Use CTransaction for the constant parts of the\n     // transaction to avoid rehashing.\n     const CTransaction txConst(mtx);\n+\n+    PrecomputedTransactionData txdata;\n+    std::vector<CTxOut> spent_outputs;\n+    spent_outputs.resize(mtx.vin.size());\n+    bool have_all_spent_outputs = true;\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            have_all_spent_outputs = false;\n+        } else {\n+            spent_outputs[i] = CTxOut(coin->second.out.nValue, coin->second.out.scriptPubKey);\n+        }\n+    }\n+    if (have_all_spent_outputs) {\n+        txdata.Init(txConst, std::move(spent_outputs), true);\n+    } else {\n+        txdata.Init(txConst, {}, true);\n+    }\n+\n     // Sign what we can:\n     for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n         CTxIn& txin = mtx.vin[i];\n@@ -490,7 +670,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, &txdata, nHashType), prevPubKey, sigdata);\n         }\n \n         UpdateInput(txin, sigdata);\n@@ -502,7 +682,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         }\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount, MissingDataBehavior::FAIL), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount, txdata, MissingDataBehavior::FAIL), &serror)) {\n             if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n                 // Unable to sign input and verification failed (possible attempt to partially sign).\n                 input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";"
      },
      {
        "sha": "b4e73188926acdc8e1e5522e266bcb18c7fdf398",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,13 +11,13 @@\n #include <pubkey.h>\n #include <script/interpreter.h>\n #include <script/keyorigin.h>\n+#include <script/standard.h>\n #include <span.h>\n #include <streams.h>\n \n class CKey;\n class CKeyID;\n class CScript;\n-class CScriptID;\n class CTransaction;\n class SigningProvider;\n \n@@ -31,6 +31,7 @@ class BaseSignatureCreator {\n \n     /** Create a singular (non-script) signature. */\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n+    virtual bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const =0;\n };\n \n /** A signature creator for transactions. */\n@@ -40,11 +41,14 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     int nHashType;\n     CAmount amount;\n     const MutableTransactionSignatureChecker checker;\n+    const PrecomputedTransactionData* m_txdata;\n \n public:\n     MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn = SIGHASH_ALL);\n+    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn = SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const override;\n };\n \n /** A signature creator that just produces 71-byte empty signatures. */\n@@ -64,8 +68,11 @@ struct SignatureData {\n     CScript redeem_script; ///< The redeemScript (if any) for the input\n     CScript witness_script; ///< The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs.\n     CScriptWitness scriptWitness; ///< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.\n+    TaprootSpendData tr_spenddata; ///< Taproot spending data.\n     std::map<CKeyID, SigPair> signatures; ///< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;\n+    std::vector<unsigned char> taproot_key_path_sig; /// Schnorr signature for key path spending\n+    std::map<std::pair<XOnlyPubKey, uint256>, std::vector<unsigned char>> taproot_script_sigs; ///< (Partial) schnorr signatures, indexed by XOnlyPubKey and leaf_hash.\n     std::vector<CKeyID> missing_pubkeys; ///< KeyIDs of pubkeys which could not be found\n     std::vector<CKeyID> missing_sigs; ///< KeyIDs of pubkeys for signatures which could not be found\n     uint160 missing_redeem_script; ///< ScriptID of the missing redeemScript (if any)"
      },
      {
        "sha": "b80fbe22cee5055e1b1e978e1c1e7746c1cfdd49",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -44,6 +44,11 @@ bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& inf\n     return m_provider->GetKeyOrigin(keyid, info);\n }\n \n+bool HidingSigningProvider::GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const\n+{\n+    return m_provider->GetTaprootSpendData(output_key, spenddata);\n+}\n+\n bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const\n@@ -54,6 +59,10 @@ bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info)\n     return ret;\n }\n bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n+bool FlatSigningProvider::GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const\n+{\n+    return LookupHelper(tr_spenddata, output_key, spenddata);\n+}\n \n FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n {\n@@ -66,6 +75,10 @@ FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvide\n     ret.keys.insert(b.keys.begin(), b.keys.end());\n     ret.origins = a.origins;\n     ret.origins.insert(b.origins.begin(), b.origins.end());\n+    ret.tr_spenddata = a.tr_spenddata;\n+    for (const auto& [output_key, spenddata] : b.tr_spenddata) {\n+        ret.tr_spenddata[output_key].Merge(spenddata);\n+    }\n     return ret;\n }\n "
      },
      {
        "sha": "939ae10622677d334ff8fea1700b043ce113a44f",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -25,6 +25,7 @@ class SigningProvider\n     virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n     virtual bool HaveKey(const CKeyID &address) const { return false; }\n     virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n+    virtual bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const { return false; }\n };\n \n extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n@@ -42,6 +43,7 @@ class HidingSigningProvider : public SigningProvider\n     bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+    bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const override;\n };\n \n struct FlatSigningProvider final : public SigningProvider\n@@ -50,11 +52,13 @@ struct FlatSigningProvider final : public SigningProvider\n     std::map<CKeyID, CPubKey> pubkeys;\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> origins;\n     std::map<CKeyID, CKey> keys;\n+    std::map<XOnlyPubKey, TaprootSpendData> tr_spenddata; /** Map from output key to spend data. */\n \n     bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n     bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+    bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const override;\n };\n \n FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);"
      },
      {
        "sha": "b8349bb9ab50ccd9a1562bf43bc03177693d700c",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 304,
        "deletions": 4,
        "changes": 308,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,8 +6,11 @@\n #include <script/standard.h>\n \n #include <crypto/sha256.h>\n+#include <hash.h>\n #include <pubkey.h>\n+#include <script/interpreter.h>\n #include <script/script.h>\n+#include <util/strencodings.h>\n \n #include <string>\n \n@@ -155,15 +158,14 @@ TxoutType Solver(const CScript& scriptPubKey, std::vector<std::vector<unsigned c\n     std::vector<unsigned char> witnessprogram;\n     if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_KEYHASH_SIZE) {\n-            vSolutionsRet.push_back(witnessprogram);\n+            vSolutionsRet.push_back(std::move(witnessprogram));\n             return TxoutType::WITNESS_V0_KEYHASH;\n         }\n         if (witnessversion == 0 && witnessprogram.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\n-            vSolutionsRet.push_back(witnessprogram);\n+            vSolutionsRet.push_back(std::move(witnessprogram));\n             return TxoutType::WITNESS_V0_SCRIPTHASH;\n         }\n         if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE) {\n-            vSolutionsRet.push_back(std::vector<unsigned char>{(unsigned char)witnessversion});\n             vSolutionsRet.push_back(std::move(witnessprogram));\n             return TxoutType::WITNESS_V1_TAPROOT;\n         }\n@@ -242,8 +244,13 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n         addressRet = hash;\n         return true;\n     }\n-    case TxoutType::WITNESS_UNKNOWN:\n     case TxoutType::WITNESS_V1_TAPROOT: {\n+        WitnessV1Taproot tap;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), tap.begin());\n+        addressRet = tap;\n+        return true;\n+    }\n+    case TxoutType::WITNESS_UNKNOWN: {\n         WitnessUnknown unk;\n         unk.version = vSolutions[0][0];\n         std::copy(vSolutions[1].begin(), vSolutions[1].end(), unk.program);\n@@ -329,6 +336,11 @@ class CScriptVisitor\n         return CScript() << OP_0 << ToByteVector(id);\n     }\n \n+    CScript operator()(const WitnessV1Taproot& tap) const\n+    {\n+        return CScript() << OP_1 << ToByteVector(tap);\n+    }\n+\n     CScript operator()(const WitnessUnknown& id) const\n     {\n         return CScript() << CScript::EncodeOP_N(id.version) << std::vector<unsigned char>(id.program, id.program + id.length);\n@@ -361,3 +373,291 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n bool IsValidDestination(const CTxDestination& dest) {\n     return dest.index() != 0;\n }\n+\n+/*static*/ TaprootBuilder::NodeInfo TaprootBuilder::Combine(NodeInfo&& a, NodeInfo&& b)\n+{\n+    NodeInfo ret;\n+    /* Iterate over all tracked leaves in a, add b's hash to their Merkle branch, and move them to ret. */\n+    for (auto& leaf : a.leaves) {\n+        leaf.merkle_branch.push_back(b.hash);\n+        ret.leaves.emplace_back(std::move(leaf));\n+    }\n+    /* Iterate over all tracked leaves in b, add a's hash to their Merkle branch, and move them to ret. */\n+    for (auto& leaf : b.leaves) {\n+        leaf.merkle_branch.push_back(a.hash);\n+        ret.leaves.emplace_back(std::move(leaf));\n+    }\n+    /* Lexicographically sort a and b's hash, and compute parent hash. */\n+    if (a.hash < b.hash) {\n+        ret.hash = (CHashWriter(HASHER_TAPBRANCH) << a.hash << b.hash).GetSHA256();\n+    } else {\n+        ret.hash = (CHashWriter(HASHER_TAPBRANCH) << b.hash << a.hash).GetSHA256();\n+    }\n+    return ret;\n+}\n+\n+void TaprootSpendData::Merge(TaprootSpendData other)\n+{\n+    // TODO: figure out how to better deal with conflicting information\n+    // being merged.\n+    if (internal_key.IsNull() && !other.internal_key.IsNull()) {\n+        internal_key = other.internal_key;\n+    }\n+    if (merkle_root.IsNull() && !other.merkle_root.IsNull()) {\n+        merkle_root = other.merkle_root;\n+    }\n+    for (auto& [key, control_blocks] : other.scripts) {\n+        // Once P0083R3 is supported by all our targeted platforms,\n+        // this loop body can be replaced with:\n+        // scripts[key].merge(std::move(control_blocks));\n+        auto& target = scripts[key];\n+        for (auto& control_block: control_blocks) {\n+            target.insert(std::move(control_block));\n+        }\n+    }\n+}\n+\n+void TaprootBuilder::Insert(TaprootBuilder::NodeInfo&& node, int depth)\n+{\n+    assert(depth >= 0 && (size_t)depth <= TAPROOT_CONTROL_MAX_NODE_COUNT);\n+    /* We cannot insert a leaf at a lower depth while a deeper branch is unfinished. Doing\n+     * so would mean the Add() invocations do not correspond to a DFS traversal of a\n+     * binary tree. */\n+    if ((size_t)depth + 1 < m_branch.size()) {\n+        m_valid = false;\n+        return;\n+    }\n+    /* As long as an entry in the branch exists at the specified depth, combine it and propagate up.\n+     * The 'node' variable is overwritten here with the newly combined node. */\n+    while (m_valid && m_branch.size() > (size_t)depth && m_branch[depth].has_value()) {\n+        node = Combine(std::move(node), std::move(*m_branch[depth]));\n+        m_branch.pop_back();\n+        if (depth == 0) m_valid = false; /* Can't propagate further up than the root */\n+        --depth;\n+    }\n+    if (m_valid) {\n+        /* Make sure the branch is big enough to place the new node. */\n+        if (m_branch.size() <= (size_t)depth) m_branch.resize((size_t)depth + 1);\n+        assert(!m_branch[depth].has_value());\n+        m_branch[depth] = std::move(node);\n+    }\n+}\n+\n+/*static*/ bool TaprootBuilder::ValidDepths(const std::vector<int>& depths)\n+{\n+    std::vector<bool> branch;\n+    for (int depth : depths) {\n+        // This inner loop corresponds to effectively the same logic on branch\n+        // as what Insert() performs on the m_branch variable. Instead of\n+        // storing a NodeInfo object, just remember whether or not there is one\n+        // at that depth.\n+        if (depth < 0 || (size_t)depth > TAPROOT_CONTROL_MAX_NODE_COUNT) return false;\n+        if ((size_t)depth + 1 < branch.size()) return false;\n+        while (branch.size() > (size_t)depth && branch[depth]) {\n+            branch.pop_back();\n+            if (depth == 0) return false;\n+            --depth;\n+        }\n+        if (branch.size() <= (size_t)depth) branch.resize((size_t)depth + 1);\n+        assert(!branch[depth]);\n+        branch[depth] = true;\n+    }\n+    // And this check corresponds to the IsComplete() check on m_branch.\n+    return branch.size() == 0 || (branch.size() == 1 && branch[0]);\n+}\n+\n+TaprootBuilder& TaprootBuilder::Add(int depth, const CScript& script, int leaf_version, bool track)\n+{\n+    assert((leaf_version & ~TAPROOT_LEAF_MASK) == 0);\n+    if (!IsValid()) return *this;\n+    /* Construct NodeInfo object with leaf hash and (if track is true) also leaf information. */\n+    NodeInfo node;\n+    node.hash = (CHashWriter{HASHER_TAPLEAF} << uint8_t(leaf_version) << script).GetSHA256();\n+    if (track) node.leaves.emplace_back(LeafInfo{script, leaf_version, {}});\n+    /* Insert into the branch. */\n+    Insert(std::move(node), depth);\n+    return *this;\n+}\n+\n+TaprootBuilder& TaprootBuilder::AddOmitted(int depth, const uint256& hash)\n+{\n+    if (!IsValid()) return *this;\n+    /* Construct NodeInfo object with the hash directly, and insert it into the branch. */\n+    NodeInfo node;\n+    node.hash = hash;\n+    Insert(std::move(node), depth);\n+    return *this;\n+}\n+\n+TaprootBuilder& TaprootBuilder::Finalize(const XOnlyPubKey& internal_key)\n+{\n+    /* Can only call this function when IsComplete() is true. */\n+    assert(IsComplete());\n+    m_internal_key = internal_key;\n+    auto ret = m_internal_key.CreateTapTweak(m_branch.size() == 0 ? nullptr : &m_branch[0]->hash);\n+    assert(ret.has_value());\n+    std::tie(m_output_key, m_parity) = *ret;\n+    return *this;\n+}\n+\n+WitnessV1Taproot TaprootBuilder::GetOutput() { return WitnessV1Taproot{m_output_key}; }\n+\n+TaprootSpendData TaprootBuilder::GetSpendData() const\n+{\n+    TaprootSpendData spd;\n+    spd.merkle_root = m_branch.size() == 0 ? uint256() : m_branch[0]->hash;\n+    spd.internal_key = m_internal_key;\n+    if (m_branch.size()) {\n+        // If any script paths exist, they have been combined into the root m_branch[0]\n+        // by now. Compute the control block for each of its tracked leaves, and put them in\n+        // spd.scripts.\n+        for (const auto& leaf : m_branch[0]->leaves) {\n+            std::vector<unsigned char> control_block;\n+            control_block.resize(TAPROOT_CONTROL_BASE_SIZE + TAPROOT_CONTROL_NODE_SIZE * leaf.merkle_branch.size());\n+            control_block[0] = leaf.leaf_version | (m_parity ? 1 : 0);\n+            std::copy(m_internal_key.begin(), m_internal_key.end(), control_block.begin() + 1);\n+            if (leaf.merkle_branch.size()) {\n+                std::copy(leaf.merkle_branch[0].begin(),\n+                          leaf.merkle_branch[0].begin() + TAPROOT_CONTROL_NODE_SIZE * leaf.merkle_branch.size(),\n+                          control_block.begin() + TAPROOT_CONTROL_BASE_SIZE);\n+            }\n+            spd.scripts[{leaf.script, leaf.leaf_version}].insert(std::move(control_block));\n+        }\n+    }\n+    return spd;\n+}\n+\n+std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const TaprootSpendData& spenddata, const XOnlyPubKey& output)\n+{\n+    // Verify that the output matches the assumed Merkle root and internal key.\n+    auto tweak = spenddata.internal_key.CreateTapTweak(spenddata.merkle_root.IsNull() ? nullptr : &spenddata.merkle_root);\n+    if (!tweak || tweak->first != output) return std::nullopt;\n+    // If the Merkle root is 0, the tree is empty, and we're done.\n+    std::vector<std::tuple<int, CScript, int>> ret;\n+    if (spenddata.merkle_root.IsNull()) return ret;\n+\n+    /** Data structure to represent the nodes of the tree we're going to build. */\n+    struct TreeNode {\n+        /** Hash of this node, if known; 0 otherwise. */\n+        uint256 hash;\n+        /** The left and right subtrees (note that their order is irrelevant). */\n+        std::unique_ptr<TreeNode> sub[2];\n+        /** If this is known to be a leaf node, a pointer to the (script, leaf_ver) pair.\n+         *  nullptr otherwise. */\n+        const std::pair<CScript, int>* leaf = nullptr;\n+        /** Whether or not this node has been explored (is known to be a leaf, or known to have children). */\n+        bool explored = false;\n+        /** Whether or not this node is an inner node (unknown until explored = true). */\n+        bool inner;\n+        /** Whether or not we have produced output for this subtree. */\n+        bool done = false;\n+    };\n+\n+    // Build tree from the provided branches.\n+    TreeNode root;\n+    root.hash = spenddata.merkle_root;\n+    for (const auto& [key, control_blocks] : spenddata.scripts) {\n+        const auto& [script, leaf_ver] = key;\n+        for (const auto& control : control_blocks) {\n+            // Skip script records with nonsensical leaf version.\n+            if (leaf_ver < 0 || leaf_ver >= 0x100 || leaf_ver & 1) continue;\n+            // Skip script records with invalid control block sizes.\n+            if (control.size() < TAPROOT_CONTROL_BASE_SIZE || control.size() > TAPROOT_CONTROL_MAX_SIZE ||\n+                ((control.size() - TAPROOT_CONTROL_BASE_SIZE) % TAPROOT_CONTROL_NODE_SIZE) != 0) continue;\n+            // Skip script records that don't match the control block.\n+            if ((control[0] & TAPROOT_LEAF_MASK) != leaf_ver) continue;\n+            // Skip script records that don't match the provided Merkle root.\n+            const uint256 leaf_hash = ComputeTapleafHash(leaf_ver, script);\n+            const uint256 merkle_root = ComputeTaprootMerkleRoot(control, leaf_hash);\n+            if (merkle_root != spenddata.merkle_root) continue;\n+\n+            TreeNode* node = &root;\n+            size_t levels = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n+            for (size_t depth = 0; depth < levels; ++depth) {\n+                // Can't descend into a node which we already know is a leaf.\n+                if (node->explored && !node->inner) return std::nullopt;\n+\n+                // Extract partner hash from Merkle branch in control block.\n+                uint256 hash;\n+                std::copy(control.begin() + TAPROOT_CONTROL_BASE_SIZE + (levels - 1 - depth) * TAPROOT_CONTROL_NODE_SIZE,\n+                          control.begin() + TAPROOT_CONTROL_BASE_SIZE + (levels - depth) * TAPROOT_CONTROL_NODE_SIZE,\n+                          hash.begin());\n+\n+                if (node->sub[0]) {\n+                    // Descend into the existing left or right branch.\n+                    bool desc = false;\n+                    for (int i = 0; i < 2; ++i) {\n+                        if (node->sub[i]->hash == hash || (node->sub[i]->hash.IsNull() && node->sub[1-i]->hash != hash)) {\n+                            node->sub[i]->hash = hash;\n+                            node = &*node->sub[1-i];\n+                            desc = true;\n+                            break;\n+                        }\n+                    }\n+                    if (!desc) return std::nullopt; // This probably requires a hash collision to hit.\n+                } else {\n+                    // We're in an unexplored node. Create subtrees and descend.\n+                    node->explored = true;\n+                    node->inner = true;\n+                    node->sub[0] = std::make_unique<TreeNode>();\n+                    node->sub[1] = std::make_unique<TreeNode>();\n+                    node->sub[1]->hash = hash;\n+                    node = &*node->sub[0];\n+                }\n+            }\n+            // Cannot turn a known inner node into a leaf.\n+            if (node->sub[0]) return std::nullopt;\n+            node->explored = true;\n+            node->inner = false;\n+            node->leaf = &key;\n+            node->hash = leaf_hash;\n+        }\n+    }\n+\n+    // Recursive processing to turn the tree into flattened output. Use an explicit stack here to avoid\n+    // overflowing the call stack (the tree may be 128 levels deep).\n+    std::vector<TreeNode*> stack{&root};\n+    while (!stack.empty()) {\n+        TreeNode& node = *stack.back();\n+        if (!node.explored) {\n+            // Unexplored node, which means the tree is incomplete.\n+            return std::nullopt;\n+        } else if (!node.inner) {\n+            // Leaf node; produce output.\n+            ret.emplace_back(stack.size() - 1, node.leaf->first, node.leaf->second);\n+            node.done = true;\n+            stack.pop_back();\n+        } else if (node.sub[0]->done && !node.sub[1]->done && !node.sub[1]->explored && !node.sub[1]->hash.IsNull() &&\n+                   (CHashWriter{HASHER_TAPBRANCH} << node.sub[1]->hash << node.sub[1]->hash).GetSHA256() == node.hash) {\n+            // Whenever there are nodes with two identical subtrees under it, we run into a problem:\n+            // the control blocks for the leaves underneath those will be identical as well, and thus\n+            // they will all be matched to the same path in the tree. The result is that at the location\n+            // where the duplicate occurred, the left child will contain a normal tree that can be explored\n+            // and processed, but the right one will remain unexplored.\n+            //\n+            // This situation can be detected, by encountering an inner node with unexplored right subtree\n+            // with known hash, and H_TapBranch(hash, hash) is equal to the parent node (this node)'s hash.\n+            //\n+            // To deal with this, simply process the left tree a second time (set its done flag to false;\n+            // noting that the done flag of its children have already been set to false after processing\n+            // those). To avoid ending up in an infinite loop, set the done flag of the right (unexplored)\n+            // subtree to true.\n+            node.sub[0]->done = false;\n+            node.sub[1]->done = true;\n+        } else if (node.sub[0]->done && node.sub[1]->done) {\n+            // An internal node which we're finished with.\n+            node.sub[0]->done = false;\n+            node.sub[1]->done = false;\n+            node.done = true;\n+            stack.pop_back();\n+        } else if (!node.sub[0]->done) {\n+            // An internal node whose left branch hasn't been processed yet. Do so first.\n+            stack.push_back(&*node.sub[0]);\n+        } else if (!node.sub[1]->done) {\n+            // An internal node whose right branch hasn't been processed yet. Do so first.\n+            stack.push_back(&*node.sub[1]);\n+        }\n+    }\n+\n+    return ret;\n+}"
      },
      {
        "sha": "ac4e2f327623593dd3009cf7563b11198f16336e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 136,
        "deletions": 3,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -6,10 +6,12 @@\n #ifndef BITCOIN_SCRIPT_STANDARD_H\n #define BITCOIN_SCRIPT_STANDARD_H\n \n+#include <pubkey.h>\n #include <script/interpreter.h>\n #include <uint256.h>\n #include <util/hash_type.h>\n \n+#include <map>\n #include <string>\n #include <variant>\n \n@@ -113,6 +115,12 @@ struct WitnessV0KeyHash : public BaseHash<uint160>\n };\n CKeyID ToKeyID(const WitnessV0KeyHash& key_hash);\n \n+struct WitnessV1Taproot : public XOnlyPubKey\n+{\n+    WitnessV1Taproot() : XOnlyPubKey() {}\n+    explicit WitnessV1Taproot(const XOnlyPubKey& xpk) : XOnlyPubKey(xpk) {}\n+};\n+\n //! CTxDestination subtype to encode any future Witness version\n struct WitnessUnknown\n {\n@@ -142,11 +150,11 @@ struct WitnessUnknown\n  *  * ScriptHash: TxoutType::SCRIPTHASH destination (P2SH)\n  *  * WitnessV0ScriptHash: TxoutType::WITNESS_V0_SCRIPTHASH destination (P2WSH)\n  *  * WitnessV0KeyHash: TxoutType::WITNESS_V0_KEYHASH destination (P2WPKH)\n- *  * WitnessUnknown: TxoutType::WITNESS_UNKNOWN/WITNESS_V1_TAPROOT destination (P2W???)\n- *    (taproot outputs do not require their own type as long as no wallet support exists)\n+ *  * WitnessV1Taproot: TxoutType::WITNESS_V1_TAPROOT destination (P2TR)\n+ *  * WitnessUnknown: TxoutType::WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-using CTxDestination = std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown>;\n+using CTxDestination = std::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV1Taproot, WitnessUnknown>;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);\n@@ -202,4 +210,129 @@ CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n /** Generate a multisig script. */\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n+struct ShortestVectorFirstComparator\n+{\n+    bool operator()(const std::vector<unsigned char>& a, const std::vector<unsigned char>& b) const\n+    {\n+        if (a.size() < b.size()) return true;\n+        if (a.size() > b.size()) return false;\n+        return a < b;\n+    }\n+};\n+\n+struct TaprootSpendData\n+{\n+    /** The BIP341 internal key. */\n+    XOnlyPubKey internal_key;\n+    /** The Merkle root of the script tree (0 if no scripts). */\n+    uint256 merkle_root;\n+    /** Map from (script, leaf_version) to (sets of) control blocks.\n+     *  The control blocks are sorted by size, so that the signing logic can\n+     *  easily prefer the cheapest one. */\n+    std::map<std::pair<CScript, int>, std::set<std::vector<unsigned char>, ShortestVectorFirstComparator>> scripts;\n+    /** Merge other TaprootSpendData (for the same scriptPubKey) into this. */\n+    void Merge(TaprootSpendData other);\n+};\n+\n+/** Utility class to construct Taproot outputs from internal key and script tree. */\n+class TaprootBuilder\n+{\n+private:\n+    /** Information about a tracked leaf in the Merkle tree. */\n+    struct LeafInfo\n+    {\n+        CScript script;                      //!< The script.\n+        int leaf_version;                    //!< The leaf version for that script.\n+        std::vector<uint256> merkle_branch;  //!< The hashing partners above this leaf.\n+    };\n+\n+    /** Information associated with a node in the Merkle tree. */\n+    struct NodeInfo\n+    {\n+        /** Merkle hash of this node. */\n+        uint256 hash;\n+        /** Tracked leaves underneath this node (either from the node itself, or its children).\n+         *  The merkle_branch field for each is the partners to get to *this* node. */\n+        std::vector<LeafInfo> leaves;\n+    };\n+    /** Whether the builder is in a valid state so far. */\n+    bool m_valid = true;\n+\n+    /** The current state of the builder.\n+     *\n+     * For each level in the tree, one NodeInfo object may be present. m_branch[0]\n+     * is information about the root; further values are for deeper subtrees being\n+     * explored.\n+     *\n+     * For every right branch taken to reach the position we're currently\n+     * working in, there will be a (non-nullopt) entry in m_branch corresponding\n+     * to the left branch at that level.\n+     *\n+     * For example, imagine this tree:     - N0 -\n+     *                                    /      \\\n+     *                                   N1      N2\n+     *                                  /  \\    /  \\\n+     *                                 A    B  C   N3\n+     *                                            /  \\\n+     *                                           D    E\n+     *\n+     * Initially, m_branch is empty. After processing leaf A, it would become\n+     * {nullopt, nullopt, A}. When processing leaf B, an entry at level 2 already\n+     * exists, and it would thus be combined with it to produce a level 1 one,\n+     * resulting in {nullopt, N1}. Adding C and D takes us to {nullopt, N1, C}\n+     * and {nullopt, N1, C, D} respectively. When E is processed, it is combined\n+     * with D, and then C, and then N1, to produce the root, resulting in {N0}.\n+     *\n+     * This structure allows processing with just O(log n) overhead if the leaves\n+     * are computed on the fly.\n+     *\n+     * As an invariant, there can never be nullopt entries at the end. There can\n+     * also not be more than 128 entries (as that would mean more than 128 levels\n+     * in the tree). The depth of newly added entries will always be at least\n+     * equal to the current size of m_branch (otherwise it does not correspond\n+     * to a depth-first traversal of a tree). m_branch is only empty if no entries\n+     * have ever be processed. m_branch having length 1 corresponds to being done.\n+     */\n+    std::vector<std::optional<NodeInfo>> m_branch;\n+\n+    XOnlyPubKey m_internal_key;  //!< The internal key, set when finalizing.\n+    XOnlyPubKey m_output_key;    //!< The output key, computed when finalizing.\n+    bool m_parity;               //!< The tweak parity, computed when finalizing.\n+\n+    /** Combine information about a parent Merkle tree node from its child nodes. */\n+    static NodeInfo Combine(NodeInfo&& a, NodeInfo&& b);\n+    /** Insert information about a node at a certain depth, and propagate information up. */\n+    void Insert(NodeInfo&& node, int depth);\n+\n+public:\n+    /** Add a new script at a certain depth in the tree. Add() operations must be called\n+     *  in depth-first traversal order of binary tree. If track is true, it will be included in\n+     *  the GetSpendData() output. */\n+    TaprootBuilder& Add(int depth, const CScript& script, int leaf_version, bool track = true);\n+    /** Like Add(), but for a Merkle node with a given hash to the tree. */\n+    TaprootBuilder& AddOmitted(int depth, const uint256& hash);\n+    /** Finalize the construction. Can only be called when IsComplete() is true.\n+        internal_key.IsFullyValid() must be true. */\n+    TaprootBuilder& Finalize(const XOnlyPubKey& internal_key);\n+\n+    /** Return true if so far all input was valid. */\n+    bool IsValid() const { return m_valid; }\n+    /** Return whether there were either no leaves, or the leaves form a Huffman tree. */\n+    bool IsComplete() const { return m_valid && (m_branch.size() == 0 || (m_branch.size() == 1 && m_branch[0].has_value())); }\n+    /** Compute scriptPubKey (after Finalize()). */\n+    WitnessV1Taproot GetOutput();\n+    /** Check if a list of depths is legal (will lead to IsComplete()). */\n+    static bool ValidDepths(const std::vector<int>& depths);\n+    /** Compute spending data (after Finalize()). */\n+    TaprootSpendData GetSpendData() const;\n+};\n+\n+/** Given a TaprootSpendData and the output key, reconstruct its script tree.\n+ *\n+ * If the output doesn't match the spenddata, or if the data in spenddata is incomplete,\n+ * std::nullopt is returned. Otherwise, a vector of (depth, script, leaf_ver) tuples is\n+ * returned, corresponding to a depth-first traversal of the script tree.\n+ */\n+std::optional<std::vector<std::tuple<int, CScript, int>>> InferTaprootTree(const TaprootSpendData& spenddata, const XOnlyPubKey& output);\n+\n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "506a86033635412bf259eaa08010cde3708df49c",
        "filename": "src/secp256k1/.cirrus.yml",
        "status": "added",
        "additions": 198,
        "deletions": 0,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.cirrus.yml?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,198 @@\n+env:\n+  WIDEMUL: auto\n+  STATICPRECOMPUTATION: yes\n+  ECMULTGENPRECISION: auto\n+  ASM: no\n+  BUILD: check\n+  WITH_VALGRIND: yes\n+  RUN_VALGRIND: no\n+  EXTRAFLAGS:\n+  HOST:\n+  ECDH: no\n+  RECOVERY: no\n+  SCHNORRSIG: no\n+  EXPERIMENTAL: no\n+  CTIMETEST: yes\n+  BENCH: yes\n+  ITERS: 2\n+  MAKEFLAGS: -j2\n+\n+cat_logs_snippet: &CAT_LOGS\n+  always:\n+    cat_tests_log_script:\n+      - cat tests.log || true\n+    cat_exhaustive_tests_log_script:\n+      - cat exhaustive_tests.log || true\n+    cat_valgrind_ctime_test_log_script:\n+      - cat valgrind_ctime_test.log || true\n+    cat_bench_log_script:\n+      - cat bench.log || true\n+  on_failure:\n+    cat_config_log_script:\n+      - cat config.log || true\n+    cat_test_env_script:\n+      - cat test_env.log || true\n+    cat_ci_env_script:\n+      - env\n+\n+merge_base_script_snippet: &MERGE_BASE\n+  merge_base_script:\n+    - if [ \"$CIRRUS_PR\" = \"\" ]; then exit 0; fi\n+    - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH\n+    - git config --global user.email \"ci@ci.ci\"\n+    - git config --global user.name \"ci\"\n+    - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts\n+\n+task:\n+  name: \"x86_64: Linux (Debian stable)\"\n+  container:\n+    dockerfile: ci/linux-debian.Dockerfile\n+    # Reduce number of CPUs to be able to do more builds in parallel.\n+    cpu: 1\n+    # More than enough for our scripts.\n+    memory: 1G\n+  matrix: &ENV_MATRIX\n+    - env: {WIDEMUL:  int64,  RECOVERY: yes}\n+    - env: {WIDEMUL:  int64,                 ECDH: yes, EXPERIMENTAL: yes, SCHNORRSIG: yes}\n+    - env: {WIDEMUL: int128}\n+    - env: {WIDEMUL: int128,  RECOVERY: yes,            EXPERIMENTAL: yes, SCHNORRSIG: yes}\n+    - env: {WIDEMUL: int128,                 ECDH: yes, EXPERIMENTAL: yes, SCHNORRSIG: yes}\n+    - env: {WIDEMUL: int128,  ASM: x86_64}\n+    - env: {                  RECOVERY: yes,            EXPERIMENTAL: yes, SCHNORRSIG: yes}\n+    - env: {                  STATICPRECOMPUTATION: no}\n+    - env: {BUILD: distcheck, WITH_VALGRIND: no, CTIMETEST: no, BENCH: no}\n+    - env: {CPPFLAGS: -DDETERMINISTIC}\n+    - env: {CFLAGS: -O0, CTIMETEST: no}\n+    - env:\n+        CFLAGS:  \"-fsanitize=undefined -fno-omit-frame-pointer\"\n+        LDFLAGS: \"-fsanitize=undefined -fno-omit-frame-pointer\"\n+        UBSAN_OPTIONS: \"print_stacktrace=1:halt_on_error=1\"\n+        ASM: x86_64\n+        ECDH: yes\n+        RECOVERY: yes\n+        EXPERIMENTAL: yes\n+        SCHNORRSIG: yes\n+        CTIMETEST: no\n+    - env: { ECMULTGENPRECISION: 2 }\n+    - env: { ECMULTGENPRECISION: 8 }\n+    - env:\n+        RUN_VALGRIND: yes\n+        ASM: x86_64\n+        ECDH: yes\n+        RECOVERY: yes\n+        EXPERIMENTAL: yes\n+        SCHNORRSIG: yes\n+        EXTRAFLAGS: \"--disable-openssl-tests\"\n+        BUILD:\n+  matrix:\n+    - env:\n+        CC: gcc\n+    - env:\n+        CC: clang\n+  << : *MERGE_BASE\n+  test_script:\n+    - ./ci/cirrus.sh\n+  << : *CAT_LOGS\n+\n+task:\n+  name: \"i686: Linux (Debian stable)\"\n+  container:\n+    dockerfile: ci/linux-debian.Dockerfile\n+    cpu: 1\n+    memory: 1G\n+  env:\n+    HOST: i686-linux-gnu\n+    ECDH: yes\n+    RECOVERY: yes\n+    EXPERIMENTAL: yes\n+    SCHNORRSIG: yes\n+  matrix:\n+    - env:\n+        CC: i686-linux-gnu-gcc\n+    - env:\n+        CC: clang --target=i686-pc-linux-gnu -isystem /usr/i686-linux-gnu/include\n+  test_script:\n+    - ./ci/cirrus.sh\n+  << : *CAT_LOGS\n+\n+task:\n+  name: \"x86_64: macOS Catalina\"\n+  macos_instance:\n+    image: catalina-base\n+  env:\n+    HOMEBREW_NO_AUTO_UPDATE: 1\n+    HOMEBREW_NO_INSTALL_CLEANUP: 1\n+    # Cirrus gives us a fixed number of 12 virtual CPUs. Not that we even have that many jobs at the moment...\n+    MAKEFLAGS: -j13\n+  matrix:\n+    << : *ENV_MATRIX\n+  matrix:\n+    - env:\n+        CC: gcc-9\n+    - env:\n+        CC: clang\n+  # Update Command Line Tools\n+  # Uncomment this if the Command Line Tools on the CirrusCI macOS image are too old to brew valgrind.\n+  # See https://apple.stackexchange.com/a/195963 for the implementation.\n+  ## update_clt_script:\n+  ##   - system_profiler SPSoftwareDataType\n+  ##   - touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress\n+  ##   - |-\n+  ##     PROD=$(softwareupdate -l | grep \"*.*Command Line\" | tail -n 1 | awk -F\"*\" '{print $2}' | sed -e 's/^ *//' | sed 's/Label: //g' | tr -d '\\n')\n+  ##   # For debugging\n+  ##   - softwareupdate -l && echo \"PROD: $PROD\"\n+  ##   - softwareupdate -i \"$PROD\" --verbose\n+  ##   - rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress\n+  ##\n+  brew_valgrind_pre_script:\n+    - brew config\n+    - brew tap --shallow LouisBrunner/valgrind\n+    # Fetch valgrind source but don't build it yet.\n+    - brew fetch --HEAD LouisBrunner/valgrind/valgrind\n+  brew_valgrind_cache:\n+    # This is $(brew --cellar valgrind) but command substition does not work here.\n+    folder: /usr/local/Cellar/valgrind\n+    # Rebuild cache if ...\n+    fingerprint_script:\n+      # ... macOS version changes:\n+      - sw_vers\n+      # ... brew changes:\n+      - brew config\n+      # ... valgrind changes:\n+      - git -C \"$(brew --cache)/valgrind--git\" rev-parse HEAD\n+    populate_script:\n+      # If there's no hit in the cache, build and install valgrind.\n+      - brew install --HEAD LouisBrunner/valgrind/valgrind\n+  brew_valgrind_post_script:\n+    # If we have restored valgrind from the cache, tell brew to create symlink to the PATH.\n+    # If we haven't restored from cached (and just run brew install), this is a no-op.\n+    - brew link valgrind\n+  brew_script:\n+    - brew install automake libtool gcc@9\n+  << : *MERGE_BASE\n+  test_script:\n+    - ./ci/cirrus.sh\n+  << : *CAT_LOGS\n+\n+task:\n+  name: \"s390x (big-endian): Linux (Debian stable, QEMU)\"\n+  container:\n+    dockerfile: ci/linux-debian.Dockerfile\n+    cpu: 1\n+    memory: 1G\n+  env:\n+    QEMU_CMD: qemu-s390x\n+    HOST: s390x-linux-gnu\n+    BUILD:\n+    WITH_VALGRIND: no\n+    ECDH: yes\n+    RECOVERY: yes\n+    EXPERIMENTAL: yes\n+    SCHNORRSIG: yes\n+    CTIMETEST: no\n+  << : *MERGE_BASE\n+  test_script:\n+    # https://sourceware.org/bugzilla/show_bug.cgi?id=27008\n+    - rm /etc/ld.so.cache\n+    - ./ci/cirrus.sh\n+  << : *CAT_LOGS"
      },
      {
        "sha": "ce8d6391b2f210318b156066d38a116b8970a502",
        "filename": "src/secp256k1/.travis.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 108,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.travis.yml?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,108 +0,0 @@\n-language: c\n-os:\n-  - linux\n-  - osx\n-\n-dist: bionic\n-# Valgrind currently supports upto macOS 10.13, the latest xcode of that version is 10.1\n-osx_image: xcode10.1\n-addons:\n-  apt:\n-    packages:\n-      - libgmp-dev\n-      - valgrind\n-      - libtool-bin\n-compiler:\n-  - clang\n-  - gcc\n-env:\n-  global:\n-    - WIDEMUL=auto  BIGNUM=auto  STATICPRECOMPUTATION=yes  ECMULTGENPRECISION=auto  ASM=no  BUILD=check  WITH_VALGRIND=yes RUN_VALGRIND=no EXTRAFLAGS=  HOST=  ECDH=no  RECOVERY=no SCHNORRSIG=no EXPERIMENTAL=no CTIMETEST=yes BENCH=yes ITERS=2\n-  matrix:\n-    - WIDEMUL=int64   RECOVERY=yes\n-    - WIDEMUL=int64   ECDH=yes  EXPERIMENTAL=yes SCHNORRSIG=yes\n-    - WIDEMUL=int128\n-    - WIDEMUL=int128  RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes\n-    - WIDEMUL=int128  ECDH=yes EXPERIMENTAL=yes SCHNORRSIG=yes\n-    - WIDEMUL=int128                    ASM=x86_64\n-    - BIGNUM=no\n-    - BIGNUM=no       RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes\n-    - BIGNUM=no       STATICPRECOMPUTATION=no\n-    - BUILD=distcheck WITH_VALGRIND=no CTIMETEST=no BENCH=no\n-    - CPPFLAGS=-DDETERMINISTIC\n-    - CFLAGS=-O0 CTIMETEST=no\n-    - ECMULTGENPRECISION=2\n-    - ECMULTGENPRECISION=8\n-    - RUN_VALGRIND=yes BIGNUM=no ASM=x86_64 ECDH=yes  RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes EXTRAFLAGS=\"--disable-openssl-tests\" BUILD=\n-matrix:\n-  fast_finish: true\n-  include:\n-    - compiler: clang\n-      os: linux\n-      env: HOST=i686-linux-gnu\n-      addons:\n-        apt:\n-          packages:\n-            - gcc-multilib\n-            - libgmp-dev:i386\n-            - valgrind\n-            - libtool-bin\n-            - libc6-dbg:i386\n-    - compiler: clang\n-      env: HOST=i686-linux-gnu\n-      os: linux\n-      addons:\n-        apt:\n-          packages:\n-            - gcc-multilib\n-            - valgrind\n-            - libtool-bin\n-            - libc6-dbg:i386\n-    - compiler: gcc\n-      env: HOST=i686-linux-gnu\n-      os: linux\n-      addons:\n-        apt:\n-          packages:\n-            - gcc-multilib\n-            - valgrind\n-            - libtool-bin\n-            - libc6-dbg:i386\n-    - compiler: gcc\n-      os: linux\n-      env: HOST=i686-linux-gnu\n-      addons:\n-        apt:\n-          packages:\n-            - gcc-multilib\n-            - libgmp-dev:i386\n-            - valgrind\n-            - libtool-bin\n-            - libc6-dbg:i386\n-    # S390x build (big endian system)\n-    - compiler: gcc\n-      env: HOST=s390x-unknown-linux-gnu ECDH=yes RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes CTIMETEST=\n-      arch: s390x\n-\n-# We use this to install macOS dependencies instead of the built in `homebrew` plugin,\n-# because in xcode earlier than 11 they have a bug requiring updating the system which overall takes ~8 minutes.\n-# https://travis-ci.community/t/macos-build-fails-because-of-homebrew-bundle-unknown-command/7296\n-before_install:\n- - if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install gmp valgrind gcc@9; fi\n-\n-before_script: ./autogen.sh\n-\n-# travis auto terminates jobs that go for 10 minutes without printing to stdout, but travis_wait doesn't work well with forking programs like valgrind (https://docs.travis-ci.com/user/common-build-problems/#build-times-out-because-no-output-was-received https://github.com/bitcoin-core/secp256k1/pull/750#issuecomment-623476860)\n-script:\n-  - function keep_alive() { while true; do echo -en \"\\a\"; sleep 60; done }\n-  - keep_alive &\n-  - ./contrib/travis.sh\n-  - kill %keep_alive\n-\n-after_script:\n-    - cat ./tests.log\n-    - cat ./exhaustive_tests.log\n-    - cat ./valgrind_ctime_test.log\n-    - cat ./bench.log\n-    - $CC --version\n-    - valgrind --version"
      },
      {
        "sha": "58c9635e53e743c8b192b83e2301857ef766d15d",
        "filename": "src/secp256k1/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/Makefile.am?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -14,8 +14,6 @@ noinst_HEADERS += src/scalar_8x32_impl.h\n noinst_HEADERS += src/scalar_low_impl.h\n noinst_HEADERS += src/group.h\n noinst_HEADERS += src/group_impl.h\n-noinst_HEADERS += src/num_gmp.h\n-noinst_HEADERS += src/num_gmp_impl.h\n noinst_HEADERS += src/ecdsa.h\n noinst_HEADERS += src/ecdsa_impl.h\n noinst_HEADERS += src/eckey.h\n@@ -26,14 +24,16 @@ noinst_HEADERS += src/ecmult_const.h\n noinst_HEADERS += src/ecmult_const_impl.h\n noinst_HEADERS += src/ecmult_gen.h\n noinst_HEADERS += src/ecmult_gen_impl.h\n-noinst_HEADERS += src/num.h\n-noinst_HEADERS += src/num_impl.h\n noinst_HEADERS += src/field_10x26.h\n noinst_HEADERS += src/field_10x26_impl.h\n noinst_HEADERS += src/field_5x52.h\n noinst_HEADERS += src/field_5x52_impl.h\n noinst_HEADERS += src/field_5x52_int128_impl.h\n noinst_HEADERS += src/field_5x52_asm_impl.h\n+noinst_HEADERS += src/modinv32.h\n+noinst_HEADERS += src/modinv32_impl.h\n+noinst_HEADERS += src/modinv64.h\n+noinst_HEADERS += src/modinv64_impl.h\n noinst_HEADERS += src/assumptions.h\n noinst_HEADERS += src/util.h\n noinst_HEADERS += src/scratch.h"
      },
      {
        "sha": "197a56fff842ad854cb26e089ac79b3f39e97dfc",
        "filename": "src/secp256k1/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/README.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,7 +1,7 @@\n libsecp256k1\n ============\n \n-[![Build Status](https://travis-ci.org/bitcoin-core/secp256k1.svg?branch=master)](https://travis-ci.org/bitcoin-core/secp256k1)\n+[![Build Status](https://api.cirrus-ci.com/github/bitcoin-core/secp256k1.svg?branch=master)](https://cirrus-ci.com/github/bitcoin-core/secp256k1)\n \n Optimized C library for ECDSA signatures and secret/public key operations on curve secp256k1.\n \n@@ -34,11 +34,11 @@ Implementation details\n   * Optimized implementation of arithmetic modulo the curve's field size (2^256 - 0x1000003D1).\n     * Using 5 52-bit limbs (including hand-optimized assembly for x86_64, by Diederik Huys).\n     * Using 10 26-bit limbs (including hand-optimized assembly for 32-bit ARM, by Wladimir J. van der Laan).\n-  * Field inverses and square roots using a sliding window over blocks of 1s (by Peter Dettman).\n * Scalar operations\n   * Optimized implementation without data-dependent branches of arithmetic modulo the curve's order.\n     * Using 4 64-bit limbs (relying on __int128 support in the compiler).\n     * Using 8 32-bit limbs.\n+* Modular inverses (both field elements and scalars) based on [safegcd](https://gcd.cr.yp.to/index.html) with some modifications, and a variable-time variant (by Peter Dettman).\n * Group operations\n   * Point addition formula specifically simplified for the curve equation (y^2 = x^3 + 7).\n   * Use addition between points in Jacobian and affine coordinates where possible."
      },
      {
        "sha": "7bcbf3200cfa2851c739da25f5c15b6343e76f84",
        "filename": "src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/ax_prog_cc_for_build.m4?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#   http://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html\n+#   https://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html\n # ===========================================================================\n #\n # SYNOPSIS"
      },
      {
        "sha": "e57888ca18968e8d129a95eab586926a195de0ce",
        "filename": "src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/bitcoin_secp.m4?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -75,15 +75,10 @@ if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n fi\n ])\n \n-dnl\n-AC_DEFUN([SECP_GMP_CHECK],[\n-if test x\"$has_gmp\" != x\"yes\"; then\n+AC_DEFUN([SECP_VALGRIND_CHECK],[\n+if test x\"$has_valgrind\" != x\"yes\"; then\n   CPPFLAGS_TEMP=\"$CPPFLAGS\"\n-  CPPFLAGS=\"$GMP_CPPFLAGS $CPPFLAGS\"\n-  LIBS_TEMP=\"$LIBS\"\n-  LIBS=\"$GMP_LIBS $LIBS\"\n-  AC_CHECK_HEADER(gmp.h,[AC_CHECK_LIB(gmp, __gmpz_init,[has_gmp=yes; GMP_LIBS=\"$GMP_LIBS -lgmp\"; AC_DEFINE(HAVE_LIBGMP,1,[Define this symbol if libgmp is installed])])])\n-  CPPFLAGS=\"$CPPFLAGS_TEMP\"\n-  LIBS=\"$LIBS_TEMP\"\n+  CPPFLAGS=\"$VALGRIND_CPPFLAGS $CPPFLAGS\"\n+  AC_CHECK_HEADER([valgrind/memcheck.h], [has_valgrind=yes; AC_DEFINE(HAVE_VALGRIND,1,[Define this symbol if valgrind is installed])])\n fi\n ])"
      },
      {
        "sha": "f26ca98d1de39cf37248a0bbad65b221b5d4f615",
        "filename": "src/secp256k1/ci/cirrus.sh",
        "status": "renamed",
        "additions": 35,
        "deletions": 17,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/ci/cirrus.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/ci/cirrus.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/ci/cirrus.sh?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -3,45 +3,63 @@\n set -e\n set -x\n \n-if [ \"$HOST\" = \"i686-linux-gnu\" ]\n-then\n-    export CC=\"$CC -m32\"\n-fi\n-if [ \"$TRAVIS_OS_NAME\" = \"osx\" ] && [ \"$TRAVIS_COMPILER\" = \"gcc\" ]\n-then\n-    export CC=\"gcc-9\"\n-fi\n+export LC_ALL=C\n+\n+env >> test_env.log\n+\n+$CC -v || true\n+valgrind --version || true\n+\n+./autogen.sh\n \n ./configure \\\n     --enable-experimental=\"$EXPERIMENTAL\" \\\n-    --with-test-override-wide-multiply=\"$WIDEMUL\" --with-bignum=\"$BIGNUM\" --with-asm=\"$ASM\" \\\n+    --with-test-override-wide-multiply=\"$WIDEMUL\" --with-asm=\"$ASM\" \\\n     --enable-ecmult-static-precomputation=\"$STATICPRECOMPUTATION\" --with-ecmult-gen-precision=\"$ECMULTGENPRECISION\" \\\n     --enable-module-ecdh=\"$ECDH\" --enable-module-recovery=\"$RECOVERY\" \\\n     --enable-module-schnorrsig=\"$SCHNORRSIG\" \\\n     --with-valgrind=\"$WITH_VALGRIND\" \\\n     --host=\"$HOST\" $EXTRAFLAGS\n \n+# We have set \"-j<n>\" in MAKEFLAGS.\n+make\n+\n+# Print information about binaries so that we can see that the architecture is correct\n+file *tests || true\n+file bench_* || true\n+file .libs/* || true\n+\n if [ -n \"$BUILD\" ]\n then\n-    make -j2 \"$BUILD\"\n+    make \"$BUILD\"\n fi\n+\n if [ \"$RUN_VALGRIND\" = \"yes\" ]\n then\n-    make -j2\n-    # the `--error-exitcode` is required to make the test fail if valgrind found errors, otherwise it'll return 0 (http://valgrind.org/docs/manual/manual-core.html)\n+    # the `--error-exitcode` is required to make the test fail if valgrind found errors, otherwise it'll return 0 (https://www.valgrind.org/docs/manual/manual-core.html)\n     valgrind --error-exitcode=42 ./tests 16\n     valgrind --error-exitcode=42 ./exhaustive_tests\n fi\n+\n+if [ -n \"$QEMU_CMD\" ]\n+then\n+    $QEMU_CMD ./tests 16\n+    $QEMU_CMD ./exhaustive_tests\n+fi\n+\n if [ \"$BENCH\" = \"yes\" ]\n then\n+    # Using the local `libtool` because on macOS the system's libtool has nothing to do with GNU libtool\n+    EXEC='./libtool --mode=execute'\n+    if [ -n \"$QEMU_CMD\" ]\n+    then\n+       EXEC=\"$EXEC $QEMU_CMD\"\n+    fi\n     if [ \"$RUN_VALGRIND\" = \"yes\" ]\n     then\n-        # Using the local `libtool` because on macOS the system's libtool has nothing to do with GNU libtool\n-        EXEC='./libtool --mode=execute valgrind --error-exitcode=42'\n-    else\n-        EXEC=\n+        EXEC=\"$EXEC valgrind --error-exitcode=42\"\n     fi\n-    # This limits the iterations in the benchmarks below to ITER(set in .travis.yml) iterations.\n+    # This limits the iterations in the benchmarks below to ITER iterations.\n     export SECP256K1_BENCH_ITERS=\"$ITERS\"\n     {\n         $EXEC ./bench_ecmult",
        "previous_filename": "src/secp256k1/contrib/travis.sh"
      },
      {
        "sha": "5967cf8b311606f22ac453f501202ade99fc5ca0",
        "filename": "src/secp256k1/ci/linux-debian.Dockerfile",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/ci/linux-debian.Dockerfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/ci/linux-debian.Dockerfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/ci/linux-debian.Dockerfile?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,13 @@\n+FROM debian:stable\n+\n+RUN dpkg --add-architecture i386\n+RUN dpkg --add-architecture s390x\n+RUN apt-get update\n+\n+# dkpg-dev: to make pkg-config work in cross-builds\n+RUN apt-get install --no-install-recommends --no-upgrade -y \\\n+        git ca-certificates \\\n+        make automake libtool pkg-config dpkg-dev valgrind qemu-user \\\n+        gcc clang libc6-dbg \\\n+        gcc-i686-linux-gnu libc6-dev-i386-cross libc6-dbg:i386 \\\n+        gcc-s390x-linux-gnu libc6-dev-s390x-cross libc6-dbg:s390x"
      },
      {
        "sha": "1ed991afa771456838cb04c3b1e2cbfbea2359a9",
        "filename": "src/secp256k1/configure.ac",
        "status": "modified",
        "additions": 147,
        "deletions": 132,
        "changes": 279,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/configure.ac?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -14,17 +14,24 @@ AM_INIT_AUTOMAKE([foreign subdir-objects])\n : ${CFLAGS=\"-g\"}\n LT_INIT\n \n-dnl make the compilation flags quiet unless V=1 is used\n+# Make the compilation flags quiet unless V=1 is used.\n m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n \n PKG_PROG_PKG_CONFIG\n \n AC_PATH_TOOL(AR, ar)\n AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n-AX_PROG_CC_FOR_BUILD\n \n+# Save definition of AC_PROG_CC because AM_PROG_CC_C_O in automake<=1.13 will\n+# redefine AC_PROG_CC to exit with an error, which avoids the user calling it\n+# accidently and screwing up the effect of AM_PROG_CC_C_O. However, we'll need\n+# AC_PROG_CC later on in AX_PROG_CC_FOR_BUILD, where its usage is fine, and\n+# we'll carefully make sure not to call AC_PROG_CC anywhere else.\n+m4_copy([AC_PROG_CC], [saved_AC_PROG_CC])\n AM_PROG_CC_C_O\n+# Restore AC_PROG_CC\n+m4_rename_force([saved_AC_PROG_CC], [AC_PROG_CC])\n \n AC_PROG_CC_C89\n if test x\"$ac_cv_prog_cc_c89\" = x\"no\"; then\n@@ -37,25 +44,23 @@ case $host_os in\n      if  test x$cross_compiling != xyes; then\n        AC_PATH_PROG([BREW],brew,)\n        if test x$BREW != x; then\n-         dnl These Homebrew packages may be keg-only, meaning that they won't be found\n-         dnl in expected paths because they may conflict with system files. Ask\n-         dnl Homebrew where each one is located, then adjust paths accordingly.\n-\n+         # These Homebrew packages may be keg-only, meaning that they won't be found\n+         # in expected paths because they may conflict with system files. Ask\n+         # Homebrew where each one is located, then adjust paths accordingly.\n          openssl_prefix=`$BREW --prefix openssl 2>/dev/null`\n-         gmp_prefix=`$BREW --prefix gmp 2>/dev/null`\n+         valgrind_prefix=`$BREW --prefix valgrind 2>/dev/null`\n          if test x$openssl_prefix != x; then\n            PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n            export PKG_CONFIG_PATH\n            CRYPTO_CPPFLAGS=\"-I$openssl_prefix/include\"\n          fi\n-         if test x$gmp_prefix != x; then\n-           GMP_CPPFLAGS=\"-I$gmp_prefix/include\"\n-           GMP_LIBS=\"-L$gmp_prefix/lib\"\n+         if test x$valgrind_prefix != x; then\n+           VALGRIND_CPPFLAGS=\"-I$valgrind_prefix/include\"\n          fi\n        else\n          AC_PATH_PROG([PORT],port,)\n-         dnl if homebrew isn't installed and macports is, add the macports default paths\n-         dnl as a last resort.\n+         # If homebrew isn't installed and macports is, add the macports default paths\n+         # as a last resort.\n          if test x$PORT != x; then\n            CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"\n            LDFLAGS=\"$LDFLAGS -L/opt/local/lib\"\n@@ -77,6 +82,15 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n       CFLAGS=\"$saved_CFLAGS\"\n     ])\n \n+saved_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"-Wconditional-uninitialized $CFLAGS\"\n+AC_MSG_CHECKING([if ${CC} supports -Wconditional-uninitialized])\n+AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n+    [ AC_MSG_RESULT([yes]) ],\n+    [ AC_MSG_RESULT([no])\n+      CFLAGS=\"$saved_CFLAGS\"\n+    ])\n+\n saved_CFLAGS=\"$CFLAGS\"\n CFLAGS=\"-fvisibility=hidden $CFLAGS\"\n AC_MSG_CHECKING([if ${CC} supports -fvisibility=hidden])\n@@ -86,6 +100,10 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n       CFLAGS=\"$saved_CFLAGS\"\n     ])\n \n+###\n+### Define config arguments\n+###\n+\n AC_ARG_ENABLE(benchmark,\n     AS_HELP_STRING([--enable-benchmark],[compile benchmark [default=yes]]),\n     [use_benchmark=$enableval],\n@@ -146,13 +164,10 @@ AC_ARG_ENABLE(external_default_callbacks,\n     [use_external_default_callbacks=$enableval],\n     [use_external_default_callbacks=no])\n \n-dnl Test-only override of the (autodetected by the C code) \"widemul\" setting.\n-dnl Legal values are int64 (for [u]int64_t), int128 (for [unsigned] __int128), and auto (the default).\n+# Test-only override of the (autodetected by the C code) \"widemul\" setting.\n+# Legal values are int64 (for [u]int64_t), int128 (for [unsigned] __int128), and auto (the default).\n AC_ARG_WITH([test-override-wide-multiply], [] ,[set_widemul=$withval], [set_widemul=auto])\n \n-AC_ARG_WITH([bignum], [AS_HELP_STRING([--with-bignum=gmp|no|auto],\n-[bignum implementation to use [default=auto]])],[req_bignum=$withval], [req_bignum=auto])\n-\n AC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|arm|no|auto],\n [assembly optimizations to use\u00a0(experimental: arm) [default=auto]])],[req_asm=$withval], [req_asm=auto])\n \n@@ -177,15 +192,22 @@ AC_ARG_WITH([valgrind], [AS_HELP_STRING([--with-valgrind=yes|no|auto],\n )],\n [req_valgrind=$withval], [req_valgrind=auto])\n \n+###\n+### Handle config options (except for modules)\n+###\n+\n if test x\"$req_valgrind\" = x\"no\"; then\n   enable_valgrind=no\n else\n-  AC_CHECK_HEADER([valgrind/memcheck.h], [enable_valgrind=yes], [\n+  SECP_VALGRIND_CHECK\n+  if test x\"$has_valgrind\" != x\"yes\"; then\n     if test x\"$req_valgrind\" = x\"yes\"; then\n       AC_MSG_ERROR([Valgrind support explicitly requested but valgrind/memcheck.h header not available])\n     fi\n     enable_valgrind=no\n-  ], [])\n+  else\n+    enable_valgrind=yes\n+  fi\n fi\n AM_CONDITIONAL([VALGRIND_ENABLED],[test \"$enable_valgrind\" = \"yes\"])\n \n@@ -197,61 +219,6 @@ else\n     CFLAGS=\"-O2 $CFLAGS\"\n fi\n \n-if test x\"$use_ecmult_static_precomputation\" != x\"no\"; then\n-  # Temporarily switch to an environment for the native compiler\n-  save_cross_compiling=$cross_compiling\n-  cross_compiling=no\n-  SAVE_CC=\"$CC\"\n-  CC=\"$CC_FOR_BUILD\"\n-  SAVE_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"$CFLAGS_FOR_BUILD\"\n-  SAVE_CPPFLAGS=\"$CPPFLAGS\"\n-  CPPFLAGS=\"$CPPFLAGS_FOR_BUILD\"\n-  SAVE_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS_FOR_BUILD\"\n-\n-  warn_CFLAGS_FOR_BUILD=\"-Wall -Wextra -Wno-unused-function\"\n-  saved_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"$warn_CFLAGS_FOR_BUILD $CFLAGS\"\n-  AC_MSG_CHECKING([if native ${CC_FOR_BUILD} supports ${warn_CFLAGS_FOR_BUILD}])\n-  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n-      [ AC_MSG_RESULT([yes]) ],\n-      [ AC_MSG_RESULT([no])\n-        CFLAGS=\"$saved_CFLAGS\"\n-      ])\n-\n-  AC_MSG_CHECKING([for working native compiler: ${CC_FOR_BUILD}])\n-  AC_RUN_IFELSE(\n-    [AC_LANG_PROGRAM([], [])],\n-    [working_native_cc=yes],\n-    [working_native_cc=no],[:])\n-\n-  CFLAGS_FOR_BUILD=\"$CFLAGS\"\n-\n-  # Restore the environment\n-  cross_compiling=$save_cross_compiling\n-  CC=\"$SAVE_CC\"\n-  CFLAGS=\"$SAVE_CFLAGS\"\n-  CPPFLAGS=\"$SAVE_CPPFLAGS\"\n-  LDFLAGS=\"$SAVE_LDFLAGS\"\n-\n-  if test x\"$working_native_cc\" = x\"no\"; then\n-    AC_MSG_RESULT([no])\n-    set_precomp=no\n-    m4_define([please_set_for_build], [Please set CC_FOR_BUILD, CFLAGS_FOR_BUILD, CPPFLAGS_FOR_BUILD, and/or LDFLAGS_FOR_BUILD.])\n-    if test x\"$use_ecmult_static_precomputation\" = x\"yes\";  then\n-      AC_MSG_ERROR([native compiler ${CC_FOR_BUILD} does not produce working binaries. please_set_for_build])\n-    else\n-      AC_MSG_WARN([Disabling statically generated ecmult table because the native compiler ${CC_FOR_BUILD} does not produce working binaries. please_set_for_build])\n-    fi\n-  else\n-    AC_MSG_RESULT([yes])\n-    set_precomp=yes\n-  fi\n-else\n-  set_precomp=no\n-fi\n-\n if test x\"$req_asm\" = x\"auto\"; then\n   SECP_64BIT_ASM_CHECK\n   if test x\"$has_64bit_asm\" = x\"yes\"; then\n@@ -279,33 +246,7 @@ else\n   esac\n fi\n \n-if test x\"$req_bignum\" = x\"auto\"; then\n-  SECP_GMP_CHECK\n-  if test x\"$has_gmp\" = x\"yes\"; then\n-    set_bignum=gmp\n-  fi\n-\n-  if test x\"$set_bignum\" = x; then\n-    set_bignum=no\n-  fi\n-else\n-  set_bignum=$req_bignum\n-  case $set_bignum in\n-  gmp)\n-    SECP_GMP_CHECK\n-    if test x\"$has_gmp\" != x\"yes\"; then\n-      AC_MSG_ERROR([gmp bignum explicitly requested but libgmp not available])\n-    fi\n-    ;;\n-  no)\n-    ;;\n-  *)\n-    AC_MSG_ERROR([invalid bignum implementation selection])\n-    ;;\n-  esac\n-fi\n-\n-# select assembly optimization\n+# Select assembly optimization\n use_external_asm=no\n \n case $set_asm in\n@@ -322,7 +263,12 @@ no)\n   ;;\n esac\n \n-# select wide multiplication implementation\n+if test x\"$use_external_asm\" = x\"yes\"; then\n+  AC_DEFINE(USE_EXTERNAL_ASM, 1, [Define this symbol if an external (non-inline) assembly implementation is used])\n+fi\n+\n+\n+# Select wide multiplication implementation\n case $set_widemul in\n int128)\n   AC_DEFINE(USE_FORCE_WIDEMUL_INT128, 1, [Define this symbol to force the use of the (unsigned) __int128 based wide multiplication implementation])\n@@ -337,25 +283,7 @@ auto)\n   ;;\n esac\n \n-# select bignum implementation\n-case $set_bignum in\n-gmp)\n-  AC_DEFINE(HAVE_LIBGMP, 1, [Define this symbol if libgmp is installed])\n-  AC_DEFINE(USE_NUM_GMP, 1, [Define this symbol to use the gmp implementation for num])\n-  AC_DEFINE(USE_FIELD_INV_NUM, 1, [Define this symbol to use the num-based field inverse implementation])\n-  AC_DEFINE(USE_SCALAR_INV_NUM, 1, [Define this symbol to use the num-based scalar inverse implementation])\n-  ;;\n-no)\n-  AC_DEFINE(USE_NUM_NONE, 1, [Define this symbol to use no num implementation])\n-  AC_DEFINE(USE_FIELD_INV_BUILTIN, 1, [Define this symbol to use the native field inverse implementation])\n-  AC_DEFINE(USE_SCALAR_INV_BUILTIN, 1, [Define this symbol to use the native scalar inverse implementation])\n-  ;;\n-*)\n-  AC_MSG_ERROR([invalid bignum implementation])\n-  ;;\n-esac\n-\n-#set ecmult window size\n+# Set ecmult window size\n if test x\"$req_ecmult_window\" = x\"auto\"; then\n   set_ecmult_window=15\n else\n@@ -377,7 +305,7 @@ case $set_ecmult_window in\n   ;;\n esac\n \n-#set ecmult gen precision\n+# Set ecmult gen precision\n if test x\"$req_ecmult_gen_precision\" = x\"auto\"; then\n   set_ecmult_gen_precision=4\n else\n@@ -419,15 +347,93 @@ else\n   enable_openssl_tests=no\n fi\n \n-if test x\"$set_bignum\" = x\"gmp\"; then\n-  SECP_LIBS=\"$SECP_LIBS $GMP_LIBS\"\n-  SECP_INCLUDES=\"$SECP_INCLUDES $GMP_CPPFLAGS\"\n+if test x\"$enable_valgrind\" = x\"yes\"; then\n+  SECP_INCLUDES=\"$SECP_INCLUDES $VALGRIND_CPPFLAGS\"\n+fi\n+\n+# Handle static precomputation (after everything which modifies CFLAGS and friends)\n+if test x\"$use_ecmult_static_precomputation\" != x\"no\"; then\n+  if test x\"$cross_compiling\" = x\"no\"; then\n+    set_precomp=yes\n+    if test x\"${CC_FOR_BUILD+x}${CFLAGS_FOR_BUILD+x}${CPPFLAGS_FOR_BUILD+x}${LDFLAGS_FOR_BUILD+x}\" != x; then\n+      AC_MSG_WARN([CC_FOR_BUILD, CFLAGS_FOR_BUILD, CPPFLAGS_FOR_BUILD, and/or LDFLAGS_FOR_BUILD is set but ignored because we are not cross-compiling.])\n+    fi\n+    # If we're not cross-compiling, simply use the same compiler for building the static precompation code.\n+    CC_FOR_BUILD=\"$CC\"\n+    CFLAGS_FOR_BUILD=\"$CFLAGS\"\n+    CPPFLAGS_FOR_BUILD=\"$CPPFLAGS\"\n+    LDFLAGS_FOR_BUILD=\"$LDFLAGS\"\n+  else\n+    AX_PROG_CC_FOR_BUILD\n+\n+    # Temporarily switch to an environment for the native compiler\n+    save_cross_compiling=$cross_compiling\n+    cross_compiling=no\n+    SAVE_CC=\"$CC\"\n+    CC=\"$CC_FOR_BUILD\"\n+    SAVE_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS_FOR_BUILD\"\n+    SAVE_CPPFLAGS=\"$CPPFLAGS\"\n+    CPPFLAGS=\"$CPPFLAGS_FOR_BUILD\"\n+    SAVE_LDFLAGS=\"$LDFLAGS\"\n+    LDFLAGS=\"$LDFLAGS_FOR_BUILD\"\n+\n+    warn_CFLAGS_FOR_BUILD=\"-Wall -Wextra -Wno-unused-function\"\n+    saved_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$warn_CFLAGS_FOR_BUILD $CFLAGS\"\n+    AC_MSG_CHECKING([if native ${CC_FOR_BUILD} supports ${warn_CFLAGS_FOR_BUILD}])\n+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n+        [ AC_MSG_RESULT([yes]) ],\n+        [ AC_MSG_RESULT([no])\n+          CFLAGS=\"$saved_CFLAGS\"\n+        ])\n+\n+    AC_MSG_CHECKING([for working native compiler: ${CC_FOR_BUILD}])\n+    AC_RUN_IFELSE(\n+      [AC_LANG_PROGRAM([], [])],\n+      [working_native_cc=yes],\n+      [working_native_cc=no],[:])\n+\n+    CFLAGS_FOR_BUILD=\"$CFLAGS\"\n+\n+    # Restore the environment\n+    cross_compiling=$save_cross_compiling\n+    CC=\"$SAVE_CC\"\n+    CFLAGS=\"$SAVE_CFLAGS\"\n+    CPPFLAGS=\"$SAVE_CPPFLAGS\"\n+    LDFLAGS=\"$SAVE_LDFLAGS\"\n+\n+    if test x\"$working_native_cc\" = x\"no\"; then\n+      AC_MSG_RESULT([no])\n+      set_precomp=no\n+      m4_define([please_set_for_build], [Please set CC_FOR_BUILD, CFLAGS_FOR_BUILD, CPPFLAGS_FOR_BUILD, and/or LDFLAGS_FOR_BUILD.])\n+      if test x\"$use_ecmult_static_precomputation\" = x\"yes\";  then\n+        AC_MSG_ERROR([native compiler ${CC_FOR_BUILD} does not produce working binaries. please_set_for_build])\n+      else\n+        AC_MSG_WARN([Disabling statically generated ecmult table because the native compiler ${CC_FOR_BUILD} does not produce working binaries. please_set_for_build])\n+      fi\n+    else\n+      AC_MSG_RESULT([yes])\n+      set_precomp=yes\n+    fi\n+  fi\n+\n+  AC_SUBST(CC_FOR_BUILD)\n+  AC_SUBST(CFLAGS_FOR_BUILD)\n+  AC_SUBST(CPPFLAGS_FOR_BUILD)\n+  AC_SUBST(LDFLAGS_FOR_BUILD)\n+else\n+  set_precomp=no\n fi\n \n if test x\"$set_precomp\" = x\"yes\"; then\n   AC_DEFINE(USE_ECMULT_STATIC_PRECOMPUTATION, 1, [Define this symbol to use a statically generated ecmult table])\n fi\n \n+###\n+### Handle module options\n+###\n+\n if test x\"$enable_module_ecdh\" = x\"yes\"; then\n   AC_DEFINE(ENABLE_MODULE_ECDH, 1, [Define this symbol to enable the ECDH module])\n fi\n@@ -447,14 +453,14 @@ if test x\"$enable_module_extrakeys\" = x\"yes\"; then\n   AC_DEFINE(ENABLE_MODULE_EXTRAKEYS, 1, [Define this symbol to enable the extrakeys module])\n fi\n \n-if test x\"$use_external_asm\" = x\"yes\"; then\n-  AC_DEFINE(USE_EXTERNAL_ASM, 1, [Define this symbol if an external (non-inline) assembly implementation is used])\n-fi\n-\n if test x\"$use_external_default_callbacks\" = x\"yes\"; then\n   AC_DEFINE(USE_EXTERNAL_DEFAULT_CALLBACKS, 1, [Define this symbol if an external implementation of the default callbacks is used])\n fi\n \n+###\n+### Check for --enable-experimental if necessary\n+###\n+\n if test x\"$enable_experimental\" = x\"yes\"; then\n   AC_MSG_NOTICE([******])\n   AC_MSG_NOTICE([WARNING: experimental build])\n@@ -474,6 +480,10 @@ else\n   fi\n fi\n \n+###\n+### Generate output\n+###\n+\n AC_CONFIG_HEADERS([src/libsecp256k1-config.h])\n AC_CONFIG_FILES([Makefile libsecp256k1.pc])\n AC_SUBST(SECP_INCLUDES)\n@@ -492,7 +502,7 @@ AM_CONDITIONAL([ENABLE_MODULE_SCHNORRSIG], [test x\"$enable_module_schnorrsig\" =\n AM_CONDITIONAL([USE_EXTERNAL_ASM], [test x\"$use_external_asm\" = x\"yes\"])\n AM_CONDITIONAL([USE_ASM_ARM], [test x\"$set_asm\" = x\"arm\"])\n \n-dnl make sure nothing new is exported so that we don't break the cache\n+# Make sure nothing new is exported so that we don't break the cache.\n PKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\"\n unset PKG_CONFIG_PATH\n PKG_CONFIG_PATH=\"$PKGCONFIG_PATH_TEMP\"\n@@ -513,10 +523,9 @@ echo \"  module extrakeys        = $enable_module_extrakeys\"\n echo \"  module schnorrsig       = $enable_module_schnorrsig\"\n echo\n echo \"  asm                     = $set_asm\"\n-echo \"  bignum                  = $set_bignum\"\n echo \"  ecmult window size      = $set_ecmult_window\"\n echo \"  ecmult gen prec. bits   = $set_ecmult_gen_precision\"\n-dnl Hide test-only options unless they're used.\n+# Hide test-only options unless they're used.\n if test x\"$set_widemul\" != xauto; then\n echo \"  wide multiplication     = $set_widemul\"\n fi\n@@ -527,3 +536,9 @@ echo \"  CFLAGS                  = $CFLAGS\"\n echo \"  CPPFLAGS                = $CPPFLAGS\"\n echo \"  LDFLAGS                 = $LDFLAGS\"\n echo\n+if test x\"$set_precomp\" = x\"yes\"; then\n+echo \"  CC_FOR_BUILD            = $CC_FOR_BUILD\"\n+echo \"  CFLAGS_FOR_BUILD        = $CFLAGS_FOR_BUILD\"\n+echo \"  CPPFLAGS_FOR_BUILD      = $CPPFLAGS_FOR_BUILD\"\n+echo \"  LDFLAGS_FOR_BUILD       = $LDFLAGS_FOR_BUILD\"\n+fi"
      },
      {
        "sha": "c1627e37e9e11900796d426eae58056c525b1a11",
        "filename": "src/secp256k1/contrib/lax_der_parsing.c",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_parsing.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_parsing.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_parsing.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2015 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #include <string.h>\n #include <secp256k1.h>"
      },
      {
        "sha": "6b7255e28f5bc78ffdc48940821d8fed062eaa55",
        "filename": "src/secp256k1/contrib/lax_der_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_parsing.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2015 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n /****\n  * Please do not link this file directly. It is not part of the libsecp256k1"
      },
      {
        "sha": "429760fbb6d19ab0afff7c36d4f37431b8ecd932",
        "filename": "src/secp256k1/contrib/lax_der_privatekey_parsing.c",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_privatekey_parsing.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_privatekey_parsing.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_privatekey_parsing.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014, 2015 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014, 2015 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #include <string.h>\n #include <secp256k1.h>"
      },
      {
        "sha": "602c7c556ad153a06459222663db08b1c4e8df7c",
        "filename": "src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/contrib/lax_der_privatekey_parsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/contrib/lax_der_privatekey_parsing.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014, 2015 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014, 2015 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n /****\n  * Please do not link this file directly. It is not part of the libsecp256k1"
      },
      {
        "sha": "3ae556f9a724011c4fa27b8e929e0f0e1e56e4f2",
        "filename": "src/secp256k1/doc/safegcd_implementation.md",
        "status": "added",
        "additions": 765,
        "deletions": 0,
        "changes": 765,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/doc/safegcd_implementation.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/doc/safegcd_implementation.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/doc/safegcd_implementation.md?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,765 @@\n+# The safegcd implementation in libsecp256k1 explained\n+\n+This document explains the modular inverse implementation in the `src/modinv*.h` files. It is based\n+on the paper\n+[\"Fast constant-time gcd computation and modular inversion\"](https://gcd.cr.yp.to/papers.html#safegcd)\n+by Daniel J. Bernstein and Bo-Yin Yang. The references below are for the Date: 2019.04.13 version.\n+\n+The actual implementation is in C of course, but for demonstration purposes Python3 is used here.\n+Most implementation aspects and optimizations are explained, except those that depend on the specific\n+number representation used in the C code.\n+\n+## 1. Computing the Greatest Common Divisor (GCD) using divsteps\n+\n+The algorithm from the paper (section 11), at a very high level, is this:\n+\n+```python\n+def gcd(f, g):\n+    \"\"\"Compute the GCD of an odd integer f and another integer g.\"\"\"\n+    assert f & 1  # require f to be odd\n+    delta = 1     # additional state variable\n+    while g != 0:\n+        assert f & 1  # f will be odd in every iteration\n+        if delta > 0 and g & 1:\n+            delta, f, g = 1 - delta, g, (g - f) // 2\n+        elif g & 1:\n+            delta, f, g = 1 + delta, f, (g + f) // 2\n+        else:\n+            delta, f, g = 1 + delta, f, (g    ) // 2\n+    return abs(f)\n+```\n+\n+It computes the greatest common divisor of an odd integer *f* and any integer *g*. Its inner loop\n+keeps rewriting the variables *f* and *g* alongside a state variable *&delta;* that starts at *1*, until\n+*g=0* is reached. At that point, *|f|* gives the GCD. Each of the transitions in the loop is called a\n+\"division step\" (referred to as divstep in what follows).\n+\n+For example, *gcd(21, 14)* would be computed as:\n+- Start with *&delta;=1 f=21 g=14*\n+- Take the third branch: *&delta;=2 f=21 g=7*\n+- Take the first branch: *&delta;=-1 f=7 g=-7*\n+- Take the second branch: *&delta;=0 f=7 g=0*\n+- The answer *|f| = 7*.\n+\n+Why it works:\n+- Divsteps can be decomposed into two steps (see paragraph 8.2 in the paper):\n+  - (a) If *g* is odd, replace *(f,g)* with *(g,g-f)* or (f,g+f), resulting in an even *g*.\n+  - (b) Replace *(f,g)* with *(f,g/2)* (where *g* is guaranteed to be even).\n+- Neither of those two operations change the GCD:\n+  - For (a), assume *gcd(f,g)=c*, then it must be the case that *f=a&thinsp;c* and *g=b&thinsp;c* for some integers *a*\n+    and *b*. As *(g,g-f)=(b&thinsp;c,(b-a)c)* and *(f,f+g)=(a&thinsp;c,(a+b)c)*, the result clearly still has\n+    common factor *c*. Reasoning in the other direction shows that no common factor can be added by\n+    doing so either.\n+  - For (b), we know that *f* is odd, so *gcd(f,g)* clearly has no factor *2*, and we can remove\n+    it from *g*.\n+- The algorithm will eventually converge to *g=0*. This is proven in the paper (see theorem G.3).\n+- It follows that eventually we find a final value *f'* for which *gcd(f,g) = gcd(f',0)*. As the\n+  gcd of *f'* and *0* is *|f'|* by definition, that is our answer.\n+\n+Compared to more [traditional GCD algorithms](https://en.wikipedia.org/wiki/Euclidean_algorithm), this one has the property of only ever looking at\n+the low-order bits of the variables to decide the next steps, and being easy to make\n+constant-time (in more low-level languages than Python). The *&delta;* parameter is necessary to\n+guide the algorithm towards shrinking the numbers' magnitudes without explicitly needing to look\n+at high order bits.\n+\n+Properties that will become important later:\n+- Performing more divsteps than needed is not a problem, as *f* does not change anymore after *g=0*.\n+- Only even numbers are divided by *2*. This means that when reasoning about it algebraically we\n+  do not need to worry about rounding.\n+- At every point during the algorithm's execution the next *N* steps only depend on the bottom *N*\n+  bits of *f* and *g*, and on *&delta;*.\n+\n+\n+## 2. From GCDs to modular inverses\n+\n+We want an algorithm to compute the inverse *a* of *x* modulo *M*, i.e. the number a such that *a&thinsp;x=1\n+mod M*. This inverse only exists if the GCD of *x* and *M* is *1*, but that is always the case if *M* is\n+prime and *0 < x < M*. In what follows, assume that the modular inverse exists.\n+It turns out this inverse can be computed as a side effect of computing the GCD by keeping track\n+of how the internal variables can be written as linear combinations of the inputs at every step\n+(see the [extended Euclidean algorithm](https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm)).\n+Since the GCD is *1*, such an algorithm will compute numbers *a* and *b* such that a&thinsp;x + b&thinsp;M = 1*.\n+Taking that expression *mod M* gives *a&thinsp;x mod M = 1*, and we see that *a* is the modular inverse of *x\n+mod M*.\n+\n+A similar approach can be used to calculate modular inverses using the divsteps-based GCD\n+algorithm shown above, if the modulus *M* is odd. To do so, compute *gcd(f=M,g=x)*, while keeping\n+track of extra variables *d* and *e*, for which at every step *d = f/x (mod M)* and *e = g/x (mod M)*.\n+*f/x* here means the number which multiplied with *x* gives *f mod M*. As *f* and *g* are initialized to *M*\n+and *x* respectively, *d* and *e* just start off being *0* (*M/x mod M = 0/x mod M = 0*) and *1* (*x/x mod M\n+= 1*).\n+\n+```python\n+def div2(M, x):\n+    \"\"\"Helper routine to compute x/2 mod M (where M is odd).\"\"\"\n+    assert M & 1\n+    if x & 1: # If x is odd, make it even by adding M.\n+        x += M\n+    # x must be even now, so a clean division by 2 is possible.\n+    return x // 2\n+\n+def modinv(M, x):\n+    \"\"\"Compute the inverse of x mod M (given that it exists, and M is odd).\"\"\"\n+    assert M & 1\n+    delta, f, g, d, e = 1, M, x, 0, 1\n+    while g != 0:\n+        # Note that while division by two for f and g is only ever done on even inputs, this is\n+        # not true for d and e, so we need the div2 helper function.\n+        if delta > 0 and g & 1:\n+            delta, f, g, d, e = 1 - delta, g, (g - f) // 2, e, div2(M, e - d)\n+        elif g & 1:\n+            delta, f, g, d, e = 1 + delta, f, (g + f) // 2, d, div2(M, e + d)\n+        else:\n+            delta, f, g, d, e = 1 + delta, f, (g    ) // 2, d, div2(M, e    )\n+        # Verify that the invariants d=f/x mod M, e=g/x mod M are maintained.\n+        assert f % M == (d * x) % M\n+        assert g % M == (e * x) % M\n+    assert f == 1 or f == -1  # |f| is the GCD, it must be 1\n+    # Because of invariant d = f/x (mod M), 1/x = d/f (mod M). As |f|=1, d/f = d*f.\n+    return (d * f) % M\n+```\n+\n+Also note that this approach to track *d* and *e* throughout the computation to determine the inverse\n+is different from the paper. There (see paragraph 12.1 in the paper) a transition matrix for the\n+entire computation is determined (see section 3 below) and the inverse is computed from that.\n+The approach here avoids the need for 2x2 matrix multiplications of various sizes, and appears to\n+be faster at the level of optimization we're able to do in C.\n+\n+\n+## 3. Batching multiple divsteps\n+\n+Every divstep can be expressed as a matrix multiplication, applying a transition matrix *(1/2 t)*\n+to both vectors *[f, g]* and *[d, e]* (see paragraph 8.1 in the paper):\n+\n+```\n+  t = [ u,  v ]\n+      [ q,  r ]\n+\n+  [ out_f ] = (1/2 * t) * [ in_f ]\n+  [ out_g ] =             [ in_g ]\n+\n+  [ out_d ] = (1/2 * t) * [ in_d ]  (mod M)\n+  [ out_e ]               [ in_e ]\n+```\n+\n+where *(u, v, q, r)* is *(0, 2, -1, 1)*, *(2, 0, 1, 1)*, or *(2, 0, 0, 1)*, depending on which branch is\n+taken. As above, the resulting *f* and *g* are always integers.\n+\n+Performing multiple divsteps corresponds to a multiplication with the product of all the\n+individual divsteps' transition matrices. As each transition matrix consists of integers\n+divided by *2*, the product of these matrices will consist of integers divided by *2<sup>N</sup>* (see also\n+theorem 9.2 in the paper). These divisions are expensive when updating *d* and *e*, so we delay\n+them: we compute the integer coefficients of the combined transition matrix scaled by *2<sup>N</sup>*, and\n+do one division by *2<sup>N</sup>* as a final step:\n+\n+```python\n+def divsteps_n_matrix(delta, f, g):\n+    \"\"\"Compute delta and transition matrix t after N divsteps (multiplied by 2^N).\"\"\"\n+    u, v, q, r = 1, 0, 0, 1 # start with identity matrix\n+    for _ in range(N):\n+        if delta > 0 and g & 1:\n+            delta, f, g, u, v, q, r = 1 - delta, g, (g - f) // 2, 2*q, 2*r, q-u, r-v\n+        elif g & 1:\n+            delta, f, g, u, v, q, r = 1 + delta, f, (g + f) // 2, 2*u, 2*v, q+u, r+v\n+        else:\n+            delta, f, g, u, v, q, r = 1 + delta, f, (g    ) // 2, 2*u, 2*v, q  , r\n+    return delta, (u, v, q, r)\n+```\n+\n+As the branches in the divsteps are completely determined by the bottom *N* bits of *f* and *g*, this\n+function to compute the transition matrix only needs to see those bottom bits. Furthermore all\n+intermediate results and outputs fit in *(N+1)*-bit numbers (unsigned for *f* and *g*; signed for *u*, *v*,\n+*q*, and *r*) (see also paragraph 8.3 in the paper). This means that an implementation using 64-bit\n+integers could set *N=62* and compute the full transition matrix for 62 steps at once without any\n+big integer arithmetic at all. This is the reason why this algorithm is efficient: it only needs\n+to update the full-size *f*, *g*, *d*, and *e* numbers once every *N* steps.\n+\n+We still need functions to compute:\n+\n+```\n+  [ out_f ] = (1/2^N * [ u,  v ]) * [ in_f ]\n+  [ out_g ]   (        [ q,  r ])   [ in_g ]\n+\n+  [ out_d ] = (1/2^N * [ u,  v ]) * [ in_d ]  (mod M)\n+  [ out_e ]   (        [ q,  r ])   [ in_e ]\n+```\n+\n+Because the divsteps transformation only ever divides even numbers by two, the result of *t&thinsp;[f,g]* is always even. When *t* is a composition of *N* divsteps, it follows that the resulting *f*\n+and *g* will be multiple of *2<sup>N</sup>*, and division by *2<sup>N</sup>* is simply shifting them down:\n+\n+```python\n+def update_fg(f, g, t):\n+    \"\"\"Multiply matrix t/2^N with [f, g].\"\"\"\n+    u, v, q, r = t\n+    cf, cg = u*f + v*g, q*f + r*g\n+    # (t / 2^N) should cleanly apply to [f,g] so the result of t*[f,g] should have N zero\n+    # bottom bits.\n+    assert cf % 2**N == 0\n+    assert cg % 2**N == 0\n+    return cf >> N, cg >> N\n+```\n+\n+The same is not true for *d* and *e*, and we need an equivalent of the `div2` function for division by *2<sup>N</sup> mod M*.\n+This is easy if we have precomputed *1/M mod 2<sup>N</sup>* (which always exists for odd *M*):\n+\n+```python\n+def div2n(M, Mi, x):\n+    \"\"\"Compute x/2^N mod M, given Mi = 1/M mod 2^N.\"\"\"\n+    assert (M * Mi) % 2**N == 1\n+    # Find a factor m such that m*M has the same bottom N bits as x. We want:\n+    #     (m * M) mod 2^N = x mod 2^N\n+    # <=> m mod 2^N = (x / M) mod 2^N\n+    # <=> m mod 2^N = (x * Mi) mod 2^N\n+    m = (Mi * x) % 2**N\n+    # Subtract that multiple from x, cancelling its bottom N bits.\n+    x -= m * M\n+    # Now a clean division by 2^N is possible.\n+    assert x % 2**N == 0\n+    return (x >> N) % M\n+\n+def update_de(d, e, t, M, Mi):\n+    \"\"\"Multiply matrix t/2^N with [d, e], modulo M.\"\"\"\n+    u, v, q, r = t\n+    cd, ce = u*d + v*e, q*d + r*e\n+    return div2n(M, Mi, cd), div2n(M, Mi, ce)\n+```\n+\n+With all of those, we can write a version of `modinv` that performs *N* divsteps at once:\n+\n+```python3\n+def modinv(M, Mi, x):\n+    \"\"\"Compute the modular inverse of x mod M, given Mi=1/M mod 2^N.\"\"\"\n+    assert M & 1\n+    delta, f, g, d, e = 1, M, x, 0, 1\n+    while g != 0:\n+        # Compute the delta and transition matrix t for the next N divsteps (this only needs\n+        # (N+1)-bit signed integer arithmetic).\n+        delta, t = divsteps_n_matrix(delta, f % 2**N, g % 2**N)\n+        # Apply the transition matrix t to [f, g]:\n+        f, g = update_fg(f, g, t)\n+        # Apply the transition matrix t to [d, e]:\n+        d, e = update_de(d, e, t, M, Mi)\n+    return (d * f) % M\n+```\n+\n+This means that in practice we'll always perform a multiple of *N* divsteps. This is not a problem\n+because once *g=0*, further divsteps do not affect *f*, *g*, *d*, or *e* anymore (only *&delta;* keeps\n+increasing). For variable time code such excess iterations will be mostly optimized away in later\n+sections.\n+\n+\n+## 4. Avoiding modulus operations\n+\n+So far, there are two places where we compute a remainder of big numbers modulo *M*: at the end of\n+`div2n` in every `update_de`, and at the very end of `modinv` after potentially negating *d* due to the\n+sign of *f*. These are relatively expensive operations when done generically.\n+\n+To deal with the modulus operation in `div2n`, we simply stop requiring *d* and *e* to be in range\n+*[0,M)* all the time. Let's start by inlining `div2n` into `update_de`, and dropping the modulus\n+operation at the end:\n+\n+```python\n+def update_de(d, e, t, M, Mi):\n+    \"\"\"Multiply matrix t/2^N with [d, e] mod M, given Mi=1/M mod 2^N.\"\"\"\n+    u, v, q, r = t\n+    cd, ce = u*d + v*e, q*d + r*e\n+    # Cancel out bottom N bits of cd and ce.\n+    md = -((Mi * cd) % 2**N)\n+    me = -((Mi * ce) % 2**N)\n+    cd += md * M\n+    ce += me * M\n+    # And cleanly divide by 2**N.\n+    return cd >> N, ce >> N\n+```\n+\n+Let's look at bounds on the ranges of these numbers. It can be shown that *|u|+|v|* and *|q|+|r|*\n+never exceed *2<sup>N</sup>* (see paragraph 8.3 in the paper), and thus a multiplication with *t* will have\n+outputs whose absolute values are at most *2<sup>N</sup>* times the maximum absolute input value. In case the\n+inputs *d* and *e* are in *(-M,M)*, which is certainly true for the initial values *d=0* and *e=1* assuming\n+*M > 1*, the multiplication results in numbers in range *(-2<sup>N</sup>M,2<sup>N</sup>M)*. Subtracting less than *2<sup>N</sup>*\n+times *M* to cancel out *N* bits brings that up to *(-2<sup>N+1</sup>M,2<sup>N</sup>M)*, and\n+dividing by *2<sup>N</sup>* at the end takes it to *(-2M,M)*. Another application of `update_de` would take that\n+to *(-3M,2M)*, and so forth. This progressive expansion of the variables' ranges can be\n+counteracted by incrementing *d* and *e* by *M* whenever they're negative:\n+\n+```python\n+    ...\n+    if d < 0:\n+        d += M\n+    if e < 0:\n+        e += M\n+    cd, ce = u*d + v*e, q*d + r*e\n+    # Cancel out bottom N bits of cd and ce.\n+    ...\n+```\n+\n+With inputs in *(-2M,M)*, they will first be shifted into range *(-M,M)*, which means that the\n+output will again be in *(-2M,M)*, and this remains the case regardless of how many `update_de`\n+invocations there are. In what follows, we will try to make this more efficient.\n+\n+Note that increasing *d* by *M* is equal to incrementing *cd* by *u&thinsp;M* and *ce* by *q&thinsp;M*. Similarly,\n+increasing *e* by *M* is equal to incrementing *cd* by *v&thinsp;M* and *ce* by *r&thinsp;M*. So we could instead write:\n+\n+```python\n+    ...\n+    cd, ce = u*d + v*e, q*d + r*e\n+    # Perform the equivalent of incrementing d, e by M when they're negative.\n+    if d < 0:\n+        cd += u*M\n+        ce += q*M\n+    if e < 0:\n+        cd += v*M\n+        ce += r*M\n+    # Cancel out bottom N bits of cd and ce.\n+    md = -((Mi * cd) % 2**N)\n+    me = -((Mi * ce) % 2**N)\n+    cd += md * M\n+    ce += me * M\n+    ...\n+```\n+\n+Now note that we have two steps of corrections to *cd* and *ce* that add multiples of *M*: this\n+increment, and the decrement that cancels out bottom bits. The second one depends on the first\n+one, but they can still be efficiently combined by only computing the bottom bits of *cd* and *ce*\n+at first, and using that to compute the final *md*, *me* values:\n+\n+```python\n+def update_de(d, e, t, M, Mi):\n+    \"\"\"Multiply matrix t/2^N with [d, e], modulo M.\"\"\"\n+    u, v, q, r = t\n+    md, me = 0, 0\n+    # Compute what multiples of M to add to cd and ce.\n+    if d < 0:\n+        md += u\n+        me += q\n+    if e < 0:\n+        md += v\n+        me += r\n+    # Compute bottom N bits of t*[d,e] + M*[md,me].\n+    cd, ce = (u*d + v*e + md*M) % 2**N, (q*d + r*e + me*M) % 2**N\n+    # Correct md and me such that the bottom N bits of t*[d,e] + M*[md,me] are zero.\n+    md -= (Mi * cd) % 2**N\n+    me -= (Mi * ce) % 2**N\n+    # Do the full computation.\n+    cd, ce = u*d + v*e + md*M, q*d + r*e + me*M\n+    # And cleanly divide by 2**N.\n+    return cd >> N, ce >> N\n+```\n+\n+One last optimization: we can avoid the *md&thinsp;M* and *me&thinsp;M* multiplications in the bottom bits of *cd*\n+and *ce* by moving them to the *md* and *me* correction:\n+\n+```python\n+    ...\n+    # Compute bottom N bits of t*[d,e].\n+    cd, ce = (u*d + v*e) % 2**N, (q*d + r*e) % 2**N\n+    # Correct md and me such that the bottom N bits of t*[d,e]+M*[md,me] are zero.\n+    # Note that this is not the same as {md = (-Mi * cd) % 2**N} etc. That would also result in N\n+    # zero bottom bits, but isn't guaranteed to be a reduction of [0,2^N) compared to the\n+    # previous md and me values, and thus would violate our bounds analysis.\n+    md -= (Mi*cd + md) % 2**N\n+    me -= (Mi*ce + me) % 2**N\n+    ...\n+```\n+\n+The resulting function takes *d* and *e* in range *(-2M,M)* as inputs, and outputs values in the same\n+range. That also means that the *d* value at the end of `modinv` will be in that range, while we want\n+a result in *[0,M)*. To do that, we need a normalization function. It's easy to integrate the\n+conditional negation of *d* (based on the sign of *f*) into it as well:\n+\n+```python\n+def normalize(sign, v, M):\n+    \"\"\"Compute sign*v mod M, where v is in range (-2*M,M); output in [0,M).\"\"\"\n+    assert sign == 1 or sign == -1\n+    # v in (-2*M,M)\n+    if v < 0:\n+        v += M\n+    # v in (-M,M). Now multiply v with sign (which can only be 1 or -1).\n+    if sign == -1:\n+        v = -v\n+    # v in (-M,M)\n+    if v < 0:\n+        v += M\n+    # v in [0,M)\n+    return v\n+```\n+\n+And calling it in `modinv` is simply:\n+\n+```python\n+   ...\n+   return normalize(f, d, M)\n+```\n+\n+\n+## 5. Constant-time operation\n+\n+The primary selling point of the algorithm is fast constant-time operation. What code flow still\n+depends on the input data so far?\n+\n+- the number of iterations of the while *g &ne; 0* loop in `modinv`\n+- the branches inside `divsteps_n_matrix`\n+- the sign checks in `update_de`\n+- the sign checks in `normalize`\n+\n+To make the while loop in `modinv` constant time it can be replaced with a constant number of\n+iterations. The paper proves (Theorem 11.2) that *741* divsteps are sufficient for any *256*-bit\n+inputs, and [safegcd-bounds](https://github.com/sipa/safegcd-bounds) shows that the slightly better bound *724* is\n+sufficient even. Given that every loop iteration performs *N* divsteps, it will run a total of\n+*&lceil;724/N&rceil;* times.\n+\n+To deal with the branches in `divsteps_n_matrix` we will replace them with constant-time bitwise\n+operations (and hope the C compiler isn't smart enough to turn them back into branches; see\n+`valgrind_ctime_test.c` for automated tests that this isn't the case). To do so, observe that a\n+divstep can be written instead as (compare to the inner loop of `gcd` in section 1).\n+\n+```python\n+    x = -f if delta > 0 else f         # set x equal to (input) -f or f\n+    if g & 1:\n+        g += x                         # set g to (input) g-f or g+f\n+        if delta > 0:\n+            delta = -delta\n+            f += g                     # set f to (input) g (note that g was set to g-f before)\n+    delta += 1\n+    g >>= 1\n+```\n+\n+To convert the above to bitwise operations, we rely on a trick to negate conditionally: per the\n+definition of negative numbers in two's complement, (*-v == ~v + 1*) holds for every number *v*. As\n+*-1* in two's complement is all *1* bits, bitflipping can be expressed as xor with *-1*. It follows\n+that *-v == (v ^ -1) - (-1)*. Thus, if we have a variable *c* that takes on values *0* or *-1*, then\n+*(v ^ c) - c* is *v* if *c=0* and *-v* if *c=-1*.\n+\n+Using this we can write:\n+\n+```python\n+    x = -f if delta > 0 else f\n+```\n+\n+in constant-time form as:\n+\n+```python\n+    c1 = (-delta) >> 63\n+    # Conditionally negate f based on c1:\n+    x = (f ^ c1) - c1\n+```\n+\n+To use that trick, we need a helper mask variable *c1* that resolves the condition *&delta;>0* to *-1*\n+(if true) or *0* (if false). We compute *c1* using right shifting, which is equivalent to dividing by\n+the specified power of *2* and rounding down (in Python, and also in C under the assumption of a typical two's complement system; see\n+`assumptions.h` for tests that this is the case). Right shifting by *63* thus maps all\n+numbers in range *[-2<sup>63</sup>,0)* to *-1*, and numbers in range *[0,2<sup>63</sup>)* to *0*.\n+\n+Using the facts that *x&0=0* and *x&(-1)=x* (on two's complement systems again), we can write:\n+\n+```python\n+    if g & 1:\n+        g += x\n+```\n+\n+as:\n+\n+```python\n+    # Compute c2=0 if g is even and c2=-1 if g is odd.\n+    c2 = -(g & 1)\n+    # This masks out x if g is even, and leaves x be if g is odd.\n+    g += x & c2\n+```\n+\n+Using the conditional negation trick again we can write:\n+\n+```python\n+    if g & 1:\n+        if delta > 0:\n+            delta = -delta\n+```\n+\n+as:\n+\n+```python\n+    # Compute c3=-1 if g is odd and delta>0, and 0 otherwise.\n+    c3 = c1 & c2\n+    # Conditionally negate delta based on c3:\n+    delta = (delta ^ c3) - c3\n+```\n+\n+Finally:\n+\n+```python\n+    if g & 1:\n+        if delta > 0:\n+            f += g\n+```\n+\n+becomes:\n+\n+```python\n+    f += g & c3\n+```\n+\n+It turns out that this can be implemented more efficiently by applying the substitution\n+*&eta;=-&delta;*. In this representation, negating *&delta;* corresponds to negating *&eta;*, and incrementing\n+*&delta;* corresponds to decrementing *&eta;*. This allows us to remove the negation in the *c1*\n+computation:\n+\n+```python\n+    # Compute a mask c1 for eta < 0, and compute the conditional negation x of f:\n+    c1 = eta >> 63\n+    x = (f ^ c1) - c1\n+    # Compute a mask c2 for odd g, and conditionally add x to g:\n+    c2 = -(g & 1)\n+    g += x & c2\n+    # Compute a mask c for (eta < 0) and odd (input) g, and use it to conditionally negate eta,\n+    # and add g to f:\n+    c3 = c1 & c2\n+    eta = (eta ^ c3) - c3\n+    f += g & c3\n+    # Incrementing delta corresponds to decrementing eta.\n+    eta -= 1\n+    g >>= 1\n+```\n+\n+A variant of divsteps with better worst-case performance can be used instead: starting *&delta;* at\n+*1/2* instead of *1*. This reduces the worst case number of iterations to *590* for *256*-bit inputs\n+(which can be shown using convex hull analysis). In this case, the substitution *&zeta;=-(&delta;+1/2)*\n+is used instead to keep the variable integral. Incrementing *&delta;* by *1* still translates to\n+decrementing *&zeta;* by *1*, but negating *&delta;* now corresponds to going from *&zeta;* to *-(&zeta;+1)*, or\n+*~&zeta;*. Doing that conditionally based on *c3* is simply:\n+\n+```python\n+    ...\n+    c3 = c1 & c2\n+    zeta ^= c3\n+    ...\n+```\n+\n+By replacing the loop in `divsteps_n_matrix` with a variant of the divstep code above (extended to\n+also apply all *f* operations to *u*, *v* and all *g* operations to *q*, *r*), a constant-time version of\n+`divsteps_n_matrix` is obtained. The full code will be in section 7.\n+\n+These bit fiddling tricks can also be used to make the conditional negations and additions in\n+`update_de` and `normalize` constant-time.\n+\n+\n+## 6. Variable-time optimizations\n+\n+In section 5, we modified the `divsteps_n_matrix` function (and a few others) to be constant time.\n+Constant time operations are only necessary when computing modular inverses of secret data. In\n+other cases, it slows down calculations unnecessarily. In this section, we will construct a\n+faster non-constant time `divsteps_n_matrix` function.\n+\n+To do so, first consider yet another way of writing the inner loop of divstep operations in\n+`gcd` from section 1. This decomposition is also explained in the paper in section 8.2. We use\n+the original version with initial *&delta;=1* and *&eta;=-&delta;* here.\n+\n+```python\n+for _ in range(N):\n+    if g & 1 and eta < 0:\n+        eta, f, g = -eta, g, -f\n+    if g & 1:\n+        g += f\n+    eta -= 1\n+    g >>= 1\n+```\n+\n+Whenever *g* is even, the loop only shifts *g* down and decreases *&eta;*. When *g* ends in multiple zero\n+bits, these iterations can be consolidated into one step. This requires counting the bottom zero\n+bits efficiently, which is possible on most platforms; it is abstracted here as the function\n+`count_trailing_zeros`.\n+\n+```python\n+def count_trailing_zeros(v):\n+    \"\"\"For a non-zero value v, find z such that v=(d<<z) for some odd d.\"\"\"\n+    return (v & -v).bit_length() - 1\n+\n+i = N # divsteps left to do\n+while True:\n+    # Get rid of all bottom zeros at once. In the first iteration, g may be odd and the following\n+    # lines have no effect (until \"if eta < 0\").\n+    zeros = min(i, count_trailing_zeros(g))\n+    eta -= zeros\n+    g >>= zeros\n+    i -= zeros\n+    if i == 0:\n+        break\n+    # We know g is odd now\n+    if eta < 0:\n+        eta, f, g = -eta, g, -f\n+    g += f\n+    # g is even now, and the eta decrement and g shift will happen in the next loop.\n+```\n+\n+We can now remove multiple bottom *0* bits from *g* at once, but still need a full iteration whenever\n+there is a bottom *1* bit. In what follows, we will get rid of multiple *1* bits simultaneously as\n+well.\n+\n+Observe that as long as *&eta; &geq; 0*, the loop does not modify *f*. Instead, it cancels out bottom\n+bits of *g* and shifts them out, and decreases *&eta;* and *i* accordingly - interrupting only when *&eta;*\n+becomes negative, or when *i* reaches *0*. Combined, this is equivalent to adding a multiple of *f* to\n+*g* to cancel out multiple bottom bits, and then shifting them out.\n+\n+It is easy to find what that multiple is: we want a number *w* such that *g+w&thinsp;f* has a few bottom\n+zero bits. If that number of bits is *L*, we want *g+w&thinsp;f mod 2<sup>L</sup> = 0*, or *w = -g/f mod 2<sup>L</sup>*. Since *f*\n+is odd, such a *w* exists for any *L*. *L* cannot be more than *i* steps (as we'd finish the loop before\n+doing more) or more than *&eta;+1* steps (as we'd run `eta, f, g = -eta, g, f` at that point), but\n+apart from that, we're only limited by the complexity of computing *w*.\n+\n+This code demonstrates how to cancel up to 4 bits per step:\n+\n+```python\n+NEGINV16 = [15, 5, 3, 9, 7, 13, 11, 1] # NEGINV16[n//2] = (-n)^-1 mod 16, for odd n\n+i = N\n+while True:\n+    zeros = min(i, count_trailing_zeros(g))\n+    eta -= zeros\n+    g >>= zeros\n+    i -= zeros\n+    if i == 0:\n+        break\n+    # We know g is odd now\n+    if eta < 0:\n+        eta, f, g = -eta, g, f\n+    # Compute limit on number of bits to cancel\n+    limit = min(min(eta + 1, i), 4)\n+    # Compute w = -g/f mod 2**limit, using the table value for -1/f mod 2**4. Note that f is\n+    # always odd, so its inverse modulo a power of two always exists.\n+    w = (g * NEGINV16[(f & 15) // 2]) % (2**limit)\n+    # As w = -g/f mod (2**limit), g+w*f mod 2**limit = 0 mod 2**limit.\n+    g += w * f\n+    assert g % (2**limit) == 0\n+    # The next iteration will now shift out at least limit bottom zero bits from g.\n+```\n+\n+By using a bigger table more bits can be cancelled at once. The table can also be implemented\n+as a formula. Several formulas are known for computing modular inverses modulo powers of two;\n+some can be found in Hacker's Delight second edition by Henry S. Warren, Jr. pages 245-247.\n+Here we need the negated modular inverse, which is a simple transformation of those:\n+\n+- Instead of a 3-bit table:\n+  - *-f* or *f ^ 6*\n+- Instead of a 4-bit table:\n+  - *1 - f(f + 1)*\n+  - *-(f + (((f + 1) & 4) << 1))*\n+- For larger tables the following technique can be used: if *w=-1/f mod 2<sup>L</sup>*, then *w(w&thinsp;f+2)* is\n+  *-1/f mod 2<sup>2L</sup>*. This allows extending the previous formulas (or tables). In particular we\n+  have this 6-bit function (based on the 3-bit function above):\n+  - *f(f<sup>2</sup> - 2)*\n+\n+This loop, again extended to also handle *u*, *v*, *q*, and *r* alongside *f* and *g*, placed in\n+`divsteps_n_matrix`, gives a significantly faster, but non-constant time version.\n+\n+\n+## 7. Final Python version\n+\n+All together we need the following functions:\n+\n+- A way to compute the transition matrix in constant time, using the `divsteps_n_matrix` function\n+  from section 2, but with its loop replaced by a variant of the constant-time divstep from\n+  section 5, extended to handle *u*, *v*, *q*, *r*:\n+\n+```python\n+def divsteps_n_matrix(zeta, f, g):\n+    \"\"\"Compute zeta and transition matrix t after N divsteps (multiplied by 2^N).\"\"\"\n+    u, v, q, r = 1, 0, 0, 1 # start with identity matrix\n+    for _ in range(N):\n+        c1 = zeta >> 63\n+        # Compute x, y, z as conditionally-negated versions of f, u, v.\n+        x, y, z = (f ^ c1) - c1, (u ^ c1) - c1, (v ^ c1) - c1\n+        c2 = -(g & 1)\n+        # Conditionally add x, y, z to g, q, r.\n+        g, q, r = g + (x & c2), q + (y & c2), r + (z & c2)\n+        c1 &= c2                     # reusing c1 here for the earlier c3 variable\n+        zeta = (zeta ^ c1) - 1       # inlining the unconditional zeta decrement here\n+        # Conditionally add g, q, r to f, u, v.\n+        f, u, v = f + (g & c1), u + (q & c1), v + (r & c1)\n+        # When shifting g down, don't shift q, r, as we construct a transition matrix multiplied\n+        # by 2^N. Instead, shift f's coefficients u and v up.\n+        g, u, v = g >> 1, u << 1, v << 1\n+    return zeta, (u, v, q, r)\n+```\n+\n+- The functions to update *f* and *g*, and *d* and *e*, from section 2 and section 4, with the constant-time\n+  changes to `update_de` from section 5:\n+\n+```python\n+def update_fg(f, g, t):\n+    \"\"\"Multiply matrix t/2^N with [f, g].\"\"\"\n+    u, v, q, r = t\n+    cf, cg = u*f + v*g, q*f + r*g\n+    return cf >> N, cg >> N\n+\n+def update_de(d, e, t, M, Mi):\n+    \"\"\"Multiply matrix t/2^N with [d, e], modulo M.\"\"\"\n+    u, v, q, r = t\n+    d_sign, e_sign = d >> 257, e >> 257\n+    md, me = (u & d_sign) + (v & e_sign), (q & d_sign) + (r & e_sign)\n+    cd, ce = (u*d + v*e) % 2**N, (q*d + r*e) % 2**N\n+    md -= (Mi*cd + md) % 2**N\n+    me -= (Mi*ce + me) % 2**N\n+    cd, ce = u*d + v*e + M*md, q*d + r*e + M*me\n+    return cd >> N, ce >> N\n+```\n+\n+- The `normalize` function from section 4, made constant time as well:\n+\n+```python\n+def normalize(sign, v, M):\n+    \"\"\"Compute sign*v mod M, where v in (-2*M,M); output in [0,M).\"\"\"\n+    v_sign = v >> 257\n+    # Conditionally add M to v.\n+    v += M & v_sign\n+    c = (sign - 1) >> 1\n+    # Conditionally negate v.\n+    v = (v ^ c) - c\n+    v_sign = v >> 257\n+    # Conditionally add M to v again.\n+    v += M & v_sign\n+    return v\n+```\n+\n+- And finally the `modinv` function too, adapted to use *&zeta;* instead of *&delta;*, and using the fixed\n+  iteration count from section 5:\n+\n+```python\n+def modinv(M, Mi, x):\n+    \"\"\"Compute the modular inverse of x mod M, given Mi=1/M mod 2^N.\"\"\"\n+    zeta, f, g, d, e = -1, M, x, 0, 1\n+    for _ in range((590 + N - 1) // N):\n+        zeta, t = divsteps_n_matrix(zeta, f % 2**N, g % 2**N)\n+        f, g = update_fg(f, g, t)\n+        d, e = update_de(d, e, t, M, Mi)\n+    return normalize(f, d, M)\n+```\n+\n+- To get a variable time version, replace the `divsteps_n_matrix` function with one that uses the\n+  divsteps loop from section 5, and a `modinv` version that calls it without the fixed iteration\n+  count:\n+\n+```python\n+NEGINV16 = [15, 5, 3, 9, 7, 13, 11, 1] # NEGINV16[n//2] = (-n)^-1 mod 16, for odd n\n+def divsteps_n_matrix_var(eta, f, g):\n+    \"\"\"Compute eta and transition matrix t after N divsteps (multiplied by 2^N).\"\"\"\n+    u, v, q, r = 1, 0, 0, 1\n+    i = N\n+    while True:\n+        zeros = min(i, count_trailing_zeros(g))\n+        eta, i = eta - zeros, i - zeros\n+        g, u, v = g >> zeros, u << zeros, v << zeros\n+        if i == 0:\n+            break\n+        if eta < 0:\n+            eta, f, u, v, g, q, r = -eta, g, q, r, -f, -u, -v\n+        limit = min(min(eta + 1, i), 4)\n+        w = (g * NEGINV16[(f & 15) // 2]) % (2**limit)\n+        g, q, r = g + w*f, q + w*u, r + w*v\n+    return eta, (u, v, q, r)\n+\n+def modinv_var(M, Mi, x):\n+    \"\"\"Compute the modular inverse of x mod M, given Mi = 1/M mod 2^N.\"\"\"\n+    eta, f, g, d, e = -1, M, x, 0, 1\n+    while g != 0:\n+        eta, t = divsteps_n_matrix_var(eta, f % 2**N, g % 2**N)\n+        f, g = update_fg(f, g, t)\n+        d, e = update_de(d, e, t, M, Mi)\n+    return normalize(f, d, Mi)\n+```"
      },
      {
        "sha": "d368488af21c4fc435b63b4dbcb7220aecb1d71c",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 27,
        "deletions": 20,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -11,7 +11,7 @@ extern \"C\" {\n  *\n  * 1. Context pointers go first, followed by output arguments, combined\n  *    output/input arguments, and finally input-only arguments.\n- * 2. Array lengths always immediately the follow the argument whose length\n+ * 2. Array lengths always immediately follow the argument whose length\n  *    they describe, even if this violates rule 1.\n  * 3. Within the OUT/OUTIN/IN groups, pointers to data that is typically generated\n  *    later go first. This means: signatures, public nonces, secret nonces,\n@@ -452,7 +452,14 @@ SECP256K1_API int secp256k1_ecdsa_signature_serialize_compact(\n  *           0: incorrect or unparseable signature\n  *  Args:    ctx:       a secp256k1 context object, initialized for verification.\n  *  In:      sig:       the signature being verified (cannot be NULL)\n- *           msg32:     the 32-byte message hash being verified (cannot be NULL)\n+ *           msghash32: the 32-byte message hash being verified (cannot be NULL).\n+ *                      The verifier must make sure to apply a cryptographic\n+ *                      hash function to the message by itself and not accept an\n+ *                      msghash32 value directly. Otherwise, it would be easy to\n+ *                      create a \"valid\" signature without knowledge of the\n+ *                      secret key. See also\n+ *                      https://bitcoin.stackexchange.com/a/81116/35586 for more\n+ *                      background on this topic.\n  *           pubkey:    pointer to an initialized public key to verify with (cannot be NULL)\n  *\n  * To avoid accepting malleable signatures, only ECDSA signatures in lower-S\n@@ -467,7 +474,7 @@ SECP256K1_API int secp256k1_ecdsa_signature_serialize_compact(\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_verify(\n     const secp256k1_context* ctx,\n     const secp256k1_ecdsa_signature *sig,\n-    const unsigned char *msg32,\n+    const unsigned char *msghash32,\n     const secp256k1_pubkey *pubkey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n@@ -532,20 +539,20 @@ SECP256K1_API extern const secp256k1_nonce_function secp256k1_nonce_function_def\n  *\n  *  Returns: 1: signature created\n  *           0: the nonce generation function failed, or the secret key was invalid.\n- *  Args:    ctx:    pointer to a context object, initialized for signing (cannot be NULL)\n- *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n- *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n- *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n- *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n- *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n+ *  Args:    ctx:       pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig:       pointer to an array where the signature will be placed (cannot be NULL)\n+ *  In:      msghash32: the 32-byte message hash being signed (cannot be NULL)\n+ *           seckey:    pointer to a 32-byte secret key (cannot be NULL)\n+ *           noncefp:   pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:     pointer to arbitrary data used by the nonce generation function (can be NULL)\n  *\n  * The created signature is always in lower-S form. See\n  * secp256k1_ecdsa_signature_normalize for more details.\n  */\n SECP256K1_API int secp256k1_ecdsa_sign(\n     const secp256k1_context* ctx,\n     secp256k1_ecdsa_signature *sig,\n-    const unsigned char *msg32,\n+    const unsigned char *msghash32,\n     const unsigned char *seckey,\n     secp256k1_nonce_function noncefp,\n     const void *ndata\n@@ -626,23 +633,23 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_negate(\n  *                  invalid according to secp256k1_ec_seckey_verify, this\n  *                  function returns 0. seckey will be set to some unspecified\n  *                  value if this function returns 0. (cannot be NULL)\n- *  In:      tweak: pointer to a 32-byte tweak. If the tweak is invalid according to\n+ *  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n  *                  secp256k1_ec_seckey_verify, this function returns 0. For\n  *                  uniformly random 32-byte arrays the chance of being invalid\n  *                  is negligible (around 1 in 2^128) (cannot be NULL).\n  */\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_seckey_tweak_add(\n     const secp256k1_context* ctx,\n     unsigned char *seckey,\n-    const unsigned char *tweak\n+    const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Same as secp256k1_ec_seckey_tweak_add, but DEPRECATED. Will be removed in\n  *  future versions. */\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_add(\n     const secp256k1_context* ctx,\n     unsigned char *seckey,\n-    const unsigned char *tweak\n+    const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Tweak a public key by adding tweak times the generator to it.\n@@ -654,15 +661,15 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_add(\n  *                  (cannot be NULL).\n  *  In/Out: pubkey: pointer to a public key object. pubkey will be set to an\n  *                  invalid value if this function returns 0 (cannot be NULL).\n- *  In:      tweak: pointer to a 32-byte tweak. If the tweak is invalid according to\n+ *  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n  *                  secp256k1_ec_seckey_verify, this function returns 0. For\n  *                  uniformly random 32-byte arrays the chance of being invalid\n  *                  is negligible (around 1 in 2^128) (cannot be NULL).\n  */\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_tweak_add(\n     const secp256k1_context* ctx,\n     secp256k1_pubkey *pubkey,\n-    const unsigned char *tweak\n+    const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Tweak a secret key by multiplying it by a tweak.\n@@ -673,23 +680,23 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_tweak_add(\n  *                  invalid according to secp256k1_ec_seckey_verify, this\n  *                  function returns 0. seckey will be set to some unspecified\n  *                  value if this function returns 0. (cannot be NULL)\n- *  In:      tweak: pointer to a 32-byte tweak. If the tweak is invalid according to\n+ *  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n  *                  secp256k1_ec_seckey_verify, this function returns 0. For\n  *                  uniformly random 32-byte arrays the chance of being invalid\n  *                  is negligible (around 1 in 2^128) (cannot be NULL).\n  */\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_seckey_tweak_mul(\n     const secp256k1_context* ctx,\n     unsigned char *seckey,\n-    const unsigned char *tweak\n+    const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Same as secp256k1_ec_seckey_tweak_mul, but DEPRECATED. Will be removed in\n  *  future versions. */\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_mul(\n     const secp256k1_context* ctx,\n     unsigned char *seckey,\n-    const unsigned char *tweak\n+    const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Tweak a public key by multiplying it by a tweak value.\n@@ -699,15 +706,15 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_privkey_tweak_mul(\n  *                  (cannot be NULL).\n  *  In/Out: pubkey: pointer to a public key object. pubkey will be set to an\n  *                  invalid value if this function returns 0 (cannot be NULL).\n- *  In:      tweak: pointer to a 32-byte tweak. If the tweak is invalid according to\n+ *  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n  *                  secp256k1_ec_seckey_verify, this function returns 0. For\n  *                  uniformly random 32-byte arrays the chance of being invalid\n  *                  is negligible (around 1 in 2^128) (cannot be NULL).\n  */\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ec_pubkey_tweak_mul(\n     const secp256k1_context* ctx,\n     secp256k1_pubkey *pubkey,\n-    const unsigned char *tweak\n+    const unsigned char *tweak32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n /** Updates the context randomization to protect against side-channel leakage."
      },
      {
        "sha": "6fc7b290f8cae62afaaf9e81b60ecc29a9341186",
        "filename": "src/secp256k1/include/secp256k1_extrakeys.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/include/secp256k1_extrakeys.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/include/secp256k1_extrakeys.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_extrakeys.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -165,6 +165,19 @@ SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_keypair_create(\n     const unsigned char *seckey\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n \n+/** Get the secret key from a keypair.\n+ *\n+ *  Returns: 0 if the arguments are invalid. 1 otherwise.\n+ *  Args:   ctx: pointer to a context object (cannot be NULL)\n+ *  Out: seckey: pointer to a 32-byte buffer for the secret key (cannot be NULL)\n+ *  In: keypair: pointer to a keypair (cannot be NULL)\n+ */\n+SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_keypair_sec(\n+    const secp256k1_context* ctx,\n+    unsigned char *seckey,\n+    const secp256k1_keypair *keypair\n+) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3);\n+\n /** Get the public key from a keypair.\n  *\n  *  Returns: 0 if the arguments are invalid. 1 otherwise."
      },
      {
        "sha": "aa16532ce86146ae202f2179cf4c69693b139ef4",
        "filename": "src/secp256k1/include/secp256k1_recovery.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/include/secp256k1_recovery.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/include/secp256k1_recovery.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1_recovery.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -71,17 +71,17 @@ SECP256K1_API int secp256k1_ecdsa_recoverable_signature_serialize_compact(\n  *\n  *  Returns: 1: signature created\n  *           0: the nonce generation function failed, or the secret key was invalid.\n- *  Args:    ctx:    pointer to a context object, initialized for signing (cannot be NULL)\n- *  Out:     sig:    pointer to an array where the signature will be placed (cannot be NULL)\n- *  In:      msg32:  the 32-byte message hash being signed (cannot be NULL)\n- *           seckey: pointer to a 32-byte secret key (cannot be NULL)\n- *           noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n- *           ndata:  pointer to arbitrary data used by the nonce generation function (can be NULL)\n+ *  Args:    ctx:       pointer to a context object, initialized for signing (cannot be NULL)\n+ *  Out:     sig:       pointer to an array where the signature will be placed (cannot be NULL)\n+ *  In:      msghash32: the 32-byte message hash being signed (cannot be NULL)\n+ *           seckey:    pointer to a 32-byte secret key (cannot be NULL)\n+ *           noncefp:   pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used\n+ *           ndata:     pointer to arbitrary data used by the nonce generation function (can be NULL)\n  */\n SECP256K1_API int secp256k1_ecdsa_sign_recoverable(\n     const secp256k1_context* ctx,\n     secp256k1_ecdsa_recoverable_signature *sig,\n-    const unsigned char *msg32,\n+    const unsigned char *msghash32,\n     const unsigned char *seckey,\n     secp256k1_nonce_function noncefp,\n     const void *ndata\n@@ -91,16 +91,16 @@ SECP256K1_API int secp256k1_ecdsa_sign_recoverable(\n  *\n  *  Returns: 1: public key successfully recovered (which guarantees a correct signature).\n  *           0: otherwise.\n- *  Args:    ctx:        pointer to a context object, initialized for verification (cannot be NULL)\n- *  Out:     pubkey:     pointer to the recovered public key (cannot be NULL)\n- *  In:      sig:        pointer to initialized signature that supports pubkey recovery (cannot be NULL)\n- *           msg32:      the 32-byte message hash assumed to be signed (cannot be NULL)\n+ *  Args:    ctx:       pointer to a context object, initialized for verification (cannot be NULL)\n+ *  Out:     pubkey:    pointer to the recovered public key (cannot be NULL)\n+ *  In:      sig:       pointer to initialized signature that supports pubkey recovery (cannot be NULL)\n+ *           msghash32: the 32-byte message hash assumed to be signed (cannot be NULL)\n  */\n SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_recover(\n     const secp256k1_context* ctx,\n     secp256k1_pubkey *pubkey,\n     const secp256k1_ecdsa_recoverable_signature *sig,\n-    const unsigned char *msg32\n+    const unsigned char *msghash32\n ) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4);\n \n #ifdef __cplusplus"
      },
      {
        "sha": "01d15dcdeac56e11bc80c151a7b548ce74eb44d8",
        "filename": "src/secp256k1/sage/gen_exhaustive_groups.sage",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/gen_exhaustive_groups.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/gen_exhaustive_groups.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/gen_exhaustive_groups.sage?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,9 +1,4 @@\n-# Define field size and field\n-P = 2^256 - 2^32 - 977\n-F = GF(P)\n-BETA = F(0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee)\n-\n-assert(BETA != F(1) and BETA^3 == F(1))\n+load(\"secp256k1_params.sage\")\n \n orders_done = set()\n results = {}"
      },
      {
        "sha": "7d4359e0f6482f51994e5bae84fd2d5ca5d161ef",
        "filename": "src/secp256k1/sage/gen_split_lambda_constants.sage",
        "status": "added",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/gen_split_lambda_constants.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/gen_split_lambda_constants.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/gen_split_lambda_constants.sage?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,114 @@\n+\"\"\" Generates the constants used in secp256k1_scalar_split_lambda.\n+\n+See the comments for secp256k1_scalar_split_lambda in src/scalar_impl.h for detailed explanations.\n+\"\"\"\n+\n+load(\"secp256k1_params.sage\")\n+\n+def inf_norm(v):\n+    \"\"\"Returns the infinity norm of a vector.\"\"\"\n+    return max(map(abs, v))\n+\n+def gauss_reduction(i1, i2):\n+    v1, v2 = i1.copy(), i2.copy()\n+    while True:\n+        if inf_norm(v2) < inf_norm(v1):\n+            v1, v2 = v2, v1\n+        # This is essentially\n+        #    m = round((v1[0]*v2[0] + v1[1]*v2[1]) / (inf_norm(v1)**2))\n+        # (rounding to the nearest integer) without relying on floating point arithmetic.\n+        m = ((v1[0]*v2[0] + v1[1]*v2[1]) + (inf_norm(v1)**2) // 2) // (inf_norm(v1)**2)\n+        if m == 0:\n+            return v1, v2\n+        v2[0] -= m*v1[0]\n+        v2[1] -= m*v1[1]\n+\n+def find_split_constants_gauss():\n+    \"\"\"Find constants for secp256k1_scalar_split_lamdba using gauss reduction.\"\"\"\n+    (v11, v12), (v21, v22) = gauss_reduction([0, N], [1, int(LAMBDA)])\n+\n+    # We use related vectors in secp256k1_scalar_split_lambda.\n+    A1, B1 = -v21, -v11\n+    A2, B2 = v22, -v21\n+\n+    return A1, B1, A2, B2\n+\n+def find_split_constants_explicit_tof():\n+    \"\"\"Find constants for secp256k1_scalar_split_lamdba using the trace of Frobenius.\n+\n+    See Benjamin Smith: \"Easy scalar decompositions for efficient scalar multiplication on\n+    elliptic curves and genus 2 Jacobians\" (https://eprint.iacr.org/2013/672), Example 2\n+    \"\"\"\n+    assert P % 3 == 1 # The paper says P % 3 == 2 but that appears to be a mistake, see [10].\n+    assert C.j_invariant() == 0\n+\n+    t = C.trace_of_frobenius()\n+\n+    c = Integer(sqrt((4*P - t**2)/3))\n+    A1 = Integer((t - c)/2 - 1)\n+    B1 = c\n+\n+    A2 = Integer((t + c)/2 - 1)\n+    B2 = Integer(1 - (t - c)/2)\n+\n+    # We use a negated b values in secp256k1_scalar_split_lambda.\n+    B1, B2 = -B1, -B2\n+\n+    return A1, B1, A2, B2\n+\n+A1, B1, A2, B2 = find_split_constants_explicit_tof()\n+\n+# For extra fun, use an independent method to recompute the constants.\n+assert (A1, B1, A2, B2) == find_split_constants_gauss()\n+\n+# PHI : Z[l] -> Z_n where phi(a + b*l) == a + b*lambda mod n.\n+def PHI(a,b):\n+    return Z(a + LAMBDA*b)\n+\n+# Check that (A1, B1) and (A2, B2) are in the kernel of PHI.\n+assert PHI(A1, B1) == Z(0)\n+assert PHI(A2, B2) == Z(0)\n+\n+# Check that the parallelogram generated by (A1, A2) and (B1, B2)\n+# is a fundamental domain by containing exactly N points.\n+# Since the LHS is the determinant and N != 0, this also checks that\n+# (A1, A2) and (B1, B2) are linearly independent. By the previous\n+# assertions, (A1, A2) and (B1, B2) are a basis of the kernel.\n+assert A1*B2 - B1*A2 == N\n+\n+# Check that their components are short enough.\n+assert (A1 + A2)/2 < sqrt(N)\n+assert B1 < sqrt(N)\n+assert B2 < sqrt(N)\n+\n+G1 = round((2**384)*B2/N)\n+G2 = round((2**384)*(-B1)/N)\n+\n+def rnddiv2(v):\n+    if v & 1:\n+        v += 1\n+    return v >> 1\n+\n+def scalar_lambda_split(k):\n+    \"\"\"Equivalent to secp256k1_scalar_lambda_split().\"\"\"\n+    c1 = rnddiv2((k * G1) >> 383)\n+    c2 = rnddiv2((k * G2) >> 383)\n+    c1 = (c1 * -B1) % N\n+    c2 = (c2 * -B2) % N\n+    r2 = (c1 + c2) % N\n+    r1 = (k + r2 * -LAMBDA) % N\n+    return (r1, r2)\n+\n+# The result of scalar_lambda_split can depend on the representation of k (mod n).\n+SPECIAL = (2**383) // G2 + 1\n+assert scalar_lambda_split(SPECIAL) != scalar_lambda_split(SPECIAL + N)\n+\n+print('  A1     =', hex(A1))\n+print(' -B1     =', hex(-B1))\n+print('  A2     =', hex(A2))\n+print(' -B2     =', hex(-B2))\n+print('         =', hex(Z(-B2)))\n+print(' -LAMBDA =', hex(-LAMBDA))\n+\n+print('  G1     =', hex(G1))\n+print('  G2     =', hex(G2))"
      },
      {
        "sha": "b200bfeae3d1c6c32fd3fc7de6160ebc6bbb12e9",
        "filename": "src/secp256k1/sage/group_prover.sage",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/group_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/group_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/group_prover.sage?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -42,7 +42,7 @@\n #     as we assume that all constraints in it are complementary with each other.\n #\n # Based on the sage verification scripts used in the Explicit-Formulas Database\n-# by Tanja Lange and others, see http://hyperelliptic.org/EFD\n+# by Tanja Lange and others, see https://hyperelliptic.org/EFD\n \n class fastfrac:\n   \"\"\"Fractions over rings.\"\"\"\n@@ -65,7 +65,7 @@ class fastfrac:\n     return self.top in I and self.bot not in I\n \n   def reduce(self,assumeZero):\n-    zero = self.R.ideal(map(numerator, assumeZero))\n+    zero = self.R.ideal(list(map(numerator, assumeZero)))\n     return fastfrac(self.R, zero.reduce(self.top)) / fastfrac(self.R, zero.reduce(self.bot))\n \n   def __add__(self,other):\n@@ -100,14 +100,19 @@ class fastfrac:\n     \"\"\"Multiply something else with a fraction.\"\"\"\n     return self.__mul__(other)\n \n-  def __div__(self,other):\n+  def __truediv__(self,other):\n     \"\"\"Divide two fractions.\"\"\"\n     if parent(other) == ZZ:\n       return fastfrac(self.R,self.top,self.bot * other)\n     if other.__class__ == fastfrac:\n       return fastfrac(self.R,self.top * other.bot,self.bot * other.top)\n     return NotImplemented\n \n+  # Compatibility wrapper for Sage versions based on Python 2\n+  def __div__(self,other):\n+     \"\"\"Divide two fractions.\"\"\"\n+     return self.__truediv__(other)\n+\n   def __pow__(self,other):\n     \"\"\"Compute a power of a fraction.\"\"\"\n     if parent(other) == ZZ:\n@@ -175,7 +180,7 @@ class constraints:\n \n def conflicts(R, con):\n   \"\"\"Check whether any of the passed non-zero assumptions is implied by the zero assumptions\"\"\"\n-  zero = R.ideal(map(numerator, con.zero))\n+  zero = R.ideal(list(map(numerator, con.zero)))\n   if 1 in zero:\n     return True\n   # First a cheap check whether any of the individual nonzero terms conflict on\n@@ -195,7 +200,7 @@ def conflicts(R, con):\n \n def get_nonzero_set(R, assume):\n   \"\"\"Calculate a simple set of nonzero expressions\"\"\"\n-  zero = R.ideal(map(numerator, assume.zero))\n+  zero = R.ideal(list(map(numerator, assume.zero)))\n   nonzero = set()\n   for nz in map(numerator, assume.nonzero):\n     for (f,n) in nz.factor():\n@@ -208,7 +213,7 @@ def get_nonzero_set(R, assume):\n \n def prove_nonzero(R, exprs, assume):\n   \"\"\"Check whether an expression is provably nonzero, given assumptions\"\"\"\n-  zero = R.ideal(map(numerator, assume.zero))\n+  zero = R.ideal(list(map(numerator, assume.zero)))\n   nonzero = get_nonzero_set(R, assume)\n   expl = set()\n   ok = True\n@@ -250,7 +255,7 @@ def prove_zero(R, exprs, assume):\n   r, e = prove_nonzero(R, dict(map(lambda x: (fastfrac(R, x.bot, 1), exprs[x]), exprs)), assume)\n   if not r:\n     return (False, map(lambda x: \"Possibly zero denominator: %s\" % x, e))\n-  zero = R.ideal(map(numerator, assume.zero))\n+  zero = R.ideal(list(map(numerator, assume.zero)))\n   nonzero = prod(x for x in assume.nonzero)\n   expl = []\n   for expr in exprs:\n@@ -265,8 +270,8 @@ def describe_extra(R, assume, assumeExtra):\n   \"\"\"Describe what assumptions are added, given existing assumptions\"\"\"\n   zerox = assume.zero.copy()\n   zerox.update(assumeExtra.zero)\n-  zero = R.ideal(map(numerator, assume.zero))\n-  zeroextra = R.ideal(map(numerator, zerox))\n+  zero = R.ideal(list(map(numerator, assume.zero)))\n+  zeroextra = R.ideal(list(map(numerator, zerox)))\n   nonzero = get_nonzero_set(R, assume)\n   ret = set()\n   # Iterate over the extra zero expressions"
      },
      {
        "sha": "a97e732f7fa3ab681a63070eda20455cda3a6c32",
        "filename": "src/secp256k1/sage/prove_group_implementations.sage",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/prove_group_implementations.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/prove_group_implementations.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/prove_group_implementations.sage?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "previous_filename": "src/secp256k1/sage/secp256k1.sage"
      },
      {
        "sha": "4e000726ed36646a63cedb124aeae618bf5fa149",
        "filename": "src/secp256k1/sage/secp256k1_params.sage",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/secp256k1_params.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/secp256k1_params.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/secp256k1_params.sage?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,36 @@\n+\"\"\"Prime order of finite field underlying secp256k1 (2^256 - 2^32 - 977)\"\"\"\n+P = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\n+\n+\"\"\"Finite field underlying secp256k1\"\"\"\n+F = FiniteField(P)\n+\n+\"\"\"Elliptic curve secp256k1: y^2 = x^3 + 7\"\"\"\n+C = EllipticCurve([F(0), F(7)])\n+\n+\"\"\"Base point of secp256k1\"\"\"\n+G = C.lift_x(0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798)\n+\n+\"\"\"Prime order of secp256k1\"\"\"\n+N = C.order()\n+\n+\"\"\"Finite field of scalars of secp256k1\"\"\"\n+Z = FiniteField(N)\n+\n+\"\"\" Beta value of secp256k1 non-trivial endomorphism: lambda * (x, y) = (beta * x, y)\"\"\"\n+BETA = F(2)^((P-1)/3)\n+\n+\"\"\" Lambda value of secp256k1 non-trivial endomorphism: lambda * (x, y) = (beta * x, y)\"\"\"\n+LAMBDA = Z(3)^((N-1)/3)\n+\n+assert is_prime(P)\n+assert is_prime(N)\n+\n+assert BETA != F(1)\n+assert BETA^3 == F(1)\n+assert BETA^2 + BETA + 1 == 0\n+\n+assert LAMBDA != Z(1)\n+assert LAMBDA^3 == Z(1)\n+assert LAMBDA^2 + LAMBDA + 1 == 0\n+\n+assert Integer(LAMBDA)*G == C(BETA*G[0], G[1])"
      },
      {
        "sha": "b770c6dafe2f024d089848dfd8351b599f4193aa",
        "filename": "src/secp256k1/sage/weierstrass_prover.sage",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/weierstrass_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/sage/weierstrass_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/weierstrass_prover.sage?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -175,24 +175,24 @@ laws_jacobian_weierstrass = {\n def check_exhaustive_jacobian_weierstrass(name, A, B, branches, formula, p):\n   \"\"\"Verify an implementation of addition of Jacobian points on a Weierstrass curve, by executing and validating the result for every possible addition in a prime field\"\"\"\n   F = Integers(p)\n-  print \"Formula %s on Z%i:\" % (name, p)\n+  print(\"Formula %s on Z%i:\" % (name, p))\n   points = []\n-  for x in xrange(0, p):\n-    for y in xrange(0, p):\n+  for x in range(0, p):\n+    for y in range(0, p):\n       point = affinepoint(F(x), F(y))\n       r, e = concrete_verify(on_weierstrass_curve(A, B, point))\n       if r:\n         points.append(point)\n \n-  for za in xrange(1, p):\n-    for zb in xrange(1, p):\n+  for za in range(1, p):\n+    for zb in range(1, p):\n       for pa in points:\n         for pb in points:\n-          for ia in xrange(2):\n-            for ib in xrange(2):\n+          for ia in range(2):\n+            for ib in range(2):\n               pA = jacobianpoint(pa.x * F(za)^2, pa.y * F(za)^3, F(za), ia)\n               pB = jacobianpoint(pb.x * F(zb)^2, pb.y * F(zb)^3, F(zb), ib)\n-              for branch in xrange(0, branches):\n+              for branch in range(0, branches):\n                 assumeAssert, assumeBranch, pC = formula(branch, pA, pB)\n                 pC.X = F(pC.X)\n                 pC.Y = F(pC.Y)\n@@ -206,13 +206,13 @@ def check_exhaustive_jacobian_weierstrass(name, A, B, branches, formula, p):\n                     r, e = concrete_verify(assumeLaw)\n                     if r:\n                       if match:\n-                        print \"  multiple branches for (%s,%s,%s,%s) + (%s,%s,%s,%s)\" % (pA.X, pA.Y, pA.Z, pA.Infinity, pB.X, pB.Y, pB.Z, pB.Infinity)\n+                        print(\"  multiple branches for (%s,%s,%s,%s) + (%s,%s,%s,%s)\" % (pA.X, pA.Y, pA.Z, pA.Infinity, pB.X, pB.Y, pB.Z, pB.Infinity))\n                       else:\n                         match = True\n                       r, e = concrete_verify(require)\n                       if not r:\n-                        print \"  failure in branch %i for (%s,%s,%s,%s) + (%s,%s,%s,%s) = (%s,%s,%s,%s): %s\" % (branch, pA.X, pA.Y, pA.Z, pA.Infinity, pB.X, pB.Y, pB.Z, pB.Infinity, pC.X, pC.Y, pC.Z, pC.Infinity, e)\n-  print\n+                        print(\"  failure in branch %i for (%s,%s,%s,%s) + (%s,%s,%s,%s) = (%s,%s,%s,%s): %s\" % (branch, pA.X, pA.Y, pA.Z, pA.Infinity, pB.X, pB.Y, pB.Z, pB.Infinity, pC.X, pC.Y, pC.Z, pC.Infinity, e))\n+  print()\n \n \n def check_symbolic_function(R, assumeAssert, assumeBranch, f, A, B, pa, pb, pA, pB, pC):\n@@ -242,9 +242,9 @@ def check_symbolic_jacobian_weierstrass(name, A, B, branches, formula):\n   for key in laws_jacobian_weierstrass:\n     res[key] = []\n \n-  print (\"Formula \" + name + \":\")\n+  print(\"Formula \" + name + \":\")\n   count = 0\n-  for branch in xrange(branches):\n+  for branch in range(branches):\n     assumeFormula, assumeBranch, pC = formula(branch, pA, pB)\n     pC.X = lift(pC.X)\n     pC.Y = lift(pC.Y)\n@@ -255,10 +255,10 @@ def check_symbolic_jacobian_weierstrass(name, A, B, branches, formula):\n       res[key].append((check_symbolic_function(R, assumeFormula, assumeBranch, laws_jacobian_weierstrass[key], A, B, pa, pb, pA, pB, pC), branch))\n \n   for key in res:\n-    print \"  %s:\" % key\n+    print(\"  %s:\" % key)\n     val = res[key]\n     for x in val:\n       if x[0] is not None:\n-        print \"    branch %i: %s\" % (x[1], x[0])\n+        print(\"    branch %i: %s\" % (x[1], x[0]))\n \n-  print\n+  print()"
      },
      {
        "sha": "5f68cefc46cde0e8e5a110dd5909d9bc4e7a5950",
        "filename": "src/secp256k1/src/asm/field_10x26_arm.s",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/asm/field_10x26_arm.s",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/asm/field_10x26_arm.s",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/asm/field_10x26_arm.s?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,9 +1,9 @@\n @ vim: set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab syntax=armasm:\n-/**********************************************************************\n- * Copyright (c) 2014 Wladimir J. van der Laan                        *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Wladimir J. van der Laan                         *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n /*\n ARM implementation of field_10x26 inner loops.\n "
      },
      {
        "sha": "6dc527b288939b9a8766f6af8a35def337c206d6",
        "filename": "src/secp256k1/src/assumptions.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/assumptions.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2020 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2020 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ASSUMPTIONS_H\n #define SECP256K1_ASSUMPTIONS_H"
      },
      {
        "sha": "6f7693cb8fd046a8b10ff22d6d97d8bb4a002053",
        "filename": "src/secp256k1/src/basic-config.h",
        "status": "modified",
        "additions": 6,
        "deletions": 23,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/basic-config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/basic-config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/basic-config.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,33 +1,16 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_BASIC_CONFIG_H\n #define SECP256K1_BASIC_CONFIG_H\n \n #ifdef USE_BASIC_CONFIG\n \n-#undef USE_ASM_X86_64\n-#undef USE_ECMULT_STATIC_PRECOMPUTATION\n-#undef USE_EXTERNAL_ASM\n-#undef USE_EXTERNAL_DEFAULT_CALLBACKS\n-#undef USE_FIELD_INV_BUILTIN\n-#undef USE_FIELD_INV_NUM\n-#undef USE_NUM_GMP\n-#undef USE_NUM_NONE\n-#undef USE_SCALAR_INV_BUILTIN\n-#undef USE_SCALAR_INV_NUM\n-#undef USE_FORCE_WIDEMUL_INT64\n-#undef USE_FORCE_WIDEMUL_INT128\n-#undef ECMULT_WINDOW_SIZE\n-\n-#define USE_NUM_NONE 1\n-#define USE_FIELD_INV_BUILTIN 1\n-#define USE_SCALAR_INV_BUILTIN 1\n-#define USE_WIDEMUL_64 1\n #define ECMULT_WINDOW_SIZE 15\n+#define ECMULT_GEN_PREC_BITS 4\n \n #endif /* USE_BASIC_CONFIG */\n "
      },
      {
        "sha": "63c55df44d05954e2db3138f7879c42a7dfb2897",
        "filename": "src/secp256k1/src/bench.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_BENCH_H\n #define SECP256K1_BENCH_H"
      },
      {
        "sha": "ab4b8f4244f2b54539b0f4a5d5caf2cfd33a4055",
        "filename": "src/secp256k1/src/bench_ecdh.c",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_ecdh.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_ecdh.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_ecdh.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2015 Pieter Wuille, Andrew Poelstra                  *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille, Andrew Poelstra                   *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #include <string.h>\n "
      },
      {
        "sha": "204e85a5dde134360af66a0d2badfce953009029",
        "filename": "src/secp256k1/src/bench_ecmult.c",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_ecmult.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_ecmult.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_ecmult.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,15 +1,14 @@\n-/**********************************************************************\n- * Copyright (c) 2017 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2017 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n #include <stdio.h>\n \n #include \"include/secp256k1.h\"\n \n #include \"util.h\"\n #include \"hash_impl.h\"\n-#include \"num_impl.h\"\n #include \"field_impl.h\"\n #include \"group_impl.h\"\n #include \"scalar_impl.h\""
      },
      {
        "sha": "73b8a24ccbfaf6e4b432728248624f332a7adef3",
        "filename": "src/secp256k1/src/bench_internal.c",
        "status": "modified",
        "additions": 11,
        "deletions": 62,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_internal.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_internal.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_internal.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,16 +1,15 @@\n-/**********************************************************************\n- * Copyright (c) 2014-2015 Pieter Wuille                              *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                               *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n #include <stdio.h>\n \n #include \"include/secp256k1.h\"\n \n #include \"assumptions.h\"\n #include \"util.h\"\n #include \"hash_impl.h\"\n-#include \"num_impl.h\"\n #include \"field_impl.h\"\n #include \"group_impl.h\"\n #include \"scalar_impl.h\"\n@@ -99,15 +98,6 @@ void bench_scalar_negate(void* arg, int iters) {\n     }\n }\n \n-void bench_scalar_sqr(void* arg, int iters) {\n-    int i;\n-    bench_inv *data = (bench_inv*)arg;\n-\n-    for (i = 0; i < iters; i++) {\n-        secp256k1_scalar_sqr(&data->scalar[0], &data->scalar[0]);\n-    }\n-}\n-\n void bench_scalar_mul(void* arg, int iters) {\n     int i;\n     bench_inv *data = (bench_inv*)arg;\n@@ -255,35 +245,17 @@ void bench_group_add_affine_var(void* arg, int iters) {\n     }\n }\n \n-void bench_group_jacobi_var(void* arg, int iters) {\n-    int i, j = 0;\n-    bench_inv *data = (bench_inv*)arg;\n-\n-    for (i = 0; i < iters; i++) {\n-        j += secp256k1_gej_has_quad_y_var(&data->gej[0]);\n-        /* Vary the Y and Z coordinates of the input (the X coordinate doesn't matter to\n-           secp256k1_gej_has_quad_y_var). Note that the resulting coordinates will\n-           generally not correspond to a point on the curve, but this is not a problem\n-           for the code being benchmarked here. Adding and normalizing have less\n-           overhead than EC operations (which could guarantee the point remains on the\n-           curve). */\n-        secp256k1_fe_add(&data->gej[0].y, &data->fe[1]);\n-        secp256k1_fe_add(&data->gej[0].z, &data->fe[2]);\n-        secp256k1_fe_normalize_var(&data->gej[0].y);\n-        secp256k1_fe_normalize_var(&data->gej[0].z);\n-    }\n-    CHECK(j <= iters);\n-}\n-\n void bench_group_to_affine_var(void* arg, int iters) {\n     int i;\n     bench_inv *data = (bench_inv*)arg;\n \n     for (i = 0; i < iters; ++i) {\n         secp256k1_ge_set_gej_var(&data->ge[1], &data->gej[0]);\n         /* Use the output affine X/Y coordinates to vary the input X/Y/Z coordinates.\n-           Similar to bench_group_jacobi_var, this approach does not result in\n-           coordinates of points on the curve. */\n+           Note that the resulting coordinates will generally not correspond to a point\n+           on the curve, but this is not a problem for the code being benchmarked here.\n+           Adding and normalizing have less overhead than EC operations (which could\n+           guarantee the point remains on the curve). */\n         secp256k1_fe_add(&data->gej[0].x, &data->ge[1].y);\n         secp256k1_fe_add(&data->gej[0].y, &data->fe[2]);\n         secp256k1_fe_add(&data->gej[0].z, &data->ge[1].x);\n@@ -369,35 +341,16 @@ void bench_context_sign(void* arg, int iters) {\n     }\n }\n \n-#ifndef USE_NUM_NONE\n-void bench_num_jacobi(void* arg, int iters) {\n-    int i, j = 0;\n-    bench_inv *data = (bench_inv*)arg;\n-    secp256k1_num nx, na, norder;\n-\n-    secp256k1_scalar_get_num(&nx, &data->scalar[0]);\n-    secp256k1_scalar_order_get_num(&norder);\n-    secp256k1_scalar_get_num(&na, &data->scalar[1]);\n-\n-    for (i = 0; i < iters; i++) {\n-        j += secp256k1_num_jacobi(&nx, &norder);\n-        secp256k1_num_add(&nx, &nx, &na);\n-    }\n-    CHECK(j <= iters);\n-}\n-#endif\n-\n int main(int argc, char **argv) {\n     bench_inv data;\n     int iters = get_iters(20000);\n \n     if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"add\")) run_benchmark(\"scalar_add\", bench_scalar_add, bench_setup, NULL, &data, 10, iters*100);\n     if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"negate\")) run_benchmark(\"scalar_negate\", bench_scalar_negate, bench_setup, NULL, &data, 10, iters*100);\n-    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"sqr\")) run_benchmark(\"scalar_sqr\", bench_scalar_sqr, bench_setup, NULL, &data, 10, iters*10);\n     if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"mul\")) run_benchmark(\"scalar_mul\", bench_scalar_mul, bench_setup, NULL, &data, 10, iters*10);\n     if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"split\")) run_benchmark(\"scalar_split\", bench_scalar_split, bench_setup, NULL, &data, 10, iters);\n-    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"scalar_inverse\", bench_scalar_inverse, bench_setup, NULL, &data, 10, 2000);\n-    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"scalar_inverse_var\", bench_scalar_inverse_var, bench_setup, NULL, &data, 10, 2000);\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"scalar_inverse\", bench_scalar_inverse, bench_setup, NULL, &data, 10, iters);\n+    if (have_flag(argc, argv, \"scalar\") || have_flag(argc, argv, \"inverse\")) run_benchmark(\"scalar_inverse_var\", bench_scalar_inverse_var, bench_setup, NULL, &data, 10, iters);\n \n     if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"normalize\")) run_benchmark(\"field_normalize\", bench_field_normalize, bench_setup, NULL, &data, 10, iters*100);\n     if (have_flag(argc, argv, \"field\") || have_flag(argc, argv, \"normalize\")) run_benchmark(\"field_normalize_weak\", bench_field_normalize_weak, bench_setup, NULL, &data, 10, iters*100);\n@@ -411,7 +364,6 @@ int main(int argc, char **argv) {\n     if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_var\", bench_group_add_var, bench_setup, NULL, &data, 10, iters*10);\n     if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_affine\", bench_group_add_affine, bench_setup, NULL, &data, 10, iters*10);\n     if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"add\")) run_benchmark(\"group_add_affine_var\", bench_group_add_affine_var, bench_setup, NULL, &data, 10, iters*10);\n-    if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"jacobi\")) run_benchmark(\"group_jacobi_var\", bench_group_jacobi_var, bench_setup, NULL, &data, 10, iters);\n     if (have_flag(argc, argv, \"group\") || have_flag(argc, argv, \"to_affine\")) run_benchmark(\"group_to_affine_var\", bench_group_to_affine_var, bench_setup, NULL, &data, 10, iters);\n \n     if (have_flag(argc, argv, \"ecmult\") || have_flag(argc, argv, \"wnaf\")) run_benchmark(\"wnaf_const\", bench_wnaf_const, bench_setup, NULL, &data, 10, iters);\n@@ -424,8 +376,5 @@ int main(int argc, char **argv) {\n     if (have_flag(argc, argv, \"context\") || have_flag(argc, argv, \"verify\")) run_benchmark(\"context_verify\", bench_context_verify, bench_setup, NULL, &data, 10, 1 + iters/1000);\n     if (have_flag(argc, argv, \"context\") || have_flag(argc, argv, \"sign\")) run_benchmark(\"context_sign\", bench_context_sign, bench_setup, NULL, &data, 10, 1 + iters/100);\n \n-#ifndef USE_NUM_NONE\n-    if (have_flag(argc, argv, \"num\") || have_flag(argc, argv, \"jacobi\")) run_benchmark(\"num_jacobi\", bench_num_jacobi, bench_setup, NULL, &data, 10, iters*10);\n-#endif\n     return 0;\n }"
      },
      {
        "sha": "3f6270ce84fd5ad497c5a2904b0b8e026838feb4",
        "filename": "src/secp256k1/src/bench_recover.c",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_recover.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_recover.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_recover.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014-2015 Pieter Wuille                              *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014-2015 Pieter Wuille                               *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #include \"include/secp256k1.h\"\n #include \"include/secp256k1_recovery.h\""
      },
      {
        "sha": "f7f591c41dcea51e3219b1eea959dc2958e46dde",
        "filename": "src/secp256k1/src/bench_schnorrsig.c",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_schnorrsig.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_schnorrsig.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_schnorrsig.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2018-2020 Andrew Poelstra, Jonas Nick                *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2018-2020 Andrew Poelstra, Jonas Nick                 *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #include <string.h>\n #include <stdlib.h>"
      },
      {
        "sha": "933f367c4b6a65a03699f31ae61d91e21ca0e370",
        "filename": "src/secp256k1/src/bench_sign.c",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_sign.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_sign.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_sign.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #include \"include/secp256k1.h\"\n #include \"util.h\"\n@@ -12,11 +12,11 @@ typedef struct {\n     secp256k1_context* ctx;\n     unsigned char msg[32];\n     unsigned char key[32];\n-} bench_sign;\n+} bench_sign_data;\n \n static void bench_sign_setup(void* arg) {\n     int i;\n-    bench_sign *data = (bench_sign*)arg;\n+    bench_sign_data *data = (bench_sign_data*)arg;\n \n     for (i = 0; i < 32; i++) {\n         data->msg[i] = i + 1;\n@@ -28,7 +28,7 @@ static void bench_sign_setup(void* arg) {\n \n static void bench_sign_run(void* arg, int iters) {\n     int i;\n-    bench_sign *data = (bench_sign*)arg;\n+    bench_sign_data *data = (bench_sign_data*)arg;\n \n     unsigned char sig[74];\n     for (i = 0; i < iters; i++) {\n@@ -45,7 +45,7 @@ static void bench_sign_run(void* arg, int iters) {\n }\n \n int main(void) {\n-    bench_sign data;\n+    bench_sign_data data;\n \n     int iters = get_iters(20000);\n "
      },
      {
        "sha": "c56aefd3699c06d6bf5bf4022801387b7762ca64",
        "filename": "src/secp256k1/src/bench_verify.c",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_verify.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/bench_verify.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/bench_verify.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #include <stdio.h>\n #include <string.h>\n@@ -29,11 +29,11 @@ typedef struct {\n #ifdef ENABLE_OPENSSL_TESTS\n     EC_GROUP* ec_group;\n #endif\n-} benchmark_verify_t;\n+} bench_verify_data;\n \n-static void benchmark_verify(void* arg, int iters) {\n+static void bench_verify(void* arg, int iters) {\n     int i;\n-    benchmark_verify_t* data = (benchmark_verify_t*)arg;\n+    bench_verify_data* data = (bench_verify_data*)arg;\n \n     for (i = 0; i < iters; i++) {\n         secp256k1_pubkey pubkey;\n@@ -51,9 +51,9 @@ static void benchmark_verify(void* arg, int iters) {\n }\n \n #ifdef ENABLE_OPENSSL_TESTS\n-static void benchmark_verify_openssl(void* arg, int iters) {\n+static void bench_verify_openssl(void* arg, int iters) {\n     int i;\n-    benchmark_verify_t* data = (benchmark_verify_t*)arg;\n+    bench_verify_data* data = (bench_verify_data*)arg;\n \n     for (i = 0; i < iters; i++) {\n         data->sig[data->siglen - 1] ^= (i & 0xFF);\n@@ -84,7 +84,7 @@ int main(void) {\n     int i;\n     secp256k1_pubkey pubkey;\n     secp256k1_ecdsa_signature sig;\n-    benchmark_verify_t data;\n+    bench_verify_data data;\n \n     int iters = get_iters(20000);\n \n@@ -103,10 +103,10 @@ int main(void) {\n     data.pubkeylen = 33;\n     CHECK(secp256k1_ec_pubkey_serialize(data.ctx, data.pubkey, &data.pubkeylen, &pubkey, SECP256K1_EC_COMPRESSED) == 1);\n \n-    run_benchmark(\"ecdsa_verify\", benchmark_verify, NULL, NULL, &data, 10, iters);\n+    run_benchmark(\"ecdsa_verify\", bench_verify, NULL, NULL, &data, 10, iters);\n #ifdef ENABLE_OPENSSL_TESTS\n     data.ec_group = EC_GROUP_new_by_curve_name(NID_secp256k1);\n-    run_benchmark(\"ecdsa_verify_openssl\", benchmark_verify_openssl, NULL, NULL, &data, 10, iters);\n+    run_benchmark(\"ecdsa_verify_openssl\", bench_verify_openssl, NULL, NULL, &data, 10, iters);\n     EC_GROUP_free(data.ec_group);\n #endif\n "
      },
      {
        "sha": "d5e54d8ce619736930a925eb9bdc6fd47ba6d513",
        "filename": "src/secp256k1/src/ecdsa.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecdsa.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecdsa.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECDSA_H\n #define SECP256K1_ECDSA_H"
      },
      {
        "sha": "156a33d1128656a00c510093bd3b7105ace7d942",
        "filename": "src/secp256k1/src/ecdsa_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecdsa_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecdsa_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecdsa_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013-2015 Pieter Wuille                              *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013-2015 Pieter Wuille                               *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n \n #ifndef SECP256K1_ECDSA_IMPL_H"
      },
      {
        "sha": "5be3a64b84043cc50cc4e63bdcde8c64fd4fbfc8",
        "filename": "src/secp256k1/src/eckey.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/eckey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/eckey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECKEY_H\n #define SECP256K1_ECKEY_H"
      },
      {
        "sha": "a39cb79653c381643de38c9fa69d60b1d2aa3da9",
        "filename": "src/secp256k1/src/eckey_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/eckey_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/eckey_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/eckey_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECKEY_IMPL_H\n #define SECP256K1_ECKEY_IMPL_H"
      },
      {
        "sha": "7ab617e20e4217a2f60de46395e2f7ed842d1dd8",
        "filename": "src/secp256k1/src/ecmult.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,13 +1,12 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014, 2017 Pieter Wuille, Andrew Poelstra      *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014, 2017 Pieter Wuille, Andrew Poelstra       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECMULT_H\n #define SECP256K1_ECMULT_H\n \n-#include \"num.h\"\n #include \"group.h\"\n #include \"scalar.h\"\n #include \"scratch.h\""
      },
      {
        "sha": "d6f0ea22275a699595f7f62260bf668299cde237",
        "filename": "src/secp256k1/src/ecmult_const.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_const.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_const.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2015 Andrew Poelstra                                 *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2015 Andrew Poelstra                                  *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECMULT_CONST_H\n #define SECP256K1_ECMULT_CONST_H"
      },
      {
        "sha": "0e1fb965cbdefc9d31b342f87095f83f027413b4",
        "filename": "src/secp256k1/src/ecmult_const_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_const_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_const_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_const_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2015 Pieter Wuille, Andrew Poelstra                  *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2015 Pieter Wuille, Andrew Poelstra                   *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECMULT_CONST_IMPL_H\n #define SECP256K1_ECMULT_CONST_IMPL_H"
      },
      {
        "sha": "539618dcbb8722edc40108f72a53002f5b770b82",
        "filename": "src/secp256k1/src/ecmult_gen.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_H\n #define SECP256K1_ECMULT_GEN_H"
      },
      {
        "sha": "384a67faeda7a6d4d2eb31af91315a5c8766284d",
        "filename": "src/secp256k1/src/ecmult_gen_impl.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_gen_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_gen_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_gen_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell      *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014, 2015 Pieter Wuille, Gregory Maxwell       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_ECMULT_GEN_IMPL_H\n #define SECP256K1_ECMULT_GEN_IMPL_H\n@@ -144,7 +144,7 @@ static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp25\n              *    (https://cryptojedi.org/peter/data/chesrump-20130822.pdf) and\n              *   \"Cache Attacks and Countermeasures: the Case of AES\", RSA 2006,\n              *    by Dag Arne Osvik, Adi Shamir, and Eran Tromer\n-             *    (http://www.tau.ac.il/~tromer/papers/cache.pdf)\n+             *    (https://www.tau.ac.il/~tromer/papers/cache.pdf)\n              */\n             secp256k1_ge_storage_cmov(&adds, &(*ctx->prec)[j][i], i == bits);\n         }"
      },
      {
        "sha": "5c2edac68fc6926f80335baf3e112b2b9899a2df",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/*****************************************************************************\n- * Copyright (c) 2013, 2014, 2017 Pieter Wuille, Andrew Poelstra, Jonas Nick *\n- * Distributed under the MIT software license, see the accompanying          *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.       *\n- *****************************************************************************/\n+/******************************************************************************\n+ * Copyright (c) 2013, 2014, 2017 Pieter Wuille, Andrew Poelstra, Jonas Nick  *\n+ * Distributed under the MIT software license, see the accompanying           *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.       *\n+ ******************************************************************************/\n \n #ifndef SECP256K1_ECMULT_IMPL_H\n #define SECP256K1_ECMULT_IMPL_H\n@@ -595,11 +595,11 @@ static int secp256k1_ecmult_strauss_batch(const secp256k1_callback* error_callba\n     scalars = (secp256k1_scalar*)secp256k1_scratch_alloc(error_callback, scratch, n_points * sizeof(secp256k1_scalar));\n     state.prej = (secp256k1_gej*)secp256k1_scratch_alloc(error_callback, scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_gej));\n     state.zr = (secp256k1_fe*)secp256k1_scratch_alloc(error_callback, scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_fe));\n-    state.pre_a = (secp256k1_ge*)secp256k1_scratch_alloc(error_callback, scratch, n_points * 2 * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_ge));\n-    state.pre_a_lam = state.pre_a + n_points * ECMULT_TABLE_SIZE(WINDOW_A);\n+    state.pre_a = (secp256k1_ge*)secp256k1_scratch_alloc(error_callback, scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_ge));\n+    state.pre_a_lam = (secp256k1_ge*)secp256k1_scratch_alloc(error_callback, scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_ge));\n     state.ps = (struct secp256k1_strauss_point_state*)secp256k1_scratch_alloc(error_callback, scratch, n_points * sizeof(struct secp256k1_strauss_point_state));\n \n-    if (points == NULL || scalars == NULL || state.prej == NULL || state.zr == NULL || state.pre_a == NULL) {\n+    if (points == NULL || scalars == NULL || state.prej == NULL || state.zr == NULL || state.pre_a == NULL || state.pre_a_lam == NULL || state.ps == NULL) {\n         secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);\n         return 0;\n     }"
      },
      {
        "sha": "854aaebabc966e506a38707d349130d5c7571a27",
        "filename": "src/secp256k1/src/field.h",
        "status": "modified",
        "additions": 10,
        "deletions": 19,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_FIELD_H\n #define SECP256K1_FIELD_H\n@@ -43,13 +43,12 @@ static void secp256k1_fe_normalize_weak(secp256k1_fe *r);\n /** Normalize a field element, without constant-time guarantee. */\n static void secp256k1_fe_normalize_var(secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n- *  implementation may optionally normalize the input, but this should not be relied upon. */\n-static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r);\n+/** Verify whether a field element represents zero i.e. would normalize to a zero value. */\n+static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r);\n \n-/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field\n- *  implementation may optionally normalize the input, but this should not be relied upon. */\n-static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r);\n+/** Verify whether a field element represents zero i.e. would normalize to a zero value,\n+ *  without constant-time guarantee. */\n+static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r);\n \n /** Set a field element equal to a small integer. Resulting field element is normalized. */\n static void secp256k1_fe_set_int(secp256k1_fe *r, int a);\n@@ -104,21 +103,13 @@ static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a);\n  *  itself. */\n static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Checks whether a field element is a quadratic residue. */\n-static int secp256k1_fe_is_quad_var(const secp256k1_fe *a);\n-\n /** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be\n  *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */\n static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a);\n \n /** Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. */\n static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a);\n \n-/** Calculate the (modular) inverses of a batch of field elements. Requires the inputs' magnitudes to be\n- *  at most 8. The output magnitudes are 1 (but not guaranteed to be normalized). The inputs and\n- *  outputs must not overlap in memory. */\n-static void secp256k1_fe_inv_all_var(secp256k1_fe *r, const secp256k1_fe *a, size_t len);\n-\n /** Convert a field element to the storage type. */\n static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a);\n "
      },
      {
        "sha": "9eb65607f12cb2b86694e0a48dc9ce6f754ddd97",
        "filename": "src/secp256k1/src/field_10x26.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_10x26.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_10x26.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_FIELD_REPR_H\n #define SECP256K1_FIELD_REPR_H"
      },
      {
        "sha": "7a38c117f194be718e6d8b81920dfa42e2a72e79",
        "filename": "src/secp256k1/src/field_10x26_impl.h",
        "status": "modified",
        "additions": 96,
        "deletions": 7,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_10x26_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_10x26_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_10x26_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,14 +1,15 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_FIELD_REPR_IMPL_H\n #define SECP256K1_FIELD_REPR_IMPL_H\n \n #include \"util.h\"\n #include \"field.h\"\n+#include \"modinv32_impl.h\"\n \n #ifdef VERIFY\n static void secp256k1_fe_verify(const secp256k1_fe *a) {\n@@ -181,7 +182,7 @@ static void secp256k1_fe_normalize_var(secp256k1_fe *r) {\n #endif\n }\n \n-static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {\n+static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r) {\n     uint32_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4],\n              t5 = r->n[5], t6 = r->n[6], t7 = r->n[7], t8 = r->n[8], t9 = r->n[9];\n \n@@ -210,7 +211,7 @@ static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {\n     return (z0 == 0) | (z1 == 0x3FFFFFFUL);\n }\n \n-static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {\n+static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r) {\n     uint32_t t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;\n     uint32_t z0, z1;\n     uint32_t x;\n@@ -1164,4 +1165,92 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_from_signed30(secp256k1_fe *r, const secp256k1_modinv32_signed30 *a) {\n+    const uint32_t M26 = UINT32_MAX >> 6;\n+    const uint32_t a0 = a->v[0], a1 = a->v[1], a2 = a->v[2], a3 = a->v[3], a4 = a->v[4],\n+                   a5 = a->v[5], a6 = a->v[6], a7 = a->v[7], a8 = a->v[8];\n+\n+    /* The output from secp256k1_modinv32{_var} should be normalized to range [0,modulus), and\n+     * have limbs in [0,2^30). The modulus is < 2^256, so the top limb must be below 2^(256-30*8).\n+     */\n+    VERIFY_CHECK(a0 >> 30 == 0);\n+    VERIFY_CHECK(a1 >> 30 == 0);\n+    VERIFY_CHECK(a2 >> 30 == 0);\n+    VERIFY_CHECK(a3 >> 30 == 0);\n+    VERIFY_CHECK(a4 >> 30 == 0);\n+    VERIFY_CHECK(a5 >> 30 == 0);\n+    VERIFY_CHECK(a6 >> 30 == 0);\n+    VERIFY_CHECK(a7 >> 30 == 0);\n+    VERIFY_CHECK(a8 >> 16 == 0);\n+\n+    r->n[0] =  a0                   & M26;\n+    r->n[1] = (a0 >> 26 | a1 <<  4) & M26;\n+    r->n[2] = (a1 >> 22 | a2 <<  8) & M26;\n+    r->n[3] = (a2 >> 18 | a3 << 12) & M26;\n+    r->n[4] = (a3 >> 14 | a4 << 16) & M26;\n+    r->n[5] = (a4 >> 10 | a5 << 20) & M26;\n+    r->n[6] = (a5 >>  6 | a6 << 24) & M26;\n+    r->n[7] = (a6 >>  2           ) & M26;\n+    r->n[8] = (a6 >> 28 | a7 <<  2) & M26;\n+    r->n[9] = (a7 >> 24 | a8 <<  6);\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_to_signed30(secp256k1_modinv32_signed30 *r, const secp256k1_fe *a) {\n+    const uint32_t M30 = UINT32_MAX >> 2;\n+    const uint64_t a0 = a->n[0], a1 = a->n[1], a2 = a->n[2], a3 = a->n[3], a4 = a->n[4],\n+                   a5 = a->n[5], a6 = a->n[6], a7 = a->n[7], a8 = a->n[8], a9 = a->n[9];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r->v[0] = (a0       | a1 << 26) & M30;\n+    r->v[1] = (a1 >>  4 | a2 << 22) & M30;\n+    r->v[2] = (a2 >>  8 | a3 << 18) & M30;\n+    r->v[3] = (a3 >> 12 | a4 << 14) & M30;\n+    r->v[4] = (a4 >> 16 | a5 << 10) & M30;\n+    r->v[5] = (a5 >> 20 | a6 <<  6) & M30;\n+    r->v[6] = (a6 >> 24 | a7 <<  2\n+                        | a8 << 28) & M30;\n+    r->v[7] = (a8 >>  2 | a9 << 24) & M30;\n+    r->v[8] =  a9 >>  6;\n+}\n+\n+static const secp256k1_modinv32_modinfo secp256k1_const_modinfo_fe = {\n+    {{-0x3D1, -4, 0, 0, 0, 0, 0, 0, 65536}},\n+    0x2DDACACFL\n+};\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *x) {\n+    secp256k1_fe tmp;\n+    secp256k1_modinv32_signed30 s;\n+\n+    tmp = *x;\n+    secp256k1_fe_normalize(&tmp);\n+    secp256k1_fe_to_signed30(&s, &tmp);\n+    secp256k1_modinv32(&s, &secp256k1_const_modinfo_fe);\n+    secp256k1_fe_from_signed30(r, &s);\n+\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == secp256k1_fe_normalizes_to_zero(&tmp));\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {\n+    secp256k1_fe tmp;\n+    secp256k1_modinv32_signed30 s;\n+\n+    tmp = *x;\n+    secp256k1_fe_normalize_var(&tmp);\n+    secp256k1_fe_to_signed30(&s, &tmp);\n+    secp256k1_modinv32_var(&s, &secp256k1_const_modinfo_fe);\n+    secp256k1_fe_from_signed30(r, &s);\n+\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == secp256k1_fe_normalizes_to_zero(&tmp));\n+}\n+\n #endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "50ee3f9ec96b746b6565ef1655440730802a552d",
        "filename": "src/secp256k1/src/field_5x52.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_FIELD_REPR_H\n #define SECP256K1_FIELD_REPR_H"
      },
      {
        "sha": "a2118044ab381de4916a87d5accaedb2e1949539",
        "filename": "src/secp256k1/src/field_5x52_asm_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52_asm_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52_asm_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_asm_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013-2014 Diederik Huys, Pieter Wuille               *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013-2014 Diederik Huys, Pieter Wuille                *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n /**\n  * Changelog:"
      },
      {
        "sha": "60ded927f6e834ddb30d46e333abf36918349b8f",
        "filename": "src/secp256k1/src/field_5x52_impl.h",
        "status": "modified",
        "additions": 84,
        "deletions": 7,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_FIELD_REPR_IMPL_H\n #define SECP256K1_FIELD_REPR_IMPL_H\n@@ -13,6 +13,7 @@\n \n #include \"util.h\"\n #include \"field.h\"\n+#include \"modinv64_impl.h\"\n \n #if defined(USE_ASM_X86_64)\n #include \"field_5x52_asm_impl.h\"\n@@ -161,7 +162,7 @@ static void secp256k1_fe_normalize_var(secp256k1_fe *r) {\n #endif\n }\n \n-static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {\n+static int secp256k1_fe_normalizes_to_zero(const secp256k1_fe *r) {\n     uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];\n \n     /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */\n@@ -184,7 +185,7 @@ static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {\n     return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);\n }\n \n-static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {\n+static int secp256k1_fe_normalizes_to_zero_var(const secp256k1_fe *r) {\n     uint64_t t0, t1, t2, t3, t4;\n     uint64_t z0, z1;\n     uint64_t x;\n@@ -498,4 +499,80 @@ static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const se\n #endif\n }\n \n+static void secp256k1_fe_from_signed62(secp256k1_fe *r, const secp256k1_modinv64_signed62 *a) {\n+    const uint64_t M52 = UINT64_MAX >> 12;\n+    const uint64_t a0 = a->v[0], a1 = a->v[1], a2 = a->v[2], a3 = a->v[3], a4 = a->v[4];\n+\n+    /* The output from secp256k1_modinv64{_var} should be normalized to range [0,modulus), and\n+     * have limbs in [0,2^62). The modulus is < 2^256, so the top limb must be below 2^(256-62*4).\n+     */\n+    VERIFY_CHECK(a0 >> 62 == 0);\n+    VERIFY_CHECK(a1 >> 62 == 0);\n+    VERIFY_CHECK(a2 >> 62 == 0);\n+    VERIFY_CHECK(a3 >> 62 == 0);\n+    VERIFY_CHECK(a4 >> 8 == 0);\n+\n+    r->n[0] =  a0                   & M52;\n+    r->n[1] = (a0 >> 52 | a1 << 10) & M52;\n+    r->n[2] = (a1 >> 42 | a2 << 20) & M52;\n+    r->n[3] = (a2 >> 32 | a3 << 30) & M52;\n+    r->n[4] = (a3 >> 22 | a4 << 40);\n+\n+#ifdef VERIFY\n+    r->magnitude = 1;\n+    r->normalized = 1;\n+    secp256k1_fe_verify(r);\n+#endif\n+}\n+\n+static void secp256k1_fe_to_signed62(secp256k1_modinv64_signed62 *r, const secp256k1_fe *a) {\n+    const uint64_t M62 = UINT64_MAX >> 2;\n+    const uint64_t a0 = a->n[0], a1 = a->n[1], a2 = a->n[2], a3 = a->n[3], a4 = a->n[4];\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(a->normalized);\n+#endif\n+\n+    r->v[0] = (a0       | a1 << 52) & M62;\n+    r->v[1] = (a1 >> 10 | a2 << 42) & M62;\n+    r->v[2] = (a2 >> 20 | a3 << 32) & M62;\n+    r->v[3] = (a3 >> 30 | a4 << 22) & M62;\n+    r->v[4] =  a4 >> 40;\n+}\n+\n+static const secp256k1_modinv64_modinfo secp256k1_const_modinfo_fe = {\n+    {{-0x1000003D1LL, 0, 0, 0, 256}},\n+    0x27C7F6E22DDACACFLL\n+};\n+\n+static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *x) {\n+    secp256k1_fe tmp;\n+    secp256k1_modinv64_signed62 s;\n+\n+    tmp = *x;\n+    secp256k1_fe_normalize(&tmp);\n+    secp256k1_fe_to_signed62(&s, &tmp);\n+    secp256k1_modinv64(&s, &secp256k1_const_modinfo_fe);\n+    secp256k1_fe_from_signed62(r, &s);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == secp256k1_fe_normalizes_to_zero(&tmp));\n+#endif\n+}\n+\n+static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {\n+    secp256k1_fe tmp;\n+    secp256k1_modinv64_signed62 s;\n+\n+    tmp = *x;\n+    secp256k1_fe_normalize_var(&tmp);\n+    secp256k1_fe_to_signed62(&s, &tmp);\n+    secp256k1_modinv64_var(&s, &secp256k1_const_modinfo_fe);\n+    secp256k1_fe_from_signed62(r, &s);\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_fe_normalizes_to_zero(r) == secp256k1_fe_normalizes_to_zero(&tmp));\n+#endif\n+}\n+\n #endif /* SECP256K1_FIELD_REPR_IMPL_H */"
      },
      {
        "sha": "314002ee3950f1d4fe5b4a30699883c9b4f0e4ea",
        "filename": "src/secp256k1/src/field_5x52_int128_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52_int128_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_5x52_int128_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_5x52_int128_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_FIELD_INNER5X52_IMPL_H\n #define SECP256K1_FIELD_INNER5X52_IMPL_H"
      },
      {
        "sha": "374284a1f4ce974cd551fd4e66b9d274381dc043",
        "filename": "src/secp256k1/src/field_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 185,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/field_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/field_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_FIELD_IMPL_H\n #define SECP256K1_FIELD_IMPL_H\n@@ -12,7 +12,6 @@\n #endif\n \n #include \"util.h\"\n-#include \"num.h\"\n \n #if defined(SECP256K1_WIDEMUL_INT128)\n #include \"field_5x52_impl.h\"\n@@ -136,185 +135,6 @@ static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {\n     return secp256k1_fe_equal(&t1, a);\n }\n \n-static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {\n-    secp256k1_fe x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;\n-    int j;\n-\n-    /** The binary representation of (p - 2) has 5 blocks of 1s, with lengths in\n-     *  { 1, 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:\n-     *  [1], [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]\n-     */\n-\n-    secp256k1_fe_sqr(&x2, a);\n-    secp256k1_fe_mul(&x2, &x2, a);\n-\n-    secp256k1_fe_sqr(&x3, &x2);\n-    secp256k1_fe_mul(&x3, &x3, a);\n-\n-    x6 = x3;\n-    for (j=0; j<3; j++) {\n-        secp256k1_fe_sqr(&x6, &x6);\n-    }\n-    secp256k1_fe_mul(&x6, &x6, &x3);\n-\n-    x9 = x6;\n-    for (j=0; j<3; j++) {\n-        secp256k1_fe_sqr(&x9, &x9);\n-    }\n-    secp256k1_fe_mul(&x9, &x9, &x3);\n-\n-    x11 = x9;\n-    for (j=0; j<2; j++) {\n-        secp256k1_fe_sqr(&x11, &x11);\n-    }\n-    secp256k1_fe_mul(&x11, &x11, &x2);\n-\n-    x22 = x11;\n-    for (j=0; j<11; j++) {\n-        secp256k1_fe_sqr(&x22, &x22);\n-    }\n-    secp256k1_fe_mul(&x22, &x22, &x11);\n-\n-    x44 = x22;\n-    for (j=0; j<22; j++) {\n-        secp256k1_fe_sqr(&x44, &x44);\n-    }\n-    secp256k1_fe_mul(&x44, &x44, &x22);\n-\n-    x88 = x44;\n-    for (j=0; j<44; j++) {\n-        secp256k1_fe_sqr(&x88, &x88);\n-    }\n-    secp256k1_fe_mul(&x88, &x88, &x44);\n-\n-    x176 = x88;\n-    for (j=0; j<88; j++) {\n-        secp256k1_fe_sqr(&x176, &x176);\n-    }\n-    secp256k1_fe_mul(&x176, &x176, &x88);\n-\n-    x220 = x176;\n-    for (j=0; j<44; j++) {\n-        secp256k1_fe_sqr(&x220, &x220);\n-    }\n-    secp256k1_fe_mul(&x220, &x220, &x44);\n-\n-    x223 = x220;\n-    for (j=0; j<3; j++) {\n-        secp256k1_fe_sqr(&x223, &x223);\n-    }\n-    secp256k1_fe_mul(&x223, &x223, &x3);\n-\n-    /* The final result is then assembled using a sliding window over the blocks. */\n-\n-    t1 = x223;\n-    for (j=0; j<23; j++) {\n-        secp256k1_fe_sqr(&t1, &t1);\n-    }\n-    secp256k1_fe_mul(&t1, &t1, &x22);\n-    for (j=0; j<5; j++) {\n-        secp256k1_fe_sqr(&t1, &t1);\n-    }\n-    secp256k1_fe_mul(&t1, &t1, a);\n-    for (j=0; j<3; j++) {\n-        secp256k1_fe_sqr(&t1, &t1);\n-    }\n-    secp256k1_fe_mul(&t1, &t1, &x2);\n-    for (j=0; j<2; j++) {\n-        secp256k1_fe_sqr(&t1, &t1);\n-    }\n-    secp256k1_fe_mul(r, a, &t1);\n-}\n-\n-static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {\n-#if defined(USE_FIELD_INV_BUILTIN)\n-    secp256k1_fe_inv(r, a);\n-#elif defined(USE_FIELD_INV_NUM)\n-    secp256k1_num n, m;\n-    static const secp256k1_fe negone = SECP256K1_FE_CONST(\n-        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL,\n-        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL, 0xFFFFFC2EUL\n-    );\n-    /* secp256k1 field prime, value p defined in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1. */\n-    static const unsigned char prime[32] = {\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F\n-    };\n-    unsigned char b[32];\n-    int res;\n-    secp256k1_fe c = *a;\n-    secp256k1_fe_normalize_var(&c);\n-    secp256k1_fe_get_b32(b, &c);\n-    secp256k1_num_set_bin(&n, b, 32);\n-    secp256k1_num_set_bin(&m, prime, 32);\n-    secp256k1_num_mod_inverse(&n, &n, &m);\n-    secp256k1_num_get_bin(b, 32, &n);\n-    res = secp256k1_fe_set_b32(r, b);\n-    (void)res;\n-    VERIFY_CHECK(res);\n-    /* Verify the result is the (unique) valid inverse using non-GMP code. */\n-    secp256k1_fe_mul(&c, &c, r);\n-    secp256k1_fe_add(&c, &negone);\n-    CHECK(secp256k1_fe_normalizes_to_zero_var(&c));\n-#else\n-#error \"Please select field inverse implementation\"\n-#endif\n-}\n-\n-static void secp256k1_fe_inv_all_var(secp256k1_fe *r, const secp256k1_fe *a, size_t len) {\n-    secp256k1_fe u;\n-    size_t i;\n-    if (len < 1) {\n-        return;\n-    }\n-\n-    VERIFY_CHECK((r + len <= a) || (a + len <= r));\n-\n-    r[0] = a[0];\n-\n-    i = 0;\n-    while (++i < len) {\n-        secp256k1_fe_mul(&r[i], &r[i - 1], &a[i]);\n-    }\n-\n-    secp256k1_fe_inv_var(&u, &r[--i]);\n-\n-    while (i > 0) {\n-        size_t j = i--;\n-        secp256k1_fe_mul(&r[j], &r[i], &u);\n-        secp256k1_fe_mul(&u, &u, &a[j]);\n-    }\n-\n-    r[0] = u;\n-}\n-\n-static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {\n-#ifndef USE_NUM_NONE\n-    unsigned char b[32];\n-    secp256k1_num n;\n-    secp256k1_num m;\n-    /* secp256k1 field prime, value p defined in \"Standards for Efficient Cryptography\" (SEC2) 2.7.1. */\n-    static const unsigned char prime[32] = {\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,\n-        0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F\n-    };\n-\n-    secp256k1_fe c = *a;\n-    secp256k1_fe_normalize_var(&c);\n-    secp256k1_fe_get_b32(b, &c);\n-    secp256k1_num_set_bin(&n, b, 32);\n-    secp256k1_num_set_bin(&m, prime, 32);\n-    return secp256k1_num_jacobi(&n, &m) >= 0;\n-#else\n-    secp256k1_fe r;\n-    return secp256k1_fe_sqrt(&r, a);\n-#endif\n-}\n-\n static const secp256k1_fe secp256k1_fe_one = SECP256K1_FE_CONST(0, 0, 0, 0, 0, 0, 0, 1);\n \n #endif /* SECP256K1_FIELD_IMPL_H */"
      },
      {
        "sha": "024c55726170f044e1a760921389d0b7e150ac67",
        "filename": "src/secp256k1/src/gen_context.c",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/gen_context.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/gen_context.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/gen_context.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,16 +1,17 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014, 2015 Thomas Daede, Cory Fields           *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014, 2015 Thomas Daede, Cory Fields            *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n-// Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.\n-// ifndef guard so downstream users can define their own if they do not use autotools.\n+/* Autotools creates libsecp256k1-config.h, of which ECMULT_GEN_PREC_BITS is needed.\n+   ifndef guard so downstream users can define their own if they do not use autotools. */\n #if !defined(ECMULT_GEN_PREC_BITS)\n #include \"libsecp256k1-config.h\"\n #endif\n-#define USE_BASIC_CONFIG 1\n-#include \"basic-config.h\"\n+\n+/* We can't require the precomputed tables when creating them. */\n+#undef USE_ECMULT_STATIC_PRECOMPUTATION\n \n #include \"include/secp256k1.h\"\n #include \"assumptions.h\"\n@@ -47,8 +48,8 @@ int main(int argc, char **argv) {\n         return -1;\n     }\n \n-    fprintf(fp, \"#ifndef _SECP256K1_ECMULT_STATIC_CONTEXT_\\n\");\n-    fprintf(fp, \"#define _SECP256K1_ECMULT_STATIC_CONTEXT_\\n\");\n+    fprintf(fp, \"#ifndef SECP256K1_ECMULT_STATIC_CONTEXT_H\\n\");\n+    fprintf(fp, \"#define SECP256K1_ECMULT_STATIC_CONTEXT_H\\n\");\n     fprintf(fp, \"#include \\\"src/group.h\\\"\\n\");\n     fprintf(fp, \"#define SC SECP256K1_GE_STORAGE_CONST\\n\");\n     fprintf(fp, \"#if ECMULT_GEN_PREC_N != %d || ECMULT_GEN_PREC_G != %d\\n\", ECMULT_GEN_PREC_N, ECMULT_GEN_PREC_G);"
      },
      {
        "sha": "b9cd334dae26c7990ac43d93613b346132134a91",
        "filename": "src/secp256k1/src/group.h",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,13 +1,12 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_GROUP_H\n #define SECP256K1_GROUP_H\n \n-#include \"num.h\"\n #include \"field.h\"\n \n /** A group element of the secp256k1 curve, in affine coordinates. */\n@@ -43,12 +42,6 @@ typedef struct {\n /** Set a group element equal to the point with given X and Y coordinates */\n static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y);\n \n-/** Set a group element (affine) equal to the point with the given X coordinate\n- *  and a Y coordinate that is a quadratic residue modulo p. The return value\n- *  is true iff a coordinate with the given X coordinate exists.\n- */\n-static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x);\n-\n /** Set a group element (affine) equal to the point with the given X coordinate, and given oddness\n  *  for Y. Return value indicates whether the result is valid. */\n static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd);\n@@ -62,9 +55,12 @@ static int secp256k1_ge_is_valid_var(const secp256k1_ge *a);\n /** Set r equal to the inverse of a (i.e., mirrored around the X axis) */\n static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a);\n \n-/** Set a group element equal to another which is given in jacobian coordinates */\n+/** Set a group element equal to another which is given in jacobian coordinates. Constant time. */\n static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a);\n \n+/** Set a group element equal to another which is given in jacobian coordinates. */\n+static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a);\n+\n /** Set a batch of group elements equal to the inputs given in jacobian coordinates */\n static void secp256k1_ge_set_all_gej_var(secp256k1_ge *r, const secp256k1_gej *a, size_t len);\n \n@@ -93,9 +89,6 @@ static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a);\n /** Check whether a group element is the point at infinity. */\n static int secp256k1_gej_is_infinity(const secp256k1_gej *a);\n \n-/** Check whether a group element's y coordinate is a quadratic residue. */\n-static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a);\n-\n /** Set r equal to the double of a. Constant time. */\n static void secp256k1_gej_double(secp256k1_gej *r, const secp256k1_gej *a);\n "
      },
      {
        "sha": "19ebd8f44ee384b9715704dc3eec48466f42458f",
        "filename": "src/secp256k1/src/group_impl.h",
        "status": "modified",
        "additions": 9,
        "deletions": 28,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/group_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/group_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/group_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,13 +1,12 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013, 2014 Pieter Wuille                              *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_GROUP_IMPL_H\n #define SECP256K1_GROUP_IMPL_H\n \n-#include \"num.h\"\n #include \"field.h\"\n #include \"group.h\"\n \n@@ -207,18 +206,14 @@ static void secp256k1_ge_clear(secp256k1_ge *r) {\n     secp256k1_fe_clear(&r->y);\n }\n \n-static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x) {\n+static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {\n     secp256k1_fe x2, x3;\n     r->x = *x;\n     secp256k1_fe_sqr(&x2, x);\n     secp256k1_fe_mul(&x3, x, &x2);\n     r->infinity = 0;\n     secp256k1_fe_add(&x3, &secp256k1_fe_const_b);\n-    return secp256k1_fe_sqrt(&r->y, &x3);\n-}\n-\n-static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {\n-    if (!secp256k1_ge_set_xquad(r, x)) {\n+    if (!secp256k1_fe_sqrt(&r->y, &x3)) {\n         return 0;\n     }\n     secp256k1_fe_normalize_var(&r->y);\n@@ -591,7 +586,7 @@ static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const\n     secp256k1_fe_cmov(&n, &m, degenerate);              /* n = M^3 * Malt (2) */\n     secp256k1_fe_sqr(&t, &rr_alt);                      /* t = Ralt^2 (1) */\n     secp256k1_fe_mul(&r->z, &a->z, &m_alt);             /* r->z = Malt*Z (1) */\n-    infinity = secp256k1_fe_normalizes_to_zero(&r->z) * (1 - a->infinity);\n+    infinity = secp256k1_fe_normalizes_to_zero(&r->z) & ~a->infinity;\n     secp256k1_fe_mul_int(&r->z, 2);                     /* r->z = Z3 = 2*Malt*Z (2) */\n     secp256k1_fe_negate(&q, &q, 1);                     /* q = -Q (2) */\n     secp256k1_fe_add(&t, &q);                           /* t = Ralt^2-Q (3) */\n@@ -655,26 +650,12 @@ static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a) {\n     secp256k1_fe_mul(&r->x, &r->x, &beta);\n }\n \n-static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {\n-    secp256k1_fe yz;\n-\n-    if (a->infinity) {\n-        return 0;\n-    }\n-\n-    /* We rely on the fact that the Jacobi symbol of 1 / a->z^3 is the same as\n-     * that of a->z. Thus a->y / a->z^3 is a quadratic residue iff a->y * a->z\n-       is */\n-    secp256k1_fe_mul(&yz, &a->y, &a->z);\n-    return secp256k1_fe_is_quad_var(&yz);\n-}\n-\n static int secp256k1_ge_is_in_correct_subgroup(const secp256k1_ge* ge) {\n #ifdef EXHAUSTIVE_TEST_ORDER\n     secp256k1_gej out;\n     int i;\n \n-    /* A very simple EC multiplication ladder that avoids a dependecy on ecmult. */\n+    /* A very simple EC multiplication ladder that avoids a dependency on ecmult. */\n     secp256k1_gej_set_infinity(&out);\n     for (i = 0; i < 32; ++i) {\n         secp256k1_gej_double_var(&out, &out, NULL);"
      },
      {
        "sha": "0947a096943a9d7c3106fbcf61365eb26368ae29",
        "filename": "src/secp256k1/src/hash.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_HASH_H\n #define SECP256K1_HASH_H"
      },
      {
        "sha": "f8cd3a1634113eba4b692f73cc62e31248df0241",
        "filename": "src/secp256k1/src/hash_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/hash_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/hash_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/hash_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_HASH_IMPL_H\n #define SECP256K1_HASH_IMPL_H"
      },
      {
        "sha": "0efdda9ab5e2ef2dddd974dcfd411de176da4b3f",
        "filename": "src/secp256k1/src/modinv32.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modinv32.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,42 @@\n+/***********************************************************************\n+ * Copyright (c) 2020 Peter Dettman                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODINV32_H\n+#define SECP256K1_MODINV32_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+/* A signed 30-bit limb representation of integers.\n+ *\n+ * Its value is sum(v[i] * 2^(30*i), i=0..8). */\n+typedef struct {\n+    int32_t v[9];\n+} secp256k1_modinv32_signed30;\n+\n+typedef struct {\n+    /* The modulus in signed30 notation, must be odd and in [3, 2^256]. */\n+    secp256k1_modinv32_signed30 modulus;\n+\n+    /* modulus^{-1} mod 2^30 */\n+    uint32_t modulus_inv30;\n+} secp256k1_modinv32_modinfo;\n+\n+/* Replace x with its modular inverse mod modinfo->modulus. x must be in range [0, modulus).\n+ * If x is zero, the result will be zero as well. If not, the inverse must exist (i.e., the gcd of\n+ * x and modulus must be 1). These rules are automatically satisfied if the modulus is prime.\n+ *\n+ * On output, all of x's limbs will be in [0, 2^30).\n+ */\n+static void secp256k1_modinv32_var(secp256k1_modinv32_signed30 *x, const secp256k1_modinv32_modinfo *modinfo);\n+\n+/* Same as secp256k1_modinv32_var, but constant time in x (not in the modulus). */\n+static void secp256k1_modinv32(secp256k1_modinv32_signed30 *x, const secp256k1_modinv32_modinfo *modinfo);\n+\n+#endif /* SECP256K1_MODINV32_H */"
      },
      {
        "sha": "661c5fc04c988372954ee4b09b4686651d481cba",
        "filename": "src/secp256k1/src/modinv32_impl.h",
        "status": "added",
        "additions": 587,
        "deletions": 0,
        "changes": 587,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv32_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv32_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modinv32_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,587 @@\n+/***********************************************************************\n+ * Copyright (c) 2020 Peter Dettman                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODINV32_IMPL_H\n+#define SECP256K1_MODINV32_IMPL_H\n+\n+#include \"modinv32.h\"\n+\n+#include \"util.h\"\n+\n+#include <stdlib.h>\n+\n+/* This file implements modular inversion based on the paper \"Fast constant-time gcd computation and\n+ * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang.\n+ *\n+ * For an explanation of the algorithm, see doc/safegcd_implementation.md. This file contains an\n+ * implementation for N=30, using 30-bit signed limbs represented as int32_t.\n+ */\n+\n+#ifdef VERIFY\n+static const secp256k1_modinv32_signed30 SECP256K1_SIGNED30_ONE = {{1}};\n+\n+/* Compute a*factor and put it in r. All but the top limb in r will be in range [0,2^30). */\n+static void secp256k1_modinv32_mul_30(secp256k1_modinv32_signed30 *r, const secp256k1_modinv32_signed30 *a, int alen, int32_t factor) {\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    int64_t c = 0;\n+    int i;\n+    for (i = 0; i < 8; ++i) {\n+        if (i < alen) c += (int64_t)a->v[i] * factor;\n+        r->v[i] = (int32_t)c & M30; c >>= 30;\n+    }\n+    if (8 < alen) c += (int64_t)a->v[8] * factor;\n+    VERIFY_CHECK(c == (int32_t)c);\n+    r->v[8] = (int32_t)c;\n+}\n+\n+/* Return -1 for a<b*factor, 0 for a==b*factor, 1 for a>b*factor. A consists of alen limbs; b has 9. */\n+static int secp256k1_modinv32_mul_cmp_30(const secp256k1_modinv32_signed30 *a, int alen, const secp256k1_modinv32_signed30 *b, int32_t factor) {\n+    int i;\n+    secp256k1_modinv32_signed30 am, bm;\n+    secp256k1_modinv32_mul_30(&am, a, alen, 1); /* Normalize all but the top limb of a. */\n+    secp256k1_modinv32_mul_30(&bm, b, 9, factor);\n+    for (i = 0; i < 8; ++i) {\n+        /* Verify that all but the top limb of a and b are normalized. */\n+        VERIFY_CHECK(am.v[i] >> 30 == 0);\n+        VERIFY_CHECK(bm.v[i] >> 30 == 0);\n+    }\n+    for (i = 8; i >= 0; --i) {\n+        if (am.v[i] < bm.v[i]) return -1;\n+        if (am.v[i] > bm.v[i]) return 1;\n+    }\n+    return 0;\n+}\n+#endif\n+\n+/* Take as input a signed30 number in range (-2*modulus,modulus), and add a multiple of the modulus\n+ * to it to bring it to range [0,modulus). If sign < 0, the input will also be negated in the\n+ * process. The input must have limbs in range (-2^30,2^30). The output will have limbs in range\n+ * [0,2^30). */\n+static void secp256k1_modinv32_normalize_30(secp256k1_modinv32_signed30 *r, int32_t sign, const secp256k1_modinv32_modinfo *modinfo) {\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    int32_t r0 = r->v[0], r1 = r->v[1], r2 = r->v[2], r3 = r->v[3], r4 = r->v[4],\n+            r5 = r->v[5], r6 = r->v[6], r7 = r->v[7], r8 = r->v[8];\n+    int32_t cond_add, cond_negate;\n+\n+#ifdef VERIFY\n+    /* Verify that all limbs are in range (-2^30,2^30). */\n+    int i;\n+    for (i = 0; i < 9; ++i) {\n+        VERIFY_CHECK(r->v[i] >= -M30);\n+        VERIFY_CHECK(r->v[i] <= M30);\n+    }\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(r, 9, &modinfo->modulus, -2) > 0); /* r > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(r, 9, &modinfo->modulus, 1) < 0); /* r < modulus */\n+#endif\n+\n+    /* In a first step, add the modulus if the input is negative, and then negate if requested.\n+     * This brings r from range (-2*modulus,modulus) to range (-modulus,modulus). As all input\n+     * limbs are in range (-2^30,2^30), this cannot overflow an int32_t. Note that the right\n+     * shifts below are signed sign-extending shifts (see assumptions.h for tests that that is\n+     * indeed the behavior of the right shift operator). */\n+    cond_add = r8 >> 31;\n+    r0 += modinfo->modulus.v[0] & cond_add;\n+    r1 += modinfo->modulus.v[1] & cond_add;\n+    r2 += modinfo->modulus.v[2] & cond_add;\n+    r3 += modinfo->modulus.v[3] & cond_add;\n+    r4 += modinfo->modulus.v[4] & cond_add;\n+    r5 += modinfo->modulus.v[5] & cond_add;\n+    r6 += modinfo->modulus.v[6] & cond_add;\n+    r7 += modinfo->modulus.v[7] & cond_add;\n+    r8 += modinfo->modulus.v[8] & cond_add;\n+    cond_negate = sign >> 31;\n+    r0 = (r0 ^ cond_negate) - cond_negate;\n+    r1 = (r1 ^ cond_negate) - cond_negate;\n+    r2 = (r2 ^ cond_negate) - cond_negate;\n+    r3 = (r3 ^ cond_negate) - cond_negate;\n+    r4 = (r4 ^ cond_negate) - cond_negate;\n+    r5 = (r5 ^ cond_negate) - cond_negate;\n+    r6 = (r6 ^ cond_negate) - cond_negate;\n+    r7 = (r7 ^ cond_negate) - cond_negate;\n+    r8 = (r8 ^ cond_negate) - cond_negate;\n+    /* Propagate the top bits, to bring limbs back to range (-2^30,2^30). */\n+    r1 += r0 >> 30; r0 &= M30;\n+    r2 += r1 >> 30; r1 &= M30;\n+    r3 += r2 >> 30; r2 &= M30;\n+    r4 += r3 >> 30; r3 &= M30;\n+    r5 += r4 >> 30; r4 &= M30;\n+    r6 += r5 >> 30; r5 &= M30;\n+    r7 += r6 >> 30; r6 &= M30;\n+    r8 += r7 >> 30; r7 &= M30;\n+\n+    /* In a second step add the modulus again if the result is still negative, bringing r to range\n+     * [0,modulus). */\n+    cond_add = r8 >> 31;\n+    r0 += modinfo->modulus.v[0] & cond_add;\n+    r1 += modinfo->modulus.v[1] & cond_add;\n+    r2 += modinfo->modulus.v[2] & cond_add;\n+    r3 += modinfo->modulus.v[3] & cond_add;\n+    r4 += modinfo->modulus.v[4] & cond_add;\n+    r5 += modinfo->modulus.v[5] & cond_add;\n+    r6 += modinfo->modulus.v[6] & cond_add;\n+    r7 += modinfo->modulus.v[7] & cond_add;\n+    r8 += modinfo->modulus.v[8] & cond_add;\n+    /* And propagate again. */\n+    r1 += r0 >> 30; r0 &= M30;\n+    r2 += r1 >> 30; r1 &= M30;\n+    r3 += r2 >> 30; r2 &= M30;\n+    r4 += r3 >> 30; r3 &= M30;\n+    r5 += r4 >> 30; r4 &= M30;\n+    r6 += r5 >> 30; r5 &= M30;\n+    r7 += r6 >> 30; r6 &= M30;\n+    r8 += r7 >> 30; r7 &= M30;\n+\n+    r->v[0] = r0;\n+    r->v[1] = r1;\n+    r->v[2] = r2;\n+    r->v[3] = r3;\n+    r->v[4] = r4;\n+    r->v[5] = r5;\n+    r->v[6] = r6;\n+    r->v[7] = r7;\n+    r->v[8] = r8;\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(r0 >> 30 == 0);\n+    VERIFY_CHECK(r1 >> 30 == 0);\n+    VERIFY_CHECK(r2 >> 30 == 0);\n+    VERIFY_CHECK(r3 >> 30 == 0);\n+    VERIFY_CHECK(r4 >> 30 == 0);\n+    VERIFY_CHECK(r5 >> 30 == 0);\n+    VERIFY_CHECK(r6 >> 30 == 0);\n+    VERIFY_CHECK(r7 >> 30 == 0);\n+    VERIFY_CHECK(r8 >> 30 == 0);\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(r, 9, &modinfo->modulus, 0) >= 0); /* r >= 0 */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(r, 9, &modinfo->modulus, 1) < 0); /* r < modulus */\n+#endif\n+}\n+\n+/* Data type for transition matrices (see section 3 of explanation).\n+ *\n+ * t = [ u  v ]\n+ *     [ q  r ]\n+ */\n+typedef struct {\n+    int32_t u, v, q, r;\n+} secp256k1_modinv32_trans2x2;\n+\n+/* Compute the transition matrix and zeta for 30 divsteps.\n+ *\n+ * Input:  zeta: initial zeta\n+ *         f0:   bottom limb of initial f\n+ *         g0:   bottom limb of initial g\n+ * Output: t: transition matrix\n+ * Return: final zeta\n+ *\n+ * Implements the divsteps_n_matrix function from the explanation.\n+ */\n+static int32_t secp256k1_modinv32_divsteps_30(int32_t zeta, uint32_t f0, uint32_t g0, secp256k1_modinv32_trans2x2 *t) {\n+    /* u,v,q,r are the elements of the transformation matrix being built up,\n+     * starting with the identity matrix. Semantically they are signed integers\n+     * in range [-2^30,2^30], but here represented as unsigned mod 2^32. This\n+     * permits left shifting (which is UB for negative numbers). The range\n+     * being inside [-2^31,2^31) means that casting to signed works correctly.\n+     */\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 0; i < 30; ++i) {\n+        VERIFY_CHECK((f & 1) == 1); /* f must always be odd */\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+        /* Compute conditional masks for (zeta < 0) and for (g & 1). */\n+        c1 = zeta >> 31;\n+        c2 = -(g & 1);\n+        /* Compute x,y,z, conditionally negated versions of f,u,v. */\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+        /* Conditionally add x,y,z to g,q,r. */\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+        /* In what follows, c1 is a condition mask for (zeta < 0) and (g & 1). */\n+        c1 &= c2;\n+        /* Conditionally change zeta into -zeta-2 or zeta-1. */\n+        zeta = (zeta ^ c1) - 1;\n+        /* Conditionally add g,q,r to f,u,v. */\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+        /* Shifts */\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+        /* Bounds on zeta that follow from the bounds on iteration count (max 20*30 divsteps). */\n+        VERIFY_CHECK(zeta >= -601 && zeta <= 601);\n+    }\n+    /* Return data in t and return value. */\n+    t->u = (int32_t)u;\n+    t->v = (int32_t)v;\n+    t->q = (int32_t)q;\n+    t->r = (int32_t)r;\n+    /* The determinant of t must be a power of two. This guarantees that multiplication with t\n+     * does not change the gcd of f and g, apart from adding a power-of-2 factor to it (which\n+     * will be divided out again). As each divstep's individual matrix has determinant 2, the\n+     * aggregate of 30 of them will have determinant 2^30. */\n+    VERIFY_CHECK((int64_t)t->u * t->r - (int64_t)t->v * t->q == ((int64_t)1) << 30);\n+    return zeta;\n+}\n+\n+/* Compute the transition matrix and eta for 30 divsteps (variable time).\n+ *\n+ * Input:  eta: initial eta\n+ *         f0:  bottom limb of initial f\n+ *         g0:  bottom limb of initial g\n+ * Output: t: transition matrix\n+ * Return: final eta\n+ *\n+ * Implements the divsteps_n_matrix_var function from the explanation.\n+ */\n+static int32_t secp256k1_modinv32_divsteps_30_var(int32_t eta, uint32_t f0, uint32_t g0, secp256k1_modinv32_trans2x2 *t) {\n+    /* inv256[i] = -(2*i+1)^-1 (mod 256) */\n+    static const uint8_t inv256[128] = {\n+        0xFF, 0x55, 0x33, 0x49, 0xC7, 0x5D, 0x3B, 0x11, 0x0F, 0xE5, 0xC3, 0x59,\n+        0xD7, 0xED, 0xCB, 0x21, 0x1F, 0x75, 0x53, 0x69, 0xE7, 0x7D, 0x5B, 0x31,\n+        0x2F, 0x05, 0xE3, 0x79, 0xF7, 0x0D, 0xEB, 0x41, 0x3F, 0x95, 0x73, 0x89,\n+        0x07, 0x9D, 0x7B, 0x51, 0x4F, 0x25, 0x03, 0x99, 0x17, 0x2D, 0x0B, 0x61,\n+        0x5F, 0xB5, 0x93, 0xA9, 0x27, 0xBD, 0x9B, 0x71, 0x6F, 0x45, 0x23, 0xB9,\n+        0x37, 0x4D, 0x2B, 0x81, 0x7F, 0xD5, 0xB3, 0xC9, 0x47, 0xDD, 0xBB, 0x91,\n+        0x8F, 0x65, 0x43, 0xD9, 0x57, 0x6D, 0x4B, 0xA1, 0x9F, 0xF5, 0xD3, 0xE9,\n+        0x67, 0xFD, 0xDB, 0xB1, 0xAF, 0x85, 0x63, 0xF9, 0x77, 0x8D, 0x6B, 0xC1,\n+        0xBF, 0x15, 0xF3, 0x09, 0x87, 0x1D, 0xFB, 0xD1, 0xCF, 0xA5, 0x83, 0x19,\n+        0x97, 0xAD, 0x8B, 0xE1, 0xDF, 0x35, 0x13, 0x29, 0xA7, 0x3D, 0x1B, 0xF1,\n+        0xEF, 0xC5, 0xA3, 0x39, 0xB7, 0xCD, 0xAB, 0x01\n+    };\n+\n+    /* Transformation matrix; see comments in secp256k1_modinv32_divsteps_30. */\n+    uint32_t u = 1, v = 0, q = 0, r = 1;\n+    uint32_t f = f0, g = g0, m;\n+    uint16_t w;\n+    int i = 30, limit, zeros;\n+\n+    for (;;) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        zeros = secp256k1_ctz32_var(g | (UINT32_MAX << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+         /* We're done once we've done 30 divsteps. */\n+        if (i == 0) break;\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (30 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (30 - i));\n+        /* Bounds on eta that follow from the bounds on iteration count (max 25*30 divsteps). */\n+        VERIFY_CHECK(eta >= -751 && eta <= 751);\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            uint32_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+        }\n+        /* eta is now >= 0. In what follows we're going to cancel out the bottom bits of g. No more\n+         * than i can be cancelled out (as we'd be done before that point), and no more than eta+1\n+         * can be done as its sign will flip once that happens. */\n+        limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+        /* m is a mask for the bottom min(limit, 8) bits (our table only supports 8 bits). */\n+        VERIFY_CHECK(limit > 0 && limit <= 30);\n+        m = (UINT32_MAX >> (32 - limit)) & 255U;\n+        /* Find what multiple of f must be added to g to cancel its bottom min(limit, 8) bits. */\n+        w = (g * inv256[(f >> 1) & 127]) & m;\n+        /* Do so. */\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+    /* Return data in t and return value. */\n+    t->u = (int32_t)u;\n+    t->v = (int32_t)v;\n+    t->q = (int32_t)q;\n+    t->r = (int32_t)r;\n+    /* The determinant of t must be a power of two. This guarantees that multiplication with t\n+     * does not change the gcd of f and g, apart from adding a power-of-2 factor to it (which\n+     * will be divided out again). As each divstep's individual matrix has determinant 2, the\n+     * aggregate of 30 of them will have determinant 2^30. */\n+    VERIFY_CHECK((int64_t)t->u * t->r - (int64_t)t->v * t->q == ((int64_t)1) << 30);\n+    return eta;\n+}\n+\n+/* Compute (t/2^30) * [d, e] mod modulus, where t is a transition matrix for 30 divsteps.\n+ *\n+ * On input and output, d and e are in range (-2*modulus,modulus). All output limbs will be in range\n+ * (-2^30,2^30).\n+ *\n+ * This implements the update_de function from the explanation.\n+ */\n+static void secp256k1_modinv32_update_de_30(secp256k1_modinv32_signed30 *d, secp256k1_modinv32_signed30 *e, const secp256k1_modinv32_trans2x2 *t, const secp256k1_modinv32_modinfo* modinfo) {\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t->u, v = t->v, q = t->q, r = t->r;\n+    int32_t di, ei, md, me, sd, se;\n+    int64_t cd, ce;\n+    int i;\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(d, 9, &modinfo->modulus, -2) > 0); /* d > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(d, 9, &modinfo->modulus, 1) < 0);  /* d <    modulus */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(e, 9, &modinfo->modulus, -2) > 0); /* e > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(e, 9, &modinfo->modulus, 1) < 0);  /* e <    modulus */\n+    VERIFY_CHECK((labs(u) + labs(v)) >= 0); /* |u|+|v| doesn't overflow */\n+    VERIFY_CHECK((labs(q) + labs(r)) >= 0); /* |q|+|r| doesn't overflow */\n+    VERIFY_CHECK((labs(u) + labs(v)) <= M30 + 1); /* |u|+|v| <= 2^30 */\n+    VERIFY_CHECK((labs(q) + labs(r)) <= M30 + 1); /* |q|+|r| <= 2^30 */\n+#endif\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    sd = d->v[8] >> 31;\n+    se = e->v[8] >> 31;\n+    md = (u & sd) + (v & se);\n+    me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    di = d->v[0];\n+    ei = e->v[0];\n+    cd = (int64_t)u * di + (int64_t)v * ei;\n+    ce = (int64_t)q * di + (int64_t)r * ei;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has 30 zero bottom bits. */\n+    md -= (modinfo->modulus_inv30 * (uint32_t)cd + md) & M30;\n+    me -= (modinfo->modulus_inv30 * (uint32_t)ce + me) & M30;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd += (int64_t)modinfo->modulus.v[0] * md;\n+    ce += (int64_t)modinfo->modulus.v[0] * me;\n+    /* Verify that the low 30 bits of the computation are indeed zero, and then throw them away. */\n+    VERIFY_CHECK(((int32_t)cd & M30) == 0); cd >>= 30;\n+    VERIFY_CHECK(((int32_t)ce & M30) == 0); ce >>= 30;\n+    /* Now iteratively compute limb i=1..8 of t*[d,e]+modulus*[md,me], and store them in output\n+     * limb i-1 (shifting down by 30 bits). */\n+    for (i = 1; i < 9; ++i) {\n+        di = d->v[i];\n+        ei = e->v[i];\n+        cd += (int64_t)u * di + (int64_t)v * ei;\n+        ce += (int64_t)q * di + (int64_t)r * ei;\n+        cd += (int64_t)modinfo->modulus.v[i] * md;\n+        ce += (int64_t)modinfo->modulus.v[i] * me;\n+        d->v[i - 1] = (int32_t)cd & M30; cd >>= 30;\n+        e->v[i - 1] = (int32_t)ce & M30; ce >>= 30;\n+    }\n+    /* What remains is limb 9 of t*[d,e]+modulus*[md,me]; store it as output limb 8. */\n+    d->v[8] = (int32_t)cd;\n+    e->v[8] = (int32_t)ce;\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(d, 9, &modinfo->modulus, -2) > 0); /* d > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(d, 9, &modinfo->modulus, 1) < 0);  /* d <    modulus */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(e, 9, &modinfo->modulus, -2) > 0); /* e > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(e, 9, &modinfo->modulus, 1) < 0);  /* e <    modulus */\n+#endif\n+}\n+\n+/* Compute (t/2^30) * [f, g], where t is a transition matrix for 30 divsteps.\n+ *\n+ * This implements the update_fg function from the explanation.\n+ */\n+static void secp256k1_modinv32_update_fg_30(secp256k1_modinv32_signed30 *f, secp256k1_modinv32_signed30 *g, const secp256k1_modinv32_trans2x2 *t) {\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t->u, v = t->v, q = t->q, r = t->r;\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+    /* Start computing t*[f,g]. */\n+    fi = f->v[0];\n+    gi = g->v[0];\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+    /* Verify that the bottom 30 bits of the result are zero, and then throw them away. */\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+    /* Now iteratively compute limb i=1..8 of t*[f,g], and store them in output limb i-1 (shifting\n+     * down by 30 bits). */\n+    for (i = 1; i < 9; ++i) {\n+        fi = f->v[i];\n+        gi = g->v[i];\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+        f->v[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g->v[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+    /* What remains is limb 9 of t*[f,g]; store it as output limb 8. */\n+    f->v[8] = (int32_t)cf;\n+    g->v[8] = (int32_t)cg;\n+}\n+\n+/* Compute (t/2^30) * [f, g], where t is a transition matrix for 30 divsteps.\n+ *\n+ * Version that operates on a variable number of limbs in f and g.\n+ *\n+ * This implements the update_fg function from the explanation in modinv64_impl.h.\n+ */\n+static void secp256k1_modinv32_update_fg_30_var(int len, secp256k1_modinv32_signed30 *f, secp256k1_modinv32_signed30 *g, const secp256k1_modinv32_trans2x2 *t) {\n+    const int32_t M30 = (int32_t)(UINT32_MAX >> 2);\n+    const int32_t u = t->u, v = t->v, q = t->q, r = t->r;\n+    int32_t fi, gi;\n+    int64_t cf, cg;\n+    int i;\n+    VERIFY_CHECK(len > 0);\n+    /* Start computing t*[f,g]. */\n+    fi = f->v[0];\n+    gi = g->v[0];\n+    cf = (int64_t)u * fi + (int64_t)v * gi;\n+    cg = (int64_t)q * fi + (int64_t)r * gi;\n+    /* Verify that the bottom 62 bits of the result are zero, and then throw them away. */\n+    VERIFY_CHECK(((int32_t)cf & M30) == 0); cf >>= 30;\n+    VERIFY_CHECK(((int32_t)cg & M30) == 0); cg >>= 30;\n+    /* Now iteratively compute limb i=1..len of t*[f,g], and store them in output limb i-1 (shifting\n+     * down by 30 bits). */\n+    for (i = 1; i < len; ++i) {\n+        fi = f->v[i];\n+        gi = g->v[i];\n+        cf += (int64_t)u * fi + (int64_t)v * gi;\n+        cg += (int64_t)q * fi + (int64_t)r * gi;\n+        f->v[i - 1] = (int32_t)cf & M30; cf >>= 30;\n+        g->v[i - 1] = (int32_t)cg & M30; cg >>= 30;\n+    }\n+    /* What remains is limb (len) of t*[f,g]; store it as output limb (len-1). */\n+    f->v[len - 1] = (int32_t)cf;\n+    g->v[len - 1] = (int32_t)cg;\n+}\n+\n+/* Compute the inverse of x modulo modinfo->modulus, and replace x with it (constant time in x). */\n+static void secp256k1_modinv32(secp256k1_modinv32_signed30 *x, const secp256k1_modinv32_modinfo *modinfo) {\n+    /* Start with d=0, e=1, f=modulus, g=x, zeta=-1. */\n+    secp256k1_modinv32_signed30 d = {{0}};\n+    secp256k1_modinv32_signed30 e = {{1}};\n+    secp256k1_modinv32_signed30 f = modinfo->modulus;\n+    secp256k1_modinv32_signed30 g = *x;\n+    int i;\n+    int32_t zeta = -1; /* zeta = -(delta+1/2); delta is initially 1/2. */\n+\n+    /* Do 20 iterations of 30 divsteps each = 600 divsteps. 590 suffices for 256-bit inputs. */\n+    for (i = 0; i < 20; ++i) {\n+        /* Compute transition matrix and new zeta after 30 divsteps. */\n+        secp256k1_modinv32_trans2x2 t;\n+        zeta = secp256k1_modinv32_divsteps_30(zeta, f.v[0], g.v[0], &t);\n+        /* Update d,e using that transition matrix. */\n+        secp256k1_modinv32_update_de_30(&d, &e, &t, modinfo);\n+        /* Update f,g using that transition matrix. */\n+#ifdef VERIFY\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, 9, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, 9, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, 9, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, 9, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+        secp256k1_modinv32_update_fg_30(&f, &g, &t);\n+#ifdef VERIFY\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, 9, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, 9, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, 9, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, 9, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+#ifdef VERIFY\n+    /* g == 0 */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, 9, &SECP256K1_SIGNED30_ONE, 0) == 0);\n+    /* |f| == 1, or (x == 0 and d == 0 and |f|=modulus) */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, 9, &SECP256K1_SIGNED30_ONE, -1) == 0 ||\n+                 secp256k1_modinv32_mul_cmp_30(&f, 9, &SECP256K1_SIGNED30_ONE, 1) == 0 ||\n+                 (secp256k1_modinv32_mul_cmp_30(x, 9, &SECP256K1_SIGNED30_ONE, 0) == 0 &&\n+                  secp256k1_modinv32_mul_cmp_30(&d, 9, &SECP256K1_SIGNED30_ONE, 0) == 0 &&\n+                  (secp256k1_modinv32_mul_cmp_30(&f, 9, &modinfo->modulus, 1) == 0 ||\n+                   secp256k1_modinv32_mul_cmp_30(&f, 9, &modinfo->modulus, -1) == 0)));\n+#endif\n+\n+    /* Optionally negate d, normalize to [0,modulus), and return it. */\n+    secp256k1_modinv32_normalize_30(&d, f.v[8], modinfo);\n+    *x = d;\n+}\n+\n+/* Compute the inverse of x modulo modinfo->modulus, and replace x with it (variable time). */\n+static void secp256k1_modinv32_var(secp256k1_modinv32_signed30 *x, const secp256k1_modinv32_modinfo *modinfo) {\n+    /* Start with d=0, e=1, f=modulus, g=x, eta=-1. */\n+    secp256k1_modinv32_signed30 d = {{0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+    secp256k1_modinv32_signed30 e = {{1, 0, 0, 0, 0, 0, 0, 0, 0}};\n+    secp256k1_modinv32_signed30 f = modinfo->modulus;\n+    secp256k1_modinv32_signed30 g = *x;\n+#ifdef VERIFY\n+    int i = 0;\n+#endif\n+    int j, len = 9;\n+    int32_t eta = -1; /* eta = -delta; delta is initially 1 (faster for the variable-time code) */\n+    int32_t cond, fn, gn;\n+\n+    /* Do iterations of 30 divsteps each until g=0. */\n+    while (1) {\n+        /* Compute transition matrix and new eta after 30 divsteps. */\n+        secp256k1_modinv32_trans2x2 t;\n+        eta = secp256k1_modinv32_divsteps_30_var(eta, f.v[0], g.v[0], &t);\n+        /* Update d,e using that transition matrix. */\n+        secp256k1_modinv32_update_de_30(&d, &e, &t, modinfo);\n+        /* Update f,g using that transition matrix. */\n+#ifdef VERIFY\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, len, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, len, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, len, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+        secp256k1_modinv32_update_fg_30_var(len, &f, &g, &t);\n+        /* If the bottom limb of g is 0, there is a chance g=0. */\n+        if (g.v[0] == 0) {\n+            cond = 0;\n+            /* Check if all other limbs are also 0. */\n+            for (j = 1; j < len; ++j) {\n+                cond |= g.v[j];\n+            }\n+            /* If so, we're done. */\n+            if (cond == 0) break;\n+        }\n+\n+        /* Determine if len>1 and limb (len-1) of both f and g is 0 or -1. */\n+        fn = f.v[len - 1];\n+        gn = g.v[len - 1];\n+        cond = ((int32_t)len - 2) >> 31;\n+        cond |= fn ^ (fn >> 31);\n+        cond |= gn ^ (gn >> 31);\n+        /* If so, reduce length, propagating the sign of f and g's top limb into the one below. */\n+        if (cond == 0) {\n+            f.v[len - 2] |= (uint32_t)fn << 30;\n+            g.v[len - 2] |= (uint32_t)gn << 30;\n+            --len;\n+        }\n+#ifdef VERIFY\n+        VERIFY_CHECK(++i < 25); /* We should never need more than 25*30 = 750 divsteps */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, len, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, len, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, len, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+    }\n+\n+    /* At this point g is 0 and (if g was not originally 0) f must now equal +/- GCD of\n+     * the initial f, g values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+#ifdef VERIFY\n+    /* g == 0 */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&g, len, &SECP256K1_SIGNED30_ONE, 0) == 0);\n+    /* |f| == 1, or (x == 0 and d == 0 and |f|=modulus) */\n+    VERIFY_CHECK(secp256k1_modinv32_mul_cmp_30(&f, len, &SECP256K1_SIGNED30_ONE, -1) == 0 ||\n+                 secp256k1_modinv32_mul_cmp_30(&f, len, &SECP256K1_SIGNED30_ONE, 1) == 0 ||\n+                 (secp256k1_modinv32_mul_cmp_30(x, 9, &SECP256K1_SIGNED30_ONE, 0) == 0 &&\n+                  secp256k1_modinv32_mul_cmp_30(&d, 9, &SECP256K1_SIGNED30_ONE, 0) == 0 &&\n+                  (secp256k1_modinv32_mul_cmp_30(&f, len, &modinfo->modulus, 1) == 0 ||\n+                   secp256k1_modinv32_mul_cmp_30(&f, len, &modinfo->modulus, -1) == 0)));\n+#endif\n+\n+    /* Optionally negate d, normalize to [0,modulus), and return it. */\n+    secp256k1_modinv32_normalize_30(&d, f.v[len - 1], modinfo);\n+    *x = d;\n+}\n+\n+#endif /* SECP256K1_MODINV32_IMPL_H */"
      },
      {
        "sha": "da506dfa9f722e2bc697209a7aeaf2ec574318b9",
        "filename": "src/secp256k1/src/modinv64.h",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modinv64.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,46 @@\n+/***********************************************************************\n+ * Copyright (c) 2020 Peter Dettman                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODINV64_H\n+#define SECP256K1_MODINV64_H\n+\n+#if defined HAVE_CONFIG_H\n+#include \"libsecp256k1-config.h\"\n+#endif\n+\n+#include \"util.h\"\n+\n+#ifndef SECP256K1_WIDEMUL_INT128\n+#error \"modinv64 requires 128-bit wide multiplication support\"\n+#endif\n+\n+/* A signed 62-bit limb representation of integers.\n+ *\n+ * Its value is sum(v[i] * 2^(62*i), i=0..4). */\n+typedef struct {\n+    int64_t v[5];\n+} secp256k1_modinv64_signed62;\n+\n+typedef struct {\n+    /* The modulus in signed62 notation, must be odd and in [3, 2^256]. */\n+    secp256k1_modinv64_signed62 modulus;\n+\n+    /* modulus^{-1} mod 2^62 */\n+    uint64_t modulus_inv62;\n+} secp256k1_modinv64_modinfo;\n+\n+/* Replace x with its modular inverse mod modinfo->modulus. x must be in range [0, modulus).\n+ * If x is zero, the result will be zero as well. If not, the inverse must exist (i.e., the gcd of\n+ * x and modulus must be 1). These rules are automatically satisfied if the modulus is prime.\n+ *\n+ * On output, all of x's limbs will be in [0, 2^62).\n+ */\n+static void secp256k1_modinv64_var(secp256k1_modinv64_signed62 *x, const secp256k1_modinv64_modinfo *modinfo);\n+\n+/* Same as secp256k1_modinv64_var, but constant time in x (not in the modulus). */\n+static void secp256k1_modinv64(secp256k1_modinv64_signed62 *x, const secp256k1_modinv64_modinfo *modinfo);\n+\n+#endif /* SECP256K1_MODINV64_H */"
      },
      {
        "sha": "0743a9c8210d2d42af3535f9acbe96b5f4a3028d",
        "filename": "src/secp256k1/src/modinv64_impl.h",
        "status": "added",
        "additions": 593,
        "deletions": 0,
        "changes": 593,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv64_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modinv64_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modinv64_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -0,0 +1,593 @@\n+/***********************************************************************\n+ * Copyright (c) 2020 Peter Dettman                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#ifndef SECP256K1_MODINV64_IMPL_H\n+#define SECP256K1_MODINV64_IMPL_H\n+\n+#include \"modinv64.h\"\n+\n+#include \"util.h\"\n+\n+/* This file implements modular inversion based on the paper \"Fast constant-time gcd computation and\n+ * modular inversion\" by Daniel J. Bernstein and Bo-Yin Yang.\n+ *\n+ * For an explanation of the algorithm, see doc/safegcd_implementation.md. This file contains an\n+ * implementation for N=62, using 62-bit signed limbs represented as int64_t.\n+ */\n+\n+#ifdef VERIFY\n+/* Helper function to compute the absolute value of an int64_t.\n+ * (we don't use abs/labs/llabs as it depends on the int sizes). */\n+static int64_t secp256k1_modinv64_abs(int64_t v) {\n+    VERIFY_CHECK(v > INT64_MIN);\n+    if (v < 0) return -v;\n+    return v;\n+}\n+\n+static const secp256k1_modinv64_signed62 SECP256K1_SIGNED62_ONE = {{1}};\n+\n+/* Compute a*factor and put it in r. All but the top limb in r will be in range [0,2^62). */\n+static void secp256k1_modinv64_mul_62(secp256k1_modinv64_signed62 *r, const secp256k1_modinv64_signed62 *a, int alen, int64_t factor) {\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    int128_t c = 0;\n+    int i;\n+    for (i = 0; i < 4; ++i) {\n+        if (i < alen) c += (int128_t)a->v[i] * factor;\n+        r->v[i] = (int64_t)c & M62; c >>= 62;\n+    }\n+    if (4 < alen) c += (int128_t)a->v[4] * factor;\n+    VERIFY_CHECK(c == (int64_t)c);\n+    r->v[4] = (int64_t)c;\n+}\n+\n+/* Return -1 for a<b*factor, 0 for a==b*factor, 1 for a>b*factor. A has alen limbs; b has 5. */\n+static int secp256k1_modinv64_mul_cmp_62(const secp256k1_modinv64_signed62 *a, int alen, const secp256k1_modinv64_signed62 *b, int64_t factor) {\n+    int i;\n+    secp256k1_modinv64_signed62 am, bm;\n+    secp256k1_modinv64_mul_62(&am, a, alen, 1); /* Normalize all but the top limb of a. */\n+    secp256k1_modinv64_mul_62(&bm, b, 5, factor);\n+    for (i = 0; i < 4; ++i) {\n+        /* Verify that all but the top limb of a and b are normalized. */\n+        VERIFY_CHECK(am.v[i] >> 62 == 0);\n+        VERIFY_CHECK(bm.v[i] >> 62 == 0);\n+    }\n+    for (i = 4; i >= 0; --i) {\n+        if (am.v[i] < bm.v[i]) return -1;\n+        if (am.v[i] > bm.v[i]) return 1;\n+    }\n+    return 0;\n+}\n+#endif\n+\n+/* Take as input a signed62 number in range (-2*modulus,modulus), and add a multiple of the modulus\n+ * to it to bring it to range [0,modulus). If sign < 0, the input will also be negated in the\n+ * process. The input must have limbs in range (-2^62,2^62). The output will have limbs in range\n+ * [0,2^62). */\n+static void secp256k1_modinv64_normalize_62(secp256k1_modinv64_signed62 *r, int64_t sign, const secp256k1_modinv64_modinfo *modinfo) {\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    int64_t r0 = r->v[0], r1 = r->v[1], r2 = r->v[2], r3 = r->v[3], r4 = r->v[4];\n+    int64_t cond_add, cond_negate;\n+\n+#ifdef VERIFY\n+    /* Verify that all limbs are in range (-2^62,2^62). */\n+    int i;\n+    for (i = 0; i < 5; ++i) {\n+        VERIFY_CHECK(r->v[i] >= -M62);\n+        VERIFY_CHECK(r->v[i] <= M62);\n+    }\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, -2) > 0); /* r > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, 1) < 0); /* r < modulus */\n+#endif\n+\n+    /* In a first step, add the modulus if the input is negative, and then negate if requested.\n+     * This brings r from range (-2*modulus,modulus) to range (-modulus,modulus). As all input\n+     * limbs are in range (-2^62,2^62), this cannot overflow an int64_t. Note that the right\n+     * shifts below are signed sign-extending shifts (see assumptions.h for tests that that is\n+     * indeed the behavior of the right shift operator). */\n+    cond_add = r4 >> 63;\n+    r0 += modinfo->modulus.v[0] & cond_add;\n+    r1 += modinfo->modulus.v[1] & cond_add;\n+    r2 += modinfo->modulus.v[2] & cond_add;\n+    r3 += modinfo->modulus.v[3] & cond_add;\n+    r4 += modinfo->modulus.v[4] & cond_add;\n+    cond_negate = sign >> 63;\n+    r0 = (r0 ^ cond_negate) - cond_negate;\n+    r1 = (r1 ^ cond_negate) - cond_negate;\n+    r2 = (r2 ^ cond_negate) - cond_negate;\n+    r3 = (r3 ^ cond_negate) - cond_negate;\n+    r4 = (r4 ^ cond_negate) - cond_negate;\n+    /* Propagate the top bits, to bring limbs back to range (-2^62,2^62). */\n+    r1 += r0 >> 62; r0 &= M62;\n+    r2 += r1 >> 62; r1 &= M62;\n+    r3 += r2 >> 62; r2 &= M62;\n+    r4 += r3 >> 62; r3 &= M62;\n+\n+    /* In a second step add the modulus again if the result is still negative, bringing\n+     * r to range [0,modulus). */\n+    cond_add = r4 >> 63;\n+    r0 += modinfo->modulus.v[0] & cond_add;\n+    r1 += modinfo->modulus.v[1] & cond_add;\n+    r2 += modinfo->modulus.v[2] & cond_add;\n+    r3 += modinfo->modulus.v[3] & cond_add;\n+    r4 += modinfo->modulus.v[4] & cond_add;\n+    /* And propagate again. */\n+    r1 += r0 >> 62; r0 &= M62;\n+    r2 += r1 >> 62; r1 &= M62;\n+    r3 += r2 >> 62; r2 &= M62;\n+    r4 += r3 >> 62; r3 &= M62;\n+\n+    r->v[0] = r0;\n+    r->v[1] = r1;\n+    r->v[2] = r2;\n+    r->v[3] = r3;\n+    r->v[4] = r4;\n+\n+#ifdef VERIFY\n+    VERIFY_CHECK(r0 >> 62 == 0);\n+    VERIFY_CHECK(r1 >> 62 == 0);\n+    VERIFY_CHECK(r2 >> 62 == 0);\n+    VERIFY_CHECK(r3 >> 62 == 0);\n+    VERIFY_CHECK(r4 >> 62 == 0);\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, 0) >= 0); /* r >= 0 */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, 1) < 0); /* r < modulus */\n+#endif\n+}\n+\n+/* Data type for transition matrices (see section 3 of explanation).\n+ *\n+ * t = [ u  v ]\n+ *     [ q  r ]\n+ */\n+typedef struct {\n+    int64_t u, v, q, r;\n+} secp256k1_modinv64_trans2x2;\n+\n+/* Compute the transition matrix and eta for 59 divsteps (where zeta=-(delta+1/2)).\n+ * Note that the transformation matrix is scaled by 2^62 and not 2^59.\n+ *\n+ * Input:  zeta: initial zeta\n+ *         f0:   bottom limb of initial f\n+ *         g0:   bottom limb of initial g\n+ * Output: t: transition matrix\n+ * Return: final zeta\n+ *\n+ * Implements the divsteps_n_matrix function from the explanation.\n+ */\n+static int64_t secp256k1_modinv64_divsteps_59(int64_t zeta, uint64_t f0, uint64_t g0, secp256k1_modinv64_trans2x2 *t) {\n+    /* u,v,q,r are the elements of the transformation matrix being built up,\n+     * starting with the identity matrix times 8 (because the caller expects\n+     * a result scaled by 2^62). Semantically they are signed integers\n+     * in range [-2^62,2^62], but here represented as unsigned mod 2^64. This\n+     * permits left shifting (which is UB for negative numbers). The range\n+     * being inside [-2^63,2^63) means that casting to signed works correctly.\n+     */\n+    uint64_t u = 8, v = 0, q = 0, r = 8;\n+    uint64_t c1, c2, f = f0, g = g0, x, y, z;\n+    int i;\n+\n+    for (i = 3; i < 62; ++i) {\n+        VERIFY_CHECK((f & 1) == 1); /* f must always be odd */\n+        VERIFY_CHECK((u * f0 + v * g0) == f << i);\n+        VERIFY_CHECK((q * f0 + r * g0) == g << i);\n+        /* Compute conditional masks for (zeta < 0) and for (g & 1). */\n+        c1 = zeta >> 63;\n+        c2 = -(g & 1);\n+        /* Compute x,y,z, conditionally negated versions of f,u,v. */\n+        x = (f ^ c1) - c1;\n+        y = (u ^ c1) - c1;\n+        z = (v ^ c1) - c1;\n+        /* Conditionally add x,y,z to g,q,r. */\n+        g += x & c2;\n+        q += y & c2;\n+        r += z & c2;\n+        /* In what follows, c1 is a condition mask for (zeta < 0) and (g & 1). */\n+        c1 &= c2;\n+        /* Conditionally change zeta into -zeta-2 or zeta-1. */\n+        zeta = (zeta ^ c1) - 1;\n+        /* Conditionally add g,q,r to f,u,v. */\n+        f += g & c1;\n+        u += q & c1;\n+        v += r & c1;\n+        /* Shifts */\n+        g >>= 1;\n+        u <<= 1;\n+        v <<= 1;\n+        /* Bounds on zeta that follow from the bounds on iteration count (max 10*59 divsteps). */\n+        VERIFY_CHECK(zeta >= -591 && zeta <= 591);\n+    }\n+    /* Return data in t and return value. */\n+    t->u = (int64_t)u;\n+    t->v = (int64_t)v;\n+    t->q = (int64_t)q;\n+    t->r = (int64_t)r;\n+    /* The determinant of t must be a power of two. This guarantees that multiplication with t\n+     * does not change the gcd of f and g, apart from adding a power-of-2 factor to it (which\n+     * will be divided out again). As each divstep's individual matrix has determinant 2, the\n+     * aggregate of 59 of them will have determinant 2^59. Multiplying with the initial\n+     * 8*identity (which has determinant 2^6) means the overall outputs has determinant\n+     * 2^65. */\n+    VERIFY_CHECK((int128_t)t->u * t->r - (int128_t)t->v * t->q == ((int128_t)1) << 65);\n+    return zeta;\n+}\n+\n+/* Compute the transition matrix and eta for 62 divsteps (variable time, eta=-delta).\n+ *\n+ * Input:  eta: initial eta\n+ *         f0:  bottom limb of initial f\n+ *         g0:  bottom limb of initial g\n+ * Output: t: transition matrix\n+ * Return: final eta\n+ *\n+ * Implements the divsteps_n_matrix_var function from the explanation.\n+ */\n+static int64_t secp256k1_modinv64_divsteps_62_var(int64_t eta, uint64_t f0, uint64_t g0, secp256k1_modinv64_trans2x2 *t) {\n+    /* Transformation matrix; see comments in secp256k1_modinv64_divsteps_62. */\n+    uint64_t u = 1, v = 0, q = 0, r = 1;\n+    uint64_t f = f0, g = g0, m;\n+    uint32_t w;\n+    int i = 62, limit, zeros;\n+\n+    for (;;) {\n+        /* Use a sentinel bit to count zeros only up to i. */\n+        zeros = secp256k1_ctz64_var(g | (UINT64_MAX << i));\n+        /* Perform zeros divsteps at once; they all just divide g by two. */\n+        g >>= zeros;\n+        u <<= zeros;\n+        v <<= zeros;\n+        eta -= zeros;\n+        i -= zeros;\n+        /* We're done once we've done 62 divsteps. */\n+        if (i == 0) break;\n+        VERIFY_CHECK((f & 1) == 1);\n+        VERIFY_CHECK((g & 1) == 1);\n+        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));\n+        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));\n+        /* Bounds on eta that follow from the bounds on iteration count (max 12*62 divsteps). */\n+        VERIFY_CHECK(eta >= -745 && eta <= 745);\n+        /* If eta is negative, negate it and replace f,g with g,-f. */\n+        if (eta < 0) {\n+            uint64_t tmp;\n+            eta = -eta;\n+            tmp = f; f = g; g = -tmp;\n+            tmp = u; u = q; q = -tmp;\n+            tmp = v; v = r; r = -tmp;\n+            /* Use a formula to cancel out up to 6 bits of g. Also, no more than i can be cancelled\n+             * out (as we'd be done before that point), and no more than eta+1 can be done as its\n+             * will flip again once that happens. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            VERIFY_CHECK(limit > 0 && limit <= 62);\n+            /* m is a mask for the bottom min(limit, 6) bits. */\n+            m = (UINT64_MAX >> (64 - limit)) & 63U;\n+            /* Find what multiple of f must be added to g to cancel its bottom min(limit, 6)\n+             * bits. */\n+            w = (f * g * (f * f - 2)) & m;\n+        } else {\n+            /* In this branch, use a simpler formula that only lets us cancel up to 4 bits of g, as\n+             * eta tends to be smaller here. */\n+            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);\n+            VERIFY_CHECK(limit > 0 && limit <= 62);\n+            /* m is a mask for the bottom min(limit, 4) bits. */\n+            m = (UINT64_MAX >> (64 - limit)) & 15U;\n+            /* Find what multiple of f must be added to g to cancel its bottom min(limit, 4)\n+             * bits. */\n+            w = f + (((f + 1) & 4) << 1);\n+            w = (-w * g) & m;\n+        }\n+        g += f * w;\n+        q += u * w;\n+        r += v * w;\n+        VERIFY_CHECK((g & m) == 0);\n+    }\n+    /* Return data in t and return value. */\n+    t->u = (int64_t)u;\n+    t->v = (int64_t)v;\n+    t->q = (int64_t)q;\n+    t->r = (int64_t)r;\n+    /* The determinant of t must be a power of two. This guarantees that multiplication with t\n+     * does not change the gcd of f and g, apart from adding a power-of-2 factor to it (which\n+     * will be divided out again). As each divstep's individual matrix has determinant 2, the\n+     * aggregate of 62 of them will have determinant 2^62. */\n+    VERIFY_CHECK((int128_t)t->u * t->r - (int128_t)t->v * t->q == ((int128_t)1) << 62);\n+    return eta;\n+}\n+\n+/* Compute (t/2^62) * [d, e] mod modulus, where t is a transition matrix scaled by 2^62.\n+ *\n+ * On input and output, d and e are in range (-2*modulus,modulus). All output limbs will be in range\n+ * (-2^62,2^62).\n+ *\n+ * This implements the update_de function from the explanation.\n+ */\n+static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp256k1_modinv64_signed62 *e, const secp256k1_modinv64_trans2x2 *t, const secp256k1_modinv64_modinfo* modinfo) {\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t d0 = d->v[0], d1 = d->v[1], d2 = d->v[2], d3 = d->v[3], d4 = d->v[4];\n+    const int64_t e0 = e->v[0], e1 = e->v[1], e2 = e->v[2], e3 = e->v[3], e4 = e->v[4];\n+    const int64_t u = t->u, v = t->v, q = t->q, r = t->r;\n+    int64_t md, me, sd, se;\n+    int128_t cd, ce;\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, -2) > 0); /* d > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, 1) < 0);  /* d <    modulus */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, -2) > 0); /* e > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, 1) < 0);  /* e <    modulus */\n+    VERIFY_CHECK((secp256k1_modinv64_abs(u) + secp256k1_modinv64_abs(v)) >= 0); /* |u|+|v| doesn't overflow */\n+    VERIFY_CHECK((secp256k1_modinv64_abs(q) + secp256k1_modinv64_abs(r)) >= 0); /* |q|+|r| doesn't overflow */\n+    VERIFY_CHECK((secp256k1_modinv64_abs(u) + secp256k1_modinv64_abs(v)) <= M62 + 1); /* |u|+|v| <= 2^62 */\n+    VERIFY_CHECK((secp256k1_modinv64_abs(q) + secp256k1_modinv64_abs(r)) <= M62 + 1); /* |q|+|r| <= 2^62 */\n+#endif\n+    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */\n+    sd = d4 >> 63;\n+    se = e4 >> 63;\n+    md = (u & sd) + (v & se);\n+    me = (q & sd) + (r & se);\n+    /* Begin computing t*[d,e]. */\n+    cd = (int128_t)u * d0 + (int128_t)v * e0;\n+    ce = (int128_t)q * d0 + (int128_t)r * e0;\n+    /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */\n+    md -= (modinfo->modulus_inv62 * (uint64_t)cd + md) & M62;\n+    me -= (modinfo->modulus_inv62 * (uint64_t)ce + me) & M62;\n+    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */\n+    cd += (int128_t)modinfo->modulus.v[0] * md;\n+    ce += (int128_t)modinfo->modulus.v[0] * me;\n+    /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */\n+    VERIFY_CHECK(((int64_t)cd & M62) == 0); cd >>= 62;\n+    VERIFY_CHECK(((int64_t)ce & M62) == 0); ce >>= 62;\n+    /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */\n+    cd += (int128_t)u * d1 + (int128_t)v * e1;\n+    ce += (int128_t)q * d1 + (int128_t)r * e1;\n+    if (modinfo->modulus.v[1]) { /* Optimize for the case where limb of modulus is zero. */\n+        cd += (int128_t)modinfo->modulus.v[1] * md;\n+        ce += (int128_t)modinfo->modulus.v[1] * me;\n+    }\n+    d->v[0] = (int64_t)cd & M62; cd >>= 62;\n+    e->v[0] = (int64_t)ce & M62; ce >>= 62;\n+    /* Compute limb 2 of t*[d,e]+modulus*[md,me], and store it as output limb 1. */\n+    cd += (int128_t)u * d2 + (int128_t)v * e2;\n+    ce += (int128_t)q * d2 + (int128_t)r * e2;\n+    if (modinfo->modulus.v[2]) { /* Optimize for the case where limb of modulus is zero. */\n+        cd += (int128_t)modinfo->modulus.v[2] * md;\n+        ce += (int128_t)modinfo->modulus.v[2] * me;\n+    }\n+    d->v[1] = (int64_t)cd & M62; cd >>= 62;\n+    e->v[1] = (int64_t)ce & M62; ce >>= 62;\n+    /* Compute limb 3 of t*[d,e]+modulus*[md,me], and store it as output limb 2. */\n+    cd += (int128_t)u * d3 + (int128_t)v * e3;\n+    ce += (int128_t)q * d3 + (int128_t)r * e3;\n+    if (modinfo->modulus.v[3]) { /* Optimize for the case where limb of modulus is zero. */\n+        cd += (int128_t)modinfo->modulus.v[3] * md;\n+        ce += (int128_t)modinfo->modulus.v[3] * me;\n+    }\n+    d->v[2] = (int64_t)cd & M62; cd >>= 62;\n+    e->v[2] = (int64_t)ce & M62; ce >>= 62;\n+    /* Compute limb 4 of t*[d,e]+modulus*[md,me], and store it as output limb 3. */\n+    cd += (int128_t)u * d4 + (int128_t)v * e4;\n+    ce += (int128_t)q * d4 + (int128_t)r * e4;\n+    cd += (int128_t)modinfo->modulus.v[4] * md;\n+    ce += (int128_t)modinfo->modulus.v[4] * me;\n+    d->v[3] = (int64_t)cd & M62; cd >>= 62;\n+    e->v[3] = (int64_t)ce & M62; ce >>= 62;\n+    /* What remains is limb 5 of t*[d,e]+modulus*[md,me]; store it as output limb 4. */\n+    d->v[4] = (int64_t)cd;\n+    e->v[4] = (int64_t)ce;\n+#ifdef VERIFY\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, -2) > 0); /* d > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, 1) < 0);  /* d <    modulus */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, -2) > 0); /* e > -2*modulus */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, 1) < 0);  /* e <    modulus */\n+#endif\n+}\n+\n+/* Compute (t/2^62) * [f, g], where t is a transition matrix scaled by 2^62.\n+ *\n+ * This implements the update_fg function from the explanation.\n+ */\n+static void secp256k1_modinv64_update_fg_62(secp256k1_modinv64_signed62 *f, secp256k1_modinv64_signed62 *g, const secp256k1_modinv64_trans2x2 *t) {\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t f0 = f->v[0], f1 = f->v[1], f2 = f->v[2], f3 = f->v[3], f4 = f->v[4];\n+    const int64_t g0 = g->v[0], g1 = g->v[1], g2 = g->v[2], g3 = g->v[3], g4 = g->v[4];\n+    const int64_t u = t->u, v = t->v, q = t->q, r = t->r;\n+    int128_t cf, cg;\n+    /* Start computing t*[f,g]. */\n+    cf = (int128_t)u * f0 + (int128_t)v * g0;\n+    cg = (int128_t)q * f0 + (int128_t)r * g0;\n+    /* Verify that the bottom 62 bits of the result are zero, and then throw them away. */\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+    /* Compute limb 1 of t*[f,g], and store it as output limb 0 (= down shift). */\n+    cf += (int128_t)u * f1 + (int128_t)v * g1;\n+    cg += (int128_t)q * f1 + (int128_t)r * g1;\n+    f->v[0] = (int64_t)cf & M62; cf >>= 62;\n+    g->v[0] = (int64_t)cg & M62; cg >>= 62;\n+    /* Compute limb 2 of t*[f,g], and store it as output limb 1. */\n+    cf += (int128_t)u * f2 + (int128_t)v * g2;\n+    cg += (int128_t)q * f2 + (int128_t)r * g2;\n+    f->v[1] = (int64_t)cf & M62; cf >>= 62;\n+    g->v[1] = (int64_t)cg & M62; cg >>= 62;\n+    /* Compute limb 3 of t*[f,g], and store it as output limb 2. */\n+    cf += (int128_t)u * f3 + (int128_t)v * g3;\n+    cg += (int128_t)q * f3 + (int128_t)r * g3;\n+    f->v[2] = (int64_t)cf & M62; cf >>= 62;\n+    g->v[2] = (int64_t)cg & M62; cg >>= 62;\n+    /* Compute limb 4 of t*[f,g], and store it as output limb 3. */\n+    cf += (int128_t)u * f4 + (int128_t)v * g4;\n+    cg += (int128_t)q * f4 + (int128_t)r * g4;\n+    f->v[3] = (int64_t)cf & M62; cf >>= 62;\n+    g->v[3] = (int64_t)cg & M62; cg >>= 62;\n+    /* What remains is limb 5 of t*[f,g]; store it as output limb 4. */\n+    f->v[4] = (int64_t)cf;\n+    g->v[4] = (int64_t)cg;\n+}\n+\n+/* Compute (t/2^62) * [f, g], where t is a transition matrix for 62 divsteps.\n+ *\n+ * Version that operates on a variable number of limbs in f and g.\n+ *\n+ * This implements the update_fg function from the explanation.\n+ */\n+static void secp256k1_modinv64_update_fg_62_var(int len, secp256k1_modinv64_signed62 *f, secp256k1_modinv64_signed62 *g, const secp256k1_modinv64_trans2x2 *t) {\n+    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);\n+    const int64_t u = t->u, v = t->v, q = t->q, r = t->r;\n+    int64_t fi, gi;\n+    int128_t cf, cg;\n+    int i;\n+    VERIFY_CHECK(len > 0);\n+    /* Start computing t*[f,g]. */\n+    fi = f->v[0];\n+    gi = g->v[0];\n+    cf = (int128_t)u * fi + (int128_t)v * gi;\n+    cg = (int128_t)q * fi + (int128_t)r * gi;\n+    /* Verify that the bottom 62 bits of the result are zero, and then throw them away. */\n+    VERIFY_CHECK(((int64_t)cf & M62) == 0); cf >>= 62;\n+    VERIFY_CHECK(((int64_t)cg & M62) == 0); cg >>= 62;\n+    /* Now iteratively compute limb i=1..len of t*[f,g], and store them in output limb i-1 (shifting\n+     * down by 62 bits). */\n+    for (i = 1; i < len; ++i) {\n+        fi = f->v[i];\n+        gi = g->v[i];\n+        cf += (int128_t)u * fi + (int128_t)v * gi;\n+        cg += (int128_t)q * fi + (int128_t)r * gi;\n+        f->v[i - 1] = (int64_t)cf & M62; cf >>= 62;\n+        g->v[i - 1] = (int64_t)cg & M62; cg >>= 62;\n+    }\n+    /* What remains is limb (len) of t*[f,g]; store it as output limb (len-1). */\n+    f->v[len - 1] = (int64_t)cf;\n+    g->v[len - 1] = (int64_t)cg;\n+}\n+\n+/* Compute the inverse of x modulo modinfo->modulus, and replace x with it (constant time in x). */\n+static void secp256k1_modinv64(secp256k1_modinv64_signed62 *x, const secp256k1_modinv64_modinfo *modinfo) {\n+    /* Start with d=0, e=1, f=modulus, g=x, zeta=-1. */\n+    secp256k1_modinv64_signed62 d = {{0, 0, 0, 0, 0}};\n+    secp256k1_modinv64_signed62 e = {{1, 0, 0, 0, 0}};\n+    secp256k1_modinv64_signed62 f = modinfo->modulus;\n+    secp256k1_modinv64_signed62 g = *x;\n+    int i;\n+    int64_t zeta = -1; /* zeta = -(delta+1/2); delta starts at 1/2. */\n+\n+    /* Do 10 iterations of 59 divsteps each = 590 divsteps. This suffices for 256-bit inputs. */\n+    for (i = 0; i < 10; ++i) {\n+        /* Compute transition matrix and new zeta after 59 divsteps. */\n+        secp256k1_modinv64_trans2x2 t;\n+        zeta = secp256k1_modinv64_divsteps_59(zeta, f.v[0], g.v[0], &t);\n+        /* Update d,e using that transition matrix. */\n+        secp256k1_modinv64_update_de_62(&d, &e, &t, modinfo);\n+        /* Update f,g using that transition matrix. */\n+#ifdef VERIFY\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+        secp256k1_modinv64_update_fg_62(&f, &g, &t);\n+#ifdef VERIFY\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+    }\n+\n+    /* At this point sufficient iterations have been performed that g must have reached 0\n+     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g\n+     * values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+#ifdef VERIFY\n+    /* g == 0 */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &SECP256K1_SIGNED62_ONE, 0) == 0);\n+    /* |f| == 1, or (x == 0 and d == 0 and |f|=modulus) */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &SECP256K1_SIGNED62_ONE, -1) == 0 ||\n+                 secp256k1_modinv64_mul_cmp_62(&f, 5, &SECP256K1_SIGNED62_ONE, 1) == 0 ||\n+                 (secp256k1_modinv64_mul_cmp_62(x, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&\n+                  secp256k1_modinv64_mul_cmp_62(&d, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&\n+                  (secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, 1) == 0 ||\n+                   secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, -1) == 0)));\n+#endif\n+\n+    /* Optionally negate d, normalize to [0,modulus), and return it. */\n+    secp256k1_modinv64_normalize_62(&d, f.v[4], modinfo);\n+    *x = d;\n+}\n+\n+/* Compute the inverse of x modulo modinfo->modulus, and replace x with it (variable time). */\n+static void secp256k1_modinv64_var(secp256k1_modinv64_signed62 *x, const secp256k1_modinv64_modinfo *modinfo) {\n+    /* Start with d=0, e=1, f=modulus, g=x, eta=-1. */\n+    secp256k1_modinv64_signed62 d = {{0, 0, 0, 0, 0}};\n+    secp256k1_modinv64_signed62 e = {{1, 0, 0, 0, 0}};\n+    secp256k1_modinv64_signed62 f = modinfo->modulus;\n+    secp256k1_modinv64_signed62 g = *x;\n+#ifdef VERIFY\n+    int i = 0;\n+#endif\n+    int j, len = 5;\n+    int64_t eta = -1; /* eta = -delta; delta is initially 1 */\n+    int64_t cond, fn, gn;\n+\n+    /* Do iterations of 62 divsteps each until g=0. */\n+    while (1) {\n+        /* Compute transition matrix and new eta after 62 divsteps. */\n+        secp256k1_modinv64_trans2x2 t;\n+        eta = secp256k1_modinv64_divsteps_62_var(eta, f.v[0], g.v[0], &t);\n+        /* Update d,e using that transition matrix. */\n+        secp256k1_modinv64_update_de_62(&d, &e, &t, modinfo);\n+        /* Update f,g using that transition matrix. */\n+#ifdef VERIFY\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+        secp256k1_modinv64_update_fg_62_var(len, &f, &g, &t);\n+        /* If the bottom limb of g is zero, there is a chance that g=0. */\n+        if (g.v[0] == 0) {\n+            cond = 0;\n+            /* Check if the other limbs are also 0. */\n+            for (j = 1; j < len; ++j) {\n+                cond |= g.v[j];\n+            }\n+            /* If so, we're done. */\n+            if (cond == 0) break;\n+        }\n+\n+        /* Determine if len>1 and limb (len-1) of both f and g is 0 or -1. */\n+        fn = f.v[len - 1];\n+        gn = g.v[len - 1];\n+        cond = ((int64_t)len - 2) >> 63;\n+        cond |= fn ^ (fn >> 63);\n+        cond |= gn ^ (gn >> 63);\n+        /* If so, reduce length, propagating the sign of f and g's top limb into the one below. */\n+        if (cond == 0) {\n+            f.v[len - 2] |= (uint64_t)fn << 62;\n+            g.v[len - 2] |= (uint64_t)gn << 62;\n+            --len;\n+        }\n+#ifdef VERIFY\n+        VERIFY_CHECK(++i < 12); /* We should never need more than 12*62 = 744 divsteps */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, -1) > 0); /* f > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, -1) > 0); /* g > -modulus */\n+        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 1) < 0);  /* g <  modulus */\n+#endif\n+    }\n+\n+    /* At this point g is 0 and (if g was not originally 0) f must now equal +/- GCD of\n+     * the initial f, g values i.e. +/- 1, and d now contains +/- the modular inverse. */\n+#ifdef VERIFY\n+    /* g == 0 */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &SECP256K1_SIGNED62_ONE, 0) == 0);\n+    /* |f| == 1, or (x == 0 and d == 0 and |f|=modulus) */\n+    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &SECP256K1_SIGNED62_ONE, -1) == 0 ||\n+                 secp256k1_modinv64_mul_cmp_62(&f, len, &SECP256K1_SIGNED62_ONE, 1) == 0 ||\n+                 (secp256k1_modinv64_mul_cmp_62(x, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&\n+                  secp256k1_modinv64_mul_cmp_62(&d, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&\n+                  (secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) == 0 ||\n+                   secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, -1) == 0)));\n+#endif\n+\n+    /* Optionally negate d, normalize to [0,modulus), and return it. */\n+    secp256k1_modinv64_normalize_62(&d, f.v[len - 1], modinfo);\n+    *x = d;\n+}\n+\n+#endif /* SECP256K1_MODINV64_IMPL_H */"
      },
      {
        "sha": "1ac67086beccac5d2e28f74f747d37f483492dc9",
        "filename": "src/secp256k1/src/modules/ecdh/main_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/ecdh/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/ecdh/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/main_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2015 Andrew Poelstra                                 *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2015 Andrew Poelstra                                  *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_MODULE_ECDH_MAIN_H\n #define SECP256K1_MODULE_ECDH_MAIN_H"
      },
      {
        "sha": "be07447a4b9957347f6b9661675590b8dc99158c",
        "filename": "src/secp256k1/src/modules/ecdh/tests_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/ecdh/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/ecdh/tests_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2015 Andrew Poelstra                                 *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2015 Andrew Poelstra                                  *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_MODULE_ECDH_TESTS_H\n #define SECP256K1_MODULE_ECDH_TESTS_H"
      },
      {
        "sha": "7390b227182fe33181d111b580be47100d5558eb",
        "filename": "src/secp256k1/src/modules/extrakeys/main_impl.h",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/extrakeys/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/extrakeys/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/extrakeys/main_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,11 +1,11 @@\n-/**********************************************************************\n- * Copyright (c) 2020 Jonas Nick                                      *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2020 Jonas Nick                                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_EXTRAKEYS_MAIN_\n-#define _SECP256K1_MODULE_EXTRAKEYS_MAIN_\n+#ifndef SECP256K1_MODULE_EXTRAKEYS_MAIN_H\n+#define SECP256K1_MODULE_EXTRAKEYS_MAIN_H\n \n #include \"include/secp256k1.h\"\n #include \"include/secp256k1_extrakeys.h\"\n@@ -180,12 +180,22 @@ int secp256k1_keypair_create(const secp256k1_context* ctx, secp256k1_keypair *ke\n \n     ret = secp256k1_ec_pubkey_create_helper(&ctx->ecmult_gen_ctx, &sk, &pk, seckey32);\n     secp256k1_keypair_save(keypair, &sk, &pk);\n-    memczero(keypair, sizeof(*keypair), !ret);\n+    secp256k1_memczero(keypair, sizeof(*keypair), !ret);\n \n     secp256k1_scalar_clear(&sk);\n     return ret;\n }\n \n+int secp256k1_keypair_sec(const secp256k1_context* ctx, unsigned char *seckey, const secp256k1_keypair *keypair) {\n+    VERIFY_CHECK(ctx != NULL);\n+    ARG_CHECK(seckey != NULL);\n+    memset(seckey, 0, 32);\n+    ARG_CHECK(keypair != NULL);\n+\n+    memcpy(seckey, &keypair->data[0], 32);\n+    return 1;\n+}\n+\n int secp256k1_keypair_pub(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_keypair *keypair) {\n     VERIFY_CHECK(ctx != NULL);\n     ARG_CHECK(pubkey != NULL);"
      },
      {
        "sha": "0aca4fb72d781095c243401bda4a4e70c83afcfb",
        "filename": "src/secp256k1/src/modules/extrakeys/tests_exhaustive_impl.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/extrakeys/tests_exhaustive_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/extrakeys/tests_exhaustive_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/extrakeys/tests_exhaustive_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,11 +1,11 @@\n-/**********************************************************************\n- * Copyright (c) 2020 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2020 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_EXTRAKEYS_TESTS_EXHAUSTIVE_\n-#define _SECP256K1_MODULE_EXTRAKEYS_TESTS_EXHAUSTIVE_\n+#ifndef SECP256K1_MODULE_EXTRAKEYS_TESTS_EXHAUSTIVE_H\n+#define SECP256K1_MODULE_EXTRAKEYS_TESTS_EXHAUSTIVE_H\n \n #include \"src/modules/extrakeys/main_impl.h\"\n #include \"include/secp256k1_extrakeys.h\""
      },
      {
        "sha": "9473a7dd4852e66f2ad7b30adbc10b41fabb4bb1",
        "filename": "src/secp256k1/src/modules/extrakeys/tests_impl.h",
        "status": "modified",
        "additions": 33,
        "deletions": 8,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/extrakeys/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/extrakeys/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/extrakeys/tests_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,11 +1,11 @@\n-/**********************************************************************\n- * Copyright (c) 2020 Jonas Nick                                      *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2020 Jonas Nick                                       *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_EXTRAKEYS_TESTS_\n-#define _SECP256K1_MODULE_EXTRAKEYS_TESTS_\n+#ifndef SECP256K1_MODULE_EXTRAKEYS_TESTS_H\n+#define SECP256K1_MODULE_EXTRAKEYS_TESTS_H\n \n #include \"secp256k1_extrakeys.h\"\n \n@@ -311,6 +311,7 @@ void test_xonly_pubkey_tweak_recursive(void) {\n \n void test_keypair(void) {\n     unsigned char sk[32];\n+    unsigned char sk_tmp[32];\n     unsigned char zeros96[96] = { 0 };\n     unsigned char overflows[32];\n     secp256k1_keypair keypair;\n@@ -396,6 +397,28 @@ void test_keypair(void) {\n     CHECK(secp256k1_memcmp_var(&xonly_pk, &xonly_pk_tmp, sizeof(pk)) == 0);\n     CHECK(pk_parity == pk_parity_tmp);\n \n+    /* Test keypair_seckey */\n+    ecount = 0;\n+    secp256k1_testrand256(sk);\n+    CHECK(secp256k1_keypair_create(ctx, &keypair, sk) == 1);\n+    CHECK(secp256k1_keypair_sec(none, sk_tmp, &keypair) == 1);\n+    CHECK(secp256k1_keypair_sec(none, NULL, &keypair) == 0);\n+    CHECK(ecount == 1);\n+    CHECK(secp256k1_keypair_sec(none, sk_tmp, NULL) == 0);\n+    CHECK(ecount == 2);\n+    CHECK(secp256k1_memcmp_var(zeros96, sk_tmp, sizeof(sk_tmp)) == 0);\n+\n+    /* keypair returns the same seckey it got */\n+    CHECK(secp256k1_keypair_create(sign, &keypair, sk) == 1);\n+    CHECK(secp256k1_keypair_sec(none, sk_tmp, &keypair) == 1);\n+    CHECK(secp256k1_memcmp_var(sk, sk_tmp, sizeof(sk_tmp)) == 0);\n+\n+\n+    /* Using an invalid keypair is fine for keypair_seckey */\n+    memset(&keypair, 0, sizeof(keypair));\n+    CHECK(secp256k1_keypair_sec(none, sk_tmp, &keypair) == 1);\n+    CHECK(secp256k1_memcmp_var(zeros96, sk_tmp, sizeof(sk_tmp)) == 0);\n+\n     secp256k1_context_destroy(none);\n     secp256k1_context_destroy(sign);\n     secp256k1_context_destroy(verify);\n@@ -484,6 +507,7 @@ void test_keypair_add(void) {\n         secp256k1_pubkey output_pk_xy;\n         secp256k1_pubkey output_pk_expected;\n         unsigned char pk32[32];\n+        unsigned char sk32[32];\n         int pk_parity;\n \n         secp256k1_testrand256(tweak);\n@@ -501,7 +525,8 @@ void test_keypair_add(void) {\n         CHECK(secp256k1_memcmp_var(&output_pk_xy, &output_pk_expected, sizeof(output_pk_xy)) == 0);\n \n         /* Check that the secret key in the keypair is tweaked correctly */\n-        CHECK(secp256k1_ec_pubkey_create(ctx, &output_pk_expected, &keypair.data[0]) == 1);\n+        CHECK(secp256k1_keypair_sec(none, sk32, &keypair) == 1);\n+        CHECK(secp256k1_ec_pubkey_create(ctx, &output_pk_expected, sk32) == 1);\n         CHECK(secp256k1_memcmp_var(&output_pk_xy, &output_pk_expected, sizeof(output_pk_xy)) == 0);\n     }\n     secp256k1_context_destroy(none);"
      },
      {
        "sha": "7a440a729bf9644162e94651e6c222972dc30ec1",
        "filename": "src/secp256k1/src/modules/recovery/main_impl.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/recovery/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/recovery/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/main_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013-2015 Pieter Wuille                              *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013-2015 Pieter Wuille                               *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_MODULE_RECOVERY_MAIN_H\n #define SECP256K1_MODULE_RECOVERY_MAIN_H\n@@ -120,34 +120,34 @@ static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context *ctx, cons\n     return !secp256k1_gej_is_infinity(&qj);\n }\n \n-int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n+int secp256k1_ecdsa_sign_recoverable(const secp256k1_context* ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msghash32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {\n     secp256k1_scalar r, s;\n     int ret, recid;\n     VERIFY_CHECK(ctx != NULL);\n     ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));\n-    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n     ARG_CHECK(signature != NULL);\n     ARG_CHECK(seckey != NULL);\n \n-    ret = secp256k1_ecdsa_sign_inner(ctx, &r, &s, &recid, msg32, seckey, noncefp, noncedata);\n+    ret = secp256k1_ecdsa_sign_inner(ctx, &r, &s, &recid, msghash32, seckey, noncefp, noncedata);\n     secp256k1_ecdsa_recoverable_signature_save(signature, &r, &s, recid);\n     return ret;\n }\n \n-int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32) {\n+int secp256k1_ecdsa_recover(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msghash32) {\n     secp256k1_ge q;\n     secp256k1_scalar r, s;\n     secp256k1_scalar m;\n     int recid;\n     VERIFY_CHECK(ctx != NULL);\n     ARG_CHECK(secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx));\n-    ARG_CHECK(msg32 != NULL);\n+    ARG_CHECK(msghash32 != NULL);\n     ARG_CHECK(signature != NULL);\n     ARG_CHECK(pubkey != NULL);\n \n     secp256k1_ecdsa_recoverable_signature_load(ctx, &r, &s, &recid, signature);\n     VERIFY_CHECK(recid >= 0 && recid < 4);  /* should have been caught in parse_compact */\n-    secp256k1_scalar_set_b32(&m, msg32, NULL);\n+    secp256k1_scalar_set_b32(&m, msghash32, NULL);\n     if (secp256k1_ecdsa_sig_recover(&ctx->ecmult_ctx, &r, &s, &q, &m, recid)) {\n         secp256k1_pubkey_save(pubkey, &q);\n         return 1;"
      },
      {
        "sha": "0ba9409c691d0f251a55bbc699ac745712004edd",
        "filename": "src/secp256k1/src/modules/recovery/tests_exhaustive_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/recovery/tests_exhaustive_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/recovery/tests_exhaustive_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/tests_exhaustive_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2016 Andrew Poelstra                                 *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2016 Andrew Poelstra                                  *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_MODULE_RECOVERY_EXHAUSTIVE_TESTS_H\n #define SECP256K1_MODULE_RECOVERY_EXHAUSTIVE_TESTS_H"
      },
      {
        "sha": "40dba87ce39a7b0463a8107dd6623fa1b8ac774a",
        "filename": "src/secp256k1/src/modules/recovery/tests_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/recovery/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/recovery/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/recovery/tests_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2013-2015 Pieter Wuille                              *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2013-2015 Pieter Wuille                               *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_MODULE_RECOVERY_TESTS_H\n #define SECP256K1_MODULE_RECOVERY_TESTS_H"
      },
      {
        "sha": "22e1b33a5a48e63b0c701f243802d7d32e5b6dda",
        "filename": "src/secp256k1/src/modules/schnorrsig/main_impl.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/schnorrsig/main_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/schnorrsig/main_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorrsig/main_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,11 +1,11 @@\n-/**********************************************************************\n- * Copyright (c) 2018-2020 Andrew Poelstra, Jonas Nick                *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2018-2020 Andrew Poelstra, Jonas Nick                 *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n-#define _SECP256K1_MODULE_SCHNORRSIG_MAIN_\n+#ifndef SECP256K1_MODULE_SCHNORRSIG_MAIN_H\n+#define SECP256K1_MODULE_SCHNORRSIG_MAIN_H\n \n #include \"include/secp256k1.h\"\n #include \"include/secp256k1_schnorrsig.h\"\n@@ -179,7 +179,7 @@ int secp256k1_schnorrsig_sign(const secp256k1_context* ctx, unsigned char *sig64\n     secp256k1_scalar_add(&e, &e, &k);\n     secp256k1_scalar_get_b32(&sig64[32], &e);\n \n-    memczero(sig64, 64, !ret);\n+    secp256k1_memczero(sig64, 64, !ret);\n     secp256k1_scalar_clear(&k);\n     secp256k1_scalar_clear(&sk);\n     memset(seckey, 0, sizeof(seckey));"
      },
      {
        "sha": "b4a428729f9a0b823e5b005be7314521d601367c",
        "filename": "src/secp256k1/src/modules/schnorrsig/tests_exhaustive_impl.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/schnorrsig/tests_exhaustive_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/schnorrsig/tests_exhaustive_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorrsig/tests_exhaustive_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,11 +1,11 @@\n-/**********************************************************************\n- * Copyright (c) 2020 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2020 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n-#ifndef _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n-#define _SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_\n+#ifndef SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_H\n+#define SECP256K1_MODULE_SCHNORRSIG_TESTS_EXHAUSTIVE_H\n \n #include \"include/secp256k1_schnorrsig.h\"\n #include \"src/modules/schnorrsig/main_impl.h\""
      },
      {
        "sha": "338462fc9dfb944291ff8d6914859d03b70b1cdb",
        "filename": "src/secp256k1/src/modules/schnorrsig/tests_impl.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/schnorrsig/tests_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/modules/schnorrsig/tests_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/modules/schnorrsig/tests_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,11 +1,11 @@\n-/**********************************************************************\n- * Copyright (c) 2018-2020 Andrew Poelstra, Jonas Nick                *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef _SECP256K1_MODULE_SCHNORRSIG_TESTS_\n-#define _SECP256K1_MODULE_SCHNORRSIG_TESTS_\n+/***********************************************************************\n+ * Copyright (c) 2018-2020 Andrew Poelstra, Jonas Nick                 *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n+\n+#ifndef SECP256K1_MODULE_SCHNORRSIG_TESTS_H\n+#define SECP256K1_MODULE_SCHNORRSIG_TESTS_H\n \n #include \"secp256k1_schnorrsig.h\"\n "
      },
      {
        "sha": "49f2dd791d5696bf89a11caf5461e3f5b33aaca0",
        "filename": "src/secp256k1/src/num.h",
        "status": "removed",
        "additions": 0,
        "deletions": 74,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num.h?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,74 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef SECP256K1_NUM_H\n-#define SECP256K1_NUM_H\n-\n-#ifndef USE_NUM_NONE\n-\n-#if defined HAVE_CONFIG_H\n-#include \"libsecp256k1-config.h\"\n-#endif\n-\n-#if defined(USE_NUM_GMP)\n-#include \"num_gmp.h\"\n-#else\n-#error \"Please select num implementation\"\n-#endif\n-\n-/** Copy a number. */\n-static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a);\n-\n-/** Convert a number's absolute value to a binary big-endian string.\n- *  There must be enough place. */\n-static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a);\n-\n-/** Set a number to the value of a binary big-endian string. */\n-static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen);\n-\n-/** Compute a modular inverse. The input must be less than the modulus. */\n-static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m);\n-\n-/** Compute the jacobi symbol (a|b). b must be positive and odd. */\n-static int secp256k1_num_jacobi(const secp256k1_num *a, const secp256k1_num *b);\n-\n-/** Compare the absolute value of two numbers. */\n-static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b);\n-\n-/** Test whether two number are equal (including sign). */\n-static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b);\n-\n-/** Add two (signed) numbers. */\n-static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b);\n-\n-/** Subtract two (signed) numbers. */\n-static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b);\n-\n-/** Multiply two (signed) numbers. */\n-static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b);\n-\n-/** Replace a number by its remainder modulo m. M's sign is ignored. The result is a number between 0 and m-1,\n-    even if r was negative. */\n-static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m);\n-\n-/** Right-shift the passed number by bits bits. */\n-static void secp256k1_num_shift(secp256k1_num *r, int bits);\n-\n-/** Check whether a number is zero. */\n-static int secp256k1_num_is_zero(const secp256k1_num *a);\n-\n-/** Check whether a number is one. */\n-static int secp256k1_num_is_one(const secp256k1_num *a);\n-\n-/** Check whether a number is strictly negative. */\n-static int secp256k1_num_is_neg(const secp256k1_num *a);\n-\n-/** Change a number's sign. */\n-static void secp256k1_num_negate(secp256k1_num *r);\n-\n-#endif\n-\n-#endif /* SECP256K1_NUM_H */"
      },
      {
        "sha": "3619844bd5127eb4018efc05e16e78ae9143a93a",
        "filename": "src/secp256k1/src/num_gmp.h",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num_gmp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num_gmp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp.h?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,20 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef SECP256K1_NUM_REPR_H\n-#define SECP256K1_NUM_REPR_H\n-\n-#include <gmp.h>\n-\n-#define NUM_LIMBS ((256+GMP_NUMB_BITS-1)/GMP_NUMB_BITS)\n-\n-typedef struct {\n-    mp_limb_t data[2*NUM_LIMBS];\n-    int neg;\n-    int limbs;\n-} secp256k1_num;\n-\n-#endif /* SECP256K1_NUM_REPR_H */"
      },
      {
        "sha": "0ae2a8ba0ecb7b5b61aca0f94676dd7cbf86c437",
        "filename": "src/secp256k1/src/num_gmp_impl.h",
        "status": "removed",
        "additions": 0,
        "deletions": 288,
        "changes": 288,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num_gmp_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num_gmp_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_gmp_impl.h?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,288 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef SECP256K1_NUM_REPR_IMPL_H\n-#define SECP256K1_NUM_REPR_IMPL_H\n-\n-#include <string.h>\n-#include <stdlib.h>\n-#include <gmp.h>\n-\n-#include \"util.h\"\n-#include \"num.h\"\n-\n-#ifdef VERIFY\n-static void secp256k1_num_sanity(const secp256k1_num *a) {\n-    VERIFY_CHECK(a->limbs == 1 || (a->limbs > 1 && a->data[a->limbs-1] != 0));\n-}\n-#else\n-#define secp256k1_num_sanity(a) do { } while(0)\n-#endif\n-\n-static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a) {\n-    *r = *a;\n-}\n-\n-static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a) {\n-    unsigned char tmp[65];\n-    int len = 0;\n-    int shift = 0;\n-    if (a->limbs>1 || a->data[0] != 0) {\n-        len = mpn_get_str(tmp, 256, (mp_limb_t*)a->data, a->limbs);\n-    }\n-    while (shift < len && tmp[shift] == 0) shift++;\n-    VERIFY_CHECK(len-shift <= (int)rlen);\n-    memset(r, 0, rlen - len + shift);\n-    if (len > shift) {\n-        memcpy(r + rlen - len + shift, tmp + shift, len - shift);\n-    }\n-    memset(tmp, 0, sizeof(tmp));\n-}\n-\n-static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen) {\n-    int len;\n-    VERIFY_CHECK(alen > 0);\n-    VERIFY_CHECK(alen <= 64);\n-    len = mpn_set_str(r->data, a, alen, 256);\n-    if (len == 0) {\n-        r->data[0] = 0;\n-        len = 1;\n-    }\n-    VERIFY_CHECK(len <= NUM_LIMBS*2);\n-    r->limbs = len;\n-    r->neg = 0;\n-    while (r->limbs > 1 && r->data[r->limbs-1]==0) {\n-        r->limbs--;\n-    }\n-}\n-\n-static void secp256k1_num_add_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n-    mp_limb_t c = mpn_add(r->data, a->data, a->limbs, b->data, b->limbs);\n-    r->limbs = a->limbs;\n-    if (c != 0) {\n-        VERIFY_CHECK(r->limbs < 2*NUM_LIMBS);\n-        r->data[r->limbs++] = c;\n-    }\n-}\n-\n-static void secp256k1_num_sub_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n-    mp_limb_t c = mpn_sub(r->data, a->data, a->limbs, b->data, b->limbs);\n-    (void)c;\n-    VERIFY_CHECK(c == 0);\n-    r->limbs = a->limbs;\n-    while (r->limbs > 1 && r->data[r->limbs-1]==0) {\n-        r->limbs--;\n-    }\n-}\n-\n-static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m) {\n-    secp256k1_num_sanity(r);\n-    secp256k1_num_sanity(m);\n-\n-    if (r->limbs >= m->limbs) {\n-        mp_limb_t t[2*NUM_LIMBS];\n-        mpn_tdiv_qr(t, r->data, 0, r->data, r->limbs, m->data, m->limbs);\n-        memset(t, 0, sizeof(t));\n-        r->limbs = m->limbs;\n-        while (r->limbs > 1 && r->data[r->limbs-1]==0) {\n-            r->limbs--;\n-        }\n-    }\n-\n-    if (r->neg && (r->limbs > 1 || r->data[0] != 0)) {\n-        secp256k1_num_sub_abs(r, m, r);\n-        r->neg = 0;\n-    }\n-}\n-\n-static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m) {\n-    int i;\n-    mp_limb_t g[NUM_LIMBS+1];\n-    mp_limb_t u[NUM_LIMBS+1];\n-    mp_limb_t v[NUM_LIMBS+1];\n-    mp_size_t sn;\n-    mp_size_t gn;\n-    secp256k1_num_sanity(a);\n-    secp256k1_num_sanity(m);\n-\n-    /** mpn_gcdext computes: (G,S) = gcdext(U,V), where\n-     *  * G = gcd(U,V)\n-     *  * G = U*S + V*T\n-     *  * U has equal or more limbs than V, and V has no padding\n-     *  If we set U to be (a padded version of) a, and V = m:\n-     *    G = a*S + m*T\n-     *    G = a*S mod m\n-     *  Assuming G=1:\n-     *    S = 1/a mod m\n-     */\n-    VERIFY_CHECK(m->limbs <= NUM_LIMBS);\n-    VERIFY_CHECK(m->data[m->limbs-1] != 0);\n-    for (i = 0; i < m->limbs; i++) {\n-        u[i] = (i < a->limbs) ? a->data[i] : 0;\n-        v[i] = m->data[i];\n-    }\n-    sn = NUM_LIMBS+1;\n-    gn = mpn_gcdext(g, r->data, &sn, u, m->limbs, v, m->limbs);\n-    (void)gn;\n-    VERIFY_CHECK(gn == 1);\n-    VERIFY_CHECK(g[0] == 1);\n-    r->neg = a->neg ^ m->neg;\n-    if (sn < 0) {\n-        mpn_sub(r->data, m->data, m->limbs, r->data, -sn);\n-        r->limbs = m->limbs;\n-        while (r->limbs > 1 && r->data[r->limbs-1]==0) {\n-            r->limbs--;\n-        }\n-    } else {\n-        r->limbs = sn;\n-    }\n-    memset(g, 0, sizeof(g));\n-    memset(u, 0, sizeof(u));\n-    memset(v, 0, sizeof(v));\n-}\n-\n-static int secp256k1_num_jacobi(const secp256k1_num *a, const secp256k1_num *b) {\n-    int ret;\n-    mpz_t ga, gb;\n-    secp256k1_num_sanity(a);\n-    secp256k1_num_sanity(b);\n-    VERIFY_CHECK(!b->neg && (b->limbs > 0) && (b->data[0] & 1));\n-\n-    mpz_inits(ga, gb, NULL);\n-\n-    mpz_import(gb, b->limbs, -1, sizeof(mp_limb_t), 0, 0, b->data);\n-    mpz_import(ga, a->limbs, -1, sizeof(mp_limb_t), 0, 0, a->data);\n-    if (a->neg) {\n-        mpz_neg(ga, ga);\n-    }\n-\n-    ret = mpz_jacobi(ga, gb);\n-\n-    mpz_clears(ga, gb, NULL);\n-\n-    return ret;\n-}\n-\n-static int secp256k1_num_is_one(const secp256k1_num *a) {\n-    return (a->limbs == 1 && a->data[0] == 1);\n-}\n-\n-static int secp256k1_num_is_zero(const secp256k1_num *a) {\n-    return (a->limbs == 1 && a->data[0] == 0);\n-}\n-\n-static int secp256k1_num_is_neg(const secp256k1_num *a) {\n-    return (a->limbs > 1 || a->data[0] != 0) && a->neg;\n-}\n-\n-static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b) {\n-    if (a->limbs > b->limbs) {\n-        return 1;\n-    }\n-    if (a->limbs < b->limbs) {\n-        return -1;\n-    }\n-    return mpn_cmp(a->data, b->data, a->limbs);\n-}\n-\n-static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b) {\n-    if (a->limbs > b->limbs) {\n-        return 0;\n-    }\n-    if (a->limbs < b->limbs) {\n-        return 0;\n-    }\n-    if ((a->neg && !secp256k1_num_is_zero(a)) != (b->neg && !secp256k1_num_is_zero(b))) {\n-        return 0;\n-    }\n-    return mpn_cmp(a->data, b->data, a->limbs) == 0;\n-}\n-\n-static void secp256k1_num_subadd(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b, int bneg) {\n-    if (!(b->neg ^ bneg ^ a->neg)) { /* a and b have the same sign */\n-        r->neg = a->neg;\n-        if (a->limbs >= b->limbs) {\n-            secp256k1_num_add_abs(r, a, b);\n-        } else {\n-            secp256k1_num_add_abs(r, b, a);\n-        }\n-    } else {\n-        if (secp256k1_num_cmp(a, b) > 0) {\n-            r->neg = a->neg;\n-            secp256k1_num_sub_abs(r, a, b);\n-        } else {\n-            r->neg = b->neg ^ bneg;\n-            secp256k1_num_sub_abs(r, b, a);\n-        }\n-    }\n-}\n-\n-static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n-    secp256k1_num_sanity(a);\n-    secp256k1_num_sanity(b);\n-    secp256k1_num_subadd(r, a, b, 0);\n-}\n-\n-static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n-    secp256k1_num_sanity(a);\n-    secp256k1_num_sanity(b);\n-    secp256k1_num_subadd(r, a, b, 1);\n-}\n-\n-static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {\n-    mp_limb_t tmp[2*NUM_LIMBS+1];\n-    secp256k1_num_sanity(a);\n-    secp256k1_num_sanity(b);\n-\n-    VERIFY_CHECK(a->limbs + b->limbs <= 2*NUM_LIMBS+1);\n-    if ((a->limbs==1 && a->data[0]==0) || (b->limbs==1 && b->data[0]==0)) {\n-        r->limbs = 1;\n-        r->neg = 0;\n-        r->data[0] = 0;\n-        return;\n-    }\n-    if (a->limbs >= b->limbs) {\n-        mpn_mul(tmp, a->data, a->limbs, b->data, b->limbs);\n-    } else {\n-        mpn_mul(tmp, b->data, b->limbs, a->data, a->limbs);\n-    }\n-    r->limbs = a->limbs + b->limbs;\n-    if (r->limbs > 1 && tmp[r->limbs - 1]==0) {\n-        r->limbs--;\n-    }\n-    VERIFY_CHECK(r->limbs <= 2*NUM_LIMBS);\n-    mpn_copyi(r->data, tmp, r->limbs);\n-    r->neg = a->neg ^ b->neg;\n-    memset(tmp, 0, sizeof(tmp));\n-}\n-\n-static void secp256k1_num_shift(secp256k1_num *r, int bits) {\n-    if (bits % GMP_NUMB_BITS) {\n-        /* Shift within limbs. */\n-        mpn_rshift(r->data, r->data, r->limbs, bits % GMP_NUMB_BITS);\n-    }\n-    if (bits >= GMP_NUMB_BITS) {\n-        int i;\n-        /* Shift full limbs. */\n-        for (i = 0; i < r->limbs; i++) {\n-            int index = i + (bits / GMP_NUMB_BITS);\n-            if (index < r->limbs && index < 2*NUM_LIMBS) {\n-                r->data[i] = r->data[index];\n-            } else {\n-                r->data[i] = 0;\n-            }\n-        }\n-    }\n-    while (r->limbs>1 && r->data[r->limbs-1]==0) {\n-        r->limbs--;\n-    }\n-}\n-\n-static void secp256k1_num_negate(secp256k1_num *r) {\n-    r->neg ^= 1;\n-}\n-\n-#endif /* SECP256K1_NUM_REPR_IMPL_H */"
      },
      {
        "sha": "c45193b033dab813c0ec30697f23fd60098b8e9a",
        "filename": "src/secp256k1/src/num_impl.h",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7353a1e47fac1ccc66f1cee636e8182f1c6f380/src/secp256k1/src/num_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/num_impl.h?ref=f7353a1e47fac1ccc66f1cee636e8182f1c6f380",
        "patch": "@@ -1,24 +0,0 @@\n-/**********************************************************************\n- * Copyright (c) 2013, 2014 Pieter Wuille                             *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n-\n-#ifndef SECP256K1_NUM_IMPL_H\n-#define SECP256K1_NUM_IMPL_H\n-\n-#if defined HAVE_CONFIG_H\n-#include \"libsecp256k1-config.h\"\n-#endif\n-\n-#include \"num.h\"\n-\n-#if defined(USE_NUM_GMP)\n-#include \"num_gmp_impl.h\"\n-#elif defined(USE_NUM_NONE)\n-/* Nothing. */\n-#else\n-#error \"Please select num implementation\"\n-#endif\n-\n-#endif /* SECP256K1_NUM_IMPL_H */"
      },
      {
        "sha": "aaaa3d88277ad057c771480754c21f94c8eb9d7d",
        "filename": "src/secp256k1/src/scalar.h",
        "status": "modified",
        "additions": 5,
        "deletions": 17,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,13 +1,12 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_SCALAR_H\n #define SECP256K1_SCALAR_H\n \n-#include \"num.h\"\n #include \"util.h\"\n \n #if defined HAVE_CONFIG_H\n@@ -63,9 +62,6 @@ static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a,\n  *  the low bits that were shifted off */\n static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n);\n \n-/** Compute the square of a scalar (modulo the group order). */\n-static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a);\n-\n /** Compute the inverse of a scalar (modulo the group order). */\n static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *a);\n \n@@ -91,14 +87,6 @@ static int secp256k1_scalar_is_high(const secp256k1_scalar *a);\n  * Returns -1 if the number was negated, 1 otherwise */\n static int secp256k1_scalar_cond_negate(secp256k1_scalar *a, int flag);\n \n-#ifndef USE_NUM_NONE\n-/** Convert a scalar to a number. */\n-static void secp256k1_scalar_get_num(secp256k1_num *r, const secp256k1_scalar *a);\n-\n-/** Get the order of the group as a number. */\n-static void secp256k1_scalar_order_get_num(secp256k1_num *r);\n-#endif\n-\n /** Compare two scalars. */\n static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b);\n "
      },
      {
        "sha": "700964291ee28695e80458c861f322e8698949b7",
        "filename": "src/secp256k1/src/scalar_4x64.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_4x64.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_4x64.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79",
        "patch": "@@ -1,8 +1,8 @@\n-/**********************************************************************\n- * Copyright (c) 2014 Pieter Wuille                                   *\n- * Distributed under the MIT software license, see the accompanying   *\n- * file COPYING or http://www.opensource.org/licenses/mit-license.php.*\n- **********************************************************************/\n+/***********************************************************************\n+ * Copyright (c) 2014 Pieter Wuille                                    *\n+ * Distributed under the MIT software license, see the accompanying    *\n+ * file COPYING or https://www.opensource.org/licenses/mit-license.php.*\n+ ***********************************************************************/\n \n #ifndef SECP256K1_SCALAR_REPR_H\n #define SECP256K1_SCALAR_REPR_H"
      },
      {
        "sha": "a1def26fca7afad330b62929db12e70ddbde7d50",
        "filename": "src/secp256k1/src/scalar_4x64_impl.h",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_4x64_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_4x64_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_4x64_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "17863ef93710bd8e6b3df64cf741207ed5452efd",
        "filename": "src/secp256k1/src/scalar_8x32.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_8x32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_8x32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "62c7ae7156d37cfb57c580ab9e438ddea05f2fbd",
        "filename": "src/secp256k1/src/scalar_8x32_impl.h",
        "status": "modified",
        "additions": 95,
        "deletions": 94,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_8x32_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_8x32_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_8x32_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "e124474773c3e320867369ea1c161efb6d59562c",
        "filename": "src/secp256k1/src/scalar_impl.h",
        "status": "modified",
        "additions": 5,
        "deletions": 224,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "67051bd30b788b59a45d6e044a41e1e075681c56",
        "filename": "src/secp256k1/src/scalar_low.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_low.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_low.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_low.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "7176f0b2caeab0c8fbb7cd2b5d7755ff24260857",
        "filename": "src/secp256k1/src/scalar_low_impl.h",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_low_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scalar_low_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scalar_low_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "9dcb7581f6fc426c4a29c1b0610c12506394921e",
        "filename": "src/secp256k1/src/scratch.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scratch.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scratch.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scratch.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "688e18eb6620889b1ac3de4c3e79d8f0e83408ba",
        "filename": "src/secp256k1/src/scratch_impl.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scratch_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/scratch_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/scratch_impl.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "aef3f99ac3b39e88d8665c24714235a237191c2d",
        "filename": "src/secp256k1/src/secp256k1.c",
        "status": "modified",
        "additions": 41,
        "deletions": 40,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/secp256k1.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/secp256k1.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/secp256k1.c?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "52f1b8442e7124f3a2e39bfdc8db0072022c1d59",
        "filename": "src/secp256k1/src/selftest.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/selftest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/selftest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/selftest.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      },
      {
        "sha": "667d1867bd61548fc063cf14c1be06e9c8e4e581",
        "filename": "src/secp256k1/src/testrand.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/testrand.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd41834f484be9960cbd99bc9bc80a7ca35bbe79/src/secp256k1/src/testrand.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/testrand.h?ref=bd41834f484be9960cbd99bc9bc80a7ca35bbe79"
      }
    ]
  }
]