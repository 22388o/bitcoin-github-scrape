[
  {
    "sha": "bc6d8a3662f0fb992073e5e80269a90a722d76e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzZkOGEzNjYyZjBmYjk5MjA3M2U1ZTgwMjY5YTkwYTcyMmQ3NmUw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-06-21T14:13:15Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-09-05T23:05:07Z"
      },
      "message": "gui: Refactor OpenWalletActivity",
      "tree": {
        "sha": "0bfeca9ff841898a7ef45636ae8796b91c080d7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bfeca9ff841898a7ef45636ae8796b91c080d7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc6d8a3662f0fb992073e5e80269a90a722d76e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6d8a3662f0fb992073e5e80269a90a722d76e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc6d8a3662f0fb992073e5e80269a90a722d76e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6d8a3662f0fb992073e5e80269a90a722d76e0/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e202382a987351a59d5cda98ea9f2aee99f61a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e202382a987351a59d5cda98ea9f2aee99f61a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e202382a987351a59d5cda98ea9f2aee99f61a5"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 101,
      "deletions": 59
    },
    "files": [
      {
        "sha": "4c520c00dfdeffc5c21c23e7ade051c13eef11d5",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 23,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6d8a3662f0fb992073e5e80269a90a722d76e0/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6d8a3662f0fb992073e5e80269a90a722d76e0/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=bc6d8a3662f0fb992073e5e80269a90a722d76e0",
        "patch": "@@ -379,31 +379,11 @@ void BitcoinGUI::createActions()\n                     continue;\n                 }\n \n-                connect(action, &QAction::triggered, [this, name, path] {\n-                    OpenWalletActivity* activity = m_wallet_controller->openWallet(path);\n-\n-                    QProgressDialog* dialog = new QProgressDialog(this);\n-                    dialog->setLabelText(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n-                    dialog->setRange(0, 0);\n-                    dialog->setCancelButton(nullptr);\n-                    dialog->setWindowModality(Qt::ApplicationModal);\n-                    dialog->show();\n-\n-                    connect(activity, &OpenWalletActivity::message, this, [this] (QMessageBox::Icon icon, QString text) {\n-                        QMessageBox box;\n-                        box.setIcon(icon);\n-                        box.setText(tr(\"Open Wallet Failed\"));\n-                        box.setInformativeText(text);\n-                        box.setStandardButtons(QMessageBox::Ok);\n-                        box.setDefaultButton(QMessageBox::Ok);\n-                        connect(this, &QObject::destroyed, &box, &QDialog::accept);\n-                        box.exec();\n-                    });\n+                connect(action, &QAction::triggered, [this, path] {\n+                    auto activity = new OpenWalletActivity(m_wallet_controller, this);\n                     connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n                     connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n-                    connect(activity, &OpenWalletActivity::finished, dialog, &QObject::deleteLater);\n-                    bool invoked = QMetaObject::invokeMethod(activity, \"open\");\n-                    assert(invoked);\n+                    activity->open(path);\n                 });\n             }\n             if (m_open_wallet_menu->isEmpty()) {"
      },
      {
        "sha": "88ccc8c2d6a36da3a62f4e59a3df26ede7bfd5be",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 24,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6d8a3662f0fb992073e5e80269a90a722d76e0/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6d8a3662f0fb992073e5e80269a90a722d76e0/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=bc6d8a3662f0fb992073e5e80269a90a722d76e0",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <qt/guiutil.h>\n #include <qt/walletcontroller.h>\n \n #include <interfaces/handler.h>\n@@ -13,10 +14,13 @@\n #include <QMessageBox>\n #include <QMutexLocker>\n #include <QThread>\n+#include <QTimer>\n #include <QWindow>\n \n WalletController::WalletController(interfaces::Node& node, const PlatformStyle* platform_style, OptionsModel* options_model, QObject* parent)\n     : QObject(parent)\n+    , m_activity_thread(new QThread(this))\n+    , m_activity_worker(new QObject)\n     , m_node(node)\n     , m_platform_style(platform_style)\n     , m_options_model(options_model)\n@@ -29,15 +33,17 @@ WalletController::WalletController(interfaces::Node& node, const PlatformStyle*\n         getOrCreateWallet(std::move(wallet));\n     }\n \n-    m_activity_thread.start();\n+    m_activity_worker->moveToThread(m_activity_thread);\n+    m_activity_thread->start();\n }\n \n // Not using the default destructor because not all member types definitions are\n // available in the header, just forward declared.\n WalletController::~WalletController()\n {\n-    m_activity_thread.quit();\n-    m_activity_thread.wait();\n+    m_activity_thread->quit();\n+    m_activity_thread->wait();\n+    delete m_activity_worker;\n }\n \n std::vector<WalletModel*> WalletController::getOpenWallets() const\n@@ -60,13 +66,6 @@ std::map<std::string, bool> WalletController::listWalletDir() const\n     return wallets;\n }\n \n-OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidget* parent)\n-{\n-    OpenWalletActivity* activity = new OpenWalletActivity(this, name);\n-    activity->moveToThread(&m_activity_thread);\n-    return activity;\n-}\n-\n void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)\n {\n     QMessageBox box(parent);\n@@ -140,23 +139,60 @@ void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n     delete wallet_model;\n }\n \n+WalletControllerActivity::WalletControllerActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : QObject(wallet_controller)\n+    , m_wallet_controller(wallet_controller)\n+    , m_parent_widget(parent_widget)\n+{\n+}\n \n-OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, const std::string& name)\n-    : m_wallet_controller(wallet_controller)\n-    , m_name(name)\n-{}\n+WalletControllerActivity::~WalletControllerActivity()\n+{\n+    delete m_progress_dialog;\n+}\n \n-void OpenWalletActivity::open()\n+void WalletControllerActivity::showProgressDialog(const QString& label_text)\n {\n-    std::string error, warning;\n-    std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->m_node.loadWallet(m_name, error, warning);\n-    if (!warning.empty()) {\n-        Q_EMIT message(QMessageBox::Warning, QString::fromStdString(warning));\n-    }\n-    if (wallet) {\n-        Q_EMIT opened(m_wallet_controller->getOrCreateWallet(std::move(wallet)));\n-    } else {\n-        Q_EMIT message(QMessageBox::Critical, QString::fromStdString(error));\n+    m_progress_dialog = new QProgressDialog(m_parent_widget);\n+\n+    m_progress_dialog->setLabelText(label_text);\n+    m_progress_dialog->setRange(0, 0);\n+    m_progress_dialog->setCancelButton(nullptr);\n+    m_progress_dialog->setWindowModality(Qt::ApplicationModal);\n+    GUIUtil::PolishProgressDialog(m_progress_dialog);\n+}\n+\n+OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, QWidget* parent_widget)\n+    : WalletControllerActivity(wallet_controller, parent_widget)\n+{\n+}\n+\n+void OpenWalletActivity::finish()\n+{\n+    m_progress_dialog->hide();\n+\n+    if (!m_error_message.empty()) {\n+        QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message));\n+    } else if (!m_warning_message.empty()) {\n+        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(m_warning_message));\n     }\n+\n+    if (m_wallet_model) Q_EMIT opened(m_wallet_model);\n+\n     Q_EMIT finished();\n }\n+\n+void OpenWalletActivity::open(const std::string& path)\n+{\n+    QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n+\n+    showProgressDialog(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n+\n+    QTimer::singleShot(0, worker(), [this, path] {\n+        std::unique_ptr<interfaces::Wallet> wallet = node().loadWallet(path, m_error_message, m_warning_message);\n+\n+        if (wallet) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n+\n+        QTimer::singleShot(0, this, &OpenWalletActivity::finish);\n+    });\n+}"
      },
      {
        "sha": "dada9cfa63dcfa6b37a24fed818ace3580e6f3c1",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 38,
        "deletions": 12,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6d8a3662f0fb992073e5e80269a90a722d76e0/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6d8a3662f0fb992073e5e80269a90a722d76e0/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=bc6d8a3662f0fb992073e5e80269a90a722d76e0",
        "patch": "@@ -10,10 +10,13 @@\n \n #include <map>\n #include <memory>\n+#include <string>\n #include <vector>\n \n #include <QMessageBox>\n #include <QMutex>\n+#include <QProgressDialog>\n+#include <QString>\n #include <QThread>\n \n class OptionsModel;\n@@ -25,6 +28,7 @@ class Node;\n } // namespace interfaces\n \n class OpenWalletActivity;\n+class WalletControllerActivity;\n \n /**\n  * Controller between interfaces::Node, WalletModel instances and the GUI.\n@@ -33,7 +37,6 @@ class WalletController : public QObject\n {\n     Q_OBJECT\n \n-    WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n     void removeAndDeleteWallet(WalletModel* wallet_model);\n \n public:\n@@ -43,11 +46,12 @@ class WalletController : public QObject\n     //! Returns wallet models currently open.\n     std::vector<WalletModel*> getOpenWallets() const;\n \n+    WalletModel* getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet);\n+\n     //! Returns all wallet names in the wallet dir mapped to whether the wallet\n     //! is loaded.\n     std::map<std::string, bool> listWalletDir() const;\n \n-    OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n Q_SIGNALS:\n@@ -57,35 +61,57 @@ class WalletController : public QObject\n     void coinsSent(WalletModel* wallet_model, SendCoinsRecipient recipient, QByteArray transaction);\n \n private:\n-    QThread m_activity_thread;\n+    QThread* const m_activity_thread;\n+    QObject* const m_activity_worker;\n     interfaces::Node& m_node;\n     const PlatformStyle* const m_platform_style;\n     OptionsModel* const m_options_model;\n     mutable QMutex m_mutex;\n     std::vector<WalletModel*> m_wallets;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n \n-    friend class OpenWalletActivity;\n+    friend class WalletControllerActivity;\n };\n \n-class OpenWalletActivity : public QObject\n+class WalletControllerActivity : public QObject\n {\n     Q_OBJECT\n \n public:\n-    OpenWalletActivity(WalletController* wallet_controller, const std::string& name);\n-\n-public Q_SLOTS:\n-    void open();\n+    WalletControllerActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+    virtual ~WalletControllerActivity();\n \n Q_SIGNALS:\n-    void message(QMessageBox::Icon icon, const QString text);\n     void finished();\n+\n+protected:\n+    interfaces::Node& node() const { return m_wallet_controller->m_node; }\n+    QObject* worker() const { return m_wallet_controller->m_activity_worker; }\n+\n+    void showProgressDialog(const QString& label_text);\n+\n+    WalletController* const m_wallet_controller;\n+    QWidget* const m_parent_widget;\n+    QProgressDialog* m_progress_dialog{nullptr};\n+    WalletModel* m_wallet_model{nullptr};\n+    std::string m_error_message;\n+    std::string m_warning_message;\n+};\n+\n+class OpenWalletActivity : public WalletControllerActivity\n+{\n+    Q_OBJECT\n+\n+public:\n+    OpenWalletActivity(WalletController* wallet_controller, QWidget* parent_widget);\n+\n+    void open(const std::string& path);\n+\n+Q_SIGNALS:\n     void opened(WalletModel* wallet_model);\n \n private:\n-    WalletController* const m_wallet_controller;\n-    std::string const m_name;\n+    void finish();\n };\n \n #endif // BITCOIN_QT_WALLETCONTROLLER_H"
      }
    ]
  }
]