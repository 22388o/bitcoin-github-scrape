[
  {
    "sha": "fdceb6328382ac0f9d643f9d42ba0509062d7d48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGNlYjYzMjgzODJhYzBmOWQ2NDNmOWQ0MmJhMDUwOTA2MmQ3ZDQ4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-24T12:29:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-24T14:53:59Z"
      },
      "message": "fuzz: Remove enumeration of expected deserialization exceptions in ProcessMessage(...) fuzzer",
      "tree": {
        "sha": "1f567482386fd224f87c0a8cc5e62c138ae53f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f567482386fd224f87c0a8cc5e62c138ae53f5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdceb6328382ac0f9d643f9d42ba0509062d7d48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdceb6328382ac0f9d643f9d42ba0509062d7d48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdceb6328382ac0f9d643f9d42ba0509062d7d48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdceb6328382ac0f9d643f9d42ba0509062d7d48/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85bae24d060e0e67e72b7116ae92b220aad9fba1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85bae24d060e0e67e72b7116ae92b220aad9fba1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85bae24d060e0e67e72b7116ae92b220aad9fba1"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 1,
      "deletions": 23
    },
    "files": [
      {
        "sha": "c03365199a70e88eb55a604ee220839494e620b2",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdceb6328382ac0f9d643f9d42ba0509062d7d48/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdceb6328382ac0f9d643f9d42ba0509062d7d48/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=fdceb6328382ac0f9d643f9d42ba0509062d7d48",
        "patch": "@@ -19,16 +19,13 @@\n #include <validationinterface.h>\n #include <version.h>\n \n-#include <algorithm>\n #include <atomic>\n #include <cassert>\n #include <chrono>\n #include <cstdint>\n #include <iosfwd>\n #include <iostream>\n-#include <map>\n #include <memory>\n-#include <set>\n #include <string>\n #include <vector>\n \n@@ -44,19 +41,6 @@ const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n const std::string LIMIT_TO_MESSAGE_TYPE;\n #endif\n \n-const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n-    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n-    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n-    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n-    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n-    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n-    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n-    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n-    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n-    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n-    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n-};\n-\n const TestingSetup* g_setup;\n } // namespace\n \n@@ -91,13 +75,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n         (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\n-    } catch (const std::ios_base::failure& e) {\n-        const std::string exception_message{e.what()};\n-        const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\n-        if (p == EXPECTED_DESERIALIZATION_EXCEPTIONS.cend() || p->second.count(random_message_type) == 0) {\n-            std::cout << \"Unexpected exception when processing message type \\\"\" << random_message_type << \"\\\": \" << exception_message << std::endl;\n-            assert(false);\n-        }\n+    } catch (const std::ios_base::failure&) {\n     }\n     SyncWithValidationInterfaceQueue();\n }"
      }
    ]
  }
]