[
  {
    "sha": "75e54e388b4eef80f8f825aac74524c2b0f0f154",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWU1NGUzODhiNGVlZjgwZjhmODI1YWFjNzQ1MjRjMmIwZjBmMTU0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-26T20:08:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-26T20:08:16Z"
      },
      "message": "RPC/Wallet: Move nonzero feerate check to SetFeeEstimateMode\n\nWas only in bumpfee's helper",
      "tree": {
        "sha": "646346b6ab8ebb48df43ed9bf802dc6368d5e786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/646346b6ab8ebb48df43ed9bf802dc6368d5e786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75e54e388b4eef80f8f825aac74524c2b0f0f154",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e54e388b4eef80f8f825aac74524c2b0f0f154",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75e54e388b4eef80f8f825aac74524c2b0f0f154",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e54e388b4eef80f8f825aac74524c2b0f0f154/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d67883d01e507dd22d1281f4a4860e79d6a46a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67883d01e507dd22d1281f4a4860e79d6a46a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67883d01e507dd22d1281f4a4860e79d6a46a47"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "42ca96076ce19788d607edfccc27c178983f1c4a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e54e388b4eef80f8f825aac74524c2b0f0f154/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e54e388b4eef80f8f825aac74524c2b0f0f154/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=75e54e388b4eef80f8f825aac74524c2b0f0f154",
        "patch": "@@ -223,6 +223,9 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n         }\n \n         cc.m_feerate = CFeeRate(fee_rate);\n+        if (*cc.m_feerate <= CFeeRate(0)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid fee_rate %s (must be greater than 0)\", cc.m_feerate->ToString()));\n+        }\n \n         // default RBF to true for explicit fee rate modes\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n@@ -3466,9 +3469,6 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             coin_control.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n-            if (fee_rate <= CFeeRate(0)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid fee_rate %s (must be greater than 0)\", fee_rate.ToString()));\n-            }\n             coin_control.m_feerate = fee_rate;\n         }\n "
      }
    ]
  },
  {
    "sha": "0c194fb706cbd150d8037d9fcd125ae1d1596858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzE5NGZiNzA2Y2JkMTUwZDgwMzdkOWZjZDEyNWFlMWQxNTk2ODU4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-26T20:10:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-26T20:10:41Z"
      },
      "message": "RPC/Wallet: sendtoaddress & sendmany: Accept fee_rate as an alternative to conf_target",
      "tree": {
        "sha": "9e2e6177e1e65c06cfee47d292a48db6ad1dc3a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e2e6177e1e65c06cfee47d292a48db6ad1dc3a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c194fb706cbd150d8037d9fcd125ae1d1596858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c194fb706cbd150d8037d9fcd125ae1d1596858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c194fb706cbd150d8037d9fcd125ae1d1596858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c194fb706cbd150d8037d9fcd125ae1d1596858/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75e54e388b4eef80f8f825aac74524c2b0f0f154",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e54e388b4eef80f8f825aac74524c2b0f0f154",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75e54e388b4eef80f8f825aac74524c2b0f0f154"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e09fadd0ae14c3284bb96a346a02a119cb32ed9d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c194fb706cbd150d8037d9fcd125ae1d1596858/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c194fb706cbd150d8037d9fcd125ae1d1596858/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0c194fb706cbd150d8037d9fcd125ae1d1596858",
        "patch": "@@ -443,7 +443,7 @@ static RPCHelpMan sendtoaddress()\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n                                          \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target|fee_rate\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n@@ -871,7 +871,7 @@ static RPCHelpMan sendmany()\n                         },\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target|fee_rate\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra infomration about the transaction.\"},\n@@ -4533,8 +4533,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n     { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"options\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"verbose\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\",\"verbose\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target|fee_rate\",\"estimate_mode\",\"verbose\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target|fee_rate\",\"estimate_mode\",\"avoid_reuse\",\"verbose\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n     { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },"
      }
    ]
  },
  {
    "sha": "856a1a824b4c5861ffe246207135921be794a880",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTZhMWE4MjRiNGM1ODYxZmZlMjQ2MjA3MTM1OTIxYmU3OTRhODgw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-26T20:13:15Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T18:04:51Z"
      },
      "message": "Bugfix: RPC/Wallet: Pass both conf_target and fee_rate into SetFeeEstimateMode separately to replace broken code duplication\n\nFor compatibility, bumpfee and fundraw accept fee_rate without estimate_mode",
      "tree": {
        "sha": "15e23a1619f49262380e887d49432e02e96ae709",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e23a1619f49262380e887d49432e02e96ae709"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/856a1a824b4c5861ffe246207135921be794a880",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856a1a824b4c5861ffe246207135921be794a880",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/856a1a824b4c5861ffe246207135921be794a880",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856a1a824b4c5861ffe246207135921be794a880/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c194fb706cbd150d8037d9fcd125ae1d1596858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c194fb706cbd150d8037d9fcd125ae1d1596858",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c194fb706cbd150d8037d9fcd125ae1d1596858"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 38,
      "deletions": 37
    },
    "files": [
      {
        "sha": "76040df7c742d93c69b9b212216bf441a54d9a8d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 29,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856a1a824b4c5861ffe246207135921be794a880/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856a1a824b4c5861ffe246207135921be794a880/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=856a1a824b4c5861ffe246207135921be794a880",
        "patch": "@@ -204,7 +204,7 @@ static std::string LabelFromValue(const UniValue& value)\n  * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n  * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& conf_target_param, const UniValue& fee_rate_param)\n {\n     if (!estimate_mode.isNull()) {\n         if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n@@ -213,11 +213,14 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n     }\n \n     if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-        if (estimate_param.isNull()) {\n+        if (fee_rate_param.isNull()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Selected estimate_mode requires a fee rate\");\n         }\n+        if (&conf_target_param != &fee_rate_param && !conf_target_param.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate\");\n+        }\n \n-        CAmount fee_rate = AmountFromValue(estimate_param);\n+        CAmount fee_rate = AmountFromValue(fee_rate_param);\n         if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n             fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n         }\n@@ -229,8 +232,13 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n \n         // default RBF to true for explicit fee rate modes\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n-    } else if (!estimate_param.isNull()) {\n-        cc.m_confirm_target = ParseConfirmTarget(estimate_param, pwallet->chain().estimateMaxBlocks());\n+    } else {\n+        if (&conf_target_param != &fee_rate_param && !fee_rate_param.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must specify an explicit-fee estimate_mode to set fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee mode.\");\n+        }\n+        if (!conf_target_param.isNull()) {\n+            cc.m_confirm_target = ParseConfirmTarget(conf_target_param, pwallet->chain().estimateMaxBlocks());\n+        }\n     }\n }\n \n@@ -503,7 +511,8 @@ static RPCHelpMan sendtoaddress()\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n-    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n+    // TODO: reject the wrong named param\n+    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6], request.params[6]);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -930,7 +939,8 @@ static RPCHelpMan sendmany()\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n-    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n+    // TODO: reject the wrong named param\n+    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6], request.params[6]);\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n@@ -3044,7 +3054,7 @@ static RPCHelpMan listunspent()\n     };\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n+void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl, bool check_min_fee_rate=false)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -3126,14 +3136,9 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n \n         if (options.exists(\"feeRate\"))\n         {\n-            if (options.exists(\"conf_target\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n-            }\n-            if (options.exists(\"estimate_mode\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n-            }\n-            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n-            coinControl.fOverrideFeeRate = true;\n+            // For backward compatibility with feeRate and no estimate_mode prior to 0.21:\n+            if (options[\"estimate_mode\"].isNull()) options.pushKV(\"estimate_mode\", CURRENCY_UNIT + \"/kB\");\n+            if (!check_min_fee_rate) coinControl.fOverrideFeeRate = true;\n         }\n \n         if (options.exists(\"subtractFeeFromOutputs\") || options.exists(\"subtract_fee_from_outputs\") )\n@@ -3142,7 +3147,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"]);\n+        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"], options[\"feeRate\"]);\n       }\n     } else {\n         // if options is null and not a bool\n@@ -3210,7 +3215,7 @@ static RPCHelpMan fundrawtransaction()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n@@ -3461,21 +3466,15 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         }\n \n         auto conf_target = options.exists(\"confTarget\") ? options[\"confTarget\"] : options[\"conf_target\"];\n-\n-        if (!conf_target.isNull()) {\n-            if (options.exists(\"fee_rate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n-            }\n-            coin_control.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n-        } else if (options.exists(\"fee_rate\")) {\n-            CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n-            coin_control.m_feerate = fee_rate;\n+        // For backward compatibility with feeRate and no estimate_mode prior to 0.21:\n+        if (options[\"estimate_mode\"].isNull() && !options[\"fee_rate\"].isNull()) {\n+            options.pushKV(\"estimate_mode\", CURRENCY_UNIT + \"/kB\");\n         }\n \n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target);\n+        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target, options[\"fee_rate\"]);\n     }\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -4120,7 +4119,7 @@ static RPCHelpMan send()\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overriden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control, /* check_min_fee_rate */ true);\n \n             bool add_to_wallet = true;\n             if (options.exists(\"add_to_wallet\")) {"
      },
      {
        "sha": "de8d15ff7b57c5429e9b6ace0657613bd2184a29",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856a1a824b4c5861ffe246207135921be794a880/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856a1a824b4c5861ffe246207135921be794a880/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=856a1a824b4c5861ffe246207135921be794a880",
        "patch": "@@ -164,10 +164,10 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n+    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n \n     assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"confTarget\": 1})\n+    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"confTarget\": 1})\n \n     # Bumping to just above minrelay should fail to increase total fee enough, at least\n     assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})"
      },
      {
        "sha": "4ae28802f61957636ec68867e34f4d11906ba136",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856a1a824b4c5861ffe246207135921be794a880/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856a1a824b4c5861ffe246207135921be794a880/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=856a1a824b4c5861ffe246207135921be794a880",
        "patch": "@@ -29,7 +29,7 @@ def skip_test_if_missing_module(self):\n \n     def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n                   arg_conf_target=None, arg_estimate_mode=None,\n-                  conf_target=None, estimate_mode=None, add_to_wallet=None, psbt=None,\n+                  conf_target=None, fee_rate=None, estimate_mode=None, add_to_wallet=None, psbt=None,\n                   inputs=None, add_inputs=None, change_address=None, change_position=None, change_type=None,\n                   include_watching=None, locktime=None, lock_unspents=None, replaceable=None, subtract_fee_from_outputs=None,\n                   expect_error=None):\n@@ -60,6 +60,8 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             options[\"psbt\"] = psbt\n         if conf_target is not None:\n             options[\"conf_target\"] = conf_target\n+        if fee_rate is not None:\n+            options[\"feeRate\"] = fee_rate\n         if estimate_mode is not None:\n             options[\"estimate_mode\"] = estimate_mode\n         if inputs is not None:\n@@ -247,21 +249,21 @@ def run_test(self):\n         assert res[\"complete\"]\n \n         self.log.info(\"Set fee rate...\")\n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=\"sat/b\",\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=-1, estimate_mode=\"sat/b\",\n                        expect_error=(-3, \"Amount out of range\"))\n         # Fee rate of 0.1 satoshi per byte should throw an error\n         # TODO: error should use sat/b\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\",\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.1, estimate_mode=\"sat/b\",\n                        expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n \n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.000001, estimate_mode=\"BTC/KB\",\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.000001, estimate_mode=\"BTC/KB\",\n                        expect_error=(-4, \"Fee rate (0.00000100 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n-        # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)\n         # assert res[\"hex\"]\n         # hex = res[\"hex\"]\n         # res = self.nodes[0].testmempoolaccept([hex])"
      }
    ]
  },
  {
    "sha": "8e07bb59ce7a3e1f5cf31140aba27353daf6e12a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTA3YmI1OWNlN2EzZTFmNWNmMzExNDBhYmEyNzM1M2RhZjZlMTJh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-26T20:26:15Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T18:05:21Z"
      },
      "message": "RPC/Wallet: Deprecate fundrawtransaction feeRate and replace with fee_rate",
      "tree": {
        "sha": "d9fb4db6bc13d3ad638270e1d470c3cacac71020",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9fb4db6bc13d3ad638270e1d470c3cacac71020"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "856a1a824b4c5861ffe246207135921be794a880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856a1a824b4c5861ffe246207135921be794a880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/856a1a824b4c5861ffe246207135921be794a880"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "88f72ce64f5fbd2c0786ef1aa4b2f6fd21634400",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8e07bb59ce7a3e1f5cf31140aba27353daf6e12a",
        "patch": "@@ -3088,6 +3088,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n                 {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n                 {\"locktime\", UniValueType(UniValue::VNUM)},\n                 {\"feeRate\", UniValueType()}, // will be checked below\n+                {\"fee_rate\", UniValueType()}, // will be checked below\n                 {\"psbt\", UniValueType(UniValue::VBOOL)},\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n@@ -3134,8 +3135,11 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n         }\n \n-        if (options.exists(\"feeRate\"))\n-        {\n+        if (options.exists(\"feeRate\") && options.exists(\"fee_rate\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"feeRate and fee_rate options should not both be set. Use fee_rate (feeRate is deprecated).\");\n+        }\n+        auto fee_rate = options.exists(\"feeRate\") ? options[\"feeRate\"] : options[\"fee_rate\"];\n+        if (!fee_rate.isNull()) {\n             // For backward compatibility with feeRate and no estimate_mode prior to 0.21:\n             if (options[\"estimate_mode\"].isNull()) options.pushKV(\"estimate_mode\", CURRENCY_UNIT + \"/kB\");\n             if (!check_min_fee_rate) coinControl.fOverrideFeeRate = true;\n@@ -3147,7 +3151,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"], options[\"feeRate\"]);\n+        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"], fee_rate);\n       }\n     } else {\n         // if options is null and not a bool\n@@ -3204,7 +3208,7 @@ static RPCHelpMan fundrawtransaction()\n                                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The integers.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n@@ -4347,7 +4351,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                             {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The outputs to subtract the fee from.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\""
      }
    ]
  },
  {
    "sha": "508aae16b3d0c25f4f904442eb17f1e30341e2ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDhhYWUxNmIzZDBjMjVmNGY5MDQ0NDJlYjE3ZjFlMzAzNDFlMmNl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-26T20:34:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T18:32:38Z"
      },
      "message": "Bugfix: RPC/Wallet: Fix help for \"send\" method",
      "tree": {
        "sha": "d4cb6a3e61b1c86463af1c0f04d9e41b8d86e2fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4cb6a3e61b1c86463af1c0f04d9e41b8d86e2fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/508aae16b3d0c25f4f904442eb17f1e30341e2ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508aae16b3d0c25f4f904442eb17f1e30341e2ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/508aae16b3d0c25f4f904442eb17f1e30341e2ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508aae16b3d0c25f4f904442eb17f1e30341e2ce/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e07bb59ce7a3e1f5cf31140aba27353daf6e12a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e07bb59ce7a3e1f5cf31140aba27353daf6e12a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "44678b6e9894e79e1bef78d13362aa963d57527a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508aae16b3d0c25f4f904442eb17f1e30341e2ce/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508aae16b3d0c25f4f904442eb17f1e30341e2ce/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=508aae16b3d0c25f4f904442eb17f1e30341e2ce",
        "patch": "@@ -4014,7 +4014,7 @@ static RPCHelpMan send()\n                     },\n                 },\n             },\n-            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n@@ -4024,9 +4024,10 @@ static RPCHelpMan send()\n                     {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                     {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n@@ -4085,7 +4086,7 @@ static RPCHelpMan send()\n             UniValue options = request.params[3];\n             if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n                 if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode params or the options dictionary to control fee rate\");\n                 }\n             } else {\n                 options.pushKV(\"conf_target\", request.params[1]);"
      },
      {
        "sha": "60ad08933786f53964ca3b031cbdcea42737a9e8",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508aae16b3d0c25f4f904442eb17f1e30341e2ce/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508aae16b3d0c25f4f904442eb17f1e30341e2ce/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=508aae16b3d0c25f4f904442eb17f1e30341e2ce",
        "patch": "@@ -227,7 +227,7 @@ def run_test(self):\n                      self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n         # but not at the same time\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n-                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+                       conf_target=1, estimate_mode=\"economical\", add_to_wallet=False, expect_error=(-8,\"Use either conf_target and estimate_mode params or the options dictionary to control fee rate\"))\n \n         self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n         res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)"
      }
    ]
  },
  {
    "sha": "c630bb3de5a282fb15ece6f056e549c0da720450",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjMwYmIzZGU1YTI4MmZiMTVlY2U2ZjA1NmU1NDljMGRhNzIwNDUw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-22T13:50:03Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T18:32:44Z"
      },
      "message": "QA: Test bumpfee RPC with BTC/kB and sat/B estimation modes",
      "tree": {
        "sha": "3438b5b7f4517af22a7da1a270078c0b15a984bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3438b5b7f4517af22a7da1a270078c0b15a984bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c630bb3de5a282fb15ece6f056e549c0da720450",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c630bb3de5a282fb15ece6f056e549c0da720450",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c630bb3de5a282fb15ece6f056e549c0da720450",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c630bb3de5a282fb15ece6f056e549c0da720450/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "508aae16b3d0c25f4f904442eb17f1e30341e2ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508aae16b3d0c25f4f904442eb17f1e30341e2ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/508aae16b3d0c25f4f904442eb17f1e30341e2ce"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "740015d13df0aee75805701a44b071ae2d6b19c1",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c630bb3de5a282fb15ece6f056e549c0da720450/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c630bb3de5a282fb15ece6f056e549c0da720450/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=c630bb3de5a282fb15ece6f056e549c0da720450",
        "patch": "@@ -17,7 +17,7 @@\n import io\n \n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER, COIN, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -36,6 +36,8 @@\n HIGH         = 0.00500000\n TOO_HIGH     = 1.00000000\n \n+BTC_MODE = \"BTC/kB\"\n+SAT_MODE = \"sat/B\"\n \n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -77,8 +79,8 @@ def run_test(self):\n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n         self.test_invalid_parameters(rbf_node, dest_address)\n-        test_simple_bumpfee_succeeds(self, \"default\", rbf_node, peer_node, dest_address)\n-        test_simple_bumpfee_succeeds(self, \"fee_rate\", rbf_node, peer_node, dest_address)\n+        for mode in [\"default\", \"fee_rate\", BTC_MODE, SAT_MODE]:\n+            test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address)\n         test_feerate_args(self, rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n@@ -132,6 +134,13 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     if mode == \"fee_rate\":\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": NORMAL})\n         bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL})\n+    elif mode == BTC_MODE:\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": NORMAL, \"estimate_mode\": BTC_MODE})\n+        bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL, \"estimate_mode\": BTC_MODE})\n+    elif mode == SAT_MODE:\n+        sat_fee = NORMAL * COIN / 1000  # convert NORMAL from BTC/kB to sat/B\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": sat_fee, \"estimate_mode\": SAT_MODE})\n+        bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": sat_fee, \"estimate_mode\": SAT_MODE})\n     else:\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid)\n         bumped_tx = rbf_node.bumpfee(rbfid)"
      }
    ]
  },
  {
    "sha": "994f87860bd5b942c9a9b72ab2bfa701ff473074",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTRmODc4NjBiZDViOTQyYzlhOWI3MmFiMmJmYTcwMWZmNDczMDc0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-27T03:53:17Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T18:46:31Z"
      },
      "message": "wallet: add bumpfee feerate coverage, improve error/help",
      "tree": {
        "sha": "09d5d114431fa54dd48a6fa6591f6b6968e64956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09d5d114431fa54dd48a6fa6591f6b6968e64956"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/994f87860bd5b942c9a9b72ab2bfa701ff473074",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/994f87860bd5b942c9a9b72ab2bfa701ff473074",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/994f87860bd5b942c9a9b72ab2bfa701ff473074",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/994f87860bd5b942c9a9b72ab2bfa701ff473074/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c630bb3de5a282fb15ece6f056e549c0da720450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c630bb3de5a282fb15ece6f056e549c0da720450",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c630bb3de5a282fb15ece6f056e549c0da720450"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 48,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f42a14743195825e7d02a2de5a15e496b8e3b93c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/994f87860bd5b942c9a9b72ab2bfa701ff473074/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/994f87860bd5b942c9a9b72ab2bfa701ff473074/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=994f87860bd5b942c9a9b72ab2bfa701ff473074",
        "patch": "@@ -217,7 +217,7 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Selected estimate_mode requires a fee rate\");\n         }\n         if (&conf_target_param != &fee_rate_param && !conf_target_param.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"conf_target can't be set with fee_rate\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n         }\n \n         CAmount fee_rate = AmountFromValue(fee_rate_param);\n@@ -3387,7 +3387,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n         \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n         \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-        \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+        \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n         \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n         \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n         \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\""
      },
      {
        "sha": "62a9a2a5942cbb8f6597f2dfd3a56e7be7feebe4",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 46,
        "deletions": 7,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/994f87860bd5b942c9a9b72ab2bfa701ff473074/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/994f87860bd5b942c9a9b72ab2bfa701ff473074/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=994f87860bd5b942c9a9b72ab2bfa701ff473074",
        "patch": "@@ -168,24 +168,63 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n \n \n def test_feerate_args(self, rbf_node, peer_node, dest_address):\n-    self.log.info('Test fee_rate args')\n+    self.log.info('Test feerate args')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n-\n     assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-    assert_raises_rpc_error(-8, \"conf_target can't be set with fee_rate\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"confTarget\": 1})\n \n     # Bumping to just above minrelay should fail to increase total fee enough, at least\n     assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n-\n     assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n-\n     assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n-    self.clear_mempool()\n \n+    self.log.info(\"Test explicit feerate raises RPC error if estimate_mode is passed without a fee_rate\")\n+    assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"estimate_mode\": BTC_MODE})\n+    assert_raises_rpc_error(-8, \"Selected estimate_mode requires a fee rate\", rbf_node.bumpfee, rbfid, {\"estimate_mode\": SAT_MODE})\n+\n+    self.log.info(\"Test explicit feerate raises RPC error if both fee_rate and conf_target are passed\")\n+    msg = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n+          \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n+    assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n+\n+    self.log.info(\"Test invalid conf_target settings\")\n+    for field in [\"confTarget\", \"conf_target\"]:\n+        assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {field: 1, \"fee_rate\": NORMAL})\n+    too_high = \"is too high (cannot be higher than -maxtxfee\"\n+    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"fee_rate\": 2009}))\n+    assert_raises_rpc_error(-4, too_high, lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"fee_rate\": 2009 * 10000}))\n+\n+    self.log.info(\"Test invalid estimate_mode settings\")\n+    for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+        assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n+    for mode in [\"foo\", Decimal(\"3.141592\")]:\n+        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n+\n+    self.log.info(\"Test invalid fee_rate settings\")\n+    for mode in [\"unset\", \"economical\", \"conservative\"]:\n+        self.log.debug(\"{}\".format(mode))\n+        for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n+        assert_raises_rpc_error(-8, \"Must specify an explicit-fee estimate_mode to set fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee mode.\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n+        assert_raises_rpc_error(-8, \"Must specify an explicit-fee estimate_mode to set fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee mode.\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n+    for mode in [BTC_MODE, SAT_MODE]:\n+        self.log.debug(\"{}\".format(mode))\n+        for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n+                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n+        assert_raises_rpc_error(-3, \"Amount out of range\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+                                lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n+\n+    self.clear_mempool()\n \n def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n     self.log.info('Test that segwit-sourcing bumpfee works')"
      }
    ]
  },
  {
    "sha": "af5fdaea8566ee8cbbf8aec9e3e3367ab3039385",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjVmZGFlYTg1NjZlZThjYmJmOGFlYzllM2UzMzY3YWIzMDM5Mzg1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-19T09:35:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T20:11:48Z"
      },
      "message": "wallet: fundrawtransaction feerate coverage",
      "tree": {
        "sha": "ff2b6d4e38a0ad71687a14dfeb4239d2c1864def",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff2b6d4e38a0ad71687a14dfeb4239d2c1864def"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "994f87860bd5b942c9a9b72ab2bfa701ff473074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/994f87860bd5b942c9a9b72ab2bfa701ff473074",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/994f87860bd5b942c9a9b72ab2bfa701ff473074"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 57,
      "deletions": 0
    },
    "files": [
      {
        "sha": "80944854083c2d0db16f9bd8e17399a290281804",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=af5fdaea8566ee8cbbf8aec9e3e3367ab3039385",
        "patch": "@@ -7,6 +7,7 @@\n from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n+    assert_approx,\n     assert_equal,\n     assert_fee_amount,\n     assert_greater_than,\n@@ -88,6 +89,7 @@ def run_test(self):\n         self.test_op_return()\n         self.test_watchonly()\n         self.test_all_watched_funds()\n+        self.test_feerate_with_conf_target_and_estimate_mode()\n         self.test_option_feerate()\n         self.test_address_reuse()\n         self.test_option_subtract_fee_from_outputs()\n@@ -671,6 +673,61 @@ def test_option_feerate(self):\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+    def test_feerate_with_conf_target_and_estimate_mode(self):\n+        self.log.info(\"Test fundrawtxn passing an explicit feerate using conf_target and estimate_mode\")\n+        node = self.nodes[3]\n+        # Make sure there is exactly one input so coin selection can't skew the result.\n+        assert_equal(len(node.listunspent(1)), 1)\n+        inputs = []\n+        outputs = {node.getnewaddress() : 1}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        for unit, feerate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n+            self.log.info(\"Test fundrawtxn with fee_rate {} estimate_mode {} produces expected fee\".format(feerate, unit))\n+            # With no arguments passed, expect fee of 141 sats/b.\n+            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n+            result = node.fundrawtransaction(rawtx, {\"fee_rate\": feerate, \"estimate_mode\": unit})\n+            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+\n+        self.log.info(\"Test fundrawtxn raises RPC error if both fee_rate and conf_target are passed\")\n+        assert_raises_rpc_error(\n+            -8, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\",\n+            lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, \"conf_target\": 0.1}))\n+        self.log.info(\"Test fundrawtxn raises RPC error if both fee_rate and estimate_mode=conservative are passed\")\n+        assert_raises_rpc_error(\n+            -8, \"Must specify an explicit-fee estimate_mode to set fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee mode.\",\n+            lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, \"estimate_mode\": \"conservative\"}))\n+\n+        self.log.info(\"Test fundrawtxn with invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1}))\n+\n+        self.log.info(\"Test fundrawtxn with invalid conf_target settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": v}))\n+            for n in [-1, 0, 1009]:\n+                assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 - 1008\",\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": n}))\n+        for mode in [\"btc/kb\", \"sat/b\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            assert_raises_rpc_error(-3, \"Invalid amount\",\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"fee_rate\": \"\"}))\n+            for k, v in {\"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n+                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"fee_rate\": v}))\n+            assert_raises_rpc_error(-3, \"Amount out of range\",\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n+            assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n+\n     def test_address_reuse(self):\n         \"\"\"Test no address reuse occurs.\"\"\"\n         self.log.info(\"Test fundrawtxn does not reuse addresses\")"
      }
    ]
  },
  {
    "sha": "081955b4217452f6cef0dddd8171499da3861722",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODE5NTViNDIxNzQ1MmY2Y2VmMGRkZGQ4MTcxNDk5ZGEzODYxNzIy",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-26T14:05:03Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T20:18:56Z"
      },
      "message": "test: refactor rpc_psbt.py for walletcreatefundedpsbt feerate coverage",
      "tree": {
        "sha": "a637fbca850883129ea1ce9702bf8330c282598d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a637fbca850883129ea1ce9702bf8330c282598d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/081955b4217452f6cef0dddd8171499da3861722",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081955b4217452f6cef0dddd8171499da3861722",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/081955b4217452f6cef0dddd8171499da3861722",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081955b4217452f6cef0dddd8171499da3861722/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af5fdaea8566ee8cbbf8aec9e3e3367ab3039385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af5fdaea8566ee8cbbf8aec9e3e3367ab3039385"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "395e997bc4b9d1c3bba9ca5fc28170bd6cfd4606",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081955b4217452f6cef0dddd8171499da3861722/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081955b4217452f6cef0dddd8171499da3861722/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=081955b4217452f6cef0dddd8171499da3861722",
        "patch": "@@ -172,8 +172,11 @@ def run_test(self):\n             elif out['scriptPubKey']['addresses'][0] == p2pkh:\n                 p2pkh_pos = out['n']\n \n+        inputs = [{\"txid\": txid, \"vout\": p2wpkh_pos}, {\"txid\": txid, \"vout\": p2sh_p2wpkh_pos}, {\"txid\": txid, \"vout\": p2pkh_pos}]\n+        addr = {self.nodes[1].getnewaddress(): 29.99}\n+\n         # spend single key from node 1\n-        created_psbt = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99})\n+        created_psbt = self.nodes[1].walletcreatefundedpsbt(inputs, addr)\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(created_psbt['psbt'])\n         # Make sure it has both types of UTXOs\n         decoded = self.nodes[1].decodepsbt(walletprocesspsbt_out['psbt'])\n@@ -184,14 +187,15 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        # feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000):\n-        res = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n+        self.log.info(\"Test feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000)\")\n+        res = self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res[\"fee\"], 0.055, 0.005)\n \n-        # feeRate of 10 BTC / KB produces a total fee well above -maxtxfee\n+        self.log.info(\"Test feeRate of 10 BTC/KB produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10, \"add_inputs\": True})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():1}, 0, {\"feeRate\": 10, \"add_inputs\": False})\n+        for bool_add, addr in {True: addr, False: {self.nodes[1].getnewaddress(): 1}}.items():\n+            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n+                                    self.nodes[1].walletcreatefundedpsbt, inputs, addr, 0, {\"feeRate\": 10, \"add_inputs\": bool_add})\n \n         # partially sign multisig things with node 1\n         psbtx = wmulti.walletcreatefundedpsbt(inputs=[{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], outputs={self.nodes[1].getnewaddress():29.99}, options={'changeAddress': self.nodes[1].getrawchangeaddress()})['psbt']"
      }
    ]
  },
  {
    "sha": "681ce7d324197fd15ccdbca0f089010a14fa57bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODFjZTdkMzI0MTk3ZmQxNWNjZGJjYTBmMDg5MDEwYTE0ZmE1N2Jj",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-06-26T14:06:43Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T20:20:26Z"
      },
      "message": "wallet: add walletcreatefundedpsbt feerate coverage",
      "tree": {
        "sha": "b9047d55354120bb27baec712042ccbe3bb66f9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9047d55354120bb27baec712042ccbe3bb66f9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/681ce7d324197fd15ccdbca0f089010a14fa57bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681ce7d324197fd15ccdbca0f089010a14fa57bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/681ce7d324197fd15ccdbca0f089010a14fa57bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681ce7d324197fd15ccdbca0f089010a14fa57bc/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "081955b4217452f6cef0dddd8171499da3861722",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081955b4217452f6cef0dddd8171499da3861722",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/081955b4217452f6cef0dddd8171499da3861722"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 45,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7276185b25576e5bad500491d5b3b0e974ed8f2d",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 45,
        "deletions": 1,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/681ce7d324197fd15ccdbca0f089010a14fa57bc/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/681ce7d324197fd15ccdbca0f089010a14fa57bc/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=681ce7d324197fd15ccdbca0f089010a14fa57bc",
        "patch": "@@ -187,10 +187,54 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        self.log.info(\"Test feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000)\")\n+        self.log.info(\"Test feeRate of 0.1 BTC / KB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n         res = self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res[\"fee\"], 0.055, 0.005)\n \n+        self.log.info(\"Test passing walletcreatefundedpsbt explicit feerate with fee_rate and estimate_mode\")\n+        for unit, feerate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n+            fee = self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"fee_rate\": feerate, \"estimate_mode\": unit, \"add_inputs\": True})[\"fee\"]\n+            self.log.info(\"- fee_rate {}, estimate_mode {} produces fee {} at or slightly below -maxtxfee (~0.05290000)\".format(feerate, unit, fee))\n+            assert_approx(fee, vexp=0.055, vspan=0.005)\n+\n+        self.log.info(\"Test walletcreatefundedpsbt raises RPC error if both fee_rate and conf_target are passed\")\n+        assert_raises_rpc_error(\n+            -8, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\",\n+            lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"fee_rate\": 0.1, \"conf_target\": 0.1, \"add_inputs\": True}))\n+        self.log.info(\"Test walletcreatefundedpsbt raises RPC error if both fee_rate and estimate_mode=conservative are passed\")\n+        assert_raises_rpc_error(\n+            -8, \"Must specify an explicit-fee estimate_mode to set fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee mode.\",\n+            lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"fee_rate\": 0.1, \"estimate_mode\": \"conservative\", \"add_inputs\": True}))\n+\n+        self.log.info(\"Test walletcreatefundedpsbt with invalid estimate_mode settings\")\n+        for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n+            assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True}))\n+        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True}))\n+\n+        self.log.info(\"Test walletcreatefundedpsbt with invalid conf_target settings\")\n+        for mode in [\"unset\", \"economical\", \"conservative\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": v, \"add_inputs\": True}))\n+            for n in [-1, 0, 1009]:\n+                assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 - 1008\",\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True}))\n+        for mode in [\"btc/kb\", \"sat/b\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            assert_raises_rpc_error(-3, \"Invalid amount\",\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"fee_rate\": \"\", \"add_inputs\": True}))\n+            for k, v in {\"object\": {\"foo\": \"bar\"}}.items():\n+                assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n+                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"fee_rate\": v, \"add_inputs\": True}))\n+            assert_raises_rpc_error(-3, \"Amount out of range\",\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"fee_rate\": -1, \"add_inputs\": True}))\n+            assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, addr, 0, {\"estimate_mode\": mode, \"fee_rate\": 0, \"add_inputs\": True}))\n+\n         self.log.info(\"Test feeRate of 10 BTC/KB produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n         for bool_add, addr in {True: addr, False: {self.nodes[1].getnewaddress(): 1}}.items():"
      }
    ]
  },
  {
    "sha": "7bef2148625829b89690f01003ff0d1bf36db65e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmVmMjE0ODYyNTgyOWI4OTY5MGYwMTAwM2ZmMGQxYmYzNmRiNjVl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T20:37:53Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-28T20:37:53Z"
      },
      "message": "QA: wallet_basic: Adapt sendtoaddress/sendmany tests to use fee_rate named param",
      "tree": {
        "sha": "bc26fa303f68f63a297a6b9d9762e6962b9d1ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc26fa303f68f63a297a6b9d9762e6962b9d1ecc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bef2148625829b89690f01003ff0d1bf36db65e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bef2148625829b89690f01003ff0d1bf36db65e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bef2148625829b89690f01003ff0d1bf36db65e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bef2148625829b89690f01003ff0d1bf36db65e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "681ce7d324197fd15ccdbca0f089010a14fa57bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681ce7d324197fd15ccdbca0f089010a14fa57bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/681ce7d324197fd15ccdbca0f089010a14fa57bc"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3878fe7689fb2adec08c4a55d959dcef2408ec2d",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bef2148625829b89690f01003ff0d1bf36db65e/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bef2148625829b89690f01003ff0d1bf36db65e/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=7bef2148625829b89690f01003ff0d1bf36db65e",
        "patch": "@@ -235,13 +235,13 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Amount out of range\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n-            conf_target=-1,\n+            fee_rate=-1,\n             estimate_mode='bTc/kB')\n         fee_per_kb = 0.0002500\n         explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n         txid = self.nodes[2].sendmany(\n             amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n+            fee_rate=fee_per_kb,\n             estimate_mode='bTc/kB',\n         )\n         self.nodes[2].generate(1)\n@@ -261,14 +261,14 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Amount out of range\",\n             self.nodes[2].sendmany,\n             amounts={ address: 10 },\n-            conf_target=-1,\n+            fee_rate=-1,\n             estimate_mode='sat/b')\n         fee_sat_per_b = 2\n         fee_per_kb = fee_sat_per_b / 100000.0\n         explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n         txid = self.nodes[2].sendmany(\n             amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n+            fee_rate=fee_sat_per_b,\n             estimate_mode='sAT/b',\n         )\n         self.nodes[2].generate(1)\n@@ -430,12 +430,12 @@ def run_test(self):\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,\n-                conf_target=-1,\n+                fee_rate=-1,\n                 estimate_mode='btc/kb')\n             txid = self.nodes[2].sendtoaddress(\n                 address=address,\n                 amount=1.0,\n-                conf_target=0.00002500,\n+                fee_rate=0.00002500,\n                 estimate_mode='btc/kb',\n             )\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n@@ -464,12 +464,12 @@ def run_test(self):\n                 self.nodes[2].sendtoaddress,\n                 address=address,\n                 amount=1.0,\n-                conf_target=-1,\n+                fee_rate=-1,\n                 estimate_mode='SAT/b')\n             txid = self.nodes[2].sendtoaddress(\n                 address=address,\n                 amount=1.0,\n-                conf_target=2,\n+                fee_rate=2,\n                 estimate_mode='SAT/B',\n             )\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])"
      }
    ]
  }
]