[
  {
    "sha": "b571b9da9713594ced3e7d081d3de9683fc1393d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTcxYjlkYTk3MTM1OTRjZWQzZTdkMDgxZDNkZTk2ODNmYzEzOTNk",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T08:59:01Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T08:59:01Z"
      },
      "message": "Consistency in the use of Params().NetworkID() (use it less)",
      "tree": {
        "sha": "60af4ea287dd2f506c93bd51c680c7589d85f73e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60af4ea287dd2f506c93bd51c680c7589d85f73e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b571b9da9713594ced3e7d081d3de9683fc1393d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b571b9da9713594ced3e7d081d3de9683fc1393d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b571b9da9713594ced3e7d081d3de9683fc1393d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b571b9da9713594ced3e7d081d3de9683fc1393d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63e1da9278e8a76d9b28fdd8286ac716faa8d7f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63e1da9278e8a76d9b28fdd8286ac716faa8d7f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63e1da9278e8a76d9b28fdd8286ac716faa8d7f1"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6dbbcf04a97273171fd4486ccdd6a478f357993f",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b571b9da9713594ced3e7d081d3de9683fc1393d/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b571b9da9713594ced3e7d081d3de9683fc1393d/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=b571b9da9713594ced3e7d081d3de9683fc1393d",
        "patch": "@@ -97,6 +97,10 @@ void SelectParams(CChainParams::Network network);\n  */\n bool SelectParamsFromCommandLine();\n \n+inline bool MainNet() {\n+    return Params().NetworkID() == CChainParams::MAIN;\n+}\n+\n inline bool TestNet() {\n     // Note: it's deliberate that this returns \"false\" for regression test mode.\n     return Params().NetworkID() == CChainParams::TESTNET;"
      },
      {
        "sha": "ab907514f6830c506fb52f296ada11b50d8ccf25",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b571b9da9713594ced3e7d081d3de9683fc1393d/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b571b9da9713594ced3e7d081d3de9683fc1393d/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=b571b9da9713594ced3e7d081d3de9683fc1393d",
        "patch": "@@ -83,9 +83,9 @@ namespace Checkpoints\n     };\n \n     const CCheckpointData &Checkpoints() {\n-        if (Params().NetworkID() == CChainParams::TESTNET)\n+        if (TestNet())\n             return dataTestnet;\n-        else if (Params().NetworkID() == CChainParams::MAIN)\n+        else if (MainNet())\n             return data;\n         else\n             return dataRegtest;"
      },
      {
        "sha": "f1dd3e546ffa992f3952ff99b475e6af47e79d97",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b571b9da9713594ced3e7d081d3de9683fc1393d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b571b9da9713594ced3e7d081d3de9683fc1393d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b571b9da9713594ced3e7d081d3de9683fc1393d",
        "patch": "@@ -743,7 +743,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (Params().NetworkID() == CChainParams::MAIN && !IsStandardTx(tx, reason))\n+    if (MainNet() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n@@ -804,7 +804,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().NetworkID() == CChainParams::MAIN && !AreInputsStandard(tx, view))\n+        if (MainNet() && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n \n         // Note: if you modify this code to accept non-standard transactions, then"
      },
      {
        "sha": "37bababd911b02869d8316b84c2a7074dcccdd0c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b571b9da9713594ced3e7d081d3de9683fc1393d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b571b9da9713594ced3e7d081d3de9683fc1393d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b571b9da9713594ced3e7d081d3de9683fc1393d",
        "patch": "@@ -509,7 +509,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     unsigned int nExtraNonce = 0;\n \n     try { while (true) {\n-        if (Params().NetworkID() != CChainParams::REGTEST) {\n+        if (!RegTest()) {\n             // Busy-wait for the network to come online so we don't waste time mining\n             // on an obsolete chain. In regtest mode we expect to fly solo.\n             while (vNodes.empty())\n@@ -579,7 +579,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n                     // In regression test mode, stop mining after a block is found. This\n                     // allows developers to controllably generate a block on demand.\n-                    if (Params().NetworkID() == CChainParams::REGTEST)\n+                    if (RegTest())\n                         throw boost::thread_interrupted();\n \n                     break;\n@@ -617,7 +617,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n             // Check for stop or if block needs to be rebuilt\n             boost::this_thread::interruption_point();\n-            if (vNodes.empty() && Params().NetworkID() != CChainParams::REGTEST)\n+            if (vNodes.empty() && !RegTest())\n                 break;\n             if (nBlockNonce >= 0xffff0000)\n                 break;\n@@ -649,7 +649,7 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n     static boost::thread_group* minerThreads = NULL;\n \n     if (nThreads < 0) {\n-        if (Params().NetworkID() == CChainParams::REGTEST)\n+        if (RegTest())\n             nThreads = 1;\n         else\n             nThreads = boost::thread::hardware_concurrency();"
      },
      {
        "sha": "cd1099f2fadb0f730199f02d39433a32ac8f064d",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b571b9da9713594ced3e7d081d3de9683fc1393d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b571b9da9713594ced3e7d081d3de9683fc1393d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=b571b9da9713594ced3e7d081d3de9683fc1393d",
        "patch": "@@ -174,7 +174,7 @@ Value setgenerate(const Array& params, bool fHelp)\n     }\n \n     // -regtest mode: don't return until nGenProcLimit blocks are generated\n-    if (fGenerate && Params().NetworkID() == CChainParams::REGTEST)\n+    if (fGenerate && RegTest())\n     {\n         int nHeightStart = 0;\n         int nHeightEnd = 0;"
      }
    ]
  },
  {
    "sha": "ccb6e3eab9e9138610f33994d62aab597d498003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2I2ZTNlYWI5ZTkxMzg2MTBmMzM5OTRkNjJhYWI1OTdkNDk4MDAz",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T11:36:58Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T11:36:58Z"
      },
      "message": "Get rid of Params().NetworkID()",
      "tree": {
        "sha": "91dc7a599979ed95465339b7fc673e231cae556f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91dc7a599979ed95465339b7fc673e231cae556f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccb6e3eab9e9138610f33994d62aab597d498003",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb6e3eab9e9138610f33994d62aab597d498003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb6e3eab9e9138610f33994d62aab597d498003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb6e3eab9e9138610f33994d62aab597d498003/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b571b9da9713594ced3e7d081d3de9683fc1393d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b571b9da9713594ced3e7d081d3de9683fc1393d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b571b9da9713594ced3e7d081d3de9683fc1393d"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 41,
      "deletions": 44
    },
    "files": [
      {
        "sha": "dcff0ac98887ee75b0bdcfd86ba459bb5132f2dd",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -28,7 +28,7 @@ static bool AppInitRPC(int argc, char* argv[])\n         return false;\n     }\n     ReadConfigFile(mapArgs, mapMultiArgs);\n-    // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n+    // Check for -testnet or -regtest parameter (Params().isTestNet() calls are only valid after this clause)\n     if (!SelectParamsFromCommandLine()) {\n         fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n         return false;"
      },
      {
        "sha": "57439146ce743e68b469cf8f46bae42065af35fb",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -71,7 +71,7 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n         ReadConfigFile(mapArgs, mapMultiArgs);\n-        // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n+        // Check for -testnet or -regtest parameter (Params().isTestNet() calls are only valid after this clause)\n         if (!SelectParamsFromCommandLine()) {\n             fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n             return false;"
      },
      {
        "sha": "75406b7a25a369a1f4b1a080e6229148a56cf34e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -169,7 +169,7 @@ class CMainParams : public CChainParams {\n     }\n \n     virtual const CBlock& GenesisBlock() const { return genesis; }\n-    virtual Network NetworkID() const { return CChainParams::MAIN; }\n+    virtual bool isMainNet() const { return true; }\n \n     virtual const vector<CAddress>& FixedSeeds() const {\n         return vFixedSeeds;\n@@ -216,7 +216,7 @@ class CTestNetParams : public CMainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x35)(0x87)(0xCF);\n         base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x35)(0x83)(0x94);\n     }\n-    virtual Network NetworkID() const { return CChainParams::TESTNET; }\n+    virtual bool isTestNet() const { return true; }\n };\n static CTestNetParams testNetParams;\n \n@@ -245,7 +245,7 @@ class CRegTestParams : public CTestNetParams {\n     }\n \n     virtual bool RequireRPCPassword() const { return false; }\n-    virtual Network NetworkID() const { return CChainParams::REGTEST; }\n+    virtual bool isRegTest() const { return true; }\n };\n static CRegTestParams regTestParams;\n "
      },
      {
        "sha": "fcd1fbcb4754c263f194334fffdf61a6cb77ecd0",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -61,7 +61,10 @@ class CChainParams\n     virtual const CBlock& GenesisBlock() const = 0;\n     virtual bool RequireRPCPassword() const { return true; }\n     const string& DataDir() const { return strDataDir; }\n-    virtual Network NetworkID() const = 0;\n+    virtual bool isMainNet() const { return false; }\n+    virtual bool isTestNet() const { return false; }\n+    virtual bool isRegTest() const { return false; }\n+\n     const vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char> &Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     virtual const vector<CAddress>& FixedSeeds() const = 0;\n@@ -97,17 +100,4 @@ void SelectParams(CChainParams::Network network);\n  */\n bool SelectParamsFromCommandLine();\n \n-inline bool MainNet() {\n-    return Params().NetworkID() == CChainParams::MAIN;\n-}\n-\n-inline bool TestNet() {\n-    // Note: it's deliberate that this returns \"false\" for regression test mode.\n-    return Params().NetworkID() == CChainParams::TESTNET;\n-}\n-\n-inline bool RegTest() {\n-    return Params().NetworkID() == CChainParams::REGTEST;\n-}\n-\n #endif"
      },
      {
        "sha": "8d79e56325ea8182cbbe6af26e7d2754d0341ceb",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -83,9 +83,9 @@ namespace Checkpoints\n     };\n \n     const CCheckpointData &Checkpoints() {\n-        if (TestNet())\n+        if (Params().isTestNet())\n             return dataTestnet;\n-        else if (MainNet())\n+        else if (Params().isMainNet())\n             return data;\n         else\n             return dataRegtest;"
      },
      {
        "sha": "a921b2015bd22f2749638936849244deff281e17",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -487,7 +487,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         InitWarning(_(\"Warning: Deprecated argument -debugnet ignored, use -debug=net\"));\n \n     fBenchmark = GetBoolArg(\"-benchmark\", false);\n-    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", RegTest()));\n+    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", Params().isRegTest()));\n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency"
      },
      {
        "sha": "b2e935e078a2e630e4454878e6270db4e68f5d78",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -743,7 +743,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (MainNet() && !IsStandardTx(tx, reason))\n+    if (Params().isMainNet() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n@@ -804,7 +804,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (MainNet() && !AreInputsStandard(tx, view))\n+        if (Params().isMainNet() && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n \n         // Note: if you modify this code to accept non-standard transactions, then\n@@ -1113,7 +1113,7 @@ unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n     const CBigNum &bnLimit = Params().ProofOfWorkLimit();\n     // Testnet has min-difficulty blocks\n     // after nTargetSpacing*2 time between blocks:\n-    if (TestNet() && nTime > nTargetSpacing*2)\n+    if (Params().isTestNet() && nTime > nTargetSpacing*2)\n         return bnLimit.GetCompact();\n \n     CBigNum bnResult;\n@@ -1141,7 +1141,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     // Only change once per interval\n     if ((pindexLast->nHeight+1) % nInterval != 0)\n     {\n-        if (TestNet())\n+        if (Params().isTestNet())\n         {\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n@@ -1373,7 +1373,7 @@ void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev)\n     block.nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n-    if (TestNet())\n+    if (Params().isTestNet())\n         block.nBits = GetNextWorkRequired(pindexPrev, &block);\n }\n \n@@ -2300,8 +2300,8 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (block.nVersion < 2)\n         {\n-            if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n-                (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n+            if ((!Params().isTestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n+                (Params().isTestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n             {\n                 return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"),\n                                      REJECT_OBSOLETE, \"bad-version\");\n@@ -2311,8 +2311,8 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n         if (block.nVersion >= 2)\n         {\n             // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-            if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n-                (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n+            if ((!Params().isTestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n+                (Params().isTestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n             {\n                 CScript expect = CScript() << nHeight;\n                 if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||"
      },
      {
        "sha": "97729d20c974e17237d2358f8739698458be1e88",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -509,7 +509,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     unsigned int nExtraNonce = 0;\n \n     try { while (true) {\n-        if (!RegTest()) {\n+        if (!Params().isRegTest()) {\n             // Busy-wait for the network to come online so we don't waste time mining\n             // on an obsolete chain. In regtest mode we expect to fly solo.\n             while (vNodes.empty())\n@@ -579,7 +579,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n                     // In regression test mode, stop mining after a block is found. This\n                     // allows developers to controllably generate a block on demand.\n-                    if (RegTest())\n+                    if (Params().isRegTest())\n                         throw boost::thread_interrupted();\n \n                     break;\n@@ -617,7 +617,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n             // Check for stop or if block needs to be rebuilt\n             boost::this_thread::interruption_point();\n-            if (vNodes.empty() && !RegTest())\n+            if (vNodes.empty() && !Params().isRegTest())\n                 break;\n             if (nBlockNonce >= 0xffff0000)\n                 break;\n@@ -629,7 +629,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Update nTime every few seconds\n             UpdateTime(*pblock, pindexPrev);\n             nBlockTime = ByteReverse(pblock->nTime);\n-            if (TestNet())\n+            if (Params().isTestNet())\n             {\n                 // Changing pblock->nTime can change work required on testnet:\n                 nBlockBits = ByteReverse(pblock->nBits);\n@@ -649,7 +649,7 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n     static boost::thread_group* minerThreads = NULL;\n \n     if (nThreads < 0) {\n-        if (RegTest())\n+        if (Params().isRegTest())\n             nThreads = 1;\n         else\n             nThreads = boost::thread::hardware_concurrency();"
      },
      {
        "sha": "e1c81fa89e9b90d312fa99d9081dfa3bfc840bc2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -443,17 +443,17 @@ int main(int argc, char *argv[])\n     /// 1. Parse command-line options. These take precedence over anything else.\n     // Command-line options take precedence:\n     ParseParameters(argc, argv);\n-    // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n+    // Check for -testnet or -regtest parameter (Params().isTestNet() calls are only valid after this clause)\n     if (!SelectParamsFromCommandLine()) {\n         fSelParFromCLFailed = true;\n     }\n #ifdef ENABLE_WALLET\n-    // Parse URIs on command line -- this can affect TestNet() / RegTest() mode\n+    // Parse URIs on command line -- this can affect Params().isTestNet() / Params().isRegTest() mode\n     if (!PaymentServer::ipcParseCommandLine(argc, argv))\n         exit(0);\n #endif\n \n-    bool isaTestNet = TestNet() || RegTest();\n+    bool isaTestNet = Params().isTestNet() || Params().isRegTest();\n \n     // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n "
      },
      {
        "sha": "a038866ebf5086c79b83ab9d631c7838a6d4a54d",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -174,7 +174,7 @@ Value setgenerate(const Array& params, bool fHelp)\n     }\n \n     // -regtest mode: don't return until nGenProcLimit blocks are generated\n-    if (fGenerate && RegTest())\n+    if (fGenerate && Params().isRegTest())\n     {\n         int nHeightStart = 0;\n         int nHeightEnd = 0;\n@@ -264,7 +264,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          TestNet()));\n+    obj.push_back(Pair(\"testnet\",          Params().isTestNet()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n     obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));"
      },
      {
        "sha": "0a5d12be5b3bc0a3a5b1c4909c684e80f6785477",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -72,7 +72,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       TestNet()));\n+    obj.push_back(Pair(\"testnet\",       Params().isTestNet()));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));"
      },
      {
        "sha": "9548003a3b98d67272cb3d3495b314fb5070a769",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccb6e3eab9e9138610f33994d62aab597d498003/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccb6e3eab9e9138610f33994d62aab597d498003/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ccb6e3eab9e9138610f33994d62aab597d498003",
        "patch": "@@ -995,8 +995,15 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n     LOCK(csPathCached);\n \n     int nNet = CChainParams::MAX_NETWORK_TYPES;\n-    if (fNetSpecific) nNet = Params().NetworkID();\n-\n+    if (fNetSpecific) {\n+        if (Params().isMainNet()) {\n+            nNet = CChainParams::MAIN;\n+        } else if (Params().isTestNet()) {\n+            nNet = CChainParams::TESTNET;\n+        } else if (Params().isRegTest()) {\n+            nNet = CChainParams::REGTEST;\n+        }\n+    }\n     fs::path &path = pathCached[nNet];\n \n     // This can be called during exceptions by LogPrintf(), so we cache the"
      }
    ]
  },
  {
    "sha": "7fe2c85e71cafb37032b2402585c0f2a15bf6b4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmUyYzg1ZTcxY2FmYjM3MDMyYjI0MDI1ODVjMGYyYTE1YmY2YjRk",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T19:57:22Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T19:57:22Z"
      },
      "message": "MainNet is the special case for the GUI",
      "tree": {
        "sha": "e830e9f9557ee0bb26b44e0dc24f429ba5f02c71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e830e9f9557ee0bb26b44e0dc24f429ba5f02c71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccb6e3eab9e9138610f33994d62aab597d498003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccb6e3eab9e9138610f33994d62aab597d498003",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccb6e3eab9e9138610f33994d62aab597d498003"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "aa1cfb8d4b5a829debc0b8bd14099a758929db6c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7fe2c85e71cafb37032b2402585c0f2a15bf6b4d",
        "patch": "@@ -448,12 +448,12 @@ int main(int argc, char *argv[])\n         fSelParFromCLFailed = true;\n     }\n #ifdef ENABLE_WALLET\n-    // Parse URIs on command line -- this can affect Params().isTestNet() / Params().isRegTest() mode\n+    // Parse URIs on command line -- this can affect Params() modes\n     if (!PaymentServer::ipcParseCommandLine(argc, argv))\n         exit(0);\n #endif\n \n-    bool isaTestNet = Params().isTestNet() || Params().isRegTest();\n+    bool isaTestNet = !Params().isMainNet();\n \n     // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n "
      }
    ]
  },
  {
    "sha": "941d25e69687f22c5cbfd6e538e6ddf145911984",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDFkMjVlNjk2ODdmMjJjNWNiZmQ2ZTUzOGU2ZGRmMTQ1OTExOTg0",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T19:58:42Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T19:58:42Z"
      },
      "message": "CheckMemPool() and MiningRequiresPeers() isntead of isRegTest",
      "tree": {
        "sha": "7f78a4af5b8d20ee368274d8a0f1e0b16e4ebb77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f78a4af5b8d20ee368274d8a0f1e0b16e4ebb77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/941d25e69687f22c5cbfd6e538e6ddf145911984",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/941d25e69687f22c5cbfd6e538e6ddf145911984",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/941d25e69687f22c5cbfd6e538e6ddf145911984",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/941d25e69687f22c5cbfd6e538e6ddf145911984/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fe2c85e71cafb37032b2402585c0f2a15bf6b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fe2c85e71cafb37032b2402585c0f2a15bf6b4d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dabec9ccc623c3c6e9b727ffa429ed608bbeb4c2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/941d25e69687f22c5cbfd6e538e6ddf145911984/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/941d25e69687f22c5cbfd6e538e6ddf145911984/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=941d25e69687f22c5cbfd6e538e6ddf145911984",
        "patch": "@@ -245,6 +245,9 @@ class CRegTestParams : public CTestNetParams {\n     }\n \n     virtual bool RequireRPCPassword() const { return false; }\n+    virtual bool CheckMemPool() const { return true; }\n+    virtual bool MiningRequiresPeers() const { return false; }\n+\n     virtual bool isRegTest() const { return true; }\n };\n static CRegTestParams regTestParams;"
      },
      {
        "sha": "a9a4805dfdfc0a2861a292a0fb3cd95e7da6712e",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/941d25e69687f22c5cbfd6e538e6ddf145911984/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/941d25e69687f22c5cbfd6e538e6ddf145911984/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=941d25e69687f22c5cbfd6e538e6ddf145911984",
        "patch": "@@ -60,7 +60,10 @@ class CChainParams\n     int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n     virtual const CBlock& GenesisBlock() const = 0;\n     virtual bool RequireRPCPassword() const { return true; }\n+    virtual bool CheckMemPool() const { return false; }\n+    virtual bool MiningRequiresPeers() const { return true; }\n     const string& DataDir() const { return strDataDir; }\n+    // TODO get rid of the network specific methods\n     virtual bool isMainNet() const { return false; }\n     virtual bool isTestNet() const { return false; }\n     virtual bool isRegTest() const { return false; }"
      },
      {
        "sha": "3aefb102a40fb590cbf018d47c9b4290c6211a2d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/941d25e69687f22c5cbfd6e538e6ddf145911984/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/941d25e69687f22c5cbfd6e538e6ddf145911984/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=941d25e69687f22c5cbfd6e538e6ddf145911984",
        "patch": "@@ -487,7 +487,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         InitWarning(_(\"Warning: Deprecated argument -debugnet ignored, use -debug=net\"));\n \n     fBenchmark = GetBoolArg(\"-benchmark\", false);\n-    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", Params().isRegTest()));\n+    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", Params().CheckMemPool()));\n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency"
      },
      {
        "sha": "58049f60e2665fd02b6a0a0a2a3dc78a5ccd4daa",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/941d25e69687f22c5cbfd6e538e6ddf145911984/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/941d25e69687f22c5cbfd6e538e6ddf145911984/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=941d25e69687f22c5cbfd6e538e6ddf145911984",
        "patch": "@@ -509,7 +509,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     unsigned int nExtraNonce = 0;\n \n     try { while (true) {\n-        if (!Params().isRegTest()) {\n+        if (Params().MiningRequiresPeers()) {\n             // Busy-wait for the network to come online so we don't waste time mining\n             // on an obsolete chain. In regtest mode we expect to fly solo.\n             while (vNodes.empty())\n@@ -617,7 +617,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n             // Check for stop or if block needs to be rebuilt\n             boost::this_thread::interruption_point();\n-            if (vNodes.empty() && !Params().isRegTest())\n+            if (vNodes.empty() && Params().MiningRequiresPeers())\n                 break;\n             if (nBlockNonce >= 0xffff0000)\n                 break;"
      }
    ]
  },
  {
    "sha": "337164b797cc2adb7814774eb97b5a4a9629c611",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzcxNjRiNzk3Y2MyYWRiNzgxNDc3NGViOTdiNWE0YTk2MjljNjEx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T20:44:36Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T20:44:36Z"
      },
      "message": "Move DefaultMinerThreads to chain params",
      "tree": {
        "sha": "ad6fe29e3029cfa6ee49bfe283798692e2e73198",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad6fe29e3029cfa6ee49bfe283798692e2e73198"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/337164b797cc2adb7814774eb97b5a4a9629c611",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/337164b797cc2adb7814774eb97b5a4a9629c611",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/337164b797cc2adb7814774eb97b5a4a9629c611",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/337164b797cc2adb7814774eb97b5a4a9629c611/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "941d25e69687f22c5cbfd6e538e6ddf145911984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/941d25e69687f22c5cbfd6e538e6ddf145911984",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/941d25e69687f22c5cbfd6e538e6ddf145911984"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2c637d550084048e96edde31709de7f158499a70",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/337164b797cc2adb7814774eb97b5a4a9629c611/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/337164b797cc2adb7814774eb97b5a4a9629c611/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=337164b797cc2adb7814774eb97b5a4a9629c611",
        "patch": "@@ -11,6 +11,7 @@\n #include \"util.h\"\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/thread.hpp>\n \n using namespace boost::assign;\n \n@@ -112,6 +113,7 @@ class CMainParams : public CChainParams {\n         nRPCPort = 8332;\n         bnProofOfWorkLimit = CBigNum(~uint256(0) >> 32);\n         nSubsidyHalvingInterval = 210000;\n+        nMinerThreads = boost::thread::hardware_concurrency();\n \n         // Build the genesis block. Note that the output of the genesis coinbase cannot\n         // be spent as it did not originally exist in the database.\n@@ -232,6 +234,7 @@ class CRegTestParams : public CTestNetParams {\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n         nSubsidyHalvingInterval = 150;\n+        nMinerThreads = 1;\n         bnProofOfWorkLimit = CBigNum(~uint256(0) >> 1);\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;"
      },
      {
        "sha": "524d0fe79e6923a0fc48f307d40a751ad234f3fa",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/337164b797cc2adb7814774eb97b5a4a9629c611/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/337164b797cc2adb7814774eb97b5a4a9629c611/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=337164b797cc2adb7814774eb97b5a4a9629c611",
        "patch": "@@ -58,6 +58,7 @@ class CChainParams\n     int GetDefaultPort() const { return nDefaultPort; }\n     const CBigNum& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n     int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n+    int DefaultMinerThreads() const { return nMinerThreads; }\n     virtual const CBlock& GenesisBlock() const = 0;\n     virtual bool RequireRPCPassword() const { return true; }\n     virtual bool CheckMemPool() const { return false; }\n@@ -84,6 +85,7 @@ class CChainParams\n     CBigNum bnProofOfWorkLimit;\n     int nSubsidyHalvingInterval;\n     string strDataDir;\n+    int nMinerThreads;\n     vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n };"
      },
      {
        "sha": "edf3ebcad3cb09565da625c43e3ace15bcd44765",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/337164b797cc2adb7814774eb97b5a4a9629c611/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/337164b797cc2adb7814774eb97b5a4a9629c611/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=337164b797cc2adb7814774eb97b5a4a9629c611",
        "patch": "@@ -648,12 +648,8 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads)\n {\n     static boost::thread_group* minerThreads = NULL;\n \n-    if (nThreads < 0) {\n-        if (Params().isRegTest())\n-            nThreads = 1;\n-        else\n-            nThreads = boost::thread::hardware_concurrency();\n-    }\n+    if (nThreads < 0)\n+        nThreads = Params().DefaultMinerThreads();\n \n     if (minerThreads != NULL)\n     {"
      }
    ]
  },
  {
    "sha": "9cf034e46f94540072cb5a999fcb4c328fe621be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2YwMzRlNDZmOTQ1NDAwNzJjYjVhOTk5ZmNiNGMzMjhmZTYyMWJl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T21:08:58Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T21:08:58Z"
      },
      "message": "MineBlocksOnDemand() instead of isRegTest()",
      "tree": {
        "sha": "a5a2f5733d60c2e1ee55e1f1fec1bbe29707374a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5a2f5733d60c2e1ee55e1f1fec1bbe29707374a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cf034e46f94540072cb5a999fcb4c328fe621be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf034e46f94540072cb5a999fcb4c328fe621be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cf034e46f94540072cb5a999fcb4c328fe621be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf034e46f94540072cb5a999fcb4c328fe621be/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "337164b797cc2adb7814774eb97b5a4a9629c611",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/337164b797cc2adb7814774eb97b5a4a9629c611",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/337164b797cc2adb7814774eb97b5a4a9629c611"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "698e42c5bbd568520ad6c7989ce26bc6058b798f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cf034e46f94540072cb5a999fcb4c328fe621be/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cf034e46f94540072cb5a999fcb4c328fe621be/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9cf034e46f94540072cb5a999fcb4c328fe621be",
        "patch": "@@ -250,6 +250,7 @@ class CRegTestParams : public CTestNetParams {\n     virtual bool RequireRPCPassword() const { return false; }\n     virtual bool CheckMemPool() const { return true; }\n     virtual bool MiningRequiresPeers() const { return false; }\n+    virtual bool MineBlocksOnDemand() const { return true; }\n \n     virtual bool isRegTest() const { return true; }\n };"
      },
      {
        "sha": "73465698b47f85178f5b513f602a3aea1e0babaf",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cf034e46f94540072cb5a999fcb4c328fe621be/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cf034e46f94540072cb5a999fcb4c328fe621be/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=9cf034e46f94540072cb5a999fcb4c328fe621be",
        "patch": "@@ -63,6 +63,7 @@ class CChainParams\n     virtual bool RequireRPCPassword() const { return true; }\n     virtual bool CheckMemPool() const { return false; }\n     virtual bool MiningRequiresPeers() const { return true; }\n+    virtual bool MineBlocksOnDemand() const { return false; }\n     const string& DataDir() const { return strDataDir; }\n     // TODO get rid of the network specific methods\n     virtual bool isMainNet() const { return false; }"
      },
      {
        "sha": "1be05bd6af40d2992e6d4c1941abff5218bf3f88",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cf034e46f94540072cb5a999fcb4c328fe621be/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cf034e46f94540072cb5a999fcb4c328fe621be/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9cf034e46f94540072cb5a999fcb4c328fe621be",
        "patch": "@@ -577,9 +577,9 @@ void static BitcoinMiner(CWallet *pwallet)\n                     CheckWork(pblock, *pwallet, reservekey);\n                     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n-                    // In regression test mode, stop mining after a block is found. This\n-                    // allows developers to controllably generate a block on demand.\n-                    if (Params().isRegTest())\n+                    // Stop mining after a block is found when blocks\n+                    // are generated on demand.\n+                    if (Params().MineBlocksOnDemand())\n                         throw boost::thread_interrupted();\n \n                     break;"
      },
      {
        "sha": "c7bfcbe23d19df7c116ba13fd3d05c3cc8f2bdf8",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cf034e46f94540072cb5a999fcb4c328fe621be/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cf034e46f94540072cb5a999fcb4c328fe621be/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=9cf034e46f94540072cb5a999fcb4c328fe621be",
        "patch": "@@ -173,8 +173,8 @@ Value setgenerate(const Array& params, bool fHelp)\n             fGenerate = false;\n     }\n \n-    // -regtest mode: don't return until nGenProcLimit blocks are generated\n-    if (fGenerate && Params().isRegTest())\n+    // don't return until nGenProcLimit blocks are generated on demand\n+    if (fGenerate && Params().MineBlocksOnDemand())\n     {\n         int nHeightStart = 0;\n         int nHeightEnd = 0;"
      }
    ]
  },
  {
    "sha": "992f5be1e106affc55109749ac7940cd11b5cef7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTJmNWJlMWUxMDZhZmZjNTUxMDk3NDlhYzc5NDBjZDExYjVjZWY3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T21:17:31Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-07T21:17:31Z"
      },
      "message": "Restore NetworkID(), get rid of isRegTest()",
      "tree": {
        "sha": "ab4127a574706a268e8634d3e56a3ae99e1cd984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab4127a574706a268e8634d3e56a3ae99e1cd984"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/992f5be1e106affc55109749ac7940cd11b5cef7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992f5be1e106affc55109749ac7940cd11b5cef7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/992f5be1e106affc55109749ac7940cd11b5cef7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992f5be1e106affc55109749ac7940cd11b5cef7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cf034e46f94540072cb5a999fcb4c328fe621be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf034e46f94540072cb5a999fcb4c328fe621be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cf034e46f94540072cb5a999fcb4c328fe621be"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 7,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ef36ee316546cf7fad6ddd1240635e656bde275d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992f5be1e106affc55109749ac7940cd11b5cef7/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992f5be1e106affc55109749ac7940cd11b5cef7/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=992f5be1e106affc55109749ac7940cd11b5cef7",
        "patch": "@@ -171,6 +171,7 @@ class CMainParams : public CChainParams {\n     }\n \n     virtual const CBlock& GenesisBlock() const { return genesis; }\n+    virtual Network NetworkID() const { return CChainParams::MAIN; }\n     virtual bool isMainNet() const { return true; }\n \n     virtual const vector<CAddress>& FixedSeeds() const {\n@@ -218,6 +219,7 @@ class CTestNetParams : public CMainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x35)(0x87)(0xCF);\n         base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x35)(0x83)(0x94);\n     }\n+    virtual Network NetworkID() const { return CChainParams::TESTNET; }\n     virtual bool isTestNet() const { return true; }\n };\n static CTestNetParams testNetParams;\n@@ -252,7 +254,7 @@ class CRegTestParams : public CTestNetParams {\n     virtual bool MiningRequiresPeers() const { return false; }\n     virtual bool MineBlocksOnDemand() const { return true; }\n \n-    virtual bool isRegTest() const { return true; }\n+    virtual Network NetworkID() const { return CChainParams::REGTEST; }\n };\n static CRegTestParams regTestParams;\n "
      },
      {
        "sha": "a026c7e7f65af94c463ecb85752bc145451daca7",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992f5be1e106affc55109749ac7940cd11b5cef7/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992f5be1e106affc55109749ac7940cd11b5cef7/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=992f5be1e106affc55109749ac7940cd11b5cef7",
        "patch": "@@ -65,10 +65,11 @@ class CChainParams\n     virtual bool MiningRequiresPeers() const { return true; }\n     virtual bool MineBlocksOnDemand() const { return false; }\n     const string& DataDir() const { return strDataDir; }\n+\n+    virtual Network NetworkID() const = 0;\n     // TODO get rid of the network specific methods\n     virtual bool isMainNet() const { return false; }\n     virtual bool isTestNet() const { return false; }\n-    virtual bool isRegTest() const { return false; }\n \n     const vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char> &Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }"
      },
      {
        "sha": "36dfd8ab79649971766e49bd501383d97ce9a23a",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992f5be1e106affc55109749ac7940cd11b5cef7/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992f5be1e106affc55109749ac7940cd11b5cef7/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=992f5be1e106affc55109749ac7940cd11b5cef7",
        "patch": "@@ -995,15 +995,8 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n     LOCK(csPathCached);\n \n     int nNet = CChainParams::MAX_NETWORK_TYPES;\n-    if (fNetSpecific) {\n-        if (Params().isMainNet()) {\n-            nNet = CChainParams::MAIN;\n-        } else if (Params().isTestNet()) {\n-            nNet = CChainParams::TESTNET;\n-        } else if (Params().isRegTest()) {\n-            nNet = CChainParams::REGTEST;\n-        }\n-    }\n+    if (fNetSpecific) nNet = Params().NetworkID();\n+\n     fs::path &path = pathCached[nNet];\n \n     // This can be called during exceptions by LogPrintf(), so we cache the"
      }
    ]
  }
]