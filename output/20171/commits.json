[
  {
    "sha": "a07910abcd580ed07187794cf0e1faf040bb4212",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDc5MTBhYmNkNTgwZWQwNzE4Nzc5NGNmMGUxZmFmMDQwYmI0MjEy",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-10-17T15:20:43Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-11-02T23:29:48Z"
      },
      "message": "test: Makes wtxidrelay support a generic P2PInterface option\n\nIts usage is extended beyond p2p_segwit.py in next commit.",
      "tree": {
        "sha": "7aaccfd1610cf2300eb6f80bac8bfd94de66b5b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7aaccfd1610cf2300eb6f80bac8bfd94de66b5b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a07910abcd580ed07187794cf0e1faf040bb4212",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a07910abcd580ed07187794cf0e1faf040bb4212",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a07910abcd580ed07187794cf0e1faf040bb4212",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a07910abcd580ed07187794cf0e1faf040bb4212/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9e8d2bd076d78ba59abceb80106f44fe26246b14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8d2bd076d78ba59abceb80106f44fe26246b14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8d2bd076d78ba59abceb80106f44fe26246b14"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 8,
      "deletions": 13
    },
    "files": [
      {
        "sha": "acbe3ee226c12d7d1972e264816e51f1153dd840",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a07910abcd580ed07187794cf0e1faf040bb4212/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a07910abcd580ed07187794cf0e1faf040bb4212/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=a07910abcd580ed07187794cf0e1faf040bb4212",
        "patch": "@@ -37,7 +37,6 @@\n     msg_tx,\n     msg_block,\n     msg_no_witness_tx,\n-    msg_verack,\n     ser_uint256,\n     ser_vector,\n     sha256,\n@@ -148,7 +147,7 @@ def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=Non\n \n class TestP2PConn(P2PInterface):\n     def __init__(self, wtxidrelay=False):\n-        super().__init__()\n+        super().__init__(wtxidrelay=wtxidrelay)\n         self.getdataset = set()\n         self.last_wtxidrelay = []\n         self.lastgetdata = []\n@@ -159,13 +158,6 @@ def __init__(self, wtxidrelay=False):\n     def on_inv(self, message):\n         pass\n \n-    def on_version(self, message):\n-        if self.wtxidrelay:\n-            super().on_version(message)\n-        else:\n-            self.send_message(msg_verack())\n-            self.nServices = message.nServices\n-\n     def on_getdata(self, message):\n         self.lastgetdata = message.inv\n         for inv in message.inv:"
      },
      {
        "sha": "a666d6c8d189dc5555a2daafb2db36ea90d4d224",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a07910abcd580ed07187794cf0e1faf040bb4212/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a07910abcd580ed07187794cf0e1faf040bb4212/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=a07910abcd580ed07187794cf0e1faf040bb4212",
        "patch": "@@ -30,8 +30,8 @@\n \n \n class TestP2PConn(P2PInterface):\n-    def __init__(self):\n-        super().__init__()\n+    def __init__(self, wtxidrelay=True):\n+        super().__init__(wtxidrelay=wtxidrelay)\n         self.tx_getdata_count = 0\n \n     def on_getdata(self, message):"
      },
      {
        "sha": "0827e906d6effe8b4e3bc5cc5c259c39247d0200",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a07910abcd580ed07187794cf0e1faf040bb4212/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a07910abcd580ed07187794cf0e1faf040bb4212/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=a07910abcd580ed07187794cf0e1faf040bb4212",
        "patch": "@@ -289,7 +289,7 @@ class P2PInterface(P2PConnection):\n \n     Individual testcases should subclass this and override the on_* methods\n     if they want to alter message handling behaviour.\"\"\"\n-    def __init__(self, support_addrv2=False):\n+    def __init__(self, support_addrv2=False, wtxidrelay=True):\n         super().__init__()\n \n         # Track number of messages of each type received.\n@@ -309,6 +309,9 @@ def __init__(self, support_addrv2=False):\n \n         self.support_addrv2 = support_addrv2\n \n+        # If the peer supports wtxid-relay\n+        self.wtxidrelay = wtxidrelay\n+\n     def peer_connect(self, *args, services=NODE_NETWORK|NODE_WITNESS, send_version=True, **kwargs):\n         create_conn = super().peer_connect(*args, **kwargs)\n \n@@ -394,7 +397,7 @@ def on_verack(self, message):\n \n     def on_version(self, message):\n         assert message.nVersion >= MIN_VERSION_SUPPORTED, \"Version {} received. Test framework only supports versions greater than {}\".format(message.nVersion, MIN_VERSION_SUPPORTED)\n-        if message.nVersion >= 70016:\n+        if message.nVersion >= 70016 and self.wtxidrelay:\n             self.send_message(msg_wtxidrelay())\n         self.send_message(msg_verack())\n         if self.support_addrv2:"
      }
    ]
  },
  {
    "sha": "06efb3163cdf30e74df3f78afc4896b0f55ce937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmVmYjMxNjNjZGYzMGU3NGRmM2Y3OGFmYzQ4OTZiMGY1NWNlOTM3",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-10-17T15:22:01Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-11-02T23:29:49Z"
      },
      "message": "Add functional test test_txid_inv_delay\n\nAdd a simple functional test to cover TXID_RELAY_DELAY as applied\nas a TxRequestTracker parameter in AddTxAnnoucement.",
      "tree": {
        "sha": "02f54d64c7fcdc8d5792296831a6e4f8acc539c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02f54d64c7fcdc8d5792296831a6e4f8acc539c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06efb3163cdf30e74df3f78afc4896b0f55ce937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06efb3163cdf30e74df3f78afc4896b0f55ce937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06efb3163cdf30e74df3f78afc4896b0f55ce937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06efb3163cdf30e74df3f78afc4896b0f55ce937/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a07910abcd580ed07187794cf0e1faf040bb4212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a07910abcd580ed07187794cf0e1faf040bb4212",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a07910abcd580ed07187794cf0e1faf040bb4212"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b82ca95cbe37e9e7fa1e65e6e904343cddc7d38b",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06efb3163cdf30e74df3f78afc4896b0f55ce937/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06efb3163cdf30e74df3f78afc4896b0f55ce937/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=06efb3163cdf30e74df3f78afc4896b0f55ce937",
        "patch": "@@ -216,6 +216,25 @@ def test_preferred_inv(self):\n         with p2p_lock:\n             assert_equal(peer.tx_getdata_count, 1)\n \n+    def test_txid_inv_delay(self, glob_wtxid=False):\n+        self.log.info('Check that inv from a txid-relay peers are delayed by {} s, with a wtxid peer {}'.format(TXID_RELAY_DELAY, glob_wtxid))\n+        self.restart_node(0, extra_args=['-whitelist=noban@127.0.0.1'])\n+        mock_time = int(time.time() + 1)\n+        self.nodes[0].setmocktime(mock_time)\n+        peer = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=False))\n+        if glob_wtxid:\n+            # Add a second wtxid-relay connection otherwise TXID_RELAY_DELAY is waived in\n+            # lack of wtxid-relay peers\n+            self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=True))\n+        peer.send_message(msg_inv([CInv(t=MSG_TX, h=0xff11ff11)]))\n+        peer.sync_with_ping()\n+        with p2p_lock:\n+            assert_equal(peer.tx_getdata_count, 0 if glob_wtxid else 1)\n+        self.nodes[0].setmocktime(mock_time + TXID_RELAY_DELAY)\n+        peer.wait_until(lambda: peer.tx_getdata_count >= 1, timeout=1)\n+        with p2p_lock:\n+            assert_equal(peer.tx_getdata_count, 1)\n+\n     def test_large_inv_batch(self):\n         self.log.info('Test how large inv batches are handled with relay permission')\n         self.restart_node(0, extra_args=['-whitelist=relay@127.0.0.1'])\n@@ -242,6 +261,8 @@ def run_test(self):\n         self.test_disconnect_fallback()\n         self.test_notfound_fallback()\n         self.test_preferred_inv()\n+        self.test_txid_inv_delay()\n+        self.test_txid_inv_delay(True)\n         self.test_large_inv_batch()\n         self.test_spurious_notfound()\n "
      }
    ]
  },
  {
    "sha": "d3b5eac9a989878e2e09e5fde71c49149b123f18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2I1ZWFjOWE5ODk4NzhlMmUwOWU1ZmRlNzFjNDkxNDliMTIzZjE4",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-10-22T13:20:49Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-11-02T23:29:49Z"
      },
      "message": "Add mutation for functional test test_preferred_inv\n\nAdd a booelan arg to test_preferred_inv to cover NONPREF_PEER_TX_DELAY\nas applied as a TxRequestTracker parameter in AddTxAnnouncement.",
      "tree": {
        "sha": "7c07442194f9a794fa506e857db993c2a5e4b544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c07442194f9a794fa506e857db993c2a5e4b544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3b5eac9a989878e2e09e5fde71c49149b123f18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b5eac9a989878e2e09e5fde71c49149b123f18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b5eac9a989878e2e09e5fde71c49149b123f18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b5eac9a989878e2e09e5fde71c49149b123f18/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "06efb3163cdf30e74df3f78afc4896b0f55ce937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06efb3163cdf30e74df3f78afc4896b0f55ce937",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06efb3163cdf30e74df3f78afc4896b0f55ce937"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 18,
      "deletions": 6
    },
    "files": [
      {
        "sha": "164ab4b1266b7c6c3c6a79cdd5bf211bc9589a87",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b5eac9a989878e2e09e5fde71c49149b123f18/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b5eac9a989878e2e09e5fde71c49149b123f18/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=d3b5eac9a989878e2e09e5fde71c49149b123f18",
        "patch": "@@ -47,6 +47,7 @@ def on_getdata(self, message):\n OVERLOADED_PEER_DELAY = 2 # seconds\n MAX_GETDATA_IN_FLIGHT = 100\n MAX_PEER_TX_ANNOUNCEMENTS = 5000\n+NONPREF_PEER_TX_DELAY = 2\n \n # Python test constants\n NUM_INBOUND = 10\n@@ -207,14 +208,24 @@ def test_notfound_fallback(self):\n         with p2p_lock:\n             assert_equal(peer_fallback.tx_getdata_count, 1)\n \n-    def test_preferred_inv(self):\n-        self.log.info('Check that invs from preferred peers are downloaded immediately')\n-        self.restart_node(0, extra_args=['-whitelist=noban@127.0.0.1'])\n+    def test_preferred_inv(self, preferred=False):\n+        if preferred:\n+            self.log.info('Check invs from preferred peers are downloaded immediately')\n+            self.restart_node(0, extra_args=['-whitelist=noban@127.0.0.1'])\n+        else:\n+            self.log.info('Check invs from non-preferred peers are downloaded after {} s'.format(NONPREF_PEER_TX_DELAY))\n+        mock_time = int(time.time() + 1)\n+        self.nodes[0].setmocktime(mock_time)\n         peer = self.nodes[0].add_p2p_connection(TestP2PConn())\n         peer.send_message(msg_inv([CInv(t=MSG_WTX, h=0xff00ff00)]))\n-        peer.wait_until(lambda: peer.tx_getdata_count >= 1, timeout=1)\n-        with p2p_lock:\n-            assert_equal(peer.tx_getdata_count, 1)\n+        peer.sync_with_ping()\n+        if preferred:\n+            peer.wait_until(lambda: peer.tx_getdata_count >= 1, timeout=1)\n+        else:\n+            with p2p_lock:\n+                assert_equal(peer.tx_getdata_count, 0)\n+            self.nodes[0].setmocktime(mock_time + NONPREF_PEER_TX_DELAY)\n+            peer.wait_until(lambda: peer.tx_getdata_count >= 1, timeout=1)\n \n     def test_txid_inv_delay(self, glob_wtxid=False):\n         self.log.info('Check that inv from a txid-relay peers are delayed by {} s, with a wtxid peer {}'.format(TXID_RELAY_DELAY, glob_wtxid))\n@@ -261,6 +272,7 @@ def run_test(self):\n         self.test_disconnect_fallback()\n         self.test_notfound_fallback()\n         self.test_preferred_inv()\n+        self.test_preferred_inv(True)\n         self.test_txid_inv_delay()\n         self.test_txid_inv_delay(True)\n         self.test_large_inv_batch()"
      }
    ]
  },
  {
    "sha": "bc4a23008762702ffcd6868bcdb8fe2a732640ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzRhMjMwMDg3NjI3MDJmZmNkNjg2OGJjZGI4ZmUyYTczMjY0MGJh",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-10-22T13:23:43Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-11-02T23:29:49Z"
      },
      "message": "Remove redundant p2p lock tacking for tx download functional tests\n\nNew functional test coverage of tx download was added by #19988,\nbut `with p2p_lock` is redundant for some tests with `wait_until`\ntest helper, already guaranteeing test lock tacking.",
      "tree": {
        "sha": "8ed7b35be4d20bddf7355343e43a233995fb9724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed7b35be4d20bddf7355343e43a233995fb9724"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc4a23008762702ffcd6868bcdb8fe2a732640ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4a23008762702ffcd6868bcdb8fe2a732640ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4a23008762702ffcd6868bcdb8fe2a732640ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4a23008762702ffcd6868bcdb8fe2a732640ba/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d3b5eac9a989878e2e09e5fde71c49149b123f18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b5eac9a989878e2e09e5fde71c49149b123f18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b5eac9a989878e2e09e5fde71c49149b123f18"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 0,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8a751c6b54b80a72654cb2b8664fbc536b0ecaa2",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4a23008762702ffcd6868bcdb8fe2a732640ba/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4a23008762702ffcd6868bcdb8fe2a732640ba/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=bc4a23008762702ffcd6868bcdb8fe2a732640ba",
        "patch": "@@ -169,8 +169,6 @@ def test_expiry_fallback(self):\n             assert_equal(peer_fallback.tx_getdata_count, 0)\n         self.nodes[0].setmocktime(int(time.time()) + GETDATA_TX_INTERVAL + 1)  # Wait for request to peer_expiry to expire\n         peer_fallback.wait_until(lambda: peer_fallback.tx_getdata_count >= 1, timeout=1)\n-        with p2p_lock:\n-            assert_equal(peer_fallback.tx_getdata_count, 1)\n         self.restart_node(0)  # reset mocktime\n \n     def test_disconnect_fallback(self):\n@@ -188,8 +186,6 @@ def test_disconnect_fallback(self):\n         peer_disconnect.peer_disconnect()\n         peer_disconnect.wait_for_disconnect()\n         peer_fallback.wait_until(lambda: peer_fallback.tx_getdata_count >= 1, timeout=1)\n-        with p2p_lock:\n-            assert_equal(peer_fallback.tx_getdata_count, 1)\n \n     def test_notfound_fallback(self):\n         self.log.info('Check that notfounds will select another peer for download immediately')\n@@ -205,8 +201,6 @@ def test_notfound_fallback(self):\n             assert_equal(peer_fallback.tx_getdata_count, 0)\n         peer_notfound.send_and_ping(msg_notfound(vec=[CInv(MSG_WTX, WTXID)]))  # Send notfound, so that fallback peer is selected\n         peer_fallback.wait_until(lambda: peer_fallback.tx_getdata_count >= 1, timeout=1)\n-        with p2p_lock:\n-            assert_equal(peer_fallback.tx_getdata_count, 1)\n \n     def test_preferred_inv(self, preferred=False):\n         if preferred:\n@@ -243,8 +237,6 @@ def test_txid_inv_delay(self, glob_wtxid=False):\n             assert_equal(peer.tx_getdata_count, 0 if glob_wtxid else 1)\n         self.nodes[0].setmocktime(mock_time + TXID_RELAY_DELAY)\n         peer.wait_until(lambda: peer.tx_getdata_count >= 1, timeout=1)\n-        with p2p_lock:\n-            assert_equal(peer.tx_getdata_count, 1)\n \n     def test_large_inv_batch(self):\n         self.log.info('Test how large inv batches are handled with relay permission')\n@@ -259,8 +251,6 @@ def test_large_inv_batch(self):\n         peer.send_message(msg_inv([CInv(t=MSG_WTX, h=wtxid) for wtxid in range(MAX_PEER_TX_ANNOUNCEMENTS + 1)]))\n         peer.wait_until(lambda: peer.tx_getdata_count == MAX_PEER_TX_ANNOUNCEMENTS)\n         peer.sync_with_ping()\n-        with p2p_lock:\n-            assert_equal(peer.tx_getdata_count, MAX_PEER_TX_ANNOUNCEMENTS)\n \n     def test_spurious_notfound(self):\n         self.log.info('Check that spurious notfound is ignored')"
      }
    ]
  }
]