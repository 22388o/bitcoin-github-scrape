[
  {
    "sha": "fab04969fba2e846f8763a82e6bd8e66c8bb2328",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIwNDk2OWZiYTJlODQ2Zjg3NjNhODJlNmJkOGU2NmM4YmIyMzI4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-20T18:25:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-27T16:26:22Z"
      },
      "message": "util: Remove code to cache datadir",
      "tree": {
        "sha": "ca42e673df25d195d477a97da748bd5826cb1d9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca42e673df25d195d477a97da748bd5826cb1d9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab04969fba2e846f8763a82e6bd8e66c8bb2328",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjaWgv+Id70ope0kbPeSnV+4mh+7eytwdaVIR97FTN2UzcNLfFVG+NUGn7shBOp\neskHO4OheYDU/iUg3xMKpaDdzZORkZvqgonhNJRo6ERE7TcsEKZtcXbi31/pDIlX\nsWFgJWqnMnKZS/lG90iNeKdj0WvpvtJRGIq2Vl8IcgkFqhZ84HUrYPgN5hDwpfNR\nPF8m+5CtYDrh8JtAzzmwSAgmqiacrh6VJo3aHlue9BapJOb5LUIq2FUr//sqwfMi\nSAlgWEa5YxQWBJEwOBzizaDWkcrpdiQUsREnigwMN/RJjp9Qwj5/j2fba2BMLJ8U\nPVcBNBrvq7rLfraKngU88BwS4Q13vZNV1UJQAfM8bSAzvXbChHihKl10KRE9KPYT\nYGZSHp+iFPJ87ehfZ38EdsVls3IhuszDwg5Dys5XP4jlR/ZMvYrVcXxKcStY+ySN\nvc1rVvcVS2Qd9mvgNAXKQQvMBXgjbF2h9xGCZXaRmV8St8WYXN7uPpDn6Uhh7hQw\nxhmnlcPH\n=6R2E\n-----END PGP SIGNATURE-----",
        "payload": "tree ca42e673df25d195d477a97da748bd5826cb1d9d\nparent 7400135b7918df9c34206bead744c496e07b0e78\nauthor MarcoFalke <falke.marco@gmail.com> 1561055133 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1561652782 -0400\n\nutil: Remove code to cache datadir\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab04969fba2e846f8763a82e6bd8e66c8bb2328",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab04969fba2e846f8763a82e6bd8e66c8bb2328",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab04969fba2e846f8763a82e6bd8e66c8bb2328/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7400135b7918df9c34206bead744c496e07b0e78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7400135b7918df9c34206bead744c496e07b0e78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7400135b7918df9c34206bead744c496e07b0e78"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 15,
      "deletions": 49
    },
    "files": [
      {
        "sha": "223bf6f00cc6c4d2a4cde403a7022322d7c4bf8d",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab04969fba2e846f8763a82e6bd8e66c8bb2328/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab04969fba2e846f8763a82e6bd8e66c8bb2328/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=fab04969fba2e846f8763a82e6bd8e66c8bb2328",
        "patch": "@@ -42,7 +42,6 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n     fs::create_directories(m_path_root);\n     gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\n-    ClearDatadirCache();\n     SelectParams(chainName);\n     gArgs.ForceSetArg(\"-printtoconsole\", \"0\");\n     InitLogging();\n@@ -73,7 +72,6 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     const CChainParams& chainparams = Params();\n     // Ideally we'd move all the RPC tests to the functional testing framework\n     // instead of unit tests, but for now we need these here.\n-\n     RegisterAllCoreRPCCommands(tableRPC);\n \n     // We have to run a scheduler thread to prevent ActivateBestChain"
      },
      {
        "sha": "79399844311b9ab42b3b0253c4de881a502aa1a9",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 40,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab04969fba2e846f8763a82e6bd8e66c8bb2328/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab04969fba2e846f8763a82e6bd8e66c8bb2328/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=fab04969fba2e846f8763a82e6bd8e66c8bb2328",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -702,23 +702,9 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n-static fs::path g_blocks_path_cache_net_specific;\n-static fs::path pathCached;\n-static fs::path pathCachedNetSpecific;\n-static CCriticalSection csPathCached;\n-\n-const fs::path &GetBlocksDir()\n+fs::path GetBlocksDir()\n {\n-\n-    LOCK(csPathCached);\n-\n-    fs::path &path = g_blocks_path_cache_net_specific;\n-\n-    // This can be called during exceptions by LogPrintf(), so we cache the\n-    // value so we don't have to do memory allocations after that.\n-    if (!path.empty())\n-        return path;\n-\n+    fs::path path;\n     if (gArgs.IsArgSet(\"-blocksdir\")) {\n         path = fs::system_complete(gArgs.GetArg(\"-blocksdir\", \"\"));\n         if (!fs::is_directory(path)) {\n@@ -731,22 +717,15 @@ const fs::path &GetBlocksDir()\n \n     path /= BaseParams().DataDir();\n     path /= \"blocks\";\n-    fs::create_directories(path);\n+    static bool create_dir_once{true}; // Avoid hitting disk more than once\n+    if (create_dir_once) fs::create_directories(path);\n+    create_dir_once = false;\n     return path;\n }\n \n-const fs::path &GetDataDir(bool fNetSpecific)\n+fs::path GetDataDir(bool fNetSpecific)\n {\n-\n-    LOCK(csPathCached);\n-\n-    fs::path &path = fNetSpecific ? pathCachedNetSpecific : pathCached;\n-\n-    // This can be called during exceptions by LogPrintf(), so we cache the\n-    // value so we don't have to do memory allocations after that.\n-    if (!path.empty())\n-        return path;\n-\n+    fs::path path;\n     if (gArgs.IsArgSet(\"-datadir\")) {\n         path = fs::system_complete(gArgs.GetArg(\"-datadir\", \"\"));\n         if (!fs::is_directory(path)) {\n@@ -759,23 +738,16 @@ const fs::path &GetDataDir(bool fNetSpecific)\n     if (fNetSpecific)\n         path /= BaseParams().DataDir();\n \n-    if (fs::create_directories(path)) {\n+    static bool create_dir_once{true}; // Avoid hitting disk more than once\n+    if (create_dir_once && fs::create_directories(path)) {\n         // This is the first run, create wallets subdirectory too\n         fs::create_directories(path / \"wallets\");\n     }\n+    create_dir_once = false;\n \n     return path;\n }\n \n-void ClearDatadirCache()\n-{\n-    LOCK(csPathCached);\n-\n-    pathCached = fs::path();\n-    pathCachedNetSpecific = fs::path();\n-    g_blocks_path_cache_net_specific = fs::path();\n-}\n-\n fs::path GetConfigFile(const std::string& confPath)\n {\n     return AbsPathForConfigVal(fs::path(confPath), false);\n@@ -939,7 +911,6 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     }\n \n     // If datadir is changed in .conf file:\n-    ClearDatadirCache();\n     if (!fs::is_directory(GetDataDir(false))) {\n         error = strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n         return false;"
      },
      {
        "sha": "1a3229214e2142dd51f99a60aa957783f98e38fb",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab04969fba2e846f8763a82e6bd8e66c8bb2328/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab04969fba2e846f8763a82e6bd8e66c8bb2328/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=fab04969fba2e846f8763a82e6bd8e66c8bb2328",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -20,18 +20,16 @@\n #include <fs.h>\n #include <logging.h>\n #include <sync.h>\n-#include <util/threadnames.h>\n #include <tinyformat.h>\n #include <util/memory.h>\n+#include <util/threadnames.h>\n #include <util/time.h>\n \n-#include <atomic>\n #include <exception>\n #include <map>\n #include <set>\n #include <stdint.h>\n #include <string>\n-#include <unordered_set>\n #include <utility>\n #include <vector>\n \n@@ -83,9 +81,8 @@ void ReleaseDirectoryLocks();\n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n // The blocks directory is always net specific.\n-const fs::path &GetBlocksDir();\n-const fs::path &GetDataDir(bool fNetSpecific = true);\n-void ClearDatadirCache();\n+fs::path GetBlocksDir();\n+fs::path GetDataDir(bool fNetSpecific = true);\n fs::path GetConfigFile(const std::string& confPath);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);"
      }
    ]
  }
]