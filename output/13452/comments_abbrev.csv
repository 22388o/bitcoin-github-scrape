MarcoFalke,2018-06-12T22:20:22Z,"utACK 614fd8db3259b01e47d7b551ac389bd3137c8c5a. Looks like a nice belt-and-suspenders with no strings attached: I think it is reasonable for a node to fail here, in case it hasn't downloaded the transactions (and thus doesn't know the number of transactions).",https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-396753093,396753093,
luke-jr,2018-06-12T22:46:14Z,utACK,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-396758390,396758390,
achow101,2018-06-12T23:15:21Z,utACK 614fd8db3259b01e47d7b551ac389bd3137c8c5a,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-396763836,396763836,
instagibbs,2018-06-14T13:55:58Z,took @sipa suggestions,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-397304674,397304674,
luke-jr,2018-06-16T04:22:04Z,"I think this actually breaks in pruned mode, since nTx gets set to 0. :/\n\n( Actually, I can't find where pruning resets nTx... just asserts and comments implying it must. :| )",https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-397785574,397785574,
sipa,2018-06-16T04:26:30Z,@luke-jr Really? That would be unfortunate. I assumed that nTX == 0 was only the case if we never accepted the full block.,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-397785745,397785745,
luke-jr,2018-06-16T04:32:51Z,"I'm not sure on the actual behaviour right now, since I can't find where it's zeroed. It may be that the asserts are an unrelated bug (but I'd expect we'd have noticed if that were the case).",https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-397785979,397785979,
sipa,2018-06-16T04:40:10Z,Can you point to the asserts?,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-397786282,397786282,
luke-jr,2018-06-16T16:15:04Z,"Nevermind, looks like there's only one left in master, and it's wrapped under a `!fHavePruned` check.",https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-397822909,397822909,
instagibbs,2018-06-18T13:51:16Z,">I think this actually breaks in pruned mode, since nTx gets set to 0. :/\n\nThis is hopefully not the case, because I have a merged PR with tests that pass https://github.com/bitcoin/bitcoin/pull/13451",https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-398060946,398060946,
sipa,2018-06-22T02:19:11Z,utACK ed82f1700006830b6fe34572b66245c1487ccd29,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-399300178,399300178,
instagibbs,2018-06-22T14:42:44Z,"cherry-picked @sdaftuar test, thanks!",https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-399466436,399466436,
DrahtBot,2018-06-26T11:24:58Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13054 (tests: Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports. by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merge",https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-400273218,400273218,
laanwj,2018-07-09T18:25:43Z,utACK d280617bf569f84457eaea546541dc74c67cd1e4,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-403575056,403575056,
fanquake,2018-07-13T23:57:35Z,Should be backported in #13644.,https://github.com/bitcoin/bitcoin/pull/13452#issuecomment-404981754,404981754,
sipa,2018-06-13T18:34:13Z,"Is it right to throw an RPC error here? This is more similar to being given an invalid proof (as opposed to an incorrectly formatted/unusable one), in which case Null is returned currently.",https://github.com/bitcoin/bitcoin/pull/13452#discussion_r195191761,195191761,src/rpc/rawtransaction.cpp
instagibbs,2018-06-13T18:43:22Z,"deja vu: https://github.com/bitcoin/bitcoin/pull/11120#discussion_r174324384\n\n(I can also just have it clear the return list)",https://github.com/bitcoin/bitcoin/pull/13452#discussion_r195194750,195194750,src/rpc/rawtransaction.cpp
sipa,2018-06-13T18:49:16Z,"Yes, I feel there is a big difference between not having the block (which means being unable to validate) and being given an intentionally fraudulent proof.\n\nRequiring software to deal and match RPC errors instead of being covered by dealing with the existing ""invalid proof"" case sounds much nicer.\n\nI also think you need to check for `nTx = 0` by the way (as it may mean a block for which w",https://github.com/bitcoin/bitcoin/pull/13452#discussion_r195196561,195196561,src/rpc/rawtransaction.cpp
luke-jr,2018-06-16T04:16:33Z,@sipa Is it well-defined that a headers-only blockindex will have nTx==0? The comments say nTx simply is unreliable in that case...,https://github.com/bitcoin/bitcoin/pull/13452#discussion_r195893347,195893347,src/rpc/rawtransaction.cpp
sdaftuar,2018-06-21T20:28:29Z,"`pindex->nTx == 0` implies `!chainActive.Contains(pindex)`, so I think we can eliminate that condition.  You can't be in chainactive if you never received the transactions for a block.  Alternatively, we could add a comment for future readers that explains that this is redundant.",https://github.com/bitcoin/bitcoin/pull/13452#discussion_r197266851,197266851,src/rpc/rawtransaction.cpp
sdaftuar,2018-06-21T20:30:29Z,"nit: I think if the proof lies about the number of transactions, we should throw an error, rather than just return an empty list, but I don't feel strongly about the API if you like it this way.",https://github.com/bitcoin/bitcoin/pull/13452#discussion_r197267421,197267421,src/rpc/rawtransaction.cpp
sdaftuar,2018-06-21T20:32:24Z,"I think we should leave the language here unchanged?  If we can't validate the proof because the number of transactions differs from what we stored in our blockindex, then the proof is invalid!",https://github.com/bitcoin/bitcoin/pull/13452#discussion_r197267920,197267920,src/rpc/rawtransaction.cpp
