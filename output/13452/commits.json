[
  {
    "sha": "ed82f1700006830b6fe34572b66245c1487ccd29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDgyZjE3MDAwMDY4MzBiNmZlMzQ1NzJiNjYyNDVjMTQ4N2NjZDI5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-06-12T21:10:21Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-06-14T13:54:41Z"
      },
      "message": "have verifytxoutproof check the number of txns in proof structure",
      "tree": {
        "sha": "66efe0c8b9c3973bda3a9915f6623290ee46e459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66efe0c8b9c3973bda3a9915f6623290ee46e459"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed82f1700006830b6fe34572b66245c1487ccd29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed82f1700006830b6fe34572b66245c1487ccd29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed82f1700006830b6fe34572b66245c1487ccd29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed82f1700006830b6fe34572b66245c1487ccd29/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a607d23ae82ee374799d21d02932d945c1ce9616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607d23ae82ee374799d21d02932d945c1ce9616",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a607d23ae82ee374799d21d02932d945c1ce9616"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 15,
      "deletions": 4
    },
    "files": [
      {
        "sha": "984e33a96160cc613a01be41ec57d1a21d1366e5",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed82f1700006830b6fe34572b66245c1487ccd29/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed82f1700006830b6fe34572b66245c1487ccd29/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=ed82f1700006830b6fe34572b66245c1487ccd29",
        "patch": "@@ -115,6 +115,12 @@ class CPartialMerkleTree\n      * returns the merkle root, or 0 in case of failure\n      */\n     uint256 ExtractMatches(std::vector<uint256> &vMatch, std::vector<unsigned int> &vnIndex);\n+\n+    /** Get number of transactions the merkle proof is indicating for cross-reference with\n+     * local blockchain knowledge.\n+     */\n+    unsigned int GetNumTransactions() const { return nTransactions; };\n+\n };\n \n "
      },
      {
        "sha": "a42119603267e81d3015c7f76fd02daebf7706d8",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed82f1700006830b6fe34572b66245c1487ccd29/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed82f1700006830b6fe34572b66245c1487ccd29/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ed82f1700006830b6fe34572b66245c1487ccd29",
        "patch": "@@ -307,7 +307,7 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"proof\\\"    (string, required) The hex-encoded proof generated by gettxoutproof\\n\"\n             \"\\nResult:\\n\"\n-            \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\\n\"\n+            \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n         );\n \n     CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n@@ -324,12 +324,17 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     const CBlockIndex* pindex = LookupBlockIndex(merkleBlock.header.GetHash());\n-    if (!pindex || !chainActive.Contains(pindex)) {\n+    if (!pindex || !chainActive.Contains(pindex) || pindex->nTx == 0) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }\n \n-    for (const uint256& hash : vMatch)\n-        res.push_back(hash.GetHex());\n+    // Check if proof is valid, only add results if so\n+    if (pindex->nTx == merkleBlock.txn.GetNumTransactions()) {\n+        for (const uint256& hash : vMatch) {\n+            res.push_back(hash.GetHex());\n+        }\n+    }\n+\n     return res;\n }\n "
      }
    ]
  },
  {
    "sha": "d280617bf569f84457eaea546541dc74c67cd1e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjgwNjE3YmY1NjlmODQ0NTdlYWVhNTQ2NTQxZGM3NGM2N2NkMWU0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-06-20T20:03:25Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-06-22T14:41:39Z"
      },
      "message": "[qa] Add a test for merkle proof malleation",
      "tree": {
        "sha": "c862fc8c8180cd289c69d350bec9433da5dfc64d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c862fc8c8180cd289c69d350bec9433da5dfc64d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d280617bf569f84457eaea546541dc74c67cd1e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d280617bf569f84457eaea546541dc74c67cd1e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d280617bf569f84457eaea546541dc74c67cd1e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d280617bf569f84457eaea546541dc74c67cd1e4/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed82f1700006830b6fe34572b66245c1487ccd29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed82f1700006830b6fe34572b66245c1487ccd29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed82f1700006830b6fe34572b66245c1487ccd29"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 69,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e5a63f0c467afd8b3ace2c348acb0ea73d4e3cf9",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d280617bf569f84457eaea546541dc74c67cd1e4/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d280617bf569f84457eaea546541dc74c67cd1e4/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=d280617bf569f84457eaea546541dc74c67cd1e4",
        "patch": "@@ -6,6 +6,8 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import FromHex, ToHex\n+from test_framework.messages import CMerkleBlock\n \n class MerkleBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -78,6 +80,27 @@ def run_test(self):\n         # We can't get a proof if we specify transactions from different blocks\n         assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n \n+        # Now we'll try tweaking a proof.\n+        proof = self.nodes[3].gettxoutproof([txid1, txid2])\n+        assert txid1 in self.nodes[0].verifytxoutproof(proof)\n+        assert txid2 in self.nodes[1].verifytxoutproof(proof)\n+\n+        tweaked_proof = FromHex(CMerkleBlock(), proof)\n+\n+        # Make sure that our serialization/deserialization is working\n+        assert txid1 in self.nodes[2].verifytxoutproof(ToHex(tweaked_proof))\n+\n+        # Check to see if we can go up the merkle tree and pass this off as a\n+        # single-transaction block\n+        tweaked_proof.txn.nTransactions = 1\n+        tweaked_proof.txn.vHash = [tweaked_proof.header.hashMerkleRoot]\n+        tweaked_proof.txn.vBits = [True] + [False]*7\n+\n+        for n in self.nodes:\n+            assert not n.verifytxoutproof(ToHex(tweaked_proof))\n+\n+        # TODO: try more variants, eg transactions at different depths, and\n+        # verify that the proofs are invalid\n \n if __name__ == '__main__':\n     MerkleBlockTest().main()"
      },
      {
        "sha": "df8d424d01b1e4318c6488179593fca02b21aca5",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d280617bf569f84457eaea546541dc74c67cd1e4/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d280617bf569f84457eaea546541dc74c67cd1e4/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=d280617bf569f84457eaea546541dc74c67cd1e4",
        "patch": "@@ -841,6 +841,52 @@ def serialize(self, with_witness=True):\n     def __repr__(self):\n         return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n \n+class CPartialMerkleTree():\n+    def __init__(self):\n+        self.nTransactions = 0\n+        self.vHash = []\n+        self.vBits = []\n+        self.fBad = False\n+\n+    def deserialize(self, f):\n+        self.nTransactions = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vHash = deser_uint256_vector(f)\n+        vBytes = deser_string(f)\n+        self.vBits = []\n+        for i in range(len(vBytes) * 8):\n+            self.vBits.append(vBytes[i//8] & (1 << (i % 8)) != 0)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<i\", self.nTransactions)\n+        r += ser_uint256_vector(self.vHash)\n+        vBytesArray = bytearray([0x00] * ((len(self.vBits) + 7)//8))\n+        for i in range(len(self.vBits)):\n+            vBytesArray[i // 8] |= self.vBits[i] << (i % 8)\n+        r += ser_string(bytes(vBytesArray))\n+        return r\n+\n+    def __repr__(self):\n+        return \"CPartialMerkleTree(nTransactions=%d, vHash=%s, vBits=%s)\" % (self.nTransactions, repr(self.vHash), repr(self.vBits))\n+\n+class CMerkleBlock():\n+    def __init__(self):\n+        self.header = CBlockHeader()\n+        self.txn = CPartialMerkleTree()\n+\n+    def deserialize(self, f):\n+        self.header.deserialize(f)\n+        self.txn.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.header.serialize()\n+        r += self.txn.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"CMerkleBlock(header=%s, txn=%s)\" % (repr(self.header), repr(self.txn))\n+\n \n # Objects that correspond to messages on the wire\n class msg_version():"
      }
    ]
  }
]