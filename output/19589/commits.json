[
  {
    "sha": "fa1f7f28cbc48675514a01c4ca773f1ba8ea836b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFmN2YyOGNiYzQ4Njc1NTE0YTAxYzRjYTc3M2YxYmE4ZWE4MzZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-26T07:30:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-26T13:43:35Z"
      },
      "message": "rpc: Style fixups in gettxoutproof",
      "tree": {
        "sha": "05e13f73cbc1b5e3bf11cceccfde36083a475d8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05e13f73cbc1b5e3bf11cceccfde36083a475d8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjeegv/Z7gXUxx7+UR4ITI5OBFq1GhzEuyrDGMciNirTitz0HMQCYP6OnTxTw7W\nx7pQPlg71XIdZAodofPvWMuYgf8qjo+N3MFi+5+o8idnn/yVDLZRbfAe5djYlfQw\nv13hHbSvv6EXnFvq7HR/bEnylk2F3UQSZcRGwGqFx/B5U1G4yluyq9MzwSJn0wh9\nuVbmmNzhkXgUaxFClUKkYR4WclrD9FXGbCRjwsvRNZLE43E5wknjGgBzc4S2VU6R\n2aJmu/v5IGfAzHyjgyCPmi8xEYAJQjQgiwfYSMyEXHgozNC/aIxb7oF606YCMn1n\no2ZPV9ozlv0N5uMhNBBYJGmOY/H/ufbbrSC9/qneUH1JoaxrGBwrfbi6tGjVPbXe\n/msyOq2YnwzwnSj7AE3ZjaNCxfd3KF5TL8QmWemlao41o5q/u2j2vw3dBxOlBmEE\nC2HOrM79px0IE6YhCXtg9sYc0UhfAILLb6DFoG/AqdGomL9BRa2+HQ5Qfq8urwf8\nM0DA7Q2f\n=6nqv\n-----END PGP SIGNATURE-----",
        "payload": "tree 05e13f73cbc1b5e3bf11cceccfde36083a475d8d\nparent 40a04814d130dfc9131af3f568eb44533e2bcbfc\nauthor MarcoFalke <falke.marco@gmail.com> 1595748601 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1595771015 +0200\n\nrpc: Style fixups in gettxoutproof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a04814d130dfc9131af3f568eb44533e2bcbfc"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 14,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8c5a7c87d06e5e6ab7e059cde762c092c4c31e85",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa1f7f28cbc48675514a01c4ca773f1ba8ea836b",
        "patch": "@@ -245,10 +245,11 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n         const UniValue& txid = txids[idx];\n         uint256 hash(ParseHashV(txid, \"txid\"));\n-        if (setTxids.count(hash))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated txid: \")+txid.get_str());\n-       setTxids.insert(hash);\n-       oneTxid = hash;\n+        if (setTxids.count(hash)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated txid: \") + txid.get_str());\n+        }\n+        setTxids.insert(hash);\n+        oneTxid = hash;\n     }\n \n     CBlockIndex* pblockindex = nullptr;\n@@ -281,8 +282,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    if (pblockindex == nullptr)\n-    {\n+    if (pblockindex == nullptr) {\n         CTransactionRef tx;\n         if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock) || hashBlock.IsNull())\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n@@ -293,15 +293,19 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     }\n \n     CBlock block;\n-    if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+    }\n \n     unsigned int ntxFound = 0;\n-    for (const auto& tx : block.vtx)\n-        if (setTxids.count(tx->GetHash()))\n+    for (const auto& tx : block.vtx) {\n+        if (setTxids.count(tx->GetHash())) {\n             ntxFound++;\n-    if (ntxFound != setTxids.size())\n+        }\n+    }\n+    if (ntxFound != setTxids.size()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Not all transactions found in specified or retrieved block\");\n+    }\n \n     CDataStream ssMB(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock mb(block, setTxids);"
      }
    ]
  },
  {
    "sha": "fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU5NzlkMTJmOGM2NTc1NGUzNmNkZGRiOWQwMzJhYjgxZmVjYzNh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-26T07:59:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-26T14:44:07Z"
      },
      "message": "rpc: Avoid useless mempool query in gettxoutproof",
      "tree": {
        "sha": "a54fffd712e30582f707323f269da5204cc304ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a54fffd712e30582f707323f269da5204cc304ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi5PQv/XySVPT/OVwNw2hsTYeJ+Y0V6Hb2n+vkP7FfVkecGTjanYzSFhfGcn1sX\nSLN4DpEnlhX2BOSilUx51TMxDAGShVPSq0Dupr5x8oHR30jLr+MI8ANMBqetK3Ey\nmLBIosr9ye0jvQCAzd9Q3l0aCMMmb+Qmfo95qcBodv6Yx1jicbvdabgvfnidD9iI\n7IsT6/EfneJtNSjyHeJmp4Rl6eGZvoIze8VVVvhR3uZbDlTC9USbP4ngZMULBPeb\nvpPaPjf6JpPo0dl9cmSSmyk0kdddw51pNdRqZHwqu3/acpj5ke7IbnEdCJcKmIRm\n/ggYPxGxMoPiY8HIM3JuTwG9rSwcoC8/cXmbRzPVxep2yo4cBTnvU3LqNjjU0CZi\n+ymOWkHkWXCSCyzDZfxKw1y8iVaoTu/HUTeQakGdogDtbE5xTAac6F/iu2djgnhN\nh8x2j2xrcLNM21EJaE3h0WtL+ELNWb9LdAaHYQ+weirvNrfET/ISEJCVIk5TR+uG\nQ+lws5Cq\n=9ikT\n-----END PGP SIGNATURE-----",
        "payload": "tree a54fffd712e30582f707323f269da5204cc304ff\nparent fa1f7f28cbc48675514a01c4ca773f1ba8ea836b\nauthor MarcoFalke <falke.marco@gmail.com> 1595750351 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1595774647 +0200\n\nrpc: Avoid useless mempool query in gettxoutproof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1f7f28cbc48675514a01c4ca773f1ba8ea836b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1f7f28cbc48675514a01c4ca773f1ba8ea836b"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 62,
      "deletions": 38
    },
    "files": [
      {
        "sha": "7130625d5c8aab563d4f806d51a7a24c2b640e99",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 7,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
        "patch": "@@ -68,13 +68,32 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string me\n }\n \n /**\n- * Get the node context mempool.\n+ * Get the node context.\n  *\n- * Set the HTTP error and return nullptr if node context\n- * mempool is not found.\n+ * @param[in]  req  The HTTP request, whose status code will be set if node\n+ *                  context is not found.\n+ * @returns         Pointer to the node context or nullptr if not found.\n+ */\n+static NodeContext* GetNodeContext(const util::Ref& context, HTTPRequest* req)\n+{\n+    NodeContext* node = context.Has<NodeContext>() ? &context.Get<NodeContext>() : nullptr;\n+    if (!node) {\n+        RESTERR(req, HTTP_INTERNAL_SERVER_ERROR,\n+                strprintf(\"%s:%d (%s)\\n\"\n+                          \"Internal bug detected: Node context not found!\\n\"\n+                          \"You may report this issue here: %s\\n\",\n+                          __FILE__, __LINE__, __func__, PACKAGE_BUGREPORT));\n+        return nullptr;\n+    }\n+    return node;\n+}\n+\n+/**\n+ * Get the node context mempool.\n  *\n- * @param[in]  req the HTTP request\n- * return pointer to the mempool or nullptr if no mempool found\n+ * @param[in]  req The HTTP request, whose status code will be set if node\n+ *                 context mempool is not found.\n+ * @returns        Pointer to the mempool or nullptr if no mempool found.\n  */\n static CTxMemPool* GetMemPool(const util::Ref& context, HTTPRequest* req)\n {\n@@ -371,10 +390,13 @@ static bool rest_tx(const util::Ref& context, HTTPRequest* req, const std::strin\n         g_txindex->BlockUntilSyncedToCurrentChain();\n     }\n \n-    CTransactionRef tx;\n+    const NodeContext* const node = GetNodeContext(context, req);\n+    if (!node) return false;\n     uint256 hashBlock = uint256();\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock))\n+    const CTransactionRef tx = GetTransaction(/* block_index */ nullptr, node->mempool, hash, Params().GetConsensus(), hashBlock);\n+    if (!tx) {\n         return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n+    }\n \n     switch (rf) {\n     case RetFormat::BINARY: {"
      },
      {
        "sha": "70caf6009ab0c534f795430b05c37063e2367e7c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
        "patch": "@@ -157,6 +157,8 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 },\n     }.Check(request);\n \n+    const NodeContext& node = EnsureNodeContext(request.context);\n+\n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n     CBlockIndex* blockindex = nullptr;\n@@ -188,9 +190,9 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n         f_txindex_ready = g_txindex->BlockUntilSyncedToCurrentChain();\n     }\n \n-    CTransactionRef tx;\n     uint256 hash_block;\n-    if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, blockindex)) {\n+    const CTransactionRef tx = GetTransaction(blockindex, node.mempool, hash, Params().GetConsensus(), hash_block);\n+    if (!tx) {\n         std::string errmsg;\n         if (blockindex) {\n             if (!(blockindex->nStatus & BLOCK_HAVE_DATA)) {\n@@ -283,9 +285,10 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     if (pblockindex == nullptr) {\n-        CTransactionRef tx;\n-        if (!GetTransaction(oneTxid, tx, Params().GetConsensus(), hashBlock) || hashBlock.IsNull())\n+        const CTransactionRef tx = GetTransaction(/* block_index */ nullptr, /* mempool */ nullptr, oneTxid, Params().GetConsensus(), hashBlock);\n+        if (!tx || hashBlock.IsNull()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n+        }\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");"
      },
      {
        "sha": "7efff8d4b4feb9d661104c8c2f666e40ef929ce5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 25,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
        "patch": "@@ -1089,45 +1089,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n }\n \n-/**\n- * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n- * If blockIndex is provided, the transaction is fetched from the corresponding block.\n- */\n-bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, const CBlockIndex* const block_index)\n+CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n {\n     LOCK(cs_main);\n \n-    if (!block_index) {\n-        CTransactionRef ptx = mempool.get(hash);\n-        if (ptx) {\n-            txOut = ptx;\n-            return true;\n-        }\n-\n-        if (g_txindex) {\n-            return g_txindex->FindTx(hash, hashBlock, txOut);\n-        }\n-    } else {\n+    if (block_index) {\n         CBlock block;\n         if (ReadBlockFromDisk(block, block_index, consensusParams)) {\n             for (const auto& tx : block.vtx) {\n                 if (tx->GetHash() == hash) {\n-                    txOut = tx;\n                     hashBlock = block_index->GetBlockHash();\n-                    return true;\n+                    return tx;\n                 }\n             }\n         }\n+        return nullptr;\n     }\n-\n-    return false;\n+    if (mempool) {\n+        CTransactionRef ptx = mempool->get(hash);\n+        if (ptx) return ptx;\n+    }\n+    if (g_txindex) {\n+        CTransactionRef tx;\n+        if (g_txindex->FindTx(hash, hashBlock, tx)) return tx;\n+    }\n+    return nullptr;\n }\n \n-\n-\n-\n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // CBlock and CBlockIndex"
      },
      {
        "sha": "2dd83a5c863777910f62313038a9bce3bc8f99c3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5979d12f8c65754e36cdddb9d032ab81fecc3a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa5979d12f8c65754e36cdddb9d032ab81fecc3a",
        "patch": "@@ -164,8 +164,19 @@ bool LoadGenesisBlock(const CChainParams& chainparams);\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck(int worker_num);\n-/** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, const CBlockIndex* const blockIndex = nullptr);\n+/**\n+ * Return transaction from the block at block_index.\n+ * If block_index is not provided, fall back to mempool.\n+ * If mempool is not provided or the tx couldn't be found in mempool, fall back to g_txindex.\n+ *\n+ * @param[in]  block_index     The block to read from disk, or nullptr\n+ * @param[in]  mempool         If block_index is not provided, look in the mempool, if provided\n+ * @param[in]  hash            The txid\n+ * @param[in]  consensusParams The params\n+ * @param[out] hashBlock       The hash of block_index, if the tx was found via block_index\n+ * @returns                    The tx if found, otherwise nullptr\n+ */\n+CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock);\n /**\n  * Find the best known block, and make it the tip of the block chain\n  *"
      }
    ]
  }
]