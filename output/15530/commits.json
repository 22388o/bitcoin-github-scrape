[
  {
    "sha": "faebd2ef40bf6c9209110ad4e229e5a207b9c9da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWViZDJlZjQwYmY2YzkyMDkxMTBhZDRlMjI5ZTVhMjA3YjljOWRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-18T21:09:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-04T20:59:23Z"
      },
      "message": "doc: Move wallet lock annotations to header",
      "tree": {
        "sha": "5d4f39746296bed31817f9d6590e2384680fc449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d4f39746296bed31817f9d6590e2384680fc449"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faebd2ef40bf6c9209110ad4e229e5a207b9c9da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcfZGrAAoJEM4rdWl+aaVIcpUMAJe1y8FrI6fn2Ox0AQpdobb7\nbf5WzGZMr8x+4wOxnWZeT6f2QpF1xPe9MxwtbANzIcFE3qWNVZAJysT8KJ+z7+OW\n2qpqQ5dwPXYIONHan6VyzknFryYyLdApsq7vp6Jh/BNgBO17IyACDnMno44jMHXr\nn1ARXYoR55K4DfYcqk2kBekNKMpyx6CZqg8u41zlHo9co8UPmevL7JkkG2Of5eLD\nDf2wCdT/I21CEeAvjpHOb0s3gRKyHEOhYDMo/xQPoAB40yneibu7rHn6sClscgs7\nv/WuUonLHOQfCgEJ3Mk3OlfTZiej+7KX8rx0OJMFIHWvWjYYSjNEbO8CPZDGL0U/\nONRuxV89hhznDkZewTXz27QHnTNQYKkM8zYAIj8klK/xmlbkVMVbekLBziRtoELS\nd+Bm/ghmRLHGQkP9KS7LYcE2t3VNuUKQ2TGbJDk/yo7pArMINwGjy9+Rp4ScsxIb\nMELHd4mjFX3aqFuw+j42xBKqCOonBSVrh824+iaiMg==\n=/99O\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d4f39746296bed31817f9d6590e2384680fc449\nparent 45f434f44d0b55d137eaebb8c0486f9cebabc869\nauthor MarcoFalke <falke.marco@gmail.com> 1550524185 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551733163 -0500\n\ndoc: Move wallet lock annotations to header\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faebd2ef40bf6c9209110ad4e229e5a207b9c9da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faebd2ef40bf6c9209110ad4e229e5a207b9c9da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faebd2ef40bf6c9209110ad4e229e5a207b9c9da/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45f434f44d0b55d137eaebb8c0486f9cebabc869"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 33,
      "deletions": 34
    },
    "files": [
      {
        "sha": "e47f5fa95632c5e172a3c2af7fdaf9cac1a01e92",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 29,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faebd2ef40bf6c9209110ad4e229e5a207b9c9da/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faebd2ef40bf6c9209110ad4e229e5a207b9c9da/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faebd2ef40bf6c9209110ad4e229e5a207b9c9da",
        "patch": "@@ -193,7 +193,7 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n@@ -281,9 +281,9 @@ void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n-bool CWallet::AddKeyPubKeyWithDB(WalletBatch &batch, const CKey& secret, const CPubKey &pubkey)\n+bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n \n     // Make sure we aren't adding private keys to private key disabled wallets\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n@@ -345,16 +345,16 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     }\n }\n \n-void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &meta)\n+void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n     UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[keyID] = meta;\n }\n \n-void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &meta)\n+void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)\n {\n-    AssertLockHeld(cs_wallet); // m_script_metadata\n+    AssertLockHeld(cs_wallet);\n     UpdateTimeFirstKey(meta.nCreateTime);\n     m_script_metadata[script_id] = meta;\n }\n@@ -367,7 +367,7 @@ bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey,\n \n void CWallet::UpgradeKeyMetadata()\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n     if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n         return;\n     }\n@@ -569,7 +569,7 @@ void CWallet::ChainStateFlushed(const CBlockLocator& loc)\n \n void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in, bool fExplicit)\n {\n-    LOCK(cs_wallet); // nWalletVersion\n+    LOCK(cs_wallet);\n     if (nWalletVersion >= nVersion)\n         return;\n \n@@ -593,7 +593,7 @@ void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in,\n \n bool CWallet::SetMaxVersion(int nVersion)\n {\n-    LOCK(cs_wallet); // nWalletVersion, nWalletMaxVersion\n+    LOCK(cs_wallet);\n     // cannot downgrade below current version\n     if (nWalletVersion > nVersion)\n         return false;\n@@ -877,9 +877,9 @@ DBErrors CWallet::ReorderTransactions()\n     return DBErrors::LOAD_OK;\n }\n \n-int64_t CWallet::IncOrderPosNext(WalletBatch *batch)\n+int64_t CWallet::IncOrderPosNext(WalletBatch* batch)\n {\n-    AssertLockHeld(cs_wallet); // nOrderPosNext\n+    AssertLockHeld(cs_wallet);\n     int64_t nRet = nOrderPosNext++;\n     if (batch) {\n         batch->WriteOrderPosNext(nOrderPosNext);\n@@ -2614,9 +2614,9 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction &tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx)\n {\n-    AssertLockHeld(cs_wallet); // mapWallet\n+    AssertLockHeld(cs_wallet);\n \n     // sign the new tx\n     int nIn = 0;\n@@ -3230,8 +3230,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n \n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n {\n-    AssertLockHeld(cs_wallet); // mapWallet\n-    DBErrors nZapSelectTxRet = WalletBatch(*database,\"cr+\").ZapSelectTx(vHashIn, vHashOut);\n+    AssertLockHeld(cs_wallet);\n+    DBErrors nZapSelectTxRet = WalletBatch(*database, \"cr+\").ZapSelectTx(vHashIn, vHashOut);\n     for (uint256 hash : vHashOut) {\n         const auto& it = mapWallet.find(hash);\n         wtxOrdered.erase(it->second.m_it_wtxOrdered);\n@@ -3257,7 +3257,6 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     MarkDirty();\n \n     return DBErrors::LOAD_OK;\n-\n }\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n@@ -3377,7 +3376,7 @@ bool CWallet::NewKeyPool()\n \n size_t CWallet::KeypoolCountExternalKeys()\n {\n-    AssertLockHeld(cs_wallet); // setExternalKeyPool\n+    AssertLockHeld(cs_wallet);\n     return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n@@ -3641,7 +3640,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain:\n \n std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n {\n-    AssertLockHeld(cs_wallet); // mapWallet\n+    AssertLockHeld(cs_wallet);\n     std::set< std::set<CTxDestination> > groupings;\n     std::set<CTxDestination> grouping;\n \n@@ -3809,33 +3808,33 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n \n void CWallet::LockCoin(const COutPoint& output)\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     setLockedCoins.insert(output);\n }\n \n void CWallet::UnlockCoin(const COutPoint& output)\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     setLockedCoins.erase(output);\n }\n \n void CWallet::UnlockAllCoins()\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     setLockedCoins.clear();\n }\n \n bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     COutPoint outpt(hash, n);\n \n     return (setLockedCoins.count(outpt) > 0);\n }\n \n void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n          it != setLockedCoins.end(); it++) {\n         COutPoint outpt = (*it);\n@@ -3845,8 +3844,8 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n \n /** @} */ // end of Actions\n \n-void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t>& mapKeyBirth) const {\n+    AssertLockHeld(cs_wallet);\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n@@ -4125,7 +4124,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    int prev_version = walletInstance->nWalletVersion;\n+    int prev_version = walletInstance->GetVersion();\n     if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n     {\n         int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n@@ -4150,8 +4149,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         LOCK(walletInstance->cs_wallet);\n \n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n-        int max_version = walletInstance->nWalletVersion;\n-        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >=FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n+        int max_version = walletInstance->GetVersion();\n+        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n             chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n             return nullptr;\n         }"
      },
      {
        "sha": "ea196c8799536ad1d3d7067a6537ac9ecc9d0797",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faebd2ef40bf6c9209110ad4e229e5a207b9c9da/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faebd2ef40bf6c9209110ad4e229e5a207b9c9da/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=faebd2ef40bf6c9209110ad4e229e5a207b9c9da",
        "patch": "@@ -648,7 +648,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion = FEATURE_BASE;\n+    int nWalletVersion GUARDED_BY(cs_wallet){FEATURE_BASE};\n \n     //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n     int nWalletMaxVersion GUARDED_BY(cs_wallet) = FEATURE_BASE;\n@@ -698,11 +698,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    std::set<int64_t> setInternalKeyPool;\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n     std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> set_pre_split_keypool;\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n     int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::atomic<uint64_t> m_wallet_flags{0};\n@@ -1065,7 +1065,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {\n-        AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n+        AssertLockHeld(cs_wallet);\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n "
      }
    ]
  }
]