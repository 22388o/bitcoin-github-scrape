TheBlueMatt,2012-01-20T00:10:10Z,Oh and as usual thanks to @sipa and @gmaxwell for comments/suggestions/general help for my C++ noobishness along the way.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-3576919,3576919,
luke-jr,2012-02-17T16:01:07Z,"This seems to need rebasing... also, at least fedb422 and bc98084 don't belong here (and create regressions).\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4022607,4022607,
TheBlueMatt,2012-02-18T07:51:39Z,"Rebased, should be pretty mergeable now (aside from the elusive performance issue).\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4032631,4032631,
TheBlueMatt,2012-02-20T20:35:59Z,Fixed a few minor issues and rebased.  Still nothing new on the performance issue(s).\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4061228,4061228,
TheBlueMatt,2012-02-23T03:52:12Z,"So, good news on the performance front.  While I was benchmarking bitcoin built in debug vs release (for gitian stuff), I noticed there was a bit of a performance decrease when built in debug mode.  As it turns out, I had always been benchmarking CBlockStore in debug mode.  When ff66202 is removed and CBlockStore is benchmarked, it has the slight performance improvement over master that would be e",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4130323,4130323,
TheBlueMatt,2012-02-29T19:36:52Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4245022,4245022,
TheBlueMatt,2012-03-14T04:08:50Z,Ridiculously minor fixes to make valgrind happy and rebased.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4491902,4491902,
TheBlueMatt,2012-04-01T01:50:15Z,"Rebased, added a simple unit test, and abstracted one more thing.\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4863328,4863328,
TheBlueMatt,2012-04-01T01:53:46Z,"Not sure why github is showing a few of gavin's commits that are on master in the commitlist, but they have the same commitid, and this appears to be rebased fine in git...\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4863342,4863342,
TheBlueMatt,2012-04-06T02:29:28Z,"Closing this since after some thought I really dont trust myself to touch this much code without introducing one or two fatal bugs.  If anyone does want to look at this, @sipa spent some time cleaning up the internals to look nicer/run a bit smoother at https://github.com/sipa/bitcoin/tree/ooifiedbs\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4989700,4989700,
sipa,2012-04-06T12:13:30Z,"@TheBlueMatt large refactorings always carry some risk, but imho this is a refactor that needs to happen anyway. It can probably use a few more eyes, but it seems to run without problem, so it seems a waste not trying to get it merged.\n\nBy the way, ooifiedbs is rebased against master.\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-4994255,4994255,
TheBlueMatt,2012-05-05T08:06:02Z,Slowly working on rebasing this.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5525296,5525296,
TheBlueMatt,2012-05-06T07:23:03Z,Rebased against master.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5533709,5533709,
sipa,2012-05-06T14:23:34Z,"I get one potential deadlock: in net.cpp, AskForBlocks sends messages while holding the cs_vNodes lock. It's better to make a copy of the node you need to contact, ->AddRef() it, send the message, and ->Release().\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5536064,5536064,
TheBlueMatt,2012-05-07T06:55:35Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5544797,5544797,
TheBlueMatt,2012-05-07T09:25:37Z,"Spent some more time double checking and triple checking the latest rebase...found one more potential deadlock, fixed one potential race...more checking to be done\n@Diapolo Ill check in the morning, its almost 6am...\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5546522,5546522,
TheBlueMatt,2012-05-08T00:17:18Z,"Fixed the one other potential deadlock I'm aware of...its kinda an ugly fix, but it works, and since the transaction copying only happens in the cblockstore callback thread(s), it shouldn't effect performance either way.\nGonna do more testing in the next few days, but this should be pretty good right now.\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5564417,5564417,
TheBlueMatt,2012-05-08T22:22:33Z,Rebased onto current master.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5588213,5588213,
TheBlueMatt,2012-05-09T07:44:12Z,"Rebased and have been testing...looking largely good to me, so any additional eyeballs at this stage would be appreciated.\n",https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5594553,5594553,
TheBlueMatt,2012-05-29T14:51:18Z,Closing to redo from the ground up (again).  Continuing rebasing this would simply cause issues and no doubt create odd interactions with recent commits.\n,https://github.com/bitcoin/bitcoin/pull/771#issuecomment-5985676,5985676,
Diapolo,2012-05-07T09:21:42Z,"If this is a constant now, how can you write to it in line 1426?\n",https://github.com/bitcoin/bitcoin/pull/771#discussion_r780353,780353,src/bitcoinrpc.cpp
sipa,2012-05-07T10:27:55Z,"""const CBlockIndex *pindex"" means ""declare *pindex as a const CBlockIndex"", or more commonly ""declare pindex as a pointer to a const CBlockIndex"". This means that the pointer can change, but it can only point to constant objects. Line 1426 makes it point to a constant object.\n",https://github.com/bitcoin/bitcoin/pull/771#discussion_r780524,780524,src/bitcoinrpc.cpp
Diapolo,2012-05-07T11:23:45Z,Thanks for the clarification.\n,https://github.com/bitcoin/bitcoin/pull/771#discussion_r780615,780615,src/bitcoinrpc.cpp
