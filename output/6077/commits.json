[
  {
    "sha": "17b11428c135203342aff38cabc8047e673f38ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2IxMTQyOGMxMzUyMDMzNDJhZmYzOGNhYmM4MDQ3ZTY3M2YzOGFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-28T17:27:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T13:28:43Z"
      },
      "message": "Cache transaction validation successes",
      "tree": {
        "sha": "9a4634eaa35696916ead713371895bddef9acddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a4634eaa35696916ead713371895bddef9acddf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17b11428c135203342aff38cabc8047e673f38ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b11428c135203342aff38cabc8047e673f38ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17b11428c135203342aff38cabc8047e673f38ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b11428c135203342aff38cabc8047e673f38ac/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 150,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7477d08b18e1e73f88117673a80f2b908eb14b8d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b11428c135203342aff38cabc8047e673f38ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b11428c135203342aff38cabc8047e673f38ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=17b11428c135203342aff38cabc8047e673f38ac",
        "patch": "@@ -1277,6 +1277,9 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n+static mrumap<uint256, unsigned int> cacheCheck(2 * MAX_BLOCK_SIZE / CTransaction().GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n+static boost::mutex cs_cacheCheck;\n+\n namespace Consensus {\n bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n@@ -1331,6 +1334,17 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n {\n     if (!tx.IsCoinBase())\n     {\n+        if (fScriptChecks) {\n+            boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+            mrumap<uint256, unsigned int>::const_iterator iter = cacheCheck.find(tx.GetHash());\n+            if (iter != cacheCheck.end()) {\n+                // The following test relies on the fact that all script validation flags are softforks (i.e. an extra bit set cannot cause a false result to become true).\n+                if ((iter->second & flags) == flags) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n         if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n             return false;\n \n@@ -1381,6 +1395,11 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         }\n     }\n \n+    if (cacheStore && fScriptChecks && pvChecks == NULL) {\n+        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+        cacheCheck.insert(tx.GetHash(), flags);\n+    }\n+\n     return true;\n }\n \n@@ -2101,6 +2120,13 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n         SyncWithWallets(tx, pblock);\n     }\n+    // Erase block's transactions from the validation cache\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+        BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n+            cacheCheck.erase(tx.GetHash());\n+        }\n+    }\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);"
      },
      {
        "sha": "9dff5694ba818e571003a9dfff885d901cf9a0c6",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b11428c135203342aff38cabc8047e673f38ac/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b11428c135203342aff38cabc8047e673f38ac/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=17b11428c135203342aff38cabc8047e673f38ac",
        "patch": "@@ -9,6 +9,10 @@\n #include <vector>\n #include <utility>\n \n+#include <boost/multi_index_container.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index/sequenced_index.hpp>\n+\n /** STL-like set container that only keeps the most recent N elements. */\n template <typename T>\n class mruset\n@@ -62,4 +66,60 @@ class mruset\n     size_type max_size() const { return nMaxSize; }\n };\n \n+/** STL-like map container that only keeps the most recent N elements. */\n+template <typename K, typename V>\n+class mrumap\n+{\n+private:\n+    struct key_extractor {\n+        typedef K result_type;\n+        const result_type& operator()(const std::pair<K, V>& e) const { return e.first; }\n+        result_type& operator()(std::pair<K, V>* e) const { return e->first; }\n+    };\n+\n+    typedef boost::multi_index_container<\n+        std::pair<K, V>,\n+        boost::multi_index::indexed_by<\n+            boost::multi_index::sequenced<>,\n+            boost::multi_index::ordered_unique<key_extractor>\n+        >\n+    > map_type;\n+\n+public:\n+    typedef K key_type;\n+    typedef std::pair<K, V> value_type;\n+    typedef typename map_type::iterator iterator;\n+    typedef typename map_type::const_iterator const_iterator;\n+    typedef typename map_type::size_type size_type;\n+\n+protected:\n+    map_type m_;\n+    size_type max_size_;\n+\n+public:\n+    mrumap(size_type max_size_in = 1) { clear(max_size_in); }\n+    iterator begin() { return m_.begin(); }\n+    iterator end() { return m_.end(); }\n+    const_iterator begin() const { return m_.begin(); }\n+    const_iterator end() const { return m_.end(); }\n+    size_type size() const { return m_.size(); }\n+    bool empty() const { return m_.empty(); }\n+    iterator find(const key_type& key) { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n+    const_iterator find(const key_type& key) const { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n+    size_type count(const key_type& key) const { return boost::get<1>(m_).count(key); }\n+    void clear(size_type max_size_in) { m_.clear(); max_size_ = max_size_in; }\n+    std::pair<iterator, bool> insert(const K& key, const V& value) \n+    {\n+        std::pair<K, V> elem(key, value);\n+        std::pair<iterator, bool> p = m_.push_front(elem);\n+        if (p.second && m_.size() > max_size_) {\n+            m_.pop_back();\n+        }\n+        return p;\n+    }\n+    void erase(iterator it) { m_.erase(it); }\n+    void erase(const key_type& k) { boost::get<1>(m_).erase(k); }\n+    size_type max_size() const { return max_size_; }\n+};\n+\n #endif // BITCOIN_MRUSET_H"
      },
      {
        "sha": "3c0668916856e9ccdcea3377ea5efe705261c466",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b11428c135203342aff38cabc8047e673f38ac/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b11428c135203342aff38cabc8047e673f38ac/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=17b11428c135203342aff38cabc8047e673f38ac",
        "patch": "@@ -78,4 +78,68 @@ BOOST_AUTO_TEST_CASE(mruset_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(mrumap_test)\n+{\n+    // The mrumap being tested.\n+    mrumap<int, char> mru(5000);\n+\n+    // Run the test 10 times.\n+    for (int test = 0; test < 10; test++) {\n+        // Reset mru.\n+        mru.clear(5000);\n+\n+        // A deque + set to simulate the mruset.\n+        std::deque<int> rep;\n+        std::map<int, char> all;\n+\n+        // Insert 10000 random integers below 15000.\n+        for (int j=0; j<10000; j++) {\n+            int add = GetRandInt(15000);\n+            char val = (char)GetRandInt(256);\n+            mru.insert(add, val);\n+\n+            // Add the number to rep/all as well.\n+            if (all.count(add) == 0) {\n+               all.insert(std::make_pair<int, char>(add, val));\n+               rep.push_back(add);\n+               if (all.size() == 5001) {\n+                   all.erase(rep.front());\n+                   rep.pop_front();\n+               }\n+            }\n+\n+            if (GetRandInt(5) == 0) {\n+                // With 20% chance: remove an item\n+                int pos = GetRandInt(rep.size());\n+                std::deque<int>::iterator it = rep.begin();\n+                while (pos--) { it++; }\n+                int delval = *it;\n+                mru.erase(delval);\n+                all.erase(delval);\n+                rep.erase(it);\n+            }\n+\n+            // Do a full comparison between mru and the simulated mru every 1000 and every 5001 elements.\n+            if (j % 1000 == 0 || j % 5001 == 0) {\n+                // Check that all elements that should be in there, are in there.\n+                BOOST_FOREACH(int x, rep) {\n+                    BOOST_CHECK(mru.count(x));\n+                    BOOST_CHECK(mru.find(x)->second == all[x]);\n+                }\n+\n+                // Check that all elements that are in there, should be in there.\n+                for (mrumap<int, char>::iterator it = mru.begin(); it != mru.end(); it++) {\n+                    BOOST_CHECK(all.count(it->first));\n+                    BOOST_CHECK(all[it->first] == it->second);\n+                }\n+\n+                for (int t = 0; t < 10; t++) {\n+                    int r = GetRandInt(15000);\n+                    BOOST_CHECK(all.count(r) == mru.count(r));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "517e6dd25618522c716e64859554b0f29c6e65d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTdlNmRkMjU2MTg1MjJjNzE2ZTY0ODU5NTU0YjBmMjljNmU2NWQw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-03T14:59:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T13:50:21Z"
      },
      "message": "Unit test doublespends in new blocks\n\nAs suggested by Greg Maxwell-- unit test to make sure a block\nwith a double-spend in it doesn't pass validation if half of\nthe double-spend is already in the memory pool (so full-blown\ntransaction validation is skipped) when the block is received.",
      "tree": {
        "sha": "0df44e4bf60db529846142b60cc2894c128d3d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0df44e4bf60db529846142b60cc2894c128d3d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/517e6dd25618522c716e64859554b0f29c6e65d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517e6dd25618522c716e64859554b0f29c6e65d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/517e6dd25618522c716e64859554b0f29c6e65d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517e6dd25618522c716e64859554b0f29c6e65d0/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17b11428c135203342aff38cabc8047e673f38ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b11428c135203342aff38cabc8047e673f38ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17b11428c135203342aff38cabc8047e673f38ac"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 180,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f9384a09a4114c96f6e6985a3e9255f67db5dd83",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -73,6 +73,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "e36112bd4fd12211236ee03a86617d1182cff682",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -18,4 +18,16 @@ uint256_tests.cpp.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n\\ No newline at end of file\n+[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run  test_bitcoin --help   for the full list.\n+"
      },
      {
        "sha": "8d81275a6fefa471460110ecde632a6a6f246b2b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 3,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -7,8 +7,12 @@\n #include \"test_bitcoin.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n@@ -28,20 +32,22 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-BasicTestingSetup::BasicTestingSetup()\n+BasicTestingSetup::BasicTestingSetup(CBaseChainParams::Network network)\n {\n         ECC_Start();\n         SetupEnvironment();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(network);\n+        noui_connect();\n }\n+\n BasicTestingSetup::~BasicTestingSetup()\n {\n         ECC_Stop();\n }\n \n-TestingSetup::TestingSetup()\n+TestingSetup::TestingSetup(CBaseChainParams::Network network) : BasicTestingSetup(network)\n {\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n@@ -87,6 +93,51 @@ TestingSetup::~TestingSetup()\n         boost::filesystem::remove_all(pathTemp);\n }\n \n+TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n+{\n+    // Generate a 100-block chain:\n+    coinbaseKey.MakeNewKey(true);\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    for (int i = 0; i < COINBASE_MATURITY; i++)\n+    {\n+        std::vector<CMutableTransaction> noTxns;\n+        CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n+        coinbaseTxns.push_back(b.vtx[0]);\n+    }\n+}\n+\n+//\n+// Create a new block with just given transactions, coinbase paying to\n+// scriptPubKey, and try to add it to the current chain.\n+//\n+CBlock\n+TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n+{\n+    CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+        block.vtx.push_back(tx);\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params(CBaseChainParams::REGTEST).GetConsensus())) ++block.nNonce;\n+\n+    CValidationState state;\n+    ProcessNewBlock(state, NULL, &block, true, NULL);\n+\n+    CBlock result = block;\n+    delete pblocktemplate;\n+    return result;\n+}\n+\n+TestChain100Setup::~TestChain100Setup()\n+{\n+}\n+\n void Shutdown(void* parg)\n {\n   exit(0);"
      },
      {
        "sha": "b9314d0611be20b8394e1800d57c4991e3c88bd6",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -1,6 +1,8 @@\n #ifndef BITCOIN_TEST_TEST_BITCOIN_H\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n+#include \"chainparamsbase.h\"\n+#include \"key.h\"\n #include \"txdb.h\"\n \n #include <boost/filesystem.hpp>\n@@ -10,7 +12,7 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n-    BasicTestingSetup();\n+    BasicTestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -23,8 +25,30 @@ struct TestingSetup: public BasicTestingSetup {\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n \n-    TestingSetup();\n+    TestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n \n+class CBlock;\n+struct CMutableTransaction;\n+class CScript;\n+\n+//\n+// Testing fixture that pre-creates a\n+// 100-block REGTEST-mode block chain\n+//\n+struct TestChain100Setup : public TestingSetup {\n+    TestChain100Setup();\n+\n+    // Create a new block with just given transactions, coinbase paying to\n+    // scriptPubKey, and try to add it to the current chain.\n+    CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n+                                 const CScript& scriptPubKey);\n+\n+    ~TestChain100Setup();\n+\n+    std::vector<CTransaction> coinbaseTxns; // For convenience, coinbase transactions\n+    CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n+};\n+\n #endif"
      },
      {
        "sha": "edad18644ec3f2ef9b4ec57d3b6bd290c83d572c",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n+#include \"txmempool.h\"\n+#include \"random.h\"\n+#include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"utiltime.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n+\n+static bool\n+ToMemPool(CMutableTransaction& tx)\n+{\n+    LOCK(cs_main);\n+\n+    CValidationState state;\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n+{\n+    // Make sure skipping validation of transctions that were\n+    // validated going into the memory pool does not allow\n+    // double-spends in blocks to pass validation when they should not.\n+\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Create a double-spend of mature coinbase txn:\n+    std::vector<CMutableTransaction> spends;\n+    spends.resize(2);\n+    for (int i = 0; i < 2; i++)\n+    {\n+        spends[i].vin.resize(1);\n+        spends[i].vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+        spends[i].vin[0].prevout.n = 0;\n+        spends[i].vout.resize(1);\n+        spends[i].vout[0].nValue = 11*CENT;\n+        spends[i].vout[0].scriptPubKey = scriptPubKey;\n+\n+        // Sign:\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        spends[i].vin[0].scriptSig << vchSig;\n+    }\n+\n+    CBlock block;\n+\n+    // Test 1: block with both of those transactions should be rejected.\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+\n+    // Test 2: ... and should be rejected if spend1 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[0]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Test 3: ... and should be rejected if spend2 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Final sanity test: first spend in mempool, second in block, that's OK:\n+    std::vector<CMutableTransaction> oneSpend;\n+    oneSpend.push_back(spends[0]);\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    // spends[1] should have been removed from the mempool when the\n+    // block with spends[0] is accepted:\n+    BOOST_CHECK_EQUAL(mempool.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]