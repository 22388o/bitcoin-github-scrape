[
  {
    "sha": "f27bd96b5fdc2921d93c44bbf422bff0e979c4de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjdiZDk2YjVmZGMyOTIxZDkzYzQ0YmJmNDIyYmZmMGU5NzljNGRl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-08T20:30:15Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-08T20:30:25Z"
      },
      "message": "gui: Fix missing qRegisterMetaType(WalletModel*)",
      "tree": {
        "sha": "8c01853a1ac5d5b07ba229420063c1e05d46fa63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c01853a1ac5d5b07ba229420063c1e05d46fa63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f27bd96b5fdc2921d93c44bbf422bff0e979c4de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27bd96b5fdc2921d93c44bbf422bff0e979c4de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f27bd96b5fdc2921d93c44bbf422bff0e979c4de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27bd96b5fdc2921d93c44bbf422bff0e979c4de/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2679bb8919b5089f8067ccfd94f766747b8df671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2679bb8919b5089f8067ccfd94f766747b8df671",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2679bb8919b5089f8067ccfd94f766747b8df671"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eb53d71439f98f77d0808f43324ba4ddb0e5d669",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27bd96b5fdc2921d93c44bbf422bff0e979c4de/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27bd96b5fdc2921d93c44bbf422bff0e979c4de/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f27bd96b5fdc2921d93c44bbf422bff0e979c4de",
        "patch": "@@ -448,6 +448,9 @@ int GuiMain(int argc, char* argv[])\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n+#ifdef ENABLE_WALLET\n+    qRegisterMetaType<WalletModel*>();\n+#endif\n     //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n     //   IMPORTANT if it is no longer a typedef use the normal variant above\n     qRegisterMetaType< CAmount >(\"CAmount\");"
      }
    ]
  },
  {
    "sha": "64fee489448c62319e77941c30152084695b5a5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGZlZTQ4OTQ0OGM2MjMxOWU3Nzk0MWMzMDE1MjA4NDY5NWI1YTVk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-06T16:16:01Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-08T20:30:25Z"
      },
      "message": "qt: Assert QMetaObject::invokeMethod result",
      "tree": {
        "sha": "c1bcdf98960b532e5762f58cf7e95e0e00db3241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1bcdf98960b532e5762f58cf7e95e0e00db3241"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64fee489448c62319e77941c30152084695b5a5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64fee489448c62319e77941c30152084695b5a5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64fee489448c62319e77941c30152084695b5a5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64fee489448c62319e77941c30152084695b5a5d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f27bd96b5fdc2921d93c44bbf422bff0e979c4de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27bd96b5fdc2921d93c44bbf422bff0e979c4de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f27bd96b5fdc2921d93c44bbf422bff0e979c4de"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 44,
      "deletions": 22
    },
    "files": [
      {
        "sha": "f27a5d9a5927ebdd8b284ed3063a8251f1c08cb7",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fee489448c62319e77941c30152084695b5a5d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fee489448c62319e77941c30152084695b5a5d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=64fee489448c62319e77941c30152084695b5a5d",
        "patch": "@@ -1375,12 +1375,13 @@ static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, co\n     style &= ~CClientUIInterface::SECURE;\n     bool ret = false;\n     // In case of modal message, use blocking connection to wait for user to click a button\n-    QMetaObject::invokeMethod(gui, \"message\",\n+    bool invoked = QMetaObject::invokeMethod(gui, \"message\",\n                                modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                Q_ARG(QString, QString::fromStdString(caption)),\n                                Q_ARG(QString, QString::fromStdString(message)),\n                                Q_ARG(unsigned int, style),\n                                Q_ARG(bool*, &ret));\n+    assert(invoked);\n     return ret;\n }\n "
      },
      {
        "sha": "238be08480408d0872f66aa8780367a918e957db",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fee489448c62319e77941c30152084695b5a5d/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fee489448c62319e77941c30152084695b5a5d/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=64fee489448c62319e77941c30152084695b5a5d",
        "patch": "@@ -184,34 +184,39 @@ void ClientModel::updateBanlist()\n static void ShowProgress(ClientModel *clientmodel, const std::string &title, int nProgress)\n {\n     // emits signal \"showProgress\"\n-    QMetaObject::invokeMethod(clientmodel, \"showProgress\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"showProgress\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(title)),\n                               Q_ARG(int, nProgress));\n+    assert(invoked);\n }\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n     // Too noisy: qDebug() << \"NotifyNumConnectionsChanged: \" + QString::number(newNumConnections);\n-    QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n+    assert(invoked);\n }\n \n static void NotifyNetworkActiveChanged(ClientModel *clientmodel, bool networkActive)\n {\n-    QMetaObject::invokeMethod(clientmodel, \"updateNetworkActive\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateNetworkActive\", Qt::QueuedConnection,\n                               Q_ARG(bool, networkActive));\n+    assert(invoked);\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel)\n {\n     qDebug() << \"NotifyAlertChanged\";\n-    QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void BannedListChanged(ClientModel *clientmodel)\n {\n     qDebug() << QString(\"%1: Requesting update for peer banlist\").arg(__func__);\n-    QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int height, int64_t blockTime, double verificationProgress, bool fHeader)\n@@ -233,11 +238,12 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int heig\n     // if we are in-sync or if we notify a header update, update the UI regardless of last update time\n     if (fHeader || !initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass an async signal to the UI thread\n-        QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n+        bool invoked = QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, height),\n                                   Q_ARG(QDateTime, QDateTime::fromTime_t(blockTime)),\n                                   Q_ARG(double, verificationProgress),\n                                   Q_ARG(bool, fHeader));\n+        assert(invoked);\n         nLastUpdateNotification = now;\n     }\n }"
      },
      {
        "sha": "61696ace1a030ab7a38755261c1d2f9a5dd16f04",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fee489448c62319e77941c30152084695b5a5d/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fee489448c62319e77941c30152084695b5a5d/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=64fee489448c62319e77941c30152084695b5a5d",
        "patch": "@@ -156,11 +156,12 @@ void SplashScreen::finish()\n \n static void InitMessage(SplashScreen *splash, const std::string &message)\n {\n-    QMetaObject::invokeMethod(splash, \"showMessage\",\n+    bool invoked = QMetaObject::invokeMethod(splash, \"showMessage\",\n         Qt::QueuedConnection,\n         Q_ARG(QString, QString::fromStdString(message)),\n         Q_ARG(int, Qt::AlignBottom|Qt::AlignHCenter),\n         Q_ARG(QColor, QColor(55,55,55)));\n+    assert(invoked);\n }\n \n static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress, bool resume_possible)"
      },
      {
        "sha": "120dff95c085663b0a41445f8e444d942c35f4c1",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fee489448c62319e77941c30152084695b5a5d/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fee489448c62319e77941c30152084695b5a5d/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=64fee489448c62319e77941c30152084695b5a5d",
        "patch": "@@ -68,7 +68,8 @@ uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CTxDe\n         if (status == CT_NEW) txid = hash;\n     }));\n     ConfirmSend();\n-    QMetaObject::invokeMethod(&sendCoinsDialog, \"on_sendButton_clicked\");\n+    bool invoked = QMetaObject::invokeMethod(&sendCoinsDialog, \"on_sendButton_clicked\");\n+    assert(invoked);\n     return txid;\n }\n "
      },
      {
        "sha": "1064c60dfdd870fdd331e0359c8c6ebbecb55174",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fee489448c62319e77941c30152084695b5a5d/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fee489448c62319e77941c30152084695b5a5d/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=64fee489448c62319e77941c30152084695b5a5d",
        "patch": "@@ -687,10 +687,11 @@ struct TransactionNotification\n     {\n         QString strHash = QString::fromStdString(hash.GetHex());\n         qDebug() << \"NotifyTransactionChanged: \" + strHash + \" status= \" + QString::number(status);\n-        QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n+        bool invoked = QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n                                   Q_ARG(QString, strHash),\n                                   Q_ARG(int, status),\n                                   Q_ARG(bool, showTransaction));\n+        assert(invoked);\n     }\n private:\n     uint256 hash;\n@@ -725,12 +726,16 @@ static void ShowProgress(TransactionTableModel *ttm, const std::string &title, i\n     if (nProgress == 100)\n     {\n         fQueueNotifications = false;\n-        if (vQueueNotifications.size() > 10) // prevent balloon spam, show maximum 10 balloons\n-            QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, true));\n+        if (vQueueNotifications.size() > 10) { // prevent balloon spam, show maximum 10 balloons\n+            bool invoked = QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, true));\n+            assert(invoked);\n+        }\n         for (unsigned int i = 0; i < vQueueNotifications.size(); ++i)\n         {\n-            if (vQueueNotifications.size() - i <= 10)\n-                QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, false));\n+            if (vQueueNotifications.size() - i <= 10) {\n+                bool invoked = QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, false));\n+                assert(invoked);\n+            }\n \n             vQueueNotifications[i].invoke(ttm);\n         }"
      },
      {
        "sha": "2aedb77798aa7f437d2d306a8495f7094eeb0eb3",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fee489448c62319e77941c30152084695b5a5d/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fee489448c62319e77941c30152084695b5a5d/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=64fee489448c62319e77941c30152084695b5a5d",
        "patch": "@@ -124,7 +124,8 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n     } else {\n         // Handler callback runs in a different thread so fix wallet model thread affinity.\n         wallet_model->moveToThread(thread());\n-        QMetaObject::invokeMethod(this, \"addWallet\", Qt::QueuedConnection, Q_ARG(WalletModel*, wallet_model));\n+        bool invoked = QMetaObject::invokeMethod(this, \"addWallet\", Qt::QueuedConnection, Q_ARG(WalletModel*, wallet_model));\n+        assert(invoked);\n     }\n \n     return wallet_model;"
      },
      {
        "sha": "c1b798bad6a1307c162df7c2c4c0baa9595effde",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fee489448c62319e77941c30152084695b5a5d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fee489448c62319e77941c30152084695b5a5d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=64fee489448c62319e77941c30152084695b5a5d",
        "patch": "@@ -374,13 +374,15 @@ bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureStri\n static void NotifyUnload(WalletModel* walletModel)\n {\n     qDebug() << \"NotifyUnload\";\n-    QMetaObject::invokeMethod(walletModel, \"unload\");\n+    bool invoked = QMetaObject::invokeMethod(walletModel, \"unload\");\n+    assert(invoked);\n }\n \n static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel)\n {\n     qDebug() << \"NotifyKeyStoreStatusChanged\";\n-    QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void NotifyAddressBookChanged(WalletModel *walletmodel,\n@@ -392,38 +394,43 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel,\n     QString strPurpose = QString::fromStdString(purpose);\n \n     qDebug() << \"NotifyAddressBookChanged: \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n-    QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, strAddress),\n                               Q_ARG(QString, strLabel),\n                               Q_ARG(bool, isMine),\n                               Q_ARG(QString, strPurpose),\n                               Q_ARG(int, status));\n+    assert(invoked);\n }\n \n static void NotifyTransactionChanged(WalletModel *walletmodel, const uint256 &hash, ChangeType status)\n {\n     Q_UNUSED(hash);\n     Q_UNUSED(status);\n-    QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection);\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection);\n+    assert(invoked);\n }\n \n static void ShowProgress(WalletModel *walletmodel, const std::string &title, int nProgress)\n {\n     // emits signal \"showProgress\"\n-    QMetaObject::invokeMethod(walletmodel, \"showProgress\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"showProgress\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(title)),\n                               Q_ARG(int, nProgress));\n+    assert(invoked);\n }\n \n static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly)\n {\n-    QMetaObject::invokeMethod(walletmodel, \"updateWatchOnlyFlag\", Qt::QueuedConnection,\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"updateWatchOnlyFlag\", Qt::QueuedConnection,\n                               Q_ARG(bool, fHaveWatchonly));\n+    assert(invoked);\n }\n \n static void NotifyCanGetAddressesChanged(WalletModel* walletmodel)\n {\n-    QMetaObject::invokeMethod(walletmodel, \"canGetAddressesChanged\");\n+    bool invoked = QMetaObject::invokeMethod(walletmodel, \"canGetAddressesChanged\");\n+    assert(invoked);\n }\n \n void WalletModel::subscribeToCoreSignals()"
      }
    ]
  }
]