[
  {
    "sha": "7490a3d789b58e6a3e72d321a00a2496865b8a05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDkwYTNkNzg5YjU4ZTZhM2U3MmQzMjFhMDBhMjQ5Njg2NWI4YTA1",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2016-08-19T04:34:08Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2016-08-19T04:34:08Z"
      },
      "message": "Use ANYONECANPAY if -spendzeroconfchange=0\n\nSigning transactions with ANYONECANPAY has a number of advantages:\n\n1) Anyone can bump fees by adding a (small-valued) input: This can get struck\ntransactions unstuck more effectively than CPFP, which may not work if the\nparent transaction hasn't gotten to a miner's mempool due to low fees.\n\n2) Privacy/Fungibility: If inputs aren't signing each other, they're not making\nany explicit statement about the relationship of one input to another. In\nparticular, any input that's less than the transaction fee is possibly from\nanother wallet, confusing taint analysis with plausible deniability.\n\n3) Discouraging Re-Orgs: By allowing anyone to add inputs to any transaction,\nwe make malicious re-orgs targetting particular coins more disruptive, as the\nset of non-targetted transactions unrelated to the target coins can grow\nfaster, increasing the colateral damage of a malicious re-org attack.\n\nThe downside of ANYONECANPAY is mutability, but if we're not spending zeroconf\nchange that's irrelevant; enabling ANYONECANPAY if zeroconf change is disabled\nis an easy and low-risk first step towards using ANYONECANPAY more widely.",
      "tree": {
        "sha": "4a08c7711afb32da18e0f929b2c4b89250dac697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a08c7711afb32da18e0f929b2c4b89250dac697"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7490a3d789b58e6a3e72d321a00a2496865b8a05",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJXto7uAAoJEGOZARBE6K+yCPUH/0ttAZFSTKzYRW9MxWD0uE+I\nodi3+CtIwEf9bCMhTtJTGOo3rpNwUXCqpg7QLm8xO+dV5i5hLv5vEA73uAyeVwoI\nFj7pv7Bp3wylLhTRUso/fFQrSy8Vglt0nWKc+gQyiuOqelUiDw680qYW/atLHPZD\n31m25+QY1NzCoKxLDZ5qHsl4HY1YFtHePu9g1eoHJfaGmQILKJoTidyKpb7UYXNG\nGQQaOqE0jauPOFx14PW8JYLUAFMQeCcFa25hAQBjFnYBNLib8PbWaUMJhdZmIwtW\nskrmGn3Re92nBjXR9zMlwKWvg8zmwkfuzm8GTfOHGrPEf0EN6dDjC5MSe8xJLQQ=\n=xRIQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a08c7711afb32da18e0f929b2c4b89250dac697\nparent 8250de13587ed05ca45df3e12c5dc9bcb1500e2c\nauthor Peter Todd <pete@petertodd.org> 1471581248 -0700\ncommitter Peter Todd <pete@petertodd.org> 1471581248 -0700\n\nUse ANYONECANPAY if -spendzeroconfchange=0\n\nSigning transactions with ANYONECANPAY has a number of advantages:\n\n1) Anyone can bump fees by adding a (small-valued) input: This can get struck\ntransactions unstuck more effectively than CPFP, which may not work if the\nparent transaction hasn't gotten to a miner's mempool due to low fees.\n\n2) Privacy/Fungibility: If inputs aren't signing each other, they're not making\nany explicit statement about the relationship of one input to another. In\nparticular, any input that's less than the transaction fee is possibly from\nanother wallet, confusing taint analysis with plausible deniability.\n\n3) Discouraging Re-Orgs: By allowing anyone to add inputs to any transaction,\nwe make malicious re-orgs targetting particular coins more disruptive, as the\nset of non-targetted transactions unrelated to the target coins can grow\nfaster, increasing the colateral damage of a malicious re-org attack.\n\nThe downside of ANYONECANPAY is mutability, but if we're not spending zeroconf\nchange that's irrelevant; enabling ANYONECANPAY if zeroconf change is disabled\nis an easy and low-risk first step towards using ANYONECANPAY more widely.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7490a3d789b58e6a3e72d321a00a2496865b8a05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7490a3d789b58e6a3e72d321a00a2496865b8a05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7490a3d789b58e6a3e72d321a00a2496865b8a05/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8250de13587ed05ca45df3e12c5dc9bcb1500e2c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "79de207980f36118cde93cdaf6e3372165e23814",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7490a3d789b58e6a3e72d321a00a2496865b8a05/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7490a3d789b58e6a3e72d321a00a2496865b8a05/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7490a3d789b58e6a3e72d321a00a2496865b8a05",
        "patch": "@@ -2364,8 +2364,17 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     bool signSuccess;\n                     const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n                     SignatureData sigdata;\n+                    int nHashType = SIGHASH_ALL;\n+\n+                    // If we're not spending unconfirmed outputs, we can use\n+                    // ANYONECANPAY as it's ok if someone adds an input to our\n+                    // transaction: we're not relying on the txid being stable\n+                    // anyway.\n+                    if (!bSpendZeroConfChange)\n+                        nHashType |= SIGHASH_ANYONECANPAY;\n+\n                     if (sign)\n-                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->vout[coin.second].nValue, SIGHASH_ALL), scriptPubKey, sigdata);\n+                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.first->vout[coin.second].nValue, nHashType), scriptPubKey, sigdata);\n                     else\n                         signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata);\n "
      }
    ]
  }
]