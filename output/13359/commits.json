[
  {
    "sha": "fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI1ZTJlZDk0MjY5OTQxOTFjN2E5NjBmN2Q2YWEzZDRhOWJmODQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-05-31T14:48:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-06T16:46:38Z"
      },
      "message": "wallet: Directly operate with CMutableTransaction",
      "tree": {
        "sha": "d0170d9d725f73e20990b3e98f2db977cb1053f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0170d9d725f73e20990b3e98f2db977cb1053f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbkVnuAAoJEM4rdWl+aaVIQIcL/AwqWf/gPH0WELsr+CALij6d\n+Lw1Sm80QHIs5xPGLOO3jM8hemqkK6IE2TRq54AV+7+je1oyihVQcl7zAvEIwq/s\nCusnihw3/Hx/1w5ch2XisRonEFwRHuWw13kHG+8fjPRPnTUCdrPp+GoBZj/YyhFg\nLsFFY2Puv397agcNFrP1LRj7JGCtQJlLG66xBNaDECj9/90WnzPaznozg2Cw2Lgv\nkSXE8zllyh8TfJagdPuWu/2BLpOH/HYD2Vy31k38xoeIKDZokEZBLtPeVGUNkTHs\ng6zXCEbZJCgwWfosjqzaTGrZVxsLgGySWf74xE4jzcuMJrKlHqKV1fFRYRl6dPLM\nJLhzwDrYijbHyjlhNYD8YIdPYkZyPvxxPioyZFSAEQjrnazM9mIMvc3+Yzp+fU57\nBzE3XQ0/zjKo0IdMPIdOHic40HtTSTXWFEGx4uBaZSa3bZUaTlyfwmQSc+dds6KI\nVEkwv8jn8jW3MvkKB73IzgOAZ/IJnjmyV4SXHl8Yrg==\n=OsZj\n-----END PGP SIGNATURE-----",
        "payload": "tree d0170d9d725f73e20990b3e98f2db977cb1053f1\nparent adf27b531a7fcd7066ab6649e8073bd1895a823a\nauthor MarcoFalke <falke.marco@gmail.com> 1527778103 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1536252398 -0400\n\nwallet: Directly operate with CMutableTransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adf27b531a7fcd7066ab6649e8073bd1895a823a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adf27b531a7fcd7066ab6649e8073bd1895a823a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adf27b531a7fcd7066ab6649e8073bd1895a823a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 33,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ba3bbe2ff5036dd85f39f058b19027934ffa978a",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -93,8 +93,10 @@ class CValidationState {\n // using only serialization with and without witness data. As witness_size\n // is equal to total_size - stripped_size, this formula is identical to:\n // weight = (stripped_size * 3) + total_size.\n-static inline int64_t GetTransactionWeight(const CTransaction& tx)\n+template <typename T>\n+static inline int64_t GetTransactionWeight(const T& tx)\n {\n+    static_assert(std::is_same<T, CTransaction>::value || std::is_same<T, CMutableTransaction>::value, \"no need to allow other types\");\n     return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }\n static inline int64_t GetBlockWeight(const CBlock& block)"
      },
      {
        "sha": "7cab7aa929f0e502ea599923a2264582c9b94f3f",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -33,7 +33,8 @@ int ParseSighashString(const UniValue& sighash);\n // core_write.cpp\n UniValue ValueFromAmount(const CAmount& amount);\n std::string FormatScript(const CScript& script);\n-std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n+template <typename T>\n+std::string EncodeHexTx(const T& tx, const int serializeFlags = 0);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n void ScriptToUniv(const CScript& script, UniValue& out, bool include_address);"
      },
      {
        "sha": "aa726baf8a65bd2d94958d7f9f2d4213af4ddb24",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -128,12 +128,15 @@ std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDeco\n     return str;\n }\n \n-std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags)\n+template <typename T>\n+std::string EncodeHexTx(const T& tx, const int serializeFlags)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | serializeFlags);\n     ssTx << tx;\n     return HexStr(ssTx.begin(), ssTx.end());\n }\n+template std::string EncodeHexTx(const CTransaction&, const int);\n+template std::string EncodeHexTx(const CMutableTransaction&, const int);\n \n void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)\n {"
      },
      {
        "sha": "178b0f53a7ac3471ab813eb3148092d226bb4fbd",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -253,6 +253,11 @@ int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)\n     return GetVirtualTransactionSize(GetTransactionWeight(tx), nSigOpCost);\n }\n \n+int64_t GetVirtualTransactionSize(const CMutableTransaction& tx, int64_t nSigOpCost)\n+{\n+    return GetVirtualTransactionSize(GetTransactionWeight(tx), nSigOpCost);\n+}\n+\n int64_t GetVirtualTransactionInputSize(const CTxIn& txin, int64_t nSigOpCost)\n {\n     return GetVirtualTransactionSize(GetTransactionInputWeight(txin), nSigOpCost);"
      },
      {
        "sha": "87c00e588971f19c4159e9bf0dea196ddc5f0e2d",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -105,6 +105,7 @@ extern unsigned int nBytesPerSigOp;\n /** Compute the virtual transaction size (weight reinterpreted as bytes). */\n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost);\n int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost = 0);\n+int64_t GetVirtualTransactionSize(const CMutableTransaction& tx, int64_t nSigOpCost = 0);\n int64_t GetVirtualTransactionInputSize(const CTxIn& tx, int64_t nSigOpCost = 0);\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "44c993dfa493883c100a08cd2fc8f5b27006a8ac",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -4,15 +4,18 @@\n \n #include <policy/rbf.h>\n \n-bool SignalsOptInRBF(const CTransaction &tx)\n+template <typename T>\n+bool SignalsOptInRBF(const T& tx)\n {\n-    for (const CTxIn &txin : tx.vin) {\n+    for (const CTxIn& txin : tx.vin) {\n         if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1) {\n             return true;\n         }\n     }\n     return false;\n }\n+template bool SignalsOptInRBF(const CTransaction&);\n+template bool SignalsOptInRBF(const CMutableTransaction&);\n \n RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool)\n {"
      },
      {
        "sha": "e1df08e261fbba2eea75bd6f09601c8908b8c03f",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -15,9 +15,12 @@ enum class RBFTransactionState {\n     FINAL\n };\n \n-// Check whether the sequence numbers on this transaction are signaling\n-// opt-in to replace-by-fee, according to BIP 125\n-bool SignalsOptInRBF(const CTransaction &tx);\n+/**\n+ * Check whether the sequence numbers on this transaction are signaling\n+ * opt-in to replace-by-fee, according to BIP 125\n+ */\n+template <typename T>\n+bool SignalsOptInRBF(const T& tx);\n \n // Determine whether an in-mempool transaction is signaling opt-in to RBF\n // according to BIP 125"
      },
      {
        "sha": "f984e4c5fa73f01b457d2da39e75343db0ff732b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -1478,7 +1478,8 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n+template <typename T>\n+int64_t CalculateMaximumSignedTxSize(const T& tx, const CWallet* wallet, bool use_max_sig)\n {\n     std::vector<CTxOut> txouts;\n     // Look up the inputs.  We should have already checked that this transaction\n@@ -1492,12 +1493,8 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n         assert(input.prevout.n < mi->second.tx->vout.size());\n         txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n     }\n-    return CalculateMaximumSignedTxSize(tx, wallet, txouts, use_max_sig);\n-}\n \n-// txouts needs to be in the order of tx.vin\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig)\n-{\n+    // txouts needs to be in the order of tx.vin\n     CMutableTransaction txNew(tx);\n     if (!wallet->DummySignTx(txNew, txouts, use_max_sig)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n@@ -1506,6 +1503,8 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n     }\n     return GetVirtualTransactionSize(txNew);\n }\n+template int64_t CalculateMaximumSignedTxSize(const CTransaction&, const CWallet*, bool);\n+template int64_t CalculateMaximumSignedTxSize(const CMutableTransaction&, const CWallet*, bool);\n \n int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)\n {"
      },
      {
        "sha": "186e7c9d9456d82f22438f90e62918bd67937e37",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25e2ed9426994191c7a960f7d6aa3d4a9bf844/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fa25e2ed9426994191c7a960f7d6aa3d4a9bf844",
        "patch": "@@ -1198,6 +1198,6 @@ class WalletRescanReserver\n // Use DummySignatureCreator, which inserts 71 byte signatures everywhere.\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig = false);\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig = false);\n+template <typename T>\n+int64_t CalculateMaximumSignedTxSize(const T& tx, const CWallet* wallet, bool use_max_sig = false);\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  }
]