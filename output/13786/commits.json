[
  {
    "sha": "fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVlZDRmOGQyYzRjYjM1MDdiY2MyNDYwNzI1ZDQ4M2YyZTU3ODlj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-28T15:09:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-29T12:04:06Z"
      },
      "message": "refactor: Avoid locking tx pool cs thrice",
      "tree": {
        "sha": "0dabe170ab89702055257cf214ab1de431aa4a9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dabe170ab89702055257cf214ab1de431aa4a9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbXa02AAoJEM4rdWl+aaVIpB0MAIjCN3MTIVH9idLDwj+ELinV\nsA7L+s4IHp3+ZUXqnQC5K6/kegfbpQUxxrQpJKTi6yHQr7jux4iruNjJw0ceks2D\nm281KbtFTb6Qapo4IlvYh9bJyhmKsJAVC29GZbIib2dKKTaWW7+TiTNSwiWKyk1j\n1teRlC1KMuQpc027ldHxU3CYs4rb1t5JvqEb3BHGwG/xLI1ZA2hH7aGwf1sjWqG3\n1DWW3agnfeJaUsYmeTAPPL0eMOruwinxMiM7S3CPJZM0nymy9ICPl3zHLJhM6cdF\n7CPIt/aI+jhKjsTnFVRRLaXEc6FrGC+D3miL4BtDxnXnBxqhSQJzlL0bilC+5Exf\nzw/fLax59BUy4jcV7UkpQvZbFYk3J3t+brmFCjorX7lvOOpRqSf+NtkoQNTleZiW\nbegeCoL8fzJJZiJT/3ldwlt2TGQsHKUwttTZW4730mLz7/W9S6CHmS8cqhyI5aoR\nCtPkHm6fEGXqh+PPaBZsgMUkxRwyCSciNkmMiHFubA==\n=/PTz\n-----END PGP SIGNATURE-----",
        "payload": "tree 0dabe170ab89702055257cf214ab1de431aa4a9b\nparent ad51e1372bc645fc8710da2bc9e0a9fc6c0f27bb\nauthor MarcoFalke <falke.marco@gmail.com> 1532790598 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1532865846 -0400\n\nrefactor: Avoid locking tx pool cs thrice\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad51e1372bc645fc8710da2bc9e0a9fc6c0f27bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad51e1372bc645fc8710da2bc9e0a9fc6c0f27bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad51e1372bc645fc8710da2bc9e0a9fc6c0f27bb"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "d37291b900a1755a7079da1b83a4771668f5d043",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -9,7 +9,7 @@\n #include <list>\n #include <vector>\n \n-static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& pool)\n+static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n     int64_t nTime = 0;\n     unsigned int nHeight = 1;\n@@ -108,6 +108,7 @@ static void MempoolEviction(benchmark::State& state)\n     tx7.vout[1].nValue = 10 * COIN;\n \n     CTxMemPool pool;\n+    LOCK(pool.cs);\n     // Create transaction references outside the \"hot loop\"\n     const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n     const CTransactionRef tx2_r{MakeTransactionRef(tx2)};"
      },
      {
        "sha": "df839884fe083f1e778485037d470f6622c75ed3",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -62,8 +62,8 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n-    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n     LOCK(pool.cs);\n+    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     // Do a simple ShortTxIDs RT\n@@ -162,8 +162,8 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n-    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n     LOCK(pool.cs);\n+    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;\n@@ -232,8 +232,8 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n-    pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(block.vtx[1]));\n     LOCK(pool.cs);\n+    pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(block.vtx[1]));\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;"
      },
      {
        "sha": "fb80599af75eae66b2e455459b4d74b179b39366",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -55,6 +55,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n \n     CTxMemPool testPool;\n+    LOCK(testPool.cs);\n \n     // Nothing in pool, remove should do nothing:\n     unsigned int poolSize = testPool.size();\n@@ -119,6 +120,7 @@ static void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) E\n BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n {\n     CTxMemPool pool;\n+    LOCK(pool.cs);\n     TestMemPoolEntryHelper entry;\n \n     /* 3rd highest fee */\n@@ -165,7 +167,6 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n-    LOCK(pool.cs);\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -292,6 +293,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n {\n     CTxMemPool pool;\n+    LOCK(pool.cs);\n     TestMemPoolEntryHelper entry;\n \n     /* 3rd highest fee */\n@@ -347,7 +349,6 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     }\n     sortedOrder[4] = tx3.GetHash().ToString(); // 0\n \n-    LOCK(pool.cs);\n     CheckSort<ancestor_score>(pool, sortedOrder);\n \n     /* low fee parent with high fee child */\n@@ -421,6 +422,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n     CTxMemPool pool;\n+    LOCK(pool.cs);\n     TestMemPoolEntryHelper entry;\n \n     CMutableTransaction tx1 = CMutableTransaction();\n@@ -593,6 +595,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestryTests)\n     size_t ancestors, descendants;\n \n     CTxMemPool pool;\n+    LOCK(pool.cs);\n     TestMemPoolEntryHelper entry;\n \n     /* Base transaction */"
      },
      {
        "sha": "e2424f012d4170a27d1710a4ee7a8368a5c98871",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -99,7 +99,7 @@ static bool TestSequenceLocks(const CTransaction &tx, int flags)\n // Test suite for ancestor feerate transaction selection.\n // Implemented as an additional function, rather than a separate test case,\n // to allow reusing the blockchain created in CreateNewBlock_validity.\n-static void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey, std::vector<CTransactionRef>& txFirst)\n+static void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n {\n     // Test the ancestor feerate transaction selection.\n     TestMemPoolEntryHelper entry;\n@@ -253,6 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n \n     LOCK(cs_main);\n+    LOCK(::mempool.cs);\n \n     // Just to make sure we can still make simple blocks\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));"
      },
      {
        "sha": "e45fb6d17eb5d74b30b74a94ce8b5d7923b25e65",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -18,6 +18,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n     CBlockPolicyEstimator feeEst;\n     CTxMemPool mpool(&feeEst);\n+    LOCK(mpool.cs);\n     TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     CAmount deltaFee(100);"
      },
      {
        "sha": "d68c38ad4e528d7f93f262b4331017e6088d266a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -151,8 +151,6 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n-    LOCK(cs);\n-\n     setEntries parentHashes;\n     const CTransaction &tx = entry.GetTx();\n \n@@ -363,7 +361,6 @@ void CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     // Add to memory pool without checking anything.\n     // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n-    LOCK(cs);\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n     mapLinks.insert(make_pair(newit, TxLinks()));\n \n@@ -933,7 +930,6 @@ int CTxMemPool::Expire(int64_t time) {\n \n void CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n-    LOCK(cs);\n     setEntries setAncestors;\n     uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;"
      },
      {
        "sha": "0feea08f0b6e9ed963317af2656616654596da60",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -539,8 +539,8 @@ class CTxMemPool\n     // Note that addUnchecked is ONLY called from ATMP outside of tests\n     // and any other callers may break wallet's in-mempool tracking (due to\n     // lack of CValidationInterface::TransactionAddedToMempool callbacks).\n-    void addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n-    void addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n+    void addUnchecked(const uint256& hash, const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void addUnchecked(const uint256& hash, const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n@@ -596,7 +596,7 @@ class CTxMemPool\n      *  fSearchForParents = whether to search a tx's vin for in-mempool parents, or\n      *    look up parents from mapLinks. Must be true for entries not in the mempool\n      */\n-    bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true) const;\n+    bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything"
      },
      {
        "sha": "bb048949ca19ad2be189233d3e6fb2e25a80b12c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa5ed4f8d2c4cb3507bcc2460725d483f2e5789c",
        "patch": "@@ -3018,7 +3018,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n         size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n         size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n         std::string errString;\n-        if (!mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n+        LOCK(::mempool.cs);\n+        if (!::mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n             strFailReason = _(\"Transaction has too long of a mempool chain\");\n             return false;\n         }"
      }
    ]
  }
]