[
  {
    "sha": "0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2MwZDhkNjBiOGFlYzQ4M2E5MjZhOTRhYTdmODViOWIwZDBhY2Ez",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:19:36Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-04T20:04:55Z"
      },
      "message": "Get rid of the internal miner's hashmeter",
      "tree": {
        "sha": "3b60894705a098855587ca51582f183fe8711ab2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b60894705a098855587ca51582f183fe8711ab2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41cced21063a89992ef393dda4fffc44ff60c7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41cced21063a89992ef393dda4fffc44ff60c7c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41cced21063a89992ef393dda4fffc44ff60c7c3"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 2,
      "deletions": 65
    },
    "files": [
      {
        "sha": "cf384bb7b5baf6df7423f49341160be64909f82f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 40,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "patch": "@@ -364,8 +364,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n //\n // Internal miner\n //\n-double dHashesPerSec = 0.0;\n-int64_t nHPSTimerStart = 0;\n \n //\n // ScanHash scans nonces looking for a hash with at least some zero bits.\n@@ -395,10 +393,8 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n             return true;\n \n         // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-            return false;\n         if ((nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n+            return false;\n     }\n }\n \n@@ -485,14 +481,9 @@ void static BitcoinMiner(CWallet *pwallet)\n             uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n             uint256 hash;\n             uint32_t nNonce = 0;\n-            uint32_t nOldNonce = 0;\n             while (true) {\n-                bool fFound = ScanHash(pblock, nNonce, &hash);\n-                uint32_t nHashesDone = nNonce - nOldNonce;\n-                nOldNonce = nNonce;\n-\n                 // Check if something found\n-                if (fFound)\n+                if (ScanHash(pblock, nNonce, &hash))\n                 {\n                     if (hash <= hashTarget)\n                     {\n@@ -514,35 +505,6 @@ void static BitcoinMiner(CWallet *pwallet)\n                     }\n                 }\n \n-                // Meter hashes/sec\n-                static int64_t nHashCounter;\n-                if (nHPSTimerStart == 0)\n-                {\n-                    nHPSTimerStart = GetTimeMillis();\n-                    nHashCounter = 0;\n-                }\n-                else\n-                    nHashCounter += nHashesDone;\n-                if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                {\n-                    static CCriticalSection cs;\n-                    {\n-                        LOCK(cs);\n-                        if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                        {\n-                            dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                            nHPSTimerStart = GetTimeMillis();\n-                            nHashCounter = 0;\n-                            static int64_t nLogTime;\n-                            if (GetTime() - nLogTime > 30 * 60)\n-                            {\n-                                nLogTime = GetTime();\n-                                LogPrintf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n-                            }\n-                        }\n-                    }\n-                }\n-\n                 // Check for stop or if block needs to be rebuilt\n                 boost::this_thread::interruption_point();\n                 // Regtest mode doesn't require peers"
      },
      {
        "sha": "53f3b964e1d2e245737e30079c397a7e48b02527",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "patch": "@@ -28,7 +28,4 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n \n-extern double dHashesPerSec;\n-extern int64_t nHPSTimerStart;\n-\n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "fd66fc78be1d73cf67ba3bc10fe36702c382d594",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "patch": "@@ -201,24 +201,6 @@ Value setgenerate(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n-Value gethashespersec(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"gethashespersec\\n\"\n-            \"\\nReturns a recent hashes per second performance measurement while generating.\\n\"\n-            \"See the getgenerate and setgenerate calls to turn generation on and off.\\n\"\n-            \"\\nResult:\\n\"\n-            \"n            (numeric) The recent hashes per second when generation is on (will return 0 if generation is off)\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"gethashespersec\", \"\")\n-            + HelpExampleRpc(\"gethashespersec\", \"\")\n-        );\n-\n-    if (GetTimeMillis() - nHPSTimerStart > 8000)\n-        return (int64_t)0;\n-    return (int64_t)dHashesPerSec;\n-}\n #endif\n \n \n@@ -237,7 +219,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n             \"  \\\"generate\\\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\\n\"\n             \"  \\\"genproclimit\\\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\\n\"\n-            \"  \\\"hashespersec\\\": n          (numeric) The hashes per second of the generation, or 0 if no generation.\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n             \"  \\\"testnet\\\": true|false      (boolean) If using testnet or not\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",         (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n@@ -260,7 +241,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));\n-    obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n #endif\n     return obj;\n }"
      },
      {
        "sha": "b82a33adccff9c2db04d7d17b4eedd68f71d0f8f",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "patch": "@@ -282,7 +282,6 @@ static const CRPCCommand vRPCCommands[] =\n #ifdef ENABLE_WALLET\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false,      false },\n-    { \"generating\",         \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true,      true,       false },\n #endif\n "
      },
      {
        "sha": "08d3501c6e21a50ea13396f3cbe37d7c4444695e",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=0cc0d8d60b8aec483a926a94aa7f85b9b0d0aca3",
        "patch": "@@ -154,7 +154,6 @@ extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fH\n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnetworkhashps(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value prioritisetransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);"
      }
    ]
  }
]