jonasschnelli,2016-05-27T12:54:01Z,ConceptACK.\n- +1 for <code><var>**In**</code> to avoid shadowing.\n,https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-222138669,222138669,
dcousens,2016-05-28T09:44:30Z,"Concept ACK for both `_<var>` and `varIn`,  the latter is more explicit but seems like it has more potential for actual overlap with an existing variable name.\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-222299920,222299920,
sipa,2016-05-28T11:21:19Z,"Using varIn is more consistent with the rest of the codebase, I think, but no strong opinion either way.\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-222303548,222303548,
laanwj,2016-05-30T07:17:35Z,"Meh, doing x(x) where x is an argument as well as a member variable is valid c++. \n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-222427604,222427604,
paveljanik,2016-05-30T08:36:07Z,"@laanwj Sure, but...? It is valid C++ but can hide problems.\n\nBut I do not have a problem when we say we do not need/want `-Wshadow`...\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-222442025,222442025,
laanwj,2016-05-30T08:42:54Z,"@paveljanik Yes, sorry, with the context (#8105) this makes sense. You should mention that. Out-of-context this seemed like just a bit of playing with coding style.\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-222443305,222443305,
paveljanik,2016-05-30T08:51:50Z,"No problem, my fault. I'll add a link to the first comment here.\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-222445007,222445007,
MarcoFalke,2016-06-03T16:04:43Z,utACK 06363466052bfac13849e65c76333e8d3a1fdf27\n,https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-223620746,223620746,
paveljanik,2016-06-03T16:11:35Z,"Thinking more about it, we should use the style used ""around"" the code...\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-223622532,223622532,
laanwj,2016-06-07T12:43:07Z,"I slightly prefer `_var`.\n\nIs this enough to allow enabling the `-fshadow` warnings afterwards? Or are there remaining cases of shadowing? I'd like to do this in one pull/project as much as possible, to avoid intermediate pulls introducing new problems here.\n(as this is a trivial change, and we want to do this, let's just get it over with)\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224268491,224268491,
paveljanik,2016-06-07T13:17:10Z,We use shadowing in _many_ files.\n\nYou can see a preview/WIP here:\nhttps://github.com/bitcoin/bitcoin/compare/master...paveljanik:20160526_Wshadow?expand=1\n\nThis is not doable (or at least reviewable) in one PR IMO.\n,https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224276982,224276982,
laanwj,2016-06-07T13:44:30Z,"Whoa. That is kind of scary much, looks like a lot more work than I estimated it as.\n\nTo be honest I don't know how to handle a code change on that scale sanely.\n\nBut as the changes are all similar, I do still think it's less overhead to review in one go, than having 100 pulls that change this for one class at a time.\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224284547,224284547,
paveljanik,2016-06-07T13:59:20Z,"I can group pieces together in say 5 PRs. But still, this is not completely solved yet or some changes are too intrusive. And this is not needed to fix immediately. Thus I'd prefer separate PRs (with the help from others/part maintainers).\n\nAnd yes, I too don't know how to handle a code change on that scale sanely. But what I know exactly is I do not want to do that in one PR ;-)\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224288911,224288911,
laanwj,2016-06-07T14:07:51Z,"For something like this it'd be ideal to be able to do it mechanically and deterministically.\nThen people could review the script making the change and replicate the changes.\nMy clang-fu doesn't go that far though.\n\nOtherwise, I agree, the best possibly is probably separate commits for separate parts of the code (GUI, RPC, etc).\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224291452,224291452,
paveljanik,2016-06-07T14:16:51Z,"This can't be done automatically, because there could be BUGS in the code, initialize shadowing, shadowing local variables etc. In some cases, the fix can be removed line...\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224294232,224294232,
sipa,2016-06-07T14:36:31Z,BUGS!\n,https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224300634,224300634,
paveljanik,2016-06-07T17:16:03Z,"While investigating the groups of related changes, I have found one more related to HTTP interface thus I added it here.\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224350009,224350009,
laanwj,2016-06-09T08:32:35Z,"> because there could be BUGS in the code\n\nSure, though I think fixing BUGS should be separate from the pure refactoring step, which may make these BUGS apparent.\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224832380,224832380,
MarcoFalke,2016-06-09T11:37:46Z,"c9cf1b9 gives the same binaries as c9cf1b9~1, so I am assuming there are no BUGS added nor any BUGS removed.\n\nutACK c9cf1b9\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224870178,224870178,
sipa,2016-06-09T13:19:12Z,utACK c9cf1b9de9346540cd8730e9a4111eaafb51ecd8\n,https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-224891651,224891651,
paveljanik,2016-07-31T18:56:19Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-236449693,236449693,
MarcoFalke,2016-08-18T17:09:28Z,"utACK ff8d279 (gives same binaries, so likely no BUGS)\n",https://github.com/bitcoin/bitcoin/pull/8109#issuecomment-240790687,240790687,
