MarcoFalke,2019-11-18 21:06:40,"For reference, one tb is this:\n\n\n```\nvim $(pwd)/test/sanitizer_suppressions # Remove the prevector suppressions \n./configure  --with-sanitizers=address,undefined CC=clang CXX=clang++\nmake\nexport LSAN_OPTIONS=""suppressions=$(pwd)/test/sanitizer_suppressions/lsan""\nexport TSAN_OPTIONS=""suppressions=$(pwd)/test/sanitizer_suppressions/tsan""\nexport UBSAN_OPTIONS=""suppressions=$(pwd)/te",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555208986,555208986,
DrahtBot,2019-11-18 21:47:23,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17208](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17208.html) (Make all tests pass UBSan without using any",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555224412,555224412,
laanwj,2019-11-19 08:00:03,"> If this is needed, there is another problem. Why does a move cause UB? And why is a move being invoked in the first place with operator=?\n\nAgree. This is kind of scary, and working around it like this seems a bad idea if we don't understand why it happens.",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555380874,555380874,
laanwj,2019-11-19 08:51:45,"BTW, this reverts 2ddfcfd2d67bc2bd8aa4682ceaba6a59614e54d1 (#9349), with the difference that the new code invokes `CScript` instead of `CScriptBase`.",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555398703,555398703,
laanwj,2019-11-19 09:01:43,"Could this pragma in prevector.h be causing alignment issues? (doesn't it mean something like ""ignore all padding requirements within the struct"")\n```\n#pragma pack(push, 1)\n```\n\n\n",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555402521,555402521,
MarcoFalke,2019-11-19 13:45:03,"Smaller code to reproduce:\n\n```cpp\nstruct Test {\n    uint8_t a : 8;\n    CScript script;\n};\n\n\n{\n    const std::array<unsigned char, 5> D{1, 2, 3, 4, 5};\n    Test t{0x0f, {}};\n    t.script = CScript{D.begin(), D.end()};\n}\n```\n\nResult:\n\n```\nprevector.h:452:19: runtime error: reference binding to misaligned address 0x7ffe6446c741 for type 'prevector<28, unsigned c",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555513897,555513897,
laanwj,2019-11-19 13:50:28,Does it go away if you remove the pragma?,https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555516011,555516011,
MarcoFalke,2019-11-19 14:13:46,"Yes, with this diff it goes away:\n\n```diff\ndiff --git a/src/prevector.h b/src/prevector.h\nindex d307495fbe..a55bcb50fe 100644\n--- a/src/prevector.h\n+++ b/src/prevector.h\n@@ -14,7 +14,6 @@\n #include <cstddef>\n #include <type_traits>\n \n-#pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N\n  *  elements directly (without heap al",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555525385,555525385,
laanwj,2019-11-19 14:43:08,"I would prefer that solution, then. I'm not sure in how far unaligned integers are really UB in C++ (versus architecture/implementation defined), but it'd be better to avoid that for architectures that don't support (or have slow fallback paths for) unaligned reads/writes. (E.g. SiFive U540 traps into the kernel/bootloader to handle unaligned reads and writes, with a function, in software. Wouldn'",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555538652,555538652,
practicalswift,2019-11-19 17:26:53,"@laanwj John Regehr and Pascal Cuoq's excellent post [""Undefined Behavior in 2017""](https://blog.regehr.org/archives/1520) has a nice section on Alignment Violations. Highly recommended reading!",https://github.com/bitcoin/bitcoin/pull/17510#issuecomment-555617057,555617057,
sipa,2019-11-18 18:36:06,"If this is needed, there is another problem. Why does a move cause UB? And why is a move being invoked in the first place with operator=?",https://github.com/bitcoin/bitcoin/pull/17510#discussion_r347542712,347542712,src/script/script.h
achow101,2019-11-18 19:44:04,No idea. Maybe @practicalswift can shed some light here?,https://github.com/bitcoin/bitcoin/pull/17510#discussion_r347574079,347574079,src/script/script.h
Sjors,2019-11-19 10:58:49,See also: https://github.com/bitcoin/bitcoin/pull/17156#issuecomment-544160293,https://github.com/bitcoin/bitcoin/pull/17510#discussion_r347858416,347858416,src/script/script.h
