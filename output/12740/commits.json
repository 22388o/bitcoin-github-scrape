[
  {
    "sha": "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2M0NWJjZTkyNjRmNGE4ZmE0OGYyZTdlY2FmMTAyOTcxZmMwMjZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-21T00:37:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-21T21:14:04Z"
      },
      "message": "Add native support for serializing char arrays without FLATDATA\n\nSupport is added to serialize arrays of type char or unsigned char directly,\nwithout any wrappers. All invocations of the FLATDATA wrappers that are\nobsoleted by this are removed.\n\nThis includes a patch by Russell Yanofsky to make char casting type safe.\n\nThe serialization of CSubNet is changed to serialize a bool directly rather\nthan though FLATDATA. This makes the serialization independent of the size\nof the bool type (and will use 1 byte everywhere).",
      "tree": {
        "sha": "fa850900cea3277269ae3dc303b6c3cf95c7ee20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa850900cea3277269ae3dc303b6c3cf95c7ee20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ba3d4f4393d81148422d24d222fe7ed00130194",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ba3d4f4393d81148422d24d222fe7ed00130194",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ba3d4f4393d81148422d24d222fe7ed00130194"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 40,
      "deletions": 26
    },
    "files": [
      {
        "sha": "e4620e63c6d4cf20cca21873b9ee956215ca1dc2",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -22,8 +22,8 @@ bool SerializeDB(Stream& stream, const Data& data)\n     // Write and commit header, data\n     try {\n         CHashWriter hasher(SER_DISK, CLIENT_VERSION);\n-        stream << FLATDATA(Params().MessageStart()) << data;\n-        hasher << FLATDATA(Params().MessageStart()) << data;\n+        stream << Params().MessageStart() << data;\n+        hasher << Params().MessageStart() << data;\n         stream << hasher.GetHash();\n     } catch (const std::exception& e) {\n         return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n@@ -66,7 +66,7 @@ bool DeserializeDB(Stream& stream, Data& data, bool fCheckSum = true)\n         CHashVerifier<Stream> verifier(&stream);\n         // de-serialize file header (network specific magic number) and ..\n         unsigned char pchMsgTmp[4];\n-        verifier >> FLATDATA(pchMsgTmp);\n+        verifier >> pchMsgTmp;\n         // ... verify the network matches ours\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n             return error(\"%s: Invalid network magic number\", __func__);"
      },
      {
        "sha": "ad6b55eb5894ac82247813187b47f7b45843b2d9",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -93,7 +93,7 @@ class CNetAddr\n \n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(FLATDATA(ip));\n+            READWRITE(ip);\n         }\n \n         friend class CSubNet;\n@@ -131,8 +131,8 @@ class CSubNet\n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(network);\n-            READWRITE(FLATDATA(netmask));\n-            READWRITE(FLATDATA(valid));\n+            READWRITE(netmask);\n+            READWRITE(valid);\n         }\n };\n \n@@ -166,7 +166,7 @@ class CService : public CNetAddr\n \n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(FLATDATA(ip));\n+            READWRITE(ip);\n             unsigned short portN = htons(port);\n             READWRITE(FLATDATA(portN));\n             if (ser_action.ForRead())"
      },
      {
        "sha": "a07c5ea8624e8822d9d3d780f8ef98b6c2299690",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -48,10 +48,10 @@ class CMessageHeader\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n-        READWRITE(FLATDATA(pchMessageStart));\n-        READWRITE(FLATDATA(pchCommand));\n+        READWRITE(pchMessageStart);\n+        READWRITE(pchCommand);\n         READWRITE(nMessageSize);\n-        READWRITE(FLATDATA(pchChecksum));\n+        READWRITE(pchChecksum);\n     }\n \n     char pchMessageStart[MESSAGE_START_SIZE];"
      },
      {
        "sha": "247e915298443401b203c093fd1bc4e4cc310f8d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+inline char* CharCast(char* c) { return c; }\n+inline char* CharCast(unsigned char* c) { return (char*)c; }\n+inline const char* CharCast(const char* c) { return c; }\n+inline const char* CharCast(const unsigned char* c) { return (const char*)c; }\n+\n /*\n  * Lowest-level serialization and conversion.\n  * @note Sizes of these types are verified in the tests\n@@ -177,6 +183,8 @@ template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }\n template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }\n+template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(a, N); }\n+template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(CharCast(a), N); }\n \n template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } // TODO Get rid of bare char\n template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }\n@@ -189,6 +197,8 @@ template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a =\n template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\n template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }\n template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }\n+template<typename Stream, int N> inline void Unserialize(Stream& s, char (&a)[N]) { s.read(a, N); }\n+template<typename Stream, int N> inline void Unserialize(Stream& s, unsigned char (&a)[N]) { s.read(CharCast(a), N); }\n \n template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }\n template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }"
      },
      {
        "sha": "6552613c042c31f60479fa2a112c03768e880180",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -64,7 +64,7 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n {\n     CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n-    ssPeersIn << FLATDATA(Params().MessageStart());\n+    ssPeersIn << Params().MessageStart();\n     ssPeersIn << _addrman;\n     std::string str = ssPeersIn.str();\n     std::vector<unsigned char> vchData(str.begin(), str.end());\n@@ -110,7 +110,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n-        ssPeers1 >> FLATDATA(pchMsgTmp);\n+        ssPeers1 >> pchMsgTmp;\n         ssPeers1 >> addrman1;\n     } catch (const std::exception& e) {\n         exceptionThrown = true;\n@@ -142,7 +142,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n-        ssPeers1 >> FLATDATA(pchMsgTmp);\n+        ssPeers1 >> pchMsgTmp;\n         ssPeers1 >> addrman1;\n     } catch (const std::exception& e) {\n         exceptionThrown = true;"
      },
      {
        "sha": "9b8b7bdc56a6c80c91cdf240614e6004ba0414d2",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -19,19 +19,23 @@ class CSerializeMethodsTestSingle\n     int intval;\n     bool boolval;\n     std::string stringval;\n-    const char* charstrval;\n+    char charstrval[16];\n     CTransactionRef txval;\n public:\n     CSerializeMethodsTestSingle() = default;\n-    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, CTransaction txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), charstrval(charstrvalin), txval(MakeTransactionRef(txvalin)){}\n+    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, CTransaction txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), txval(MakeTransactionRef(txvalin))\n+    {\n+        memcpy(charstrval, charstrvalin, sizeof(charstrval));\n+    }\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(intval);\n         READWRITE(boolval);\n         READWRITE(stringval);\n-        READWRITE(FLATDATA(charstrval));\n+        READWRITE(charstrval);\n         READWRITE(txval);\n     }\n \n@@ -53,7 +57,7 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(intval, boolval, stringval, FLATDATA(charstrval), txval);\n+        READWRITE(intval, boolval, stringval, charstrval, txval);\n     }\n };\n \n@@ -344,7 +348,7 @@ BOOST_AUTO_TEST_CASE(class_methods)\n     int intval(100);\n     bool boolval(true);\n     std::string stringval(\"testing\");\n-    const char* charstrval(\"testing charstr\");\n+    const char charstrval[16] = \"testing charstr\";\n     CMutableTransaction txval;\n     CSerializeMethodsTestSingle methodtest1(intval, boolval, stringval, charstrval, txval);\n     CSerializeMethodsTestMany methodtest2(intval, boolval, stringval, charstrval, txval);\n@@ -360,7 +364,7 @@ BOOST_AUTO_TEST_CASE(class_methods)\n     BOOST_CHECK(methodtest2 == methodtest3);\n     BOOST_CHECK(methodtest3 == methodtest4);\n \n-    CDataStream ss2(SER_DISK, PROTOCOL_VERSION, intval, boolval, stringval, FLATDATA(charstrval), txval);\n+    CDataStream ss2(SER_DISK, PROTOCOL_VERSION, intval, boolval, stringval, charstrval, txval);\n     ss2 >> methodtest3;\n     BOOST_CHECK(methodtest3 == methodtest4);\n }"
      },
      {
        "sha": "5d057108b13b327ee5c9cbb8b3136d1816efad12",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -57,16 +57,16 @@ BOOST_AUTO_TEST_CASE(streams_vector_writer)\n     BOOST_CHECK((vch == std::vector<unsigned char>{{0, 0, 0, 0, 1, 2}}));\n     vch.clear();\n \n-    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 0, FLATDATA(bytes));\n+    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 0, bytes);\n     BOOST_CHECK((vch == std::vector<unsigned char>{{3, 4, 5, 6}}));\n-    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 0, FLATDATA(bytes));\n+    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 0, bytes);\n     BOOST_CHECK((vch == std::vector<unsigned char>{{3, 4, 5, 6}}));\n     vch.clear();\n \n     vch.resize(4, 8);\n-    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 2, a, FLATDATA(bytes), b);\n+    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 2, a, bytes, b);\n     BOOST_CHECK((vch == std::vector<unsigned char>{{8, 8, 1, 3, 4, 5, 6, 2}}));\n-    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 2, a, FLATDATA(bytes), b);\n+    CVectorWriter(SER_NETWORK, INIT_PROTO_VERSION, vch, 2, a, bytes, b);\n     BOOST_CHECK((vch == std::vector<unsigned char>{{8, 8, 1, 3, 4, 5, 6, 2}}));\n     vch.clear();\n }"
      },
      {
        "sha": "368caef62c5586e98ff2ed5e4892bb429e7edfee",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
        "patch": "@@ -1077,7 +1077,7 @@ static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMes\n \n     // Write index header\n     unsigned int nSize = GetSerializeSize(fileout, block);\n-    fileout << FLATDATA(messageStart) << nSize;\n+    fileout << messageStart << nSize;\n \n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n@@ -1441,7 +1441,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n \n     // Write index header\n     unsigned int nSize = GetSerializeSize(fileout, blockundo);\n-    fileout << FLATDATA(messageStart) << nSize;\n+    fileout << messageStart << nSize;\n \n     // Write undo data\n     long fileOutPos = ftell(fileout.Get());\n@@ -4283,7 +4283,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 unsigned char buf[CMessageHeader::MESSAGE_START_SIZE];\n                 blkdat.FindByte(chainparams.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n-                blkdat >> FLATDATA(buf);\n+                blkdat >> buf;\n                 if (memcmp(buf, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE))\n                     continue;\n                 // read size"
      }
    ]
  }
]