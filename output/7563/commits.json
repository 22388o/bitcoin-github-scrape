[
  {
    "sha": "5912ba295e13040f387c2592b7154855b82138a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTEyYmEyOTVlMTMwNDBmMzg3YzI1OTJiNzE1NDg1NWI4MjEzOGE3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-01-12T13:30:41Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-24T22:12:28Z"
      },
      "message": "Consensus: Introduce CBlockIndexView in consensus/storage_interfaces_cpp.h",
      "tree": {
        "sha": "93c8f186c73e125e7610675dc9c0ccdd3af5472b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93c8f186c73e125e7610675dc9c0ccdd3af5472b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5912ba295e13040f387c2592b7154855b82138a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5912ba295e13040f387c2592b7154855b82138a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5912ba295e13040f387c2592b7154855b82138a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5912ba295e13040f387c2592b7154855b82138a7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6e00af8193f46fa02af13c2e9852a6bd7461d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6e00af8193f46fa02af13c2e9852a6bd7461d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6e00af8193f46fa02af13c2e9852a6bd7461d00"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9d2e12f9dceef94be63215a1f9a36b4d906cc3a2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5912ba295e13040f387c2592b7154855b82138a7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5912ba295e13040f387c2592b7154855b82138a7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5912ba295e13040f387c2592b7154855b82138a7",
        "patch": "@@ -261,6 +261,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   consensus/merkle.cpp \\\n   consensus/merkle.h \\\n   consensus/params.h \\\n+  consensus/storage_interfaces_cpp.h \\\n   consensus/validation.h \\\n   hash.cpp \\\n   hash.h \\"
      },
      {
        "sha": "597ee41613cf29b24be723ae77b6d22fcab9d8f5",
        "filename": "src/consensus/storage_interfaces_cpp.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5912ba295e13040f387c2592b7154855b82138a7/src/consensus/storage_interfaces_cpp.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5912ba295e13040f387c2592b7154855b82138a7/src/consensus/storage_interfaces_cpp.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/storage_interfaces_cpp.h?ref=5912ba295e13040f387c2592b7154855b82138a7",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_STORAGE_INTERFACES_CPP_H\n+#define BITCOIN_CONSENSUS_STORAGE_INTERFACES_CPP_H\n+\n+#include \"uint256.h\"\n+\n+// CPP storage interfaces\n+\n+class CBlockIndexView\n+{\n+public:\n+    CBlockIndexView() {};\n+    virtual ~CBlockIndexView() {};\n+\n+    virtual const uint256 GetBlockHash() const = 0;\n+    //! Efficiently find an ancestor of this block.\n+    virtual const CBlockIndexView* GetAncestorView(int64_t height) const = 0;\n+    virtual int32_t GetHeight() const = 0;\n+    virtual int32_t GetVersion() const = 0;\n+    virtual int32_t GetTime() const = 0;\n+    virtual int32_t GetBits() const = 0;\n+    // Potential optimizations\n+    virtual const CBlockIndexView* GetPrev() const\n+    {\n+        return GetAncestorView(GetHeight() - 1);\n+    };\n+    virtual int64_t GetMedianTimePast() const = 0;\n+};\n+\n+#endif // BITCOIN_CONSENSUS_STORAGE_INTERFACES_CPP_H"
      }
    ]
  },
  {
    "sha": "ecc0774edb3a7d139eba5da15304c14965953567",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2MwNzc0ZWRiM2E3ZDEzOWViYTVkYTE1MzA0YzE0OTY1OTUzNTY3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-01-12T13:31:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-24T22:12:38Z"
      },
      "message": "Consensus: Make CBlockIndex(chain.h) an implementation of CBlockIndexView",
      "tree": {
        "sha": "f192594126615b5fbe2def44a6633a177a8e4034",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f192594126615b5fbe2def44a6633a177a8e4034"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc0774edb3a7d139eba5da15304c14965953567",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc0774edb3a7d139eba5da15304c14965953567",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc0774edb3a7d139eba5da15304c14965953567",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc0774edb3a7d139eba5da15304c14965953567/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5912ba295e13040f387c2592b7154855b82138a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5912ba295e13040f387c2592b7154855b82138a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5912ba295e13040f387c2592b7154855b82138a7"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "668e5f41cb8f5de841021af2c64ca03868fff047",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc0774edb3a7d139eba5da15304c14965953567/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc0774edb3a7d139eba5da15304c14965953567/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=ecc0774edb3a7d139eba5da15304c14965953567",
        "patch": "@@ -105,6 +105,11 @@ const CBlockIndex* CBlockIndex::GetAncestor(int height) const\n     return const_cast<CBlockIndex*>(this)->GetAncestor(height);\n }\n \n+const CBlockIndexView* CBlockIndex::GetAncestorView(int64_t height) const\n+{\n+    return this->GetAncestor(height);\n+}\n+\n void CBlockIndex::BuildSkip()\n {\n     if (pprev)"
      },
      {
        "sha": "5c5f8bb12b736c6de1af551eaa86e8371e1ddb8e",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc0774edb3a7d139eba5da15304c14965953567/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc0774edb3a7d139eba5da15304c14965953567/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=ecc0774edb3a7d139eba5da15304c14965953567",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_CHAIN_H\n \n #include \"arith_uint256.h\"\n+#include \"consensus/storage_interfaces_cpp.h\"\n #include \"primitives/block.h\"\n #include \"pow.h\"\n #include \"tinyformat.h\"\n@@ -99,7 +100,7 @@ enum BlockStatus {\n  * candidates to be the next block. A blockindex may have multiple pprev pointing\n  * to it, but at most one of them can be part of the currently active branch.\n  */\n-class CBlockIndex\n+class CBlockIndex : public CBlockIndexView\n {\n public:\n     //! pointer to the hash of the block, if any. Memory is owned by this CBlockIndex\n@@ -217,7 +218,7 @@ class CBlockIndex\n         return block;\n     }\n \n-    uint256 GetBlockHash() const\n+    virtual const uint256 GetBlockHash() const\n     {\n         return *phashBlock;\n     }\n@@ -229,7 +230,7 @@ class CBlockIndex\n \n     enum { nMedianTimeSpan=11 };\n \n-    int64_t GetMedianTimePast() const\n+    virtual int64_t GetMedianTimePast() const\n     {\n         int64_t pmedian[nMedianTimeSpan];\n         int64_t* pbegin = &pmedian[nMedianTimeSpan];\n@@ -280,6 +281,17 @@ class CBlockIndex\n     //! Efficiently find an ancestor of this block.\n     CBlockIndex* GetAncestor(int height);\n     const CBlockIndex* GetAncestor(int height) const;\n+    //! Implement CBlockIndexView's interface\n+    virtual const CBlockIndexView* GetAncestorView(int64_t height) const;\n+    virtual int32_t GetHeight() const { return nHeight; };\n+    virtual int32_t GetVersion() const { return nVersion; };\n+    virtual int32_t GetTime() const { return nTime; };\n+    virtual int32_t GetBits() const { return nBits; };\n+    //! More efficient version of GetPrev()\n+    virtual const CBlockIndexView* GetPrev() const\n+    {\n+        return pprev;\n+    };\n };\n \n arith_uint256 GetBlockProof(const CBlockIndex& block);\n@@ -326,7 +338,7 @@ class CDiskBlockIndex : public CBlockIndex\n         READWRITE(nNonce);\n     }\n \n-    uint256 GetBlockHash() const\n+    virtual const uint256 GetBlockHash() const\n     {\n         CBlockHeader block;\n         block.nVersion        = nVersion;"
      }
    ]
  },
  {
    "sha": "bf26c10b28af9e8154a507ae8dd5ac42648706a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjI2YzEwYjI4YWY5ZTgxNTRhNTA3YWU4ZGQ1YWM0MjY0ODcwNmEx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-01-12T13:32:02Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-24T22:12:40Z"
      },
      "message": "Consensus: Decouple pow.o from chain.o",
      "tree": {
        "sha": "3082120bb9ef00135cf34236e27eb7b9ea414840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3082120bb9ef00135cf34236e27eb7b9ea414840"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf26c10b28af9e8154a507ae8dd5ac42648706a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf26c10b28af9e8154a507ae8dd5ac42648706a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf26c10b28af9e8154a507ae8dd5ac42648706a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf26c10b28af9e8154a507ae8dd5ac42648706a1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecc0774edb3a7d139eba5da15304c14965953567",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc0774edb3a7d139eba5da15304c14965953567",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc0774edb3a7d139eba5da15304c14965953567"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "a0ef2f00b22fd111efcf8068ec1c33e9446751a2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf26c10b28af9e8154a507ae8dd5ac42648706a1/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf26c10b28af9e8154a507ae8dd5ac42648706a1/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bf26c10b28af9e8154a507ae8dd5ac42648706a1",
        "patch": "@@ -124,7 +124,6 @@ BITCOIN_CORE_H = \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n-  pow.h \\\n   protocol.h \\\n   random.h \\\n   reverselock.h \\\n@@ -190,7 +189,6 @@ libbitcoin_server_a_SOURCES = \\\n   noui.cpp \\\n   policy/fees.cpp \\\n   policy/policy.cpp \\\n-  pow.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\\n   rpc/mining.cpp \\\n@@ -265,6 +263,8 @@ libbitcoin_consensus_a_SOURCES = \\\n   consensus/validation.h \\\n   hash.cpp \\\n   hash.h \\\n+  pow.cpp \\\n+  pow.h \\\n   prevector.h \\\n   primitives/block.cpp \\\n   primitives/block.h \\"
      },
      {
        "sha": "0091b2d13173554d360b0d47fa5d06a240126b77",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf26c10b28af9e8154a507ae8dd5ac42648706a1/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf26c10b28af9e8154a507ae8dd5ac42648706a1/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=bf26c10b28af9e8154a507ae8dd5ac42648706a1",
        "patch": "@@ -6,11 +6,11 @@\n #include \"pow.h\"\n \n #include \"arith_uint256.h\"\n-#include \"chain.h\"\n+#include \"consensus/storage_interfaces_cpp.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+unsigned int GetNextWorkRequired(const CBlockIndexView* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n     unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n@@ -19,43 +19,43 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         return nProofOfWorkLimit;\n \n     // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n+    if ((pindexLast->GetHeight() + 1) % params.DifficultyAdjustmentInterval() != 0)\n     {\n         if (params.fPowAllowMinDifficultyBlocks)\n         {\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n+            if (pblock->GetBlockTime() > pindexLast->GetTime() + params.nPowTargetSpacing*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n-                const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n-                    pindex = pindex->pprev;\n-                return pindex->nBits;\n+                const CBlockIndexView* pindex = pindexLast;\n+                while (pindex->GetPrev() && pindex->GetHeight() % params.DifficultyAdjustmentInterval() != 0 && (uint32_t)pindex->GetBits() == nProofOfWorkLimit)\n+                    pindex = pindex->GetPrev();\n+                return pindex->GetBits();\n             }\n         }\n-        return pindexLast->nBits;\n+        return pindexLast->GetBits();\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n-    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n+    int nHeightFirst = pindexLast->GetHeight() - (params.DifficultyAdjustmentInterval() - 1);\n     assert(nHeightFirst >= 0);\n-    const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n+    const CBlockIndexView* pindexFirst = pindexLast->GetAncestorView(nHeightFirst);\n     assert(pindexFirst);\n \n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n+    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetTime(), params);\n }\n \n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+unsigned int CalculateNextWorkRequired(const CBlockIndexView* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     if (params.fPowNoRetargeting)\n-        return pindexLast->nBits;\n+        return pindexLast->GetBits();\n \n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n+    int64_t nActualTimespan = pindexLast->GetTime() - nFirstBlockTime;\n     if (nActualTimespan < params.nPowTargetTimespan/4)\n         nActualTimespan = params.nPowTargetTimespan/4;\n     if (nActualTimespan > params.nPowTargetTimespan*4)\n@@ -65,7 +65,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n     arith_uint256 bnNew;\n     arith_uint256 bnOld;\n-    bnNew.SetCompact(pindexLast->nBits);\n+    bnNew.SetCompact(pindexLast->GetBits());\n     bnOld = bnNew;\n     bnNew *= nActualTimespan;\n     bnNew /= params.nPowTargetTimespan;"
      },
      {
        "sha": "6f519234bd56000ec7aa08f9a6c5b8b23b16b95c",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf26c10b28af9e8154a507ae8dd5ac42648706a1/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf26c10b28af9e8154a507ae8dd5ac42648706a1/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=bf26c10b28af9e8154a507ae8dd5ac42648706a1",
        "patch": "@@ -11,11 +11,11 @@\n #include <stdint.h>\n \n class CBlockHeader;\n-class CBlockIndex;\n+class CBlockIndexView;\n class uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+unsigned int GetNextWorkRequired(const CBlockIndexView* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+unsigned int CalculateNextWorkRequired(const CBlockIndexView* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);"
      }
    ]
  }
]