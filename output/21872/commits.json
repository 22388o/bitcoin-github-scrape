[
  {
    "sha": "955eee76803c098978cf0bbc7f1f6d3c230544e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTVlZWU3NjgwM2MwOTg5NzhjZjBiYmM3ZjFmNmQzYzIzMDU0NGUy",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-05-06T15:25:17Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-05-06T15:30:52Z"
      },
      "message": "net: Sanitize message type for logging\n\n- Use `SanitizeString` when logging message errors to make sure that the\nmessage type is sanitized.\n\n- For the `MESSAGESTART` error don't inspect and log header details at\nall: receiving invalid start bytes makes it likely that the packet isn't\neven formatted as valid P2P message. Logging the four unexpected start\nbytes should be enough.\n\n- Update `p2p_invalid_messages.py` test to check this.\n\nIssue reported by gmaxwell.",
      "tree": {
        "sha": "43972207a367ea0b51cd416ff94ab9c315a24071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43972207a367ea0b51cd416ff94ab9c315a24071"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/955eee76803c098978cf0bbc7f1f6d3c230544e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/955eee76803c098978cf0bbc7f1f6d3c230544e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/955eee76803c098978cf0bbc7f1f6d3c230544e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/955eee76803c098978cf0bbc7f1f6d3c230544e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c05da4a5c57d7fd0fc53817ad6f0a07c0f08b5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c05da4a5c57d7fd0fc53817ad6f0a07c0f08b5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c05da4a5c57d7fd0fc53817ad6f0a07c0f08b5b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "02e367249395208b5c0ce76caa7be162b8ae9b54",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/955eee76803c098978cf0bbc7f1f6d3c230544e2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/955eee76803c098978cf0bbc7f1f6d3c230544e2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=955eee76803c098978cf0bbc7f1f6d3c230544e2",
        "patch": "@@ -687,13 +687,13 @@ int V1TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n \n     // Check start string, network magic\n     if (memcmp(hdr.pchMessageStart, m_chain_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - MESSAGESTART (%s, %u bytes), received %s, peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, HexStr(hdr.pchMessageStart), m_node_id);\n+        LogPrint(BCLog::NET, \"HEADER ERROR - MESSAGESTART received %s, peer=%d\\n\", HexStr(hdr.pchMessageStart), m_node_id);\n         return -1;\n     }\n \n     // reject messages larger than MAX_SIZE or MAX_PROTOCOL_MESSAGE_LENGTH\n     if (hdr.nMessageSize > MAX_SIZE || hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - SIZE (%s, %u bytes), peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, m_node_id);\n+        LogPrint(BCLog::NET, \"HEADER ERROR - SIZE (%s, %u bytes), peer=%d\\n\", SanitizeString(hdr.GetCommand()), hdr.nMessageSize, m_node_id);\n         return -1;\n     }\n \n@@ -755,7 +755,7 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n         msg = std::nullopt;\n     } else if (!hdr.IsCommandValid()) {\n         LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n-                 hdr.GetCommand(), msg->m_message_size, m_node_id);\n+                 SanitizeString(hdr.GetCommand()), msg->m_message_size, m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n         msg.reset();\n     }"
      },
      {
        "sha": "c81886a982603d7032a830fe03c3559338fc332b",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/955eee76803c098978cf0bbc7f1f6d3c230544e2/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/955eee76803c098978cf0bbc7f1f6d3c230544e2/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=955eee76803c098978cf0bbc7f1f6d3c230544e2",
        "patch": "@@ -37,7 +37,7 @@\n class msg_unrecognized:\n     \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n \n-    msgtype = b'badmsg'\n+    msgtype = b'badmsg\\x01'\n \n     def __init__(self, *, str_data):\n         self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n@@ -104,7 +104,7 @@ def test_duplicate_version_msg(self):\n     def test_magic_bytes(self):\n         self.log.info(\"Test message with invalid magic bytes disconnects peer\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['HEADER ERROR - MESSAGESTART (badmsg, 2 bytes), received ffffffff']):\n+        with self.nodes[0].assert_debug_log(['HEADER ERROR - MESSAGESTART received ffffffff']):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n             # modify magic bytes\n             msg = b'\\xff' * 4 + msg[4:]"
      }
    ]
  },
  {
    "sha": "09205b33aa74e385caa2803aa6febc18ad1efa32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTIwNWIzM2FhNzRlMzg1Y2FhMjgwM2FhNmZlYmMxOGFkMWVmYTMy",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-05-07T05:45:55Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-05-07T09:28:21Z"
      },
      "message": "net: Clarify message header validation errors\n\nMake the errors less shouty and more descriptive.",
      "tree": {
        "sha": "4c95ac5d44a17b8b3539b730fbdde8739adc5521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c95ac5d44a17b8b3539b730fbdde8739adc5521"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09205b33aa74e385caa2803aa6febc18ad1efa32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09205b33aa74e385caa2803aa6febc18ad1efa32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09205b33aa74e385caa2803aa6febc18ad1efa32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09205b33aa74e385caa2803aa6febc18ad1efa32/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "955eee76803c098978cf0bbc7f1f6d3c230544e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/955eee76803c098978cf0bbc7f1f6d3c230544e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/955eee76803c098978cf0bbc7f1f6d3c230544e2"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ce38c140cea53a938971e7e0dc29d80daf479858",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09205b33aa74e385caa2803aa6febc18ad1efa32/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09205b33aa74e385caa2803aa6febc18ad1efa32/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=09205b33aa74e385caa2803aa6febc18ad1efa32",
        "patch": "@@ -681,19 +681,19 @@ int V1TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes)\n         hdrbuf >> hdr;\n     }\n     catch (const std::exception&) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - UNABLE TO DESERIALIZE, peer=%d\\n\", m_node_id);\n+        LogPrint(BCLog::NET, \"Header error: Unable to deserialize, peer=%d\\n\", m_node_id);\n         return -1;\n     }\n \n     // Check start string, network magic\n     if (memcmp(hdr.pchMessageStart, m_chain_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - MESSAGESTART received %s, peer=%d\\n\", HexStr(hdr.pchMessageStart), m_node_id);\n+        LogPrint(BCLog::NET, \"Header error: Wrong MessageStart %s received, peer=%d\\n\", HexStr(hdr.pchMessageStart), m_node_id);\n         return -1;\n     }\n \n     // reject messages larger than MAX_SIZE or MAX_PROTOCOL_MESSAGE_LENGTH\n     if (hdr.nMessageSize > MAX_SIZE || hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - SIZE (%s, %u bytes), peer=%d\\n\", SanitizeString(hdr.GetCommand()), hdr.nMessageSize, m_node_id);\n+        LogPrint(BCLog::NET, \"Header error: Size too large (%s, %u bytes), peer=%d\\n\", SanitizeString(hdr.GetCommand()), hdr.nMessageSize, m_node_id);\n         return -1;\n     }\n \n@@ -746,15 +746,15 @@ std::optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono\n \n     // Check checksum and header command string\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s, peer=%d\\n\",\n+        LogPrint(BCLog::NET, \"Header error: Wrong checksum (%s, %u bytes), expected %s was %s, peer=%d\\n\",\n                  SanitizeString(msg->m_command), msg->m_message_size,\n                  HexStr(Span<uint8_t>(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE)),\n                  HexStr(hdr.pchChecksum),\n                  m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n         msg = std::nullopt;\n     } else if (!hdr.IsCommandValid()) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n+        LogPrint(BCLog::NET, \"Header error: Invalid message type (%s, %u bytes), peer=%d\\n\",\n                  SanitizeString(hdr.GetCommand()), msg->m_message_size, m_node_id);\n         out_err_raw_size = msg->m_raw_message_size;\n         msg.reset();"
      },
      {
        "sha": "788a81d4af07f6323088b1514c2ad91b3426ba59",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09205b33aa74e385caa2803aa6febc18ad1efa32/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09205b33aa74e385caa2803aa6febc18ad1efa32/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=09205b33aa74e385caa2803aa6febc18ad1efa32",
        "patch": "@@ -104,7 +104,7 @@ def test_duplicate_version_msg(self):\n     def test_magic_bytes(self):\n         self.log.info(\"Test message with invalid magic bytes disconnects peer\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['HEADER ERROR - MESSAGESTART received ffffffff']):\n+        with self.nodes[0].assert_debug_log(['Header error: Wrong MessageStart ffffffff received']):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n             # modify magic bytes\n             msg = b'\\xff' * 4 + msg[4:]\n@@ -115,7 +115,7 @@ def test_magic_bytes(self):\n     def test_checksum(self):\n         self.log.info(\"Test message with invalid checksum logs an error\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['CHECKSUM ERROR (badmsg, 2 bytes), expected 78df0a04 was ffffffff']):\n+        with self.nodes[0].assert_debug_log(['Header error: Wrong checksum (badmsg, 2 bytes), expected 78df0a04 was ffffffff']):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n             # Checksum is after start bytes (4B), message type (12B), len (4B)\n             cut_len = 4 + 12 + 4\n@@ -130,7 +130,7 @@ def test_checksum(self):\n     def test_size(self):\n         self.log.info(\"Test message with oversized payload disconnects peer\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['HEADER ERROR - SIZE (badmsg, 4000001 bytes)']):\n+        with self.nodes[0].assert_debug_log(['Header error: Size too large (badmsg, 4000001 bytes)']):\n             msg = msg_unrecognized(str_data=\"d\" * (VALID_DATA_LIMIT + 1))\n             msg = conn.build_message(msg)\n             conn.send_raw_message(msg)\n@@ -140,7 +140,7 @@ def test_size(self):\n     def test_msgtype(self):\n         self.log.info(\"Test message with invalid message type logs an error\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['HEADER ERROR - COMMAND']):\n+        with self.nodes[0].assert_debug_log(['Header error: Invalid message type']):\n             msg = msg_unrecognized(str_data=\"d\")\n             msg = conn.build_message(msg)\n             # Modify msgtype"
      }
    ]
  }
]