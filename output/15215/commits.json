[
  {
    "sha": "73e4d446e03a70e4ffede010e3c062970fca4229",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2U0ZDQ0NmUwM2E3MGU0ZmZlZGUwMTBlM2MwNjI5NzBmY2E0MjI5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-20T14:38:45Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-21T14:15:01Z"
      },
      "message": "rpc: Use the return value of GetProxy(...) in GetNetworksInfo(). Mark GetProxy(...) with [[nodiscard]].",
      "tree": {
        "sha": "1f8d2635e2cf53237a6997b8f9ffe074a262a769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f8d2635e2cf53237a6997b8f9ffe074a262a769"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73e4d446e03a70e4ffede010e3c062970fca4229",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e4d446e03a70e4ffede010e3c062970fca4229",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73e4d446e03a70e4ffede010e3c062970fca4229",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e4d446e03a70e4ffede010e3c062970fca4229/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe60ee96e9155a0e3f81da2a2d21e6e884b8cc8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe60ee96e9155a0e3f81da2a2d21e6e884b8cc8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe60ee96e9155a0e3f81da2a2d21e6e884b8cc8b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d291e88d0b9becbb5528fa8b972b1a4ea3d40f40",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73e4d446e03a70e4ffede010e3c062970fca4229/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73e4d446e03a70e4ffede010e3c062970fca4229/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=73e4d446e03a70e4ffede010e3c062970fca4229",
        "patch": "@@ -9,6 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <attributes.h>\n #include <compat.h>\n #include <netaddress.h>\n #include <serialize.h>\n@@ -40,7 +41,7 @@ class proxyType\n enum Network ParseNetwork(std::string net);\n std::string GetNetworkName(enum Network net);\n bool SetProxy(enum Network net, const proxyType &addrProxy);\n-bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n+NODISCARD bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();"
      },
      {
        "sha": "d586e65c7afef1c3c9036195c5b6e57ee8f99d27",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73e4d446e03a70e4ffede010e3c062970fca4229/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73e4d446e03a70e4ffede010e3c062970fca4229/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=73e4d446e03a70e4ffede010e3c062970fca4229",
        "patch": "@@ -419,14 +419,17 @@ static UniValue GetNetworksInfo()\n         enum Network network = static_cast<enum Network>(n);\n         if(network == NET_UNROUTABLE || network == NET_INTERNAL)\n             continue;\n-        proxyType proxy;\n+\n         UniValue obj(UniValue::VOBJ);\n-        GetProxy(network, proxy);\n         obj.pushKV(\"name\", GetNetworkName(network));\n         obj.pushKV(\"limited\", !IsReachable(network));\n         obj.pushKV(\"reachable\", IsReachable(network));\n-        obj.pushKV(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string());\n-        obj.pushKV(\"proxy_randomize_credentials\", proxy.randomize_credentials);\n+\n+        proxyType proxy;\n+        bool use_proxy = GetProxy(network, proxy);\n+        obj.pushKV(\"proxy\", use_proxy ? proxy.proxy.ToStringIPPort() : std::string());\n+        obj.pushKV(\"proxy_randomize_credentials\", use_proxy ? proxy.randomize_credentials : false);\n+\n         networks.push_back(obj);\n     }\n     return networks;"
      }
    ]
  }
]