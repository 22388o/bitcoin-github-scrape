luke-jr,2017-11-14T20:05:14Z,This is too dangerous. It's not clear at face value to users that the `database/` directory will be created or must be maintained with the wallet file(s).,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-344381289,344381289,
gmaxwell,2017-11-14T20:44:16Z,"FWIW, if you separate a wallet from its database directory you reliably get a wallet that won't open.  To see this for yourself, copy a wallet.dat from a running wallet to another directory and try starting another copy of bitcoin against it there.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-344392268,344392268,
meshcollider,2017-11-14T21:43:52Z,"Agree with @luke-jr, #11466 is safer until we decide on a better wallet directory structure (e.g. https://github.com/bitcoin/bitcoin/pull/11466#issuecomment-335827526), which would involve supporting multiple BDB environments first.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-344409031,344409031,
meshcollider,2017-11-15T09:34:12Z,Note that you might want to cherrypick https://github.com/bitcoin/bitcoin/pull/11466/commits/c36cb54711fe7677db6efc4db00a6e7d42e62f8d to help debug the travis failure,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-344536755,344536755,
laanwj,2017-11-16T16:50:52Z,"> FWIW, if you separate a wallet from its database directory you reliably get a wallet that won't open. \n\nOnly if it has uncompacted log files. To prevent this, bitcoin spends so much time consolidating the wallet database at runtime (in the MaybeCompactWalletDB thread), and does it at least at a clean shutdown.\n\nPeople are moving around wallet.dat already, from and to the data directory, ",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-344985554,344985554,
ryanofsky,2017-11-17T18:53:11Z,"> This is too dangerous. It's not clear at face value to users that the database/ directory will be created or must be maintained with the wallet file(s).\n\nNote that this was posted in response to an earlier version of this pr that did not include the third commit. With the third commit, the default for creating new wallets is as directories rather than a files (with each wallet directory cont",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345331793,345331793,
meshcollider,2017-11-18T00:46:25Z,"> Note that this was posted in response to an earlier version of this pr that did not include the third commit. With the third commit, the default for creating new wallets is as directories rather than a files (with each wallet directory containing its own wallet.dat file, db.log and database/log files). See the comments and release notes in the third commit for details.\n\nIndeed, concept ACK o",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345403475,345403475,
luke-jr,2017-11-18T15:13:05Z,"IMO we should still forbid paths for file-based wallets, and only allow it for directory-based ones.\n\nSuggest renaming `wallet.dat` in the directory to `wallet.bdb` to convey the fact that you can't just copy the file to make a proper backup.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345448447,345448447,
sipa,2017-11-18T20:10:34Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345467887,345467887,
laanwj,2017-11-20T08:35:36Z,"> The PR doesn't do this (and never did). The first commit of the PR is a refactoring specifically to add support for opening multiple BDB environments.\n\nSorry! I didn't read the code but was apparently confused by all the screaming about dangerousness. If you added support for multiple database environments you get my concept ACK.\n\n> Suggest renaming wallet.dat in the directory to wallet.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345625565,345625565,
ryanofsky,2017-11-30T19:11:14Z,"> IMO we should still forbid paths for file-based wallets, and only allow it for directory-based ones.\n\nGood idea, added check for this.\n\n",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-348289802,348289802,
meshcollider,2017-12-18T22:12:26Z,"utACK https://github.com/bitcoin/bitcoin/pull/11687/commits/99934923d4c1dc4c0f96865b2589cc0b5df66b31\n\nThis is still on my to-do list for testing as well",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-352574486,352574486,
sipa,2017-12-20T23:17:50Z,"Code changes look good, and some of the refactors really help with readability.\n\nTwo things I'm unsure about:\n* ~~Making wallets directories. Maybe it results in slightly easier backup procedures (if people interpret it correctly), but it's also more mental load (""my wallet is just wallet.dat right?"").~~\n* Changing the wallet dir based on whether $DATADIR/wallets exists, that seems a bit f",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-353211134,353211134,
meshcollider,2017-12-21T00:08:44Z,@sipa yep that was part of #11466,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-353219381,353219381,
ryanofsky,2017-12-21T13:14:49Z,"> Two things I'm unsure about:\n>\n> - Making wallets directories. Maybe it results in slightly easier backup procedures (if people interpret it correctly), but it's also more mental load (""my wallet is just wallet.dat right?"").\n\nI'm not sure I understand the point about mental load.\n\nFor typical user who isn't using multiwallet or setting any `-wallet=path` option, nothing is changing h",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-353347901,353347901,
ryanofsky,2017-12-21T17:19:02Z,"Added 1 commit fbc2402357dedd1e97cb2adcaef452393e656e8c -> b355cf77508c5b2086062f151d83ff09b1371ca9 ([pr/wfile.14](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.14) -> [pr/wfile.15](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wfile.14...pr/wfile.15)) to fix travis test.\nSquashed b355cf77508c5b2086062f151d83ff09b1371",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-353407177,353407177,
sipa,2017-12-25T14:44:24Z,"@ryanofsky Removed my concern about the wallets-becoming-directories. I guess that anyone who isn't aware that wallets can be directories will in fact not have any such wallets, as requires explicitly configuring a directory.\n\nNeeds rebase.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-353873641,353873641,
promag,2017-12-29T02:55:25Z,@ryanofsky needs rebase.,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-354390765,354390765,
ryanofsky,2017-12-31T21:43:42Z,Rebased 5e8c79c1e8754bca52d7185983ba69dc9a33102f -> 2fd9c2b318b69ce3e7ce1fba5eb7f3fb5c781876 ([pr/wfile.16](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.16) -> [pr/wfile.17](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.17)) to avoid merge conflict in release notes. No changes.,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-354624985,354624985,
ryanofsky,2018-01-04T12:46:10Z,"Status of this PR is unclear, but more review is welcome. So far have:\n\nCode ack MeshCollider Dec 18 https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-352574486\nCode ack from TheBlueMatt Dec 13 https://github.com/bitcoin/bitcoin/pull/11687#pullrequestreview-83313824\nConcept ack from sipa Nov 18 https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345467887 and Dec 25 https:/",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-355273667,355273667,
jnewbery,2018-01-09T00:03:08Z,"Sorry for the late concept feedback, but the config model seems a little confusing to me:\n\n- `datadir` defaults to `~/.bitcoin` (on linux) and can be overridden by an absolute or relative path (relative to cwd)\n- `walletdir` detaults to `<datadir>/wallets` if it exists, or `<datadir>` if it doesn't exist, and can be overridden by an absolute or relative path (relative to cwd)\n- `wallet` de",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-356136301,356136301,
ryanofsky,2018-01-11T13:14:58Z,"Rebased f9e7244449ad69b8b58bff4298bfacd9f16a1cd5 -> 0a2d86f8ef64927c444dadcfc1f700705af784fa ([pr/wfile.19](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.19) -> [pr/wfile.20](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.20)) due to minor `wallet_test_fixture.cpp` conflict with #11403\n",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-356930523,356930523,
ryanofsky,2018-01-11T16:00:33Z,Rebased 0a2d86f8ef64927c444dadcfc1f700705af784fa -> 5c8398dc03167f85ce5c8454fad8420dbcb89edb ([pr/wfile.20](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.20) -> [pr/wfile.21](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.21)) due to minor conflict with #12150,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-356972562,356972562,
jnewbery,2018-01-11T22:11:42Z,"As discussed, I think that the release notes in https://github.com/jnewbery/bitcoin/tree/pr11687.1 are perhaps clearer. I still think that the default `''` name is a little odd, but with those updated release notes, I think it makes sense.\n\nACK 5c8398dc03167f85ce5c8454fad8420dbcb89edb",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357078148,357078148,
jnewbery,2018-01-11T22:12:54Z,This now has three code ACKs and two concept ACKs. It'd be nice to get this into v0.16 if at all possible so we don't have two consecutive releases that change the wallet command line arguments.,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357078453,357078453,
ryanofsky,2018-01-11T22:58:39Z,"> It'd be nice to get this into v0.16 if at all possible so we don't have two consecutive releases that change the wallet command line arguments.\n\nOf course I'd be happier to see this merged sooner, but I also don't think it's a big deal if this is pushed back. Unlike #11466, this doesn't change the location where files are created by default, so it's more backwards compatible than that change",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357089318,357089318,
alphaaurigae,2018-01-12T13:30:31Z,"great, was exactly looking to have a wallet on a seperate luks drive.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357238498,357238498,
ryanofsky,2018-01-12T14:44:09Z,"> great, was exactly looking to have a wallet on a seperate luks drive.\n\nThis will be possible for you either with or without this PR in 0.16, because #11466, which is already merged, lets you specify a `-walletdir=<path>` option with the path to a directory or directory symlink. The directory can hold one or more bitcoin wallets loaded in a shared berkeleydb environment just like `-datadir` c",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357256220,357256220,
alphaaurigae,2018-01-12T16:56:26Z,Got it running already - works perfecty and my IO problems solved - so nice :),https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357293937,357293937,
ryanofsky,2018-01-12T23:02:50Z,Rebased 5c8398dc03167f85ce5c8454fad8420dbcb89edb -> 0797df3d2c06b132a911bed2e465834452f78d04 ([pr/wfile.21](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.21) -> [pr/wfile.22](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.22)) due to conflicts with #11970 in `multiwallet.py` test. No other changes.,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357378383,357378383,
jnewbery,2018-01-15T15:15:45Z,Tested ACK 0797df3d2c06b132a911bed2e465834452f78d04,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357710491,357710491,
Sjors,2018-01-15T16:44:48Z,"It's quite useful to be able to keep the blockchain and wallet(s) in different locations. Using wallet directories also saves me trouble of remembering to type `.dat`.\n\nTested 0797df3d. Code changes look sane, but are a little over my head.\n\nOne surprising bit of behavior though is the difference between:\n\n```sh\nsrc/qt/bitcoin-qt -regtest -wallet=~/wallet\nsrc/qt/bitcoin-qt -regtest",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357735294,357735294,
ryanofsky,2018-01-15T18:10:58Z,"> The first command on OSX creates a /home/Username/wallet directory. The second creates a directory ~ inside the default regtest wallet directory.\n\nInteresting, what appears to be happening in that example is that your shell is expanding the tilde in the first command, but not expanding the tilde in your second command. (The PR doesn't implement any tilde expansion itself.) Testing locally wi",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-357754659,357754659,
ryanofsky,2018-01-17T18:39:27Z,"Rebased 0797df3d2c06b132a911bed2e465834452f78d04 -> 8a79f09a3dbcf48cfd8288ccf1d6bc3238aa1420 ([pr/wfile.22](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.22) -> [pr/wfile.23](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.23)) after #11904 merge. Resolved minor conflicts in CDBEnv::Open, no other changes.\n",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358400910,358400910,
Sjors,2018-01-18T08:29:16Z,"Can you update the PR description reference  from `-datadir` to `-walletdir`?\n\n>  the implementation could be restricted to only allow either absolute paths or paths directly in `<walletdir>`\n\nInclined to agree. See also discussion in https://github.com/bitcoin/bitcoin/pull/12166#discussion_r161561520 about relative paths.\n\nAs you said, disallowing special characters doesn't seem like ",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358573536,358573536,
ryanofsky,2018-01-18T16:02:42Z,"Rebased 8a79f09a3dbcf48cfd8288ccf1d6bc3238aa1420 -> 2f87a02746b6afee5a21e647c5b3159172736bbb ([pr/wfile.23](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.23) -> [pr/wfile.24](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.24)) due to conflict in release notes with #12210.\n\n> Can you update the PR description reference from -datadir to -walletdir?\n\nGood catch! Done.\n\n>> t",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358692668,358692668,
Sjors,2018-01-18T16:26:42Z,">  It's not really clear to me what harm this would be trying to prevent.\n\nAccidentally creating new empty wallets.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358700456,358700456,
ryanofsky,2018-01-18T16:29:35Z,"> Accidentally creating new empty wallets.\n\nHow exactly? If you specify the name of an existing file, it will just open the file. Also, again I'd be curious to know what would be a good warning.",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358701397,358701397,
Sjors,2018-01-18T16:57:19Z,"People will accidentally use `.dat` for wallets that are directories and forget `.dat` for wallets that are files. They'll probably also create directories with `.dat` extension (which isn't an error, but it's not pretty).\n\nFor this specific issue I would look for `[path].dat` if `path` doesn't  end with `.dat` and look for `[path - .dat]` if it does. A warning could be ""Created a new wallet [",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358710373,358710373,
ryanofsky,2018-01-18T17:11:49Z,"Maybe we can discuss this in IRC, but a new wallet being created if you are trying to open a .dat file and forget the extension is something that happens today, and would always happen previously, unrelated to this PR. I think the changes you are talking about could be good idea but definitely belong in their own separate PR. It also seems to me this PR makes these problems less likely to occur go",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358715206,358715206,
Sjors,2018-01-19T08:47:12Z,"> It also seems to me this PR makes these problems less likely to occur going forward, because it allows wallets to be referenced as directories\n\nFor new users I would expect this to be the case. But I would expect existing users, who are used to adding "".dat"" to a `-wallet` argument, to make mistakes, if they don't read the release notes.\n\nI'm fine with leaving the PR as is. The release n",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-358902597,358902597,
jnewbery,2018-01-22T21:17:57Z,retested ACK ec4e3820a8a2351ba26c88dcc02d99e29bfe5524. Changes are just the minimum required for rebases.,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-359567870,359567870,
ryanofsky,2018-02-12T20:47:36Z,"Rebased 2f87a02746b6afee5a21e647c5b3159172736bbb -> ec4e3820a8a2351ba26c88dcc02d99e29bfe5524 ([pr/wfile.24](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.24) -> [pr/wfile.25](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.25)) due to release notes conflict with #12166.\nRebased ec4e3820a8a2351ba26c88dcc02d99e29bfe5524 -> aff4b44f0da4c583b76d8e3db926caf3fa03d3c9 ([pr/wfile.25](https",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-365056651,365056651,
ryanofsky,2018-02-14T20:13:22Z,"Rebased 1fe5528f4dea8b530022b9bf359426f2079848af -> 230f696ac105f41757c7e7625053941d483df0be ([pr/wfile.27](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.27) -> [pr/wfile.28](https://github.com/ryanofsky/bitcoin/commits/pr/wfile.28)) due to conflict with #12225.\nAdded 1 commits 230f696ac105f41757c7e7625053941d483df0be -> c8c87343fcc7d86e9bec100a609a521c6c1e2d34 ([pr/wfile.28](https://git",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-365730954,365730954,
promag,2018-02-14T21:15:39Z,"I mean, either the path is absolute or it's a name (which will be relative to `walletdir`). So anything relative (e.g. `.`, `..`, `../foo`, `foo/..`, ...) should fail. Unless there is a use case for relative paths?",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-365747443,365747443,
ryanofsky,2018-03-06T17:33:31Z,"> I mean, either the path is absolute or it's a name (which will be relative to walletdir). So anything relative (e.g. ., .., ../foo, foo/.., ...) should fail. Unless there is a use case for relative paths?\n\nThe use cases for relative paths are pretty straightforward. Maybe you want to put your watch only wallets in a different directory than your wallets with private keys. Maybe you want to h",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-370862718,370862718,
laanwj,2018-03-07T16:11:47Z,utACK be8ab7d082228d09ca529d1a08730d7d5aacb0ed,https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-371190322,371190322,
NickyYangYang,2018-07-16T09:47:39Z,"hello,\n      The wallet.dat size is so large.  I know there is so much keypairs in  the file. But , what is the structure of the file?  Is the same structure with the class CCryptoKeyStore?",https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-405197053,405197053,
promag,2017-11-17T16:44:56Z,Full path? How will the url look like?,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151733182,151733182,src/bitcoin-cli.cpp
ryanofsky,2017-11-17T16:53:10Z,"> Full path? How will the url look like?\n\nIt doesn't have to be the full path, but it can be. Paths are urlencoded, and symlinks are also allowed. See the unit test which tests every imaginable type of path.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151735244,151735244,src/bitcoin-cli.cpp
promag,2017-11-17T17:19:36Z,Feels weird to known server side details. Not to mention it can break the client if you move the wallet to a new place.,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151741224,151741224,src/bitcoin-cli.cpp
ryanofsky,2017-11-17T17:27:49Z,"> Feels weird to known server side details. Not to mention it can break the client if you move the wallet to a new place.\n\nThe PR is not changing anything about this. Whatever string the server uses to identify the wallet, the client just has to use the same string. We've discussed adding and storing wallet identifiers in the past, but opted to just use filenames for simplicity. Server operato",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151742971,151742971,src/bitcoin-cli.cpp
ryanofsky,2017-11-17T17:32:37Z,"See discussion in #10650 ""The walletID is currently defined by the filename (-wallet=<filename>), ideally, we later add a wallet RPC call to set the walletID (should be written to the wallet database)."" It would still be possible to do this if you are interested, but it's tangential to this PR.\n\nThere is more discussion starting at ""The walletID should in future not be a representation of the ",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151743953,151743953,src/bitcoin-cli.cpp
promag,2017-11-17T17:45:43Z,"My point is that IMO we should not allow absolute path in rpcwallet, which you introduce here.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151746657,151746657,src/bitcoin-cli.cpp
ryanofsky,2017-11-17T17:53:02Z,"What is the problem exactly? If the server operator wants to use a plain path, or a relative path, he can use one. If he wants to use a symlink alias, he can use that. What is the problem with allowing him to use a full path as well?\n\nNote that RPC identifier for wallet is entirely up to the server and not up the client. The client has to use whatever string the server uses to identify the wal",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151748247,151748247,src/bitcoin-cli.cpp
promag,2017-11-17T18:22:45Z,I'm not arguing against full paths server side. I'm kind of against exposing absolute paths to RPC clients. `listwallets` will expose the full path right?,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151755076,151755076,src/bitcoin-cli.cpp
sipa,2017-11-17T18:28:22Z,"It exposes the name the server uses for the wallet.\n\nIn the current implementation that name indeed corresponds to the configured path, but there is no reason why that must remain the case.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151756281,151756281,src/bitcoin-cli.cpp
promag,2017-11-17T18:33:52Z,Well if the goal is to have some sort of id and have that exposed instead then +1.,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151757547,151757547,src/bitcoin-cli.cpp
ryanofsky,2017-11-17T18:35:02Z,"> listwallets will expose the full path right?\n\nNo, or at least not by default. Listwallets just shows the wallet name. If the server is configured to use full paths for wallet name these will be full paths, but the server has to be specifically configured this way in order for this to happen.\n\nI'm still little puzzled about what you think the underlying problem is with allowing server adm",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151757822,151757822,src/bitcoin-cli.cpp
promag,2017-11-17T18:50:15Z,"Suppose you have configured the server with an absolute wallet path. Then you have a couple of clients (in different hosts). You had to configure each client with the absolute path of the wallet. These clients can be others than bitcoin-cli. Now the server operator decides it has to move the wallet to a new location. The clients can handle a server restart, but now the wallet doesn't exists. And t",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151761456,151761456,src/bitcoin-cli.cpp
promag,2017-11-17T18:52:17Z,My point is to not even allow such cases. An wallet id (filename or even relative path) is enough ,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151761934,151761934,src/bitcoin-cli.cpp
ryanofsky,2017-11-17T19:17:06Z,"> Suppose you have configured the server with an absolute wallet path. Then you have a couple of clients (in different hosts). You had to configure each client with the absolute path of the wallet. These clients can be others than bitcoin-cli. Now the server operator decides it has to move the wallet to a new location. \n\nI don't see how this is much different than the server renaming the walle",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151767636,151767636,src/bitcoin-cli.cpp
promag,2017-11-17T19:45:36Z,"> accidentally exposed a non-stable wallet\n\nMy point is to prevent this. IMO symlinks are a weak solution to remedy that case. Renaming is indeed a breaking change from the client point of view.\n\nI'm not a server admin expert (not a bit either) but, correct me if I'm wrong, usually absolute paths aren't exposed outside.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r151773896,151773896,src/bitcoin-cli.cpp
TheBlueMatt,2017-12-05T22:20:55Z,"Ugh, can we return the CDBEnv* instead of return-by-setting-ref-to-ptr?",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155093506,155093506,src/wallet/db.h
TheBlueMatt,2017-12-06T18:22:39Z,Why create the env before checking for mock? Why not add a fMock parameter to GetWalletEnv or so instead?,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155319012,155319012,src/wallet/db.h
TheBlueMatt,2017-12-06T20:20:47Z,"Why make the lock global instead of per-env? It seems like there should be nothing preventing you from keeping that and adding a second lock that only exists to protect g_dbenvs, though likely not a big deal in terms of concurrency.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155349827,155349827,src/wallet/db.h
TheBlueMatt,2017-12-06T20:24:08Z,"While you're at it, can you just merge EnvShutdown and Close? EnvShutdown is now only called from Close().",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155350688,155350688,src/wallet/db.cpp
TheBlueMatt,2017-12-06T20:33:07Z,"Is this required? Somehow I had assumed they only conficted if they were both in the same env, but I dunno where I got that from.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155352781,155352781,src/wallet/db.cpp
TheBlueMatt,2017-12-06T20:38:45Z,"Heh, I have to admit I really prefer the old version from the new one. Creating a DB and then giving it to the wallet makes more sense conceptually to me than telling the wallet where to find the DB and then having the CWallet constructor create the DB (especially as the slow-moving goal is to abstract the DB out of the wallet and make it an interface).",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155354119,155354119,src/wallet/wallet.cpp
ryanofsky,2017-12-06T20:58:02Z,Done in 75ed8c595c53a2c3aeedfbc01810f291ee92ad51,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155358844,155358844,src/wallet/db.cpp
ryanofsky,2017-12-06T20:58:50Z,Added comment in 75ed8c595c53a2c3aeedfbc01810f291ee92ad51. It's done to prevent opening two paths that refer to the same file at the same time.,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155359037,155359037,src/wallet/db.cpp
ryanofsky,2017-12-06T21:04:55Z,One lock seems a simpler than multiple multiple locks unless there is a performance rationale for more fine grained locking. One thing which I would not look forward to is dealing with even more lock-order bugs in the wallet than the ones that already frequently arise.,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155360386,155360386,src/wallet/db.h
ryanofsky,2017-12-06T21:07:28Z,Ugh. Good idea! Done in 75ed8c595c53a2c3aeedfbc01810f291ee92ad51,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155360999,155360999,src/wallet/db.h
ryanofsky,2017-12-06T21:20:28Z,"I can't see how that would be an improvement. The `env` object needs to exist whether it is memory or file-backed. And `GetWalletEnv` is just intended to create and retrieve CDBEnv objects, not do that and then invoke unrelated CDBEnv methods that only one of its callers needs depending on a bool parameter...",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155364320,155364320,src/wallet/db.h
ryanofsky,2017-12-06T21:49:20Z,"Interesting, I guess you are imagining `CWalletDBWrapper` changing into some abstract interface that the wallet can call to load and store data. If that's the goal I can make the `CWallet(name, dbw)` constructor public instead of private and get rid of the other constructors. For callers, this means the current:\n\n```c++\nMakeUnique<CWallet>(name, path)\nMakeUnique<CWallet>(CWallet::Mock())\",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r155371642,155371642,src/wallet/wallet.cpp
TheBlueMatt,2017-12-12T16:29:24Z,"Yea, I really like that, tbh. If nothing else is much more clearly separates wallet.cpp from walletdb, etc, keeping wallet.cpp/CWallet only filled with wallet logic, and not database-backend stuff.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156420111,156420111,src/wallet/wallet.cpp
ryanofsky,2017-12-12T16:36:59Z,"> If nothing else is much more clearly separates wallet.cpp from walletdb, etc, keeping wallet.cpp/CWallet only filled with wallet logic\n\nIt really affects callers of wallet, not wallet itself. CWallet is barely affected and wallet.cpp doesn't change at all. Anyway, let me know if you would prefer to see this here or in another PR.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156422613,156422613,src/wallet/wallet.cpp
TheBlueMatt,2017-12-12T16:39:50Z,It just seems very weird given mock seems like it shouldn't have a/care what the wallet_path is. In the future I kinda feel like it should become more RAII (ie Open in the GetWalletEnv call) but not in this PR.,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156423481,156423481,src/wallet/db.h
TheBlueMatt,2017-12-12T16:43:56Z,"It just seems weird given it'd be even less code change to not split the lock out, and as long as the global lock is *only* held in the creation of new envs, no lockorder should be worried about (cause lockorder is always trivially correct if locks are held only for the duration of a function which uses them, without making callbacks).",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156424854,156424854,src/wallet/db.h
ryanofsky,2017-12-12T16:54:27Z,"> It just seems very weird given mock seems like it shouldn't have a/care what the wallet_path is. In the future I kinda feel like it should become more RAII (ie Open in the GetWalletEnv call) but not in this PR.\n\nRAII is not the model this uses because when there more than one wallet file open in the same directory they share the same environment. You could only resolve this by requiring all ",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156428292,156428292,src/wallet/db.h
TheBlueMatt,2017-12-12T21:30:27Z,"I mean given you're changing it here, I see no reason to change it to go in the opposite direction of where I think it should go - even if CWalletDBWrapper right now is just a BDB implementation, it still *has* a clean-ish interface, and having the CWallet cosntructor create one from a path instead of take one just seems like the wrong direction. Better to just leave this part of the diff out of t",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156500862,156500862,src/wallet/wallet.cpp
TheBlueMatt,2017-12-12T21:33:11Z,"Yes, but instead of env = GetWalletEnv(wallet_path, strFile); env->Open(); or env->Close(); env->MakeMock();, GetWalletEnv could return a reference which is already open or otherwise has some level of understanding of closing when all refs to that env are lost. Even if not that, would prefer to not use the fake """" path as you suggest.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156501584,156501584,src/wallet/db.h
TheBlueMatt,2017-12-12T21:34:48Z,"Did you forget to push? Noting this is the only way we handle hardlinks is useful, indeed.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156501935,156501935,src/wallet/db.cpp
ryanofsky,2017-12-12T22:06:46Z,"> Did you forget to push?\n\nOops, yeah. It was on the pr/wfile.9 tag I linked to below. Should be updated now. Also I'll work on the ""just leave this part of the diff"" change you requested above.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156509771,156509771,src/wallet/db.cpp
ryanofsky,2017-12-12T23:00:01Z,Done in 39fa1e9c01417bc9275d8f81bfef67bfc5ca308e,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156521046,156521046,src/wallet/wallet.cpp
TheBlueMatt,2017-12-13T20:52:59Z,Make the constructors private now?,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r156779308,156779308,src/wallet/db.h
ryanofsky,2017-12-15T19:47:41Z,"> Make the constructors private now?\n\nI didn't do this just because it prevents being able to call MakeUnique so makes code below more verbose. But I think I'll wind up making this tweak if @promag or someone else asks for other style changes on the PR.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r157285274,157285274,src/wallet/db.h
PierreRochard,2017-12-16T23:53:36Z,"Lines 32:33 in db.h states\n`    // Don't change into fs::path, as that can result in\n    // shutdown problems/crashes caused by a static initialized internal pointer.`\nWhen originally written, this comment referred to boost::filesystem. I'm not sure if this comment is still relevant but I did want to bring attention to it.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r157354490,157354490,src/wallet/db.cpp
PierreRochard,2017-12-17T00:11:39Z,style: tuple unpacking in the return statement reduces readability ,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r157354732,157354732,src/wallet/db.cpp
ryanofsky,2017-12-18T16:04:02Z,"> style: tuple unpacking in the return statement reduces readability\n\nUnclear what preferred alternative is, but also this is replaced in aca8ec0dabb4987a4f73a19e2a7dc09177197adb from #11911 so it might not be relevant for long.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r157525503,157525503,src/wallet/db.cpp
ryanofsky,2017-12-18T16:08:33Z,"> When originally written, this comment referred to boost::filesystem.\n\nThe comment is actually still referring to boost::filesystem, `fs` is just an alias: https://github.com/bitcoin/bitcoin/blob/62fdf9b07087b80d2142799bdd2324f61483359d/src/fs.h#L16\n\nBut it's fine to create a path object here. The comment is just explaining why the path objects aren't stored permanently (they stop being u",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r157526849,157526849,src/wallet/db.cpp
jnewbery,2017-12-20T17:28:45Z,I think this comment is now outdated. `CWalletDBWrapper` was previously initialized with the `CDBEnv` and `strFile`. This is no longer the case. Suggest you just remove this line.,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158086757,158086757,src/wallet/db.h
jnewbery,2017-12-20T19:19:35Z,"~sorry for nitting, but this should be `filename` (like the function above, in lowercase (or snake case if you want to make it two words))~\n\n~Same for a few other variable names in this file.~\n\nScrap that - I see that you're maintaining the same variable naming to minimize code churn.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158112376,158112376,src/wallet/db.cpp
jnewbery,2017-12-20T20:25:56Z,"This means that `m_name` is `""""` if no `-wallet` name is specified on the command line or in the .conf file, which makes the `getwalletinfo` and `listwallets` output confusing:\n\n```\nbitcoin-cli getwalletinfo\n{\n  ""walletname"": """",\n  ""walletversion"": 159900,\n  ""balance"": 0.00000000,\n  ""unconfirmed_balance"": 0.00000000,\n  ""immature_balance"": 0.00000000,\n  ""txcount"": 0,\n  ""keypoo",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158127240,158127240,src/wallet/init.cpp
jnewbery,2017-12-20T20:57:06Z,"I don't think there's any way to access the 'default' wallet with name `''` through the CLI.\n\n```\n(Pdb) self.nodes[0].cli(""--rpcwallet="").getwalletinfo()\n*** subprocess.CalledProcessError: Command 'bitcoin-cli' returned non-zero exit status 18\n```",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133701,158133701,test/functional/multiwallet.py
jnewbery,2017-12-20T20:58:09Z,"Can you also add CLI testing to this test, to verify that the `-rpcwallet` argument still works? Something like:\n\n```\nself.nodes[0].cli(""--rpcwallet={}"".format(wallet_name)).getwalletinfo()\n```",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133900,158133900,test/functional/multiwallet.py
ryanofsky,2017-12-20T22:01:40Z,"https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158086757\n\nThe comment is still correct. CWalletDBWrapper class members haven't changed at all and the object still just holds an env pointer and a filename. There are comments below on how the class is initialized but these are on the constructors rather than the class itself. I think this class comment is helpful, so I'd prefer to kee",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158147817,158147817,src/wallet/db.h
ryanofsky,2017-12-20T22:16:53Z,"https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158127240\n\n> Is it possible to change this so m_name is filled to wallet.dat when no wallet parameter is passed?\n\nAdded a note about getwalletinfo/listwallets to release notes in 8e7981fe35f359fdbddd92f468443a61c844f392.\n\nThe current behavior is if you don't specify a `-wallet` option, then a default wallet is created for you th",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158150913,158150913,src/wallet/init.cpp
ryanofsky,2017-12-20T22:23:36Z,"https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133701\n\n> I don't think there's any way to access the 'default' wallet with name '' through the CLI.\n\nThis is good catch, and fixed in d273391b30e35a5bfcb53403936662c690ec205f. It was possible to work around this by starting bitcoin with `-wallet=wallet.dat`, which is what you need to before this PR anyway, but better to fix this",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158152132,158152132,test/functional/multiwallet.py
ryanofsky,2017-12-20T22:23:59Z,"https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158133900\n\n> Can you also add CLI testing to this test\n\nAdded simple test in d273391b30e35a5bfcb53403936662c690ec205f, more comprehensive tests in #11970.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158152198,158152198,test/functional/multiwallet.py
promag,2017-12-21T15:27:53Z,Why this change? To reduce `walletName` scope?,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158304599,158304599,src/bitcoin-cli.cpp
promag,2017-12-21T15:43:07Z,isdir?,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158308524,158308524,test/functional/conf_args.py
ryanofsky,2017-12-21T15:56:24Z,"> Why this change? To reduce walletName scope?\n\nYes and to avoid declaring a variable that will never be used.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158312157,158312157,src/bitcoin-cli.cpp
ryanofsky,2017-12-21T15:56:53Z,"Seems worse, makes test more fragile than it needs to be.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158312299,158312299,test/functional/conf_args.py
promag,2017-12-29T02:50:41Z,"Yeah, agree, not relevant here.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r159020587,159020587,test/functional/conf_args.py
jnewbery,2018-01-09T18:59:55Z,"https://github.com/bitcoin/bitcoin/pull/11687#discussion_r158147817\n\nYes, agree.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r160495875,160495875,src/wallet/db.h
jnewbery,2018-01-09T19:51:17Z,"Note that `std::map::emplace` can construct the object even if the key exists in the map, according to http://en.cppreference.com/w/cpp/container/map/emplace (""The element may be constructed even if there already is an element with the key in the container, in which case the newly constructed element will be destroyed immediately."")\n\nIn this case I think it's fine - the constructor simply call",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r160508446,160508446,src/wallet/db.cpp
jnewbery,2018-01-09T20:40:07Z,"I believe this help text is incorrect. Should be `""Path is interpreted relative to the <walletdir> directory if it is not absolute""`",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r160518649,160518649,src/wallet/init.cpp
jnewbery,2018-01-09T20:53:05Z,"nit: can combine with line above for `self.restart_node(0, extra_args)`",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r160521579,160521579,test/functional/multiwallet.py
ryanofsky,2018-01-10T15:07:24Z,"> Note that std::map::emplace can construct the object even if the key exists in the map\n\nAdded comment in 69de7c1d8d8326d159634e8949bc3ac67266f534.\n\nI was surprised by this but it actually does seem to happen in practice. Following test program shows two objects being constructed:\n\n```c++\n#include <map>\n#include <iostream>\n\nusing namespace std;\n\nstruct C {\n  C(int) {cout",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r160703266,160703266,src/wallet/db.cpp
ryanofsky,2018-01-10T15:08:22Z,"> nit: can combine with line above for self.restart_node(0, extra_args)\n\nCombined in 69de7c1d8d8326d159634e8949bc3ac67266f534.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r160703537,160703537,test/functional/multiwallet.py
ryanofsky,2018-01-10T15:08:51Z,"> I believe this help text is incorrect.\n\nGood catch! Fixed in 69de7c1d8d8326d159634e8949bc3ac67266f534. This was written before the `-walletdir` option was added.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r160703654,160703654,src/wallet/init.cpp
promag,2018-02-06T09:28:35Z,"Nit, sort :trollface: ",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r166231248,166231248,src/wallet/wallet.h
ryanofsky,2018-02-14T20:20:57Z,"> Nit, sort :trollface:\n\nThanks, done in https://github.com/bitcoin/bitcoin/commit/c8c87343fcc7d86e9bec100a609a521c6c1e2d34",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r168298741,168298741,src/wallet/wallet.h
jimpo,2018-03-07T14:33:07Z,These initializers could be replaced with `: CWalletDBWrapper()` I believe.,https://github.com/bitcoin/bitcoin/pull/11687#discussion_r172859673,172859673,src/wallet/db.h
jimpo,2018-03-07T15:45:50Z,"It looks like this would leak in the case of any of the early error exists. Perhaps it's better to make a unique_ptr, then `release()` on the last line of the method to prevent this?",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r172885685,172885685,src/wallet/wallet.cpp
MarcoFalke,2018-03-08T15:12:59Z,"Very technical error message. Should not be translated, imo.",https://github.com/bitcoin/bitcoin/pull/11687#discussion_r173186961,173186961,src/wallet/init.cpp
