[
  {
    "sha": "d8a99f65e53019becdd8d2631396012bafb29741",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGE5OWY2NWU1MzAxOWJlY2RkOGQyNjMxMzk2MDEyYmFmYjI5NzQx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-14T02:25:46Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-03T15:26:55Z"
      },
      "message": "Allow wallet files in multiple directories\n\nRemove requirement that two wallet files can only be opened at the same time if\nthey are contained in the same directory.\n\nThis change mostly consists of updates to function signatures (updating\nfunctions to take fs::path arguments, instead of combinations of strings,\nfs::path, and CDBEnv / CWalletDBWrapper arguments).",
      "tree": {
        "sha": "7e873886811beddc9bca0c21d21d3c6fc0d7ede3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e873886811beddc9bca0c21d21d3c6fc0d7ede3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8a99f65e53019becdd8d2631396012bafb29741",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a99f65e53019becdd8d2631396012bafb29741",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a99f65e53019becdd8d2631396012bafb29741",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a99f65e53019becdd8d2631396012bafb29741/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1"
      }
    ],
    "stats": {
      "total": 352,
      "additions": 201,
      "deletions": 151
    },
    "files": [
      {
        "sha": "98965840c7b95651e1066ba102810cf6d3ed8ca7",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -32,7 +32,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    const CWallet wallet;\n+    const CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n     std::vector<COutput> vCoins;\n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "af4e36c04f66debac9164d62d4ab0fdbd6427021",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -157,9 +157,7 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    bitdb.MakeMock();\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    CWallet wallet(std::move(dbw));\n+    CWallet wallet(\"mock\", CWalletDBWrapper::CreateMock());\n     bool firstRun;\n     wallet.LoadWallet(firstRun);\n     {\n@@ -260,9 +258,6 @@ void TestGUI()\n     QPushButton* removeRequestButton = receiveCoinsDialog.findChild<QPushButton*>(\"removeRequestButton\");\n     removeRequestButton->click();\n     QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n-\n-    bitdb.Flush(true);\n-    bitdb.Reset();\n }\n \n }"
      },
      {
        "sha": "88463d10b2865d1ced82f57f396bd4593df7e33f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 30,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -52,20 +52,44 @@ void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n         }\n     }\n }\n+\n+CCriticalSection cs_db;\n+std::map<std::string, CDBEnv> g_dbenvs; //!< Map from directory name to open db environment.\n } // namespace\n \n+CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+{\n+    fs::path env_directory = wallet_path.parent_path();\n+    database_filename = wallet_path.filename().string();\n+    LOCK(cs_db);\n+    // Note: An ununsed temporary CDBEnv object may be created inside the\n+    // emplace function if the key already exists. This is a little inefficient,\n+    // but not a big concern since the map will be changed in the future to hold\n+    // pointers instead of objects, anyway.\n+    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.string()), std::forward_as_tuple(env_directory)).first->second;\n+}\n+\n //\n // CDB\n //\n \n-CDBEnv bitdb;\n-\n-void CDBEnv::EnvShutdown()\n+void CDBEnv::Close()\n {\n     if (!fDbEnvInit)\n         return;\n \n     fDbEnvInit = false;\n+\n+    for (auto& db : mapDb) {\n+        auto count = mapFileUseCount.find(db.first);\n+        assert(count == mapFileUseCount.end() || count->second == 0);\n+        if (db.second) {\n+            db.second->close(0);\n+            delete db.second;\n+            db.second = nullptr;\n+        }\n+    }\n+\n     int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n@@ -80,29 +104,24 @@ void CDBEnv::Reset()\n     fMockDb = false;\n }\n \n-CDBEnv::CDBEnv()\n+CDBEnv::CDBEnv(const fs::path& dir_path) : strPath(dir_path.string())\n {\n     Reset();\n }\n \n CDBEnv::~CDBEnv()\n {\n-    EnvShutdown();\n+    Close();\n }\n \n-void CDBEnv::Close()\n-{\n-    EnvShutdown();\n-}\n-\n-bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n+bool CDBEnv::Open(bool retry)\n {\n     if (fDbEnvInit)\n         return true;\n \n     boost::this_thread::interruption_point();\n \n-    strPath = pathIn.string();\n+    fs::path pathIn = strPath;\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;\n@@ -150,7 +169,7 @@ bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n                 // failure is ok (well, not really, but it's not worse than what we started with)\n             }\n             // try opening it again one more time\n-            if (!Open(pathIn, false)) {\n+            if (!Open(false /* retry */)) {\n                 // if it still fails, it probably means we can't even create the database env\n                 return false;\n             }\n@@ -209,12 +228,15 @@ CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, recoverFunc_type\n         return RECOVER_FAIL;\n \n     // Try to recover:\n-    bool fRecovered = (*recoverFunc)(strFile, out_backup_filename);\n+    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n-bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool CDB::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n+    std::string filename;\n+    CDBEnv* env = GetWalletEnv(file_path, filename);\n+\n     // Recovery procedure:\n     // move wallet file to walletfilename.timestamp.bak\n     // Call Salvage with fAggressive=true to\n@@ -225,7 +247,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     int64_t now = GetTime();\n     newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n-    int result = bitdb.dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n+    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n                                        newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n@@ -236,15 +258,15 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     }\n \n     std::vector<CDBEnv::KeyValPair> salvagedData;\n-    bool fSuccess = bitdb.Salvage(newFilename, true, salvagedData);\n+    bool fSuccess = env->Salvage(newFilename, true, salvagedData);\n     if (salvagedData.empty())\n     {\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n         return false;\n     }\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(bitdb.dbenv.get(), 0);\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -257,7 +279,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n         return false;\n     }\n \n-    DbTxn* ptxn = bitdb.TxnBegin();\n+    DbTxn* ptxn = env->TxnBegin();\n     for (CDBEnv::KeyValPair& row : salvagedData)\n     {\n         if (recoverKVcallback)\n@@ -279,8 +301,12 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)\n {\n+    std::string walletFile;\n+    CDBEnv* env = GetWalletEnv(file_path, walletFile);\n+    fs::path walletDir = env->Directory();\n+\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n@@ -291,20 +317,24 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walle\n         return false;\n     }\n \n-    if (!bitdb.Open(walletDir, true)) {\n+    if (!env->Open(true /* retry */)) {\n         errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n         return false;\n     }\n \n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n+bool CDB::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n {\n+    std::string walletFile;\n+    CDBEnv* env = GetWalletEnv(file_path, walletFile);\n+    fs::path walletDir = env->Directory();\n+\n     if (fs::exists(walletDir / walletFile))\n     {\n         std::string backup_filename;\n-        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc, backup_filename);\n+        CDBEnv::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n         if (r == CDBEnv::RECOVER_OK)\n         {\n             warningStr = strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n@@ -414,8 +444,8 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         nFlags |= DB_CREATE;\n \n     {\n-        LOCK(env->cs_db);\n-        if (!env->Open(GetWalletDir()))\n+        LOCK(cs_db);\n+        if (!env->Open(false /* retry */))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n         pdb = env->mapDb[strFilename];\n@@ -442,7 +472,25 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n-            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n+\n+            // Call CheckUniqueFileid on the containing BDB environment to\n+            // avoid BDB data consistency bugs that happen when different data\n+            // files in the same environment have the same fileid.\n+            //\n+            // Also call CheckUniqueFileid on all the other g_dbenvs to prevent\n+            // bitcoin from opening the same data file through another\n+            // environment when the file is referenced through equivalent but\n+            // not obviously identical symlinked or hard linked or bind mounted\n+            // paths. In the future a more relaxed check for equal inode and\n+            // device ids could be done instead, which would allow opening\n+            // different backup copies of a wallet at the same time. Maybe even\n+            // more ideally, an exclusive lock for accessing the database could\n+            // be implemented, so no equality checks are needed at all. (Newer\n+            // versions of BDB have an set_lk_exclusive method for this\n+            // purpose, but the older version we use does not.)\n+            for (auto& env : g_dbenvs) {\n+                CheckUniqueFileid(env.second, strFilename, *pdb_temp);\n+            }\n \n             pdb = pdb_temp.release();\n             env->mapDb[strFilename] = pdb;\n@@ -490,7 +538,7 @@ void CDB::Close()\n         Flush();\n \n     {\n-        LOCK(env->cs_db);\n+        LOCK(cs_db);\n         --env->mapFileUseCount[strFile];\n     }\n }\n@@ -518,7 +566,7 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n     const std::string& strFile = dbw.strFile;\n     while (true) {\n         {\n-            LOCK(env->cs_db);\n+            LOCK(cs_db);\n             if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0) {\n                 // Flush log data to the dat file\n                 env->CloseDb(strFile);\n@@ -646,7 +694,7 @@ bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n     bool ret = false;\n     CDBEnv *env = dbw.env;\n     const std::string& strFile = dbw.strFile;\n-    TRY_LOCK(bitdb.cs_db,lockDb);\n+    TRY_LOCK(cs_db, lockDb);\n     if (lockDb)\n     {\n         // Don't do this if any databases are in use\n@@ -694,7 +742,7 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n     while (true)\n     {\n         {\n-            LOCK(env->cs_db);\n+            LOCK(cs_db);\n             if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0)\n             {\n                 // Flush log data to the dat file"
      },
      {
        "sha": "b1ce451534565566c4129f423fe46b0b03ee595c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 38,
        "deletions": 17,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -11,6 +11,7 @@\n #include <serialize.h>\n #include <streams.h>\n #include <sync.h>\n+#include <util.h>\n #include <version.h>\n \n #include <atomic>\n@@ -32,20 +33,19 @@ class CDBEnv\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n-    void EnvShutdown();\n-\n public:\n-    mutable CCriticalSection cs_db;\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n-    CDBEnv();\n+    CDBEnv(const fs::path& env_directory);\n     ~CDBEnv();\n     void Reset();\n \n     void MakeMock();\n     bool IsMock() const { return fMockDb; }\n+    bool IsInitialized() const { return fDbEnvInit; }\n+    fs::path Directory() const { return strPath; }\n \n     /**\n      * Verify that database file strFile is OK. If it is not,\n@@ -56,7 +56,7 @@ class CDBEnv\n     enum VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n-    typedef bool (*recoverFunc_type)(const std::string& strFile, std::string& out_backup_filename);\n+    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);\n     VerifyResult Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename);\n     /**\n      * Salvage data from a file that Verify says is bad.\n@@ -68,7 +68,7 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const fs::path& path, bool retry = 0);\n+    bool Open(bool retry);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n@@ -85,7 +85,8 @@ class CDBEnv\n     }\n };\n \n-extern CDBEnv bitdb;\n+/** Get CDBEnv and database filename given a wallet path. */\n+CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n \n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n@@ -100,9 +101,33 @@ class CWalletDBWrapper\n     }\n \n     /** Create DB handle to real database */\n-    CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in) :\n-        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(env_in), strFile(strFile_in)\n+    CWalletDBWrapper(const fs::path& wallet_path, bool mock = false) :\n+        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0)\n     {\n+        env = GetWalletEnv(wallet_path, strFile);\n+        if (mock) {\n+            env->Close();\n+            env->Reset();\n+            env->MakeMock();\n+        }\n+    }\n+\n+    /** Return object for accessing database at specified path. */\n+    static std::unique_ptr<CWalletDBWrapper> Create(const fs::path& path)\n+    {\n+        return MakeUnique<CWalletDBWrapper>(path);\n+    }\n+\n+    /** Return object for accessing dummy database with no read/write capabilities. */\n+    static std::unique_ptr<CWalletDBWrapper> CreateDummy()\n+    {\n+        return MakeUnique<CWalletDBWrapper>();\n+    }\n+\n+    /** Return object for accessing temporary in-memory database. */\n+    static std::unique_ptr<CWalletDBWrapper> CreateMock()\n+    {\n+        return MakeUnique<CWalletDBWrapper>(\"\", true /* mock */);\n     }\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n@@ -113,10 +138,6 @@ class CWalletDBWrapper\n      */\n     bool Backup(const std::string& strDest);\n \n-    /** Get a name for this database, for debugging etc.\n-     */\n-    std::string GetName() const { return strFile; }\n-\n     /** Make sure all changes are flushed to disk.\n      */\n     void Flush(bool shutdown);\n@@ -161,15 +182,15 @@ class CDB\n \n     void Flush();\n     void Close();\n-    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     static bool PeriodicFlush(CWalletDBWrapper& dbw);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& file_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n public:\n     template <typename K, typename T>\n@@ -329,7 +350,7 @@ class CDB\n     {\n         if (!pdb || activeTxn)\n             return false;\n-        DbTxn* ptxn = bitdb.TxnBegin();\n+        DbTxn* ptxn = env->TxnBegin();\n         if (!ptxn)\n             return false;\n         activeTxn = ptxn;"
      },
      {
        "sha": "6e243c0a09073469ab545150277665581f5c93bd",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -249,21 +249,21 @@ bool VerifyWallets()\n         }\n \n         std::string strError;\n-        if (!CWalletDB::VerifyEnvironment(walletFile, GetWalletDir().string(), strError)) {\n+        if (!CWalletDB::VerifyEnvironment(wallet_path, strError)) {\n             return InitError(strError);\n         }\n \n         if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n             // Recover readable keypairs:\n-            CWallet dummyWallet;\n+            CWallet dummyWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n             std::string backup_filename;\n-            if (!CWalletDB::Recover(walletFile, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n+            if (!CWalletDB::Recover(wallet_path, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n                 return false;\n             }\n         }\n \n         std::string strWarning;\n-        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetWalletDir().string(), strWarning, strError);\n+        bool dbV = CWalletDB::VerifyDatabaseFile(wallet_path, strWarning, strError);\n         if (!strWarning.empty()) {\n             InitWarning(strWarning);\n         }\n@@ -284,7 +284,7 @@ bool OpenWallets()\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile);\n+        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n         if (!pwallet) {\n             return false;\n         }"
      },
      {
        "sha": "17b8637a8b33a419580585a89d99c2c4801cb8e7",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -13,13 +13,13 @@\n BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n \n static void\n-GetResults(CWallet *wallet, std::map<CAmount, CAccountingEntry>& results)\n+GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n     results.clear();\n-    BOOST_CHECK(wallet->ReorderTransactions() == DB_LOAD_OK);\n-    wallet->ListAccountCreditDebit(\"\", aes);\n+    BOOST_CHECK(wallet.ReorderTransactions() == DB_LOAD_OK);\n+    wallet.ListAccountCreditDebit(\"\", aes);\n     for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n@@ -33,28 +33,28 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     CAccountingEntry ae;\n     std::map<CAmount, CAccountingEntry> results;\n \n-    LOCK(pwalletMain->cs_wallet);\n+    LOCK(m_wallet.cs_wallet);\n \n     ae.strAccount = \"\";\n     ae.nCreditDebit = 1;\n     ae.nTime = 1333333333;\n     ae.strOtherAccount = \"b\";\n     ae.strComment = \"\";\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n \n     ae.nTime = 1333333336;\n     ae.strOtherAccount = \"c\";\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 3);\n     BOOST_CHECK(2 == results.size());\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(results[0].strComment.empty());\n@@ -65,13 +65,13 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n-    ae.nOrderPos = pwalletMain->IncOrderPosNext();\n-    pwalletMain->AddAccountingEntry(ae);\n+    ae.nOrderPos = m_wallet.IncOrderPosNext();\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 4);\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n     BOOST_CHECK(results[2].nTime == 1333333336);\n@@ -85,8 +85,8 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n@@ -95,15 +95,15 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 6);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n@@ -116,12 +116,12 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333334;\n     ae.strOtherAccount = \"e\";\n     ae.nOrderPos = -1;\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 4);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 7);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 7);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);"
      },
      {
        "sha": "77ccd0b8d8d8eb12bbdfe08e209aacf44859e064",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -6,26 +6,21 @@\n \n #include <rpc/server.h>\n #include <wallet/db.h>\n+#include <wallet/wallet.h>\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName)\n+    TestingSetup(chainName), m_wallet(\"mock\", CWalletDBWrapper::CreateMock())\n {\n-    bitdb.MakeMock();\n     bool fFirstRun;\n     g_address_type = OUTPUT_TYPE_DEFAULT;\n     g_change_type = OUTPUT_TYPE_DEFAULT;\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    pwalletMain = MakeUnique<CWallet>(std::move(dbw));\n-    pwalletMain->LoadWallet(fFirstRun);\n-    RegisterValidationInterface(pwalletMain.get());\n+    m_wallet.LoadWallet(fFirstRun);\n+    RegisterValidationInterface(&m_wallet);\n \n     RegisterWalletRPCCommands(tableRPC);\n }\n \n WalletTestingSetup::~WalletTestingSetup()\n {\n-    UnregisterValidationInterface(pwalletMain.get());\n-\n-    bitdb.Flush(true);\n-    bitdb.Reset();\n+    UnregisterValidationInterface(&m_wallet);\n }"
      },
      {
        "sha": "663836a95525cd0a267fe2a64c0e2c1aa79e3211",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -15,7 +15,7 @@ struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~WalletTestingSetup();\n \n-    std::unique_ptr<CWallet> pwalletMain;\n+    CWallet m_wallet;\n };\n \n #endif"
      },
      {
        "sha": "41348b50a4af2e8191f28ce46bc4f782c027f588",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 24,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -36,7 +36,7 @@ typedef std::set<CInputCoin> CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n-static const CWallet testWallet;\n+static const CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n static std::vector<COutput> vCoins;\n \n static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n@@ -382,7 +382,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -397,7 +397,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -409,7 +409,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         vpwallets.insert(vpwallets.begin(), &wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -471,7 +471,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         LOCK(wallet.cs_wallet);\n         wallet.mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -486,7 +486,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -516,7 +516,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    CWallet wallet;\n+    CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n     CWalletTx wtx(&wallet, MakeTransactionRef(coinbaseTxns.back()));\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n@@ -562,27 +562,25 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n // expanded to cover more corner cases of smart time logic.\n BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n {\n-    CWallet wallet;\n-\n     // New transaction should use clock time if lower than block time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 100, 120), 100);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 100, 120), 100);\n \n     // Test that updating existing transaction does not change smart time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 200, 220), 100);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 200, 220), 100);\n \n     // New transaction should use clock time if there's no block time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 2, 300, 0), 300);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 2, 300, 0), 300);\n \n     // New transaction should use block time if lower than clock time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 3, 420, 400), 400);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 3, 420, 400), 400);\n \n     // New transaction should use latest entry time if higher than\n     // min(block time, clock time).\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 4, 500, 390), 400);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 4, 500, 390), 400);\n \n     // If there are future entries, new transaction should use time of the\n     // newest entry that is no more than 300 seconds ahead of the clock time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 5, 50, 600), 300);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 5, 50, 600), 300);\n \n     // Reset mock time for other tests.\n     SetMockTime(0);\n@@ -591,12 +589,12 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = CKeyID();\n-    LOCK(pwalletMain->cs_wallet);\n-    pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n-    pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n-    pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n+    LOCK(m_wallet.cs_wallet);\n+    m_wallet.AddDestData(dest, \"misc\", \"val_misc\");\n+    m_wallet.AddDestData(dest, \"rr0\", \"val_rr0\");\n+    m_wallet.AddDestData(dest, \"rr1\", \"val_rr1\");\n \n-    auto values = pwalletMain->GetDestValues(\"rr\");\n+    auto values = m_wallet.GetDestValues(\"rr\");\n     BOOST_CHECK_EQUAL(values.size(), 2);\n     BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n@@ -608,10 +606,9 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        ::bitdb.MakeMock();\n         g_address_type = OUTPUT_TYPE_DEFAULT;\n         g_change_type = OUTPUT_TYPE_DEFAULT;\n-        wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n+        wallet = MakeUnique<CWallet>(\"mock\", CWalletDBWrapper::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -623,8 +620,6 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ~ListCoinsTestingSetup()\n     {\n         wallet.reset();\n-        ::bitdb.Flush(true);\n-        ::bitdb.Reset();\n     }\n \n     CWalletTx& AddTx(CRecipient recipient)"
      },
      {
        "sha": "b1e2181ec7ca86c121fec722e66ba05c5afa474b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -3908,16 +3908,17 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n+CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n {\n+    const std::string& walletFile = name;\n+\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(std::move(dbw));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(name, CWalletDBWrapper::Create(path));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -3929,8 +3930,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-    CWallet *walletInstance = new CWallet(std::move(dbw));\n+    CWallet *walletInstance = new CWallet(name, CWalletDBWrapper::Create(path));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {"
      },
      {
        "sha": "76a411d81b53b450b8e45c258b94a52341e28a57",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -15,6 +15,7 @@\n #include <validationinterface.h>\n #include <script/ismine.h>\n #include <script/sign.h>\n+#include <util.h>\n #include <wallet/crypter.h>\n #include <wallet/walletdb.h>\n #include <wallet/rpcwallet.h>\n@@ -737,6 +738,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override;\n \n+    /**\n+     * Wallet filename from wallet=<path> command line or config option.\n+     * Used in debug logs and to send RPCs to the right wallet instance when\n+     * more than one wallet is loaded.\n+     */\n+    std::string m_name;\n+\n+    /** Internal database handle. */\n     std::unique_ptr<CWalletDBWrapper> dbw;\n \n     /**\n@@ -768,14 +777,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n-    std::string GetName() const\n-    {\n-        if (dbw) {\n-            return dbw->GetName();\n-        } else {\n-            return \"dummy\";\n-        }\n-    }\n+    const std::string& GetName() const { return m_name; }\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n \n@@ -789,14 +791,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n-    // Create wallet with dummy database handle\n-    CWallet(): dbw(new CWalletDBWrapper())\n-    {\n-        SetNull();\n-    }\n-\n-    // Create wallet with passed-in database handle\n-    explicit CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))\n+    /** Construct wallet with specified name and database implementation. */\n+    CWallet(std::string name, std::unique_ptr<CWalletDBWrapper> dbw) : m_name(std::move(name)), dbw(std::move(dbw))\n     {\n         SetNull();\n     }\n@@ -1116,7 +1112,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string walletFile);\n+    static CWallet* CreateWalletFromFile(const std::string& name, const fs::path& path);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "46e4c12a7a2bafd997743fea21833a56b035d9e8",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -771,16 +771,16 @@ void MaybeCompactWalletDB()\n //\n // Try to (very carefully!) recover wallet file if there is a problem.\n //\n-bool CWalletDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n+bool CWalletDB::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n {\n-    return CDB::Recover(filename, callbackDataIn, recoverKVcallback, out_backup_filename);\n+    return CDB::Recover(wallet_path, callbackDataIn, recoverKVcallback, out_backup_filename);\n }\n \n-bool CWalletDB::Recover(const std::string& filename, std::string& out_backup_filename)\n+bool CWalletDB::Recover(const fs::path& wallet_path, std::string& out_backup_filename)\n {\n     // recover without a key filter callback\n     // results in recovering all record types\n-    return CWalletDB::Recover(filename, nullptr, nullptr, out_backup_filename);\n+    return CWalletDB::Recover(wallet_path, nullptr, nullptr, out_backup_filename);\n }\n \n bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n@@ -806,14 +806,14 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr)\n {\n-    return CDB::VerifyEnvironment(walletFile, walletDir, errorStr);\n+    return CDB::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)\n {\n-    return CDB::VerifyDatabaseFile(walletFile, walletDir, warningStr, errorStr, CWalletDB::Recover);\n+    return CDB::VerifyDatabaseFile(wallet_path, warningStr, errorStr, CWalletDB::Recover);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "7d754c728405bfc0a694b55f57532b6b7a55db9a",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -218,17 +218,17 @@ class CWalletDB\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n-    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n     /* Recover convenience-function to bypass the key filter callback, called when verify fails, recovers everything */\n-    static bool Recover(const std::string& filename, std::string& out_backup_filename);\n+    static bool Recover(const fs::path& wallet_path, std::string& out_backup_filename);\n     /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n     static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  },
  {
    "sha": "26c06f24e5dcc32a7599abb8d670d22993c82bc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmMwNmYyNGU1ZGNjMzJhNzU5OWFiYjhkNjcwZDIyOTkzYzgyYmMy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-14T18:32:41Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-03T15:26:55Z"
      },
      "message": "Allow wallet files not in -walletdir directory\n\nRemove restriction that -wallet filenames can only refer to files in the\n-walletdir directory.",
      "tree": {
        "sha": "e8d9e757900e0c0d019a4a0b04c8fdd06e51c5fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8d9e757900e0c0d019a4a0b04c8fdd06e51c5fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a99f65e53019becdd8d2631396012bafb29741",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a99f65e53019becdd8d2631396012bafb29741",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a99f65e53019becdd8d2631396012bafb29741"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 42,
      "deletions": 37
    },
    "files": [
      {
        "sha": "171880a77be33486da85fc27b76f55a49852cd34",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -63,6 +63,15 @@ RPC changes\n \n - The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n \n+External wallet files\n+---------------------\n+\n+The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n+to be located in the -walletdir directory. When wallets are located in\n+different directories, wallet data will be stored independently, so data from\n+every wallet is not mixed into the same <walletdir>/database/log.??????????\n+files.\n+\n Credits\n =======\n "
      },
      {
        "sha": "fedfcc4f1064856cf1c8bd3b44ff855ab3ca8bda",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -46,7 +46,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n-    strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory, required if bitcoind/-Qt runs with multiple wallets)\"));\n+    strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\"));\n     strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"));\n     strUsage += HelpMessageOpt(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")));\n "
      },
      {
        "sha": "0ef3b7e926fb47666ecf462767f6f2334650da54",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -122,6 +122,7 @@ bool CDBEnv::Open(bool retry)\n     boost::this_thread::interruption_point();\n \n     fs::path pathIn = strPath;\n+    TryCreateDirectories(pathIn);\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;"
      },
      {
        "sha": "11fd067b4b4556a05dc11e21250c8ae5522537c0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -35,7 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n+    strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist.\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n@@ -230,14 +230,6 @@ bool VerifyWallets()\n     std::set<fs::path> wallet_paths;\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        if (boost::filesystem::path(walletFile).filename() != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet parameter must only specify a filename (not a path).\"), walletFile));\n-        }\n-\n-        if (SanitizeString(walletFile, SAFE_CHARS_FILENAME) != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n-        }\n-\n         fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n \n         if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {"
      },
      {
        "sha": "871fc1a1519922de9289e04dd9837278f1fe287a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 30,
        "deletions": 27,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -16,7 +16,6 @@ class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w'], []]\n         self.supports_cli = True\n \n     def run_test(self):\n@@ -26,9 +25,28 @@ def run_test(self):\n         wallet_dir = lambda *p: data_dir('wallets', *p)\n         wallet = lambda name: node.get_wallet_rpc(name)\n \n-        assert_equal(set(node.listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n-\n+        # check wallet.dat is created\n         self.stop_nodes()\n+        assert_equal(os.path.isfile(wallet_dir('wallet.dat')), True)\n+\n+        # restart node with a mix of wallet names:\n+        #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n+        #   w          - to verify wallet name matching works when one wallet path is prefix of another\n+        #   sub/w5     - to verify relative wallet path is created correctly\n+        #   extern/w6  - to verify absolute wallet path is created correctly\n+        #   wallet.dat - to verify existing wallet file is loaded correctly\n+        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'wallet.dat']\n+        extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n+        self.start_node(0, extra_args)\n+        assert_equal(set(node.listwallets()), set(wallet_names))\n+\n+        # check that all requested wallets were created\n+        self.stop_node(0)\n+        for wallet_name in wallet_names:\n+            assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n+\n+        # should not initialize if wallet path can't be created\n+        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'File exists')\n \n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -77,40 +95,25 @@ def run_test(self):\n         self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n         self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n \n-        self.restart_node(0, self.extra_args[0])\n+        self.restart_node(0, extra_args)\n \n-        w1 = wallet(\"w1\")\n-        w2 = wallet(\"w2\")\n-        w3 = wallet(\"w3\")\n-        w4 = wallet(\"w\")\n+        wallets = [wallet(w) for w in wallet_names]\n         wallet_bad = wallet(\"bad\")\n \n-        w1.generate(1)\n+        # check wallet names and balances\n+        wallets[0].generate(1)\n+        for wallet_name, wallet in zip(wallet_names, wallets):\n+            info = wallet.getwalletinfo()\n+            assert_equal(info['immature_balance'], 50 if wallet is wallets[0] else 0)\n+            assert_equal(info['walletname'], wallet_name)\n \n         # accessing invalid wallet fails\n         assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n         assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n \n-        # check w1 wallet balance\n-        w1_info = w1.getwalletinfo()\n-        assert_equal(w1_info['immature_balance'], 50)\n-        w1_name = w1_info['walletname']\n-        assert_equal(w1_name, \"w1\")\n-\n-        # check w2 wallet balance\n-        w2_info = w2.getwalletinfo()\n-        assert_equal(w2_info['immature_balance'], 0)\n-        w2_name = w2_info['walletname']\n-        assert_equal(w2_name, \"w2\")\n-\n-        w3_name = w3.getwalletinfo()['walletname']\n-        assert_equal(w3_name, \"w3\")\n-\n-        w4_name = w4.getwalletinfo()['walletname']\n-        assert_equal(w4_name, \"w\")\n-\n+        w1, w2, w3, w4, *_ = wallets\n         w1.generate(101)\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)"
      }
    ]
  },
  {
    "sha": "be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZThhYjdkMDgyMjI4ZDA5Y2E1MjlkMWEwODczMGQ3ZDVhYWNiMGVk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-15T20:44:36Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-03T15:26:55Z"
      },
      "message": "Create new wallet databases as directories rather than files\n\nThis change should make it easier for users to make complete backups of wallets\nbecause they can now just back up the specified `-wallet=<path>` path directly,\ninstead of having to back up the specified path as well as the transaction log\ndirectory (for incompletely flushed wallets).\n\nAnother advantage of this change is that if two wallets are located in the same\ndirectory, they will now use their own BerkeleyDB environments instead using a\nshared environment. Using a shared environment makes it difficult to manage and\nback up wallets separately because transaction log files will contain a mix of\ndata from all wallets in the environment.",
      "tree": {
        "sha": "d1fc152627f6c6daf32034520d51abbb2701d9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1fc152627f6c6daf32034520d51abbb2701d9ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26c06f24e5dcc32a7599abb8d670d22993c82bc2"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 81,
      "deletions": 30
    },
    "files": [
      {
        "sha": "8fcd2a9163ed8b38729622168c37703bc1cf7135",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 25,
        "deletions": 4,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -67,10 +67,31 @@ External wallet files\n ---------------------\n \n The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n-to be located in the -walletdir directory. When wallets are located in\n-different directories, wallet data will be stored independently, so data from\n-every wallet is not mixed into the same <walletdir>/database/log.??????????\n-files.\n+to be located in the -walletdir directory.\n+\n+Newly created wallet format\n+---------------------------\n+\n+If `-wallet=<path>` is specified with a path that does not exist, it will now\n+create a wallet directory at the specified location (containing a wallet.dat\n+data file, a db.log file, and database/log.?????????? files) instead of just\n+creating a data file at the path and storing log files in the parent\n+directory. This should make backing up wallets more straightforward than\n+before because the specified wallet path can just be directly archived without\n+having to look in the parent directory for transaction log files.\n+\n+For backwards compatibility, wallet paths that are names of existing data files\n+in the `-walletdir` directory will continue to be accepted and interpreted the\n+same as before.\n+\n+Low-level RPC changes\n+---------------------\n+\n+- When bitcoin is not started with any `-wallet=<path>` options, the name of\n+  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n+  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n+  with any `-wallet=<path>` options, there is no change in behavior, and the\n+  name of any wallet is just its `<path>` string.\n \n Credits\n ======="
      },
      {
        "sha": "41f1e5786c9923b67cf6bbb78849cd2ccae7c0a2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -339,8 +339,8 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n-    if (!walletName.empty()) {\n+    if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n+        std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n         char *encodedURI = evhttp_uriencode(walletName.c_str(), walletName.size(), false);\n         if (encodedURI) {\n             endpoint = \"/wallet/\"+ std::string(encodedURI);"
      },
      {
        "sha": "ebe7b48da06463c5fa678af5da93beaa7533ffc6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -59,8 +59,19 @@ std::map<std::string, CDBEnv> g_dbenvs; //!< Map from directory name to open db\n \n CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n-    fs::path env_directory = wallet_path.parent_path();\n-    database_filename = wallet_path.filename().string();\n+    fs::path env_directory;\n+    if (fs::is_regular_file(wallet_path)) {\n+        // Special case for backwards compatibility: if wallet path points to an\n+        // existing file, treat it as the path to a BDB data file in a parent\n+        // directory that also contains BDB log files.\n+        env_directory = wallet_path.parent_path();\n+        database_filename = wallet_path.filename().string();\n+    } else {\n+        // Normal case: Interpret wallet path as a directory path containing\n+        // data and log files.\n+        env_directory = wallet_path;\n+        database_filename = \"wallet.dat\";\n+    }\n     LOCK(cs_db);\n     // Note: An ununsed temporary CDBEnv object may be created inside the\n     // emplace function if the key already exists. This is a little inefficient,"
      },
      {
        "sha": "e028cf4210b6551d45b39f0ba0ca5216e665b215",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -35,7 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist.\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n+    strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n@@ -66,7 +66,7 @@ bool WalletParameterInteraction()\n         return true;\n     }\n \n-    gArgs.SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+    gArgs.SoftSetArg(\"-wallet\", \"\");\n     const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n \n     if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n@@ -230,10 +230,22 @@ bool VerifyWallets()\n     std::set<fs::path> wallet_paths;\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n+        // Do some checking on wallet path. It should be either a:\n+        //\n+        // 1. Path where a directory can be created.\n+        // 2. Path to an existing directory.\n+        // 3. Path to a symlink to a directory.\n+        // 4. For backwards compatibility, the name of a data file in -walletdir.\n         fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n-\n-        if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n+        fs::file_type path_type = fs::symlink_status(wallet_path).type();\n+        if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n+              (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n+              (path_type == fs::regular_file && fs::path(walletFile).filename() == walletFile))) {\n+            return InitError(strprintf(\n+                _(\"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n+                  \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n+                  \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n+                walletFile, GetWalletDir()));\n         }\n \n         if (!wallet_paths.insert(wallet_path).second) {"
      },
      {
        "sha": "960c192640306b75a47562910e5639fe78b53c26",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -45,7 +45,6 @@ OutputType g_address_type = OUTPUT_TYPE_NONE;\n OutputType g_change_type = OUTPUT_TYPE_NONE;\n bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams\n \n-const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n /**"
      },
      {
        "sha": "3e2d1794d89fa186476afed518b7d074a95487c0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -68,8 +68,6 @@ static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n \n-extern const char * DEFAULT_WALLET_DAT;\n-\n static const int64_t TIMESTAMP_MIN = 0;\n \n class CBlockIndex;"
      },
      {
        "sha": "c6cec0596b6b787a03bc6fde10b88fd2a6751a58",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -37,13 +37,13 @@ def run_test(self):\n         os.mkdir(new_data_dir)\n         self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n         self.stop_node(0)\n-        assert os.path.isfile(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n+        assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n         self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n-        assert os.path.isfile(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n \n if __name__ == '__main__':\n     ConfArgsTest().main()"
      },
      {
        "sha": "378c06ee595219a54ac8d1268528af7c3f799d54",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 22,
        "deletions": 12,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -29,24 +29,38 @@ def run_test(self):\n         self.stop_nodes()\n         assert_equal(os.path.isfile(wallet_dir('wallet.dat')), True)\n \n+        # create symlink to verify wallet directory path can be referenced\n+        # through symlink\n+        os.mkdir(wallet_dir('w7'))\n+        os.symlink('w7', wallet_dir('w7_symlink'))\n+\n+        # rename wallet.dat to make sure plain wallet file paths (as opposed to\n+        # directory paths) can be loaded\n+        os.rename(wallet_dir(\"wallet.dat\"), wallet_dir(\"w8\"))\n+\n         # restart node with a mix of wallet names:\n         #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n         #   w          - to verify wallet name matching works when one wallet path is prefix of another\n         #   sub/w5     - to verify relative wallet path is created correctly\n         #   extern/w6  - to verify absolute wallet path is created correctly\n-        #   wallet.dat - to verify existing wallet file is loaded correctly\n-        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'wallet.dat']\n+        #   w7_symlink - to verify symlinked wallet path is initialized correctly\n+        #   w8         - to verify existing wallet file is loaded correctly\n+        #   ''         - to verify default wallet file is created correctly\n+        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n         extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n         # check that all requested wallets were created\n         self.stop_node(0)\n         for wallet_name in wallet_names:\n-            assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n+            if os.path.isdir(wallet_dir(wallet_name)):\n+                assert_equal(os.path.isfile(wallet_dir(wallet_name, \"wallet.dat\")), True)\n+            else:\n+                assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n \n         # should not initialize if wallet path can't be created\n-        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'File exists')\n+        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'Not a directory')\n \n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -55,17 +69,13 @@ def run_test(self):\n         # should not initialize if there are duplicate wallets\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n-        # should not initialize if wallet file is a directory\n-        os.mkdir(wallet_dir('w11'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n-\n         # should not initialize if one wallet is a copy of another\n-        shutil.copyfile(wallet_dir('w2'), wallet_dir('w22'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+        shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w8', '-wallet=w8_copy'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink(wallet_dir('w1'), wallet_dir('w12'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        os.symlink('w8', wallet_dir('w8_symlink'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w8_symlink'], 'Invalid -wallet path')\n \n         # should not initialize if the specified walletdir does not exist\n         self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')"
      }
    ]
  }
]