[
  {
    "sha": "bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGNmNWRlYTdjMmU3NDkzYmU3ZDhmYzE1N2UxNjhiNzdjY2U3ZGNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-05-21T16:57:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-05-21T17:07:10Z"
      },
      "message": "Fix intermittent hang issue in scheduler_tests\n\nDon't clear `stopRequested` and `stopWhenEmpty` at the top of\n`serviceQueue`, as this results in a race condition: on systems under\nheavy load, some of the threads only get scheduled on the CPU when the\nother threads have already finished their work. This causes the flags to\nbe cleared post-hoc and thus those threads to wait forever.\n\nThe potential drawback of this change is that the scheduler cannot be\nrestarted after being stopped (an explicit reset would be needed), but\nwe don't use this functionality anyway.",
      "tree": {
        "sha": "d53175023a197c475a2c3d797367867bfde80791",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53175023a197c475a2c3d797367867bfde80791"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d862c2739b96005fdf0e2a4df347e7291956fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d862c2739b96005fdf0e2a4df347e7291956fc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d862c2739b96005fdf0e2a4df347e7291956fc1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c42eb7244d52d949b1acd74cc38988e8ddb2b931",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=bdcf5dea7c2e7493be7d8fc157e168b77cce7dcc",
        "patch": "@@ -29,8 +29,6 @@ void CScheduler::serviceQueue()\n {\n     boost::unique_lock<boost::mutex> lock(newTaskMutex);\n     ++nThreadsServicingQueue;\n-    stopRequested = false;\n-    stopWhenEmpty = false;\n \n     // newTaskMutex is locked throughout this loop EXCEPT\n     // when the thread is waiting or when the user's function"
      }
    ]
  }
]