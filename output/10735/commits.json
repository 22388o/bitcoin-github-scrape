[
  {
    "sha": "6835cb0ab26c913423cc2307c989579d05aabdcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODM1Y2IwYWIyNmM5MTM0MjNjYzIzMDdjOTg5NTc5ZDA1YWFiZGNi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-03T15:46:43Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-15T12:26:50Z"
      },
      "message": "Avoid static analyzer warnings regarding uninitialized arguments\n\nAvoid static analyzer warnings regarding \"Function call argument\nis a pointer to uninitialized value\" in cases where we are\nintentionally using such arguments.\n\nThis is achieved by using ...\n\n`f(b.begin(), b.end())` (`std::array<char, N>`)\n\n... instead of ...\n\n`f(b, b + N)` (`char b[N]`)\n\nRationale:\n* Reduce false positives by guiding static analyzers regarding our\n  intentions.\n\nBefore this commit:\n\n```\n$ clang-tidy-3.5 -checks=* src/bench/base58.cpp\nbench/base58.cpp:23:9: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n        EncodeBase58(b, b + 32);\n        ^\n$ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\nbench/verify_script.cpp:59:5: warning: Function call argument is a pointer to uninitialized value [clang-analyzer-core.CallAndMessage]\n    key.Set(vchKey, vchKey + 32, false);\n    ^\n$\n```\n\nAfter this commit:\n\n```\n$ clang-tidy-3.5 -checks=* src/bench/base58.cpp\n$ clang-tidy-3.5 -checks=* src/bench/verify_script.cpp\n$\n```",
      "tree": {
        "sha": "f624c3b4de8d9c619c99e1f5cbb3aaba6afada59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f624c3b4de8d9c619c99e1f5cbb3aaba6afada59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6835cb0ab26c913423cc2307c989579d05aabdcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6835cb0ab26c913423cc2307c989579d05aabdcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6835cb0ab26c913423cc2307c989579d05aabdcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6835cb0ab26c913423cc2307c989579d05aabdcb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "65e27a615d9344c765068a95676691a19314504a",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=6835cb0ab26c913423cc2307c989579d05aabdcb",
        "patch": "@@ -7,34 +7,37 @@\n #include \"validation.h\"\n #include \"base58.h\"\n \n+#include <array>\n #include <vector>\n #include <string>\n \n \n static void Base58Encode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    static const std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     while (state.KeepRunning()) {\n-        EncodeBase58(b, b + 32);\n+        EncodeBase58(buff.begin(), buff.end());\n     }\n }\n \n \n static void Base58CheckEncode(benchmark::State& state)\n {\n-    unsigned char buff[32] = {\n-        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n-        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n-        200, 24\n+    static const std::array<unsigned char, 32> buff = {\n+        {\n+            17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+            227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+            200, 24\n+        }\n     };\n-    unsigned char* b = buff;\n     std::vector<unsigned char> vch;\n-    vch.assign(b, b + 32);\n+    vch.assign(buff.begin(), buff.end());\n     while (state.KeepRunning()) {\n         EncodeBase58Check(vch);\n     }"
      },
      {
        "sha": "ef7381c1201db0d37438c7de10ca1d17e221333b",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6835cb0ab26c913423cc2307c989579d05aabdcb/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=6835cb0ab26c913423cc2307c989579d05aabdcb",
        "patch": "@@ -11,6 +11,8 @@\n #include \"script/sign.h\"\n #include \"streams.h\"\n \n+#include <array>\n+\n // FIXME: Dedup with BuildCreditingTransaction in test/script_tests.cpp.\n static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n {\n@@ -55,8 +57,12 @@ static void VerifyScriptBench(benchmark::State& state)\n \n     // Keypair.\n     CKey key;\n-    const unsigned char vchKey[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n-    key.Set(vchKey, vchKey + 32, false);\n+    static const std::array<unsigned char, 32> vchKey = {\n+        {\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n+        }\n+    };\n+    key.Set(vchKey.begin(), vchKey.end(), false);\n     CPubKey pubkey = key.GetPubKey();\n     uint160 pubkeyHash;\n     CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());"
      }
    ]
  }
]