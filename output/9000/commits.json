[
  {
    "sha": "848d666bc2d02f79153ddaa218d6d2523d742403",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDhkNjY2YmMyZDAyZjc5MTUzZGRhYTIxOGQ2ZDI1MjNkNzQyNDAz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-21T15:33:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-02T18:02:46Z"
      },
      "message": "mining: allow powLimit to be specified for TestBlockValidity",
      "tree": {
        "sha": "c65f9331c817c94705001db055259e77092da304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c65f9331c817c94705001db055259e77092da304"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/848d666bc2d02f79153ddaa218d6d2523d742403",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848d666bc2d02f79153ddaa218d6d2523d742403",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/848d666bc2d02f79153ddaa218d6d2523d742403",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848d666bc2d02f79153ddaa218d6d2523d742403/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7ba4a233bd5a6f8fadee681c68a995e23fe36d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7ba4a233bd5a6f8fadee681c68a995e23fe36d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7ba4a233bd5a6f8fadee681c68a995e23fe36d7"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "4a31c906d55dc71dc31356993f7f6e63a175b00c",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -160,7 +160,7 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         return READ_STATUS_INVALID;\n \n     CValidationState state;\n-    if (!CheckBlock(block, state, Params().GetConsensus())) {\n+    if (!CheckBlock(block, state, Params().GetConsensus().powLimit)) {\n         // TODO: We really want to just check merkle tree manually here,\n         // but that is expensive, and CheckBlock caches a block's\n         // \"checked-status\" (in the CBlock?). CBlock should be able to"
      },
      {
        "sha": "9de2ae54bff3dad204acccd47fc7d4a1f6c5cd8d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -1744,7 +1744,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams.powLimit))\n         return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n \n     return true;\n@@ -2356,14 +2356,14 @@ static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n+                  CCoinsViewCache& view, const CChainParams& chainparams, const uint256& powLimit, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n \n     int64_t nTimeStart = GetTimeMicros();\n \n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, state, powLimit, !fJustCheck, !fJustCheck))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2842,7 +2842,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        bool rv = ConnectBlock(*pblock, state, pindexNew, view, chainparams);\n+        bool rv = ConnectBlock(*pblock, state, pindexNew, view, chainparams, chainparams.GetConsensus().powLimit);\n         GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -3390,16 +3390,16 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW)\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const uint256& powLimit, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, powLimit))\n         return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n \n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool CheckBlock(const CBlock& block, CValidationState& state, const uint256& powLimit, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n \n@@ -3408,7 +3408,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n+    if (!CheckBlockHeader(block, state, powLimit, fCheckPOW))\n         return false;\n \n     // Check the merkle root.\n@@ -3662,7 +3662,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return true;\n         }\n \n-        if (!CheckBlockHeader(block, state, chainparams.GetConsensus()))\n+        if (!CheckBlockHeader(block, state, chainparams.GetConsensus().powLimit))\n             return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // Get prev block index\n@@ -3746,7 +3746,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+    if (!CheckBlock(block, state, chainparams.GetConsensus().powLimit, GetAdjustedTime()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3806,7 +3806,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, const uint256& powLimit, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n@@ -3821,11 +3821,11 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n+    if (!CheckBlock(block, state, powLimit, fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, powLimit, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -4165,7 +4165,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus().powLimit))\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__, \n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n@@ -4205,7 +4205,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!ConnectBlock(block, state, pindex, coins, chainparams, chainparams.GetConsensus().powLimit))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }"
      },
      {
        "sha": "f69f1c011be764732280cfbe9e351bf791a2e803",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -463,8 +463,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const uint256& powLimit, bool fCheckPOW = true);\n+bool CheckBlock(const CBlock& block, CValidationState& state, const uint256& powLimit, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n@@ -476,7 +476,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins,\n-                  const CChainParams& chainparams, bool fJustCheck = false);\n+                  const CChainParams& chainparams, const uint256& powLimit, bool fJustCheck = false);\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n  *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n@@ -485,7 +485,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, const uint256& powLimit, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);"
      },
      {
        "sha": "0b4881d4e0b5d19ef5b1f30a6acbd001c8df23c8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -193,7 +193,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, chainparams.GetConsensus().powLimit, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n "
      },
      {
        "sha": "68a4393923b84f478f5c9bf72eeb66ac2362cf2a",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -74,7 +74,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     return bnNew.GetCompact();\n }\n \n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const uint256& powLimit)\n {\n     bool fNegative;\n     bool fOverflow;\n@@ -83,7 +83,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(powLimit))\n         return false;\n \n     // Check proof of work matches claimed amount"
      },
      {
        "sha": "295a5c6e337024f246f1e1c934c112b19d63d172",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -18,6 +18,6 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const uint256& powLimit);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "f7b764b1d206e074709396e71405b6671541e56d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -121,7 +121,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus().powLimit)) {\n             ++pblock->nNonce;\n             --nMaxTries;\n         }\n@@ -439,7 +439,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), block, pindexPrev, Params().GetConsensus().powLimit, false, true);\n             return BIP22ValidationResult(state);\n         }\n "
      },
      {
        "sha": "3a9036086c37008f1ef6a7e2d3bd2b98f28ef874",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -45,7 +45,7 @@ static CBlock BuildBlockTestCase() {\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) ++block.nNonce;\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus().powLimit)) ++block.nNonce;\n     return block;\n }\n \n@@ -274,7 +274,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n     bool mutated;\n     block.hashMerkleRoot = BlockMerkleRoot(block, &mutated);\n     assert(!mutated);\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) ++block.nNonce;\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus().powLimit)) ++block.nNonce;\n \n     // Test simple header round-trip with only coinbase\n     {"
      },
      {
        "sha": "49ec443821ad4676a5969824421d69cf323d8a66",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -124,7 +124,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus().powLimit)) ++block.nNonce;\n \n     ProcessNewBlock(chainparams, &block, true, NULL, NULL);\n "
      },
      {
        "sha": "280253ac5a88a9a62124e37184fa30d476aa8af8",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/848d666bc2d02f79153ddaa218d6d2523d742403/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/848d666bc2d02f79153ddaa218d6d2523d742403/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=848d666bc2d02f79153ddaa218d6d2523d742403",
        "patch": "@@ -199,7 +199,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus()))\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits, Params().GetConsensus().powLimit))\n                     return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();"
      }
    ]
  },
  {
    "sha": "78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGQ3NTFiYWI1M2IxZTQ2ZjI1ZGMwNWZiN2Q1ZDQ1YzRmYzU0ZGY0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-21T15:45:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-02T18:02:46Z"
      },
      "message": "mining: pass nBits into TestBlockValidity",
      "tree": {
        "sha": "02b407089a70d5732519fe5abe3ad3bada313c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02b407089a70d5732519fe5abe3ad3bada313c0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "848d666bc2d02f79153ddaa218d6d2523d742403",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/848d666bc2d02f79153ddaa218d6d2523d742403",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/848d666bc2d02f79153ddaa218d6d2523d742403"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4bc0b36e5e7c7166e0a239cd4e69317eda5e854d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
        "patch": "@@ -3536,11 +3536,11 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     return commitment;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime, uint32_t nBits)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+    if (block.nBits != nBits)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n \n     // Check timestamp against prev\n@@ -3678,7 +3678,8 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n         if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n             return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-        if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n+        uint32_t nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n+        if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime(), nBits))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n     }\n     if (pindex == NULL)\n@@ -3806,7 +3807,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, const uint256& powLimit, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, const uint256& powLimit, uint32_t nBits, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n@@ -3819,7 +3820,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n+    if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime(), nBits))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, powLimit, fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));"
      },
      {
        "sha": "daefd17818e52455af4eba1dd4dcf665b352b799",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
        "patch": "@@ -469,7 +469,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const uint256& pow\n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime, uint32_t nBits);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n@@ -485,7 +485,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, const uint256& powLimit, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, const uint256& powLimit, uint32_t nBits, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);"
      },
      {
        "sha": "3cbf6f5390dc30e1cc11d8dc90516450a3e11a23",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
        "patch": "@@ -193,7 +193,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, chainparams.GetConsensus().powLimit, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, chainparams.GetConsensus().powLimit, pblock->nBits, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n "
      },
      {
        "sha": "50eb20ce698af1b90d3a81b9f02b9be9cbe05ead",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
        "patch": "@@ -439,7 +439,8 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, Params().GetConsensus().powLimit, false, true);\n+            uint32_t nBits = GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus());\n+            TestBlockValidity(state, Params(), block, pindexPrev, Params().GetConsensus().powLimit, nBits, false, true);\n             return BIP22ValidationResult(state);\n         }\n "
      }
    ]
  },
  {
    "sha": "ccc378c681b2cb43906a1250386552fe8ed2723e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2MzNzhjNjgxYjJjYjQzOTA2YTEyNTAzODY1NTJmZThlZDI3MjNl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-20T18:31:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-02T21:45:59Z"
      },
      "message": "mining: introduce -forceminerdifficulty debugging option\n\nThis is intended for debugging mining software only! It allows for real-time\nmining on any chain with the specified difficulty. When this option is set,\nminimum difficulty blocks will be accepted by the submitblock rpc as long as\nthey are otherwise valid.\n\nThis is very helpful for simulating mining on a real chain, without having to\nuse real hashpower.\n\nAdditionally, it does not require any change in rpc behavior, allowing testing\nof miners that cannot be easily changed.",
      "tree": {
        "sha": "13d9ef1bea3afc57e62b04035f3e9562ffbf90dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13d9ef1bea3afc57e62b04035f3e9562ffbf90dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccc378c681b2cb43906a1250386552fe8ed2723e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc378c681b2cb43906a1250386552fe8ed2723e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccc378c681b2cb43906a1250386552fe8ed2723e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccc378c681b2cb43906a1250386552fe8ed2723e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78d751bab53b1e46f25dc05fb7d5d45c4fc54df4"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 55,
      "deletions": 16
    },
    "files": [
      {
        "sha": "61f798e31911c35aa58fba14c3a76ec9a869d005",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc378c681b2cb43906a1250386552fe8ed2723e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc378c681b2cb43906a1250386552fe8ed2723e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ccc378c681b2cb43906a1250386552fe8ed2723e",
        "patch": "@@ -426,6 +426,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-forceminerdifficulty=<n>\", \"For mining software debugging only. Forces nBits of n for all blocks created by getblocktemplate. Submitted blocks are checked for correctness only, they will not be built upon.\");\n     }\n     string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -973,6 +974,8 @@ bool AppInitParameterInteraction()\n         return false;\n #endif\n \n+    nforcednBits = GetArg(\"-forceminerdifficulty\", 0);\n+\n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);"
      },
      {
        "sha": "7a9b2ff2028863f3041027f7e8183ea2ac079025",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc378c681b2cb43906a1250386552fe8ed2723e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc378c681b2cb43906a1250386552fe8ed2723e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ccc378c681b2cb43906a1250386552fe8ed2723e",
        "patch": "@@ -47,6 +47,7 @@ using namespace std;\n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n uint64_t nLastBlockWeight = 0;\n+uint32_t nforcednBits = 0;\n \n class ScoreCompare\n {\n@@ -68,7 +69,7 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n         pblock->nTime = nNewTime;\n \n     // Updating time can change work required on testnet:\n-    if (consensusParams.fPowAllowMinDifficultyBlocks)\n+    if (consensusParams.fPowAllowMinDifficultyBlocks && !nforcednBits)\n         pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n \n     return nNewTime - nOldTime;\n@@ -188,7 +189,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n     UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n-    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n+\n+    if(nforcednBits)\n+        pblock->nBits = nforcednBits;\n+    else\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n+\n     pblock->nNonce         = 0;\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n "
      },
      {
        "sha": "1e8bc03fd3f1dffc07496ba8c3ec0dfc0a2e3737",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc378c681b2cb43906a1250386552fe8ed2723e/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc378c681b2cb43906a1250386552fe8ed2723e/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ccc378c681b2cb43906a1250386552fe8ed2723e",
        "patch": "@@ -23,6 +23,7 @@ class CWallet;\n namespace Consensus { struct Params; };\n \n static const bool DEFAULT_PRINTPRIORITY = false;\n+extern uint32_t nforcednBits;\n \n struct CBlockTemplate\n {"
      },
      {
        "sha": "29e0398f61f0fbefcab9821bf1d66391cd3ade55",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 14,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccc378c681b2cb43906a1250386552fe8ed2723e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccc378c681b2cb43906a1250386552fe8ed2723e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ccc378c681b2cb43906a1250386552fe8ed2723e",
        "patch": "@@ -439,8 +439,16 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            uint32_t nBits = GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus());\n-            TestBlockValidity(state, Params(), block, pindexPrev, Params().GetConsensus().powLimit, nBits, false, true);\n+            uint256 powLimit;\n+            uint32_t nBits;\n+            if (nforcednBits) {\n+                powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+                nBits = nforcednBits;\n+            } else {\n+                nBits = GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus());\n+                powLimit = Params().GetConsensus().powLimit;\n+            }\n+            TestBlockValidity(state, Params(), block, pindexPrev, powLimit, nBits, false, true);\n             return BIP22ValidationResult(state);\n         }\n \n@@ -509,6 +517,9 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n                     checktxtime += boost::posix_time::seconds(10);\n+                } else {\n+                    // cvBlockChange triggered manually\n+                    break;\n                 }\n             }\n         }\n@@ -757,19 +768,37 @@ UniValue submitblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    submitblock_StateCatcher sc(block.GetHash());\n-    RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(Params(), &block, true, NULL, NULL);\n-    UnregisterValidationInterface(&sc);\n-    if (fBlockPresent)\n-    {\n-        if (fAccepted && !sc.found)\n-            return \"duplicate-inconclusive\";\n-        return \"duplicate\";\n+    bool fAccepted = false;\n+    if (nforcednBits) {\n+        // If nforcednBits is set, submitted blocks are only checked for validity, then discarded.\n+        // Required pow is forced to this value, regardless of the chain.\n+        CValidationState state;\n+        uint256 powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        {\n+            LOCK(cs_main);\n+            CBlockIndex* const pindexPrev = chainActive.Tip();\n+            // TestBlockValidity only supports blocks built on the current Tip\n+            if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n+                return \"inconclusive-not-best-prevblk\";\n+            TestBlockValidity(state, Params(), block, pindexPrev, powLimit, nforcednBits, true, true);\n+        }\n+        cvBlockChange.notify_all();\n+        return BIP22ValidationResult(state);\n+    } else {\n+        submitblock_StateCatcher sc(block.GetHash());\n+        RegisterValidationInterface(&sc);\n+        fAccepted = ProcessNewBlock(Params(), &block, true, NULL, NULL);\n+        UnregisterValidationInterface(&sc);\n+        if (fBlockPresent)\n+        {\n+            if (fAccepted && !sc.found)\n+                return \"duplicate-inconclusive\";\n+            return \"duplicate\";\n+        }\n+        if (!sc.found)\n+            return \"inconclusive\";\n+        return BIP22ValidationResult(sc.state);\n     }\n-    if (!sc.found)\n-        return \"inconclusive\";\n-    return BIP22ValidationResult(sc.state);\n }\n \n UniValue estimatefee(const JSONRPCRequest& request)"
      }
    ]
  }
]