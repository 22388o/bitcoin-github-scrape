[
  {
    "sha": "74fc254c2b4b2fd8392a246fc3b1520ca88da4fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGZjMjU0YzJiNGIyZmQ4MzkyYTI0NmZjM2IxNTIwY2E4OGRhNGZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-04-24T15:43:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-04-25T10:19:37Z"
      },
      "message": "devtools: add script to check symbols from Linux gitian executables\n\nAdd a script to check that the (Linux) executables produced by gitian\nonly contain allowed gcc, glibc and libstdc++ version symbols.  This\nmakes sure they are still compatible with the minimum supported Linux\ndistribution versions.",
      "tree": {
        "sha": "431fac88e881baf76beb4a338247a9ac95b26c77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/431fac88e881baf76beb4a338247a9ac95b26c77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4765b8c11679aeb76efd9ce907a5c17661d4b018",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4765b8c11679aeb76efd9ce907a5c17661d4b018",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4765b8c11679aeb76efd9ce907a5c17661d4b018"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 133,
      "deletions": 3
    },
    "files": [
      {
        "sha": "697a714a474c76b0a3a3fa359c8e1090a78bd9ba",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=74fc254c2b4b2fd8392a246fc3b1520ca88da4fd",
        "patch": "@@ -3,7 +3,7 @@ Contents\n This directory contains tools for developers working on this repository.\n \n github-merge.sh\n-----------------\n+==================\n \n A small script to automate merging pull-requests securely and sign them with GPG.\n \n@@ -36,7 +36,8 @@ Configuring the github-merge tool for the bitcoin repository is done in the foll\n     git config githubmerge.testcmd \"make -j4 check\" (adapt to whatever you want to use for testing)\n     git config --global user.signingkey mykeyid (if you want to GPG sign)\n \n-## fix-copyright-headers.py\n+fix-copyright-headers.py\n+===========================\n \n Every year newly updated files need to have its copyright headers updated to reflect the current year.\n If you run this script from src/ it will automatically update the year on the copyright header for all\n@@ -46,4 +47,25 @@ For example a file changed in 2014 (with 2014 being the current year):\n ```// Copyright (c) 2009-2013 The Bitcoin developers```\n \n would be changed to:\n-```// Copyright (c) 2009-2014 The Bitcoin developers```\n\\ No newline at end of file\n+```// Copyright (c) 2009-2014 The Bitcoin developers```\n+\n+symbol-check.py\n+==================\n+\n+A script to check that the (Linux) executables produced by gitian only contain\n+allowed gcc, glibc and libstdc++ version symbols.  This makes sure they are\n+still compatible with the minimum supported Linux distribution versions.\n+\n+Example usage after a gitian build:\n+\n+    find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py \n+\n+If only supported symbols are used the return value will be 0 and the output will be empty.\n+\n+If there are 'unsupported' symbols, the return value will be 1 a list like this will be printed:\n+\n+    .../64/test_bitcoin: symbol memcpy from unsupported version GLIBC_2.14\n+    .../64/test_bitcoin: symbol __fdelt_chk from unsupported version GLIBC_2.15\n+    .../64/test_bitcoin: symbol std::out_of_range::~out_of_range() from unsupported version GLIBCXX_3.4.15\n+    .../64/test_bitcoin: symbol _ZNSt8__detail15_List_nod from unsupported version GLIBCXX_3.4.15\n+"
      },
      {
        "sha": "4f6a18da2d39e3b586702e41261b877104e35944",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "added",
        "additions": 108,
        "deletions": 0,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74fc254c2b4b2fd8392a246fc3b1520ca88da4fd/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=74fc254c2b4b2fd8392a246fc3b1520ca88da4fd",
        "patch": "@@ -0,0 +1,108 @@\n+#!/usr/bin/python\n+# Copyright (c) 2014 Wladimir J. van der Laan\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+A script to check that the (Linux) executables produced by gitian only contain\n+allowed gcc, glibc and libstdc++ version symbols.  This makes sure they are\n+still compatible with the minimum supported Linux distribution versions.\n+\n+Example usage:\n+\n+    find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py\n+'''\n+from __future__ import division, print_function\n+import subprocess\n+import re\n+import sys\n+\n+# Debian 6.0.9 (Squeeze) has:\n+#\n+# - g++ version 4.4.5 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=g%2B%2B)\n+# - libc version 2.11.3 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libc6)\n+# - libstdc++ version 4.4.5 (https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libstdc%2B%2B6)\n+#\n+# Ubuntu 10.04.4 (Lucid Lynx) has:\n+#\n+# - g++ version 4.4.3 (http://packages.ubuntu.com/search?keywords=g%2B%2B&searchon=names&suite=lucid&section=all)\n+# - libc version 2.11.1 (http://packages.ubuntu.com/search?keywords=libc6&searchon=names&suite=lucid&section=all)\n+# - libstdc++ version 4.4.3 (http://packages.ubuntu.com/search?suite=lucid&section=all&arch=any&keywords=libstdc%2B%2B&searchon=names)\n+#\n+# Taking the minimum of these as our target.\n+#\n+# According to GNU ABI document (http://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html) this corresponds to:\n+#   GCC 4.4.0: GCC_4.4.0\n+#   GCC 4.4.2: GLIBCXX_3.4.13, CXXABI_1.3.3\n+#   (glibc)    GLIBC_2_11\n+#\n+MAX_VERSIONS = {\n+'GCC':     (4,4,0),\n+'CXXABI':  (1,3,3),\n+'GLIBCXX': (3,4,13),\n+'GLIBC':   (2,11)\n+}\n+READELF_CMD = '/usr/bin/readelf'\n+CPPFILT_CMD = '/usr/bin/c++filt'\n+\n+class CPPFilt(object):\n+    '''\n+    Demangle C++ symbol names.\n+\n+    Use a pipe to the 'c++filt' command.\n+    '''\n+    def __init__(self):\n+        self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n+\n+    def __call__(self, mangled):\n+        self.proc.stdin.write(mangled + '\\n')\n+        return self.proc.stdout.readline().rstrip()\n+\n+    def close(self):\n+        self.proc.stdin.close()\n+        self.proc.stdout.close()\n+        self.proc.wait()\n+\n+def read_symbols(executable, imports=True):\n+    '''\n+    Parse an ELF executable and return a list of (symbol,version) tuples\n+    for dynamic, imported symbols.\n+    '''\n+    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Could not read symbols for %s: %s' % (executable, stderr.strip()))\n+    syms = []\n+    for line in stdout.split('\\n'):\n+        line = line.split()\n+        if len(line)>7 and re.match('[0-9]+:$', line[0]):\n+            (sym, _, version) = line[7].partition('@')\n+            is_import = line[6] == 'UND'\n+            if version.startswith('@'):\n+                version = version[1:]\n+            if is_import == imports:\n+                syms.append((sym, version))\n+    return syms\n+\n+def check_version(max_versions, version):\n+    if '_' in version:\n+        (lib, _, ver) = version.rpartition('_')\n+    else:\n+        lib = version\n+        ver = '0'\n+    ver = tuple([int(x) for x in ver.split('.')])\n+    if not lib in max_versions:\n+        return False\n+    return ver <= max_versions[lib]\n+\n+if __name__ == '__main__':\n+    cppfilt = CPPFilt()\n+    retval = 0\n+    for filename in sys.argv[1:]:\n+        for sym,version in read_symbols(filename, True):\n+            if version and not check_version(MAX_VERSIONS, version):\n+                print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym), version))\n+                retval = 1\n+\n+    exit(retval)\n+\n+"
      }
    ]
  }
]