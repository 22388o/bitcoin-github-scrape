[
  {
    "sha": "e2106229982ef678535d1b7dffc5c57cb8e77e3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjEwNjIyOTk4MmVmNjc4NTM1ZDFiN2RmZmM1YzU3Y2I4ZTc3ZTNm",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-11-06T14:12:16Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-12-10T12:09:30Z"
      },
      "message": "Optimize sending of getheaders when pindexLast is an ancestor of\npindexBestHeader\n\nNeeded since #4468",
      "tree": {
        "sha": "af0b06d8166b63832926cfffd429155daf09f191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af0b06d8166b63832926cfffd429155daf09f191"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2106229982ef678535d1b7dffc5c57cb8e77e3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2106229982ef678535d1b7dffc5c57cb8e77e3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2106229982ef678535d1b7dffc5c57cb8e77e3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2106229982ef678535d1b7dffc5c57cb8e77e3f/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72bf1b3d0962304850a3ef5fe375db4bff1d0a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72bf1b3d0962304850a3ef5fe375db4bff1d0a39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72bf1b3d0962304850a3ef5fe375db4bff1d0a39"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 33,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9c1d4a6d1d89cc3a111579032a7acc5bec6923f8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2106229982ef678535d1b7dffc5c57cb8e77e3f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2106229982ef678535d1b7dffc5c57cb8e77e3f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e2106229982ef678535d1b7dffc5c57cb8e77e3f",
        "patch": "@@ -2047,10 +2047,39 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n-            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n-            // from there instead.\n-            LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n+            //\n+            // Optimize where to fetch the next headers from. Places the last header could be;-\n+            // 1 - neither an ancestor of chainActive.Tip() nor BestHeader. fetch from pindexLast\n+            // 2 - ancestor of chainActive.Tip() and BestHeader. fetch from BestHeader\n+            // 3 - ancestor of BestHeader not chainActive.Tip(). Tip is an ancestor of BestHeader\n+            //     fetch from BestHeader\n+            // 4 - ancestor of chainActive.Tip and BestHeader. Tip is forked from BestHeader\n+            //     fetch from the point where tip forks from BestHeader (since we don't know which fork\n+            //     the other peer is following but can nevertheless assume they don't fork before our fork).\n+            // 5 - ancestor of BestHeader not chainActive.Tip(). Tip is forked from BestHeader.\n+            //     fetch from pindexLast (not BestHeader, given the unusual circumstances)\n+            // 6 - ancestor of chainActive.Tip not BestHeader. Tip is forked from BestHeader.\n+            //     fetch from pindexLast (not Tip, given the unusual circumstances)\n+\n+            CBlockIndex *pindexContinue = pindexLast;\n+            std::string strDesc;\n+            if (LastCommonAncestor(pindexLast, pindexBestHeader) == pindexLast) {\n+                // received header is an ancestor of pindexBestHeader (cases 2, 3, 4, 5)\n+                CBlockIndex *pindexFork = LastCommonAncestor(pindexBestHeader, chainActive.Tip());\n+                if (pindexFork == chainActive.Tip()) {\n+                    // Our current tip is an ancestor of pindexBestHeader\n+                    pindexContinue = pindexBestHeader; // cases 2, 3\n+                    if (pindexLast != pindexBestHeader)\n+                        strDesc += \"best: \";\n+                } else if (LastCommonAncestor(pindexFork, pindexLast) == pindexLast) {\n+                    // received header is an ancestor of where the tip and BestHeader diverges\n+                    pindexContinue = pindexFork; // case 4\n+                    strDesc += \"fork: \";\n+                }\n+            }\n+\n+            LogPrint(\"net\", \"more getheaders (%s%d) to end to peer=%d (startheight:%d)\\n\", strDesc, pindexContinue->nHeight, pfrom->id, pfrom->nStartingHeight);\n+            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexContinue), uint256()));\n         }\n \n         bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());"
      }
    ]
  }
]