[
  {
    "sha": "0122fbab4c340b23ae56173de6c5ab866ba25ab8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTIyZmJhYjRjMzQwYjIzYWU1NjE3M2RlNmM1YWI4NjZiYTI1YWI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-22T02:43:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-22T02:43:58Z"
      },
      "message": "Split SetHDChain into AddHDChain and LoadHDChain\n\nRemove the memonly bool and follow our typical Add and Load pattern.",
      "tree": {
        "sha": "8fbde6abd2086591ecebf24ad6918dd2bedb4f32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fbde6abd2086591ecebf24ad6918dd2bedb4f32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0122fbab4c340b23ae56173de6c5ab866ba25ab8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0122fbab4c340b23ae56173de6c5ab866ba25ab8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0122fbab4c340b23ae56173de6c5ab866ba25ab8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0122fbab4c340b23ae56173de6c5ab866ba25ab8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df303ceb650521dc7b1ba91e0eea383c387a5860",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df303ceb650521dc7b1ba91e0eea383c387a5860",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df303ceb650521dc7b1ba91e0eea383c387a5860"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 20,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9199a843fdea15ddee362aec26edd0ae9674c551",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0122fbab4c340b23ae56173de6c5ab866ba25ab8/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0122fbab4c340b23ae56173de6c5ab866ba25ab8/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=0122fbab4c340b23ae56173de6c5ab866ba25ab8",
        "patch": "@@ -900,20 +900,22 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n     return AddWatchOnly(dest);\n }\n \n-void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n+void LegacyScriptPubKeyMan::LoadHDChain(const CHDChain& chain)\n {\n     LOCK(cs_KeyStore);\n-    // memonly == true means we are loading the wallet file\n-    // memonly == false means that the chain is actually being changed\n-    if (!memonly) {\n-        // Store the new chain\n-        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n-            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n-        }\n-        // When there's an old chain, add it as an inactive chain as we are now rotating hd chains\n-        if (!m_hd_chain.seed_id.IsNull()) {\n-            AddInactiveHDChain(m_hd_chain);\n-        }\n+    m_hd_chain = chain;\n+}\n+\n+void LegacyScriptPubKeyMan::AddHDChain(const CHDChain& chain)\n+{\n+    LOCK(cs_KeyStore);\n+    // Store the new chain\n+    if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    }\n+    // When there's an old chain, add it as an inactive chain as we are now rotating hd chains\n+    if (!m_hd_chain.seed_id.IsNull()) {\n+        AddInactiveHDChain(m_hd_chain);\n     }\n \n     m_hd_chain = chain;\n@@ -1167,7 +1169,7 @@ void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n     CHDChain newHdChain;\n     newHdChain.nVersion = m_storage.CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n     newHdChain.seed_id = seed.GetID();\n-    SetHDChain(newHdChain, false);\n+    AddHDChain(newHdChain);\n     NotifyCanGetAddressesChanged();\n     WalletBatch batch(m_storage.GetDatabase());\n     m_storage.UnsetBlankWalletFlag(batch);"
      },
      {
        "sha": "5b0ccc0ac4a854a78465a11c843be0a1c0c7c4c7",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0122fbab4c340b23ae56173de6c5ab866ba25ab8/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0122fbab4c340b23ae56173de6c5ab866ba25ab8/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=0122fbab4c340b23ae56173de6c5ab866ba25ab8",
        "patch": "@@ -421,8 +421,10 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Generate a new key\n     CPubKey GenerateNewKey(WalletBatch& batch, CHDChain& hd_chain, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n-    /* Set the HD chain model (chain child index counters) */\n-    void SetHDChain(const CHDChain& chain, bool memonly);\n+    /* Set the HD chain model (chain child index counters) and writes it to the database */\n+    void AddHDChain(const CHDChain& chain);\n+    //! Load a HD chain model (used by LoadWallet)\n+    void LoadHDChain(const CHDChain& chain);\n     const CHDChain& GetHDChain() const { return m_hd_chain; }\n     void AddInactiveHDChain(const CHDChain& chain);\n "
      },
      {
        "sha": "7690019b692ac0979a59d104148b7393638a7053",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0122fbab4c340b23ae56173de6c5ab866ba25ab8/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0122fbab4c340b23ae56173de6c5ab866ba25ab8/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0122fbab4c340b23ae56173de6c5ab866ba25ab8",
        "patch": "@@ -540,7 +540,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::HDCHAIN) {\n             CHDChain chain;\n             ssValue >> chain;\n-            pwallet->GetOrCreateLegacyScriptPubKeyMan()->SetHDChain(chain, true);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadHDChain(chain);\n         } else if (strType == DBKeys::FLAGS) {\n             uint64_t flags;\n             ssValue >> flags;"
      }
    ]
  },
  {
    "sha": "d9cd095b5965fc20c09f401370e7ba99446663e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWNkMDk1YjU5NjVmYzIwYzA5ZjQwMTM3MGU3YmE5OTQ0NjY2M2Uz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-22T03:01:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-22T03:01:24Z"
      },
      "message": "Split SetActiveScriptPubKeyMan into Add/LoadActiveScriptPubKeyMan\n\nRemove the memonly bool and follow the Add and Load pattern we use\neverywhere else.",
      "tree": {
        "sha": "bb636e1c40f3fca52652f365987a9d99b396b88d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb636e1c40f3fca52652f365987a9d99b396b88d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9cd095b5965fc20c09f401370e7ba99446663e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9cd095b5965fc20c09f401370e7ba99446663e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9cd095b5965fc20c09f401370e7ba99446663e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9cd095b5965fc20c09f401370e7ba99446663e3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0122fbab4c340b23ae56173de6c5ab866ba25ab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0122fbab4c340b23ae56173de6c5ab866ba25ab8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0122fbab4c340b23ae56173de6c5ab866ba25ab8"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 22,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4d9f41a4afc56bb3e83662dcd95d4181e60ec30c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d9cd095b5965fc20c09f401370e7ba99446663e3",
        "patch": "@@ -1568,7 +1568,7 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n             if (!w_desc.descriptor->GetOutputType()) {\n                 warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n             } else {\n-                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+                pwallet->AddActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n             }\n         }\n "
      },
      {
        "sha": "6ee3149620c27663791ef33eba65f400f2381df0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d9cd095b5965fc20c09f401370e7ba99446663e3",
        "patch": "@@ -4374,25 +4374,28 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n             spk_manager->SetupDescriptorGeneration(master_key, t);\n             uint256 id = spk_manager->GetID();\n             m_spk_managers[id] = std::move(spk_manager);\n-            SetActiveScriptPubKeyMan(id, t, internal);\n+            AddActiveScriptPubKeyMan(id, t, internal);\n         }\n     }\n }\n \n-void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+void CWallet::AddActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n+{\n+    WalletBatch batch(*database);\n+    if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+    }\n+    LoadActiveScriptPubKeyMan(id, type, internal);\n+}\n+\n+void CWallet::LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n {\n     WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n     spk_man->SetInternal(internal);\n     spk_mans[type] = spk_man;\n \n-    if (!memonly) {\n-        WalletBatch batch(*database);\n-        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n-            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n-        }\n-    }\n     NotifyCanGetAddressesChanged();\n }\n "
      },
      {
        "sha": "e55257bd5d19d4dd2144aef5a7a61bf68694a914",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d9cd095b5965fc20c09f401370e7ba99446663e3",
        "patch": "@@ -1252,12 +1252,17 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Instantiate a descriptor ScriptPubKeyMan from the WalletDescriptor and load it\n     void LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc);\n \n-    //! Sets the active ScriptPubKeyMan for the specified type and internal\n+    //! Adds the active ScriptPubKeyMan for the specified type and internal. Writes it to the wallet file\n     //! @param[in] id The unique id for the ScriptPubKeyMan\n     //! @param[in] type The OutputType this ScriptPubKeyMan provides addresses for\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n-    //! @param[in] memonly Whether to record this update to the database. Set to true for wallet loading, normally false when actually updating the wallet.\n-    void SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly = false);\n+    void AddActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n+\n+    //! Loads an active ScriptPubKeyMan for the specified type and internal. (used by LoadWallet)\n+    //! @param[in] id The unique id for the ScriptPubKeyMan\n+    //! @param[in] type The OutputType this ScriptPubKeyMan provides addresses for\n+    //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n+    void LoadActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal);\n \n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();"
      },
      {
        "sha": "7e64ec16e1c94530e061e6a6138ded06c01a44c0",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9cd095b5965fc20c09f401370e7ba99446663e3/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d9cd095b5965fc20c09f401370e7ba99446663e3",
        "patch": "@@ -748,10 +748,10 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n \n     // Set the active ScriptPubKeyMans\n     for (auto spk_man_pair : wss.m_active_external_spks) {\n-        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ false, /* memonly */ true);\n+        pwallet->LoadActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ false);\n     }\n     for (auto spk_man_pair : wss.m_active_internal_spks) {\n-        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true, /* memonly */ true);\n+        pwallet->LoadActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true);\n     }\n \n     // Set the descriptor caches"
      }
    ]
  },
  {
    "sha": "3a9aba21a49a6d80bd187940d5e26893937b6832",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTlhYmEyMWE0OWE2ZDgwYmQxODc5NDBkNWUyNjg5MzkzN2I2ODMy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-22T03:15:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-22T18:59:09Z"
      },
      "message": "Split SetWalletFlags into Add/LoadWalletFlags\n\nRemove memonly bool and follow typical Add and Load pattern used\neverywhere else.",
      "tree": {
        "sha": "7e1609717e04984f8b639a841f6def38a3380320",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e1609717e04984f8b639a841f6def38a3380320"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a9aba21a49a6d80bd187940d5e26893937b6832",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a9aba21a49a6d80bd187940d5e26893937b6832",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a9aba21a49a6d80bd187940d5e26893937b6832",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a9aba21a49a6d80bd187940d5e26893937b6832/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9cd095b5965fc20c09f401370e7ba99446663e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9cd095b5965fc20c09f401370e7ba99446663e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9cd095b5965fc20c09f401370e7ba99446663e3"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ab3b6d9d632fb7aac5d7f8752fb39927ba6401cf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a9aba21a49a6d80bd187940d5e26893937b6832/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a9aba21a49a6d80bd187940d5e26893937b6832/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3a9aba21a49a6d80bd187940d5e26893937b6832",
        "patch": "@@ -1385,19 +1385,28 @@ bool CWallet::IsWalletFlagSet(uint64_t flag) const\n     return (m_wallet_flags & flag);\n }\n \n-bool CWallet::SetWalletFlags(uint64_t overwriteFlags, bool memonly)\n+bool CWallet::LoadWalletFlags(uint64_t flags)\n {\n     LOCK(cs_wallet);\n-    m_wallet_flags = overwriteFlags;\n-    if (((overwriteFlags & KNOWN_WALLET_FLAGS) >> 32) ^ (overwriteFlags >> 32)) {\n+    if (((flags & KNOWN_WALLET_FLAGS) >> 32) ^ (flags >> 32)) {\n         // contains unknown non-tolerable wallet flags\n         return false;\n     }\n-    if (!memonly && !WalletBatch(*database).WriteWalletFlags(m_wallet_flags)) {\n+    m_wallet_flags = flags;\n+\n+    return true;\n+}\n+\n+bool CWallet::AddWalletFlags(uint64_t flags)\n+{\n+    LOCK(cs_wallet);\n+    // We should never be writing unknown onon-tolerable wallet flags\n+    assert(!(((flags & KNOWN_WALLET_FLAGS) >> 32) ^ (flags >> 32)));\n+    if (!WalletBatch(*database).WriteWalletFlags(flags)) {\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n     }\n \n-    return true;\n+    return LoadWalletFlags(flags);\n }\n \n int64_t CWalletTx::GetTxTime() const\n@@ -3759,7 +3768,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // ensure this wallet.dat can only be opened by clients supporting HD with chain split and expects no default key\n         walletInstance->SetMinVersion(FEATURE_LATEST);\n \n-        walletInstance->SetWalletFlags(wallet_creation_flags, false);\n+        walletInstance->AddWalletFlags(wallet_creation_flags);\n \n         // Only create LegacyScriptPubKeyMan when not descriptor wallet\n         if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {"
      },
      {
        "sha": "046b79c3075fb71069308a3cd34063ab112b02ca",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a9aba21a49a6d80bd187940d5e26893937b6832/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a9aba21a49a6d80bd187940d5e26893937b6832/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3a9aba21a49a6d80bd187940d5e26893937b6832",
        "patch": "@@ -1174,7 +1174,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     /** overwrite all flags by the given uint64_t\n        returns false if unknown, non-tolerable flags are present */\n-    bool SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n+    bool AddWalletFlags(uint64_t flags);\n+    /** Loads the flags into the wallet. (used by LoadWallet) */\n+    bool LoadWalletFlags(uint64_t flags);\n \n     /** Determine if we are a legacy wallet */\n     bool IsLegacy() const;"
      },
      {
        "sha": "8b103ba5434c6f980619ad771d77317b99849ac4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a9aba21a49a6d80bd187940d5e26893937b6832/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a9aba21a49a6d80bd187940d5e26893937b6832/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3a9aba21a49a6d80bd187940d5e26893937b6832",
        "patch": "@@ -544,7 +544,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::FLAGS) {\n             uint64_t flags;\n             ssValue >> flags;\n-            if (!pwallet->SetWalletFlags(flags, true)) {\n+            if (!pwallet->LoadWalletFlags(flags)) {\n                 strErr = \"Error reading wallet database: Unknown non-tolerable wallet flags found\";\n                 return false;\n             }"
      }
    ]
  }
]