laanwj,2020-05-26 12:50:29,"I agree that having separate Add/Load functions instead of a confusing boolean argument improves understandability of the code quite a bit.\nCode review ACK f123374a661d54e091108e490f8c4cc9ebc0d251",https://github.com/bitcoin/bitcoin/pull/19046#issuecomment-634004209,634004209,
Empact,2020-05-26 21:08:25,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19046#issuecomment-634280148,634280148,
DrahtBot,2020-05-27 20:10:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Use shared pointers only in validation interface by bvbfan)\n* #16546 (External signer support - Wallet Box editio",https://github.com/bitcoin/bitcoin/pull/19046#issuecomment-634913281,634913281,
Empact,2020-05-26 21:11:28,"In the existing code, on Add, the `contains unknown non-tolerable wallet flags` test and bail will occur first and prevent writing the database. With this change, the values are written, and the failure is only identified after, which seems improper.",https://github.com/bitcoin/bitcoin/pull/19046#discussion_r430710261,430710261,src/wallet/wallet.cpp
Empact,2020-05-26 21:12:27,Perhaps add a test for this case?,https://github.com/bitcoin/bitcoin/pull/19046#discussion_r430710719,430710719,src/wallet/wallet.cpp
achow101,2020-06-08 15:49:20,That failure is only relevant when loading a wallet from disk. `AddWalletFlags` is only used internally in wallet creation; we would never add flags that we don't know.,https://github.com/bitcoin/bitcoin/pull/19046#discussion_r436810318,436810318,src/wallet/wallet.cpp
jnewbery,2020-06-22 14:43:05,I agree that this seems less safe than the existing code. Is it possible to maintain the current order of checking first and then writing to disk?,https://github.com/bitcoin/bitcoin/pull/19046#discussion_r443611201,443611201,src/wallet/wallet.cpp
ryanofsky,2020-06-22 15:01:01,"> I agree that this seems less safe than the existing code.\n\nIn current code m_wallet_flags can be updated even if database write fails leading to inconsistency between disk and memory state and possibility for data inconsistent with flags to subseqently be written to wallet. New code writing to disk first, memory second, prevents this type of issue and would seem to be more safe. What's the s",https://github.com/bitcoin/bitcoin/pull/19046#discussion_r443624565,443624565,src/wallet/wallet.cpp
jnewbery,2020-06-22 15:25:58,"If this function is called with an unknown wallet flag, it'll be written to disk and then won't be applied to the in-memory wallet (and won't be able to be loaded later), which is also a data inconsistency.\n\nThe unknown flag check was added to protect when loading a wallet from a newer version on an older version, so I think your concern is more valid. I don't see any harm in a sanity assert t",https://github.com/bitcoin/bitcoin/pull/19046#discussion_r443641850,443641850,src/wallet/wallet.cpp
achow101,2020-06-22 18:59:57,I've added an assert in `AddWalletFlags` to handle that case.,https://github.com/bitcoin/bitcoin/pull/19046#discussion_r443764318,443764318,src/wallet/wallet.cpp
jnewbery,2020-06-22 19:39:06,s/onon/non/,https://github.com/bitcoin/bitcoin/pull/19046#discussion_r443783101,443783101,src/wallet/wallet.cpp
ryanofsky,2020-06-22 20:01:36,"In commit ""Split SetWalletFlags into Add/LoadWalletFlags"" (3a9aba21a49a6d80bd187940d5e26893937b6832)\n\nIf you wind up updating check may be more readable as `assert(((flags & KNOWN_WALLET_FLAGS) >> 32) == (flags >> 32))`",https://github.com/bitcoin/bitcoin/pull/19046#discussion_r443793690,443793690,src/wallet/wallet.cpp
achow101,2020-06-25 15:52:08,Oops. I'll fix that if I have to push again.,https://github.com/bitcoin/bitcoin/pull/19046#discussion_r445661428,445661428,src/wallet/wallet.cpp
