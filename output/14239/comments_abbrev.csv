practicalswift,2018-09-17T13:38:21Z,@fanquake Refactoring? :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-422019737,422019737,
MarcoFalke,2018-09-17T18:56:09Z,Concept ACK. Could enable the functional tests in travis in this commit?,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-422130191,422130191,
practicalswift,2018-09-17T19:03:27Z,@MarcoFalke Unfortunately it turned out that these were not the only undefined behaviours we're triggering in the functional tests. I'll submit a separate PR that enables the functional tests with suppressions for everything we're triggering :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-422132662,422132662,
practicalswift,2018-09-27T20:05:37Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-425225135,425225135,
practicalswift,2018-10-01T07:00:38Z,"@fanquake Is refactoring really the correct label for this PR?\n\nDefinitions:\n1. Code refactoring is defined as the process of restructuring existing computer code without changing its external behaviour. \n2. Triggering undefined behaviour is defined as executing computer code whose behaviour is not prescribed by the language specification to which the code adheres, for the current state of",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-425807696,425807696,
practicalswift,2018-10-09T13:05:33Z,@fanquake Ping? :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-428183932,428183932,
practicalswift,2018-10-18T21:45:06Z,"@fanquake I'm afraid the ""refactoring"" label is causing the UB:s (this and others) to go under the radar and thus remain unfixed.\n\nPlease consider giving the UB PR:s a more appropriate label :-)  Please at least talk to me my fellow contributor – I'm your friend :-)",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-431174782,431174782,
MarcoFalke,2018-11-05T20:11:11Z,Could remove the suppression from the file in contrib?,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-436018179,436018179,
practicalswift,2018-11-06T09:00:21Z,"Added commit 8ed2af7ca980345995ed4115570e4677ed0b2f47 which remove the UBSan suppressions for the fixed files.\n\nPlease re-review :-)",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-436178399,436178399,
DrahtBot,2018-11-08T21:49:20Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-437168390,437168390,
practicalswift,2018-11-23T15:58:06Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-441274776,441274776,
practicalswift,2018-11-24T11:49:34Z,@promag Good points! Now addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-441362281,441362281,
practicalswift,2019-01-15T19:58:19Z,@MarcoFalke Could this one get a release milestone? :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-454529744,454529744,
Empact,2019-01-30T22:25:18Z,"Rather than `if (pass_bucket_sum > 0 && fail_bucket_sum > 0)`, how about something like: `pass_bucket_sum ? 100 * passBucket.withinTarget / pass_bucket_sum : -1` or similar with a string value result such as ""N/A"".?",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-459134592,459134592,
practicalswift,2019-01-31T08:47:24Z,@Empact Fixed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-459263631,459263631,
Empact,2019-01-31T14:43:35Z,utACK https://github.com/bitcoin/bitcoin/commit/914553d840b487b58f3764f4f5b27a4a3d14242f,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-459369203,459369203,
promag,2019-01-31T15:32:16Z,"utACK 914553d.\n\nBut I wonder if logs with -1 matter at all. If not then it could be avoided by incrementing the denominator, like `sum = a + b + 1` and then the ternary can be removed..",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-459387629,459387629,
laanwj,2019-02-06T15:54:01Z,"> But I wonder if logs with -1 matter at all. If not then it could be avoided by incrementing the denominator, like `sum = a + b + 1` and then the ternary can be removed..\n\nAgree, I'm not sure logging `-1` is so great here. The meaning of this would be unclear to the user.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-461074889,461074889,
practicalswift,2019-02-06T16:09:21Z,@laanwj @promag Makes sense! I'll revert to the original version :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-461081020,461081020,
Empact,2019-02-07T12:39:29Z,"How about keeping the log message in those cases and adapting it to be more clear than `-1`, e.g. `""N/A""`?",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-461403169,461403169,
practicalswift,2019-02-07T21:28:37Z,"Now reverted to the original version. Please re-review.\n\n@Empact That will make the diff unnecessarily large since `%d` cannot be used for `""N/A""`. I think the current version is simpler and therefore preferred :-)",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-461602539,461602539,
practicalswift,2019-02-07T21:43:00Z,@promag Feedback addressed. Please re-review.,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-461606710,461606710,
Empact,2019-02-07T22:27:45Z,"I’m not sure it’s better to not have undefined behavior while also not having a logging statement in those cases, than to propagate the available information, with undefined behavior.\n\nIn fairness I’m also not clear on what situations the undefined behavior is associated with and how valuable the information is in those cases.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-461619195,461619195,
gmaxwell,2019-02-10T16:17:14Z,"Floating point division by zero is well defined  (by IEEE 754, see the C standard Annex F).  The justification given for this change is incorrect.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462147736,462147736,
practicalswift,2019-02-10T20:13:29Z,"@gmaxwell \n\nThe value representation of floating-point types is implementation-defined.\n\nFor an IEEE 754 implementation (`std::numeric_limits<double>::is_iec559 == true`), floating point division by zero is well defined.\n\nOtherwise it is undefined.\n\nPlease correct me if I'm wrong.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462167702,462167702,
moneyball,2019-02-11T06:31:19Z,"I am not familiar with the code base so take this with a grain of salt. I was curious about the change in validation.cpp though, and I thought another pair of eyes cannot hurt. From my observation:\n1. A search of the repo indicates nBlocksTotal is only referenced in validation.cpp.\n2. nBlocksTotal is only used in 2 functions, ConnectBlock and ConnectTip.\n3. nBlocksTotal is initialized to 0, ",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462229681,462229681,
gmaxwell,2019-02-11T20:26:11Z,NAK,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462481176,462481176,
practicalswift,2019-02-11T20:34:08Z,@gmaxwell Why?,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462483711,462483711,
sipa,2019-02-11T20:41:59Z,"@gmaxwell In C++11, division by zero is undefined behavior. Of course all architectures we currently support very likely follow IEEE 754 which makes it well-defined, so calling this a fix for actual UB is an exaggeration.\n\nStill, I think it's an improvement to the codebase in my opinion.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462486269,462486269,
gmaxwell,2019-02-11T20:43:22Z,"Because the behaviour isn't undefined. If you cannot manage to get the basis motivation for the change factually correct what confidence should we have that the change does not break consensus or somehow introduce a vulnerability?    Given that the PR doesn't give a (valid) justification for an improvement to the software, it isn't clear to me that it's worth review efforts to determine that its a",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462486730,462486730,
practicalswift,2019-02-11T20:46:54Z,"@gmaxwell You didn't see my reply from yesterday? :-)\n\n> The value representation of floating-point types is implementation-defined.\n> \n> For an IEEE 754 implementation (`std::numeric_limits<double>::is_iec559 == true`), floating point division by zero is well defined.\n> \n> Otherwise it is undefined.\n> \n> Please correct me if I'm wrong.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462487799,462487799,
sipa,2019-02-11T20:50:00Z,"@practicalswift Please, don't turn a discussion about language semantics into an absolute what is UB and what not.\n\nI am fairly confident that on all platforms we support, this is not UB, as they follow IEEE 754.\n\nIt may be desirable to strictly follow C++11 here, but that's a code quality discussion, not one about software bugs.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462488813,462488813,
practicalswift,2019-02-11T20:52:57Z,"@sipa I simply refuted @gmaxwell's technically incorrect claim. I'm allowed intellectual self-defence, right? :-)",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462489817,462489817,
sipa,2019-02-11T20:54:23Z,@practicalswift I don't see any incorrect claim or refutation of that. I only see a disagreement about what language requirements to assume.,https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462490273,462490273,
practicalswift,2019-02-11T20:55:58Z,@sipa That was the point I made yesterday :-),https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462490765,462490765,
gmaxwell,2019-02-11T21:00:46Z,"@sipa In C++11, while allowing all possible implementations and ignoring language annexes, assuming an ""int"" can represent a value outside of [-32768, 32767] is undefined behaviour.  Do you intend to accept PRs going through the codebase to fix all code relative to that?\n\nWith these change the codebase is still not unconditionally correct or safe on some hypothetical system which has arbitrary",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462492378,462492378,
sipa,2019-02-11T21:14:19Z,"@practicalswift I understand you're on a crusade against anything that smells like UB under the strictest definitions of the language. I support improvements in that regard, but discussions like this only piss people off.\n\nWe're writing software for real systems, and even have the luxury of rather tight control over what architectures are supported. There are plenty of assumptions made that re",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462496750,462496750,
sipa,2019-02-11T21:48:08Z,"Alternative suggestion:\n\nAdd a `static_assert(std::numeric_limits<double>::is_iec559 == true)` to the code, and remove the explicit enabling of float division by zero in ubsan.",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462508012,462508012,
practicalswift,2019-02-11T22:04:14Z,"@sipa Yes, that's a good idea -- I thought about taking that route too. As long as we're verifying the assumptions we're making I'm happy (obviously).",https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462513268,462513268,
promag,2018-09-17T21:47:32Z,I don't think `nBlocksTotal` can be zero? So at this point we could just `assert(nBlocksTotal > 0)` and ignore these remaining changes.,https://github.com/bitcoin/bitcoin/pull/14239#discussion_r218239106,218239106,src/validation.cpp
promag,2018-09-17T22:00:20Z,Can any of this sums be zero? I guess no otherwise this was raised before. Just assert? Same below in wallet.cpp.,https://github.com/bitcoin/bitcoin/pull/14239#discussion_r218241922,218241922,src/policy/fees.cpp
practicalswift,2018-09-18T04:28:30Z,"`nBlocksTotal` can be zero: this UB is triggered when running the functional tests.\n\nAs said in the PR description:\n\n> UBSAN in Travis running the test suite would have catched all three of these.\n\n:-)",https://github.com/bitcoin/bitcoin/pull/14239#discussion_r218295936,218295936,src/validation.cpp
practicalswift,2018-09-18T04:29:04Z,"Yes they can be zero: this UB is triggered when running the functional tests.\n\nAs said in the PR description:\n\n> UBSAN in Travis running the test suite would have catched all three of these.\n\n:-)",https://github.com/bitcoin/bitcoin/pull/14239#discussion_r218296014,218296014,src/policy/fees.cpp
promag,2018-11-23T16:24:03Z,"I have 2 suggestions:\n 1. could save sum, which also helps understanding the condition?\n 2. use `>` instead of `!=`?\n\nSo:\n```cpp\nauto pass_bucket_sum = passBucket.totalConfirmed + passBucket.inMempool + passBucket.leftMempool;\nif (pass_bucket_sum > 0 && ...) {\n      ...\n      100 * passBucket.withinTarget / pass_bucket_sum,\n      ...\n}\n```",https://github.com/bitcoin/bitcoin/pull/14239#discussion_r235985982,235985982,src/policy/fees.cpp
promag,2019-02-07T21:36:14Z,"nit, could specify type instead of auto.",https://github.com/bitcoin/bitcoin/pull/14239#discussion_r254878241,254878241,src/policy/fees.cpp
laanwj,2019-02-10T15:25:26Z,"uuuuhm, what is this change? I don't think it's supposed to touch validation at all!\nI think you're doing an accidental reversion here.",https://github.com/bitcoin/bitcoin/pull/14239#discussion_r255342060,255342060,src/validation.cpp
practicalswift,2019-02-10T16:07:07Z,"See #15283 for a description of the problem:\n\n> During the loading of the genesis block, the bench print lines in ConnectTip divide by zero due to early return in ConnectBlock.\n\nDo you mean it has been fixed elsewhere since being discussed in #15283?",https://github.com/bitcoin/bitcoin/pull/14239#discussion_r255343699,255343699,src/validation.cpp
gmaxwell,2019-02-10T16:23:05Z,"nBlocksTotal appears to be only referenced otherwise from bench output. And I assume what this is trying to do is avoid the genesis block early terminate from leaving the bench output with a zero.  I believe this is a reasonable change, though it will make bench results slightly incomparable (with small numbers of blocks processed) across versions.\n\nThis change would have been better done-- ea",https://github.com/bitcoin/bitcoin/pull/14239#discussion_r255344277,255344277,src/validation.cpp
