DrahtBot,2019-07-10 19:47:25,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17941 (depends: update to Boost 1.72 by Sjors)\n* #15382 (util: add runCommandParseJSON by Sjors)\n\nIf you consider this",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-510202040,510202040,
Sjors,2019-07-11 13:32:06,"Adding `capnp` probably deserves it's own PR, but at least a separate commit.\n\nWhat is `native_boost`?\n\nOn macOS, I looks like I need to do more than just `brew install cmake`. See [flood of errors](https://gist.github.com/Sjors/bcc73853dd80d16402c2e115dfae8df0).",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-510486686,510486686,
ryanofsky,2019-07-11 14:30:45,"> On macOS, I looks like I need to do more than just brew install cmake. See flood of errors.\n\nThanks for the log! It looks like the error is:\n\n```\n#error ""This code requires C++14. Either your compiler does not support it or it is not enabled.""\n```\n\nSo probably what's happening is that for whatever reason my compiler defaults to c++14, while your compiler defaults to an older c++ ",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-510510298,510510298,
Sjors,2019-07-11 15:16:30,"See also #13356 for C++14 discussion. However, as long as multiprocess is optional, I think it's more future proof to use the C++14, with the latest `capnp` version, and fix the macOS build.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-510529532,510529532,
ariard,2019-07-26 22:46:13,"For others reviewers, after talking with Russ, my mistake was not to use depends prefix as described in `depends/README.md`. Will give it another try after updates.\n\n",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-515621097,515621097,
ryanofsky,2019-08-20 15:24:03,"re: http://gnusha.org/bitcoin-builds/2019-08-16.log\n\n> \<dongcarl> cfields: I think the boostrap part of `boost` is actually ""native"", as in, should be moved to a `boost_native` package like the native part of `protobuf` was... Does that ring somewhat true to you?\n\n@dongcarl this PR adds a [native_boost](https://github.com/ryanofsky/bitcoin/blob/pr/ipc-build/depends/packages/native_boost.m",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-523065589,523065589,
fanquake,2019-08-23 03:35:39,"I depends built, compiled and played around with this (macOS). Going to re-read all the discussion in #10102.\n\nI'm also going to extract https://github.com/bitcoin/bitcoin/pull/16367/commits/7149b1ae67f0e3508407f1b668b11ee8e7456ab3 and https://github.com/bitcoin/bitcoin/pull/16367/commits/a295b9decb14534a98f6c993df9a9379ce752aeb into a separate PR. They are clear improvements, and will likely ",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-524159831,524159831,
ryanofsky,2020-02-25 19:50:56,"Rebased 6a84d0553f712a3e228fd697d3a831d21f210fa5 -> 71aa1a2c9be6ded8daccf6e8af318b82f3a0f0ca ([`pr/ipc-build.13`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.13) -> [`pr/ipc-build.14`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.14), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-build.13-rebase..pr/ipc-build.14)) due to conflict with #18166\n",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-591036896,591036896,
Sjors,2020-02-27 17:55:46,"I'm unable to build depends on macOS 10.15.3: `make MULTIPROCESS=1` results in `A C++ library with support for C++11 features is required`, see [log](https://gist.github.com/Sjors/7570fd3d67238b6e1dbdacaeb0a7fb20#file-make-depends-log) (Apple clang version 11.0.0 (clang-1100.0.33.17))\n\n",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-592093081,592093081,
Sjors,2020-02-27 19:28:20,"Concept ACK. I was able to build with Ubuntu and depends. I'll try Ubuntu and libmultiprocess  install later, as well as macOS.\n\nhttps://github.com/chaincodelabs/libmultiprocess/pull/25 lets us drop boost_native from this PR which is nice (we should gracefully detect missing c++17 support in that case).",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-592135865,592135865,
ryanofsky,2020-03-04 01:28:55,"re: https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-592093081\n\n> I'm unable to build depends on macOS 10.15.3: `make MULTIPROCESS=1` results in `A C++ library with support for C++11 features is required`, see [log](https://gist.github.com/Sjors/7570fd3d67238b6e1dbdacaeb0a7fb20#file-make-depends-log) (Apple clang version 11.0.0 (clang-1100.0.33.17))\n\nThe same ""configure: error: *",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-594265604,594265604,
ryanofsky,2020-03-04 15:28:22,"I can reproduce the mac depends problem independently without bitcoin or depends:\n\n```bash\n$ echo '#include <stdlib.h>' > test.cpp\n$ /Library/Developer/CommandLineTools/usr/bin/clang++ -c test.cpp\nIn file included from test.cpp:1:\n/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h:94:15: fatal error: 'stdlib.h' file not found\n#include_next <stdlib.h>\n              ^~~~",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-594600985,594600985,
ryanofsky,2020-03-04 15:43:56,"@Sjors, the following change gets past the reported mac os problem https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-592093081: \n\n```diff\ndiff --git a/depends/builders/darwin.mk b/depends/builders/darwin.mk\nindex eb587fca890..69c394ec1db 100644\n--- a/depends/builders/darwin.mk\n+++ b/depends/builders/darwin.mk\n@@ -1,5 +1,5 @@\n-build_darwin_CC:=$(shell xcrun -f clang)\n-bui",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-594613228,594613228,
hebasto,2020-03-05 11:01:55,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-595169225,595169225,
hebasto,2020-03-05 17:25:29,"From [Capâ€™n Proto docs](https://capnproto.org/install.html#supported-compilers):\n> The minimum versions are:\n>    - GCC 4.9\n>    - Clang 3.5\n\n[Our requirements](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) are:\n- GCC 4.8+\n- Clang 3.3+\n\nCould this be an issue?",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-595349319,595349319,
hebasto,2020-03-05 18:14:03,"FWIW, with applied diff:\n```diff\ndiff --git a/src/Makefile.qt.include b/src/Makefile.qt.include\nindex c5da67b0e..7924917d1 100644\n--- a/src/Makefile.qt.include\n+++ b/src/Makefile.qt.include\n@@ -312,7 +312,7 @@ if TARGET_WINDOWS\n endif\n bitcoin_qt_common_ldadd = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n-bitcoin_qt_common_ldadd += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_W",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-595371624,595371624,
theuni,2020-03-05 19:03:47,"> @Sjors, the following change gets past the reported mac os problem [#16367 (comment)](https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-592093081):\n> \n> ```diff\n> diff --git a/depends/builders/darwin.mk b/depends/builders/darwin.mk\n> index eb587fca890..69c394ec1db 100644\n> --- a/depends/builders/darwin.mk\n> +++ b/depends/builders/darwin.mk\n> @@ -1,5 +1,5 @@\n> -build_darw",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-595393546,595393546,
Sjors,2020-03-06 17:39:15,"I can build 04bec8d2844e0cd2e09a62b21b006292f33f8093 on macOS now, with `capnp` 0.7.0 via Homebrew and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) installed with its latest macOS fix. I'll try again once the boost obliteration from https://github.com/chaincodelabs/libmultiprocess/pull/25 is used here.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-595880087,595880087,
Sjors,2020-03-09 11:58:45,"Copying my earlier inline comment, since I can hardly find it:\n\nNow that `native_libmultiprocess` doesn't need `boost::optional`, do you still need to add `native_boost`? If you do need it, maybe make that a separate commit.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-596484337,596484337,
ryanofsky,2020-03-09 15:03:13,"> Copying my earlier inline comment, since I can hardly find it:\n> \n> Now that `native_libmultiprocess` doesn't need `boost::optional`, do you still need to add `native_boost`? If you do need it, maybe make that a separate commit.\n\nThe three main commits in the is PR are adding (1) autotools (2) travis and (3) depends support for libmultiprocess, and there are also two smaller commits with",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-596585996,596585996,
ryanofsky,2020-03-09 16:32:28,"Updated 04bec8d2844e0cd2e09a62b21b006292f33f8093 -> 1f9a2699a3e4b6ccdf4912600ccfdbf0c8eb20a4 ([`pr/ipc-build.18`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.18) -> [`pr/ipc-build.19`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.19), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-build.18..pr/ipc-build.19)) just switching to `$DEPENDS_DIR` instead of usin",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-596636530,596636530,
hebasto,2020-03-23 18:07:12,"re-ACK ac0f2fb1095d40b3a851150f38199fc2966b546f, since previous [review](https://github.com/bitcoin/bitcoin/pull/16367#pullrequestreview-370794394):\n- `$TRAVIS_BUILD_DIR/depends` --> `$DEPENDS_DIR`\n- `libmultiprocess` updated to https://github.com/chaincodelabs/libmultiprocess/tree/78f2f75d4722c42988988efd2b0074d3ec64099e",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-602766802,602766802,
DrahtBot,2020-03-24 23:17:22,<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 97b0687501cee77a9170f9e288755a5d268e9bd4<br>(master) | commit 6027e5db1301c34630ab80753fbbf122287f046f<br>(master and this pull) |\n|--|--|--|\n| bitcoin-0.19.99-aarch64-linux-gnu-debug.tar.gz | [`7260c91322d82300...`](https://drahtbot.space/gitian/bitcoin/bitcoin/97b0687501cee77a9170f9e288755a5d268e9bd4/bitcoin-0.19.99-,https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-603553669,603553669,
ryanofsky,2020-03-25 14:07:07,"Updated b53cf5a3f73ecdd57e4b421f5cb26bfe175868a6 -> 06d2f9128a4f5144cc459e04b7b6d2ab3316b105 ([`pr/ipc-build.21`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.21) -> [`pr/ipc-build.22`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.22), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-build.21..pr/ipc-build.22)) to fix link errors building `bitcoin-wallet`:\n",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-603859167,603859167,
DrahtBot,2020-03-28 09:20:22,<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 7f9dedb22dcd9550ca525c0e35fec38b2d59e029<br>(master) | commit c002ad809b59aa8ce567800873070885f0ccdb97<br>(master and this pull) |\n|--|--|--|\n| bitcoin-0.19.99-aarch64-linux-gnu-debug.tar.gz | [`8aa34845a916014d...`](https://drahtbot.space/gitian/bitcoin/bitcoin/7f9dedb22dcd9550ca525c0e35fec38b2d59e029/bitcoin-0.19.99-,https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-605418034,605418034,
hebasto,2020-03-28 20:22:48,"Tested 06d2f9128a4f5144cc459e04b7b6d2ab3316b105 on Linux Mint 19.3 with depends.\n\nYes, it builds successfully, but...\n\n> > Why is LIBMULTIPROCESS_LIBS neeeded for the single-binary `bitcoind`?\n>\n> It's not needed, removed entirely from this PR\n\nIt seems questionable for me not using `LIBMULTIPROCESS_LIBS` and `LIBMULTIPROCESS_CFLAGS` in `src/Makefile.am` entirely, as `Libs` and `Cf",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-605514556,605514556,
ryanofsky,2020-04-06 15:45:20,"Rebased 06d2f9128a4f5144cc459e04b7b6d2ab3316b105 -> b919efadff3d0393f4a8c3c1dc735f7ac5c665bb ([`pr/ipc-build.22`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.22) -> [`pr/ipc-build.23`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-build.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-build.22-rebase..pr/ipc-build.23)) due to conflict with #18514\n",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-609874468,609874468,
ryanofsky,2020-04-06 15:56:29,"re: https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-605514556\n\n> It seems questionable for me not using `LIBMULTIPROCESS_LIBS`\n\nThe point of this PR is to reduce the size and review burden of #10102. In order for that to be possible and to not do everything in a single giant PR, I need to be able to make smaller PRs (listed [here](https://github.com/bitcoin/bitcoin/projects/10))",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-609881081,609881081,
hebasto,2020-04-06 19:20:56,"re-ACK b919efadff3d0393f4a8c3c1dc735f7ac5c665bb, rebased only since my [previous](https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-605514556) review.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-609987699,609987699,
theuni,2020-04-10 22:28:56,"Uh, was this actually ready to go in? Have we determined for sure that this is the approach we want? Has libmultiprocess been well-reviewed?\n\nMaybe I missed the discussion, but I thought this was still at the RFC stage.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612246152,612246152,
ryanofsky,2020-04-10 22:35:49,"> Uh, was this actually ready to go in? Have we determined for sure that this is the approach we want? Has libmultiprocess been well-reviewed?\n\nDefinitely not reviewed enough to be turned on. This PR is just adding options to build with it which are off by default and marked experimental.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612248459,612248459,
MarcoFalke,2020-04-10 22:37:15,"> Have we determined for sure that this is the approach we want?\n\n@theuni No, we haven't. Multiprocess is experimental and turned off by default. We have 6 months to come up with a better solution or revert it before the 0.21.0 release.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612248972,612248972,
theuni,2020-04-10 22:46:14,"@MarcoFalke Well it requires c++17, so it won't fit into 0.21.0 with the schedule we've come up with iirc.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612251840,612251840,
MarcoFalke,2020-04-10 23:13:55,"0.21.0 releases are planned to be built with C++17, and the multiprocess build is disabled by default. Not to mention that this doesn't include a user-visible feature, so there is nothing to ship in either case.\n\nThe changes here add a build skeleton for the eventual multiprocess goal and some ci files to have it run on travis.\n\nSome more context from IRC for archival purposes:\n\n```\n",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612260496,612260496,
ryanofsky,2020-04-10 23:14:52,"> @MarcoFalke Well it requires c++17, so it won't fit into 0.21.0 with the schedule we've come up with iirc.\n\nI'm little confused about this comment. What's the issue with c++17? Requirements to build bitcoin aren't changed by this PR. This PR adds a new `--enable-multiprocess` configure option and new `MULTIPROCESS=1` depends option. Only these new options which didn't exist before require c+",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612260745,612260745,
MarcoFalke,2020-04-10 23:20:31,"> It would be possible to have c++11 support if neccessary, too\n\nC++17 will most likely be in Bitcoin Core before multiprocess is enabled by default, so I don't think effort should be put into C++11 support.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612262174,612262174,
MarcoFalke,2020-04-10 23:26:04,"Further discussion about reverting the changes now:\n\n\n```\n[19:18] <MarcoFalke> Is there anything to do before next weeks meeting? Right now it would be a clean git revert and I think everyone would be ok with reverting it until at least next week's meeting.\n[19:19] <cfields> MarcoFalke: up to you. I feel heard either way :)\n[19:20] <ryanofsky> either way's fine with me too\n[19:20] <M",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612263619,612263619,
jnewbery,2020-04-12 15:47:51,"> Some more context from IRC for archival purposes:\n\n> Further discussion about reverting the changes now:\n\nWhere is all this discussion taking place? I can't find it in my local #bitcoin-core-dev log, and I don't see it in http://www.erisian.com.au/bitcoin-core-dev/ either",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612636175,612636175,
fanquake,2020-04-12 23:56:21,"> Where is all this discussion taking place?\n\n@jnewbery It's happening in the `#bitcoin-builds` channel.  Logs available here: http://gnusha.org/bitcoin-builds/.",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-612694636,612694636,
ryanofsky,2020-04-16 18:01:05,"This PR, which was reverted in #18588, is a [proposed meeting topic](http://www.erisian.com.au/bitcoin-core-dev/log-2020-04-10.html#l-577). Background in https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Process-Separation\n\nTopic could be broad, but two questions I'd like to get input on are:\n\n1. What should steps and requirements be for moving [chaincodelabs/libmultiprocess](https://gi",https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-614806918,614806918,
MarcoFalke,2019-07-10 18:09:44,"Why is this changed?\n\nWe already export the PATH two lines below, so setting `BITCOIND=bitcoin-node` should be sufficient",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r302202806,302202806,test/functional/test_framework/test_framework.py
ryanofsky,2019-07-10 19:09:33,"Oh, I didn't know about the PATH feature, so I'll revert this.\n\nI changed this to get `BITCOIND=src/bitcoin-node test/functional/test_runner.py` not to fail, but I should probably take advantage of the PATH setting and change `BITCOIND=src/bitcoin-node` to `BITCOIND=bitcoin-node` instead.",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r302227272,302227272,test/functional/test_framework/test_framework.py
Sjors,2019-07-11 13:45:48,Is this an unrelated improvement?,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r302551008,302551008,depends/packages/boost.mk
ryanofsky,2019-07-11 14:05:28,"It is related. I do think it's an improvement to not use our internal package name in a tarball URL that's generated and hosted by a third party and we don't control. But this change is actually needed to make the build work.\n\nSpecifically, this is needed to make native_boost package work, since it derives from the boost package but has a different package name. The native_boost package is a n",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r302561460,302561460,depends/packages/boost.mk
ariard,2019-07-25 18:21:22,nit: bitcoin-wallet has already its own comment below,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r307436913,307436913,src/Makefile.am
ariard,2019-07-25 18:51:23,Could libmultiprocess be a subtreee instead of a dependency ? What's the rational (not everyone want multi-process I guess but boost and libevent are also there and seems mandatory to me) ?,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r307449746,307449746,depends/README.md
ryanofsky,2019-07-25 19:58:10,"> Could libmultiprocess be a subtree instead of a dependency ? What's the rational (not everyone want multi-process I guess but boost and libevent are also there and seems mandatory to me) ?\n\nFew things here:\n\n- Libmultiprocess is a code generation tool (`mpgen`) in addition to a library (`libmultiprocess.a`), so to support cross compilation, `mpgen` has to be built for the build machine a",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r307474909,307474909,depends/README.md
ariard,2019-07-26 22:46:19,"Thanks for the great explication, bookmarked!",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r307931771,307931771,depends/README.md
dongcarl,2019-10-29 21:15:28,Perhaps it's cleaner to inherit from the `native` package like you did for `capnp` and `libmultiprocess`? Maybe I'm missing something here though.,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340329339,340329339,depends/packages/boost.mk
dongcarl,2019-10-29 21:18:33,Curious: where is this used?,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340330704,340330704,ci/test/06_script_b.sh
dongcarl,2019-10-29 21:22:19,Curious: which package recipe will write CMAKE modules to the prefix? Are they used by other depends packages or by the non-depends Bitcoin build?,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340332266,340332266,depends/funcs.mk
dongcarl,2019-10-29 21:28:16,The last `$(LIBBITCOIN_SERVER)` is probably unneeded...,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340334676,340334676,src/Makefile.qt.include
dongcarl,2019-10-29 21:35:11,The last `$(LIBBITCOIN_COMMON)` is probably unneeded...,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340337314,340337314,src/Makefile.qt.include
ryanofsky,2019-10-29 21:53:48,"> Curious: where is this used?\n\nThe `capnp` package installs dynamic libraries, so this is needed to make them load on travis. I guess variable probably wasn't necessary before because our other depends packages link everything statically. I'm actually not sure if static linking is a requirement of our packaging process, or just something we do for convenience. I can look into configure flags ",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340344456,340344456,ci/test/06_script_b.sh
ryanofsky,2019-10-29 21:55:07,"> Curious: which package recipe will write CMAKE modules to the prefix? Are they used by other depends packages or by the non-depends Bitcoin build?\n\n`capnp` packages write cmake modules and `libmultiprocess` packages use them to locate `capnp`",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340344943,340344943,depends/funcs.mk
ryanofsky,2019-10-29 22:12:03,"> Perhaps it's cleaner to inherit from the `native` package like you did for `capnp` and `libmultiprocess`? Maybe I'm missing something here though.\n\nThat'd be another approach. I wouldn't mind adding that, but it would make the change to the boost package here a little bigger and less minimal than actually needed for the PR.\n\nAlso, I do think the change here is an improvement by itself. I",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340350539,340350539,depends/packages/boost.mk
ryanofsky,2019-10-29 22:16:49,"> The last `$(LIBBITCOIN_COMMON)` is probably unneeded...\n\nWill try to remove, but not so sure about this one. The util and wallet libraries do (no longer) depend on the server library in the previous line you commented on, but a bunch of the earlier libraries do depend on the common library, so it's not surprising that might need to be repeated.",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340352117,340352117,src/Makefile.qt.include
hebasto,2020-03-05 14:29:44,"nit: a missed paren in the end of help string:\n```suggestion\n  [Build with libmultiprocess codegen tool. Useful to specify different libmultiprocess host system library and build system codegen tool prefixes when cross-compiling (default is host system libmultiprocess prefix)])],\n```",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388328243,388328243,configure.ac
hebasto,2020-03-05 14:34:49,"nit: The help string could clear state that default=auto:\n\n""(default is auto, i.e., detect with pkg-config)""\n\nor smth similar.",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388331582,388331582,configure.ac
hebasto,2020-03-05 15:08:04,"This is a very convenient feature.\nBut, OTOH, it is a bit confusing as `--enable-multiprocess` help string states that ""default is **no**"".\n\nMay I suggest to drop this addition?\n\nAs another approach, the default value of `--enable-multiprocess` could be `auto` (but not now, when it is an experimental feature).",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388354059,388354059,depends/config.site.in
ryanofsky,2020-03-05 15:21:26,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388331582\n\n> nit: The help string could clear state that default=auto:\n> \n> ""(default is auto, i.e., detect with pkg-config)""\n> \n> or smth similar.\n\nThanks, changed",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388363226,388363226,configure.ac
ryanofsky,2020-03-05 15:21:37,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388328243\n\n> nit: a missed paren in the end of help string:\n\nThanks, added",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388363365,388363365,configure.ac
ryanofsky,2020-03-05 15:21:51,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388354059\n\n> May I suggest to drop this addition?\n\nI could much more easily imagine someone surprised that the MULTIPROCESS=1 option didn't enable multiprocess support, than by someone being surprised that MULTIPROCESS=1 enables multiprocess support. So I think dropping this would be a worse default. I also don't think there is ",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388363530,388363530,depends/config.site.in
hebasto,2020-03-05 16:53:39,I think the comment in its current state is correct as `bitcoind_common_{cppflags|cxxflags|ldflags}` are used to define `bitcoin_wallet_{CPPFLAGS|CXXFLAGS|LDFLAGS}` as well.,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388426035,388426035,src/Makefile.am
ryanofsky,2020-03-05 17:08:13,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r307436913\n\n> I think the comment in its current state is correct as `bitcoind_common_{cppflags|cxxflags|ldflags}` are used to define `bitcoin_wallet_{CPPFLAGS|CXXFLAGS|LDFLAGS}` as well.\n\nIt's true that the flags are shared, but it's also true that this section of the file is specifically adding the bitcoind and bitcoin-node tar",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388435878,388435878,src/Makefile.am
theuni,2020-03-05 18:06:54,"Please make these uppercase so they stand out from automake variables. As-is, this looks like a new helper lib.",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388468857,388468857,src/Makefile.am
theuni,2020-03-05 18:09:17,"Same with these, please use uppercase for helper vars.",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388470002,388470002,src/Makefile.qt.include
hebasto,2020-03-05 18:16:21,"Yeah, it seems unconditionally included in:\nhttps://github.com/bitcoin/bitcoin/blob/d6921b176186fd8304b6d6a13772fd0fc32fe726/src/Makefile.qt.include#L313",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388473494,388473494,src/Makefile.qt.include
hebasto,2020-03-05 18:17:58,"> The last `$(LIBBITCOIN_COMMON)` is probably unneeded...\n\nIt seems unconditionally included in:\nhttps://github.com/bitcoin/bitcoin/blob/d6921b176186fd8304b6d6a13772fd0fc32fe726/src/Makefile.qt.include#L320-L322",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388474344,388474344,src/Makefile.qt.include
theuni,2020-03-05 18:29:28,"+1. It's fine when it's convenient shorthand or more clear, but no need to keep them tied if it makes anything harder.",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388480615,388480615,depends/packages/boost.mk
theuni,2020-03-05 18:37:45,"Good points. I think as long as this is experimental, probably best to play it safe and require it to be --enabled by hand. Arguably it already has been because of the way depends was built, but it's easy to forget when bouncing around branches.\n\nNot a strong preference, though.",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388484769,388484769,depends/config.site.in
theuni,2020-03-05 18:41:49,"IIRC the ""+"" in the filename gives some tools/filesystems grief, which is why we hack it out in native_cctools.\nYou can use (untested):\n```\n$(package)_download_file=capnproto-c++-$($(package)_version).tar.gz\n$(package)_file_name=capnproto-$($(package)_version).tar.gz\n```\nI'll try to track down a good explanation for why we do that first, though. Maybe it's no longer necessary.\n\nEdi",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388486877,388486877,depends/packages/native_capnp.mk
ryanofsky,2020-03-05 19:54:25,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340337314\n\n> The last `$(LIBBITCOIN_COMMON)` is probably unneeded...\n\nRemoved with Hennadii's diff https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-595371624",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388527686,388527686,src/Makefile.qt.include
ryanofsky,2020-03-05 19:55:39,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r340334676\n\n> The last `$(LIBBITCOIN_SERVER)` is probably unneeded...\n\nRemoved with Hennadii's diff https://github.com/bitcoin/bitcoin/pull/16367#issuecomment-595371624",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388528319,388528319,src/Makefile.qt.include
hebasto,2020-03-05 19:58:15,"It seems now the first ""detect"" is unneeded, no?",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388529793,388529793,configure.ac
ryanofsky,2020-03-05 20:02:51,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388529793\n\n> It seems now the first ""detect"" is unneeded, no?\n\nThanks, fixed",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388532019,388532019,configure.ac
ryanofsky,2020-03-05 20:11:59,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388486877\n\n> IIRC the ""+"" in the filename gives some tools/filesystems grief, which is why we hack it out in native_cctools.\n\nThanks. It'd be nice to not have to do this if you find out it's unnecessary, but replaced + with x for now",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388536731,388536731,depends/packages/native_capnp.mk
ryanofsky,2020-03-05 20:12:06,"> Please make these uppercase so they stand out from automake variables. As-is, this looks like a new helper lib.\n\nI don't think this works. If I make everything uppercase I see errors:\n\n```\nsrc/Makefile.am:568: warning: variable 'BITCOIND_COMMON_LDFLAGS' is defined but no program or\nsrc/Makefile.am:568: library has 'BITCOIND_COMMON' as canonical name (possible typo)\n```\n\nThese a",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388536778,388536778,src/Makefile.am
ryanofsky,2020-03-05 20:12:12,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388470002\n\n> Same with these, please use uppercase for helper vars.\n\nSeeing\n\n```\nsrc/Makefile.qt.include:323: warning: variable 'BITCOIN_QT_COMMON_LDFLAGS' is defined but no program or\nsrc/Makefile.qt.include:323: library has 'BITCOIN_QT_COMMON' as canonical name (possible typo)\n```\n\nwith this",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388536830,388536830,src/Makefile.qt.include
hebasto,2020-03-05 21:47:38,"~Being agreed with @theuni, may I suggest a tradeoff:~\n~the underscore after `_COMMON_` could be dropped, i.e.,~\n\n~s/`BITCOIND_COMMON_LDFLAGS`/`BITCOIND_COMMONLDFLAGS`/~\n\nSee: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r389358309",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388585280,388585280,src/Makefile.am
hebasto,2020-03-05 21:52:01,"~https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388585280~\n~s/`BITCOIN_QT_COMMON_LDFLAGS`/`BITCOIN_QT_COMMONLDFLAGS`/ ?~\n\nSee: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r389358309",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388587807,388587807,src/Makefile.qt.include
ryanofsky,2020-03-05 22:48:37,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388585280\n\n> the underscore after `_COMMON_` could be dropped\n\nI'm confused about what problem this suggestion would be solving. Shouldn't the goal to be to **avoid** these variables getting confused with [the special variables processed by automake](https://www.gnu.org/software/automake/manual/html_node/Program-and-Library-Vari",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r388611982,388611982,src/Makefile.am
Sjors,2020-03-08 09:53:45,"Now that `native_libmultiprocess` doesn't need `boost::optional`, do you still need this? If you do need it, maybe make that a separate commit.\nSee also https://github.com/bitcoin/bitcoin/pull/16367#pullrequestreview-369969746",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r389353284,389353284,depends/packages/boost.mk
hebasto,2020-03-08 11:04:58,Agree that naming of convenient variables with `all_lower_case` makes them distinguishable from the Automake special variables.,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r389358309,389358309,src/Makefile.am
MarcoFalke,2020-03-23 20:08:19,Why is LIBMULTIPROCESS_LIBS neeeded for the single-binary `bitcoind`?,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r396726227,396726227,src/Makefile.am
MarcoFalke,2020-03-23 20:14:24,Why are the bitcoind common flags used for the bitcoin wallet tool? Could remove the `d`?,https://github.com/bitcoin/bitcoin/pull/16367#discussion_r396729362,396729362,src/Makefile.am
ryanofsky,2020-03-25 02:28:35,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r396726227\n\n> Why is LIBMULTIPROCESS_LIBS neeeded for the single-binary `bitcoind`?\n\nIt's not needed, removed entirely from this PR and removed from bitcoind link line in #10102",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r397574495,397574495,src/Makefile.am
ryanofsky,2020-03-25 02:28:45,"re: https://github.com/bitcoin/bitcoin/pull/16367#discussion_r396729362\n\n> Why are the bitcoind common flags used for the bitcoin wallet tool? Could remove the `d`?\n\nMakes sense, changed the names as suggested",https://github.com/bitcoin/bitcoin/pull/16367#discussion_r397574550,397574550,src/Makefile.am
