[
  {
    "sha": "15fa95d7e576041a20d47907356a2be5a327b4ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWZhOTVkN2U1NzYwNDFhMjBkNDc5MDczNTZhMmJlNWEzMjdiNGNh",
    "commit": {
      "author": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2016-11-28T08:19:05Z"
      },
      "committer": {
        "name": "fsb4000",
        "email": "fsb4000@yandex.ru",
        "date": "2016-11-28T09:16:37Z"
      },
      "message": "Fix some typos",
      "tree": {
        "sha": "2456ea0d0cb68365b149524b4876d9b1b4828c37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2456ea0d0cb68365b149524b4876d9b1b4828c37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15fa95d7e576041a20d47907356a2be5a327b4ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15fa95d7e576041a20d47907356a2be5a327b4ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15fa95d7e576041a20d47907356a2be5a327b4ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15fa95d7e576041a20d47907356a2be5a327b4ca/comments",
    "author": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fsb4000",
      "id": 4289847,
      "node_id": "MDQ6VXNlcjQyODk4NDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fsb4000",
      "html_url": "https://github.com/fsb4000",
      "followers_url": "https://api.github.com/users/fsb4000/followers",
      "following_url": "https://api.github.com/users/fsb4000/following{/other_user}",
      "gists_url": "https://api.github.com/users/fsb4000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fsb4000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fsb4000/subscriptions",
      "organizations_url": "https://api.github.com/users/fsb4000/orgs",
      "repos_url": "https://api.github.com/users/fsb4000/repos",
      "events_url": "https://api.github.com/users/fsb4000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fsb4000/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4522e71c7e1d8ecfd70112e9375b9d00d6733a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4522e71c7e1d8ecfd70112e9375b9d00d6733a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4522e71c7e1d8ecfd70112e9375b9d00d6733a8"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "95d9090ce25d15053bf009db44f17430ea227d6b",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test mulitple rpc user config option rpcauth\n+# Test multiple rpc user config option rpcauth\n #\n \n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "99c30f7651b1b577eb5d164bb91bb5c47b444f49",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -223,7 +223,7 @@ def wait_for_bitcoind_start(process, url, i):\n                 raise # unknown IO error\n         except JSONRPCException as e: # Initialization phase\n             if e.error['code'] != -28: # RPC in warmup?\n-                raise # unkown JSON RPC exception\n+                raise # unknown JSON RPC exception\n         time.sleep(0.25)\n \n def initialize_chain(test_dir, num_nodes, cachedir):\n@@ -257,7 +257,7 @@ def initialize_chain(test_dir, num_nodes, cachedir):\n                 print(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n             wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print(\"initialize_chain: RPC succesfully started\")\n+                print(\"initialize_chain: RPC successfully started\")\n \n         rpcs = []\n         for i in range(MAX_NODES):\n@@ -344,7 +344,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     url = rpc_url(i, rpchost)\n     wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print(\"start_node: RPC succesfully started\")\n+        print(\"start_node: RPC successfully started\")\n     proxy = get_rpc_proxy(url, i, timeout=timewait)\n \n     if COVERAGE_DIR:"
      },
      {
        "sha": "2efeda9cc6d22bce97538b1f27da8e943b280803",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -62,7 +62,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n         if (cmpctblock.prefilledtxn[i].tx->IsNull())\n             return READ_STATUS_INVALID;\n \n-        lastprefilledindex += cmpctblock.prefilledtxn[i].index + 1; //index is a uint16_t, so cant overflow here\n+        lastprefilledindex += cmpctblock.prefilledtxn[i].index + 1; //index is a uint16_t, so can't overflow here\n         if (lastprefilledindex > std::numeric_limits<uint16_t>::max())\n             return READ_STATUS_INVALID;\n         if ((uint32_t)lastprefilledindex > cmpctblock.shorttxids.size() + i) {"
      },
      {
        "sha": "21439a16f136e7fba253f950b8d9dfd5f30bbfa6",
        "filename": "src/crypto/ctaes/test.c",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/crypto/ctaes/test.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/crypto/ctaes/test.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/test.c?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -102,7 +102,7 @@ int main(void) {\n         }\n     }\n     if (fail == 0) {\n-        fprintf(stderr, \"All tests succesful\\n\");\n+        fprintf(stderr, \"All tests successful\\n\");\n     } else {\n         fprintf(stderr, \"%i tests failed\\n\", fail);\n     }"
      },
      {
        "sha": "067b3941047b737c6a01fc68a32666b568dd2e9d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -4974,7 +4974,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     else if (inv.type == MSG_CMPCT_BLOCK)\n                     {\n                         // If a peer is asking for old blocks, we're almost guaranteed\n-                        // they wont have a useful mempool to match against a compact block,\n+                        // they won't have a useful mempool to match against a compact block,\n                         // and we don't feel like constructing the object for them, so\n                         // instead we respond with the full, non-compact block.\n                         bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;"
      },
      {
        "sha": "d2e1fb23a3dd00b0845d7834d4370091ba97e007",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -81,7 +81,7 @@ class OptionsModel : public QAbstractListModel\n     int nDisplayUnit;\n     QString strThirdPartyTxUrls;\n     bool fCoinControlFeatures;\n-    /* settings that were overriden by command-line */\n+    /* settings that were overridden by command-line */\n     QString strOverriddenByCommandLine;\n \n     // Add option to list of GUI options overridden through command line/config file"
      },
      {
        "sha": "f5212bc2666515a7c3808c861d8690c68b54991a",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -109,7 +109,7 @@ class Arena\n  * An arena manages a contiguous region of memory. The pool starts out with one arena\n  * but can grow to multiple arenas if the need arises.\n  *\n- * Unlike a normal C heap, the administrative structures are seperate from the managed\n+ * Unlike a normal C heap, the administrative structures are separate from the managed\n  * memory. This has been done as the sizes and bases of objects are not in themselves sensitive\n  * information, as to conserve precious locked memory. In some operating systems\n  * the amount of memory that can be locked is small."
      },
      {
        "sha": "1c090b3f3f1e9bc4ff40c92f33d67ce606b5dbc1",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -15,7 +15,7 @@\n \n Runs automatically during `make check`.\n \n-Can also be run manually from the src directory by specifiying the source directory:\n+Can also be run manually from the src directory by specifying the source directory:\n \n test/bitcoin-util-test.py --srcdir='srcdir' [--verbose]\n \"\"\""
      },
      {
        "sha": "e3531486aa333a89e7e66b948b7ee75b285809fd",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -47,7 +47,7 @@ BOOST_AUTO_TEST_CASE(limitedmap_test)\n         // make sure the item is present\n         BOOST_CHECK(map.count(i) == 1);\n \n-        // use the iterator to check for the expected key adn value\n+        // use the iterator to check for the expected key and value\n         BOOST_CHECK(it->first == i);\n         BOOST_CHECK(it->second == i + 1);\n         "
      },
      {
        "sha": "23fe5a7abead8b17b1615042213adef60aebc18f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15fa95d7e576041a20d47907356a2be5a327b4ca/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15fa95d7e576041a20d47907356a2be5a327b4ca/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=15fa95d7e576041a20d47907356a2be5a327b4ca",
        "patch": "@@ -62,7 +62,7 @@ class CTxMemPool;\n \n /** \\class CTxMemPoolEntry\n  *\n- * CTxMemPoolEntry stores data about the correponding transaction, as well\n+ * CTxMemPoolEntry stores data about the corresponding transaction, as well\n  * as data about all in-mempool transactions that depend on the transaction\n  * (\"descendant\" transactions).\n  *"
      }
    ]
  }
]