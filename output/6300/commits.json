[
  {
    "sha": "e8004408187b063c9b69e2efb3bef791924e0a72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODAwNDQwODE4N2IwNjNjOWI2OWUyZWZiM2JlZjc5MTkyNGUwYTcy",
    "commit": {
      "author": {
        "name": "Thomas Guyot-Sionnest",
        "email": "dermoth@aei.ca",
        "date": "2015-06-18T04:57:51Z"
      },
      "committer": {
        "name": "Thomas Guyot-Sionnest",
        "email": "dermoth@aei.ca",
        "date": "2015-06-18T08:48:24Z"
      },
      "message": "Rename RPC_INVALID_ADDRESS_OR_KEY to RPC_NOT_FOUND",
      "tree": {
        "sha": "8bc37db261ce1b77a487e783ac324d4360b385eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bc37db261ce1b77a487e783ac324d4360b385eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8004408187b063c9b69e2efb3bef791924e0a72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8004408187b063c9b69e2efb3bef791924e0a72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8004408187b063c9b69e2efb3bef791924e0a72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8004408187b063c9b69e2efb3bef791924e0a72/comments",
    "author": {
      "login": "dermoth",
      "id": 403890,
      "node_id": "MDQ6VXNlcjQwMzg5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/403890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dermoth",
      "html_url": "https://github.com/dermoth",
      "followers_url": "https://api.github.com/users/dermoth/followers",
      "following_url": "https://api.github.com/users/dermoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/dermoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dermoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dermoth/subscriptions",
      "organizations_url": "https://api.github.com/users/dermoth/orgs",
      "repos_url": "https://api.github.com/users/dermoth/repos",
      "events_url": "https://api.github.com/users/dermoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dermoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dermoth",
      "id": 403890,
      "node_id": "MDQ6VXNlcjQwMzg5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/403890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dermoth",
      "html_url": "https://github.com/dermoth",
      "followers_url": "https://api.github.com/users/dermoth/followers",
      "following_url": "https://api.github.com/users/dermoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/dermoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dermoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dermoth/subscriptions",
      "organizations_url": "https://api.github.com/users/dermoth/orgs",
      "repos_url": "https://api.github.com/users/dermoth/repos",
      "events_url": "https://api.github.com/users/dermoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dermoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9849c663b10f4d90776d606aa3e36850c32d44e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9849c663b10f4d90776d606aa3e36850c32d44e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9849c663b10f4d90776d606aa3e36850c32d44e1"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 27,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1a9c61a324486251d7e98d72a0094ec6aac986f3",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=e8004408187b063c9b69e2efb3bef791924e0a72",
        "patch": "@@ -301,7 +301,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n         fVerbose = params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Block not found\");\n \n     CBlock block;\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n@@ -663,7 +663,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     {\n         LOCK(cs_main);\n         if (mapBlockIndex.count(hash) == 0)\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            throw JSONRPCError(RPC_NOT_FOUND, \"Block not found\");\n \n         CBlockIndex* pblockindex = mapBlockIndex[hash];\n         InvalidateBlock(state, pblockindex);\n@@ -702,7 +702,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     {\n         LOCK(cs_main);\n         if (mapBlockIndex.count(hash) == 0)\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            throw JSONRPCError(RPC_NOT_FOUND, \"Block not found\");\n \n         CBlockIndex* pblockindex = mapBlockIndex[hash];\n         ReconsiderBlock(state, pblockindex);"
      },
      {
        "sha": "9f3864ac4f509853b798d4b749d1de1ae0081b9f",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=e8004408187b063c9b69e2efb3bef791924e0a72",
        "patch": "@@ -360,7 +360,7 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n     vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n \n     if (fInvalid)\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Malformed base64 encoding\");\n \n     CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;"
      },
      {
        "sha": "36ff0e175bd78e1f0f425cdbcf7789fd3d9a90fb",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=e8004408187b063c9b69e2efb3bef791924e0a72",
        "patch": "@@ -43,7 +43,7 @@ enum RPCErrorCode\n     RPC_MISC_ERROR                  = -1,  //! std::exception thrown in command handling\n     RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  //! Server is in safe mode, and command is not allowed in safe mode\n     RPC_TYPE_ERROR                  = -3,  //! Unexpected type was passed as parameter\n-    RPC_INVALID_ADDRESS_OR_KEY      = -5,  //! Invalid address or key\n+    RPC_NOT_FOUND                   = -5,  //! Invalid address or key\n     RPC_OUT_OF_MEMORY               = -7,  //! Ran out of memory during operation\n     RPC_INVALID_PARAMETER           = -8,  //! Invalid, missing or duplicate parameter\n     RPC_DATABASE_ERROR              = -20, //! Database error\n@@ -54,6 +54,7 @@ enum RPCErrorCode\n     RPC_IN_WARMUP                   = -28, //! Client still warming up\n \n     //! Aliases for backward compatibility\n+    RPC_INVALID_ADDRESS_OR_KEY      = RPC_NOT_FOUND,\n     RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,\n     RPC_TRANSACTION_REJECTED        = RPC_VERIFY_REJECTED,\n     RPC_TRANSACTION_ALREADY_IN_CHAIN= RPC_VERIFY_ALREADY_IN_CHAIN,"
      },
      {
        "sha": "59726bbbb33f3a4dbf8e6446cffec1560f1f8230",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8004408187b063c9b69e2efb3bef791924e0a72/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=e8004408187b063c9b69e2efb3bef791924e0a72",
        "patch": "@@ -182,7 +182,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n     CTransaction tx;\n     uint256 hashBlock;\n     if (!GetTransaction(hash, tx, hashBlock, true))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available about transaction\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"No information available about transaction\");\n \n     string strHex = EncodeHexTx(tx);\n \n@@ -240,7 +240,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     {\n         hashBlock = uint256S(params[1].get_str());\n         if (!mapBlockIndex.count(hashBlock))\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+            throw JSONRPCError(RPC_NOT_FOUND, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n     } else {\n         CCoins coins;\n@@ -252,7 +252,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     {\n         CTransaction tx;\n         if (!GetTransaction(oneTxid, tx, hashBlock, false) || hashBlock.IsNull())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n+            throw JSONRPCError(RPC_NOT_FOUND, \"Transaction not yet in block\");\n         if (!mapBlockIndex.count(hashBlock))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");\n         pblockindex = mapBlockIndex[hashBlock];\n@@ -267,7 +267,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n         if (setTxids.count(tx.GetHash()))\n             ntxFound++;\n     if (ntxFound != setTxids.size())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"(Not all) transactions not found in specified block\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"(Not all) transactions not found in specified block\");\n \n     CDataStream ssMB(SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock mb(block, setTxids);\n@@ -302,7 +302,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n     LOCK(cs_main);\n \n     if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Block not found in chain\");\n \n     BOOST_FOREACH(const uint256& hash, vMatch)\n         res.push_back(hash.GetHex());\n@@ -372,7 +372,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     BOOST_FOREACH(const string& name_, addrList) {\n         CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n+            throw JSONRPCError(RPC_NOT_FOUND, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n@@ -623,10 +623,10 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             CBitcoinSecret vchSecret;\n             bool fGood = vchSecret.SetString(k.get_str());\n             if (!fGood)\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+                throw JSONRPCError(RPC_NOT_FOUND, \"Invalid private key\");\n             CKey key = vchSecret.GetKey();\n             if (!key.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                throw JSONRPCError(RPC_NOT_FOUND, \"Private key outside allowed range\");\n             tempKeystore.AddKey(key);\n         }\n     }"
      },
      {
        "sha": "d3248d19ff0b87dc0c087df5a8b609abb5f99cc0",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8004408187b063c9b69e2efb3bef791924e0a72/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8004408187b063c9b69e2efb3bef791924e0a72/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e8004408187b063c9b69e2efb3bef791924e0a72",
        "patch": "@@ -114,10 +114,10 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strSecret);\n \n-    if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+    if (!fGood) throw JSONRPCError(RPC_NOT_FOUND, \"Invalid private key encoding\");\n \n     CKey key = vchSecret.GetKey();\n-    if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+    if (!key.IsValid()) throw JSONRPCError(RPC_NOT_FOUND, \"Private key outside allowed range\");\n \n     CPubKey pubkey = key.GetPubKey();\n     assert(key.VerifyPubKey(pubkey));\n@@ -183,7 +183,7 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n         script = CScript(data.begin(), data.end());\n     } else {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address or script\");\n     }\n \n     string strLabel = \"\";\n@@ -356,7 +356,7 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n     string strAddress = params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n     CKeyID keyID;\n     if (!address.GetKeyID(keyID))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");"
      },
      {
        "sha": "e4448010610f60a9312169e0f1600d8204370163",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8004408187b063c9b69e2efb3bef791924e0a72/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8004408187b063c9b69e2efb3bef791924e0a72/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e8004408187b063c9b69e2efb3bef791924e0a72",
        "patch": "@@ -252,7 +252,7 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n \n     string strAccount;\n     if (params.size() > 1)\n@@ -299,7 +299,7 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n \n     string strAccount;\n     map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n@@ -410,7 +410,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n \n     // Amount\n     CAmount nAmount = AmountFromValue(params[1]);\n@@ -538,7 +538,7 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n \n     vector<unsigned char> vchSig;\n     if (!key.SignCompact(ss.GetHash(), vchSig))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Sign failed\");\n \n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n@@ -573,7 +573,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n@@ -890,7 +890,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n     CAmount nAmount = AmountFromValue(params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n@@ -985,7 +985,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     {\n         CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n+            throw JSONRPCError(RPC_NOT_FOUND, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n@@ -1725,7 +1725,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n \n     UniValue entry(UniValue::VOBJ);\n     if (!pwalletMain->mapWallet.count(hash))\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n     CAmount nCredit = wtx.GetCredit(filter);\n@@ -2307,7 +2307,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             const UniValue& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());\n+                throw JSONRPCError(RPC_NOT_FOUND, string(\"Invalid Bitcoin address: \")+input.get_str());\n             if (setAddress.count(address))\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n            setAddress.insert(address);"
      }
    ]
  },
  {
    "sha": "989f61e41805a8a03bd8dbf98858cec49335eaba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODlmNjFlNDE4MDVhOGEwM2JkOGRiZjk4ODU4Y2VjNDkzMzVlYWJh",
    "commit": {
      "author": {
        "name": "Thomas Guyot-Sionnest",
        "email": "dermoth@aei.ca",
        "date": "2015-06-18T05:06:50Z"
      },
      "committer": {
        "name": "Thomas Guyot-Sionnest",
        "email": "dermoth@aei.ca",
        "date": "2015-06-18T08:48:29Z"
      },
      "message": "getblockhash: Return RPC_NOT_FOUND when nHeight > chainActive.Height()",
      "tree": {
        "sha": "79414b3c7ea02e5ec92377ad5b07b42b45334af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79414b3c7ea02e5ec92377ad5b07b42b45334af5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/989f61e41805a8a03bd8dbf98858cec49335eaba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989f61e41805a8a03bd8dbf98858cec49335eaba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/989f61e41805a8a03bd8dbf98858cec49335eaba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989f61e41805a8a03bd8dbf98858cec49335eaba/comments",
    "author": {
      "login": "dermoth",
      "id": 403890,
      "node_id": "MDQ6VXNlcjQwMzg5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/403890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dermoth",
      "html_url": "https://github.com/dermoth",
      "followers_url": "https://api.github.com/users/dermoth/followers",
      "following_url": "https://api.github.com/users/dermoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/dermoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dermoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dermoth/subscriptions",
      "organizations_url": "https://api.github.com/users/dermoth/orgs",
      "repos_url": "https://api.github.com/users/dermoth/repos",
      "events_url": "https://api.github.com/users/dermoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dermoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dermoth",
      "id": 403890,
      "node_id": "MDQ6VXNlcjQwMzg5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/403890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dermoth",
      "html_url": "https://github.com/dermoth",
      "followers_url": "https://api.github.com/users/dermoth/followers",
      "following_url": "https://api.github.com/users/dermoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/dermoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dermoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dermoth/subscriptions",
      "organizations_url": "https://api.github.com/users/dermoth/orgs",
      "repos_url": "https://api.github.com/users/dermoth/repos",
      "events_url": "https://api.github.com/users/dermoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dermoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8004408187b063c9b69e2efb3bef791924e0a72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8004408187b063c9b69e2efb3bef791924e0a72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8004408187b063c9b69e2efb3bef791924e0a72"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3570c4f4130a052fb777850bb76997df8cd0bea6",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/989f61e41805a8a03bd8dbf98858cec49335eaba/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/989f61e41805a8a03bd8dbf98858cec49335eaba/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=989f61e41805a8a03bd8dbf98858cec49335eaba",
        "patch": "@@ -248,8 +248,10 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n     LOCK(cs_main);\n \n     int nHeight = params[0].get_int();\n-    if (nHeight < 0 || nHeight > chainActive.Height())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n+    if (nHeight < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative block height\");\n+    if (nHeight > chainActive.Height())\n+        throw JSONRPCError(RPC_NOT_FOUND, \"Block height out of range\");\n \n     CBlockIndex* pblockindex = chainActive[nHeight];\n     return pblockindex->GetBlockHash().GetHex();"
      }
    ]
  },
  {
    "sha": "c7b85ae25d5f82d11c613b291339a399c18f9313",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2I4NWFlMjVkNWY4MmQxMWM2MTNiMjkxMzM5YTM5OWMxOGY5MzEz",
    "commit": {
      "author": {
        "name": "Thomas Guyot-Sionnest",
        "email": "dermoth@aei.ca",
        "date": "2015-06-18T08:51:52Z"
      },
      "committer": {
        "name": "Thomas Guyot-Sionnest",
        "email": "dermoth@aei.ca",
        "date": "2015-06-18T08:51:52Z"
      },
      "message": "Replace RPC_NOT_FOUND with RPC_INVALID_PARAMETER where appropriate",
      "tree": {
        "sha": "dee4f1bc0317864e2ab77d66f8295063f716b8a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dee4f1bc0317864e2ab77d66f8295063f716b8a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b85ae25d5f82d11c613b291339a399c18f9313",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b85ae25d5f82d11c613b291339a399c18f9313",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b85ae25d5f82d11c613b291339a399c18f9313",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b85ae25d5f82d11c613b291339a399c18f9313/comments",
    "author": {
      "login": "dermoth",
      "id": 403890,
      "node_id": "MDQ6VXNlcjQwMzg5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/403890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dermoth",
      "html_url": "https://github.com/dermoth",
      "followers_url": "https://api.github.com/users/dermoth/followers",
      "following_url": "https://api.github.com/users/dermoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/dermoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dermoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dermoth/subscriptions",
      "organizations_url": "https://api.github.com/users/dermoth/orgs",
      "repos_url": "https://api.github.com/users/dermoth/repos",
      "events_url": "https://api.github.com/users/dermoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dermoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dermoth",
      "id": 403890,
      "node_id": "MDQ6VXNlcjQwMzg5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/403890?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dermoth",
      "html_url": "https://github.com/dermoth",
      "followers_url": "https://api.github.com/users/dermoth/followers",
      "following_url": "https://api.github.com/users/dermoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/dermoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dermoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dermoth/subscriptions",
      "organizations_url": "https://api.github.com/users/dermoth/orgs",
      "repos_url": "https://api.github.com/users/dermoth/repos",
      "events_url": "https://api.github.com/users/dermoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dermoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "989f61e41805a8a03bd8dbf98858cec49335eaba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/989f61e41805a8a03bd8dbf98858cec49335eaba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/989f61e41805a8a03bd8dbf98858cec49335eaba"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "e1c9ddf3d4f31ae7691e3055fbf4bc5eca3aeed7",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b85ae25d5f82d11c613b291339a399c18f9313/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b85ae25d5f82d11c613b291339a399c18f9313/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=c7b85ae25d5f82d11c613b291339a399c18f9313",
        "patch": "@@ -360,7 +360,7 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n     vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n \n     if (fInvalid)\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Malformed base64 encoding\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Malformed base64 encoding\");\n \n     CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;"
      },
      {
        "sha": "55a8b0104f1610898e7aeefc72ce357b67dafb42",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b85ae25d5f82d11c613b291339a399c18f9313/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b85ae25d5f82d11c613b291339a399c18f9313/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=c7b85ae25d5f82d11c613b291339a399c18f9313",
        "patch": "@@ -43,7 +43,7 @@ enum RPCErrorCode\n     RPC_MISC_ERROR                  = -1,  //! std::exception thrown in command handling\n     RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  //! Server is in safe mode, and command is not allowed in safe mode\n     RPC_TYPE_ERROR                  = -3,  //! Unexpected type was passed as parameter\n-    RPC_NOT_FOUND                   = -5,  //! Invalid address or key\n+    RPC_NOT_FOUND                   = -5,  //! Non-existent address or key\n     RPC_OUT_OF_MEMORY               = -7,  //! Ran out of memory during operation\n     RPC_INVALID_PARAMETER           = -8,  //! Invalid, missing or duplicate parameter\n     RPC_DATABASE_ERROR              = -20, //! Database error"
      },
      {
        "sha": "aa77833a1516711356b8203410719859d347e36c",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b85ae25d5f82d11c613b291339a399c18f9313/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b85ae25d5f82d11c613b291339a399c18f9313/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=c7b85ae25d5f82d11c613b291339a399c18f9313",
        "patch": "@@ -372,7 +372,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     BOOST_FOREACH(const string& name_, addrList) {\n         CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_NOT_FOUND, string(\"Invalid Bitcoin address: \")+name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n@@ -623,10 +623,10 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             CBitcoinSecret vchSecret;\n             bool fGood = vchSecret.SetString(k.get_str());\n             if (!fGood)\n-                throw JSONRPCError(RPC_NOT_FOUND, \"Invalid private key\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid private key\");\n             CKey key = vchSecret.GetKey();\n             if (!key.IsValid())\n-                throw JSONRPCError(RPC_NOT_FOUND, \"Private key outside allowed range\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Private key outside allowed range\");\n             tempKeystore.AddKey(key);\n         }\n     }"
      },
      {
        "sha": "15c252f9e172ad0b28f368e7ef1adf49c33bb259",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b85ae25d5f82d11c613b291339a399c18f9313/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b85ae25d5f82d11c613b291339a399c18f9313/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c7b85ae25d5f82d11c613b291339a399c18f9313",
        "patch": "@@ -114,10 +114,10 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strSecret);\n \n-    if (!fGood) throw JSONRPCError(RPC_NOT_FOUND, \"Invalid private key encoding\");\n+    if (!fGood) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid private key encoding\");\n \n     CKey key = vchSecret.GetKey();\n-    if (!key.IsValid()) throw JSONRPCError(RPC_NOT_FOUND, \"Private key outside allowed range\");\n+    if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Private key outside allowed range\");\n \n     CPubKey pubkey = key.GetPubKey();\n     assert(key.VerifyPubKey(pubkey));\n@@ -183,7 +183,7 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n         script = CScript(data.begin(), data.end());\n     } else {\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address or script\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid Bitcoin address or script\");\n     }\n \n     string strLabel = \"\";\n@@ -356,7 +356,7 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n     string strAddress = params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid Bitcoin address\");\n     CKeyID keyID;\n     if (!address.GetKeyID(keyID))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");"
      },
      {
        "sha": "35fc71b0c88d7b0ef99c241b2bff804e23fa2615",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b85ae25d5f82d11c613b291339a399c18f9313/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b85ae25d5f82d11c613b291339a399c18f9313/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c7b85ae25d5f82d11c613b291339a399c18f9313",
        "patch": "@@ -252,7 +252,7 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid Bitcoin address\");\n \n     string strAccount;\n     if (params.size() > 1)\n@@ -299,7 +299,7 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid Bitcoin address\");\n \n     string strAccount;\n     map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n@@ -410,7 +410,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid Bitcoin address\");\n \n     // Amount\n     CAmount nAmount = AmountFromValue(params[1]);\n@@ -538,7 +538,7 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n \n     vector<unsigned char> vchSig;\n     if (!key.SignCompact(ss.GetHash(), vchSig))\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Sign failed\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Sign failed\");\n \n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n@@ -573,7 +573,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n@@ -890,7 +890,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n-        throw JSONRPCError(RPC_NOT_FOUND, \"Invalid Bitcoin address\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid Bitcoin address\");\n     CAmount nAmount = AmountFromValue(params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n@@ -985,7 +985,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     {\n         CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_NOT_FOUND, string(\"Invalid Bitcoin address: \")+name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n@@ -2307,7 +2307,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             const UniValue& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n-                throw JSONRPCError(RPC_NOT_FOUND, string(\"Invalid Bitcoin address: \")+input.get_str());\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid Bitcoin address: \")+input.get_str());\n             if (setAddress.count(address))\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n            setAddress.insert(address);"
      }
    ]
  }
]