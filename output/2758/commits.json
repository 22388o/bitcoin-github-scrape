[
  {
    "sha": "a6dba0fdb281ee99e6814ad64c1c4d3032347816",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmRiYTBmZGIyODFlZTk5ZTY4MTRhZDY0YzFjNGQzMDMyMzQ3ODE2",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T00:35:01Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:58:23Z"
      },
      "message": "Moved CBlock::WriteToDisk out of CBlock to inline function WriteBlockToDisk in main.h",
      "tree": {
        "sha": "cd0b5e67aea0f2b47ff3faf7719328c1680bbe4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd0b5e67aea0f2b47ff3faf7719328c1680bbe4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6dba0fdb281ee99e6814ad64c1c4d3032347816",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6dba0fdb281ee99e6814ad64c1c4d3032347816",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6dba0fdb281ee99e6814ad64c1c4d3032347816",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6dba0fdb281ee99e6814ad64c1c4d3032347816/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd967fed89a294622f24c8e97c0ed23afb969edd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd967fed89a294622f24c8e97c0ed23afb969edd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd967fed89a294622f24c8e97c0ed23afb969edd"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 28,
      "deletions": 27
    },
    "files": [
      {
        "sha": "bde9d66031275c36694fc38ef6e0f40f6de31d99",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6dba0fdb281ee99e6814ad64c1c4d3032347816/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6dba0fdb281ee99e6814ad64c1c4d3032347816/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a6dba0fdb281ee99e6814ad64c1c4d3032347816",
        "patch": "@@ -2262,7 +2262,7 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, nTime, dbp != NULL))\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n-            if (!WriteToDisk(blockPos))\n+            if (!WriteBlockToDisk(*this, blockPos))\n                 return state.Abort(_(\"Failed to write block\"));\n         if (!AddToBlockIndex(state, blockPos))\n             return error(\"AcceptBlock() : AddToBlockIndex failed\");\n@@ -2800,7 +2800,7 @@ bool InitBlockIndex() {\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.nTime))\n                 return error(\"LoadBlockIndex() : FindBlockPos failed\");\n-            if (!block.WriteToDisk(blockPos))\n+            if (!WriteBlockToDisk(block, blockPos))\n                 return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n             if (!block.AddToBlockIndex(state, blockPos))\n                 return error(\"LoadBlockIndex() : genesis block not accepted\");"
      },
      {
        "sha": "bda775e843de84373e2f5399ccdf308e8c9f631b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6dba0fdb281ee99e6814ad64c1c4d3032347816/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6dba0fdb281ee99e6814ad64c1c4d3032347816/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a6dba0fdb281ee99e6814ad64c1c4d3032347816",
        "patch": "@@ -682,31 +682,6 @@ class CBlock : public CBlockHeader\n         return hash;\n     }\n \n-    bool WriteToDisk(CDiskBlockPos &pos)\n-    {\n-        // Open history file to append\n-        CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n-        if (!fileout)\n-            return error(\"CBlock::WriteToDisk() : OpenBlockFile failed\");\n-\n-        // Write index header\n-        unsigned int nSize = fileout.GetSerializeSize(*this);\n-        fileout << FLATDATA(Params().MessageStart()) << nSize;\n-\n-        // Write block\n-        long fileOutPos = ftell(fileout);\n-        if (fileOutPos < 0)\n-            return error(\"CBlock::WriteToDisk() : ftell failed\");\n-        pos.nPos = (unsigned int)fileOutPos;\n-        fileout << *this;\n-\n-        // Flush stdio buffers and commit to disk before returning\n-        fflush(fileout);\n-        if (!IsInitialBlockDownload())\n-            FileCommit(fileout);\n-\n-        return true;\n-    }\n \n     bool ReadFromDisk(const CDiskBlockPos &pos)\n     {\n@@ -779,6 +754,32 @@ class CBlock : public CBlockHeader\n };\n \n \n+/** Functions for disk access for blocks */\n+inline bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n+{\n+    // Open history file to append\n+    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    if (!fileout)\n+        return error(\"WriteBlockToDisk() : OpenBlockFile failed\");\n+\n+    // Write index header\n+    unsigned int nSize = fileout.GetSerializeSize(block);\n+    fileout << FLATDATA(Params().MessageStart()) << nSize;\n+\n+    // Write block\n+    long fileOutPos = ftell(fileout);\n+    if (fileOutPos < 0)\n+        return error(\"WriteBlockToDisk() : ftell failed\");\n+    pos.nPos = (unsigned int)fileOutPos;\n+    fileout << block;\n+\n+    // Flush stdio buffers and commit to disk before returning\n+    fflush(fileout);\n+    if (!IsInitialBlockDownload())\n+        FileCommit(fileout);\n+\n+    return true;\n+}\n \n \n "
      }
    ]
  },
  {
    "sha": "226f8219422e9252cece036cf61d87738782d674",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjZmODIxOTQyMmU5MjUyY2VjZTAzNmNmNjFkODc3Mzg3ODJkNjc0",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T00:47:47Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:32Z"
      },
      "message": "Moved WriteBlockToDisk implementation from main.h to main.cpp",
      "tree": {
        "sha": "7b0d0b917383238856e24f5394a72646c6276ebf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b0d0b917383238856e24f5394a72646c6276ebf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/226f8219422e9252cece036cf61d87738782d674",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226f8219422e9252cece036cf61d87738782d674",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/226f8219422e9252cece036cf61d87738782d674",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226f8219422e9252cece036cf61d87738782d674/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6dba0fdb281ee99e6814ad64c1c4d3032347816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6dba0fdb281ee99e6814ad64c1c4d3032347816",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6dba0fdb281ee99e6814ad64c1c4d3032347816"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "87f5256f5017b139750c4ae47a4c07bc08cab5bc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/226f8219422e9252cece036cf61d87738782d674/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/226f8219422e9252cece036cf61d87738782d674/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=226f8219422e9252cece036cf61d87738782d674",
        "patch": "@@ -1146,6 +1146,32 @@ CBlockIndex* FindBlockByHeight(int nHeight)\n     return vBlockIndexByHeight[nHeight];\n }\n \n+bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n+{\n+    // Open history file to append\n+    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    if (!fileout)\n+        return error(\"WriteBlockToDisk() : OpenBlockFile failed\");\n+\n+    // Write index header\n+    unsigned int nSize = fileout.GetSerializeSize(block);\n+    fileout << FLATDATA(Params().MessageStart()) << nSize;\n+\n+    // Write block\n+    long fileOutPos = ftell(fileout);\n+    if (fileOutPos < 0)\n+        return error(\"WriteBlockToDisk() : ftell failed\");\n+    pos.nPos = (unsigned int)fileOutPos;\n+    fileout << block;\n+\n+    // Flush stdio buffers and commit to disk before returning\n+    fflush(fileout);\n+    if (!IsInitialBlockDownload())\n+        FileCommit(fileout);\n+\n+    return true;\n+}\n+\n bool CBlock::ReadFromDisk(const CBlockIndex* pindex)\n {\n     if (!ReadFromDisk(pindex->GetBlockPos()))"
      },
      {
        "sha": "a613613e5e6de945571c4ff16dd685883775638c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/226f8219422e9252cece036cf61d87738782d674/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/226f8219422e9252cece036cf61d87738782d674/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=226f8219422e9252cece036cf61d87738782d674",
        "patch": "@@ -755,31 +755,7 @@ class CBlock : public CBlockHeader\n \n \n /** Functions for disk access for blocks */\n-inline bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n-{\n-    // Open history file to append\n-    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n-    if (!fileout)\n-        return error(\"WriteBlockToDisk() : OpenBlockFile failed\");\n-\n-    // Write index header\n-    unsigned int nSize = fileout.GetSerializeSize(block);\n-    fileout << FLATDATA(Params().MessageStart()) << nSize;\n-\n-    // Write block\n-    long fileOutPos = ftell(fileout);\n-    if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk() : ftell failed\");\n-    pos.nPos = (unsigned int)fileOutPos;\n-    fileout << block;\n-\n-    // Flush stdio buffers and commit to disk before returning\n-    fflush(fileout);\n-    if (!IsInitialBlockDownload())\n-        FileCommit(fileout);\n-\n-    return true;\n-}\n+bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n \n \n "
      }
    ]
  },
  {
    "sha": "7db120d5314578f7360c868bb937e779c33f113a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGIxMjBkNTMxNDU3OGY3MzYwYzg2OGJiOTM3ZTc3OWMzM2YxMTNh",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:10:02Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:34Z"
      },
      "message": "Moved CBlock::ReadFromDisk out of CBlock to functions ReadBlockFromDisk in main.h",
      "tree": {
        "sha": "bf51bf0280556aac13dae7162ae2a127e5d1afc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf51bf0280556aac13dae7162ae2a127e5d1afc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7db120d5314578f7360c868bb937e779c33f113a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7db120d5314578f7360c868bb937e779c33f113a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7db120d5314578f7360c868bb937e779c33f113a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7db120d5314578f7360c868bb937e779c33f113a/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "226f8219422e9252cece036cf61d87738782d674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226f8219422e9252cece036cf61d87738782d674",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/226f8219422e9252cece036cf61d87738782d674"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 42,
      "deletions": 48
    },
    "files": [
      {
        "sha": "e88055bdea97d4f29987747c4a1ea17833818c2e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7db120d5314578f7360c868bb937e779c33f113a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7db120d5314578f7360c868bb937e779c33f113a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7db120d5314578f7360c868bb937e779c33f113a",
        "patch": "@@ -820,7 +820,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             {\n                 CBlockIndex* pindex = (*mi).second;\n                 CBlock block;\n-                block.ReadFromDisk(pindex);\n+                ReadBlockFromDisk(block, pindex);\n                 block.BuildMerkleTree();\n                 block.print();\n                 printf(\"\\n\");"
      },
      {
        "sha": "67a989559ef6fb32acbc77ed2794777afecd729e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7db120d5314578f7360c868bb937e779c33f113a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7db120d5314578f7360c868bb937e779c33f113a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7db120d5314578f7360c868bb937e779c33f113a",
        "patch": "@@ -627,7 +627,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n         if (pcoinsTip->GetCoins(GetHash(), coins)) {\n             CBlockIndex *pindex = FindBlockByHeight(coins.nHeight);\n             if (pindex) {\n-                if (!blockTmp.ReadFromDisk(pindex))\n+                if (!ReadBlockFromDisk(blockTmp, pindex))\n                     return 0;\n                 pblock = &blockTmp;\n             }\n@@ -1114,7 +1114,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n \n     if (pindexSlow) {\n         CBlock block;\n-        if (block.ReadFromDisk(pindexSlow)) {\n+        if (ReadBlockFromDisk(block, pindexSlow)) {\n             BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n                 if (tx.GetHash() == hash) {\n                     txOut = tx;\n@@ -1172,12 +1172,12 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     return true;\n }\n \n-bool CBlock::ReadFromDisk(const CBlockIndex* pindex)\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n {\n-    if (!ReadFromDisk(pindex->GetBlockPos()))\n+    if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n-    if (GetHash() != pindex->GetBlockHash())\n-        return error(\"CBlock::ReadFromDisk() : GetHash() doesn't match index\");\n+    if (block.GetHash() != pindex->GetBlockHash())\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n     return true;\n }\n \n@@ -1886,7 +1886,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     vector<CTransaction> vResurrect;\n     BOOST_FOREACH(CBlockIndex* pindex, vDisconnect) {\n         CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n+        if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n         if (!block.DisconnectBlock(state, pindex, view))\n@@ -1906,7 +1906,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     vector<CTransaction> vDelete;\n     BOOST_FOREACH(CBlockIndex *pindex, vConnect) {\n         CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n+        if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n         if (!block.ConnectBlock(state, pindex, view)) {\n@@ -2736,8 +2736,8 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n             break;\n         CBlock block;\n         // check level 0: read from disk\n-        if (!block.ReadFromDisk(pindex))\n-            return error(\"VerifyDB() : *** block.ReadFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n+        if (!ReadBlockFromDisk(block, pindex))\n+            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !block.CheckBlock(state))\n             return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n@@ -2773,8 +2773,8 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n             boost::this_thread::interruption_point();\n             pindex = pindex->GetNextInMainChain();\n             CBlock block;\n-            if (!block.ReadFromDisk(pindex))\n-                return error(\"VerifyDB() : *** block.ReadFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n+            if (!ReadBlockFromDisk(block, pindex))\n+                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n             if (!block.ConnectBlock(state, pindex, coins))\n                 return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         }\n@@ -2884,7 +2884,7 @@ void PrintBlockTree()\n \n         // print item\n         CBlock block;\n-        block.ReadFromDisk(pindex);\n+        ReadBlockFromDisk(block, pindex);\n         printf(\"%d (blk%05u.dat:0x%x)  %s  tx %\"PRIszu\"\",\n             pindex->nHeight,\n             pindex->GetBlockPos().nFile, pindex->GetBlockPos().nPos,\n@@ -3108,7 +3108,7 @@ void static ProcessGetData(CNode* pfrom)\n                 if (mi != mapBlockIndex.end())\n                 {\n                     CBlock block;\n-                    block.ReadFromDisk((*mi).second);\n+                    ReadBlockFromDisk(block, (*mi).second);\n                     if (inv.type == MSG_BLOCK)\n                         pfrom->PushMessage(\"block\", block);\n                     else // MSG_FILTERED_BLOCK)"
      },
      {
        "sha": "3cd0143c6532208c9beb684a2106a2b3cebac7d4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 25,
        "deletions": 31,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7db120d5314578f7360c868bb937e779c33f113a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7db120d5314578f7360c868bb937e779c33f113a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7db120d5314578f7360c868bb937e779c33f113a",
        "patch": "@@ -682,33 +682,6 @@ class CBlock : public CBlockHeader\n         return hash;\n     }\n \n-\n-    bool ReadFromDisk(const CDiskBlockPos &pos)\n-    {\n-        SetNull();\n-\n-        // Open history file to read\n-        CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-        if (!filein)\n-            return error(\"CBlock::ReadFromDisk() : OpenBlockFile failed\");\n-\n-        // Read block\n-        try {\n-            filein >> *this;\n-        }\n-        catch (std::exception &e) {\n-            return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n-        }\n-\n-        // Check the header\n-        if (!CheckProofOfWork(GetHash(), nBits))\n-            return error(\"CBlock::ReadFromDisk() : errors in block header\");\n-\n-        return true;\n-    }\n-\n-\n-\n     void print() const\n     {\n         printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n@@ -739,9 +712,6 @@ class CBlock : public CBlockHeader\n     // Apply the effects of this block (with given index) on the UTXO set represented by coins\n     bool ConnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n \n-    // Read a block from disk\n-    bool ReadFromDisk(const CBlockIndex* pindex);\n-\n     // Add this block to the block index, and if necessary, switch the active block chain to this\n     bool AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos);\n \n@@ -756,7 +726,31 @@ class CBlock : public CBlockHeader\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n-\n+inline bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n+{    \n+    block.SetNull();\n+\n+    // Open history file to read\n+    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (!filein)\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : OpenBlockFile failed\");\n+\n+    // Read block\n+    try {\n+        filein >> block;\n+    }    \n+    catch (std::exception &e) {\n+        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+    }    \n+\n+    // Check the header\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : errors in block header\");\n+\n+    return true;\n+}    \n+\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n \n class CBlockFileInfo"
      },
      {
        "sha": "3c24016fe3ecbdf04c005580534ad14bea0fb188",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7db120d5314578f7360c868bb937e779c33f113a/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7db120d5314578f7360c868bb937e779c33f113a/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=7db120d5314578f7360c868bb937e779c33f113a",
        "patch": "@@ -163,7 +163,7 @@ Value getblock(const Array& params, bool fHelp)\n \n     CBlock block;\n     CBlockIndex* pblockindex = mapBlockIndex[hash];\n-    block.ReadFromDisk(pblockindex);\n+    ReadBlockFromDisk(block, pblockindex);\n \n     if (!fVerbose)\n     {"
      },
      {
        "sha": "488787f9672c20f49373c19388d7d4a5c1490e4b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7db120d5314578f7360c868bb937e779c33f113a/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7db120d5314578f7360c868bb937e779c33f113a/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7db120d5314578f7360c868bb937e779c33f113a",
        "patch": "@@ -804,7 +804,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             }\n \n             CBlock block;\n-            block.ReadFromDisk(pindex);\n+            ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n                 if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))"
      }
    ]
  },
  {
    "sha": "8031399494cc4cdf47fcaa9763282a930444033f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDMxMzk5NDk0Y2M0Y2RmNDdmY2FhOTc2MzI4MmE5MzA0NDQwMzNm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:21:33Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:34Z"
      },
      "message": "Moved ReadBlockFromDisk implementation to main.cpp",
      "tree": {
        "sha": "71cb9a46b9779e9b1e817aaad3b466529e4ea503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71cb9a46b9779e9b1e817aaad3b466529e4ea503"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8031399494cc4cdf47fcaa9763282a930444033f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8031399494cc4cdf47fcaa9763282a930444033f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8031399494cc4cdf47fcaa9763282a930444033f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8031399494cc4cdf47fcaa9763282a930444033f/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7db120d5314578f7360c868bb937e779c33f113a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7db120d5314578f7360c868bb937e779c33f113a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7db120d5314578f7360c868bb937e779c33f113a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 25,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7be5c5a79d3b58fbc223466c46116a968dcedb9d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8031399494cc4cdf47fcaa9763282a930444033f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8031399494cc4cdf47fcaa9763282a930444033f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8031399494cc4cdf47fcaa9763282a930444033f",
        "patch": "@@ -1172,6 +1172,30 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     return true;\n }\n \n+bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n+{\n+    block.SetNull();\n+\n+    // Open history file to read\n+    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (!filein)\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : OpenBlockFile failed\");\n+\n+    // Read block\n+    try {\n+        filein >> block;\n+    }\n+    catch (std::exception &e) {\n+        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+    }\n+\n+    // Check the header\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : errors in block header\");\n+\n+    return true;\n+}\n+\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n {\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))"
      },
      {
        "sha": "47a9fb33819f6904b1450c0248785177ab52737c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 24,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8031399494cc4cdf47fcaa9763282a930444033f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8031399494cc4cdf47fcaa9763282a930444033f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8031399494cc4cdf47fcaa9763282a930444033f",
        "patch": "@@ -726,30 +726,7 @@ class CBlock : public CBlockHeader\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n-inline bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n-{    \n-    block.SetNull();\n-\n-    // Open history file to read\n-    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-    if (!filein)\n-        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : OpenBlockFile failed\");\n-\n-    // Read block\n-    try {\n-        filein >> block;\n-    }    \n-    catch (std::exception &e) {\n-        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n-    }    \n-\n-    // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk(CBlock&, CDiskBlockPos&) : errors in block header\");\n-\n-    return true;\n-}    \n-\n+bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n "
      }
    ]
  },
  {
    "sha": "5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzM2M2VkNjIyZWY4ZTA2MGEzZTZmNjkxOGE4YjVlMDU3OThmMjFl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:32:58Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:34Z"
      },
      "message": "Pulled DisconnectBlock out of CBlock.",
      "tree": {
        "sha": "a23fd8b6e87ca9018c309dda760bf656f112eabc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a23fd8b6e87ca9018c309dda760bf656f112eabc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c363ed622ef8e060a3e6f6918a8b5e05798f21e/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8031399494cc4cdf47fcaa9763282a930444033f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8031399494cc4cdf47fcaa9763282a930444033f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8031399494cc4cdf47fcaa9763282a930444033f"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 16,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f5ea6b5daf57a66360cd7765805723aa320e94a0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c363ed622ef8e060a3e6f6918a8b5e05798f21e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c363ed622ef8e060a3e6f6918a8b5e05798f21e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
        "patch": "@@ -1603,7 +1603,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n \n \n-bool CBlock::DisconnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &view, bool *pfClean)\n+bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex == view.GetBestBlock());\n \n@@ -1619,12 +1619,12 @@ bool CBlock::DisconnectBlock(CValidationState &state, CBlockIndex *pindex, CCoin\n     if (!blockUndo.ReadFromDisk(pos, pindex->pprev->GetBlockHash()))\n         return error(\"DisconnectBlock() : failure reading undo data\");\n \n-    if (blockUndo.vtxundo.size() + 1 != vtx.size())\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n         return error(\"DisconnectBlock() : block and undo data inconsistent\");\n \n     // undo transactions in reverse order\n-    for (int i = vtx.size() - 1; i >= 0; i--) {\n-        const CTransaction &tx = vtx[i];\n+    for (int i = block.vtx.size() - 1; i >= 0; i--) {\n+        const CTransaction &tx = block.vtx[i];\n         uint256 hash = tx.GetHash();\n \n         // check that all outputs are available\n@@ -1913,7 +1913,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n-        if (!block.DisconnectBlock(state, pindex, view))\n+        if (!DisconnectBlock(block, state, pindex, view))\n             return error(\"SetBestBlock() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().c_str());\n         if (fBenchmark)\n             printf(\"- Disconnect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -2777,7 +2777,7 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= 2*nCoinCacheSize + 32000) {\n             bool fClean = true;\n-            if (!block.DisconnectBlock(state, pindex, coins, &fClean))\n+            if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n                 return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n             pindexState = pindex->pprev;\n             if (!fClean) {"
      },
      {
        "sha": "1822becde5f364ed0c5994d0c93608f95cc3d5c6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c363ed622ef8e060a3e6f6918a8b5e05798f21e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c363ed622ef8e060a3e6f6918a8b5e05798f21e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
        "patch": "@@ -703,12 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n-     *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n-     *  will be true if no problems were found. Otherwise, the return value will be false in case\n-     *  of problems. Note that in any case, coins may be modified. */\n-    bool DisconnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool *pfClean = NULL);\n-\n     // Apply the effects of this block (with given index) on the UTXO set represented by coins\n     bool ConnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n \n@@ -730,6 +724,16 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n \n+/** Functions for validating blocks and updating the block tree */\n+\n+/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n+ *  will be true if no problems were found. Otherwise, the return value will be false in case\n+ *  of problems. Note that in any case, coins may be modified. */\n+bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n+\n+\n+\n class CBlockFileInfo\n {\n public:"
      }
    ]
  },
  {
    "sha": "f3ae51dcced8a16175426051ce888130cc2493af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2FlNTFkY2NlZDhhMTYxNzU0MjYwNTFjZTg4ODEzMGNjMjQ5M2Fm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T01:50:06Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:35Z"
      },
      "message": "Pulled ConnectBlock out of CBlock.",
      "tree": {
        "sha": "8cb37e0d33c720ad19b0eb44d58c69e994a9d716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cb37e0d33c720ad19b0eb44d58c69e994a9d716"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3ae51dcced8a16175426051ce888130cc2493af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ae51dcced8a16175426051ce888130cc2493af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ae51dcced8a16175426051ce888130cc2493af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ae51dcced8a16175426051ce888130cc2493af/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c363ed622ef8e060a3e6f6918a8b5e05798f21e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c363ed622ef8e060a3e6f6918a8b5e05798f21e"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 23,
      "deletions": 22
    },
    "files": [
      {
        "sha": "a3355bd1091a32005c61c7436bf08e04fa7e8c4b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3ae51dcced8a16175426051ce888130cc2493af/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3ae51dcced8a16175426051ce888130cc2493af/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f3ae51dcced8a16175426051ce888130cc2493af",
        "patch": "@@ -1717,18 +1717,18 @@ void ThreadScriptCheck() {\n     scriptcheckqueue.Thread();\n }\n \n-bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsViewCache &view, bool fJustCheck)\n+bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(state, !fJustCheck, !fJustCheck))\n+    if (!block.CheckBlock(state, !fJustCheck, !fJustCheck))\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n     assert(pindex->pprev == view.GetBestBlock());\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (GetHash() == Params().HashGenesisBlock()) {\n+    if (block.GetHash() == Params().HashGenesisBlock()) {\n         view.SetBestBlock(pindex);\n         pindexGenesisBlock = pindex;\n         return true;\n@@ -1752,8 +1752,8 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n                           !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n-        for (unsigned int i=0; i<vtx.size(); i++) {\n-            uint256 hash = GetTxHash(i);\n+        for (unsigned int i = 0; i < block.vtx.size(); i++) {\n+            uint256 hash = block.GetTxHash(i);\n             if (view.HaveCoins(hash) && !view.GetCoins(hash).IsPruned())\n                 return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"));\n         }\n@@ -1774,12 +1774,12 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n     int64 nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(vtx.size()));\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(vtx.size());\n-    for (unsigned int i=0; i<vtx.size(); i++)\n+    vPos.reserve(block.vtx.size());\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n-        const CTransaction &tx = vtx[i];\n+        const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n@@ -1810,19 +1810,19 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n         }\n \n         CTxUndo txundo;\n-        UpdateCoins(tx, state, view, txundo, pindex->nHeight, GetTxHash(i));\n+        UpdateCoins(tx, state, view, txundo, pindex->nHeight, block.GetTxHash(i));\n         if (!tx.IsCoinBase())\n             blockundo.vtxundo.push_back(txundo);\n \n-        vPos.push_back(std::make_pair(GetTxHash(i), pos));\n+        vPos.push_back(std::make_pair(block.GetTxHash(i), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64 nTime = GetTimeMicros() - nStart;\n     if (fBenchmark)\n-        printf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)vtx.size(), 0.001 * nTime, 0.001 * nTime / vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n+        printf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)block.vtx.size(), 0.001 * nTime, 0.001 * nTime / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n-    if (GetValueOut(vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n-        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", GetValueOut(vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n+    if (GetValueOut(block.vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n+        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n \n     if (!control.Wait())\n         return state.DoS(100, false);\n@@ -1863,8 +1863,8 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n     assert(view.SetBestBlock(pindex));\n \n     // Watch for transactions paying to me\n-    for (unsigned int i=0; i<vtx.size(); i++)\n-        SyncWithWallets(GetTxHash(i), vtx[i], this, true);\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        SyncWithWallets(block.GetTxHash(i), block.vtx[i], &block, true);\n \n     return true;\n }\n@@ -1933,7 +1933,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n-        if (!block.ConnectBlock(state, pindex, view)) {\n+        if (!ConnectBlock(block, state, pindex, view)) {\n             if (state.IsInvalid()) {\n                 InvalidChainFound(pindexNew);\n                 InvalidBlockFound(pindex);\n@@ -2799,7 +2799,7 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n                 return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n-            if (!block.ConnectBlock(state, pindex, coins))\n+            if (!ConnectBlock(block, state, pindex, coins))\n                 return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         }\n     }\n@@ -4454,7 +4454,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache viewNew(*pcoinsTip, true);\n         CValidationState state;\n-        if (!pblock->ConnectBlock(state, &indexDummy, viewNew, true))\n+        if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n     }\n "
      },
      {
        "sha": "2c59644551363c6110691bf2888087ef0021c908",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3ae51dcced8a16175426051ce888130cc2493af/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3ae51dcced8a16175426051ce888130cc2493af/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f3ae51dcced8a16175426051ce888130cc2493af",
        "patch": "@@ -703,9 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    // Apply the effects of this block (with given index) on the UTXO set represented by coins\n-    bool ConnectBlock(CValidationState &state, CBlockIndex *pindex, CCoinsViewCache &coins, bool fJustCheck=false);\n-\n     // Add this block to the block index, and if necessary, switch the active block chain to this\n     bool AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos);\n \n@@ -732,6 +729,10 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n  *  of problems. Note that in any case, coins may be modified. */\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n+// Apply the effects of this block (with given index) on the UTXO set represented by coins\n+bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n+\n+\n \n \n class CBlockFileInfo"
      }
    ]
  },
  {
    "sha": "1959997afb0c710f238ae33fc8c656ab9b5470c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTU5OTk3YWZiMGM3MTBmMjM4YWUzM2ZjOGM2NTZhYjliNTQ3MGM4",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:00:18Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:35Z"
      },
      "message": "Pulled AddToBlockIndex out of CBlock.",
      "tree": {
        "sha": "b5dca96bb07627ca6055d0680b737a04bae09ad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5dca96bb07627ca6055d0680b737a04bae09ad7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1959997afb0c710f238ae33fc8c656ab9b5470c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1959997afb0c710f238ae33fc8c656ab9b5470c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1959997afb0c710f238ae33fc8c656ab9b5470c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1959997afb0c710f238ae33fc8c656ab9b5470c8/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3ae51dcced8a16175426051ce888130cc2493af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ae51dcced8a16175426051ce888130cc2493af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ae51dcced8a16175426051ce888130cc2493af"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d7388077ef56cc7b6a7da4da183417f2deaa2af7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1959997afb0c710f238ae33fc8c656ab9b5470c8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1959997afb0c710f238ae33fc8c656ab9b5470c8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1959997afb0c710f238ae33fc8c656ab9b5470c8",
        "patch": "@@ -2043,25 +2043,25 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n }\n \n \n-bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n+bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos& pos)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", hash.ToString().c_str()));\n \n     // Construct new block index object\n-    CBlockIndex* pindexNew = new CBlockIndex(*this);\n+    CBlockIndex* pindexNew = new CBlockIndex(block);\n     assert(pindexNew);\n     map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n-    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n     {\n         pindexNew->pprev = (*miPrev).second;\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n     }\n-    pindexNew->nTx = vtx.size();\n+    pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork().getuint256();\n     pindexNew->nChainTx = (pindexNew->pprev ? pindexNew->pprev->nChainTx : 0) + pindexNew->nTx;\n     pindexNew->nFile = pos.nFile;\n@@ -2082,7 +2082,7 @@ bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n         // Notify UI to display prev block's coinbase if it was ours\n         static uint256 hashPrevBestCoinBase;\n         UpdatedTransaction(hashPrevBestCoinBase);\n-        hashPrevBestCoinBase = GetTxHash(0);\n+        hashPrevBestCoinBase = block.GetTxHash(0);\n     }\n \n     if (!pblocktree->Flush())\n@@ -2314,7 +2314,7 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(*this, blockPos))\n                 return state.Abort(_(\"Failed to write block\"));\n-        if (!AddToBlockIndex(state, blockPos))\n+        if (!AddToBlockIndex(*this, state, blockPos))\n             return error(\"AcceptBlock() : AddToBlockIndex failed\");\n     } catch(std::runtime_error &e) {\n         return state.Abort(_(\"System error: \") + e.what());\n@@ -2852,7 +2852,7 @@ bool InitBlockIndex() {\n                 return error(\"LoadBlockIndex() : FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n                 return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n-            if (!block.AddToBlockIndex(state, blockPos))\n+            if (!AddToBlockIndex(block, state, blockPos))\n                 return error(\"LoadBlockIndex() : genesis block not accepted\");\n         } catch(std::runtime_error &e) {\n             return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());"
      },
      {
        "sha": "e44844a79ea005dddf964708b0dcd7dd5bb14383",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1959997afb0c710f238ae33fc8c656ab9b5470c8/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1959997afb0c710f238ae33fc8c656ab9b5470c8/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1959997afb0c710f238ae33fc8c656ab9b5470c8",
        "patch": "@@ -703,9 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    // Add this block to the block index, and if necessary, switch the active block chain to this\n-    bool AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos);\n-\n     // Context-independent validity checks\n     bool CheckBlock(CValidationState &state, bool fCheckPOW=true, bool fCheckMerkleRoot=true) const;\n \n@@ -732,6 +729,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n // Apply the effects of this block (with given index) on the UTXO set represented by coins\n bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n+// Add this block to the block index, and if necessary, switch the active block chain to this\n+bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos& pos);\n \n \n "
      }
    ]
  },
  {
    "sha": "38991ffa8ae627613fadaca8bbc14fcd820e0861",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODk5MWZmYThhZTYyNzYxM2ZhZGFjYThiYmMxNGZjZDgyMGUwODYx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:14:11Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:35Z"
      },
      "message": "Pulled CheckBlock out of CBlock.",
      "tree": {
        "sha": "39818cb34ec55f6ada29f26498ed8d6f31a44984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39818cb34ec55f6ada29f26498ed8d6f31a44984"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38991ffa8ae627613fadaca8bbc14fcd820e0861",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38991ffa8ae627613fadaca8bbc14fcd820e0861",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38991ffa8ae627613fadaca8bbc14fcd820e0861",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38991ffa8ae627613fadaca8bbc14fcd820e0861/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1959997afb0c710f238ae33fc8c656ab9b5470c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1959997afb0c710f238ae33fc8c656ab9b5470c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1959997afb0c710f238ae33fc8c656ab9b5470c8"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f14d2e51cdb9bb185b60b4a0ee10efd0a9065ac4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38991ffa8ae627613fadaca8bbc14fcd820e0861/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38991ffa8ae627613fadaca8bbc14fcd820e0861/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=38991ffa8ae627613fadaca8bbc14fcd820e0861",
        "patch": "@@ -1720,7 +1720,7 @@ void ThreadScriptCheck() {\n bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     // Check it again in case a previous version let a bad block in\n-    if (!block.CheckBlock(state, !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2188,59 +2188,59 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n }\n \n \n-bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerkleRoot) const\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context\n     // that can be verified before saving an orphan block.\n \n     // Size limits\n-    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n \n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n         return state.DoS(50, error(\"CheckBlock() : proof of work failed\"));\n \n     // Check timestamp\n-    if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n+    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n         return state.Invalid(error(\"CheckBlock() : block timestamp too far in the future\"));\n \n     // First transaction must be coinbase, the rest must not be\n-    if (vtx.empty() || !vtx[0].IsCoinBase())\n+    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n         return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"));\n-    for (unsigned int i = 1; i < vtx.size(); i++)\n-        if (vtx[i].IsCoinBase())\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (block.vtx[i].IsCoinBase())\n             return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"));\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n     // Build the merkle tree already. We need it anyway later, and it makes the\n     // block cache the transaction hashes, which means they don't need to be\n     // recalculated many times during this block's validation.\n-    BuildMerkleTree();\n+    block.BuildMerkleTree();\n \n     // Check for duplicate txids. This is caught by ConnectInputs(),\n     // but catching it earlier avoids a potential DoS attack:\n     set<uint256> uniqueTx;\n-    for (unsigned int i=0; i<vtx.size(); i++) {\n-        uniqueTx.insert(GetTxHash(i));\n+    for (unsigned int i = 0; i < block.vtx.size(); i++) {\n+        uniqueTx.insert(block.GetTxHash(i));\n     }\n-    if (uniqueTx.size() != vtx.size())\n+    if (uniqueTx.size() != block.vtx.size())\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"));\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n         return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkle root\n-    if (fCheckMerkleRoot && hashMerkleRoot != BuildMerkleTree())\n+    if (fCheckMerkleRoot && block.hashMerkleRoot != block.BuildMerkleTree())\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n \n     return true;\n@@ -2366,7 +2366,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().c_str()));\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock(state))\n+    if (!CheckBlock(*pblock, state))\n         return error(\"ProcessBlock() : CheckBlock FAILED\");\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n@@ -2763,7 +2763,7 @@ bool VerifyDB(int nCheckLevel, int nCheckDepth)\n         if (!ReadBlockFromDisk(block, pindex))\n             return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !block.CheckBlock(state))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, state))\n             return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {"
      },
      {
        "sha": "022c6ad0747a99dde34740a92193148acf90986f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38991ffa8ae627613fadaca8bbc14fcd820e0861/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38991ffa8ae627613fadaca8bbc14fcd820e0861/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=38991ffa8ae627613fadaca8bbc14fcd820e0861",
        "patch": "@@ -703,9 +703,6 @@ class CBlock : public CBlockHeader\n     }\n \n \n-    // Context-independent validity checks\n-    bool CheckBlock(CValidationState &state, bool fCheckPOW=true, bool fCheckMerkleRoot=true) const;\n-\n     // Store block on disk\n     // if dbp is provided, the file is known to already reside on disk\n     bool AcceptBlock(CValidationState &state, CDiskBlockPos *dbp = NULL);\n@@ -732,6 +729,9 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n // Add this block to the block index, and if necessary, switch the active block chain to this\n bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos& pos);\n \n+// Context-independent validity checks\n+bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+\n \n \n class CBlockFileInfo"
      },
      {
        "sha": "5675c40e7643b0ff2ade28d15acb3db9a5e3ed9f",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38991ffa8ae627613fadaca8bbc14fcd820e0861/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38991ffa8ae627613fadaca8bbc14fcd820e0861/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=38991ffa8ae627613fadaca8bbc14fcd820e0861",
        "patch": "@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(May15)\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(forkingBlock.CheckBlock(state, false, false));\n+        BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n     }\n \n     SetMockTime(0);"
      }
    ]
  },
  {
    "sha": "2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTRkMzQ2NGZkNWU2MWEzYzg5YTQ2ZDEyZjY3MjlhZWVhYzkxOWYx",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:27:02Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:35Z"
      },
      "message": "Pulled AcceptBlock out of CBlock.",
      "tree": {
        "sha": "ec774b7d131a60b1c2de0b8e544e5a07599976b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec774b7d131a60b1c2de0b8e544e5a07599976b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38991ffa8ae627613fadaca8bbc14fcd820e0861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38991ffa8ae627613fadaca8bbc14fcd820e0861",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38991ffa8ae627613fadaca8bbc14fcd820e0861"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 20,
      "deletions": 21
    },
    "files": [
      {
        "sha": "da928a4b908b3702eb22b85fcd8b27740a373509",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
        "patch": "@@ -2246,42 +2246,42 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n+bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return state.Invalid(error(\"AcceptBlock() : block already in mapBlockIndex\"));\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n     if (hash != Params().HashGenesisBlock()) {\n-        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n         pindexPrev = (*mi).second;\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (nBits != GetNextWorkRequired(pindexPrev, this))\n+        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n         // Check timestamp against prev\n-        if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+        if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n             return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"));\n \n         // Check that all transactions are finalized\n-        BOOST_FOREACH(const CTransaction& tx, vtx)\n-            if (!IsFinalTx(tx, nHeight, GetBlockTime()))\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+            if (!IsFinalTx(tx, nHeight, block.GetBlockTime()))\n                 return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n         if (!Checkpoints::CheckBlock(nHeight, hash))\n             return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\n \n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-        if (nVersion < 2)\n+        if (block.nVersion < 2)\n         {\n             if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n                 (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n@@ -2290,31 +2290,31 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n             }\n         }\n         // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-        if (nVersion >= 2)\n+        if (block.nVersion >= 2)\n         {\n             // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n             if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n                 (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n             {\n                 CScript expect = CScript() << nHeight;\n-                if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n+                if (!std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin()))\n                     return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n             }\n         }\n     }\n \n     // Write block to history file\n     try {\n-        unsigned int nBlockSize = ::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION);\n+        unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n         CDiskBlockPos blockPos;\n         if (dbp != NULL)\n             blockPos = *dbp;\n-        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, nTime, dbp != NULL))\n+        if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.nTime, dbp != NULL))\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n-            if (!WriteBlockToDisk(*this, blockPos))\n+            if (!WriteBlockToDisk(block, blockPos))\n                 return state.Abort(_(\"Failed to write block\"));\n-        if (!AddToBlockIndex(*this, state, blockPos))\n+        if (!AddToBlockIndex(block, state, blockPos))\n             return error(\"AcceptBlock() : AddToBlockIndex failed\");\n     } catch(std::runtime_error &e) {\n         return state.Abort(_(\"System error: \") + e.what());\n@@ -2407,7 +2407,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock(state, dbp))\n+    if (!AcceptBlock(*pblock, state, dbp))\n         return error(\"ProcessBlock() : AcceptBlock FAILED\");\n \n     // Recursively process any orphan blocks that depended on this one\n@@ -2423,7 +2423,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n             CBlock* pblockOrphan = (*mi).second;\n             // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan resolution (that is, feeding people an invalid block based on LegitBlockX in order to get anyone relaying LegitBlockX banned)\n             CValidationState stateDummy;\n-            if (pblockOrphan->AcceptBlock(stateDummy))\n+            if (AcceptBlock(*pblockOrphan, stateDummy))\n                 vWorkQueue.push_back(pblockOrphan->GetHash());\n             mapOrphanBlocks.erase(pblockOrphan->GetHash());\n             delete pblockOrphan;"
      },
      {
        "sha": "f85953c4f2ff0ca6137f31fc43597b52ae73d8c0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
        "patch": "@@ -701,11 +701,6 @@ class CBlock : public CBlockHeader\n             printf(\"%s \", vMerkleTree[i].ToString().c_str());\n         printf(\"\\n\");\n     }\n-\n-\n-    // Store block on disk\n-    // if dbp is provided, the file is known to already reside on disk\n-    bool AcceptBlock(CValidationState &state, CDiskBlockPos *dbp = NULL);\n };\n \n \n@@ -732,6 +727,10 @@ bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos\n // Context-independent validity checks\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+// Store block on disk\n+// if dbp is provided, the file is known to already reside on disk\n+bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp = NULL);\n+\n \n \n class CBlockFileInfo"
      }
    ]
  },
  {
    "sha": "33944573ca0c6b9be59b56e754de8f7238fa95f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzk0NDU3M2NhMGM2YjliZTU5YjU2ZTc1NGRlOGY3MjM4ZmE5NWY3",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:37:03Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-24T02:59:35Z"
      },
      "message": "Moved CBlock from main.h to core.h",
      "tree": {
        "sha": "d1384c2d8474c4e1c6e972029bbef812f2ba9e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1384c2d8474c4e1c6e972029bbef812f2ba9e9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33944573ca0c6b9be59b56e754de8f7238fa95f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33944573ca0c6b9be59b56e754de8f7238fa95f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33944573ca0c6b9be59b56e754de8f7238fa95f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33944573ca0c6b9be59b56e754de8f7238fa95f7/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a4d3464fd5e61a3c89a46d12f6729aeeac919f1"
      }
    ],
    "stats": {
      "total": 245,
      "additions": 123,
      "deletions": 122
    },
    "files": [
      {
        "sha": "fce9ccc162e6859ace996ee28105086d003f8975",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33944573ca0c6b9be59b56e754de8f7238fa95f7/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33944573ca0c6b9be59b56e754de8f7238fa95f7/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=33944573ca0c6b9be59b56e754de8f7238fa95f7",
        "patch": "@@ -733,4 +733,127 @@ class CBlockHeader\n     }\n };\n \n+\n+class CBlock : public CBlockHeader\n+{\n+public:\n+    // network and disk\n+    std::vector<CTransaction> vtx;\n+\n+    // memory only\n+    mutable std::vector<uint256> vMerkleTree;\n+\n+    CBlock()\n+    {\n+        SetNull();\n+    }\n+\n+    CBlock(const CBlockHeader &header)\n+    {\n+        SetNull();\n+        *((CBlockHeader*)this) = header;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        READWRITE(*(CBlockHeader*)this);\n+        READWRITE(vtx);\n+    )\n+\n+    void SetNull()\n+    {\n+        CBlockHeader::SetNull();\n+        vtx.clear();\n+        vMerkleTree.clear();\n+    }\n+\n+    CBlockHeader GetBlockHeader() const\n+    {\n+        CBlockHeader block;\n+        block.nVersion       = nVersion;\n+        block.hashPrevBlock  = hashPrevBlock;\n+        block.hashMerkleRoot = hashMerkleRoot;\n+        block.nTime          = nTime;\n+        block.nBits          = nBits;\n+        block.nNonce         = nNonce;\n+        return block;\n+    }\n+\n+    uint256 BuildMerkleTree() const\n+    {\n+        vMerkleTree.clear();\n+        BOOST_FOREACH(const CTransaction& tx, vtx)\n+            vMerkleTree.push_back(tx.GetHash());\n+        int j = 0;\n+        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+        {\n+            for (int i = 0; i < nSize; i += 2)\n+            {\n+                int i2 = std::min(i+1, nSize-1);\n+                vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n+                                           BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n+            }\n+            j += nSize;\n+        }\n+        return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n+    }\n+\n+    const uint256 &GetTxHash(unsigned int nIndex) const {\n+        assert(vMerkleTree.size() > 0); // BuildMerkleTree must have been called first\n+        assert(nIndex < vtx.size());\n+        return vMerkleTree[nIndex];\n+    }\n+\n+    std::vector<uint256> GetMerkleBranch(int nIndex) const\n+    {\n+        if (vMerkleTree.empty())\n+            BuildMerkleTree();\n+        std::vector<uint256> vMerkleBranch;\n+        int j = 0;\n+        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n+        {\n+            int i = std::min(nIndex^1, nSize-1);\n+            vMerkleBranch.push_back(vMerkleTree[j+i]);\n+            nIndex >>= 1;\n+            j += nSize;\n+        }\n+        return vMerkleBranch;\n+    }\n+\n+    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n+    {\n+        if (nIndex == -1)\n+            return 0;\n+        BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n+        {\n+            if (nIndex & 1)\n+                hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n+            else\n+                hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n+            nIndex >>= 1;\n+        }\n+        return hash;\n+    }\n+\n+    void print() const\n+    {\n+        printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n+            GetHash().ToString().c_str(),\n+            nVersion,\n+            hashPrevBlock.ToString().c_str(),\n+            hashMerkleRoot.ToString().c_str(),\n+            nTime, nBits, nNonce,\n+            vtx.size());\n+        for (unsigned int i = 0; i < vtx.size(); i++)\n+        {\n+            printf(\"  \");\n+            vtx[i].print();\n+        }\n+        printf(\"  vMerkleTree: \");\n+        for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n+            printf(\"%s \", vMerkleTree[i].ToString().c_str());\n+        printf(\"\\n\");\n+    }\n+};\n+\n #endif"
      },
      {
        "sha": "9e0235fa57b853cd903c9881ae3e4da3c3e6849a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 122,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33944573ca0c6b9be59b56e754de8f7238fa95f7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33944573ca0c6b9be59b56e754de8f7238fa95f7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=33944573ca0c6b9be59b56e754de8f7238fa95f7",
        "patch": "@@ -581,128 +581,6 @@ class CPartialMerkleTree\n };\n \n \n-class CBlock : public CBlockHeader\n-{\n-public:\n-    // network and disk\n-    std::vector<CTransaction> vtx;\n-\n-    // memory only\n-    mutable std::vector<uint256> vMerkleTree;\n-\n-    CBlock()\n-    {\n-        SetNull();\n-    }\n-\n-    CBlock(const CBlockHeader &header)\n-    {\n-        SetNull();\n-        *((CBlockHeader*)this) = header;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(*(CBlockHeader*)this);\n-        READWRITE(vtx);\n-    )\n-\n-    void SetNull()\n-    {\n-        CBlockHeader::SetNull();\n-        vtx.clear();\n-        vMerkleTree.clear();\n-    }\n-\n-    CBlockHeader GetBlockHeader() const\n-    {\n-        CBlockHeader block;\n-        block.nVersion       = nVersion;\n-        block.hashPrevBlock  = hashPrevBlock;\n-        block.hashMerkleRoot = hashMerkleRoot;\n-        block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n-        return block;\n-    }\n-\n-    uint256 BuildMerkleTree() const\n-    {\n-        vMerkleTree.clear();\n-        BOOST_FOREACH(const CTransaction& tx, vtx)\n-            vMerkleTree.push_back(tx.GetHash());\n-        int j = 0;\n-        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-        {\n-            for (int i = 0; i < nSize; i += 2)\n-            {\n-                int i2 = std::min(i+1, nSize-1);\n-                vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n-                                           BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n-            }\n-            j += nSize;\n-        }\n-        return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n-    }\n-\n-    const uint256 &GetTxHash(unsigned int nIndex) const {\n-        assert(vMerkleTree.size() > 0); // BuildMerkleTree must have been called first\n-        assert(nIndex < vtx.size());\n-        return vMerkleTree[nIndex];\n-    }\n-\n-    std::vector<uint256> GetMerkleBranch(int nIndex) const\n-    {\n-        if (vMerkleTree.empty())\n-            BuildMerkleTree();\n-        std::vector<uint256> vMerkleBranch;\n-        int j = 0;\n-        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-        {\n-            int i = std::min(nIndex^1, nSize-1);\n-            vMerkleBranch.push_back(vMerkleTree[j+i]);\n-            nIndex >>= 1;\n-            j += nSize;\n-        }\n-        return vMerkleBranch;\n-    }\n-\n-    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n-    {\n-        if (nIndex == -1)\n-            return 0;\n-        BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n-        {\n-            if (nIndex & 1)\n-                hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n-            else\n-                hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n-            nIndex >>= 1;\n-        }\n-        return hash;\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n-            GetHash().ToString().c_str(),\n-            nVersion,\n-            hashPrevBlock.ToString().c_str(),\n-            hashMerkleRoot.ToString().c_str(),\n-            nTime, nBits, nNonce,\n-            vtx.size());\n-        for (unsigned int i = 0; i < vtx.size(); i++)\n-        {\n-            printf(\"  \");\n-            vtx[i].print();\n-        }\n-        printf(\"  vMerkleTree: \");\n-        for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n-            printf(\"%s \", vMerkleTree[i].ToString().c_str());\n-        printf(\"\\n\");\n-    }\n-};\n-\n \n /** Functions for disk access for blocks */\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);"
      }
    ]
  }
]