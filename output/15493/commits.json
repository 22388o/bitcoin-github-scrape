[
  {
    "sha": "1cf795de7e7f263b19ddce8c4568941f23a284f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2Y3OTVkZTdlN2YyNjNiMTlkZGNlOGM0NTY4OTQxZjIzYTI4NGYz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-27T10:06:13Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-27T10:08:56Z"
      },
      "message": "Add -printconfig arg to bitcoind",
      "tree": {
        "sha": "632b6126b70679574a6446be66d534d7bc934c1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/632b6126b70679574a6446be66d534d7bc934c1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cf795de7e7f263b19ddce8c4568941f23a284f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cf795de7e7f263b19ddce8c4568941f23a284f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cf795de7e7f263b19ddce8c4568941f23a284f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cf795de7e7f263b19ddce8c4568941f23a284f3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eed66c0c22c4ee8b313433186a7da912fdce1200",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cf795de7e7f263b19ddce8c4568941f23a284f3/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cf795de7e7f263b19ddce8c4568941f23a284f3/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=1cf795de7e7f263b19ddce8c4568941f23a284f3",
        "patch": "@@ -112,6 +112,12 @@ static bool AppInit(int argc, char* argv[])\n             return false;\n         }\n \n+        if (gArgs.IsArgSet(\"-printconfig\")) {\n+            fprintf(stdout, \" datadir:   %s\\n\", GetDataDir(false).c_str());\n+            fprintf(stdout, \" blocksdir: %s\\n\", GetBlocksDir().c_str());\n+            return true;\n+        }\n+\n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {"
      },
      {
        "sha": "add1b47f96ac929befcbeeb294ed1337c4927283",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cf795de7e7f263b19ddce8c4568941f23a284f3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cf795de7e7f263b19ddce8c4568941f23a284f3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1cf795de7e7f263b19ddce8c4568941f23a284f3",
        "patch": "@@ -371,6 +371,7 @@ void SetupServerArgs()\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-printconfig\", \"Print config and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify blocks directory (default: <datadir>/blocks)\", false, OptionsCategory::OPTIONS);"
      }
    ]
  },
  {
    "sha": "c77fb0934c415efec3a8f501bf723314ea8e51b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzdmYjA5MzRjNDE1ZWZlYzNhOGY1MDFiZjcyMzMxNGVhOGU1MWIz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:07:06Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:14:07Z"
      },
      "message": "wip: basic support and -listen and -disablewallet",
      "tree": {
        "sha": "8b139fa713c985a337f0d56d49557ca6384e132b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b139fa713c985a337f0d56d49557ca6384e132b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c77fb0934c415efec3a8f501bf723314ea8e51b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77fb0934c415efec3a8f501bf723314ea8e51b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c77fb0934c415efec3a8f501bf723314ea8e51b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77fb0934c415efec3a8f501bf723314ea8e51b3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cf795de7e7f263b19ddce8c4568941f23a284f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cf795de7e7f263b19ddce8c4568941f23a284f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cf795de7e7f263b19ddce8c4568941f23a284f3"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 74,
      "deletions": 12
    },
    "files": [
      {
        "sha": "001d4a64292f68be38806965501115a4cd7df793",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=c77fb0934c415efec3a8f501bf723314ea8e51b3",
        "patch": "@@ -112,12 +112,6 @@ static bool AppInit(int argc, char* argv[])\n             return false;\n         }\n \n-        if (gArgs.IsArgSet(\"-printconfig\")) {\n-            fprintf(stdout, \" datadir:   %s\\n\", GetDataDir(false).c_str());\n-            fprintf(stdout, \" blocksdir: %s\\n\", GetBlocksDir().c_str());\n-            return true;\n-        }\n-\n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n@@ -146,6 +140,10 @@ static bool AppInit(int argc, char* argv[])\n             // InitError will have been called with detailed error, which ends up on console\n             return false;\n         }\n+        if (gArgs.IsArgSet(\"-printconfig\")) {\n+            gArgs.Print();\n+            return true;\n+        }\n         if (gArgs.GetBoolArg(\"-daemon\", false))\n         {\n #if HAVE_DECL_DAEMON"
      },
      {
        "sha": "2b4fdd95c9e49faa5db324df9b74fa35e957f260",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c77fb0934c415efec3a8f501bf723314ea8e51b3",
        "patch": "@@ -417,7 +417,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", DEFAULT_LISTEN, \"Accept connections from outside (default: 1 if no -proxy or -connect)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n@@ -802,7 +802,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -discover=0\\n\", __func__);\n     }\n \n-    if (!gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+    if (!gArgs.GetBoolArg(\"-listen\")) {\n         // do not map ports or try to retrieve public IP when not listening (pointless)\n         if (gArgs.SoftSetBoolArg(\"-upnp\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -upnp=0\\n\", __func__);\n@@ -963,7 +963,7 @@ bool AppInitParameterInteraction()\n \n     // -bind and -whitebind can't be set when not listening\n     size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n-    if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n+    if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\")) {\n         return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n     }\n \n@@ -1410,7 +1410,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // see Step 2: parameter interactions for more information about these\n-    fListen = gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n+    fListen = gArgs.GetBoolArg(\"-listen\");\n     fDiscover = gArgs.GetBoolArg(\"-discover\", true);\n     fRelayTxes = !gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY);\n "
      },
      {
        "sha": "1af1d79642dbb3c9fcc987223c2b312616dca6c9",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=c77fb0934c415efec3a8f501bf723314ea8e51b3",
        "patch": "@@ -320,6 +320,50 @@ ArgsManager::ArgsManager() :\n     // nothing to do\n }\n \n+void ArgsManager::Print() const\n+{\n+    fprintf(stdout, \" datadir:   %s\\n\", GetDataDir(false).c_str());\n+    fprintf(stdout, \" blocksdir: %s\\n\", GetBlocksDir().c_str());\n+\n+    LOCK(cs_args);\n+\n+    {\n+      fprintf(stdout, \"---------\\n\");\n+      for (auto x : m_config_args) {\n+        for (auto y : x.second) {\n+            fprintf(stdout, \" * %s: %s\\n\", x.first.c_str(), y.c_str());\n+        }\n+      }\n+    }\n+    {\n+      fprintf(stdout, \"---------\\n\");\n+      for (auto x : m_override_args) {\n+        for (auto y : x.second) {\n+            fprintf(stdout, \" * %s: %s\\n\", x.first.c_str(), y.c_str());\n+        }\n+      }\n+    }\n+    {\n+        fprintf(stdout, \"---------\\n\");\n+        for (auto x : m_available_args) {\n+            for (auto y : x.second) {\n+                if (!y.second.default_value) continue;\n+                fprintf(stdout, \"%s=\", y.first.c_str());\n+                auto default_value = *y.second.default_value;\n+                if (default_value.which() == 0) {\n+                    fprintf(stdout, GetBoolArg(y.first, boost::get<bool>(default_value)) ? \"true\" : \"false\");\n+                }\n+                printf(\"\\n\");\n+                // for (auto z : ) {\n+                //     fprintf(stdout, \" * %s: %s\\n\", y.first.c_str(), z.c_str());\n+                // }\n+            }\n+        }\n+    }\n+\n+    //std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n+\n+}\n const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n {\n     std::set<std::string> unsuitables;\n@@ -553,6 +597,21 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, const\n     assert(ret.second); // Make sure an insertion actually happened\n }\n \n+void ArgsManager::AddArg(const std::string& name, bool default_value, const std::string& help, const bool debug_only, const OptionsCategory& cat)\n+{\n+    // Split arg name from its help param\n+    size_t eq_index = name.find('=');\n+    if (eq_index == std::string::npos) {\n+        eq_index = name.size();\n+    }\n+\n+    LOCK(cs_args);\n+    std::map<std::string, Arg>& arg_map = m_available_args[cat];\n+    auto ret = arg_map.emplace(name.substr(0, eq_index), Arg(name.substr(eq_index, name.size() - eq_index), help, debug_only));\n+    ret.first->second.default_value = default_value;\n+    assert(ret.second); // Make sure an insertion actually happened\n+}\n+\n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n {\n     for (const std::string& name : names) {"
      },
      {
        "sha": "452ae8d143299f7741106da8455282460e745eb0",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=c77fb0934c415efec3a8f501bf723314ea8e51b3",
        "patch": "@@ -34,7 +34,9 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/optional.hpp>\n #include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n+#include <boost/variant.hpp>\n \n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();\n@@ -137,7 +139,7 @@ class ArgsManager\n         std::string m_help_param;\n         std::string m_help_text;\n         bool m_debug_only;\n-\n+        boost::optional<boost::variant<bool, std::string, int64_t>> default_value;\n         Arg(const std::string& help_param, const std::string& help_text, bool debug_only) : m_help_param(help_param), m_help_text(help_text), m_debug_only(debug_only) {};\n     };\n \n@@ -259,6 +261,7 @@ class ArgsManager\n      * Add argument\n      */\n     void AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat);\n+    void AddArg(const std::string& name, bool default_value, const std::string& help, const bool debug_only, const OptionsCategory& cat);\n \n     /**\n      * Add many hidden arguments\n@@ -282,6 +285,8 @@ class ArgsManager\n      * Check whether we know of this arg\n      */\n     bool IsArgKnown(const std::string& key) const;\n+\n+    void Print() const;\n };\n \n extern ArgsManager gArgs;"
      },
      {
        "sha": "19f37997f9c59bab064d830ae1021b4c17e8b389",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77fb0934c415efec3a8f501bf723314ea8e51b3/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=c77fb0934c415efec3a8f501bf723314ea8e51b3",
        "patch": "@@ -40,7 +40,7 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)\", DEFAULT_AVOIDPARTIALSPENDS), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET, \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\",\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), false, OptionsCategory::WALLET);"
      }
    ]
  },
  {
    "sha": "f16e7ddba8f6006c7719f6ac7952d45b9393a915",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTZlN2RkYmE4ZjYwMDZjNzcxOWY2YWM3OTUyZDQ1YjkzOTNhOTE1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:15:20Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:15:20Z"
      },
      "message": "Refactor -rest default value",
      "tree": {
        "sha": "898e4cd10143a441a0222fa81a54237ff1a48e9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/898e4cd10143a441a0222fa81a54237ff1a48e9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f16e7ddba8f6006c7719f6ac7952d45b9393a915",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f16e7ddba8f6006c7719f6ac7952d45b9393a915",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f16e7ddba8f6006c7719f6ac7952d45b9393a915",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f16e7ddba8f6006c7719f6ac7952d45b9393a915/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c77fb0934c415efec3a8f501bf723314ea8e51b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77fb0934c415efec3a8f501bf723314ea8e51b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c77fb0934c415efec3a8f501bf723314ea8e51b3"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ba8b8f0c4932b935676dc8206ce74b29352e2de1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f16e7ddba8f6006c7719f6ac7952d45b9393a915/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f16e7ddba8f6006c7719f6ac7952d45b9393a915/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f16e7ddba8f6006c7719f6ac7952d45b9393a915",
        "patch": "@@ -527,7 +527,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n     gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n \n-    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rest\", DEFAULT_REST_ENABLE, strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", false, OptionsCategory::RPC);\n@@ -762,7 +762,7 @@ static bool AppInitServers()\n     StartRPC();\n     if (!StartHTTPRPC())\n         return false;\n-    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST();\n+    if (gArgs.GetBoolArg(\"-rest\")) StartREST();\n     StartHTTPServer();\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmY0M2FmNGUyMGU3OWNiY2IyOWI1M2RjMmEzOGI5YzRmNmE4YWY1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:16:51Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:16:51Z"
      },
      "message": "Refactor -stopafterblockimport default value",
      "tree": {
        "sha": "8df7a5a23c37691e15f3ff2ae37355cb0c372fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8df7a5a23c37691e15f3ff2ae37355cb0c372fdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f16e7ddba8f6006c7719f6ac7952d45b9393a915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f16e7ddba8f6006c7719f6ac7952d45b9393a915",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f16e7ddba8f6006c7719f6ac7952d45b9393a915"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "74293129d3f2abc8ec782d5e8eca4756b5084240",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5",
        "patch": "@@ -485,7 +485,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT, strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n@@ -719,7 +719,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n         return;\n     }\n \n-    if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n+    if (gArgs.GetBoolArg(\"-stopafterblockimport\")) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n         return;"
      }
    ]
  },
  {
    "sha": "48eed1537270780ef23bb1838ddca983ab3dcc7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGVlZDE1MzcyNzA3ODBlZjIzYmIxODM4ZGRjYTk4M2FiM2RjYzdj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:17:49Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-15T21:17:49Z"
      },
      "message": "Refactor -logtimestamps default value",
      "tree": {
        "sha": "d48433698f0bb821fe383942c8b29a96c6a6023b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d48433698f0bb821fe383942c8b29a96c6a6023b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48eed1537270780ef23bb1838ddca983ab3dcc7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48eed1537270780ef23bb1838ddca983ab3dcc7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48eed1537270780ef23bb1838ddca983ab3dcc7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48eed1537270780ef23bb1838ddca983ab3dcc7c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f43af4e20e79cbcb29b53dc2a38b9c4f6a8af5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "35bbd79cdb432f2f4c53914dcf2696f6dc548402",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48eed1537270780ef23bb1838ddca983ab3dcc7c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48eed1537270780ef23bb1838ddca983ab3dcc7c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=48eed1537270780ef23bb1838ddca983ab3dcc7c",
        "patch": "@@ -496,7 +496,7 @@ void SetupServerArgs()\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS, strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n@@ -866,7 +866,7 @@ void InitLogging()\n     LogPrintf(\"\\n\\n\\n\\n\\n\");\n \n     LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n-    LogInstance().m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n+    LogInstance().m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\");\n     LogInstance().m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n \n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);"
      }
    ]
  }
]