laanwj,2016-04-20T14:20:57Z,"Good to see this!\n\n> All blocks are read twice from disk during reindex (once to rebuild the index, once to activate)\n\nCould this (theoretically) be avoided by just reading the header during the initial scan? after all, the extra header that we tack on includes the size of the block, so we could skip the rest the first time.\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212445219,212445219,
sipa,2016-04-20T14:22:33Z,"@laanwj Yes, I've considered that. That could lead to an inconsistent block index though (as in: I'm not sure whether there are any internal assumptions that all entries in the block index are valid).\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212445689,212445689,
jonasschnelli,2016-04-20T14:23:17Z,Nice. Concept ACK.\nTesting this now on a mainnet node -reindex.\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212445907,212445907,
sipa,2016-04-20T14:25:20Z,"@laanwj Another problem with that approach: say you get a block corrupted near the chain tip on disk, you find it and do a reindex. You expect it to reindex up to that corrupted block and then start back from network. Instead, if you don't do transaction validation during the rebuild loop, it may happily add the block to the index, and have activation fail (making it mark the chain as invalid).\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212446727,212446727,
laanwj,2016-04-20T14:27:15Z,"Yes, it would be quite more complex to handle those issues well.\nIn any case if the speed-up is more than the extra disk i/o that this generates takes, it doesn't matter, no need to worry about it in this pull. \n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212447439,212447439,
sipa,2016-04-20T14:30:54Z,"@jonasschnelli If you feel like benchmarking, an interesting thing to test is (reindex on master) vs (deleting chainstate on this PR), both with signature checks hackishly disabled. Deleting of chainstate caused a very slow, foreground, and (before #7821) uninterruptible process earlier. With this PR is should be (nearly) the same speed as an old reindex.\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212448503,212448503,
sipa,2016-04-20T14:39:19Z,"Would it be useful to have a -weakreindex or -rebuild now, which does not throw out the block index, and only the chainstate? That would be faster, as it wouldn't need the rebuild phase.\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212451342,212451342,
laanwj,2016-04-20T15:37:03Z,"> Would it be useful to have a -weakreindex or -rebuild now, which does not throw out the block index, and only the chainstate? That would be faster, as it wouldn't need the rebuild phase.\n\nWould need better reporting about what database is corrupted for that to be useful to end-users. But even without that I can see that being very useful for benchmarking the UTXO database.\n\nI like the idea o",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212481137,212481137,
sipa,2016-04-20T15:41:23Z,"> I like the idea of being able to rebuild databases separately. What about the other way around? If you have a UTXO set, but want to reindex the block chain? (e.g. when switching a pruned node to a non-pruned one by copying block data from another node)\n\nYou can just overwrite your blocks/ database with another version (including its index), as long as it has your currently active chain in it.\",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212482450,212482450,
sipa,2016-04-20T16:02:50Z,"> If it was up to me I wouldn't use the name 'weakindex' or 'rebuid' (that's another one for the rescan, reindex, re.... category of vaguenes) but call it what it is:  `-rebuild-blockindex` `-rebuild-chainstate` etc (using the same name as the db directory names).\n\n`-rebuild-chainstate` sounds like an excellent idea. I don't know what `-rebuild-blockindex` would mean though... \n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212490726,212490726,
sipa,2016-04-21T12:17:47Z,"Added a commit to implement -reindex-chainstate.\n\nI guess the semantics for -reindex-blockindex could be:\n- Rebuild the block index without rebuilding the chainstate\n- If afterwards the chainstate's tip is in the resulting block index, mark every block on the best chain as validated and pretend nothing happened\n- If not, wipe the chainstate and rebuild that as well.\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212888289,212888289,
laanwj,2016-04-21T12:23:21Z,"> I don't know what -rebuild-blockindex would mean though...\n\nThat hypothetical option would rebuild the blockindex database, say after some new-fangled corruption check detects that that database was corrupted.\n- Throw away the block index (so the database in blocks/index)\n- Reindex blocks\n\nBut don't touch the chain state in any way, it is assumed to be still good. If the best chain is not ",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-212892025,212892025,
dcousens,2016-04-22T00:03:29Z,concept ACK `-(rebuild|reindex)-*`\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-213165405,213165405,
sipa,2016-04-22T10:24:45Z,"I tried implementing -reindex-blockindex, but it is significantly harder: it would mean first initializing with a dummy chainstate, then reindexing the blockindex while leaving the original chainstate untouched, then stopping the node, loading the real chainstate, marking the blocks along the best chain as valid (or fail if not found anymore), and starting the node again.\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-213370423,213370423,
laanwj,2016-04-26T13:09:34Z,Going to test this\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-214735466,214735466,
laanwj,2016-04-26T13:29:12Z,"Not sure if this is expected behavior, it's probably harmless; but during the ""Reindexing block file"" initial scan, rev*.dat files are created with size 0:\n\n```\n-rw------- 1 user user         0 Apr 26 15:26 rev00415.dat\n-rw------- 1 user user         0 Apr 26 15:26 rev00416.dat\n-rw------- 1 user user         0 Apr 26 15:26 rev00417.dat\n-rw------- 1 user user         0 Apr 26 15:26 rev00418.d",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-214744957,214744957,
laanwj,2016-04-26T17:58:28Z,Did a reindex of my test chain using this patch:\n\n```\n2016-04-26 13:07:36 Reindexing block file blk00000.dat...\n2016-04-26 13:32:16 UpdateTip: new best=00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048 height=1 version=0x00000001 log2_work=33.000022 tx=2 date='2009-01-09 02:54:25' progress=0.000000 cache=0.0MiB(1tx)\n2016-04-26 17:44:18 UpdateTip: new best=00000000000000000360e6,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-214829344,214829344,
jonasschnelli,2016-04-28T09:05:03Z,"Tested on a mainnet node:\n\n``` bash\njonasschnelli@bitcoinsrv:~/.bitcoin$ cat debug.log | grep ""Bitcoin version\|Reindexing finished\|height=409149""\n2016-04-27 14:11:51 Bitcoin version v0.12.99.0-fb682d7 (2016-04-27 15:34:26 +0200)\n2016-04-27 14:34:17 Reindexing finished\n2016-04-27 18:52:50 UpdateTip: new best=000000000000000000c2963b062bebef4beff8ef38ae5d81e7ccfa8e05abcb1a height=409149 vers",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-215359356,215359356,
sipa,2016-04-28T14:19:41Z,Added GUI progress reporting\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-215439586,215439586,
sipa,2016-05-01T21:22:18Z,"The two phases in the GUI:\n\n![reindexing](https://cloud.githubusercontent.com/assets/548488/14944444/4bfa1c44-0ff3-11e6-8edc-89e52afc9402.png)\n![processing](https://cloud.githubusercontent.com/assets/548488/14944447/5077fd0e-0ff3-11e6-87c9-b8c81051a2b4.png)\n\nIf the chainstate is ahead of the block index at startup, you get the same ""Processing blocks on disk"" now, while the main GUI is runnin",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-216073555,216073555,
laanwj,2016-05-02T11:22:05Z,@sipa Very nice!\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-216208640,216208640,
jonasschnelli,2016-05-02T13:50:13Z,"Just started to sync with master+thisPR a new node over the GUI on Ubuntu 16.04 with dbcache=3500 and got this:\n\n<img width=""942"" alt=""bildschirmfoto 2016-05-02 um 15 41 44"" src=""https://cloud.githubusercontent.com/assets/178464/14955936/7df03122-107d-11e6-80da-a5412df8f9dc.png"">\n\nThe GUI used `chainActive.tip()`. Is this no longer updated continuously?\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-216240762,216240762,
sipa,2016-05-05T16:56:06Z,@jonasschnelli I added another commit that hopefully fixes that (untested).\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-217209683,217209683,
sipa,2016-05-09T18:38:20Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-217950762,217950762,
jonasschnelli,2016-05-10T07:54:27Z,"Just started a Qt reindex with https://bitcoin.jonasschnelli.ch/pulls/7917/ (7ac4114).\nThe debug window shows 0 as current number of blocks (is this intentional?).\nThe progress bar in the main window is updating.\n\n<img width=""1078"" alt=""bildschirmfoto 2016-05-10 um 09 52 04"" src=""https://cloud.githubusercontent.com/assets/178464/15139236/2a40285c-1695-11e6-9f58-ce53f33c652d.png"">\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-218084456,218084456,
jonasschnelli,2016-05-10T09:41:43Z,After a while it started updating the debug window (maybe after first reindex [chain index] phase).\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-218108615,218108615,
laanwj,2016-05-10T09:50:27Z,"During the first phase the number of blocks will be 0, that makes sense. I guess it could show the longest header chain as well in the debug window, but right now it only shows what is fully validated.\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-218110609,218110609,
laanwj,2016-05-10T09:55:39Z,"Hm but I see the same behavior, reindexing a regtest chain.\nLog shows:\n\n```\n2016-05-10 09:53:32 UpdateTip: new best=57d8789c33ee61db98c8b87076cae5c637056bff4a4c340b3ef28e9bc853a4a3 height=250 version=0x00000003 log2_work=8.9715436 tx=251 date='2015-06-23 12:20:30' progress=1.000000 cache=0.1MiB(250tx)\n```\n\nWhile the current number of blocks in the debug window is still at 1.\nSame for the o",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-218111731,218111731,
laanwj,2016-05-10T10:05:41Z,"In my case it is a problem is in the rate limiting in BlockTipChanged. \nIf the updating goes too fast, it will only send a signal for the initial value.\n\n```\nif (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n```\n\nThis is not new in this patch, just exposed by the new syncing behavior. I think we should move ahead with this and solve the UI issues separately.\",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-218114067,218114067,
sipa,2016-05-15T19:53:14Z,@laanwj @jonasschnelli Added another commit to make header updates not compete for rate limiting with block updates.\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-219306764,219306764,
sipa,2016-05-16T22:46:25Z,Squashed and rebased.\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-219571102,219571102,
pstratem,2016-05-17T01:58:58Z,utACK fb8fad1586ced69fa37c665a11916ae4c4d0df05\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-219600004,219600004,
pstratem,2016-05-17T03:00:35Z,utACK d3d75479115bc3480f163df774ee9dd2f8bd9f54\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-219607537,219607537,
pstratem,2016-05-17T03:08:36Z,very untested ACK b4d24e142e25a21c78ab74146c3520f2259fd7c2 (sanity not guaranteed)\n,https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-219608385,219608385,
pstratem,2016-05-17T03:29:25Z,"On a related note access to chainActive immediately after threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles)); is not protected by cs_main\n",https://github.com/bitcoin/bitcoin/pull/7917#issuecomment-219610650,219610650,
laanwj,2016-04-27T09:22:57Z,Shouldn't this error be fatal?\n,https://github.com/bitcoin/bitcoin/pull/7917#discussion_r61227711,61227711,src/init.cpp
MarcoFalke,2016-05-16T10:45:12Z,Does this require mention in the `-debug=<category>` help text?  \n,https://github.com/bitcoin/bitcoin/pull/7917#discussion_r63336790,63336790,src/main.cpp
sipa,2016-05-16T22:38:40Z,Agree!\n,https://github.com/bitcoin/bitcoin/pull/7917#discussion_r63438123,63438123,src/main.cpp
rebroad,2021-09-07T11:48:23Z,"This variable seems to be initialized here, but there's nowhere in the code where it's ever updated, and yet it is checked as if the value might change.",https://github.com/bitcoin/bitcoin/pull/7917#discussion_r703438955,703438955,src/qt/clientmodel.cpp
MarcoFalke,2021-09-07T11:54:24Z,"Please don't use more than 5 year old pull requests to ask beginner programming questions.\n\nYou can open a new issue, if you are absolutely unable to find the answer yourself.\n\nIn this case it is updated via a reference (a reference is like a pointer).",https://github.com/bitcoin/bitcoin/pull/7917#discussion_r703442949,703442949,src/qt/clientmodel.cpp
