[
  {
    "sha": "d253ec4baa21cc292cf72d453f71b4043b53e591",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjUzZWM0YmFhMjFjYzI5MmNmNzJkNDUzZjcxYjQwNDNiNTNlNTkx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T12:53:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-16T22:40:55Z"
      },
      "message": "Make ProcessNewBlock dbp const and update comment",
      "tree": {
        "sha": "afe9cea25c59f4ec2d896bd75320dd1e8a52e832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afe9cea25c59f4ec2d896bd75320dd1e8a52e832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d253ec4baa21cc292cf72d453f71b4043b53e591",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d253ec4baa21cc292cf72d453f71b4043b53e591",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d253ec4baa21cc292cf72d453f71b4043b53e591",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d253ec4baa21cc292cf72d453f71b4043b53e591/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3e42b6d02e8d19658a9135e427ebceab5367779",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3e42b6d02e8d19658a9135e427ebceab5367779",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3e42b6d02e8d19658a9135e427ebceab5367779"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "981d987711731b6d6d4fdb6796112b450687cacb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d253ec4baa21cc292cf72d453f71b4043b53e591/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d253ec4baa21cc292cf72d453f71b4043b53e591/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d253ec4baa21cc292cf72d453f71b4043b53e591",
        "patch": "@@ -3398,7 +3398,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+static bool AcceptBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp)\n {\n     AssertLockHeld(cs_main);\n \n@@ -3474,7 +3474,7 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "f287171f141baa51fd1afcab3513f3024b8636de",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d253ec4baa21cc292cf72d453f71b4043b53e591/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d253ec4baa21cc292cf72d453f71b4043b53e591/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d253ec4baa21cc292cf72d453f71b4043b53e591",
        "patch": "@@ -212,10 +212,10 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[in]   pfrom   The node which we are receiving the block from; it is added to mapBlockSource and may be penalised if the block is invalid.\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n+ * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */"
      }
    ]
  },
  {
    "sha": "316623f2c197971db9b5bcb9c84e446254b552c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTY2MjNmMmMxOTc5NzFkYjliNWJjYjljODRlNDQ2MjU0YjU1MmMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T13:45:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-16T22:45:49Z"
      },
      "message": "Switch reindexing to AcceptBlock in-loop and ActivateBestChain afterwards",
      "tree": {
        "sha": "7390ed20ea5b8860276d1f3a5d763d00c49eb2d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7390ed20ea5b8860276d1f3a5d763d00c49eb2d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/316623f2c197971db9b5bcb9c84e446254b552c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316623f2c197971db9b5bcb9c84e446254b552c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/316623f2c197971db9b5bcb9c84e446254b552c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316623f2c197971db9b5bcb9c84e446254b552c3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d253ec4baa21cc292cf72d453f71b4043b53e591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d253ec4baa21cc292cf72d453f71b4043b53e591",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d253ec4baa21cc292cf72d453f71b4043b53e591"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "beb848ddb0eff2b5a18be6be2c4713b636edc88e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/316623f2c197971db9b5bcb9c84e446254b552c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/316623f2c197971db9b5bcb9c84e446254b552c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=316623f2c197971db9b5bcb9c84e446254b552c3",
        "patch": "@@ -404,7 +404,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http, libevent, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -554,9 +554,10 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n+    CImportingNow imp;\n+\n     // -reindex\n     if (fReindex) {\n-        CImportingNow imp;\n         int nFile = 0;\n         while (true) {\n             CDiskBlockPos pos(nFile, 0);\n@@ -581,7 +582,6 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     if (boost::filesystem::exists(pathBootstrap)) {\n         FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n         if (file) {\n-            CImportingNow imp;\n             boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(chainparams, file);\n@@ -595,14 +595,20 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n-            CImportingNow imp;\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(chainparams, file);\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n     }\n \n+    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n+    CValidationState state;\n+    if (!ActivateBestChain(state, chainparams)) {\n+        LogPrintf(\"Failed to connect best block\");\n+        StartShutdown();\n+    }\n+\n     if (GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n@@ -1358,12 +1364,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n-    uiInterface.InitMessage(_(\"Activating best chain...\"));\n-    // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    CValidationState state;\n-    if (!ActivateBestChain(state, chainparams))\n-        strErrors << \"Failed to connect best block\";\n-\n     std::vector<boost::filesystem::path> vImportFiles;\n     if (mapArgs.count(\"-loadblock\"))\n     {"
      },
      {
        "sha": "42733ee2de2ca3563c9a0530a530a92092e7b95c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/316623f2c197971db9b5bcb9c84e446254b552c3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/316623f2c197971db9b5bcb9c84e446254b552c3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=316623f2c197971db9b5bcb9c84e446254b552c3",
        "patch": "@@ -3402,7 +3402,8 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n {\n     AssertLockHeld(cs_main);\n \n-    CBlockIndex *&pindex = *ppindex;\n+    CBlockIndex *pindexDummy = NULL;\n+    CBlockIndex *&pindex = ppindex ? *ppindex : pindexDummy;\n \n     if (!AcceptBlockHeader(block, state, chainparams, &pindex))\n         return false;\n@@ -4037,13 +4038,14 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n \n                 // process in case the block isn't known yet\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n+                    LOCK(cs_main);\n                     CValidationState state;\n-                    if (ProcessNewBlock(state, chainparams, NULL, &block, true, dbp))\n+                    if (AcceptBlock(block, state, chainparams, NULL, true, dbp))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n                 } else if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n-                    LogPrintf(\"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n+                    LogPrint(\"reindex\", \"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n                 }\n \n                 // Recursively process earlier encountered successors of this block\n@@ -4057,10 +4059,11 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                         std::multimap<uint256, CDiskBlockPos>::iterator it = range.first;\n                         if (ReadBlockFromDisk(block, it->second, chainparams.GetConsensus()))\n                         {\n-                            LogPrintf(\"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n+                            LogPrint(\"reindex\", \"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n                                     head.ToString());\n+                            LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (ProcessNewBlock(dummy, chainparams, NULL, &block, true, &it->second))\n+                            if (AcceptBlock(block, dummy, chainparams, NULL, true, &it->second))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(block.GetHash());"
      }
    ]
  },
  {
    "sha": "fb8fad1586ced69fa37c665a11916ae4c4d0df05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjhmYWQxNTg2Y2VkNjlmYTM3YzY2NWExMTkxNmFlNGM0ZDBkZjA1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T14:02:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-16T22:45:57Z"
      },
      "message": "Optimize ActivateBestChain for long chains",
      "tree": {
        "sha": "ff225a71aae1428a14a8937c79647fac01184d91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff225a71aae1428a14a8937c79647fac01184d91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb8fad1586ced69fa37c665a11916ae4c4d0df05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8fad1586ced69fa37c665a11916ae4c4d0df05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8fad1586ced69fa37c665a11916ae4c4d0df05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8fad1586ced69fa37c665a11916ae4c4d0df05/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "316623f2c197971db9b5bcb9c84e446254b552c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316623f2c197971db9b5bcb9c84e446254b552c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/316623f2c197971db9b5bcb9c84e446254b552c3"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "38851cda3e21d8f75bb8b1a62ab826f6899d6064",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8fad1586ced69fa37c665a11916ae4c4d0df05/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8fad1586ced69fa37c665a11916ae4c4d0df05/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fb8fad1586ced69fa37c665a11916ae4c4d0df05",
        "patch": "@@ -2811,10 +2811,9 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound)\n {\n     AssertLockHeld(cs_main);\n-    bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n@@ -2902,15 +2901,22 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         {\n             LOCK(cs_main);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n-            pindexMostWork = FindMostWorkChain();\n+            if (pindexMostWork == NULL) {\n+                pindexMostWork = FindMostWorkChain();\n+            }\n \n             // Whether we have anything to do at all.\n             if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n                 return true;\n \n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n+            bool fInvalidFound = false;\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL, fInvalidFound))\n                 return false;\n \n+            if (fInvalidFound) {\n+                // Wipe cache, we may need another branch now.\n+                pindexMostWork = NULL;\n+            }\n             pindexNewTip = chainActive.Tip();\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();"
      }
    ]
  },
  {
    "sha": "d3d75479115bc3480f163df774ee9dd2f8bd9f54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Q3NTQ3OTExNWJjMzQ4MGYxNjNkZjc3NGVlOWRkMmY4YmQ5ZjU0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-21T12:14:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-16T22:45:57Z"
      },
      "message": "Add -reindex-chainstate that does not rebuild block index",
      "tree": {
        "sha": "5372055de2e359d991df93e0136aa74ee62761c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5372055de2e359d991df93e0136aa74ee62761c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3d75479115bc3480f163df774ee9dd2f8bd9f54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d75479115bc3480f163df774ee9dd2f8bd9f54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d75479115bc3480f163df774ee9dd2f8bd9f54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d75479115bc3480f163df774ee9dd2f8bd9f54/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb8fad1586ced69fa37c665a11916ae4c4d0df05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8fad1586ced69fa37c665a11916ae4c4d0df05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8fad1586ced69fa37c665a11916ae4c4d0df05"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cb5e413fd6a94ec6da0676a85db14cab6391ac0f",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d75479115bc3480f163df774ee9dd2f8bd9f54/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d75479115bc3480f163df774ee9dd2f8bd9f54/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=d3d75479115bc3480f163df774ee9dd2f8bd9f54",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Test -reindex with CheckBlockIndex\n+# Test -reindex and -reindex-chainstate with CheckBlockIndex\n #\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -20,13 +20,20 @@ def setup_network(self):\n         self.is_network_split = False\n         self.nodes.append(start_node(0, self.options.tmpdir))\n \n-    def run_test(self):\n+    def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n+        blockcount = self.nodes[0].getblockcount()\n         stop_node(self.nodes[0], 0)\n         wait_bitcoinds()\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex\", \"-checkblockindex=1\"])\n-        assert_equal(self.nodes[0].getblockcount(), 3)\n+        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"])\n+        assert_equal(self.nodes[0].getblockcount(), blockcount)\n         print(\"Success\")\n \n+    def run_test(self):\n+        self.reindex(False)\n+        self.reindex(True)\n+        self.reindex(False)\n+        self.reindex(True)\n+\n if __name__ == '__main__':\n     ReindexTest().main()"
      },
      {
        "sha": "8688381ecff35757571e842cef9706dc49039e63",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d75479115bc3480f163df774ee9dd2f8bd9f54/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d75479115bc3480f163df774ee9dd2f8bd9f54/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d3d75479115bc3480f163df774ee9dd2f8bd9f54",
        "patch": "@@ -327,7 +327,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, >%u = target size in MiB to use for block files)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files on startup\"));\n+    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n+    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n@@ -1164,6 +1165,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // ********************************************************* Step 7: load block chain\n \n     fReindex = GetBoolArg(\"-reindex\", false);\n+    bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n \n     // Upgrading to 0.8; hard-link the old blknnnn.dat files into /blocks/\n     boost::filesystem::path blocksDir = GetDataDir() / \"blocks\";\n@@ -1225,7 +1227,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 delete pblocktree;\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n-                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n+                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n                 pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n@@ -1254,7 +1256,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 // Check for changed -txindex state\n                 if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n+                    strLoadError = _(\"You need to rebuild the database using -reindex-chainstate to change -txindex\");\n                     break;\n                 }\n "
      }
    ]
  },
  {
    "sha": "b4d24e142e25a21c78ab74146c3520f2259fd7c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGQyNGUxNDJlMjVhMjFjNzhhYjc0MTQ2YzM1MjBmMjI1OWZkN2My",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T14:18:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-16T22:45:58Z"
      },
      "message": "Report reindexing progress in GUI",
      "tree": {
        "sha": "2137ba5f3a179d993e7789815c4c2acdc8971dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2137ba5f3a179d993e7789815c4c2acdc8971dd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4d24e142e25a21c78ab74146c3520f2259fd7c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d24e142e25a21c78ab74146c3520f2259fd7c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d24e142e25a21c78ab74146c3520f2259fd7c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d24e142e25a21c78ab74146c3520f2259fd7c2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3d75479115bc3480f163df774ee9dd2f8bd9f54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d75479115bc3480f163df774ee9dd2f8bd9f54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d75479115bc3480f163df774ee9dd2f8bd9f54"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 82,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a3f4d6ea0157365cc3a687e74030ccc1aea3125a",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -8,6 +8,7 @@\n #\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+import time\n \n class ReindexTest(BitcoinTestFramework):\n \n@@ -26,6 +27,8 @@ def reindex(self, justchainstate=False):\n         stop_node(self.nodes[0], 0)\n         wait_bitcoinds()\n         self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"])\n+        while self.nodes[0].getblockcount() < blockcount:\n+            time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)\n         print(\"Success\")\n "
      },
      {
        "sha": "66930b3b067b4278210d69d5021b6e3b105c7258",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -2883,6 +2883,28 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     return true;\n }\n \n+static void NotifyHeaderTip() {\n+    bool fNotify = false;\n+    bool fInitialBlockDownload = false;\n+    static CBlockIndex* pindexHeaderOld = NULL;\n+    CBlockIndex* pindexHeader = NULL;\n+    {\n+        LOCK(cs_main);\n+        if (!setBlockIndexCandidates.empty()) {\n+            pindexHeader = *setBlockIndexCandidates.rbegin();\n+        }\n+        if (pindexHeader != pindexHeaderOld) {\n+            fNotify = true;\n+            fInitialBlockDownload = IsInitialBlockDownload();\n+            pindexHeaderOld = pindexHeader;\n+        }\n+    }\n+    // Send block tip changed notifications without cs_main\n+    if (fNotify) {\n+        uiInterface.NotifyHeaderTip(fInitialBlockDownload, pindexHeader);\n+    }\n+}\n+\n /**\n  * Make the best chain active, in multiple steps. The result is either failure\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n@@ -3499,6 +3521,8 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n+    NotifyHeaderTip();\n+\n     if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n@@ -4054,6 +4078,16 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     LogPrint(\"reindex\", \"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n                 }\n \n+                // Activate the genesis block so normal node progress can continue\n+                if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n+                    CValidationState state;\n+                    if (!ActivateBestChain(state, chainparams)) {\n+                        break;\n+                    }\n+                }\n+\n+                NotifyHeaderTip();\n+\n                 // Recursively process earlier encountered successors of this block\n                 deque<uint256> queue;\n                 queue.push_back(hash);\n@@ -4077,6 +4111,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n+                        NotifyHeaderTip();\n                     }\n                 }\n             } catch (const std::exception& e) {\n@@ -5088,6 +5123,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n+        {\n         LOCK(cs_main);\n \n         if (nCount == 0) {\n@@ -5171,6 +5207,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         CheckBlockIndex(chainparams.GetConsensus());\n+        }\n+\n+        NotifyHeaderTip();\n     }\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing"
      },
      {
        "sha": "4998848e9fb98badfa55d068029055937465e90b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -457,8 +457,8 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), clientModel->getVerificationProgress(NULL));\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getLastBlockDate(), clientModel->getVerificationProgress(NULL), false);\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n \n         // Receive and report messages from client model\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n@@ -696,7 +696,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)\n {\n     if(!clientModel)\n         return;\n@@ -708,15 +708,25 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     enum BlockSource blockSource = clientModel->getBlockSource();\n     switch (blockSource) {\n         case BLOCK_SOURCE_NETWORK:\n+            if (header) {\n+                return;\n+            }\n             progressBarLabel->setText(tr(\"Synchronizing with network...\"));\n             break;\n         case BLOCK_SOURCE_DISK:\n-            progressBarLabel->setText(tr(\"Importing blocks from disk...\"));\n+            if (header) {\n+                progressBarLabel->setText(tr(\"Indexing blocks on disk...\"));\n+            } else {\n+                progressBarLabel->setText(tr(\"Processing blocks on disk...\"));\n+            }\n             break;\n         case BLOCK_SOURCE_REINDEX:\n             progressBarLabel->setText(tr(\"Reindexing blocks on disk...\"));\n             break;\n         case BLOCK_SOURCE_NONE:\n+            if (header) {\n+                return;\n+            }\n             // Case: not Importing, not Reindexing and no network connection\n             progressBarLabel->setText(tr(\"No block source available...\"));\n             break;"
      },
      {
        "sha": "33639ed5a2d4b29409c4f2f76b26cd5b485d5dfc",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -150,7 +150,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "108500654b2da8e8238549484fae4a5fbd4d1146",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -24,6 +24,7 @@\n class CBlockIndex;\n \n static const int64_t nClientStartupTime = GetTime();\n+static int64_t nLastHeaderTipUpdateNotification = 0;\n static int64_t nLastBlockTipUpdateNotification = 0;\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n@@ -226,7 +227,7 @@ static void BannedListChanged(ClientModel *clientmodel)\n     QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n }\n \n-static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex)\n+static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex, bool fHeader)\n {\n     // lock free async UI updates in case we have a new block tip\n     // during initial sync, only update the UI if the last update\n@@ -235,14 +236,17 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     if (initialSync)\n         now = GetTimeMillis();\n \n+    int64_t& nLastUpdateNotification = fHeader ? nLastHeaderTipUpdateNotification : nLastBlockTipUpdateNotification;\n+\n     // if we are in-sync, update the UI regardless of last update time\n-    if (!initialSync || now - nLastBlockTipUpdateNotification > MODEL_UPDATE_DELAY) {\n+    if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, pIndex->nHeight),\n                                   Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),\n-                                  Q_ARG(double, clientmodel->getVerificationProgress(pIndex)));\n-        nLastBlockTipUpdateNotification = now;\n+                                  Q_ARG(double, clientmodel->getVerificationProgress(pIndex)),\n+                                  Q_ARG(bool, fHeader));\n+        nLastUpdateNotification = now;\n     }\n }\n \n@@ -253,7 +257,8 @@ void ClientModel::subscribeToCoreSignals()\n     uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n-    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2));\n+    uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2, false));\n+    uiInterface.NotifyHeaderTip.connect(boost::bind(BlockTipChanged, this, _1, _2, true));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n@@ -263,5 +268,6 @@ void ClientModel::unsubscribeFromCoreSignals()\n     uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n     uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this));\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n-    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2));\n+    uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, false));\n+    uiInterface.NotifyHeaderTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, true));\n }"
      },
      {
        "sha": "439680431963e8b27ac4b37541edc329f7b35ee9",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -89,7 +89,7 @@ class ClientModel : public QObject\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress, bool header);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void alertsChanged(const QString &warnings);\n     void bytesChanged(quint64 totalBytesIn, quint64 totalBytesOut);"
      },
      {
        "sha": "fd627eb4afc38b0f383960c9dae3788c5400b818",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -353,8 +353,8 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), model->getVerificationProgress(NULL));\n-        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(setNumBlocks(int,QDateTime,double)));\n+        setNumBlocks(model->getNumBlocks(), model->getLastBlockDate(), model->getVerificationProgress(NULL), false);\n+        connect(model, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(setNumBlocks(int,QDateTime,double,bool)));\n \n         updateTrafficStats(model->getTotalBytesRecv(), model->getTotalBytesSent());\n         connect(model, SIGNAL(bytesChanged(quint64,quint64)), this, SLOT(updateTrafficStats(quint64, quint64)));\n@@ -585,10 +585,12 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(connections);\n }\n \n-void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress)\n+void RPCConsole::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers)\n {\n-    ui->numberOfBlocks->setText(QString::number(count));\n-    ui->lastBlockTime->setText(blockDate.toString());\n+    if (!headers) {\n+        ui->numberOfBlocks->setText(QString::number(count));\n+        ui->lastBlockTime->setText(blockDate.toString());\n+    }\n }\n \n void RPCConsole::setMempoolSize(long numberOfTxs, size_t dynUsage)"
      },
      {
        "sha": "28affa954dca2a484760b317ba1e9fc2d77b464e",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -87,7 +87,7 @@ public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n     /** Set size (number of transactions and memory usage) of the mempool in the UI */\n     void setMempoolSize(long numberOfTxs, size_t dynUsage);\n     /** Go forward or back in history */"
      },
      {
        "sha": "6d50be56ecba7962a5971c4f9129c4442bf398cb",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -124,7 +124,7 @@ void SendCoinsDialog::setClientModel(ClientModel *clientModel)\n     this->clientModel = clientModel;\n \n     if (clientModel) {\n-        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double)), this, SLOT(updateSmartFeeLabel()));\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,QDateTime,double,bool)), this, SLOT(updateSmartFeeLabel()));\n     }\n }\n "
      },
      {
        "sha": "7ebfc17e5dd52337b2ca359a46e5de7819e25942",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d24e142e25a21c78ab74146c3520f2259fd7c2/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=b4d24e142e25a21c78ab74146c3520f2259fd7c2",
        "patch": "@@ -96,6 +96,9 @@ class CClientUIInterface\n     /** New block has been accepted */\n     boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;\n \n+    /** Best header has changed */\n+    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyHeaderTip;\n+\n     /** Banlist did change. */\n     boost::signals2::signal<void (void)> BannedListChanged;\n };"
      }
    ]
  }
]