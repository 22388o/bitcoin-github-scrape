[
  {
    "sha": "b3d9e2f6821d40b0b4931a183ec5e473f5d497d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2Q5ZTJmNjgyMWQ0MGIwYjQ5MzFhMTgzZWM1ZTQ3M2Y1ZDQ5N2Q0",
    "commit": {
      "author": {
        "name": "Jim McDonald",
        "email": "Jim@mcdee.net",
        "date": "2013-04-29T11:04:03Z"
      },
      "committer": {
        "name": "Jim McDonald",
        "email": "Jim@mcdee.net",
        "date": "2013-04-29T16:32:57Z"
      },
      "message": "Resolve path to allow for Bitcoin directory to be a symlink\n\nConditional use of fs::canonical only if using filesystem v3",
      "tree": {
        "sha": "257feab7f3423917de06ae09ac87ab0730f6f5bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/257feab7f3423917de06ae09ac87ab0730f6f5bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4/comments",
    "author": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33029bcedd982f80f7e380bff586f3ab644decce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33029bcedd982f80f7e380bff586f3ab644decce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33029bcedd982f80f7e380bff586f3ab644decce"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eedea322244bcbe75a4dc7e4862868fecfa97f8e",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b3d9e2f6821d40b0b4931a183ec5e473f5d497d4",
        "patch": "@@ -1070,6 +1070,9 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n     if (fNetSpecific && GetBoolArg(\"-testnet\", false))\n         path /= \"testnet3\";\n \n+#if BOOST_FILESYSTEM_VERSION == 3\n+    path = fs::canonical(path);\n+#endif\n     fs::create_directory(path);\n \n     cachedPath[fNetSpecific] = true;"
      }
    ]
  },
  {
    "sha": "a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWQyZjA2MmE1NzU3Y2M4OTBiYmQyNmIwOGQ3N2YxNTgxYjhiN2U3",
    "commit": {
      "author": {
        "name": "Jim McDonald",
        "email": "Jim@mcdee.net",
        "date": "2013-05-03T10:08:15Z"
      },
      "committer": {
        "name": "Jim McDonald",
        "email": "Jim@mcdee.net",
        "date": "2013-05-03T10:08:15Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master' into symlinks",
      "tree": {
        "sha": "7bcb183ba4c575cdee67901eb4eb3e941ff9e428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bcb183ba4c575cdee67901eb4eb3e941ff9e428"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/comments",
    "author": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mcdee",
      "id": 511384,
      "node_id": "MDQ6VXNlcjUxMTM4NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/511384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcdee",
      "html_url": "https://github.com/mcdee",
      "followers_url": "https://api.github.com/users/mcdee/followers",
      "following_url": "https://api.github.com/users/mcdee/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcdee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcdee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcdee/subscriptions",
      "organizations_url": "https://api.github.com/users/mcdee/orgs",
      "repos_url": "https://api.github.com/users/mcdee/repos",
      "events_url": "https://api.github.com/users/mcdee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcdee/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3d9e2f6821d40b0b4931a183ec5e473f5d497d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3d9e2f6821d40b0b4931a183ec5e473f5d497d4"
      },
      {
        "sha": "d9dd0318e142341626619d4ec0d6eb505ee5d0fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9dd0318e142341626619d4ec0d6eb505ee5d0fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9dd0318e142341626619d4ec0d6eb505ee5d0fe"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 72,
      "deletions": 27
    },
    "files": [
      {
        "sha": "a9b73fd5a6a033aa58566923a1bc4aaebf129fb6",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -940,6 +940,11 @@ void ServiceConnection(AcceptedConnection *conn)\n         // Read HTTP message headers and body\n         ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto);\n \n+        if (strURI != \"/\") {\n+            conn->stream() << HTTPReply(HTTP_NOT_FOUND, \"\", false) << std::flush;\n+            break;\n+        }\n+\n         // Check authorization\n         if (mapHeaders.count(\"authorization\") == 0)\n         {"
      },
      {
        "sha": "706221692b3f6dae02a3b4fc2027cd057c0229ce",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -11,6 +11,7 @@\n #ifndef NOMINMAX\n #define NOMINMAX\n #endif\n+#define FD_SETSIZE 1024 // max number of fds in fd_set\n #include <winsock2.h>\n #include <mswsock.h>\n #include <ws2tcpip.h>"
      },
      {
        "sha": "3845cfad81a2e15b053bb7afe045ca71fd2ec4c6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -28,6 +28,15 @@ using namespace boost;\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n+#ifdef WIN32\n+// Win32 LevelDB doesn't use filedescriptors, and the ones used for\n+// accessing block files, don't count towards to fd_set size limit\n+// anyway.\n+#define MIN_CORE_FILEDESCRIPTORS 0\n+#else\n+#define MIN_CORE_FILEDESCRIPTORS 150\n+#endif\n+\n // Used to pass flags to the Bind() function\n enum BindFlags {\n     BF_NONE         = 0,\n@@ -349,7 +358,7 @@ std::string HelpMessage()\n         \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\" +\n         \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\" +\n         \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\" +\n-        \"  -par=<n>               \" + _(\"Set the number of script verification threads (1-16, 0=auto, default: 0)\") + \"\\n\" +\n+        \"  -par=N                 \" + _(\"Set the number of script verification threads (up to 16, 0=auto, negative=leave N CPUs free, default: 0)\") + \"\\n\" +\n \n         \"\\n\" + _(\"Block creation options:\") + \"\\n\" +\n         \"  -blockminsize=<n>      \"   + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\" +\n@@ -518,15 +527,25 @@ bool AppInit2(boost::thread_group& threadGroup)\n         SoftSetBoolArg(\"-rescan\", true);\n     }\n \n+    // Make sure enough file descriptors are available\n+    int nBind = std::max((int)mapArgs.count(\"-bind\"), 1);\n+    nMaxConnections = GetArg(\"-maxconnections\", 125);\n+    nMaxConnections = std::max(std::min(nMaxConnections, FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS), 0);\n+    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n+    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n+        return InitError(_(\"Not enough file descriptors available.\"));\n+    if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n+        nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n+\n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n     fDebug = GetBoolArg(\"-debug\");\n     fBenchmark = GetBoolArg(\"-benchmark\");\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", 0);\n-    if (nScriptCheckThreads == 0)\n-        nScriptCheckThreads = boost::thread::hardware_concurrency();\n+    if (nScriptCheckThreads <= 0)\n+        nScriptCheckThreads += boost::thread::hardware_concurrency();\n     if (nScriptCheckThreads <= 1)\n         nScriptCheckThreads = 0;\n     else if (nScriptCheckThreads > MAX_SCRIPTCHECK_THREADS)\n@@ -594,6 +613,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         printf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n     printf(\"Default data directory %s\\n\", GetDefaultDataDir().string().c_str());\n     printf(\"Used data directory %s\\n\", strDataDir.c_str());\n+    printf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n     std::ostringstream strErrors;\n \n     if (fDaemon)"
      },
      {
        "sha": "ef2ecae8306623e613419782daed98044a117435",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -420,7 +420,7 @@ BOOL Win32RandomAccessFile::_Init( LPCWSTR path )\n {\n     BOOL bRet = FALSE;\n     if(!_hFile)\n-        _hFile = ::CreateFileW(path,GENERIC_READ,0,NULL,OPEN_EXISTING,\n+        _hFile = ::CreateFileW(path,GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,\n         FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,NULL);\n     if(!_hFile || _hFile == INVALID_HANDLE_VALUE )\n         _hFile = NULL;\n@@ -462,8 +462,8 @@ bool Win32MapFile::_UnmapCurrentRegion()\n             // Defer syncing this data until next Sync() call, if any\n             _pending_sync = true;\n         }\n-        UnmapViewOfFile(_base);\n-        CloseHandle(_base_handle);\n+        if (!UnmapViewOfFile(_base) || !CloseHandle(_base_handle))\n+            result = false;\n         _file_offset += _limit - _base;\n         _base = NULL;\n         _base_handle = NULL;\n@@ -971,7 +971,7 @@ Status Win32Env::NewRandomAccessFile( const std::string& fname, RandomAccessFile\n     if(!pFile->isEnable()){\n         delete pFile;\n         *result = NULL;\n-        sRet = Status::IOError(path,\"Could not create random access file.\");\n+        sRet = Status::IOError(path, Win32::GetLastErrSz());\n     }else\n         *result = pFile;\n     return sRet;"
      },
      {
        "sha": "3fa48ae484c1cfc0c1eef60fcbf51301c59005a9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -48,6 +48,7 @@ static CNode* pnodeSync = NULL;\n uint64 nLocalHostNonce = 0;\n static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n+int nMaxConnections = 125;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -908,7 +909,7 @@ void ThreadSocketHandler()\n                 if (nErr != WSAEWOULDBLOCK)\n                     printf(\"socket error accept failed: %d\\n\", nErr);\n             }\n-            else if (nInbound >= GetArg(\"-maxconnections\", 125) - MAX_OUTBOUND_CONNECTIONS)\n+            else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n             {\n                 {\n                     LOCK(cs_setservAddNodeAddresses);\n@@ -1803,7 +1804,7 @@ void StartNode(boost::thread_group& threadGroup)\n {\n     if (semOutbound == NULL) {\n         // initialize semaphore\n-        int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, (int)GetArg(\"-maxconnections\", 125));\n+        int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n         semOutbound = new CSemaphore(nMaxOutbound);\n     }\n "
      },
      {
        "sha": "af66eed070521c35cf354cab0a9f5a0a210360c4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -74,6 +74,7 @@ extern bool fDiscover;\n extern uint64 nLocalServices;\n extern uint64 nLocalHostNonce;\n extern CAddrMan addrman;\n+extern int nMaxConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n@@ -255,7 +256,7 @@ class CNode\n         pfilter = NULL;\n \n         // Be shy and don't send version until we hear\n-        if (!fInbound)\n+        if (hSocket != INVALID_SOCKET && !fInbound)\n             PushVersion();\n     }\n "
      },
      {
        "sha": "08d133740a9c5655020fdd2c8abaa6bdaf18953c",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -72,19 +72,14 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n \n     aiHint.ai_socktype = SOCK_STREAM;\n     aiHint.ai_protocol = IPPROTO_TCP;\n-#ifdef WIN32\n-#  ifdef USE_IPV6\n+#ifdef USE_IPV6\n     aiHint.ai_family = AF_UNSPEC;\n-#  else\n+#else\n     aiHint.ai_family = AF_INET;\n-#  endif\n+#endif\n+#ifdef WIN32\n     aiHint.ai_flags = fAllowLookup ? 0 : AI_NUMERICHOST;\n #else\n-#  ifdef USE_IPV6\n-    aiHint.ai_family = AF_UNSPEC;\n-#  else\n-    aiHint.ai_family = AF_INET;\n-#  endif\n     aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n #endif\n     struct addrinfo *aiRes = NULL;\n@@ -119,13 +114,12 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n \n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n-    std::string str(pszName);\n-    std::string strHost = str;\n-    if (str.empty())\n+    std::string strHost(pszName);\n+    if (strHost.empty())\n         return false;\n-    if (boost::algorithm::starts_with(str, \"[\") && boost::algorithm::ends_with(str, \"]\"))\n+    if (boost::algorithm::starts_with(strHost, \"[\") && boost::algorithm::ends_with(strHost, \"]\"))\n     {\n-        strHost = str.substr(1, str.size() - 2);\n+        strHost = strHost.substr(1, strHost.size() - 2);\n     }\n \n     return LookupIntern(strHost.c_str(), vIP, nMaxSolutions, fAllowLookup);\n@@ -222,10 +216,9 @@ bool static Socks5(string strDest, int port, SOCKET& hSocket)\n         return error(\"Hostname too long\");\n     }\n     char pszSocks5Init[] = \"\\5\\1\\0\";\n-    char *pszSocks5 = pszSocks5Init;\n     ssize_t nSize = sizeof(pszSocks5Init) - 1;\n \n-    ssize_t ret = send(hSocket, pszSocks5, nSize, MSG_NOSIGNAL);\n+    ssize_t ret = send(hSocket, pszSocks5Init, nSize, MSG_NOSIGNAL);\n     if (ret != nSize)\n     {\n         closesocket(hSocket);\n@@ -414,7 +407,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     if (ioctlsocket(hSocket, FIONBIO, &fNonblock) == SOCKET_ERROR)\n #else\n     fFlags = fcntl(hSocket, F_GETFL, 0);\n-    if (fcntl(hSocket, F_SETFL, fFlags & !O_NONBLOCK) == SOCKET_ERROR)\n+    if (fcntl(hSocket, F_SETFL, fFlags & ~O_NONBLOCK) == SOCKET_ERROR)\n #endif\n     {\n         closesocket(hSocket);"
      },
      {
        "sha": "c8fc112cfd7d306acfe620c62bda20d7a325ce8c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -10,6 +10,7 @@\n #endif\n #include <fcntl.h>\n #include <sys/stat.h>\n+#include <sys/resource.h>\n #endif\n \n #include \"util.h\"\n@@ -1170,6 +1171,28 @@ bool TruncateFile(FILE *file, unsigned int length) {\n #endif\n }\n \n+\n+// this function tries to raise the file descriptor limit to the requested number.\n+// It returns the actual file descriptor limit (which may be more or less than nMinFD)\n+int RaiseFileDescriptorLimit(int nMinFD) {\n+#if defined(WIN32)\n+    return 2048;\n+#else\n+    struct rlimit limitFD;\n+    if (getrlimit(RLIMIT_NOFILE, &limitFD) != -1) {\n+        if (limitFD.rlim_cur < (rlim_t)nMinFD) {\n+            limitFD.rlim_cur = nMinFD;\n+            if (limitFD.rlim_cur > limitFD.rlim_max)\n+                limitFD.rlim_cur = limitFD.rlim_max;\n+            setrlimit(RLIMIT_NOFILE, &limitFD);\n+            getrlimit(RLIMIT_NOFILE, &limitFD);\n+        }\n+        return limitFD.rlim_cur;\n+    }\n+    return nMinFD; // getrlimit failed, assume it's fine\n+#endif\n+}\n+\n // this function tries to make a particular range of a file allocated (corresponding to disk space)\n // it is advisory, and the range specified in the arguments will never contain live data\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {"
      },
      {
        "sha": "3d25364505ef58201ded8ce67d31dd004751a069",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5d2f062a5757cc890bbd26b08d77f1581b8b7e7/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a5d2f062a5757cc890bbd26b08d77f1581b8b7e7",
        "patch": "@@ -197,6 +197,7 @@ bool WildcardMatch(const std::string& str, const std::string& mask);\n void FileCommit(FILE *fileout);\n int GetFilesize(FILE* file);\n bool TruncateFile(FILE *file, unsigned int length);\n+int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n boost::filesystem::path GetDefaultDataDir();"
      }
    ]
  }
]