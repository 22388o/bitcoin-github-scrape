[
  {
    "sha": "f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTI2Y2JkNmRlNmUxYThmZWUwZTkwMGVjZmJjMTRhODhlMzYyNTQx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-21T20:42:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:11:29Z"
      },
      "message": "Extract ProtectEvictionCandidatesByRatio from SelectNodeToEvict\n\nto allow deterministic unit testing of the ratio-based peer eviction protection\nlogic, which protects peers having longer connection times and those connected\nvia higher-latency networks.\n\nAdd documentation.",
      "tree": {
        "sha": "67187528701f683204f0a981fcec90dee8d24500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67187528701f683204f0a981fcec90dee8d24500"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU92kACgkQT1chs9Dj\nkh0lqQ/8CCMOA90pCJwkTZx0s8hn9yEu5+l5oM2HEOnI87dCS+a3dzL9HoCIkH7U\nT7OmJOl4kOZK8BPrGx64jQ3aeTzTKzhGZMRWzW1NlUcJgk97NnP83H65x7pvFU3A\n6kC8WkuBfLPWxsy5up1+6zQXtn2QkKkGoyXM6ZH2ExGK4XSbgrxXYMo8mDnPouyE\nfwWPDvBeLq2+bjBHU6yueFZq3twBIu7lwh89Xk+WOkctIupQd/ReQ87TLc2XyS2K\n8MJPSe3eGd+eryFQYeAN53MWwP7ENeul5100nc1RbylECqifxqgAYp8h3q+7WEu3\nEliZrlTFWZSqtcx2ZFtlJa/RqQOK/PoeMKq960LEa+V4GrYhHzmtZyIXzmskfSRm\n1Wvk36qCxCxzFoDZ6uphEsagaMXG5IMCe5K9jPMg/nXh0m7eSBhMEwuUzDCzHv/M\nbTHN3wMgK2y4k0LvS6hKThsNpZ8VWJrsfvnDNj7fUJIZ+AROAljIx2bgaEZgwnbB\nYrDKYuXU0DteUaPmm3jj6WxnDNGvH/4huOjAmUa1uFs24AIlVWn7+JdX2CTN+mYD\nFTJds+toZrDI+68dbVb/RiIbX1SQdLkrzwz/93FY5zKQGAg+uPo1Hgu7dMGoNIA2\n5pi4dOJ09YWk1rmGqE4VVAmjivZoyYMXJKO5NSY80djCLdaDuVM=\n=Zbrn\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGqYL0dYEobigFhXHiXh0b3ahruqPzbYgk+3/842M00mCP/wECNMWOQmFfTY\naPcF0vLFybQI8QRgVPdq8Ag6SUzCaztJmgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQZURz/YivpR4ZfURW\n9ar0WQjwIGgUapnCuaA0WK3wVHaKEDsh2IXt4/Ym+ZbetzugMNMNCPAgbSIUgMwB\nwg4hsDWfOv51+Z2FVgz2JKjYqhYYEbbGPpgI8CDSxO1fasPiC+hdMlmEpbrtfsAJ\nQRFbNtDgTGiskkuPbQjwIEJI+ffsLsSmCqyf2AZ9ZhCXvJ74ilfYz/O6A1AcDKZw\nCPEEYFTplPAI0LScIJQjuqsAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVu\nZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BCqYFJP9wfZPFEWEDIT+Q3rCPEEYFT3avAI\niz/mC+khhEgAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmfwEPF/eiHOC3RwwkMStU8X9QgI8QRgVPdq8Ai7ozdEh0uv\nYwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 67187528701f683204f0a981fcec90dee8d24500\nparent a9d1b40d53ec417eefbe767aa66701ef8e1801d5\nauthor Jon Atack <jon@atack.com> 1613940137 +0100\ncommitter Jon Atack <jon@atack.com> 1616181089 +0100\n\nExtract ProtectEvictionCandidatesByRatio from SelectNodeToEvict\n\nto allow deterministic unit testing of the ratio-based peer eviction protection\nlogic, which protects peers having longer connection times and those connected\nvia higher-latency networks.\n\nAdd documentation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f126cbd6de6e1a8fee0e900ecfbc14a88e362541/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9d1b40d53ec417eefbe767aa66701ef8e1801d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d1b40d53ec417eefbe767aa66701ef8e1801d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d1b40d53ec417eefbe767aa66701ef8e1801d5"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 49,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b51d03de7b1a085eaa8245cdfcca4482e210844e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 16,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f126cbd6de6e1a8fee0e900ecfbc14a88e362541/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f126cbd6de6e1a8fee0e900ecfbc14a88e362541/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
        "patch": "@@ -879,6 +879,26 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+{\n+    // Protect the half of the remaining nodes which have been connected the longest.\n+    // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n+    // Reserve half of these protected spots for localhost peers, even if\n+    // they're not longest-uptime overall. This helps protect tor peers, which\n+    // tend to be otherwise disadvantaged under our eviction criteria.\n+    size_t initial_size = vEvictionCandidates.size();\n+    size_t total_protect_size = initial_size / 2;\n+\n+    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n+    size_t local_erase_size = total_protect_size / 2;\n+    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n+    // Calculate how many we removed, and update our total number of peers that\n+    // we want to protect based on uptime accordingly.\n+    total_protect_size -= initial_size - vEvictionCandidates.size();\n+    EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, total_protect_size);\n+}\n+\n [[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)\n {\n     // Protect connections with certain characteristics\n@@ -901,22 +921,9 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     // An attacker cannot manipulate this metric without performing useful work.\n     EraseLastKElements(vEvictionCandidates, CompareNodeBlockTime, 4);\n \n-    // Protect the half of the remaining nodes which have been connected the longest.\n-    // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // Reserve half of these protected spots for localhost peers, even if\n-    // they're not longest-uptime overall. This helps protect tor peers, which\n-    // tend to be otherwise disadvantaged under our eviction criteria.\n-    size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-\n-    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n-    size_t local_erase_size = total_protect_size / 2;\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n-    // Calculate how many we removed, and update our total number of peers that\n-    // we want to protect based on uptime accordingly.\n-    total_protect_size -= initial_size - vEvictionCandidates.size();\n-    EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, total_protect_size);\n+    // Protect some of the remaining eviction candidates by ratios of desirable\n+    // or disadvantaged characteristics.\n+    ProtectEvictionCandidatesByRatio(vEvictionCandidates);\n \n     if (vEvictionCandidates.empty()) return std::nullopt;\n "
      },
      {
        "sha": "c15ca32816e1c315e61def09bf2782d591c75f61",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f126cbd6de6e1a8fee0e900ecfbc14a88e362541/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f126cbd6de6e1a8fee0e900ecfbc14a88e362541/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
        "patch": "@@ -1283,6 +1283,32 @@ struct NodeEvictionCandidate\n     bool m_is_local;\n };\n \n+/**\n+ * Select an inbound peer to evict after filtering out (protecting) peers having\n+ * distinct, difficult-to-forge characteristics. The protection logic picks out\n+ * fixed numbers of desirable peers per various criteria, followed by ratios of\n+ * desirable or disadvantaged peers. If any eviction candidates remain, the\n+ * selection logic chooses a peer to evict.\n+ */\n [[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates);\n \n+/** Protect desirable or disadvantaged inbound peers from eviction by ratio.\n+ *\n+ * This function protects half of the peers which have been connected the\n+ * longest, to replicate the non-eviction implicit behavior and preclude attacks\n+ * that start later.\n+ *\n+ * Half of these protected spots (1/4 of the total) are reserved for localhost\n+ * peers, if any, sorted by longest uptime, even if they're not longest uptime\n+ * overall.\n+ *\n+ * This helps protect onion peers, which tend to be otherwise disadvantaged\n+ * under our eviction criteria for their higher min ping times relative to IPv4\n+ * and IPv6 peers, and favorise the diversity of peer connections.\n+ *\n+ * This function was extracted from SelectNodeToEvict() to be able to test the\n+ * ratio-based protection logic deterministically.\n+ */\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates);\n+\n #endif // BITCOIN_NET_H"
      }
    ]
  },
  {
    "sha": "41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWY4NGQ1ZWNjZDRjMjYyMGJmNmZlZTYxNmYyZjhmNzE3ZGJkNmY2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-20T10:21:34Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:11:39Z"
      },
      "message": "Move peer eviction tests to a separate test file\n\nout of net_tests, because the eviction tests:\n\n- are a different domain of test coverage, with different dependencies\n\n- run more slowly than the net tests\n\n- will be growing in size, in this PR branch and in the future, as eviction\n  test coverage is improved",
      "tree": {
        "sha": "9bd01765f06218487ec47b851dacf78a34878e04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bd01765f06218487ec47b851dacf78a34878e04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU92sACgkQT1chs9Dj\nkh1M7Q/+Jf3zwLPsbwJaCl24YFJNcB/OLhNfwYByq2lk8McQnht/2Hv8zCde8eXZ\nlK28Ph+44NNsGY211OyHaxRplX8/poeWEHNHzHZiSMi9L+Ktuf5hHK7F9k7OzuSD\n0YNPddzd/H5aFWMrsy6vHw31p6H0rn3uH2ii7iEvK58Ptu3LcyUHrsjrRnVV3VDE\nvSGCa2KdZsGXEbpxtQ6JHNYLugi49zm3Uvx2MMmW0S5DRty+tJgzX27vocq5TtPl\nEKVbWddNATZaGmz0Ppdydu9fny7rHWK+Bn6OCELbz5NwezNOQLlLo9SmJoTb+++J\nuiKsvREaGeQxNGcVrUzN+pea4Hacc4vyZtqOzZ30ps5A7J658aJ7Kp3zQx1MFIER\nYQRaTk+tpFl3sd/BP8OtiPQJsFE/ZhqDO715tpLOoMVqDQNOjE1jtJ+qtfm7sfvR\nK9dzFiVla0NAfUQe+VRI94veYrzkZuAj27PHgxPRpUjGlSWcvL/c7CVX8oiyWX/s\n7E6h2sbQgvuXvoYIN6Q9e2zfT58DI3dUNh+gPQVvUYdS7/GQUDNtZ+uFTnX34ULj\n+lfiSTgS6nV9Im3eYNQl7WjkczX+tYwKFFOV3Te6LBPwVX8GgM/EHmJ18MR4BXmW\nAvDxW26WdATz8Q6L2nEY+WfEx7Lw0qlo90EJg7OUioGWrDdenPk=\n=MSVP\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJ3NAmxwqKv+04Q5KBkE0h5RVVDlzByRS/U4do6ddcztCP/wEB7b/TF32wTH\nSKCIAadnC+0I8QRgVPdt8AgQJri9rCUwZACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEGR6Jng7tpQqNUAMW6hH\nynEI8SBXvl9HjECR6U65lzhrvVR5LDyU3dsyZ2U0ovaIJXfMDQjxBGBU92zwCKxI\nnP4ILkGHAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BCJ2EFHH1XG2lKmxbegPOTaCPAglNr2wHP7TdgkTqKo\nPRMXIVz1hTAADHuC7Nkgxo5dumMI8QRgVOmW8Ah0L0mRGd+/EACD3+MNLvkMjiko\naHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQp3B4SOeF\nGl1tFhUFRm7tGgjxBGBU923wCAFWvmVPKWHZAIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9bd01765f06218487ec47b851dacf78a34878e04\nparent f126cbd6de6e1a8fee0e900ecfbc14a88e362541\nauthor Jon Atack <jon@atack.com> 1613816494 +0100\ncommitter Jon Atack <jon@atack.com> 1616181099 +0100\n\nMove peer eviction tests to a separate test file\n\nout of net_tests, because the eviction tests:\n\n- are a different domain of test coverage, with different dependencies\n\n- run more slowly than the net tests\n\n- will be growing in size, in this PR branch and in the future, as eviction\n  test coverage is improved\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f126cbd6de6e1a8fee0e900ecfbc14a88e362541",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f126cbd6de6e1a8fee0e900ecfbc14a88e362541"
      }
    ],
    "stats": {
      "total": 304,
      "additions": 161,
      "deletions": 143
    },
    "files": [
      {
        "sha": "dc385b87b577d50aa28db65e18c11a6323af5680",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
        "patch": "@@ -101,6 +101,7 @@ BITCOIN_TESTS =\\\n   test/merkleblock_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/multisig_tests.cpp \\\n+  test/net_peer_eviction_tests.cpp \\\n   test/net_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\"
      },
      {
        "sha": "b80beeac5a245c165f5d6541f87ab0844381452c",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
        "patch": "@@ -0,0 +1,160 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <optional>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(net_peer_eviction_tests, BasicTestingSetup)\n+\n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const std::optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(peer_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Eight nodes with the lowest minimum ping time should be protected\n+            // from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [](NodeEvictionCandidate& candidate) {\n+                    candidate.m_min_ping_time = std::chrono::microseconds{candidate.id};\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n+\n+            // Four nodes that most recently sent us novel transactions accepted\n+            // into our mempool should be protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastTXTime = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Up to eight non-tx-relay peers that most recently sent us novel\n+            // blocks should be protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastBlockTime = number_of_nodes - candidate.id;\n+                    if (candidate.id <= 7) {\n+                        candidate.fRelayTxes = false;\n+                        candidate.fRelevantServices = true;\n+                    }\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n+\n+            // Four peers that most recently sent us novel blocks should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastBlockTime = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Combination of the previous two tests.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastBlockTime = number_of_nodes - candidate.id;\n+                    if (candidate.id <= 7) {\n+                        candidate.fRelayTxes = false;\n+                        candidate.fRelevantServices = true;\n+                    }\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, random_context));\n+\n+            // Combination of all tests above.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;           // 4 protected\n+                    candidate.m_min_ping_time = std::chrono::microseconds{candidate.id}; // 8 protected\n+                    candidate.nLastTXTime = number_of_nodes - candidate.id;              // 4 protected\n+                    candidate.nLastBlockTime = number_of_nodes - candidate.id;           // 4 protected\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, random_context));\n+\n+            // An eviction is expected given >= 29 random eviction candidates. The eviction logic protects at most\n+            // four peers by net group, eight by lowest ping time, four by last time of novel tx, up to eight non-tx-relay\n+            // peers by last novel block time, and four more peers by last novel block time.\n+            if (number_of_nodes >= 29) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+\n+            // No eviction is expected given <= 20 random eviction candidates. The eviction logic protects at least\n+            // four peers by net group, eight by lowest ping time, four by last time of novel tx and four peers by last\n+            // novel block time.\n+            if (number_of_nodes <= 20) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+\n+            // Cases left to test:\n+            // * \"Protect the half of the remaining nodes which have been connected the longest. [...]\"\n+            // * \"Pick out up to 1/4 peers that are localhost, sorted by longest uptime. [...]\"\n+            // * \"If any remaining peers are preferred for eviction consider only them. [...]\"\n+            // * \"Identify the network group with the most connections and youngest member. [...]\"\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "3b3b71ea2a3d9baf685b3b5a874d8151d1dca0a4",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 143,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
        "patch": "@@ -802,147 +802,4 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK_EQUAL(IsLocal(addr), false);\n }\n \n-std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n-{\n-    std::vector<NodeEvictionCandidate> candidates;\n-    for (int id = 0; id < n_candidates; ++id) {\n-        candidates.push_back({\n-            /* id */ id,\n-            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* m_min_ping_time */ std::chrono::microseconds{random_context.randrange(100)},\n-            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n-            /* fRelevantServices */ random_context.randbool(),\n-            /* fRelayTxes */ random_context.randbool(),\n-            /* fBloomFilter */ random_context.randbool(),\n-            /* nKeyedNetGroup */ random_context.randrange(100),\n-            /* prefer_evict */ random_context.randbool(),\n-            /* m_is_local */ random_context.randbool(),\n-        });\n-    }\n-    return candidates;\n-}\n-\n-// Returns true if any of the node ids in node_ids are selected for eviction.\n-bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n-{\n-    Shuffle(candidates.begin(), candidates.end(), random_context);\n-    const std::optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n-    if (!evicted_node_id) {\n-        return false;\n-    }\n-    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n-}\n-\n-// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n-// apply eviction logic and then return true if any of the node ids in node_ids\n-// are selected for eviction.\n-bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n-{\n-    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n-    for (NodeEvictionCandidate& candidate : candidates) {\n-        candidate_setup_fn(candidate);\n-    }\n-    return IsEvicted(candidates, node_ids, random_context);\n-}\n-\n-namespace {\n-constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n-constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n-} // namespace\n-\n-BOOST_AUTO_TEST_CASE(node_eviction_test)\n-{\n-    FastRandomContext random_context{true};\n-\n-    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n-        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n-            // Four nodes with the highest keyed netgroup values should be\n-            // protected from eviction.\n-            BOOST_CHECK(!IsEvicted(\n-                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n-                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;\n-                },\n-                {0, 1, 2, 3}, random_context));\n-\n-            // Eight nodes with the lowest minimum ping time should be protected\n-            // from eviction.\n-            BOOST_CHECK(!IsEvicted(\n-                number_of_nodes, [](NodeEvictionCandidate& candidate) {\n-                    candidate.m_min_ping_time = std::chrono::microseconds{candidate.id};\n-                },\n-                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n-\n-            // Four nodes that most recently sent us novel transactions accepted\n-            // into our mempool should be protected from eviction.\n-            BOOST_CHECK(!IsEvicted(\n-                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n-                    candidate.nLastTXTime = number_of_nodes - candidate.id;\n-                },\n-                {0, 1, 2, 3}, random_context));\n-\n-            // Up to eight non-tx-relay peers that most recently sent us novel\n-            // blocks should be protected from eviction.\n-            BOOST_CHECK(!IsEvicted(\n-                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n-                    candidate.nLastBlockTime = number_of_nodes - candidate.id;\n-                    if (candidate.id <= 7) {\n-                        candidate.fRelayTxes = false;\n-                        candidate.fRelevantServices = true;\n-                    }\n-                },\n-                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n-\n-            // Four peers that most recently sent us novel blocks should be\n-            // protected from eviction.\n-            BOOST_CHECK(!IsEvicted(\n-                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n-                    candidate.nLastBlockTime = number_of_nodes - candidate.id;\n-                },\n-                {0, 1, 2, 3}, random_context));\n-\n-            // Combination of the previous two tests.\n-            BOOST_CHECK(!IsEvicted(\n-                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n-                    candidate.nLastBlockTime = number_of_nodes - candidate.id;\n-                    if (candidate.id <= 7) {\n-                        candidate.fRelayTxes = false;\n-                        candidate.fRelevantServices = true;\n-                    }\n-                },\n-                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, random_context));\n-\n-            // Combination of all tests above.\n-            BOOST_CHECK(!IsEvicted(\n-                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n-                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;           // 4 protected\n-                    candidate.m_min_ping_time = std::chrono::microseconds{candidate.id}; // 8 protected\n-                    candidate.nLastTXTime = number_of_nodes - candidate.id;              // 4 protected\n-                    candidate.nLastBlockTime = number_of_nodes - candidate.id;           // 4 protected\n-                },\n-                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, random_context));\n-\n-            // An eviction is expected given >= 29 random eviction candidates. The eviction logic protects at most\n-            // four peers by net group, eight by lowest ping time, four by last time of novel tx, up to eight non-tx-relay\n-            // peers by last novel block time, and four more peers by last novel block time.\n-            if (number_of_nodes >= 29) {\n-                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n-            }\n-\n-            // No eviction is expected given <= 20 random eviction candidates. The eviction logic protects at least\n-            // four peers by net group, eight by lowest ping time, four by last time of novel tx and four peers by last\n-            // novel block time.\n-            if (number_of_nodes <= 20) {\n-                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n-            }\n-\n-            // Cases left to test:\n-            // * \"Protect the half of the remaining nodes which have been connected the longest. [...]\"\n-            // * \"Pick out up to 1/4 peers that are localhost, sorted by longest uptime. [...]\"\n-            // * \"If any remaining peers are preferred for eviction consider only them. [...]\"\n-            // * \"Identify the network group with the most connections and youngest member. [...]\"\n-        }\n-    }\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ca63b53ecdf377ce777fd959d400748912266748",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTYzYjUzZWNkZjM3N2NlNzc3ZmQ5NTlkNDAwNzQ4OTEyMjY2NzQ4",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-28T14:53:07Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:11:41Z"
      },
      "message": "Use std::unordered_set instead of std::vector in IsEvicted()\n\nAn unordered set can tell if an element is present in ~O(1) time (constant on\naverage, worst case linear to the size of the container), which speeds up and\nsimplifies the lookup in IsEvicted().\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "tree": {
        "sha": "3bbabdb29e6487db393ac638dd63f4f808674d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bbabdb29e6487db393ac638dd63f4f808674d2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca63b53ecdf377ce777fd959d400748912266748",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU920ACgkQT1chs9Dj\nkh3ciQ/9GQ2Pu/ghYZlvfC8Qa45kH4+4RGrfGjcDYPHEWjNI6sdtwSIwFc9mW/It\n675izEVrlqIx3URzzRizGSwFhE1gUKIPjZhRp19n/XVE324h/TI39595r0lRcMBz\nOpVm8PfoFGj8p74VKJQiCvAL9oeqOHiD9dOAx9j30eftr5mTyh5TuWFq0hkOJDhu\nk3hPxYuaZrYdvLwWAbqc+xsMvcU7CCQJtcFTmIVPwOzuZ7ukvqSa9I65HNtMoe5d\nMjTZB7wUe1whZd1fuaL6LR5CGC0nalQw2V1ixcZwX4qCFPEoeW7MKnm628h+/KFZ\nfl5VPeS8EaxurD1q3ZuQQUO6XzAMpCA65o2n7sL3pEz9hLTx6gB54MGayVSy8gEj\nOXGSVUt0ep5rOm8qo9LhQNM9yxs8IncR7j4eyLC6yGyAnsx0IzYvXCW1cpmDXkiG\nZd1wf4T57wJWXitXCGfGWUBboDlZW+iwkECH3F1coxxrlZGtfF0ol+2McpQKsNgD\nsfarMhgUz9D+SinutO0hRzMxD21xUuzR+atvLhWPMig4Xb3JpbS2vPgo0trqr/Dq\nST57n5w2R/MSJKiPAOTP7+Jhso2qZE/35ge4MyVCZkcn4R1lkv7ZX+ap78hBHInY\nIw1sdojj1riuBbT0BBNSBfp0SH7P5QNV54Rh9erDuR6Mnzw+Ty0=\n=2cH7\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDbwSWhGX1n0K/dGIz2tsJMKhHYSVyVosGnZyT1aLZn/CP/wECTIBQ39LNJV\nbTJ9i2VFQzkI8CBI2HqJLkQh+9LXGgm1snUxjKDdndIsdzskPMrdvfPeigjwIJzC\nDWotzB3zb/Tq9M41oLGsAuEz2HVitsEg3OVesVkKCPEEYFT3b/AI3Aks25PGeAoA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BA0GeSBL0aOtTbW5iWZctcHCPEEYFTpmPAIJKtKVopjZ44Ag9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BBs\nVzg/4HBLYMDwlPA7PsAGCPEEYFT3b/AIAcKT8x1GxfcAg9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ2/wTQVlo\ndRX17ZgjMZPEcAjxBGBU92/wCIrvBIAQ060+AIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 3bbabdb29e6487db393ac638dd63f4f808674d2b\nparent 41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6\nauthor Jon Atack <jon@atack.com> 1614523987 +0100\ncommitter Jon Atack <jon@atack.com> 1616181101 +0100\n\nUse std::unordered_set instead of std::vector in IsEvicted()\n\nAn unordered set can tell if an element is present in ~O(1) time (constant on\naverage, worst case linear to the size of the container), which speeds up and\nsimplifies the lookup in IsEvicted().\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca63b53ecdf377ce777fd959d400748912266748",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca63b53ecdf377ce777fd959d400748912266748",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca63b53ecdf377ce777fd959d400748912266748/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41f84d5eccd4c2620bf6fee616f2f8f717dbd6f6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "290a6b7eaea4536e06f3f04a6471cf8c3ac013f5",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca63b53ecdf377ce777fd959d400748912266748/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca63b53ecdf377ce777fd959d400748912266748/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=ca63b53ecdf377ce777fd959d400748912266748",
        "patch": "@@ -10,6 +10,7 @@\n #include <algorithm>\n #include <functional>\n #include <optional>\n+#include <unordered_set>\n #include <vector>\n \n BOOST_FIXTURE_TEST_SUITE(net_peer_eviction_tests, BasicTestingSetup)\n@@ -36,20 +37,20 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n }\n \n // Returns true if any of the node ids in node_ids are selected for eviction.\n-bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::unordered_set<NodeId>& node_ids, FastRandomContext& random_context)\n {\n     Shuffle(candidates.begin(), candidates.end(), random_context);\n     const std::optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n     if (!evicted_node_id) {\n         return false;\n     }\n-    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+    return node_ids.count(*evicted_node_id);\n }\n \n // Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n // apply eviction logic and then return true if any of the node ids in node_ids\n // are selected for eviction.\n-bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::unordered_set<NodeId>& node_ids, FastRandomContext& random_context)\n {\n     std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n     for (NodeEvictionCandidate& candidate : candidates) {"
      }
    ]
  },
  {
    "sha": "72e30e8e03f880eba4bd1c3fc18b5558d8cef680",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmUzMGU4ZTAzZjg4MGViYTRiZDFjM2ZjMThiNTU1OGQ4Y2VmNjgw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-21T15:36:49Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:11:43Z"
      },
      "message": "Add unit tests for ProtectEvictionCandidatesByRatio()\n\nThank you to Vasil Dimov (vasild) for the suggestion to use std::unordered_set\nrather than std::vector for the IsProtected() peer id arguments.",
      "tree": {
        "sha": "31c720c7948dc3f6c19a702096884f4ee103d2ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31c720c7948dc3f6c19a702096884f4ee103d2ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72e30e8e03f880eba4bd1c3fc18b5558d8cef680",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU928ACgkQT1chs9Dj\nkh3eGQ//T8SV2b6GprR8SL+x9Ef80pMut3NYbqx2nPmWJIrmJa9cHseJ3u9VABcy\nVC+JXNAIaUPu0rHYDLmhqwz4OImu+QHnQxkqgGkxL2bjfebUd0or8uUUK93NezOY\nVNQovBEzMj//+GZLMxJ793aPfgVyI2pn9Sw4pBKY+JL5hq4WZshxdXos/QxhL368\n3T4oUiI0YJ7Ia8Szn4RkpL4IFGp2FoaxdtY+Q5fLXo/8LdlBpZVfl9AVZIq7U1Q9\nFiVV6LymSUbebOuGuwYSCwbsQqHQr4fBrEyXz6qQtSVMIl0RalWD8xcxpdvmJJiG\ncFKOWxgK7S9GP0QJc9/TcSg1HAkeOEQ+/l33aR4Ikn1I3BMew7teq1wiU0h+7xKF\nQWpSu74npXF1h5ib7kayFGVCKppXIGpNMhh7tPV8LXF0TCNMatOfL/vtk+IvsfUQ\nCrkwkJzI0HTTtewUvTodMgG5NDTFCulEQuqgS9anVynkKva+/54hyfV/wyaerpGQ\nFuK9t61vLKkTM8DDuuoekDUZ7Ih06ky6dF2/yuySeCQ40WqeokgTr2I/j3Vjrq6h\n0gF5j8YiPfKZFYDp5ajrVZrl9uu7meK5YdEL9/ahk4AzkqL+H7VG/SKp0OWfoCL6\ndfIdHVKHDHJEK+H42Ex9ErwCuB7T5LIXclXNeDqOweYkCTZw8og=\n=jYgP\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIOPUMgeA8aFPtIdJtBIidzGoFZ9YFGQGWU+ZwYYQr5RmCP/wEBqUhRSkVk1/\nNLRyZirWoFMI8QRgVOma8AjSN+ETc6UJsgCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wED2r5HLO0S2Gl7aSxfCYgS0I\n8QRgVPdx8Ajv4g3JJjHkdACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVu\nZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJxhHdLtFn7ivsE7F9Q6+RwI8QRgVPdx\n8AjbU/4HYTtPOQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxs\nYXh5LmNvbfAQuF3UqxDjZjbfAOwSZAixcAjwIMdZuefAJ33i+eqW9A1BTt3Hh+Fe\nBMLmXT847CGNhGWnCPEEYFT3cfAIeLZQmwB4iQkAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 31c720c7948dc3f6c19a702096884f4ee103d2ae\nparent ca63b53ecdf377ce777fd959d400748912266748\nauthor Jon Atack <jon@atack.com> 1613921809 +0100\ncommitter Jon Atack <jon@atack.com> 1616181103 +0100\n\nAdd unit tests for ProtectEvictionCandidatesByRatio()\n\nThank you to Vasil Dimov (vasild) for the suggestion to use std::unordered_set\nrather than std::vector for the IsProtected() peer id arguments.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72e30e8e03f880eba4bd1c3fc18b5558d8cef680",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72e30e8e03f880eba4bd1c3fc18b5558d8cef680",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72e30e8e03f880eba4bd1c3fc18b5558d8cef680/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca63b53ecdf377ce777fd959d400748912266748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca63b53ecdf377ce777fd959d400748912266748",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca63b53ecdf377ce777fd959d400748912266748"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 97,
      "deletions": 7
    },
    "files": [
      {
        "sha": "418f5a4f71342a2a66516cb8cff51910f2701d70",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 7,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72e30e8e03f880eba4bd1c3fc18b5558d8cef680/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72e30e8e03f880eba4bd1c3fc18b5558d8cef680/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=72e30e8e03f880eba4bd1c3fc18b5558d8cef680",
        "patch": "@@ -15,6 +15,11 @@\n \n BOOST_FIXTURE_TEST_SUITE(net_peer_eviction_tests, BasicTestingSetup)\n \n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n {\n     std::vector<NodeEvictionCandidate> candidates;\n@@ -36,6 +41,98 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n     return candidates;\n }\n \n+// Create `num_peers` random nodes, apply setup function `candidate_setup_fn`,\n+// call ProtectEvictionCandidatesByRatio() to apply protection logic, and then\n+// return true if all of `protected_peer_ids` and none of `unprotected_peer_ids`\n+// are protected from eviction, i.e. removed from the eviction candidates.\n+bool IsProtected(int num_peers,\n+                 std::function<void(NodeEvictionCandidate&)> candidate_setup_fn,\n+                 const std::unordered_set<NodeId>& protected_peer_ids,\n+                 const std::unordered_set<NodeId>& unprotected_peer_ids,\n+                 FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates{GetRandomNodeEvictionCandidates(num_peers, random_context)};\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+\n+    const size_t size{candidates.size()};\n+    const size_t expected{size - size / 2}; // Expect half the candidates will be protected.\n+    ProtectEvictionCandidatesByRatio(candidates);\n+    BOOST_CHECK_EQUAL(candidates.size(), expected);\n+\n+    size_t unprotected_count{0};\n+    for (const NodeEvictionCandidate& candidate : candidates) {\n+        if (protected_peer_ids.count(candidate.id)) {\n+            // this peer should have been removed from the eviction candidates\n+            BOOST_TEST_MESSAGE(strprintf(\"expected candidate to be protected: %d\", candidate.id));\n+            return false;\n+        }\n+        if (unprotected_peer_ids.count(candidate.id)) {\n+            // this peer remains in the eviction candidates, as expected\n+            ++unprotected_count;\n+        }\n+    }\n+\n+    const bool is_protected{unprotected_count == unprotected_peer_ids.size()};\n+    if (!is_protected) {\n+        BOOST_TEST_MESSAGE(strprintf(\"unprotected: expected %d, actual %d\",\n+                                     unprotected_peer_ids.size(), unprotected_count));\n+    }\n+    return is_protected;\n+}\n+\n+BOOST_AUTO_TEST_CASE(peer_protection_test)\n+{\n+    FastRandomContext random_context{true};\n+    int num_peers{12};\n+\n+    // Expect half of the peers with greatest uptime (the lowest nTimeConnected)\n+    // to be protected from eviction.\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+        },\n+        /* protected_peer_ids */ {0, 1, 2, 3, 4, 5},\n+        /* unprotected_peer_ids */ {6, 7, 8, 9, 10, 11},\n+        random_context));\n+\n+    // Verify in the opposite direction.\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [num_peers](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = num_peers - c.id;\n+            c.m_is_local = false;\n+        },\n+        /* protected_peer_ids */ {6, 7, 8, 9, 10, 11},\n+        /* unprotected_peer_ids */ {0, 1, 2, 3, 4, 5},\n+        random_context));\n+\n+    // Test protection of localhost peers...\n+\n+    // Expect 1/4 localhost peers to be protected from eviction,\n+    // independently of other characteristics.\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.m_is_local = (c.id == 1 || c.id == 9 || c.id == 11);\n+        },\n+        /* protected_peer_ids */ {1, 9, 11},\n+        /* unprotected_peer_ids */ {},\n+        random_context));\n+\n+    // Expect 1/4 localhost peers and 1/4 of the others to be protected\n+    // from eviction, sorted by longest uptime (lowest nTimeConnected).\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = (c.id > 6);\n+        },\n+        /* protected_peer_ids */ {0, 1, 2, 7, 8, 9},\n+        /* unprotected_peer_ids */ {3, 4, 5, 6, 10, 11},\n+        random_context));\n+}\n+\n // Returns true if any of the node ids in node_ids are selected for eviction.\n bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::unordered_set<NodeId>& node_ids, FastRandomContext& random_context)\n {\n@@ -59,11 +156,6 @@ bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandida\n     return IsEvicted(candidates, node_ids, random_context);\n }\n \n-namespace {\n-constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n-constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n-} // namespace\n-\n BOOST_AUTO_TEST_CASE(peer_eviction_test)\n {\n     FastRandomContext random_context{true};\n@@ -150,8 +242,6 @@ BOOST_AUTO_TEST_CASE(peer_eviction_test)\n             }\n \n             // Cases left to test:\n-            // * \"Protect the half of the remaining nodes which have been connected the longest. [...]\"\n-            // * \"Pick out up to 1/4 peers that are localhost, sorted by longest uptime. [...]\"\n             // * \"If any remaining peers are preferred for eviction consider only them. [...]\"\n             // * \"Identify the network group with the most connections and youngest member. [...]\"\n         }"
      }
    ]
  },
  {
    "sha": "8b1e156143740a5548dc7b601d40fb141e6aae1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjFlMTU2MTQzNzQwYTU1NDhkYzdiNjAxZDQwZmIxNDFlNmFhZTFj",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-25T22:56:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:11:45Z"
      },
      "message": "Add m_inbound_onion to AttemptToEvictConnection()\n\nand an `m_is_onion` struct member to NodeEvictionCandidate and tests.\n\nWe'll use these in the peer eviction logic to protect inbound onion peers\nin addition to the existing protection of localhost peers.",
      "tree": {
        "sha": "190c7430ca8c2cdf81ead7b20f718cae19ba1348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/190c7430ca8c2cdf81ead7b20f718cae19ba1348"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b1e156143740a5548dc7b601d40fb141e6aae1c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU93EACgkQT1chs9Dj\nkh12NhAAxtR+edRmWu2pSG+FeLJngdg34+BiDCFCYl04Vd3C3rY3NSK1iLApjL9b\ncCsRDyrLy/DzmewyplFqqcFKVQFvOxGpGyoxpOja2a9MLwKSsGvLDsXwBNXCgGk4\nmW+Bz8Cx1SWlX60N5wa3eqU15MIIzGVwrnGYq7KyrqvcT3UAIrMWJnIGmuByvl7v\nOp0QJE0rsbSiUc9XdvCh7wmoOKpDl2Uk9YmynPHHP/pTxiwwFxLXXSA8KaJSSjEQ\nupS8G05au5sDe14vTjUHPN3N0M0QVy3GokN+8nDxTS7gxrsi9jDb/+4/fI266PlX\n3wA1raN620prqG0l5uaTLXXrS8zg+JM09frf2C4pKKfy3IG4pqlwepFNCta4wFCb\ndrvhR7OVd0iYnNW9KBRDJs+iV9M6LQKc1FwRxi56+FB3rEjIXCO+GZUCqgxxRbRb\nrL39USdwAHc9KK/Q0ZKY8EwogsHqptVingdKd4MLsPPABi3wta80H1qf87mcFMmA\ngnWgDbRZn6rfMF9tUeNi3PwmaHwVXQVZ8BJxwmVr3eD1ckizox9PsiP1nGAF8jkB\nA3sOJh1em+k5MJRoiTD0NXZf1kvB50Te+tv+dEE5Uyy5k8lqZdZwDHRMsTZAfU54\n7KNyRWcTJlg9+nyh5fCMzJdPuS46R2mHck7rnELy5DgoHdQbcTw=\n=oAfJ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHmvgse9fB0YRieBkX0BVu7XjGSL8qi3WdYJUXd7eta4CP/wEEmRWGo9y/h0\noQ4FrqAItl8I8QRgVOmc8AiTZSp5XCt7qwCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEGnXHTRIQSEJNvNaA2GRtHUI\n8QRgVPdz8Aj9DD4moO1fJACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEHyFB5XSNWPXhtrxJOJG1ogI8QRgVPdz8AhkJdSsCm3X\nAwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQkF507xzs6KnWiW4BkaFtLQjxBGBU93PwCGZh27m8ptMXAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 190c7430ca8c2cdf81ead7b20f718cae19ba1348\nparent 72e30e8e03f880eba4bd1c3fc18b5558d8cef680\nauthor Jon Atack <jon@atack.com> 1608936977 +0100\ncommitter Jon Atack <jon@atack.com> 1616181105 +0100\n\nAdd m_inbound_onion to AttemptToEvictConnection()\n\nand an `m_is_onion` struct member to NodeEvictionCandidate and tests.\n\nWe'll use these in the peer eviction logic to protect inbound onion peers\nin addition to the existing protection of localhost peers.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1e156143740a5548dc7b601d40fb141e6aae1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b1e156143740a5548dc7b601d40fb141e6aae1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1e156143740a5548dc7b601d40fb141e6aae1c/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72e30e8e03f880eba4bd1c3fc18b5558d8cef680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72e30e8e03f880eba4bd1c3fc18b5558d8cef680",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72e30e8e03f880eba4bd1c3fc18b5558d8cef680"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a3f3377df936f707a6829beb62b5b5e3efce325b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8b1e156143740a5548dc7b601d40fb141e6aae1c",
        "patch": "@@ -992,7 +992,8 @@ bool CConnman::AttemptToEvictConnection()\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n-                                               node->m_prefer_evict, node->addr.IsLocal()};\n+                                               node->m_prefer_evict, node->addr.IsLocal(),\n+                                               node->m_inbound_onion};\n             vEvictionCandidates.push_back(candidate);\n         }\n     }"
      },
      {
        "sha": "bf8458be6e291bd0589404fc7fe384732d54e791",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8b1e156143740a5548dc7b601d40fb141e6aae1c",
        "patch": "@@ -425,6 +425,7 @@ class CNode\n \n     std::atomic<int64_t> nLastSend{0};\n     std::atomic<int64_t> nLastRecv{0};\n+    //! Unix epoch time at peer connection, in seconds.\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset{0};\n     // Address of this peer\n@@ -1281,6 +1282,7 @@ struct NodeEvictionCandidate\n     uint64_t nKeyedNetGroup;\n     bool prefer_evict;\n     bool m_is_local;\n+    bool m_is_onion;\n };\n \n /**"
      },
      {
        "sha": "70ffc6bf37f25c5850b148ea40dbd5de73e1ea59",
        "filename": "src/test/fuzz/node_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/test/fuzz/node_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/test/fuzz/node_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/node_eviction.cpp?ref=8b1e156143740a5548dc7b601d40fb141e6aae1c",
        "patch": "@@ -31,6 +31,7 @@ FUZZ_TARGET(node_eviction)\n             /* nKeyedNetGroup */ fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n             /* prefer_evict */ fuzzed_data_provider.ConsumeBool(),\n             /* m_is_local */ fuzzed_data_provider.ConsumeBool(),\n+            /* m_is_onion */ fuzzed_data_provider.ConsumeBool(),\n         });\n     }\n     // Make a copy since eviction_candidates may be in some valid but otherwise"
      },
      {
        "sha": "517474bad4ca0a53da149e20334113c02926c130",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b1e156143740a5548dc7b601d40fb141e6aae1c/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=8b1e156143740a5548dc7b601d40fb141e6aae1c",
        "patch": "@@ -36,6 +36,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n+            /* m_is_onion */ random_context.randbool(),\n         });\n     }\n     return candidates;"
      }
    ]
  },
  {
    "sha": "8f1a53eb027727a4c0eaac6d82f0a8279549f638",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjFhNTNlYjAyNzcyN2E0YzBlYWFjNmQ4MmYwYTgyNzk1NDlmNjM4",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-10-20T06:28:56Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:11:47Z"
      },
      "message": "Use EraseLastKElements() throughout SelectNodeToEvict()\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "tree": {
        "sha": "29591bab4c4ef2901d6d364a9d886b20b312aeab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29591bab4c4ef2901d6d364a9d886b20b312aeab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f1a53eb027727a4c0eaac6d82f0a8279549f638",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU93MACgkQT1chs9Dj\nkh0hOA//bn+X4i+tBQVIvYGR9OX3creUnkVjYh3SUXj/WTESkK9JdEOnoKL2UAlz\nKAWjykbkeYv+o/5RElA5beTjkjjB3GRAxsvMCFP2RWfwkVLOpVIC6Wmoay1QgzyT\nbSM5jRPrPR6/CMLwDuEHoxYdKSKIzhXhiKtxSHwefGjrO34y5Ihcs+AxQhA6npBk\nWbn0eE6kpldL1AFUsi18wM7T29+BuIqJhrNafbzRxHefDw1WJmTveGTIXDBSDFY1\nxbKInIdevMCIdaMhG6oK/SgDoVi6LuXCnDpuYzdkyghFwASXzBs44g9qofdoSlqi\nQnqQmBd2F2szHVOjFD5Y5pIZ3HUxXDrvn/2IonzUSAPZKyRVlldlTyotmkb77SQj\nZNFx7UDHBctJENbceYPaQr+E2AiejeG3fP8eXssOg+sR3ueJew90DswvcLrgAwRf\nj+FN2yVwlMQ/i0stJhts1/T6UFFFIE0uoRbGQXj34c8T+96oGyYLnLci8ijV6nrJ\nIYcZ289Ys4HJ5R0PArtdPlEbqz4EWqkbmHyCAKuK0arDvhFKchrr18PrHoLF4ATA\nG8lnPDm6FdRzXu4mJ5e9V+Om/zbK99kv19cPlUjMBFBl7PuhHrwX81e+UBO4/Fjy\n7YER2/WrSu5xFHjmy1ZdjsaiKuLDK+NI10xo1L6yxgOCy/GR8b4=\n=4hYu\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAceSvyeJEpQJt2kPk5IM6IM78V7tbC1Lk1Onx2f2uWACP/wEG1O7oIuD5hD\nlDWSdkyErZkI8SAdsBL+soC5A3UeL1c098jjO5xMdtC75FxWZPUsbQ5lRgjxBGBU\n6Z7wCA934UmYiGvxAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQiIbH39jLu6IDlwl/0JAyxwjxIPTLrSXwqypdywxY\noD1d3qFcJ76Ekqi0AbH6xecSyBlbCPEEYFT3dfAIAbp/8sQnj/IAg9/jDS75DI4j\nImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BC97o65IO4LZvwV\nfIf+Pa9vCPEg+lvd1IEWlvcmOTPKc1y64Z0eLsXKWATozuDdlPr0OWwI8QRgVPd1\n8AgQUCKXEtOhWgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDsQCfUBTXQTELSOO+kkKVeCPEgmHlaSFzsBLMB\nq2FZREOZ2i2v0ORBHrcKj4+dACQ+f7YI8QRgVPd18AhVo9wNm0iwMACD3+MNLvkM\njiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 29591bab4c4ef2901d6d364a9d886b20b312aeab\nparent 8b1e156143740a5548dc7b601d40fb141e6aae1c\nauthor Jon Atack <jon@atack.com> 1603175336 +0200\ncommitter Jon Atack <jon@atack.com> 1616181107 +0100\n\nUse EraseLastKElements() throughout SelectNodeToEvict()\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1a53eb027727a4c0eaac6d82f0a8279549f638",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f1a53eb027727a4c0eaac6d82f0a8279549f638",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1a53eb027727a4c0eaac6d82f0a8279549f638/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b1e156143740a5548dc7b601d40fb141e6aae1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1e156143740a5548dc7b601d40fb141e6aae1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b1e156143740a5548dc7b601d40fb141e6aae1c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "7efa9ea10ef8bce1b889e96ea4a02b6dff650abf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f1a53eb027727a4c0eaac6d82f0a8279549f638/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f1a53eb027727a4c0eaac6d82f0a8279549f638/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8f1a53eb027727a4c0eaac6d82f0a8279549f638",
        "patch": "@@ -870,13 +870,15 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n-//! Sort an array by the specified comparator, then erase the last K elements.\n-template<typename T, typename Comparator>\n-static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)\n+//! Sort an array by the specified comparator, then erase the last K elements where predicate is true.\n+template <typename T, typename Comparator>\n+static void EraseLastKElements(\n+    std::vector<T>& elements, Comparator comparator, size_t k,\n+    std::function<bool(const NodeEvictionCandidate&)> predicate = [](const NodeEvictionCandidate& n) { return true; })\n {\n     std::sort(elements.begin(), elements.end(), comparator);\n     size_t eraseSize = std::min(k, elements.size());\n-    elements.erase(elements.end() - eraseSize, elements.end());\n+    elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n@@ -886,13 +888,14 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // Reserve half of these protected spots for localhost peers, even if\n     // they're not longest-uptime overall. This helps protect tor peers, which\n     // tend to be otherwise disadvantaged under our eviction criteria.\n-    size_t initial_size = vEvictionCandidates.size();\n+    const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n \n     // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareLocalHostTimeConnected);\n-    size_t local_erase_size = total_protect_size / 2;\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - local_erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return n.m_is_local; }), vEvictionCandidates.end());\n+    const size_t local_erase_size = total_protect_size / 2;\n+    EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, local_erase_size,\n+                       [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+\n     // Calculate how many we removed, and update our total number of peers that\n     // we want to protect based on uptime accordingly.\n     total_protect_size -= initial_size - vEvictionCandidates.size();\n@@ -913,9 +916,9 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // An attacker cannot manipulate this metric without performing useful work.\n     EraseLastKElements(vEvictionCandidates, CompareNodeTXTime, 4);\n     // Protect up to 8 non-tx-relay peers that have sent us novel blocks.\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeBlockRelayOnlyTime);\n-    size_t erase_size = std::min(size_t(8), vEvictionCandidates.size());\n-    vEvictionCandidates.erase(std::remove_if(vEvictionCandidates.end() - erase_size, vEvictionCandidates.end(), [](NodeEvictionCandidate const &n) { return !n.fRelayTxes && n.fRelevantServices; }), vEvictionCandidates.end());\n+    const size_t erase_size = std::min(size_t(8), vEvictionCandidates.size());\n+    EraseLastKElements(vEvictionCandidates, CompareNodeBlockRelayOnlyTime, erase_size,\n+                       [](const NodeEvictionCandidate& n) { return !n.fRelayTxes && n.fRelevantServices; });\n \n     // Protect 4 nodes that most recently sent us novel blocks.\n     // An attacker cannot manipulate this metric without performing useful work.\n@@ -944,7 +947,7 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     for (const NodeEvictionCandidate &node : vEvictionCandidates) {\n         std::vector<NodeEvictionCandidate> &group = mapNetGroupNodes[node.nKeyedNetGroup];\n         group.push_back(node);\n-        int64_t grouptime = group[0].nTimeConnected;\n+        const int64_t grouptime = group[0].nTimeConnected;\n \n         if (group.size() > nMostConnections || (group.size() == nMostConnections && grouptime > nMostConnectionsTime)) {\n             nMostConnections = group.size();"
      }
    ]
  },
  {
    "sha": "caa21f586f951d626a67f391050c3644f1057f57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWEyMWY1ODZmOTUxZDYyNmE2N2YzOTEwNTBjMzY0NGYxMDU3ZjU3",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-20T16:17:26Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:13:04Z"
      },
      "message": "Protect onion+localhost peers in ProtectEvictionCandidatesByRatio()\n\nNow that we have a reliable way to detect inbound onion peers, this commit\nupdates our existing eviction protection of 1/4 localhost peers to instead\nprotect up to 1/4 onion peers (connected via our tor control service), sorted by\nlongest uptime. Any remaining slots of the 1/4 are then allocated to protect\nlocalhost peers, or 2 localhost peers if no slots remain and 2 or more onion\npeers are protected, sorted by longest uptime.\n\nThe goal is to avoid penalizing onion peers, due to their higher min ping times\nrelative to IPv4 and IPv6 peers, and improve our diversity of peer connections.\n\nThank you to Gregory Maxwell, Suhas Daftuar, Vasil Dimov and Pieter Wuille\nfor valuable review feedback that shaped the direction.",
      "tree": {
        "sha": "22f586682a41742f4d39b6194981b5ae6bec4257",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22f586682a41742f4d39b6194981b5ae6bec4257"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caa21f586f951d626a67f391050c3644f1057f57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU98UACgkQT1chs9Dj\nkh1hRRAAvIQb7XnWUYL/Kc+O+f/upEXIQXqdXlQANrBmhspJ+be5Z19gpsEEEyMZ\n0pDK07T90+BW087n3wkvDKUWvAi49TSVZjUUCvsLRTWvC6ow+DBbHfq/FaKDYCZK\nx9/IM/CiUfwxmkTEmkmg7mfH/DtB0H0Pmje/MqqguIKE4x0MtZ/E5qSH5fUf6eOo\nGmth2BdocLG8RnfjOabim2vtXwXzDyxhIKGglyxSuvXAVhsrqdZlRqY88rIZXr4g\nppVciirD0X8TX/zK2BJcwQauNHukikzKl6rYG0maGzmDqkuzoHDPxd4dyFAVxXVg\nTcaNJiX5ORrRca5chdbf9Vm/bKJ8geQlGUZnOvFnhcdFbT5eYNkJjztl2kIP6Roe\nWuDn/imvaUpjLHAXYRsK3Ue1HFwshqmdk/AeRyRzVVZdBIGg5LX06K758fxpx7t+\nSuIGxjJHXLhXlzkqcOCWD77JfyGJc6y1Kzxnf7tzHFsd78t9biON5MK6OH78bCMZ\nfSTVJBa74CzfSLOyFZ0akSmwkxVDlTgxkXMqBFYaIIb4UdBUq0cIqIJPH1g9tVI0\ngKzxTp5zyi1t3hZ8f42QBQw7h8KRI0NXro8ObLuE8UJNar8rVfqlRWCsfUvmGgwZ\ngRN8Y96qIW1+Xl8xWCYoUOnG41p7Djg++LpCKHUC1QQHq8ySDOw=\n=cM/8\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMha97Jd54Md9JnrwFdh/2vq0bV8pB9+jmWX+i6td+bSCP/wEBJQXHOOFjns\ngG+aTXx681EI8SB4xl7ISm1W3Omh0GLbaUjNBNdyAb5IVK2qdKT+OI04YgjxBGBU\n98bwCPRe0vWWW28WAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BBpgSA+OOfzJ0cMfIkrN6drCPAgXuIeNrzI\nZ4GiS7cd+zbFL6AbHzkelLad3Bqf2JByJVwI8QRgVPfH8AjNdqkA79QNEQCD3+MN\nLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEKBEjf/n\nL/go8t7QoM04iV8I8SCd5DpciB3fo7GbGWpFSkbQSYUr0fOw1lvG+Es5dBd/QQjx\nBGBU6fDwCF3b5DG//JOvAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRh\nci5ldGVybml0eXdhbGwuY29t8BC4hLQx7i30Ec6vaOr1EKSHCPAg7ZTGmEwwl7TP\nSuC7xlxK4gMIq2sp9lWEi4tFU0/ZzM8I8QRgVPfH8Ajwv1uy3IEFKgCD3+MNLvkM\njiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 22f586682a41742f4d39b6194981b5ae6bec4257\nparent 8f1a53eb027727a4c0eaac6d82f0a8279549f638\nauthor Jon Atack <jon@atack.com> 1613837846 +0100\ncommitter Jon Atack <jon@atack.com> 1616181184 +0100\n\nProtect onion+localhost peers in ProtectEvictionCandidatesByRatio()\n\nNow that we have a reliable way to detect inbound onion peers, this commit\nupdates our existing eviction protection of 1/4 localhost peers to instead\nprotect up to 1/4 onion peers (connected via our tor control service), sorted by\nlongest uptime. Any remaining slots of the 1/4 are then allocated to protect\nlocalhost peers, or 2 localhost peers if no slots remain and 2 or more onion\npeers are protected, sorted by longest uptime.\n\nThe goal is to avoid penalizing onion peers, due to their higher min ping times\nrelative to IPv4 and IPv6 peers, and improve our diversity of peer connections.\n\nThank you to Gregory Maxwell, Suhas Daftuar, Vasil Dimov and Pieter Wuille\nfor valuable review feedback that shaped the direction.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa21f586f951d626a67f391050c3644f1057f57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caa21f586f951d626a67f391050c3644f1057f57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa21f586f951d626a67f391050c3644f1057f57/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f1a53eb027727a4c0eaac6d82f0a8279549f638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f1a53eb027727a4c0eaac6d82f0a8279549f638",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f1a53eb027727a4c0eaac6d82f0a8279549f638"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 45,
      "deletions": 18
    },
    "files": [
      {
        "sha": "66d81b115f3ecb26764d289e5a0bd6c9f8bedac7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 7,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa21f586f951d626a67f391050c3644f1057f57/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa21f586f951d626a67f391050c3644f1057f57/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=caa21f586f951d626a67f391050c3644f1057f57",
        "patch": "@@ -840,6 +840,12 @@ static bool CompareLocalHostTimeConnected(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+static bool CompareOnionTimeConnected(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b)\n+{\n+    if (a.m_is_onion != b.m_is_onion) return b.m_is_onion;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n+\n static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\n     return a.nKeyedNetGroup < b.nKeyedNetGroup;\n }\n@@ -885,16 +891,31 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // Reserve half of these protected spots for localhost peers, even if\n-    // they're not longest-uptime overall. This helps protect tor peers, which\n-    // tend to be otherwise disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n+    // these protected spots for onion and localhost peers, if any, even if they're not\n+    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n+    // disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n+    const size_t onion_protect_size = total_protect_size / 2;\n \n-    // Pick out up to 1/4 peers that are localhost, sorted by longest uptime.\n-    const size_t local_erase_size = total_protect_size / 2;\n-    EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, local_erase_size,\n-                       [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    if (onion_protect_size) {\n+        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n+        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n+                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    }\n+\n+    const size_t localhost_min_protect_size{2};\n+    if (onion_protect_size >= localhost_min_protect_size) {\n+        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n+        // to localhost peers, sorted by longest uptime, as manually configured\n+        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n+        // as inbound onion connections.\n+        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n+        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n+        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n+                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    }\n \n     // Calculate how many we removed, and update our total number of peers that\n     // we want to protect based on uptime accordingly."
      },
      {
        "sha": "eb7fa079ab5193ee74377cf117d2e6be6f6927aa",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa21f586f951d626a67f391050c3644f1057f57/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa21f586f951d626a67f391050c3644f1057f57/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=caa21f586f951d626a67f391050c3644f1057f57",
        "patch": "@@ -1288,9 +1288,9 @@ struct NodeEvictionCandidate\n /**\n  * Select an inbound peer to evict after filtering out (protecting) peers having\n  * distinct, difficult-to-forge characteristics. The protection logic picks out\n- * fixed numbers of desirable peers per various criteria, followed by ratios of\n- * desirable or disadvantaged peers. If any eviction candidates remain, the\n- * selection logic chooses a peer to evict.\n+ * fixed numbers of desirable peers per various criteria, followed by (mostly)\n+ * ratios of desirable or disadvantaged peers. If any eviction candidates\n+ * remain, the selection logic chooses a peer to evict.\n  */\n [[nodiscard]] std::optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates);\n \n@@ -1300,9 +1300,13 @@ struct NodeEvictionCandidate\n  * longest, to replicate the non-eviction implicit behavior and preclude attacks\n  * that start later.\n  *\n- * Half of these protected spots (1/4 of the total) are reserved for localhost\n- * peers, if any, sorted by longest uptime, even if they're not longest uptime\n- * overall.\n+ * Half of these protected spots (1/4 of the total) are reserved for onion peers\n+ * connected via our tor control service, if any, sorted by longest uptime, even\n+ * if they're not longest uptime overall. Any remaining slots of the 1/4 are\n+ * then allocated to protect localhost peers, if any (or up to 2 localhost peers\n+ * if no slots remain and 2 or more onion peers were protected), sorted by\n+ * longest uptime, as manually configured hidden services not using\n+ * `-bind=addr[:port]=onion` will not be detected as inbound onion connections.\n  *\n  * This helps protect onion peers, which tend to be otherwise disadvantaged\n  * under our eviction criteria for their higher min ping times relative to IPv4"
      },
      {
        "sha": "0bd0aefcee496ba583dc4e3ebd3e58df4e5e8760",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa21f586f951d626a67f391050c3644f1057f57/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa21f586f951d626a67f391050c3644f1057f57/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=caa21f586f951d626a67f391050c3644f1057f57",
        "patch": "@@ -94,7 +94,7 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n     BOOST_CHECK(IsProtected(\n         num_peers, [](NodeEvictionCandidate& c) {\n             c.nTimeConnected = c.id;\n-            c.m_is_local = false;\n+            c.m_is_onion = c.m_is_local = false;\n         },\n         /* protected_peer_ids */ {0, 1, 2, 3, 4, 5},\n         /* unprotected_peer_ids */ {6, 7, 8, 9, 10, 11},\n@@ -104,7 +104,7 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n     BOOST_CHECK(IsProtected(\n         num_peers, [num_peers](NodeEvictionCandidate& c) {\n             c.nTimeConnected = num_peers - c.id;\n-            c.m_is_local = false;\n+            c.m_is_onion = c.m_is_local = false;\n         },\n         /* protected_peer_ids */ {6, 7, 8, 9, 10, 11},\n         /* unprotected_peer_ids */ {0, 1, 2, 3, 4, 5},\n@@ -113,20 +113,22 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n     // Test protection of localhost peers...\n \n     // Expect 1/4 localhost peers to be protected from eviction,\n-    // independently of other characteristics.\n+    // if no onion peers.\n     BOOST_CHECK(IsProtected(\n         num_peers, [](NodeEvictionCandidate& c) {\n+            c.m_is_onion = false;\n             c.m_is_local = (c.id == 1 || c.id == 9 || c.id == 11);\n         },\n         /* protected_peer_ids */ {1, 9, 11},\n         /* unprotected_peer_ids */ {},\n         random_context));\n \n-    // Expect 1/4 localhost peers and 1/4 of the others to be protected\n-    // from eviction, sorted by longest uptime (lowest nTimeConnected).\n+    // Expect 1/4 localhost peers and 1/4 of the other peers to be protected,\n+    // sorted by longest uptime (lowest nTimeConnected), if no onion peers.\n     BOOST_CHECK(IsProtected(\n         num_peers, [](NodeEvictionCandidate& c) {\n             c.nTimeConnected = c.id;\n+            c.m_is_onion = false;\n             c.m_is_local = (c.id > 6);\n         },\n         /* protected_peer_ids */ {0, 1, 2, 7, 8, 9},"
      }
    ]
  },
  {
    "sha": "0cca08a8ee33b4e05ff586ae4fd914f5ea860cea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2NhMDhhOGVlMzNiNGUwNWZmNTg2YWU0ZmQ5MTRmNWVhODYwY2Vh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-02-21T21:22:42Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-19T19:13:11Z"
      },
      "message": "Add unit test coverage for our onion peer eviction protection",
      "tree": {
        "sha": "7745ddf880dac0b7a87b435291de81f48995c44f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7745ddf880dac0b7a87b435291de81f48995c44f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cca08a8ee33b4e05ff586ae4fd914f5ea860cea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmBU98cACgkQT1chs9Dj\nkh1FtA/9F3uMe5Wo6Y5TfjdmLfB0SpZ8t10Z0o/oyzHJKcWoRQyTWjYezFNk6f2C\n+yXbNqaoWSUikbvUWGWdbTTn3qQCik3rmiIqLSxnni/N4Z/k25tk5uzM31V/dHbl\nSMe1iC8FyejU3ZWHXI6Hf4hTWy8SQR/We3w7Ip2cHCeEWwvtAReEoU1fnOVOlSu2\nPTrKXXfvSIMvS8G3/9DaQ818roTffZQxszDRzvlk6TV1T668lbAkQosPHbGERq67\n82kjn1IBMyzxeageij9oprWaYpGBMkRk5kDEDrneaPDCeQ3ccSe5JClmAd8bw6ou\nL/4DQeTtcN2ck6aLbV5dnH4oWimAkb67eqVYED8MyqcF3HAHC4d9cgQvnq/vLgAJ\nD0sWFkkMXexGtaXq9Z2d68uQbLuycdFiRga2usTSchDXyfMKRoY44Pc6z+OtYzrD\ndAjC4aXeOOPcXasD6iVweX4QWdJrvXUiXXjXHRA16aqm9/x5EMuqK0LUj3qNk3hi\nIU1kM7bgLRZiskKofrJEEIwMvtO0SMJpL4skqVQDK3KcMjacUKCWX7o19SO+CdlG\nMS6cMzuKTpLagotQ4iL2AVPxRizyeACPMCm2GiCGbS49v77M/XUWDDiKbHpsnEpD\ndmfMV7JwJDC4XmfLyV8N9Xc0rfyosjgIGWPOeTR7NU+hL+CgseA=\n=3sY4\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGCrQ248bHt4I5qwrmUKi8Nf/tItwYRbdnfqJJKk9QLTCP/wEAyDuXtOh6Cr\nCRUHYkTOTIUI8CD7O0V7qc4Q1VTe7N+QK4mIF36nVxGPtqYWBsG+A5H9UAjwICrq\nfzoAH47rwaNI1FPP8Jisr3NNADkWS2f+NhJwboKzCPEEYFT3yfAI6csmTAuKF4UA\ng9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ//wEIhEgDlM4kKEOn4xO/fJTFMI8QRgVOny8AhyRiievZz0cACD3+MN\nLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/w\nEJUMAbwizFa+1sSjzdpXxDEI8QRgVPfJ8Ag4yIeXs0aToACD3+MNLvkMjiwraHR0\ncHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ5Yv8mawq\nNfmTGyf1vKNziAjxBGBU98nwCEEjlnXCm6IQAIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7745ddf880dac0b7a87b435291de81f48995c44f\nparent caa21f586f951d626a67f391050c3644f1057f57\nauthor Jon Atack <jon@atack.com> 1613942562 +0100\ncommitter Jon Atack <jon@atack.com> 1616181191 +0100\n\nAdd unit test coverage for our onion peer eviction protection\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cca08a8ee33b4e05ff586ae4fd914f5ea860cea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cca08a8ee33b4e05ff586ae4fd914f5ea860cea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cca08a8ee33b4e05ff586ae4fd914f5ea860cea/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caa21f586f951d626a67f391050c3644f1057f57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa21f586f951d626a67f391050c3644f1057f57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caa21f586f951d626a67f391050c3644f1057f57"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 95,
      "deletions": 1
    },
    "files": [
      {
        "sha": "31d391bf7d88755ee8a207ff030a229e9b9672bc",
        "filename": "src/test/net_peer_eviction_tests.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 1,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cca08a8ee33b4e05ff586ae4fd914f5ea860cea/src/test/net_peer_eviction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cca08a8ee33b4e05ff586ae4fd914f5ea860cea/src/test/net_peer_eviction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_peer_eviction_tests.cpp?ref=0cca08a8ee33b4e05ff586ae4fd914f5ea860cea",
        "patch": "@@ -110,7 +110,29 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n         /* unprotected_peer_ids */ {0, 1, 2, 3, 4, 5},\n         random_context));\n \n-    // Test protection of localhost peers...\n+    // Test protection of onion and localhost peers...\n+\n+    // Expect 1/4 onion peers to be protected from eviction,\n+    // independently of other characteristics.\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.m_is_onion = (c.id == 3 || c.id == 8 || c.id == 9);\n+        },\n+        /* protected_peer_ids */ {3, 8, 9},\n+        /* unprotected_peer_ids */ {},\n+        random_context));\n+\n+    // Expect 1/4 onion peers and 1/4 of the others to be protected\n+    // from eviction, sorted by longest uptime (lowest nTimeConnected).\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_local = false;\n+            c.m_is_onion = (c.id == 3 || c.id > 7);\n+        },\n+        /* protected_peer_ids */ {0, 1, 2, 3, 8, 9},\n+        /* unprotected_peer_ids */ {4, 5, 6, 7, 10, 11},\n+        random_context));\n \n     // Expect 1/4 localhost peers to be protected from eviction,\n     // if no onion peers.\n@@ -134,6 +156,78 @@ BOOST_AUTO_TEST_CASE(peer_protection_test)\n         /* protected_peer_ids */ {0, 1, 2, 7, 8, 9},\n         /* unprotected_peer_ids */ {3, 4, 5, 6, 10, 11},\n         random_context));\n+\n+    // Combined test: expect 1/4 onion and 2 localhost peers to be protected\n+    // from eviction, sorted by longest uptime.\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_onion = (c.id == 0 || c.id == 5 || c.id == 10);\n+            c.m_is_local = (c.id == 1 || c.id == 9 || c.id == 11);\n+        },\n+        /* protected_peer_ids */ {0, 1, 2, 5, 9, 10},\n+        /* unprotected_peer_ids */ {3, 4, 6, 7, 8, 11},\n+        random_context));\n+\n+    // Combined test: expect having only 1 onion to allow allocating the\n+    // remaining 2 of the 1/4 to localhost peers, sorted by longest uptime.\n+    BOOST_CHECK(IsProtected(\n+        num_peers + 4, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_onion = (c.id == 15);\n+            c.m_is_local = (c.id > 6 && c.id < 11);\n+        },\n+        /* protected_peer_ids */ {0, 1, 2, 3, 7, 8, 9, 15},\n+        /* unprotected_peer_ids */ {4, 5, 6, 10, 11, 12, 13, 14},\n+        random_context));\n+\n+    // Combined test: expect 2 onions (< 1/4) to allow allocating the minimum 2\n+    // localhost peers, sorted by longest uptime.\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_onion = (c.id == 7 || c.id == 9);\n+            c.m_is_local = (c.id == 6 || c.id == 11);\n+        },\n+        /* protected_peer_ids */ {0, 1, 6, 7, 9, 11},\n+        /* unprotected_peer_ids */ {2, 3, 4, 5, 8, 10},\n+        random_context));\n+\n+    // Combined test: when > 1/4, expect max 1/4 onion and 2 localhost peers\n+    // to be protected from eviction, sorted by longest uptime.\n+    BOOST_CHECK(IsProtected(\n+        num_peers, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_onion = (c.id > 3 && c.id < 8);\n+            c.m_is_local = (c.id > 7);\n+        },\n+        /* protected_peer_ids */ {0, 4, 5, 6, 8, 9},\n+        /* unprotected_peer_ids */ {1, 2, 3, 7, 10, 11},\n+        random_context));\n+\n+    // Combined test: idem > 1/4 with only 8 peers: expect 2 onion and 2\n+    // localhost peers (1/4 + 2) to be protected, sorted by longest uptime.\n+    BOOST_CHECK(IsProtected(\n+        8, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_onion = (c.id > 1 && c.id < 5);\n+            c.m_is_local = (c.id > 4);\n+        },\n+        /* protected_peer_ids */ {2, 3, 5, 6},\n+        /* unprotected_peer_ids */ {0, 1, 4, 7},\n+        random_context));\n+\n+    // Combined test: idem > 1/4 with only 6 peers: expect 1 onion peer and no\n+    // localhost peers (1/4 + 0) to be protected, sorted by longest uptime.\n+    BOOST_CHECK(IsProtected(\n+        6, [](NodeEvictionCandidate& c) {\n+            c.nTimeConnected = c.id;\n+            c.m_is_onion = (c.id == 4 || c.id == 5);\n+            c.m_is_local = (c.id == 3);\n+        },\n+        /* protected_peer_ids */ {0, 1, 4},\n+        /* unprotected_peer_ids */ {2, 3, 5},\n+        random_context));\n }\n \n // Returns true if any of the node ids in node_ids are selected for eviction."
      }
    ]
  }
]