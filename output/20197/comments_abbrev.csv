sdaftuar,2020-10-20 14:07:35,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712879256,712879256,
DrahtBot,2020-10-20 14:35:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21160 (net/net processing: Move tx inventory into net_processing by jnewbery)\n* #20196 (net: fix GetListenPort() to deri",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712899496,712899496,
practicalswift,2020-10-20 15:00:06,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712916354,712916354,
hebasto,2020-10-20 16:51:02,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-712999337,712999337,
jonatack,2020-10-21 10:15:41,Added `CNode::m_inbound_onion` unit test coverage in #20210.,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-713464786,713464786,
gmaxwell,2020-10-21 20:43:06,"Sounds good, although you might want to add a couple slots for actual localhost peers. :)",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-713865992,713865992,
sipa,2020-11-05 02:03:24,"> Sounds good, although you might want to add a couple slots for actual localhost peers. :)\n\nAnyone with an old manually-configured hidden service not using the new bind style will have their inbound Tor connections not classified as such, so this may be degradation for them if there is no explicit affordance for localhost peers.",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-722078028,722078028,
jonatack,2020-11-05 07:58:10,"Thank you for the feedback @gmaxwell and @sipa, will update soon.",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-722209703,722209703,
practicalswift,2020-12-23 14:09:44,Now that we have unit testing of the eviction logic in `master` (see merged PR #20477): what about adding a small test for this change? :),https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-750316382,750316382,
jonatack,2020-12-23 14:41:55,"Rebased, and updated to fall back to localhost if no onion peers are removed. Depending on feedback, this could go further and count onion peers removed to activate localhost if too few onion peers are removed.\n\n> Now that we have unit testing of the eviction logic in `master` (see merged PR #20477): what about adding a small test for this change? :)\n\n@practicalswift I agree and spent time",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-750329753,750329753,
jonatack,2020-12-25 23:51:51,Rebased and updated after merge of #19972 that created a silent merge conflict.,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-751300798,751300798,
sdaftuar,2021-02-17 20:59:26,"> Sounds good, although you might want to add a couple slots for actual localhost peers. :)\n\nI interpreted this comment from @gmaxwell as suggesting that we should protect some actual localhost peers, even if we are also protecting some onion peers -- looks like this patch right now would only try to protect some localhost peers if there are no onion peers that we're protecting.  Any reason no",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-780849307,780849307,
jonatack,2021-02-22 00:44:55,"Thank you @vasild  and @sdaftuar. Updated to potentially protect up to 1/4 onion peers, independently of the existing 1/4 localhost protection, for an unchanged 1/2 of the remaining peers overall. The latest push also adds test coverage for the longest uptime, localhost, and onion peer eviction protection logic.\n",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-782968703,782968703,
jonatack,2021-02-22 14:38:47,"Improved the last test commit, adding combined onion + localhost tests.",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-783420479,783420479,
jonatack,2021-02-28 16:45:04,"Thank you @vasild for your excellent review! I've taken your inline code feedback.\n\nWRT the question of ""how many to protect and how to do it,"" I think it may be best to continue picking out the onion peers and the localhost peers separately in order to strive for more peer diversity. The idea is that if we do somehow have both onion and localhost peers, it seems worthwhile to ensure we protec",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-787481422,787481422,
jonatack,2021-02-28 18:02:04,Improved the unit tests.,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-787493363,787493363,
jonatack,2021-03-04 16:01:31,"Rebased. @naumenkogs, @ariard, @jnewbery, @dongcarl, as reviewers of #19670 you might be interested in this. @practicalswift, this updates your unit tests and adds missing ones as you had requested. @wtogami, this might address the issues you discussed with me recently. ",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-790725280,790725280,
vasild,2021-03-09 16:39:09,https://github.com/bitcoin/bitcoin/issues/11537 is related to this PR.,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-794137318,794137318,
vasild,2021-03-09 17:36:32,"@ariard, I2P peers are not localhost ones. They can easily be distinguished because their address's `CNetAddr::IsI2P()` is true. The complication with Tor is because incoming tor connections come from an IP address (not from a Tor address), usually `127.0.0.1`.\n\nI am not sure what you mean by ""automated-connections-but-manually-configured"" or ""protect localhost peers from manual connections"".",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-794210552,794210552,
jonatack,2021-03-17 14:24:28,Rebased due to conflicts from the merge of #21415 --  ` git range-diff a9d1b40 ea9f19e c18fd59` ,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-801123141,801123141,
jonatack,2021-03-19 19:30:30,"Added documentation and renamed a function per https://github.com/bitcoin/bitcoin/pull/20197#discussion_r597365954.\n\n<details><summary><code>git diff c18fd59 0cca08a</code></summary><p>\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex be93426377..66d81b115f 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -887,7 +887,7 @@ static void EraseLastKElements(\n     elements.erase(st",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-803064327,803064327,
prayank23,2021-03-27 20:46:23,Interesting PR. Concept ACK. Compiled successfully on Ubuntu. Tests passed.,https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-808800184,808800184,
laanwj,2021-03-30 14:20:18,"Code review ACK 0cca08a8ee33b4e05ff586ae4fd914f5ea860cea\nI did not do anything in terms of manual testing, but it looks like the change is well-covered by tests.",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-810300323,810300323,
jonatack,2021-03-30 16:33:58,"Thanks for having a look! Here we have an initial improvement and unit testing in place, and in the next step in #21261 we'll re-evaluate the algorithm and ratios between onion, localhost and I2P peers (considering that other privacy networks may be added soon as well). Please do weigh in there with the ratios you would suggest.",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-810406955,810406955,
jonatack,2021-04-20 14:40:53,"@mzumsande I've updated the inbound eviction protection proposal in #21261 to be generalizable to multiple networks (with I2P and CJDNS on the way) and fully ratio-based, which should address your feedback. Will be bringing it out of draft shortly.   ",https://github.com/bitcoin/bitcoin/pull/20197#issuecomment-823330247,823330247,
vasild,2021-01-01 13:16:31,"there is a nice syntax for this:\n\n```cpp\n{.id = 123, .nTimeConnected = 567, ...}\n```\n\nbut last time I tried some old version of GCC did not support it. Maybe some day...",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550767783,550767783,src/test/fuzz/node_eviction.cpp
vasild,2021-01-01 13:25:44,"The commit message reads ""p2p: add m_inbound_onion to AttemptToEvictConnection()"". Shouldn't that be `s/AttemptToEvictConnection()/NodeEvictionCandidate/`?",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550768441,550768441,src/net.h
vasild,2021-01-01 13:39:46,"```suggestion\n    // configured hidden services not using -bind=addr:port=onion will not be detected as inbound onion connections.\n```",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550769530,550769530,src/net.cpp
vasild,2021-01-01 14:41:41,"What about extending `EraseLastKElements()` with one more argument ""predicate"" and remove elements only if it returns `true` on them (with a default that assumes `true` for any element)?\n\nThen this code would look like:\n\n```cpp\nEraseLastKElements(\n    vEvictionCandidates,\n    CompareOnionTimeConnected,\n    local_erase_size,\n    [](NodeEvictionCandidate const &n) { return n.m_is_o",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550774610,550774610,src/net.cpp
vasild,2021-01-01 14:54:19,"Just to note - this assumes that if there are recognizable onion connections (via `-bind=addr:port=onion`) then there are **not** non-recognizable ones (statically/manually configured tor daemon pointing to our standard p2p port, e.g. 8333).\n\nThis assumption may not be true as there could be a node that is configured both via `-bind=addr:port=onion` (connections coming to 8334 are recognized a",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r550775652,550775652,src/net.cpp
jnewbery,2021-01-14 10:34:54,Designated initializers are only standardized in c++20: https://en.cppreference.com/w/cpp/language/aggregate_initialization#Designated_initializers,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r557297105,557297105,src/test/fuzz/node_eviction.cpp
vasild,2021-01-15 09:16:03,"Something like this may work (untested, feel free to ignore):\n\n<details>\n<summary>[patch] EraseLastKElements() with predicate</summary>\n\n```diff\ndiff --git i/src/net.cpp w/src/net.cpp\nindex ddf33c38a..64900b8b5 100644\n--- i/src/net.cpp\n+++ w/src/net.cpp\n@@ -41,12 +41,13 @@\n // with Ubuntu 16.04 LTS and Debian 8 libminiupnpc-dev packages.\n static_assert(MINIUPNPC_API_VERSION",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r558102071,558102071,src/net.cpp
jonatack,2021-01-15 09:33:15,"Thanks! I started with the quick patch below on January 2, will compare with your ideas above.\n\n<details><summary>patch</summary><p>\n\n```diff\n-//! Sort an array by the specified comparator, then erase the last K elements.\n+//! Sort an array by the specified comparator, then erase the last K elements where predicate is true.\n template<typename T, typename Comparator>\n-static void Er",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r558126886,558126886,src/net.cpp
vasild,2021-01-27 12:31:19,"Already used here?\n\nhttps://github.com/bitcoin/bitcoin/blob/11d3b5833671db3b884171086489e853738e7ddd/src/test/fuzz/util.h#L272-L273",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565270556,565270556,src/test/fuzz/node_eviction.cpp
jnewbery,2021-01-27 12:47:19,Interesting. Are the fuzzers compiled with --std=c++2a?,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565280022,565280022,src/test/fuzz/node_eviction.cpp
vasild,2021-01-27 13:04:41,No. My guess is that fuzz tests are not compiled with the old compiler that chokes on this syntax and that most compilers support it even in `-std=c++17` mode.,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r565290955,565290955,src/test/fuzz/node_eviction.cpp
jonatack,2021-02-11 15:57:48,"Sure, I think the salient change in that commit is adding `m_inbound_onion` to `AttemptToEvictConnection` but happy to append ""and add m_is_onion to NodeEvictionCandidate"" to the commit message body.",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r574617967,574617967,src/net.h
jonatack,2021-02-11 16:11:29,Done.,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r574629036,574629036,src/net.h
jonatack,2021-02-11 16:14:11,"Thanks, replaced `-bind` with `-bind=<addr>[:<port>]=onion` like the -bind help.",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r574631112,574631112,src/net.cpp
vasild,2021-02-25 12:49:46,"This loop is `O(num_peers * (num_protected + num_unprotected))`. It can easily be reduced to `O(num_peers)` by replacing the `std::vector` arguments with `std::unordered_set` (which can tell if an element is present in `O(1)` time). This will also simplify the lookups:\n\n```diff\n-if (std::find(protected_peer_ids.begin(), protected_peer_ids.end(), candidate.id) != protected_peer_ids.end()) {\",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r582806300,582806300,src/test/net_peer_eviction_tests.cpp
vasild,2021-02-25 13:01:55,"nit: here and below, `expr ? true : false` is equivalent to `expr`\n\n```suggestion\n            c.m_is_onion = (c.id == 3 || c.id == 8 || c.id == 9);\n```",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r582813828,582813828,src/test/net_peer_eviction_tests.cpp
vasild,2021-02-25 13:12:35,"`ProtectEvictionCandidates()` will always remove `size() / 2` elements (no matter whether the size is odd or even), so the new size will always be `old_size - old_size / 2`.\n\n```suggestion\n    const size_t expected{candidates.size() - candidates.size() / 2}; // expect half the candidates will be protected\n    ProtectEvictionCandidates(candidates);\n    const size_t actual{candidates.size(",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r582820494,582820494,src/test/net_peer_eviction_tests.cpp
vasild,2021-02-25 13:29:30,Note to other reviewers and maybe worth adding a comment: the sorting function is irrelevant here because we process the entire array (last `size()` elements).,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r582832154,582832154,src/net.cpp
jonatack,2021-02-28 16:06:22,That's better indeed. Done.,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r584319129,584319129,src/test/net_peer_eviction_tests.cpp
jonatack,2021-02-28 16:06:29,Good idea. Decided for now to not touch this line instead. ,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r584319142,584319142,src/net.cpp
jonatack,2021-02-28 16:06:40,"Done, thank you.",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r584319159,584319159,src/test/net_peer_eviction_tests.cpp
jonatack,2021-02-28 16:06:49,"Nice, thank you! And no need for the `> 0`. Done for both `IsProtected` and `IsEvicted`.",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r584319181,584319181,src/test/net_peer_eviction_tests.cpp
ariard,2021-03-04 16:14:29,Maybe called it `m_is_onion_service` to dissociate from the manually configured hidden services you mentioned above?,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r587607033,587607033,src/net.h
jonatack,2021-03-17 14:29:11,Thanks @ariard. The latter ones would be `m_is_local`. I think I prefer to go with `m_is_onion` for `CNode::m_inbound_onion` and following the naming style of `m_is_local`.,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r596070991,596070991,src/net.h
sipa,2021-03-19 02:29:15,"In commit ""Extract ProtectEvictionCandidates() from SelectNodeToEvict()""\n\nCan you add a comment explaining exactly which protection rules are implemented by this function, or give it a bit more specific name?\n\nIt seems it's just a subset of those currently in SelectNodeToEvict. If new eviction protections are added, how to decide if they should go into this function or into SelectNodeToEvi",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r597365954,597365954,src/net.cpp
jonatack,2021-03-19 19:26:34,"Good idea. Done, renamed the function to `ProtectEvictionCandidatesByRatio()` (open to suggestions) and added Doxygen documentation.",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r597925590,597925590,src/net.cpp
jonatack,2021-03-19 19:33:13,Also updated the commit names/descriptions.,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r597929140,597929140,src/net.cpp
mzumsande,2021-03-30 16:03:53,"Since `EraseLastKElements` determines the minimum again, this line seems unnecessary (could just pass `size_t(8)`).",https://github.com/bitcoin/bitcoin/pull/20197#discussion_r604233445,604233445,src/net.cpp
jonatack,2021-03-30 18:27:25,Good eye! Will update in #21261.,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r604336054,604336054,src/net.cpp
jonatack,2021-04-20 14:37:17,Thanks again @mzumsande. Addressed in #21261.,https://github.com/bitcoin/bitcoin/pull/20197#discussion_r616746732,616746732,src/net.cpp
