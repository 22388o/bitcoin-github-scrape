[
  {
    "sha": "57dae3fc4a101ae3cd29c1b2881a61fc36b806de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2RhZTNmYzRhMTAxYWUzY2QyOWMxYjI4ODFhNjFmYzM2YjgwNmRl",
    "commit": {
      "author": {
        "name": "donaloconnor",
        "email": "donaloconnor@gmail.com",
        "date": "2018-03-21T20:02:45Z"
      },
      "committer": {
        "name": "donaloconnor",
        "email": "donaloconnor@gmail.com",
        "date": "2018-03-21T20:02:45Z"
      },
      "message": "Replace boost::call_once with std::call_once",
      "tree": {
        "sha": "2fcfd50fa6b75ae1834983a2d2979d539f81ee96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fcfd50fa6b75ae1834983a2d2979d539f81ee96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57dae3fc4a101ae3cd29c1b2881a61fc36b806de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57dae3fc4a101ae3cd29c1b2881a61fc36b806de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57dae3fc4a101ae3cd29c1b2881a61fc36b806de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57dae3fc4a101ae3cd29c1b2881a61fc36b806de/comments",
    "author": {
      "login": "donaloconnor",
      "id": 6394033,
      "node_id": "MDQ6VXNlcjYzOTQwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donaloconnor",
      "html_url": "https://github.com/donaloconnor",
      "followers_url": "https://api.github.com/users/donaloconnor/followers",
      "following_url": "https://api.github.com/users/donaloconnor/following{/other_user}",
      "gists_url": "https://api.github.com/users/donaloconnor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
      "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
      "repos_url": "https://api.github.com/users/donaloconnor/repos",
      "events_url": "https://api.github.com/users/donaloconnor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "donaloconnor",
      "id": 6394033,
      "node_id": "MDQ6VXNlcjYzOTQwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donaloconnor",
      "html_url": "https://github.com/donaloconnor",
      "followers_url": "https://api.github.com/users/donaloconnor/followers",
      "following_url": "https://api.github.com/users/donaloconnor/following{/other_user}",
      "gists_url": "https://api.github.com/users/donaloconnor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
      "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
      "repos_url": "https://api.github.com/users/donaloconnor/repos",
      "events_url": "https://api.github.com/users/donaloconnor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2405ce1df043f778b8efb9205009500cbc17313a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2405ce1df043f778b8efb9205009500cbc17313a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2405ce1df043f778b8efb9205009500cbc17313a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "69ceefc8cd9ca0d751bbda9c61fe3490694ec12d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57dae3fc4a101ae3cd29c1b2881a61fc36b806de/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57dae3fc4a101ae3cd29c1b2881a61fc36b806de/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=57dae3fc4a101ae3cd29c1b2881a61fc36b806de",
        "patch": "@@ -159,10 +159,10 @@ instance_of_cinit;\n  * the mutex).\n  */\n \n-static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n+static std::once_flag debugPrintInitFlag;\n \n /**\n- * We use boost::call_once() to make sure mutexDebugLog and\n+ * We use std::call_once() to make sure mutexDebugLog and\n  * vMsgsBeforeOpenLog are initialized in a thread-safe manner.\n  *\n  * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog\n@@ -171,7 +171,7 @@ static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n  * tested, explicit destruction of these objects can be implemented.\n  */\n static FILE* fileout = nullptr;\n-static boost::mutex* mutexDebugLog = nullptr;\n+static std::mutex* mutexDebugLog = nullptr;\n static std::list<std::string>* vMsgsBeforeOpenLog;\n \n static int FileWriteStr(const std::string &str, FILE *fp)\n@@ -182,7 +182,7 @@ static int FileWriteStr(const std::string &str, FILE *fp)\n static void DebugPrintInit()\n {\n     assert(mutexDebugLog == nullptr);\n-    mutexDebugLog = new boost::mutex();\n+    mutexDebugLog = new std::mutex();\n     vMsgsBeforeOpenLog = new std::list<std::string>;\n }\n \n@@ -194,8 +194,8 @@ fs::path GetDebugLogPath()\n \n bool OpenDebugLog()\n {\n-    boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-    boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n+    std::call_once(debugPrintInitFlag, &DebugPrintInit);\n+    std::lock_guard<std::mutex> scoped_lock(*mutexDebugLog);\n \n     assert(fileout == nullptr);\n     assert(vMsgsBeforeOpenLog);\n@@ -350,8 +350,8 @@ int LogPrintStr(const std::string &str)\n     }\n     else if (fPrintToDebugLog)\n     {\n-        boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-        boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n+        std::call_once(debugPrintInitFlag, &DebugPrintInit);\n+        std::lock_guard<std::mutex> scoped_lock(*mutexDebugLog);\n \n         // buffer if we haven't opened the log yet\n         if (fileout == nullptr) {"
      }
    ]
  }
]