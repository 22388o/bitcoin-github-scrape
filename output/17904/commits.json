[
  {
    "sha": "c80338a62042f18a7ee1a6ceb295f88bf338de0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODAzMzhhNjIwNDJmMThhN2VlMWE2Y2ViMjk1Zjg4YmYzMzhkZTBk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-10T14:10:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "[wip] Temporarily disable Travis build jobs without a C++17 compiler",
      "tree": {
        "sha": "55e4a0d43e4c08955b382a4a66acb27b54338e7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55e4a0d43e4c08955b382a4a66acb27b54338e7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c80338a62042f18a7ee1a6ceb295f88bf338de0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80338a62042f18a7ee1a6ceb295f88bf338de0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c80338a62042f18a7ee1a6ceb295f88bf338de0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80338a62042f18a7ee1a6ceb295f88bf338de0d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6196e930018181301b5972842ae384ea4288ff34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6196e930018181301b5972842ae384ea4288ff34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6196e930018181301b5972842ae384ea4288ff34"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 0,
      "deletions": 16
    },
    "files": [
      {
        "sha": "6c73e897960ccf13ef9ab6cb85d89c4e6ca484a0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c80338a62042f18a7ee1a6ceb295f88bf338de0d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c80338a62042f18a7ee1a6ceb295f88bf338de0d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=c80338a62042f18a7ee1a6ceb295f88bf338de0d",
        "patch": "@@ -105,22 +105,11 @@ jobs:\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_i686.sh\"\n \n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [CentOS 7]  [no depends, only system libs]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_centos.sh\"\n-\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package and some depends packages] [unsigned char]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_qt5.sh\"\n \n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_tsan.sh\"\n-        TEST_RUNNER_EXTRA=\"--exclude feature_block\"  # Not enough memory on travis machines\n-\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'\n       env: >-\n@@ -141,11 +130,6 @@ jobs:\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_nowallet.sh\"\n \n-    - stage: test\n-      name: 'macOS 10.12  [GOAL: deploy] [no functional tests]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_mac.sh\"\n-\n     - stage: test\n       name: 'macOS 10.14 native [GOAL: install] [GUI] [no depends]'\n       os: osx"
      }
    ]
  },
  {
    "sha": "06497a85b23944e6849cc9a12a3b8ae5c40e42b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjQ5N2E4NWIyMzk0NGU2ODQ5Y2M5YTEyYTNiOGFlNWM0MGU0MmI3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-08T23:40:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "[wip] Temporarily disable test_spanparsing",
      "tree": {
        "sha": "066eed83c9ca66b497b3606a8be042f4249fb656",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/066eed83c9ca66b497b3606a8be042f4249fb656"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06497a85b23944e6849cc9a12a3b8ae5c40e42b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06497a85b23944e6849cc9a12a3b8ae5c40e42b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06497a85b23944e6849cc9a12a3b8ae5c40e42b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06497a85b23944e6849cc9a12a3b8ae5c40e42b7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c80338a62042f18a7ee1a6ceb295f88bf338de0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c80338a62042f18a7ee1a6ceb295f88bf338de0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c80338a62042f18a7ee1a6ceb295f88bf338de0d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ece1ad40987fc275ca7abd1a5399d8cd94f1d18",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06497a85b23944e6849cc9a12a3b8ae5c40e42b7/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06497a85b23944e6849cc9a12a3b8ae5c40e42b7/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=06497a85b23944e6849cc9a12a3b8ae5c40e42b7",
        "patch": "@@ -1767,6 +1767,7 @@ static std::string SpanToStr(Span<const char>& span)\n     return std::string(span.begin(), span.end());\n }\n \n+/*\n BOOST_AUTO_TEST_CASE(test_spanparsing)\n {\n     using namespace spanparsing;\n@@ -1884,6 +1885,7 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     BOOST_CHECK_EQUAL(SpanToStr(results[2]), \"bar\");\n     BOOST_CHECK_EQUAL(SpanToStr(results[3]), \"\");\n }\n+*/\n \n BOOST_AUTO_TEST_CASE(test_LogEscapeMessage)\n {"
      }
    ]
  },
  {
    "sha": "e2072147e20c44de6c5d88997abf7f425206d7d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjA3MjE0N2UyMGM0NGRlNmM1ZDg4OTk3YWJmN2Y0MjUyMDZkN2Q1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-08T23:29:14Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "build: Update ax_cxx_compile_stdcxx.m4 to latest version which supports C++17 checking",
      "tree": {
        "sha": "07da9c2a48af7f87991c291d5a08113b0a30ba97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07da9c2a48af7f87991c291d5a08113b0a30ba97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2072147e20c44de6c5d88997abf7f425206d7d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2072147e20c44de6c5d88997abf7f425206d7d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2072147e20c44de6c5d88997abf7f425206d7d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2072147e20c44de6c5d88997abf7f425206d7d5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06497a85b23944e6849cc9a12a3b8ae5c40e42b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06497a85b23944e6849cc9a12a3b8ae5c40e42b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06497a85b23944e6849cc9a12a3b8ae5c40e42b7"
      }
    ],
    "stats": {
      "total": 455,
      "additions": 419,
      "deletions": 36
    },
    "files": [
      {
        "sha": "43087b2e6889ec6f8ebd2f8ba77f4a9a716f8ac2",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "modified",
        "additions": 419,
        "deletions": 36,
        "changes": 455,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2072147e20c44de6c5d88997abf7f425206d7d5/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2072147e20c44de6c5d88997abf7f425206d7d5/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=e2072147e20c44de6c5d88997abf7f425206d7d5",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#   http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+#  https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -33,21 +33,23 @@\n #   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n #   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n #   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#   Copyright (c) 2016, 2018 Krzesimir Nowak <qdlacz@gmail.com>\n+#   Copyright (c) 2019 Enji Cooper <yaneurabeya@gmail.com>\n #\n #   Copying and distribution of this file, with or without modification, are\n #   permitted in any medium without royalty provided the copyright notice\n #   and this notice are preserved.  This file is offered as-is, without any\n #   warranty.\n \n-#serial 4\n+#serial 11\n \n dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n dnl  (serial version number 13).\n \n AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n-  m4_if([$1], [11], [],\n-        [$1], [14], [],\n-        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],\n+  m4_if([$1], [11], [ax_cxx_compile_alternatives=\"11 0x\"],\n+        [$1], [14], [ax_cxx_compile_alternatives=\"14 1y\"],\n+        [$1], [17], [ax_cxx_compile_alternatives=\"17 1z\"],\n         [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n   m4_if([$2], [], [],\n         [$2], [ext], [],\n@@ -57,26 +59,13 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n         [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n         [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n         [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n-  m4_if([$4], [], [ax_cxx_compile_cxx$1_try_default=true],\n-        [$4], [default], [ax_cxx_compile_cxx$1_try_default=true],\n-        [$4], [nodefault], [ax_cxx_compile_cxx$1_try_default=false],\n-        [m4_fatal([invalid fourth argument `$4' to AX_CXX_COMPILE_STDCXX])])\n   AC_LANG_PUSH([C++])dnl\n   ac_success=no\n \n-  m4_if([$4], [nodefault], [], [dnl\n-  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n-  ax_cv_cxx_compile_cxx$1,\n-  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n-    [ax_cv_cxx_compile_cxx$1=yes],\n-    [ax_cv_cxx_compile_cxx$1=no])])\n-  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n-    ac_success=yes\n-  fi])\n-\n   m4_if([$2], [noext], [], [dnl\n   if test x$ac_success = xno; then\n-    for switch in -std=gnu++$1 -std=gnu++0x; do\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      switch=\"-std=gnu++${alternative}\"\n       cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n       AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n                      $cachevar,\n@@ -102,22 +91,27 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n     dnl HP's aCC needs +std=c++11 according to:\n     dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n     dnl Cray's crayCC needs \"-h std=c++11\"\n-    for switch in -std=c++$1 -std=c++0x +std=c++$1 \"-h std=c++$1\"; do\n-      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n-      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n-                     $cachevar,\n-        [ac_save_CXX=\"$CXX\"\n-         CXX=\"$CXX $switch\"\n-         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n-          [eval $cachevar=yes],\n-          [eval $cachevar=no])\n-         CXX=\"$ac_save_CXX\"])\n-      if eval test x\\$$cachevar = xyes; then\n-        CXX=\"$CXX $switch\"\n-        if test -n \"$CXXCPP\" ; then\n-          CXXCPP=\"$CXXCPP $switch\"\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      for switch in -std=c++${alternative} +std=c++${alternative} \"-h std=c++${alternative}\"; do\n+        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                       $cachevar,\n+          [ac_save_CXX=\"$CXX\"\n+           CXX=\"$CXX $switch\"\n+           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+            [eval $cachevar=yes],\n+            [eval $cachevar=no])\n+           CXX=\"$ac_save_CXX\"])\n+        if eval test x\\$$cachevar = xyes; then\n+          CXX=\"$CXX $switch\"\n+          if test -n \"$CXXCPP\" ; then\n+            CXXCPP=\"$CXXCPP $switch\"\n+          fi\n+          ac_success=yes\n+          break\n         fi\n-        ac_success=yes\n+      done\n+      if test x$ac_success = xyes; then\n         break\n       fi\n     done\n@@ -154,6 +148,11 @@ m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n )\n \n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_17],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_17\n+)\n \n dnl  Tests for new features in C++11\n \n@@ -191,11 +190,13 @@ namespace cxx11\n \n     struct Base\n     {\n+      virtual ~Base() {}\n       virtual void f() {}\n     };\n \n     struct Derived : public Base\n     {\n+      virtual ~Derived() override {}\n       virtual void f() override {}\n     };\n \n@@ -524,7 +525,7 @@ namespace cxx14\n \n   }\n \n-  namespace test_digit_seperators\n+  namespace test_digit_separators\n   {\n \n     constexpr auto ten_million = 100'000'000;\n@@ -566,3 +567,385 @@ namespace cxx14\n #endif  // __cplusplus >= 201402L\n \n ]])\n+\n+\n+dnl  Tests for new features in C++17\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_17], [[\n+\n+// If the compiler admits that it is not ready for C++17, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201703L\n+\n+#error \"This is not a C++17 compiler\"\n+\n+#else\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <type_traits>\n+\n+namespace cxx17\n+{\n+\n+  namespace test_constexpr_lambdas\n+  {\n+\n+    constexpr int foo = [](){return 42;}();\n+\n+  }\n+\n+  namespace test::nested_namespace::definitions\n+  {\n+\n+  }\n+\n+  namespace test_fold_expression\n+  {\n+\n+    template<typename... Args>\n+    int multiply(Args... args)\n+    {\n+      return (args * ... * 1);\n+    }\n+\n+    template<typename... Args>\n+    bool all(Args... args)\n+    {\n+      return (args && ...);\n+    }\n+\n+  }\n+\n+  namespace test_extended_static_assert\n+  {\n+\n+    static_assert (true);\n+\n+  }\n+\n+  namespace test_auto_brace_init_list\n+  {\n+\n+    auto foo = {5};\n+    auto bar {5};\n+\n+    static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);\n+    static_assert(std::is_same<int, decltype(bar)>::value);\n+  }\n+\n+  namespace test_typename_in_template_template_parameter\n+  {\n+\n+    template<template<typename> typename X> struct D;\n+\n+  }\n+\n+  namespace test_fallthrough_nodiscard_maybe_unused_attributes\n+  {\n+\n+    int f1()\n+    {\n+      return 42;\n+    }\n+\n+    [[nodiscard]] int f2()\n+    {\n+      [[maybe_unused]] auto unused = f1();\n+\n+      switch (f1())\n+      {\n+      case 17:\n+        f1();\n+        [[fallthrough]];\n+      case 42:\n+        f1();\n+      }\n+      return f1();\n+    }\n+\n+  }\n+\n+  namespace test_extended_aggregate_initialization\n+  {\n+\n+    struct base1\n+    {\n+      int b1, b2 = 42;\n+    };\n+\n+    struct base2\n+    {\n+      base2() {\n+        b3 = 42;\n+      }\n+      int b3;\n+    };\n+\n+    struct derived : base1, base2\n+    {\n+        int d;\n+    };\n+\n+    derived d1 {{1, 2}, {}, 4};  // full initialization\n+    derived d2 {{}, {}, 4};      // value-initialized bases\n+\n+  }\n+\n+  namespace test_general_range_based_for_loop\n+  {\n+\n+    struct iter\n+    {\n+      int i;\n+\n+      int& operator* ()\n+      {\n+        return i;\n+      }\n+\n+      const int& operator* () const\n+      {\n+        return i;\n+      }\n+\n+      iter& operator++()\n+      {\n+        ++i;\n+        return *this;\n+      }\n+    };\n+\n+    struct sentinel\n+    {\n+      int i;\n+    };\n+\n+    bool operator== (const iter& i, const sentinel& s)\n+    {\n+      return i.i == s.i;\n+    }\n+\n+    bool operator!= (const iter& i, const sentinel& s)\n+    {\n+      return !(i == s);\n+    }\n+\n+    struct range\n+    {\n+      iter begin() const\n+      {\n+        return {0};\n+      }\n+\n+      sentinel end() const\n+      {\n+        return {5};\n+      }\n+    };\n+\n+    void f()\n+    {\n+      range r {};\n+\n+      for (auto i : r)\n+      {\n+        [[maybe_unused]] auto v = i;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_lambda_capture_asterisk_this_by_value\n+  {\n+\n+    struct t\n+    {\n+      int i;\n+      int foo()\n+      {\n+        return [*this]()\n+        {\n+          return i;\n+        }();\n+      }\n+    };\n+\n+  }\n+\n+  namespace test_enum_class_construction\n+  {\n+\n+    enum class byte : unsigned char\n+    {};\n+\n+    byte foo {42};\n+\n+  }\n+\n+  namespace test_constexpr_if\n+  {\n+\n+    template <bool cond>\n+    int f ()\n+    {\n+      if constexpr(cond)\n+      {\n+        return 13;\n+      }\n+      else\n+      {\n+        return 42;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_selection_statement_with_initializer\n+  {\n+\n+    int f()\n+    {\n+      return 13;\n+    }\n+\n+    int f2()\n+    {\n+      if (auto i = f(); i > 0)\n+      {\n+        return 3;\n+      }\n+\n+      switch (auto i = f(); i + 4)\n+      {\n+      case 17:\n+        return 2;\n+\n+      default:\n+        return 1;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_template_argument_deduction_for_class_templates\n+  {\n+\n+    template <typename T1, typename T2>\n+    struct pair\n+    {\n+      pair (T1 p1, T2 p2)\n+        : m1 {p1},\n+          m2 {p2}\n+      {}\n+\n+      T1 m1;\n+      T2 m2;\n+    };\n+\n+    void f()\n+    {\n+      [[maybe_unused]] auto p = pair{13, 42u};\n+    }\n+\n+  }\n+\n+  namespace test_non_type_auto_template_parameters\n+  {\n+\n+    template <auto n>\n+    struct B\n+    {};\n+\n+    B<5> b1;\n+    B<'a'> b2;\n+\n+  }\n+\n+  namespace test_structured_bindings\n+  {\n+\n+    int arr[2] = { 1, 2 };\n+    std::pair<int, int> pr = { 1, 2 };\n+\n+    auto f1() -> int(&)[2]\n+    {\n+      return arr;\n+    }\n+\n+    auto f2() -> std::pair<int, int>&\n+    {\n+      return pr;\n+    }\n+\n+    struct S\n+    {\n+      int x1 : 2;\n+      volatile double y1;\n+    };\n+\n+    S f3()\n+    {\n+      return {};\n+    }\n+\n+    auto [ x1, y1 ] = f1();\n+    auto& [ xr1, yr1 ] = f1();\n+    auto [ x2, y2 ] = f2();\n+    auto& [ xr2, yr2 ] = f2();\n+    const auto [ x3, y3 ] = f3();\n+\n+  }\n+\n+  namespace test_exception_spec_type_system\n+  {\n+\n+    struct Good {};\n+    struct Bad {};\n+\n+    void g1() noexcept;\n+    void g2();\n+\n+    template<typename T>\n+    Bad\n+    f(T*, T*);\n+\n+    template<typename T1, typename T2>\n+    Good\n+    f(T1*, T2*);\n+\n+    static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);\n+\n+  }\n+\n+  namespace test_inline_variables\n+  {\n+\n+    template<class T> void f(T)\n+    {}\n+\n+    template<class T> inline T g(T)\n+    {\n+      return T{};\n+    }\n+\n+    template<> inline void f<>(int)\n+    {}\n+\n+    template<> int g<>(int)\n+    {\n+      return 5;\n+    }\n+\n+  }\n+\n+}  // namespace cxx17\n+\n+#endif  // __cplusplus < 201703L\n+\n+]])"
      }
    ]
  },
  {
    "sha": "0b2fd443a8698cb2ef14d548e1a20f9115f1f658",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjJmZDQ0M2E4Njk4Y2IyZWYxNGQ1NDhlMWEyMGY5MTE1ZjFmNjU4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-09T16:03:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "ci: Add -fsanitize=integer suppression (unsigned-integer-overflow) for libstdc++ C++17's basic_string (rfind)",
      "tree": {
        "sha": "aef3d3bccabad80471a5d0728cdcacee069cef42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aef3d3bccabad80471a5d0728cdcacee069cef42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b2fd443a8698cb2ef14d548e1a20f9115f1f658",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b2fd443a8698cb2ef14d548e1a20f9115f1f658",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b2fd443a8698cb2ef14d548e1a20f9115f1f658",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b2fd443a8698cb2ef14d548e1a20f9115f1f658/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2072147e20c44de6c5d88997abf7f425206d7d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2072147e20c44de6c5d88997abf7f425206d7d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2072147e20c44de6c5d88997abf7f425206d7d5"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "afeb113e15453e083bc7bb2bde91a07dc85e18ec",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b2fd443a8698cb2ef14d548e1a20f9115f1f658/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b2fd443a8698cb2ef14d548e1a20f9115f1f658/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=0b2fd443a8698cb2ef14d548e1a20f9115f1f658",
        "patch": "@@ -14,6 +14,9 @@ float-divide-by-zero:wallet/wallet.cpp\n # contains files in which we expect unsigned integer overflows to occur. The\n # list is used to suppress -fsanitize=integer warnings when running our CI UBSan\n # job.\n+\n+# libstdc++ C++17 -- unsigned integer wraparound in basic_string (rfind)\n+unsigned-integer-overflow:*/include/c++/*/bits/basic_string.tcc\n unsigned-integer-overflow:arith_uint256.h\n unsigned-integer-overflow:basic_string.h\n unsigned-integer-overflow:bench/bench.h"
      }
    ]
  },
  {
    "sha": "064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjRiYzhiYjcyYWYyMjhhN2FkOWRiNDQ1MGJhZjE4MThkZGM3ZWU5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-08T23:33:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "build: Use C++17 mode when compiling. Require a compiler with support for C++17 language features.",
      "tree": {
        "sha": "809f57d0b5c40368fdf26a8d5a5abc7a2f7639ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/809f57d0b5c40368fdf26a8d5a5abc7a2f7639ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b2fd443a8698cb2ef14d548e1a20f9115f1f658",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b2fd443a8698cb2ef14d548e1a20f9115f1f658",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b2fd443a8698cb2ef14d548e1a20f9115f1f658"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "7ebb5cd1a8e79c7eea32695ed92f553d828abc66",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -61,8 +61,8 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n-dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+dnl Require C++17 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory], [nodefault])\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n "
      },
      {
        "sha": "aaf504be68938e34470f88aeec38b84b260a47ee",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -9,7 +9,7 @@ define $(package)_set_vars\n $(package)_config_opts=--disable-shared --enable-cxx --disable-replication --enable-option-checking\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_linux=--with-pic\n-$(package)_cxxflags=-std=c++11\n+$(package)_cxxflags=-std=c++17\n $(package)_cppflags_mingw32=-DUNICODE -D_UNICODE\n endef\n "
      },
      {
        "sha": "713740719abfaf25532fc1c5258ff7d7257dcd71",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -23,7 +23,8 @@ define $(package)_set_vars\n $(package)_config_opts_release = -release\n $(package)_config_opts_debug = -debug\n $(package)_config_opts += -bindir $(build_prefix)/bin\n-$(package)_config_opts += -c++std c++11\n+# Note: C++17 not supported yet.\n+$(package)_config_opts += -c++std c++14\n $(package)_config_opts += -confirm-license\n $(package)_config_opts += -hostprefix $(build_prefix)\n $(package)_config_opts += -no-compile-examples"
      },
      {
        "sha": "e672f15a0619fb2a2c4ee93c7b764b8efcc78a49",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -12,7 +12,7 @@ define $(package)_set_vars\n   $(package)_config_opts += --disable-Werror --disable-drafts --enable-option-checking\n   $(package)_config_opts_linux=--with-pic\n   $(package)_config_opts_android=--with-pic\n-  $(package)_cxxflags=-std=c++11\n+  $(package)_cxxflags=-std=c++17\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "35c8ecf8c1871f12b79cab19dbb36ca82f933803",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -50,6 +50,6 @@ SpacesInAngles:  false\n SpacesInContainerLiterals: true\n SpacesInCStyleCastParentheses: false\n SpacesInParentheses: false\n-Standard:        Cpp11\n+Standard:        Cpp17\n TabWidth:        8\n UseTab:          Never"
      },
      {
        "sha": "2864700129b5439591b9315610c6bb1026e54700",
        "filename": "src/compat/assumptions.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/src/compat/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/src/compat/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/assumptions.h?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -17,15 +17,15 @@\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n \n-// Assumption: We assume a C++11 (ISO/IEC 14882:2011) compiler (minimum requirement).\n-// Example(s): We assume the presence of C++11 features everywhere :-)\n+// Assumption: We assume a C++17 compiler (minimum requirement).\n+// Example(s): We assume the presence of C++17 features :-)\n // Note:       MSVC does not report the expected __cplusplus value due to legacy\n //             reasons.\n #if !defined(_MSC_VER)\n-// ISO Standard C++11 [cpp.predefined]p1:\n-// \"The name __cplusplus is defined to the value 201103L when compiling a C++\n-//  translation unit.\"\n-static_assert(__cplusplus >= 201103L, \"C++11 standard assumed\");\n+// ISO Standard C++17 standard \u00a719.8/p1 Predefined macro names [cpp.predefined]:\n+// \"The following macro names shall be defined by the implementation:\n+//  __cplusplus -- The integer literal 201703L.\"\n+static_assert(__cplusplus >= 201703L, \"C++17 standard assumed\");\n #endif\n \n // Assumption: We assume the floating-point types to fulfill the requirements of"
      },
      {
        "sha": "26484f2b90afc2194663141f9e4f0e60662d0344",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -66,7 +66,7 @@ function join_array {\n ENABLED_CHECKS_REGEXP=$(join_array \"|\" \"${ENABLED_CHECKS[@]}\")\n IGNORED_WARNINGS_REGEXP=$(join_array \"|\" \"${IGNORED_WARNINGS[@]}\")\n WARNINGS=$(git ls-files -- \"*.cpp\" \"*.h\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" | \\\n-    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++11 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCLIENT_VERSION_REVISION -DCOPYRIGHT_YEAR -DDEBUG -DHAVE_WORKING_BOOST_SLEEP_FOR -I src/ -q 2>&1 | sort -u | \\\n+    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++17 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCLIENT_VERSION_REVISION -DCOPYRIGHT_YEAR -DDEBUG -DHAVE_WORKING_BOOST_SLEEP_FOR -I src/ -q 2>&1 | sort -u | \\\n     grep -E \"${ENABLED_CHECKS_REGEXP}\" | \\\n     grep -vE \"${IGNORED_WARNINGS_REGEXP}\")\n if [[ ${WARNINGS} != \"\" ]]; then"
      }
    ]
  },
  {
    "sha": "ebcc5fbee72eb28c7d622b13859320bca54cc304",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmNjNWZiZWU3MmViMjhjN2Q2MjJiMTM4NTkzMjBiY2E1NGNjMzA0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-09T13:50:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "Use std::optional (C++17) instead of boost::optional",
      "tree": {
        "sha": "291ae831f5cf25fc8c273d59d204287c0a8c1630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/291ae831f5cf25fc8c273d59d204287c0a8c1630"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebcc5fbee72eb28c7d622b13859320bca54cc304",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebcc5fbee72eb28c7d622b13859320bca54cc304",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebcc5fbee72eb28c7d622b13859320bca54cc304",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebcc5fbee72eb28c7d622b13859320bca54cc304/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/064bc8bb72af228a7ad9db4450baf1818ddc7ee9"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 110,
      "deletions": 133
    },
    "files": [
      {
        "sha": "9d2f220e15acada292cdc7a226e7abed8c1cdc36",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -165,7 +165,6 @@ BITCOIN_CORE_H = \\\n   node/transaction.h \\\n   node/utxo_snapshot.h \\\n   noui.h \\\n-  optional.h \\\n   outputtype.h \\\n   policy/feerate.h \\\n   policy/fees.h \\"
      },
      {
        "sha": "1447cc7ef3a4e4772d19cd6e4ddc78eb15a8fe9b",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -5,13 +5,14 @@\n #include <bench/bench.h>\n #include <interfaces/chain.h>\n #include <node/context.h>\n-#include <optional.h>\n #include <test/util/mining.h>\n #include <test/util/setup_common.h>\n #include <test/util/wallet.h>\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n \n+#include <optional>\n+\n static void WalletBalance(benchmark::State& state, const bool set_dirty, const bool add_watchonly, const bool add_mine)\n {\n     const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n@@ -26,11 +27,11 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n     }\n \n \n-    const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n+    const std::optional<std::string> address_mine{add_mine ? std::optional<std::string>{getnewaddress(wallet)} : std::nullopt};\n     if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n \n     for (int i = 0; i < 100; ++i) {\n-        generatetoaddress(g_testing_setup->m_node, address_mine.get_value_or(ADDRESS_WATCHONLY));\n+        generatetoaddress(g_testing_setup->m_node, address_mine.value_or(ADDRESS_WATCHONLY));\n         generatetoaddress(g_testing_setup->m_node, ADDRESS_WATCHONLY);\n     }\n     SyncWithValidationInterfaceQueue();"
      },
      {
        "sha": "d9459b16ff18b79d7b71c1efc8c314fbe38dfb8a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -40,23 +40,23 @@ namespace {\n \n class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n {\n-    Optional<int> getHeight() override\n+    std::optional<int> getHeight() override\n     {\n         LockAssertion lock(::cs_main);\n         int height = ::ChainActive().Height();\n         if (height >= 0) {\n             return height;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n-    Optional<int> getBlockHeight(const uint256& hash) override\n+    std::optional<int> getBlockHeight(const uint256& hash) override\n     {\n         LockAssertion lock(::cs_main);\n         CBlockIndex* block = LookupBlockIndex(hash);\n         if (block && ::ChainActive().Contains(block)) {\n             return block->nHeight;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n     uint256 getBlockHash(int height) override\n     {\n@@ -85,17 +85,17 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n         CBlockIndex* block = ::ChainActive()[height];\n         return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n     }\n-    Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n+    std::optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n     {\n         LockAssertion lock(::cs_main);\n         CBlockIndex* block = ::ChainActive().FindEarliestAtLeast(time, height);\n         if (block) {\n             if (hash) *hash = block->GetBlockHash();\n             return block->nHeight;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n-    Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n+    std::optional<int> findPruned(int start_height, std::optional<int> stop_height) override\n     {\n         LockAssertion lock(::cs_main);\n         if (::fPruneMode) {\n@@ -107,9 +107,9 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n                 block = block->pprev;\n             }\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n-    Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n+    std::optional<int> findFork(const uint256& hash, std::optional<int>* height) override\n     {\n         LockAssertion lock(::cs_main);\n         const CBlockIndex* block = LookupBlockIndex(hash);\n@@ -124,20 +124,20 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n         if (fork) {\n             return fork->nHeight;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n     CBlockLocator getTipLocator() override\n     {\n         LockAssertion lock(::cs_main);\n         return ::ChainActive().GetLocator();\n     }\n-    Optional<int> findLocatorFork(const CBlockLocator& locator) override\n+    std::optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LockAssertion lock(::cs_main);\n         if (CBlockIndex* fork = FindForkInGlobalIndex(::ChainActive(), locator)) {\n             return fork->nHeight;\n         }\n-        return nullopt;\n+        return std::nullopt;\n     }\n     bool checkFinalTx(const CTransaction& tx) override\n     {"
      },
      {
        "sha": "3af47342bc5ed08b3e36b58c0d6e319e3316787d",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -5,12 +5,13 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n-#include <optional.h>               // For Optional and nullopt\n #include <primitives/transaction.h> // For CTransactionRef\n \n+#include <functional>\n #include <memory>\n #include <stddef.h>\n #include <stdint.h>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -67,14 +68,14 @@ class Chain\n         virtual ~Lock() {}\n \n         //! Get current chain height, not including genesis block (returns 0 if\n-        //! chain only contains genesis block, nullopt if chain does not contain\n+        //! chain only contains genesis block, std::nullopt if chain does not contain\n         //! any blocks).\n-        virtual Optional<int> getHeight() = 0;\n+        virtual std::optional<int> getHeight() = 0;\n \n         //! Get block height above genesis block. Returns 0 for genesis block,\n-        //! 1 for following block, and so on. Returns nullopt for a block not\n+        //! 1 for following block, and so on. Returns std::nullopt for a block not\n         //! included in the current chain.\n-        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+        virtual std::optional<int> getBlockHeight(const uint256& hash) = 0;\n \n         //! Get block hash. Height must be valid or this function will abort.\n         virtual uint256 getBlockHash(int height) = 0;\n@@ -92,30 +93,30 @@ class Chain\n \n         //! Return height of the first block in the chain with timestamp equal\n         //! or greater than the given time and height equal or greater than the\n-        //! given height, or nullopt if there is no block with a high enough\n+        //! given height, or std::nullopt if there is no block with a high enough\n         //! timestamp and height. Also return the block hash as an optional output parameter\n         //! (to avoid the cost of a second lookup in case this information is needed.)\n-        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) = 0;\n+        virtual std::optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) = 0;\n \n         //! Return height of last block in the specified range which is pruned, or\n-        //! nullopt if no block in the range is pruned. Range is inclusive.\n-        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+        //! std::nullopt if no block in the range is pruned. Range is inclusive.\n+        virtual std::optional<int> findPruned(int start_height = 0, std::optional<int> stop_height = std::nullopt) = 0;\n \n         //! Return height of the specified block if it is on the chain, otherwise\n         //! return the height of the highest block on chain that's an ancestor\n-        //! of the specified block, or nullopt if there is no common ancestor.\n+        //! of the specified block, or std::nullopt if there is no common ancestor.\n         //! Also return the height of the specified block as an optional output\n         //! parameter (to avoid the cost of a second hash lookup in case this\n         //! information is desired).\n-        virtual Optional<int> findFork(const uint256& hash, Optional<int>* height) = 0;\n+        virtual std::optional<int> findFork(const uint256& hash, std::optional<int>* height) = 0;\n \n         //! Get locator for the current chain tip.\n         virtual CBlockLocator getTipLocator() = 0;\n \n         //! Return height of the highest block on chain in common with the locator,\n         //! which will either be the original block used to create the locator,\n         //! or one of its ancestors.\n-        virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+        virtual std::optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n \n         //! Check if transaction will be final given chain height current time.\n         virtual bool checkFinalTx(const CTransaction& tx) = 0;"
      },
      {
        "sha": "0c4f324171d390280c0447c1c3ad7c2282a99e6d",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -63,7 +63,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n     WalletTxStatus result;\n-    result.block_height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock).get_value_or(std::numeric_limits<int>::max());\n+    result.block_height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock).value_or(std::numeric_limits<int>::max());\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n     result.depth_in_main_chain = wtx.GetDepthInMainChain();\n     result.time_received = wtx.nTimeReceived;\n@@ -330,7 +330,7 @@ class WalletImpl : public Wallet\n         if (mi == m_wallet->mapWallet.end()) {\n             return false;\n         }\n-        if (Optional<int> height = locked_chain->getHeight()) {\n+        if (std::optional<int> height = locked_chain->getHeight()) {\n             num_blocks = *height;\n             block_time = locked_chain->getBlockTime(*height);\n         } else {\n@@ -350,7 +350,7 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         auto mi = m_wallet->mapWallet.find(txid);\n         if (mi != m_wallet->mapWallet.end()) {\n-            num_blocks = locked_chain->getHeight().get_value_or(-1);\n+            num_blocks = locked_chain->getHeight().value_or(-1);\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n             tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n@@ -390,7 +390,7 @@ class WalletImpl : public Wallet\n             return false;\n         }\n         balances = getBalances();\n-        num_blocks = locked_chain->getHeight().get_value_or(-1);\n+        num_blocks = locked_chain->getHeight().value_or(-1);\n         return true;\n     }\n     CAmount getBalance() override { return m_wallet->GetBalance().m_mine_trusted; }"
      },
      {
        "sha": "23030bbe53d34975fc1346eb75f33a0805fc83a1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -86,8 +86,8 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n-Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n+std::optional<int64_t> BlockAssembler::m_last_block_num_txs{std::nullopt};\n+std::optional<int64_t> BlockAssembler::m_last_block_weight{std::nullopt};\n \n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n {"
      },
      {
        "sha": "29c99257763675a4514a048e56dbcf513ecc3922",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -6,12 +6,12 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n-#include <optional.h>\n #include <primitives/block.h>\n #include <txmempool.h>\n #include <validation.h>\n \n #include <memory>\n+#include <optional>\n #include <stdint.h>\n \n #include <boost/multi_index_container.hpp>\n@@ -162,8 +162,8 @@ class BlockAssembler\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n \n-    static Optional<int64_t> m_last_block_num_txs;\n-    static Optional<int64_t> m_last_block_weight;\n+    static std::optional<int64_t> m_last_block_num_txs;\n+    static std::optional<int64_t> m_last_block_weight;\n \n private:\n     // utility functions"
      },
      {
        "sha": "009e0941e1a351aea7857d7cbd6bb864b33dcbda",
        "filename": "src/node/psbt.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -25,18 +25,18 @@ struct PSBTInputAnalysis {\n  * Holds the results of AnalyzePSBT (miscellaneous information about a PSBT)\n  */\n struct PSBTAnalysis {\n-    Optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n-    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n-    Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n+    std::optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n+    std::optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n+    std::optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n     std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n     PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n     std::string error;                     //!< Error message\n \n     void SetInvalid(std::string err_msg)\n     {\n-        estimated_vsize = nullopt;\n-        estimated_feerate = nullopt;\n-        fee = nullopt;\n+        estimated_vsize = std::nullopt;\n+        estimated_feerate = std::nullopt;\n+        fee = std::nullopt;\n         inputs.clear();\n         next = PSBTRole::CREATOR;\n         error = err_msg;"
      },
      {
        "sha": "a382cd7b77cf3def802be1db0976f4382406ec78",
        "filename": "src/optional.h",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/src/optional.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064bc8bb72af228a7ad9db4450baf1818ddc7ee9/src/optional.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/optional.h?ref=064bc8bb72af228a7ad9db4450baf1818ddc7ee9",
        "patch": "@@ -1,26 +0,0 @@\n-// Copyright (c) 2017-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_OPTIONAL_H\n-#define BITCOIN_OPTIONAL_H\n-\n-#include <utility>\n-\n-#include <boost/optional.hpp>\n-\n-//! Substitute for C++17 std::optional\n-template <typename T>\n-using Optional = boost::optional<T>;\n-\n-//! Substitute for C++17 std::make_optional\n-template <typename T>\n-Optional<T> MakeOptional(bool condition, T&& value)\n-{\n-    return boost::make_optional(condition, std::forward<T>(value));\n-}\n-\n-//! Substitute for C++17 std::nullopt\n-static auto& nullopt = boost::none;\n-\n-#endif // BITCOIN_OPTIONAL_H"
      },
      {
        "sha": "fabd75798fa30ef3a4189e655f22a78b6cf39274",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -223,7 +223,7 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n     // Construct a would-be spend of this output, to update sigdata with.\n     // Note that ProduceSignature is used to fill in metadata (not actual signatures),\n     // so provider does not need to provide any private keys (it can be a HidingSigningProvider).\n-    MutableTransactionSignatureCreator creator(psbt.tx.get_ptr(), /* index */ 0, out.nValue, SIGHASH_ALL);\n+    MutableTransactionSignatureCreator creator(&psbt.tx.value(), /* index */ 0, out.nValue, SIGHASH_ALL);\n     ProduceSignature(provider, creator, out.scriptPubKey, sigdata);\n \n     // Put redeem_script, witness_script, key paths, into PSBTOutput."
      },
      {
        "sha": "8cad95d643812e74eb6f16f36058a35151970c30",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -7,13 +7,14 @@\n \n #include <attributes.h>\n #include <node/transaction.h>\n-#include <optional.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n \n+#include <optional>\n+\n // Magic bytes\n static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n \n@@ -387,7 +388,7 @@ struct PSBTOutput\n /** A version of CTransaction with the PSBT format*/\n struct PartiallySignedTransaction\n {\n-    Optional<CMutableTransaction> tx;\n+    std::optional<CMutableTransaction> tx;\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;"
      },
      {
        "sha": "5823a7a5810a05cec729df73a3cd3c0448baa42c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -1732,13 +1732,13 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n     }\n     if (!inputs_result.empty()) result.pushKV(\"inputs\", inputs_result);\n \n-    if (psbta.estimated_vsize != nullopt) {\n+    if (psbta.estimated_vsize != std::nullopt) {\n         result.pushKV(\"estimated_vsize\", (int)*psbta.estimated_vsize);\n     }\n-    if (psbta.estimated_feerate != nullopt) {\n+    if (psbta.estimated_feerate != std::nullopt) {\n         result.pushKV(\"estimated_feerate\", ValueFromAmount(psbta.estimated_feerate->GetFeePerK()));\n     }\n-    if (psbta.fee != nullopt) {\n+    if (psbta.fee != std::nullopt) {\n         result.pushKV(\"fee\", ValueFromAmount(*psbta.fee));\n     }\n     result.pushKV(\"next\", PSBTRoleName(psbta.next));"
      },
      {
        "sha": "1d8fba5f0f7e97526c4a45276c20daa3345aa5fd",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -5,7 +5,6 @@\n #include <test/fuzz/fuzz.h>\n \n #include <node/psbt.h>\n-#include <optional.h>\n #include <psbt.h>\n #include <pubkey.h>\n #include <script/script.h>\n@@ -14,6 +13,7 @@\n #include <version.h>\n \n #include <cstdint>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -41,7 +41,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     (void)psbt.IsNull();\n     (void)psbt.IsSane();\n \n-    Optional<CMutableTransaction> tx = psbt.tx;\n+    std::optional<CMutableTransaction> tx = psbt.tx;\n     if (tx) {\n         const CMutableTransaction& mtx = *tx;\n         const PartiallySignedTransaction psbt_from_tx{mtx};"
      },
      {
        "sha": "7c3eaad1cbb86b32ed1a5478970e89701faf63df",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -5,7 +5,6 @@\n #include <util/system.h>\n \n #include <clientversion.h>\n-#include <optional.h>\n #include <sync.h>\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n@@ -16,6 +15,7 @@\n #include <util/spanparsing.h>\n #include <util/vector.h>\n \n+#include <optional>\n #include <stdint.h>\n #include <thread>\n #include <univalue.h>\n@@ -208,9 +208,9 @@ class CheckValueTest : public TestChain100Setup\n         bool default_int = false;\n         bool default_bool = false;\n         const char* string_value = nullptr;\n-        Optional<int64_t> int_value;\n-        Optional<bool> bool_value;\n-        Optional<std::vector<std::string>> list_value;\n+        std::optional<int64_t> int_value;\n+        std::optional<bool> bool_value;\n+        std::optional<std::vector<std::string>> list_value;\n         const char* error = nullptr;\n \n         Expect(util::SettingsValue s) : setting(std::move(s)) {}"
      },
      {
        "sha": "2c493b0a4a1d94ea8485d00ccf40b893b2138807",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -8,7 +8,6 @@\n #include <consensus/consensus.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <optional.h>\n #include <validation.h>\n #include <policy/policy.h>\n #include <policy/fees.h>\n@@ -19,6 +18,8 @@\n #include <util/time.h>\n #include <validationinterface.h>\n \n+#include <optional>\n+\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n@@ -157,7 +158,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            Optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n             if (piter) {\n                 parentHashes.insert(*piter);\n                 if (parentHashes.size() + 1 > limitAncestorCount) {\n@@ -867,11 +868,11 @@ const CTransaction* CTxMemPool::GetConflictTx(const COutPoint& prevout) const\n     return it == mapNextTx.end() ? nullptr : it->second;\n }\n \n-Optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n+std::optional<CTxMemPool::txiter> CTxMemPool::GetIter(const uint256& txid) const\n {\n     auto it = mapTx.find(txid);\n     if (it != mapTx.end()) return it;\n-    return Optional<txiter>{};\n+    return std::optional<txiter>{};\n }\n \n CTxMemPool::setEntries CTxMemPool::GetIterSet(const std::set<uint256>& hashes) const"
      },
      {
        "sha": "ce5e3ce21e278e09bf624c395481ef47b5d53bfd",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <atomic>\n #include <map>\n+#include <optional>\n #include <set>\n #include <string>\n #include <utility>\n@@ -17,7 +18,6 @@\n #include <coins.h>\n #include <crypto/siphash.h>\n #include <indirectmap.h>\n-#include <optional.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n@@ -601,7 +601,7 @@ class CTxMemPool\n     const CTransaction* GetConflictTx(const COutPoint& prevout) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Returns an iterator to the given hash, if found */\n-    Optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    std::optional<txiter> GetIter(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Translate a set of hashes into a set of pool iterators to avoid repeated lookups */\n     setEntries GetIterSet(const std::set<uint256>& hashes) const EXCLUSIVE_LOCKS_REQUIRED(cs);"
      },
      {
        "sha": "02c06a3bd7578cc0dade5ffd84edfd8358438559",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -311,7 +311,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         key.erase(0, 1);\n         std::string section;\n         util::SettingsValue value = InterpretOption(section, key, val);\n-        Optional<unsigned int> flags = GetArgFlags('-' + key);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n             if (!CheckValid(key, value, *flags, error)) {\n                 return false;\n@@ -340,7 +340,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n     return success;\n }\n \n-Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n+std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n {\n     LOCK(cs_args);\n     for (const auto& arg_map : m_available_args) {\n@@ -349,7 +349,7 @@ Optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) const\n             return search->second.m_flags;\n         }\n     }\n-    return nullopt;\n+    return std::nullopt;\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n@@ -717,7 +717,7 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         std::string section;\n         std::string key = option.first;\n         util::SettingsValue value = InterpretOption(section, key, option.second);\n-        Optional<unsigned int> flags = GetArgFlags('-' + key);\n+        std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n             if (!CheckValid(key, value, *flags, error)) {\n                 return false;"
      },
      {
        "sha": "3002f35a262e0a0d3676001831a9480a37a36379",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -19,7 +19,6 @@\n #include <compat/assumptions.h>\n #include <fs.h>\n #include <logging.h>\n-#include <optional.h>\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/memory.h>\n@@ -29,6 +28,7 @@\n \n #include <exception>\n #include <map>\n+#include <optional>\n #include <set>\n #include <stdint.h>\n #include <string>\n@@ -315,9 +315,9 @@ class ArgsManager\n \n     /**\n      * Return Flags for known arg.\n-     * Return nullopt for unknown arg.\n+     * Return std::nullopt for unknown arg.\n      */\n-    Optional<unsigned int> GetArgFlags(const std::string& name) const;\n+    std::optional<unsigned int> GetArgFlags(const std::string& name) const;\n };\n \n extern ArgsManager gArgs;"
      },
      {
        "sha": "71bebfbeaa577552f8b05b1e2c9bb37b6975bf2f",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -5,13 +5,14 @@\n #ifndef BITCOIN_WALLET_COINCONTROL_H\n #define BITCOIN_WALLET_COINCONTROL_H\n \n-#include <optional.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n #include <script/standard.h>\n \n+#include <optional>\n+\n const int DEFAULT_MIN_DEPTH = 0;\n const int DEFAULT_MAX_DEPTH = 9999999;\n \n@@ -25,19 +26,19 @@ class CCoinControl\n     //! Custom change destination, if not set an address is generated\n     CTxDestination destChange;\n     //! Override the default change type if set, ignored if destChange is set\n-    Optional<OutputType> m_change_type;\n+    std::optional<OutputType> m_change_type;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which are solvable\n     bool fAllowWatchOnly;\n     //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n     //! Override the wallet's m_pay_tx_fee if set\n-    Optional<CFeeRate> m_feerate;\n+    std::optional<CFeeRate> m_feerate;\n     //! Override the default confirmation target if set\n-    Optional<unsigned int> m_confirm_target;\n+    std::optional<unsigned int> m_confirm_target;\n     //! Override the wallet's m_signal_rbf if set\n-    Optional<bool> m_signal_bip125_rbf;\n+    std::optional<bool> m_signal_bip125_rbf;\n     //! Avoid partial use of funds sent to a given address\n     bool m_avoid_partial_spends;\n     //! Forbids inclusion of dirty (previously used) addresses"
      },
      {
        "sha": "8effaecf43ea46ccf8bb34c4606d34c7abcdbc5f",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -4,10 +4,11 @@\n \n #include <wallet/coinselection.h>\n \n-#include <optional.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n \n+#include <optional>\n+\n // Descending order comparator\n struct {\n     bool operator()(const OutputGroup& a, const OutputGroup& b) const\n@@ -218,7 +219,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     nValueRet = 0;\n \n     // List of values less than target\n-    Optional<OutputGroup> lowest_larger;\n+    std::optional<OutputGroup> lowest_larger;\n     std::vector<OutputGroup> applicable_groups;\n     CAmount nTotalLower = 0;\n "
      },
      {
        "sha": "aef9926582cb8b37afa029e9342d03e112a1079a",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -267,7 +267,7 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n     }\n \n     // Mark new tx not replaceable, if requested.\n-    if (!coin_control.m_signal_bip125_rbf.get_value_or(wallet->m_signal_rbf)) {\n+    if (!coin_control.m_signal_bip125_rbf.value_or(wallet->m_signal_rbf)) {\n         for (auto& input : mtx.vin) {\n             if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n         }\n@@ -357,7 +357,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     // Write back transaction\n     mtx = CMutableTransaction(*tx_new);\n     // Mark new tx not replaceable, if requested.\n-    if (!coin_control.m_signal_bip125_rbf.get_value_or(wallet.m_signal_rbf)) {\n+    if (!coin_control.m_signal_bip125_rbf.value_or(wallet.m_signal_rbf)) {\n         for (auto& input : mtx.vin) {\n             if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n         }"
      },
      {
        "sha": "e87e315bf476b1ced4cba8e6cc93d589f1af215e",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -49,7 +49,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n         // We will use smart fee estimation\n         unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : wallet.m_confirm_target;\n         // By default estimates are economical iff we are signaling opt-in-RBF\n-        bool conservative_estimate = !coin_control.m_signal_bip125_rbf.get_value_or(wallet.m_signal_rbf);\n+        bool conservative_estimate = !coin_control.m_signal_bip125_rbf.value_or(wallet.m_signal_rbf);\n         // Allow to override the default fee estimate mode over the CoinControl instance\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;"
      },
      {
        "sha": "cb30b580636cfb640c192c6e69b4b8a9f4ed25fc",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -359,8 +359,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n-    Optional<int> height = locked_chain->getBlockHeight(merkleBlock.header.GetHash());\n-    if (height == nullopt) {\n+    std::optional<int> height = locked_chain->getBlockHeight(merkleBlock.header.GetHash());\n+    if (height == std::nullopt) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }\n \n@@ -565,7 +565,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         if (!file.is_open()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n         }\n-        Optional<int> tip_height = locked_chain->getHeight();\n+        std::optional<int> tip_height = locked_chain->getHeight();\n         nTimeBegin = tip_height ? locked_chain->getBlockTime(*tip_height) : 0;\n \n         int64_t nFilesize = std::max((int64_t)1, (int64_t)file.tellg());\n@@ -790,8 +790,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     // produce output\n     file << strprintf(\"# Wallet dump created by Bitcoin %s\\n\", CLIENT_BUILD);\n     file << strprintf(\"# * Created on %s\\n\", FormatISO8601DateTime(GetTime()));\n-    const Optional<int> tip_height = locked_chain->getHeight();\n-    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", tip_height.get_value_or(-1), tip_height ? locked_chain->getBlockHash(*tip_height).ToString() : \"(missing block hash)\");\n+    const std::optional<int> tip_height = locked_chain->getHeight();\n+    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", tip_height.value_or(-1), tip_height ? locked_chain->getBlockHash(*tip_height).ToString() : \"(missing block hash)\");\n     file << strprintf(\"#   mined on %s\\n\", tip_height ? FormatISO8601DateTime(locked_chain->getBlockTime(*tip_height)) : \"(missing block time)\");\n     file << \"\\n\";\n \n@@ -1365,7 +1365,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         EnsureWalletIsUnlocked(pwallet);\n \n         // Verify all timestamps are present before importing any keys.\n-        const Optional<int> tip_height = locked_chain->getHeight();\n+        const std::optional<int> tip_height = locked_chain->getHeight();\n         now = tip_height ? locked_chain->getBlockMedianTimePast(*tip_height) : 0;\n         for (const UniValue& data : requests.getValues()) {\n             GetImportTimestamp(data, now);"
      },
      {
        "sha": "78d5e760d91ab4eba3b7f3fe3f66f6773b6d8888",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -33,6 +33,7 @@\n #include <wallet/walletutil.h>\n \n #include <stdint.h>\n+#include <optional>\n \n #include <univalue.h>\n \n@@ -1572,9 +1573,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    // The way the 'height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n-    Optional<int> height = MakeOptional(false, int()); // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    Optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n+    std::optional<int> height; // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n+    std::optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n@@ -1601,7 +1601,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n     bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n \n-    const Optional<int> tip_height = locked_chain->getHeight();\n+    const std::optional<int> tip_height = locked_chain->getHeight();\n     int depth = tip_height && height ? (1 + *tip_height - *height) : -1;\n \n     UniValue transactions(UniValue::VARR);\n@@ -3545,7 +3545,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        Optional<int> tip_height = locked_chain->getHeight();\n+        std::optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n             start_height = request.params[0].get_int();\n@@ -3554,7 +3554,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             }\n         }\n \n-        Optional<int> stop_height;\n+        std::optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n             stop_height = request.params[1].get_int();\n             if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {"
      },
      {
        "sha": "3cb55afeb7fa331ec2f9f39d0d076edc55bf30c4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -848,7 +848,7 @@ void CWallet::LoadToWallet(CWalletTx& wtxIn)\n     // If wallet doesn't have a chain (e.g bitcoin-wallet), lock can't be taken.\n     auto locked_chain = LockChain();\n     if (locked_chain) {\n-        Optional<int> block_height = locked_chain->getBlockHeight(wtxIn.m_confirm.hashBlock);\n+        std::optional<int> block_height = locked_chain->getBlockHeight(wtxIn.m_confirm.hashBlock);\n         if (block_height) {\n             // Update cached block height variable since it not stored in the\n             // serialized transaction.\n@@ -1574,8 +1574,8 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        const Optional<int> start_height = locked_chain->findFirstBlockWithTimeAndHeight(startTime - TIMESTAMP_WINDOW, 0, &start_block);\n-        const Optional<int> tip_height = locked_chain->getHeight();\n+        const std::optional<int> start_height = locked_chain->findFirstBlockWithTimeAndHeight(startTime - TIMESTAMP_WINDOW, 0, &start_block);\n+        const std::optional<int> tip_height = locked_chain->getHeight();\n         WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n@@ -1629,13 +1629,12 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     fAbortRescan = false;\n     ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n     uint256 tip_hash;\n-    // The way the 'block_height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n-    Optional<int> block_height = MakeOptional(false, int());\n+    std::optional<int> block_height;\n     double progress_begin;\n     double progress_end;\n     {\n         auto locked_chain = chain().lock();\n-        if (Optional<int> tip_height = locked_chain->getHeight()) {\n+        if (std::optional<int> tip_height = locked_chain->getHeight()) {\n             tip_hash = locked_chain->getBlockHash(*tip_height);\n         }\n         block_height = locked_chain->getBlockHeight(block_hash);\n@@ -1683,7 +1682,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n         }\n         {\n             auto locked_chain = chain().lock();\n-            Optional<int> tip_height = locked_chain->getHeight();\n+            std::optional<int> tip_height = locked_chain->getHeight();\n             if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n                 // break successfully when rescan has reached the tip, or\n                 // previous block is no longer on the chain due to a reorg\n@@ -2486,7 +2485,7 @@ static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, interfaces::Cha\n  */\n static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)\n {\n-    uint32_t const height = locked_chain.getHeight().get_value_or(-1);\n+    uint32_t const height = locked_chain.getHeight().value_or(-1);\n     uint32_t locktime;\n     // Discourage fee sniping.\n     //\n@@ -2858,7 +2857,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n         // to avoid conflicting with other possible uses of nSequence,\n         // and in the spirit of \"smallest possible change from prior\n         // behavior.\"\n-        const uint32_t nSequence = coin_control.m_signal_bip125_rbf.get_value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+        const uint32_t nSequence = coin_control.m_signal_bip125_rbf.value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n         for (const auto& coin : selected_coins) {\n             txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n         }\n@@ -3404,7 +3403,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     }\n \n     // map in which we'll infer heights of other keys\n-    const Optional<int> tip_height = locked_chain.getHeight();\n+    const std::optional<int> tip_height = locked_chain.getHeight();\n     const int max_height = tip_height && *tip_height > 144 ? *tip_height - 144 : 0; // the tip can be reorganized; use a 144-block safety margin\n     std::map<CKeyID, int> mapKeyFirstBlock;\n     for (const CKeyID &keyid : spk_man->GetKeys()) {\n@@ -3420,7 +3419,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     for (const auto& entry : mapWallet) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = entry.second;\n-        if (Optional<int> height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock)) {\n+        if (std::optional<int> height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock)) {\n             // ... which are already in a block\n             for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n@@ -3833,13 +3832,13 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         WalletBatch batch(*walletInstance->database);\n         CBlockLocator locator;\n         if (batch.ReadBestBlock(locator)) {\n-            if (const Optional<int> fork_height = locked_chain->findLocatorFork(locator)) {\n+            if (const std::optional<int> fork_height = locked_chain->findLocatorFork(locator)) {\n                 rescan_height = *fork_height;\n             }\n         }\n     }\n \n-    const Optional<int> tip_height = locked_chain->getHeight();\n+    const std::optional<int> tip_height = locked_chain->getHeight();\n     if (tip_height) {\n         walletInstance->m_last_block_processed = locked_chain->getBlockHash(*tip_height);\n         walletInstance->m_last_block_processed_height = *tip_height;\n@@ -3873,13 +3872,13 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        Optional<int64_t> time_first_key;\n+        std::optional<int64_t> time_first_key;\n         if (auto spk_man = walletInstance->m_spk_man.get()) {\n             int64_t time = spk_man->GetTimeFirstKey();\n             if (!time_first_key || time < *time_first_key) time_first_key = time;\n         }\n         if (time_first_key) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(*time_first_key - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+            if (std::optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(*time_first_key - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n                 rescan_height = *first_block;\n             }\n         }"
      },
      {
        "sha": "29e0ed9c0c9a5410f7b85a0667aa17db32d0da1f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -871,7 +871,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         //! Unset if no blocks were scanned due to read errors or the chain\n         //! being empty.\n         uint256 last_scanned_block;\n-        Optional<int> last_scanned_height;\n+        std::optional<int> last_scanned_height;\n \n         //! Height of the most recent block that could not be scanned due to\n         //! read errors or pruning. Will be set if status is FAILURE, unset if"
      },
      {
        "sha": "fdb0521aab45031952de18836e73c03364a33dc0",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -61,7 +61,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/ordered_index.hpp\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n-    boost/optional.hpp\n     boost/preprocessor/cat.hpp\n     boost/preprocessor/stringize.hpp\n     boost/signals2/connection.hpp"
      }
    ]
  },
  {
    "sha": "4cc5db40ee1ae7ac0b10dab18411544018d6160b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2M1ZGI0MGVlMWFlN2FjMGIxMGRhYjE4NDExNTQ0MDE4ZDYxNjBi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-09T13:59:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "Use [[nodiscard]] (C++17) instead of legacy NODISCARD macro",
      "tree": {
        "sha": "87a4c4a48e205a65ad286caa92a47339bbe5378f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87a4c4a48e205a65ad286caa92a47339bbe5378f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cc5db40ee1ae7ac0b10dab18411544018d6160b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc5db40ee1ae7ac0b10dab18411544018d6160b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc5db40ee1ae7ac0b10dab18411544018d6160b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc5db40ee1ae7ac0b10dab18411544018d6160b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebcc5fbee72eb28c7d622b13859320bca54cc304"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 31,
      "deletions": 69
    },
    "files": [
      {
        "sha": "a84ac360d035ae4b80264b53c6f64f11a2fbc83c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -102,7 +102,6 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n-  attributes.h \\\n   banman.h \\\n   base58.h \\\n   bech32.h \\"
      },
      {
        "sha": "45099bd8b88025cb1e77bc6648f086660bf025dc",
        "filename": "src/attributes.h",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebcc5fbee72eb28c7d622b13859320bca54cc304/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=ebcc5fbee72eb28c7d622b13859320bca54cc304",
        "patch": "@@ -1,22 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ATTRIBUTES_H\n-#define BITCOIN_ATTRIBUTES_H\n-\n-#if defined(__has_cpp_attribute)\n-#  if __has_cpp_attribute(nodiscard)\n-#    define NODISCARD [[nodiscard]]\n-#  endif\n-#endif\n-#ifndef NODISCARD\n-#  if defined(_MSC_VER) && _MSC_VER >= 1700\n-#    define NODISCARD _Check_return_\n-#  else\n-#    define NODISCARD __attribute__((warn_unused_result))\n-#  endif\n-#endif\n-\n-#endif // BITCOIN_ATTRIBUTES_H"
      },
      {
        "sha": "f19cb3e18a7aac980ea6917d482107cf7e4a9cab",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -14,8 +14,6 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include <attributes.h>\n-\n #include <string>\n #include <vector>\n \n@@ -35,13 +33,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n+[[nodiscard]] bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n+[[nodiscard]] bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -52,12 +50,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n+[[nodiscard]] bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n+[[nodiscard]] bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "e2cc4dd8f39dd520b336dd34b2d6926215094629",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_CORE_IO_H\n \n #include <amount.h>\n-#include <attributes.h>\n \n #include <string>\n #include <vector>\n@@ -22,8 +21,8 @@ class UniValue;\n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-NODISCARD bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n-NODISCARD bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n+[[nodiscard]] bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n+[[nodiscard]] bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n \n /**"
      },
      {
        "sha": "dff9a22df49fd3bb724ae8b10b064f184a7376e0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -61,7 +61,6 @@\n #include <set>\n \n #ifndef WIN32\n-#include <attributes.h>\n #include <cerrno>\n #include <signal.h>\n #include <sys/stat.h>\n@@ -108,7 +107,7 @@ static fs::path GetPidFile()\n     return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n-NODISCARD static bool CreatePidFile()\n+[[nodiscard]] static bool CreatePidFile()\n {\n     fsbridge::ofstream file{GetPidFile()};\n     if (file) {"
      },
      {
        "sha": "6f176638734a799858baf353060e3c89eb6aae4b",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_NODE_TRANSACTION_H\n #define BITCOIN_NODE_TRANSACTION_H\n \n-#include <attributes.h>\n #include <primitives/transaction.h>\n #include <util/error.h>\n \n@@ -28,6 +27,6 @@ struct NodeContext;\n  * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "e1802c2f15c06ee577792f0e433e3d082c795fbf",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_OUTPUTTYPE_H\n #define BITCOIN_OUTPUTTYPE_H\n \n-#include <attributes.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n \n@@ -27,7 +26,7 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n-NODISCARD bool ParseOutputType(const std::string& str, OutputType& output_type);\n+[[nodiscard]] bool ParseOutputType(const std::string& str, OutputType& output_type);\n const std::string& FormatOutputType(OutputType type);\n \n /**"
      },
      {
        "sha": "eb20906470a11340048d7f5f36d58028263c37a2",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_PSBT_H\n #define BITCOIN_PSBT_H\n \n-#include <attributes.h>\n #include <node/transaction.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n@@ -397,7 +396,7 @@ struct PartiallySignedTransaction\n \n     /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n-    NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n+    [[nodiscard]] bool Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n     bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n     bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n@@ -606,11 +605,11 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  * @param[in]  psbtxs the PSBTs to combine\n  * @return error (OK if we successfully combined the transactions, other error if they were not compatible)\n  */\n-NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n+[[nodiscard]] TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n //! Decode a base64ed PSBT into a PartiallySignedTransaction\n-NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n+[[nodiscard]] bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n //! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction\n-NODISCARD bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n+[[nodiscard]] bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n \n #endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "0f5f83545bf5adf987657b315d6474f19b3df6c4",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -634,7 +634,7 @@ enum class ParseScriptContext {\n };\n \n /** Parse a key path, being passed a split list of elements (the first element is ignored). */\n-NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out, std::string& error)\n+[[nodiscard]] bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out, std::string& error)\n {\n     for (size_t i = 1; i < split.size(); ++i) {\n         Span<const char> elem = split[i];"
      },
      {
        "sha": "264db575121074de84ad0ab17fd072c18695953b",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <attributes.h>\n #include <clientversion.h>\n #include <coins.h>\n #include <script/standard.h>\n@@ -37,7 +36,7 @@ class CCoinsViewTest : public CCoinsView\n     std::map<COutPoint, Coin> map_;\n \n public:\n-    NODISCARD bool GetCoin(const COutPoint& outpoint, Coin& coin) const override\n+    [[nodiscard]] bool GetCoin(const COutPoint& outpoint, Coin& coin) const override\n     {\n         std::map<COutPoint, Coin>::const_iterator it = map_.find(outpoint);\n         if (it == map_.end()) {"
      },
      {
        "sha": "43e6084665f1d91547c869e3f120bee90e6beaf6",
        "filename": "src/util/bip32.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/bip32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/bip32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -5,12 +5,11 @@\n #ifndef BITCOIN_UTIL_BIP32_H\n #define BITCOIN_UTIL_BIP32_H\n \n-#include <attributes.h>\n #include <string>\n #include <vector>\n \n /** Parse an HD keypaths like \"m/7/0'/2000\". */\n-NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n+[[nodiscard]] bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n \n /** Write HD keypaths as strings */\n std::string WriteHDKeypath(const std::vector<uint32_t>& keypath);"
      },
      {
        "sha": "ac23f18de25635651afc5659e87fa24243e7c96e",
        "filename": "src/util/moneystr.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/moneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/moneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -10,15 +10,14 @@\n #define BITCOIN_UTIL_MONEYSTR_H\n \n #include <amount.h>\n-#include <attributes.h>\n \n #include <string>\n \n /* Do not use these functions to represent or parse monetary amounts to or from\n  * JSON but use AmountFromValue and ValueFromAmount for that.\n  */\n std::string FormatMoney(const CAmount& n);\n-NODISCARD bool ParseMoney(const std::string& str, CAmount& nRet);\n-NODISCARD bool ParseMoney(const char* pszIn, CAmount& nRet);\n+[[nodiscard]] bool ParseMoney(const std::string& str, CAmount& nRet);\n+[[nodiscard]] bool ParseMoney(const char* pszIn, CAmount& nRet);\n \n #endif // BITCOIN_UTIL_MONEYSTR_H"
      },
      {
        "sha": "fed1aaf9c31fb139cafc936040c406c761a28eb0",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -276,7 +276,7 @@ std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n-NODISCARD static bool ParsePrechecks(const std::string& str)\n+[[nodiscard]] static bool ParsePrechecks(const std::string& str)\n {\n     if (str.empty()) // No empty string allowed\n         return false;"
      },
      {
        "sha": "10b2d791163f5dfd9a61f5af02268d6d877c68a0",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -9,8 +9,6 @@\n #ifndef BITCOIN_UTIL_STRENCODINGS_H\n #define BITCOIN_UTIL_STRENCODINGS_H\n \n-#include <attributes.h>\n-\n #include <cstdint>\n #include <iterator>\n #include <string>\n@@ -91,35 +89,35 @@ constexpr inline bool IsSpace(char c) noexcept {\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseInt32(const std::string& str, int32_t *out);\n+[[nodiscard]] bool ParseInt32(const std::string& str, int32_t *out);\n \n /**\n  * Convert string to signed 64-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseInt64(const std::string& str, int64_t *out);\n+[[nodiscard]] bool ParseInt64(const std::string& str, int64_t *out);\n \n /**\n  * Convert decimal string to unsigned 32-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseUInt32(const std::string& str, uint32_t *out);\n+[[nodiscard]] bool ParseUInt32(const std::string& str, uint32_t *out);\n \n /**\n  * Convert decimal string to unsigned 64-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseUInt64(const std::string& str, uint64_t *out);\n+[[nodiscard]] bool ParseUInt64(const std::string& str, uint64_t *out);\n \n /**\n  * Convert string to double with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid double,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseDouble(const std::string& str, double *out);\n+[[nodiscard]] bool ParseDouble(const std::string& str, double *out);\n \n template<typename T>\n std::string HexStr(const T itbegin, const T itend)\n@@ -169,7 +167,7 @@ bool TimingResistantEqual(const T& a, const T& b)\n  * @returns true on success, false on error.\n  * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n  */\n-NODISCARD bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n+[[nodiscard]] bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n /** Convert from one power-of-2 number base to another. */\n template<int frombits, int tobits, bool pad, typename O, typename I>"
      },
      {
        "sha": "a6defb3706722eaa238317bb71994061f621fec4",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -5,13 +5,11 @@\n #ifndef BITCOIN_UTIL_STRING_H\n #define BITCOIN_UTIL_STRING_H\n \n-#include <attributes.h>\n-\n #include <cstring>\n #include <string>\n #include <vector>\n \n-NODISCARD inline std::string TrimString(const std::string& str, const std::string& pattern = \" \\f\\n\\r\\t\\v\")\n+[[nodiscard]] inline std::string TrimString(const std::string& str, const std::string& pattern = \" \\f\\n\\r\\t\\v\")\n {\n     std::string::size_type front = str.find_first_not_of(pattern);\n     if (front == std::string::npos) {\n@@ -47,7 +45,7 @@ inline std::string Join(const std::vector<std::string>& list, const std::string&\n /**\n  * Check if a string does not contain any embedded NUL (\\0) characters\n  */\n-NODISCARD inline bool ValidAsCString(const std::string& str) noexcept\n+[[nodiscard]] inline bool ValidAsCString(const std::string& str) noexcept\n {\n     return str.size() == strlen(str.c_str());\n }"
      },
      {
        "sha": "5ccec3f3cd20470343d3a0ec34f34fd84429c9c4",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -14,7 +14,6 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <attributes.h>\n #include <compat.h>\n #include <compat/assumptions.h>\n #include <fs.h>\n@@ -162,7 +161,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n+    [[nodiscard]] bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n      * Returns true if settings values from the default section should be used,\n@@ -193,8 +192,8 @@ class ArgsManager\n      */\n     void SelectConfigNetwork(const std::string& network);\n \n-    NODISCARD bool ParseParameters(int argc, const char* const argv[], std::string& error);\n-    NODISCARD bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n+    [[nodiscard]] bool ParseParameters(int argc, const char* const argv[], std::string& error);\n+    [[nodiscard]] bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n      * Log warnings for options in m_section_only_args when"
      },
      {
        "sha": "b20b15d05ec568281125ce736d9efcdbb18fbe9f",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -22,7 +22,7 @@\n  * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n  * return error\n  */\n-NODISCARD TransactionError FillPSBT(const CWallet* pwallet,\n+[[nodiscard]] TransactionError FillPSBT(const CWallet* pwallet,\n               PartiallySignedTransaction& psbtx,\n               bool& complete,\n               int sighash_type = 1 /* SIGHASH_ALL */,"
      }
    ]
  },
  {
    "sha": "236eb0686dce40b1c955c53a4e264b94370533a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzZlYjA2ODZkY2U0MGIxYzk1NWM1M2E0ZTI2NGI5NDM3MDUzM2Ey",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-09T14:51:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-01-12T18:24:12Z"
      },
      "message": "Use std::make_unique (C++14) instead of legacy MakeUnique wrapper",
      "tree": {
        "sha": "d3fd59ca422c0c26fa515700c8858c1f72de0125",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3fd59ca422c0c26fa515700c8858c1f72de0125"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236eb0686dce40b1c955c53a4e264b94370533a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236eb0686dce40b1c955c53a4e264b94370533a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/236eb0686dce40b1c955c53a4e264b94370533a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236eb0686dce40b1c955c53a4e264b94370533a2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc5db40ee1ae7ac0b10dab18411544018d6160b"
      }
    ],
    "stats": {
      "total": 280,
      "additions": 138,
      "deletions": 142
    },
    "files": [
      {
        "sha": "95cf1182a41e3bd2ea7042fe90676328f5ae5011",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -216,7 +216,6 @@ BITCOIN_CORE_H = \\\n   util/spanparsing.h \\\n   util/system.h \\\n   util/macros.h \\\n-  util/memory.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n   util/settings.h \\"
      },
      {
        "sha": "19b9da8b8dbbb4a3cac3ebc7038a7e971b55b10c",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -64,7 +64,7 @@ int main(int argc, char** argv)\n         return EXIT_FAILURE;\n     }\n \n-    std::unique_ptr<benchmark::Printer> printer = MakeUnique<benchmark::ConsolePrinter>();\n+    std::unique_ptr<benchmark::Printer> printer = std::make_unique<benchmark::ConsolePrinter>();\n     std::string printer_arg = gArgs.GetArg(\"-printer\", DEFAULT_BENCH_PRINTER);\n     if (\"plot\" == printer_arg) {\n         printer.reset(new benchmark::PlotlyPrinter("
      },
      {
        "sha": "b6348dbb7920bb4e24864862ea676c5045b27516",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -8,6 +8,7 @@\n #include <wallet/coinselection.h>\n #include <wallet/wallet.h>\n \n+#include <memory>\n #include <set>\n \n static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<std::unique_ptr<CWalletTx>>& wtxs)\n@@ -17,7 +18,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<st\n     tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n     tx.vout.resize(1);\n     tx.vout[0].nValue = nValue;\n-    wtxs.push_back(MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx))));\n+    wtxs.push_back(std::make_unique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx))));\n }\n \n // Simple benchmark for wallet coin selection. Note that it maybe be necessary\n@@ -73,7 +74,7 @@ static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n+    std::unique_ptr<CWalletTx> wtx = std::make_unique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n     set.emplace_back(COutput(wtx.get(), nInput, 0, true, true, true).GetInputCoin(), 0, true, 0, 0);\n     wtxn.emplace_back(std::move(wtx));\n }"
      },
      {
        "sha": "f8274a4e29af4a9345ed64b9bea757fc3d0e3f7c",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <tinyformat.h>\n #include <util/system.h>\n-#include <util/memory.h>\n \n #include <assert.h>\n+#include <memory>\n \n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n@@ -36,11 +36,11 @@ const CBaseChainParams& BaseParams()\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return MakeUnique<CBaseChainParams>(\"\", 8332);\n+        return std::make_unique<CBaseChainParams>(\"\", 8332);\n     else if (chain == CBaseChainParams::TESTNET)\n-        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n+        return std::make_unique<CBaseChainParams>(\"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n-        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n+        return std::make_unique<CBaseChainParams>(\"regtest\", 18443);\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "05b2777fddbd4cf4944200118499213452b1867b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -300,7 +300,7 @@ bool StartHTTPRPC()\n     }\n     struct event_base* eventBase = EventBase();\n     assert(eventBase);\n-    httpRPCTimerInterface = MakeUnique<HTTPRPCTimerInterface>(eventBase);\n+    httpRPCTimerInterface = std::make_unique<HTTPRPCTimerInterface>(eventBase);\n     RPCSetTimerInterface(httpRPCTimerInterface.get());\n     return true;\n }"
      },
      {
        "sha": "6f77525b633785a1d997e359955355c17464880a",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <map>\n+#include <memory>\n \n #include <dbwrapper.h>\n #include <index/blockfilterindex.h>\n@@ -107,8 +108,8 @@ BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n     fs::create_directories(path);\n \n     m_name = filter_name + \" block filter index\";\n-    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n-    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FLTR_FILE_CHUNK_SIZE);\n+    m_db = std::make_unique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = std::make_unique<FlatFileSeq>(std::move(path), \"fltr\", FLTR_FILE_CHUNK_SIZE);\n }\n \n bool BlockFilterIndex::Init()"
      },
      {
        "sha": "d98a6f6950561a3a2bf43916f386e07d3419daf4",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -11,6 +11,8 @@\n \n #include <boost/thread.hpp>\n \n+#include <memory>\n+\n constexpr char DB_BEST_BLOCK = 'B';\n constexpr char DB_TXINDEX = 't';\n constexpr char DB_TXINDEX_BLOCK = 'T';\n@@ -225,7 +227,7 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n }\n \n TxIndex::TxIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n-    : m_db(MakeUnique<TxIndex::DB>(n_cache_size, f_memory, f_wipe))\n+    : m_db(std::make_unique<TxIndex::DB>(n_cache_size, f_memory, f_wipe))\n {}\n \n TxIndex::~TxIndex() {}"
      },
      {
        "sha": "95dfd78c0a79bcd749a26a9f092cc695a8493bba",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -56,6 +56,7 @@\n #include <validationinterface.h>\n #include <walletinitinterface.h>\n \n+#include <memory>\n #include <stdint.h>\n #include <stdio.h>\n #include <set>\n@@ -1308,7 +1309,7 @@ bool AppInitMain(NodeContext& node)\n     // need to reindex later.\n \n     assert(!node.banman);\n-    node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n \n@@ -1465,7 +1466,7 @@ bool AppInitMain(NodeContext& node)\n             try {\n                 LOCK(cs_main);\n                 // This statement makes ::ChainstateActive() usable.\n-                g_chainstate = MakeUnique<CChainState>();\n+                g_chainstate = std::make_unique<CChainState>();\n                 UnloadBlockIndex();\n \n                 // new CBlockTreeDB tries to delete the existing file, which\n@@ -1649,7 +1650,7 @@ bool AppInitMain(NodeContext& node)\n \n     // ********************************************************* Step 8: start indexers\n     if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);\n+        g_txindex = std::make_unique<TxIndex>(nTxIndexCache, false, fReindex);\n         g_txindex->Start();\n     }\n "
      },
      {
        "sha": "55ab5f56787d3f712d45252f22907d80ee668237",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -236,7 +236,7 @@ class ChainImpl : public Chain\n     explicit ChainImpl(NodeContext& node) : m_node(node) {}\n     std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n     {\n-        auto result = MakeUnique<LockImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n+        auto result = std::make_unique<LockImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n         if (try_lock && result && !*result) return {};\n         // std::move necessary on some compilers due to conversion from\n         // LockImpl to Lock pointer\n@@ -344,7 +344,7 @@ class ChainImpl : public Chain\n     }\n     std::unique_ptr<Handler> handleNotifications(Notifications& notifications) override\n     {\n-        return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n+        return std::make_unique<NotificationsHandlerImpl>(*this, notifications);\n     }\n     void waitForNotificationsIfTipChanged(const uint256& old_tip) override\n     {\n@@ -356,7 +356,7 @@ class ChainImpl : public Chain\n     }\n     std::unique_ptr<Handler> handleRpc(const CRPCCommand& command) override\n     {\n-        return MakeUnique<RpcHandlerImpl>(command);\n+        return std::make_unique<RpcHandlerImpl>(command);\n     }\n     bool rpcEnableDeprecated(const std::string& method) override { return IsDeprecatedRPCEnabled(method); }\n     void rpcRunLater(const std::string& name, std::function<void()> fn, int64_t seconds) override\n@@ -375,6 +375,6 @@ class ChainImpl : public Chain\n };\n } // namespace\n \n-std::unique_ptr<Chain> MakeChain(NodeContext& node) { return MakeUnique<ChainImpl>(node); }\n+std::unique_ptr<Chain> MakeChain(NodeContext& node) { return std::make_unique<ChainImpl>(node); }\n \n } // namespace interfaces"
      },
      {
        "sha": "023d4d7448fa5ccd835ab1a3132710a33054a7a3",
        "filename": "src/interfaces/handler.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <interfaces/handler.h>\n \n-#include <util/memory.h>\n-\n #include <boost/signals2/connection.hpp>\n+\n+#include <memory>\n #include <utility>\n \n namespace interfaces {\n@@ -35,12 +35,12 @@ class CleanupHandler : public Handler\n \n std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection)\n {\n-    return MakeUnique<HandlerImpl>(std::move(connection));\n+    return std::make_unique<HandlerImpl>(std::move(connection));\n }\n \n std::unique_ptr<Handler> MakeHandler(std::function<void()> cleanup)\n {\n-    return MakeUnique<CleanupHandler>(std::move(cleanup));\n+    return std::make_unique<CleanupHandler>(std::move(cleanup));\n }\n \n } // namespace interfaces"
      },
      {
        "sha": "0744788114e91b5d0db2b457d388c1fcd0261fc8",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -37,6 +37,8 @@\n \n #include <univalue.h>\n \n+#include <memory>\n+\n class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n@@ -324,6 +326,6 @@ class NodeImpl : public Node\n \n } // namespace\n \n-std::unique_ptr<Node> MakeNode() { return MakeUnique<NodeImpl>(); }\n+std::unique_ptr<Node> MakeNode() { return std::make_unique<NodeImpl>(); }\n \n } // namespace interfaces"
      },
      {
        "sha": "c9c0455804116aec54e4c09add57109552bf9df8",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -539,11 +539,11 @@ class WalletClientImpl : public ChainClient\n \n } // namespace\n \n-std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? MakeUnique<WalletImpl>(wallet) : nullptr; }\n+std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? std::make_unique<WalletImpl>(wallet) : nullptr; }\n \n std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames)\n {\n-    return MakeUnique<WalletClientImpl>(chain, std::move(wallet_filenames));\n+    return std::make_unique<WalletClientImpl>(chain, std::move(wallet_filenames));\n }\n \n } // namespace interfaces"
      },
      {
        "sha": "b531d88b56f80aed3903a045410548e9072c93da",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -41,6 +41,7 @@\n static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\");\n #endif\n \n+#include <memory>\n #include <unordered_map>\n \n #include <math.h>\n@@ -2282,11 +2283,11 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (semOutbound == nullptr) {\n         // initialize semaphore\n-        semOutbound = MakeUnique<CSemaphore>(std::min(m_max_outbound, nMaxConnections));\n+        semOutbound = std::make_unique<CSemaphore>(std::min(m_max_outbound, nMaxConnections));\n     }\n     if (semAddnode == nullptr) {\n         // initialize semaphore\n-        semAddnode = MakeUnique<CSemaphore>(nMaxAddnode);\n+        semAddnode = std::make_unique<CSemaphore>(nMaxAddnode);\n     }\n \n     //\n@@ -2679,7 +2680,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     // Don't relay addr messages to peers that we connect to as block-relay-only\n     // peers (to prevent adversaries from inferring these links from addr\n     // traffic).\n-    m_addr_known{block_relay_only ? nullptr : MakeUnique<CRollingBloomFilter>(5000, 0.001)},\n+    m_addr_known{block_relay_only ? nullptr : std::make_unique<CRollingBloomFilter>(5000, 0.001)},\n     id(idIn),\n     nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n@@ -2689,7 +2690,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     hashContinue = uint256();\n     if (!block_relay_only) {\n-        m_tx_relay = MakeUnique<TxRelay>();\n+        m_tx_relay = std::make_unique<TxRelay>();\n     }\n \n     for (const std::string &msg : getAllNetMessageTypes())\n@@ -2702,7 +2703,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         LogPrint(BCLog::NET, \"Added connection peer=%d\\n\", id);\n     }\n \n-    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    m_deserializer = std::make_unique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n }\n \n CNode::~CNode()"
      },
      {
        "sha": "5ae98c26b0bda4da1e8d54582fe200f0837f60bd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -790,7 +790,7 @@ class CNode\n     CCriticalSection cs_inventory;\n \n     struct TxRelay {\n-        TxRelay() { pfilter = MakeUnique<CBloomFilter>(); }\n+        TxRelay() { pfilter = std::make_unique<CBloomFilter>(); }\n         mutable CCriticalSection cs_filter;\n         // We use fRelayTxes for two purposes -\n         // a) it allows us to not relay tx invs before receiving the peer's version message"
      },
      {
        "sha": "56bdfe14c615bba43f41c8a44010b8d8317ae0dc",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -673,7 +673,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n             CPubKey pubkey(data);\n             if (pubkey.IsFullyValid()) {\n                 if (permit_uncompressed || pubkey.IsCompressed()) {\n-                    return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                    return std::make_unique<ConstPubkeyProvider>(pubkey);\n                 } else {\n                     error = \"Uncompressed keys are not allowed\";\n                     return nullptr;\n@@ -687,7 +687,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 out.keys.emplace(pubkey.GetID(), key);\n-                return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                return std::make_unique<ConstPubkeyProvider>(pubkey);\n             } else {\n                 error = \"Uncompressed keys are not allowed\";\n                 return nullptr;\n@@ -714,7 +714,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n     }\n-    return MakeUnique<BIP32PubkeyProvider>(extpubkey, std::move(path), type);\n+    return std::make_unique<BIP32PubkeyProvider>(extpubkey, std::move(path), type);\n }\n \n /** Parse a public key including origin information (if enabled). */\n@@ -750,7 +750,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool per\n     if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n     auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n-    return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n+    return std::make_unique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n@@ -763,17 +763,17 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n     if (Func(\"pk\", expr)) {\n         auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<PKDescriptor>(std::move(pubkey));\n+        return std::make_unique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n         auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<PKHDescriptor>(std::move(pubkey));\n+        return std::make_unique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+        return std::make_unique<ComboDescriptor>(std::move(pubkey));\n     } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n         error = \"Cannot have combo in non-top level\";\n         return nullptr;\n@@ -820,28 +820,28 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n                 return nullptr;\n             }\n         }\n-        return MakeUnique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n+        return std::make_unique<MultisigDescriptor>(thres, std::move(providers), sorted_multi);\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n         auto pubkey = ParsePubkey(expr, false, out, error);\n         if (!pubkey) return nullptr;\n-        return MakeUnique<WPKHDescriptor>(std::move(pubkey));\n+        return std::make_unique<WPKHDescriptor>(std::move(pubkey));\n     } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n         error = \"Cannot have wpkh within wsh\";\n         return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         auto desc = ParseScript(expr, ParseScriptContext::P2SH, out, error);\n         if (!desc || expr.size()) return nullptr;\n-        return MakeUnique<SHDescriptor>(std::move(desc));\n+        return std::make_unique<SHDescriptor>(std::move(desc));\n     } else if (ctx != ParseScriptContext::TOP && Func(\"sh\", expr)) {\n         error = \"Cannot have sh in non-top level\";\n         return nullptr;\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n         auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out, error);\n         if (!desc || expr.size()) return nullptr;\n-        return MakeUnique<WSHDescriptor>(std::move(desc));\n+        return std::make_unique<WSHDescriptor>(std::move(desc));\n     } else if (ctx == ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n         error = \"Cannot have wsh within wsh\";\n         return nullptr;\n@@ -852,7 +852,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n             error = \"Address is not valid\";\n             return nullptr;\n         }\n-        return MakeUnique<AddressDescriptor>(std::move(dest));\n+        return std::make_unique<AddressDescriptor>(std::move(dest));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n         std::string str(expr.begin(), expr.end());\n@@ -861,7 +861,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n             return nullptr;\n         }\n         auto bytes = ParseHex(str);\n-        return MakeUnique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n+        return std::make_unique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n     }\n     if (ctx == ParseScriptContext::P2SH) {\n         error = \"A function is needed within P2SH\";\n@@ -876,10 +876,10 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n \n std::unique_ptr<PubkeyProvider> InferPubkey(const CPubKey& pubkey, ParseScriptContext, const SigningProvider& provider)\n {\n-    std::unique_ptr<PubkeyProvider> key_provider = MakeUnique<ConstPubkeyProvider>(pubkey);\n+    std::unique_ptr<PubkeyProvider> key_provider = std::make_unique<ConstPubkeyProvider>(pubkey);\n     KeyOriginInfo info;\n     if (provider.GetKeyOrigin(pubkey.GetID(), info)) {\n-        return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(key_provider));\n+        return std::make_unique<OriginPubkeyProvider>(std::move(info), std::move(key_provider));\n     }\n     return key_provider;\n }\n@@ -892,23 +892,23 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     if (txntype == TX_PUBKEY) {\n         CPubKey pubkey(data[0].begin(), data[0].end());\n         if (pubkey.IsValid()) {\n-            return MakeUnique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n+            return std::make_unique<PKDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n     if (txntype == TX_PUBKEYHASH) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n-            return MakeUnique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n+            return std::make_unique<PKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n     if (txntype == TX_WITNESS_V0_KEYHASH && ctx != ParseScriptContext::P2WSH) {\n         uint160 hash(data[0]);\n         CKeyID keyid(hash);\n         CPubKey pubkey;\n         if (provider.GetPubKey(keyid, pubkey)) {\n-            return MakeUnique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n+            return std::make_unique<WPKHDescriptor>(InferPubkey(pubkey, ctx, provider));\n         }\n     }\n     if (txntype == TX_MULTISIG) {\n@@ -917,15 +917,15 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n             CPubKey pubkey(data[i].begin(), data[i].end());\n             providers.push_back(InferPubkey(pubkey, ctx, provider));\n         }\n-        return MakeUnique<MultisigDescriptor>((int)data[0][0], std::move(providers));\n+        return std::make_unique<MultisigDescriptor>((int)data[0][0], std::move(providers));\n     }\n     if (txntype == TX_SCRIPTHASH && ctx == ParseScriptContext::TOP) {\n         uint160 hash(data[0]);\n         CScriptID scriptid(hash);\n         CScript subscript;\n         if (provider.GetCScript(scriptid, subscript)) {\n             auto sub = InferScript(subscript, ParseScriptContext::P2SH, provider);\n-            if (sub) return MakeUnique<SHDescriptor>(std::move(sub));\n+            if (sub) return std::make_unique<SHDescriptor>(std::move(sub));\n         }\n     }\n     if (txntype == TX_WITNESS_V0_SCRIPTHASH && ctx != ParseScriptContext::P2WSH) {\n@@ -934,18 +934,18 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n         CScript subscript;\n         if (provider.GetCScript(scriptid, subscript)) {\n             auto sub = InferScript(subscript, ParseScriptContext::P2WSH, provider);\n-            if (sub) return MakeUnique<WSHDescriptor>(std::move(sub));\n+            if (sub) return std::make_unique<WSHDescriptor>(std::move(sub));\n         }\n     }\n \n     CTxDestination dest;\n     if (ExtractDestination(script, dest)) {\n         if (GetScriptForDestination(dest) == script) {\n-            return MakeUnique<AddressDescriptor>(std::move(dest));\n+            return std::make_unique<AddressDescriptor>(std::move(dest));\n         }\n     }\n \n-    return MakeUnique<RawDescriptor>(script);\n+    return std::make_unique<RawDescriptor>(script);\n }\n \n "
      },
      {
        "sha": "b523173a4526b76712f7c354297bbb9b3c2f67b8",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <util/memory.h>\n #include <util/system.h>\n \n #include <test/util/setup_common.h>\n@@ -163,7 +162,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)\n {\n     // Test over three virtual arenas, of which one will succeed being locked\n-    std::unique_ptr<LockedPageAllocator> x = MakeUnique<TestLockedPageAllocator>(3, 1);\n+    std::unique_ptr<LockedPageAllocator> x = std::make_unique<TestLockedPageAllocator>(3, 1);\n     LockedPool pool(std::move(x));\n     BOOST_CHECK(pool.stats().total == 0);\n     BOOST_CHECK(pool.stats().locked == 0);"
      },
      {
        "sha": "b4752d83f745efe8fe05bd8e6a0fece0b76cd37a",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <util/memory.h>\n #include <util/system.h>\n #include <util/time.h>\n \n@@ -13,6 +12,7 @@\n #include <atomic>\n #include <thread>\n #include <vector>\n+#include <memory>\n #include <mutex>\n #include <condition_variable>\n \n@@ -146,7 +146,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n  */\n static void Correct_Queue_range(std::vector<size_t> range)\n {\n-    auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n+    auto small_queue = std::make_unique<Correct_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{small_queue->Thread();});\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n /** Test that failing checks are caught */\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n {\n-    auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n+    auto fail_queue = std::make_unique<Failing_Queue>(QUEUE_BATCH_SIZE);\n \n     boost::thread_group tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n // future blocks, ie, the bad state is cleared.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n-    auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n+    auto fail_queue = std::make_unique<Failing_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{fail_queue->Thread();});\n@@ -271,7 +271,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n // more than once as well\n BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n-    auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<Unique_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{queue->Thread();});\n@@ -307,7 +307,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n // time could leave the data hanging across a sequence of blocks.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n-    auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<Memory_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n        tg.create_thread([&]{queue->Thread();});\n@@ -338,7 +338,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n-    auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     bool fails = false;\n     for (auto x = 0; x < SCRIPT_CHECK_THREADS; ++x) {\n@@ -382,7 +382,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n /** Test that CCheckQueueControl is threadsafe */\n BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n {\n-    auto queue = MakeUnique<Standard_Queue>(QUEUE_BATCH_SIZE);\n+    auto queue = std::make_unique<Standard_Queue>(QUEUE_BATCH_SIZE);\n     {\n         boost::thread_group tg;\n         std::atomic<int> nThreads {0};"
      },
      {
        "sha": "0c329b575b5ff675c88cc86822cea3196e22443a",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -5,7 +5,6 @@\n #include <dbwrapper.h>\n #include <uint256.h>\n #include <test/util/setup_common.h>\n-#include <util/memory.h>\n \n #include <memory>\n \n@@ -207,7 +206,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = std::make_unique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;\n@@ -248,7 +247,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    std::unique_ptr<CDBWrapper> dbw = MakeUnique<CDBWrapper>(ph, (1 << 10), false, false, false);\n+    std::unique_ptr<CDBWrapper> dbw = std::make_unique<CDBWrapper>(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = InsecureRand256();\n     uint256 res;"
      },
      {
        "sha": "65a86242f2b72be96baa905c7df05b0a112fb892",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -12,13 +12,13 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <serialize.h>\n-#include <util/memory.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <validation.h>\n \n #include <test/util/setup_common.h>\n \n+#include <memory>\n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -77,8 +77,8 @@ BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n // work.\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n+    auto peerLogic = std::make_unique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -147,8 +147,8 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidat\n \n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n-    auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337);\n+    auto peerLogic = std::make_unique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int max_outbound_full_relay = 8;\n@@ -219,9 +219,9 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n-    auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n+    auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n+    auto peerLogic = std::make_unique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -274,9 +274,9 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n-    auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n+    auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n+    auto peerLogic = std::make_unique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n \n     banman->ClearBanned();\n     gArgs.ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n@@ -321,9 +321,9 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n-    auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n+    auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n+    auto peerLogic = std::make_unique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "dc08fffacf03317ad4b7c0c1653eca881dc6b613",
        "filename": "src/test/fuzz/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/block.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -15,11 +15,12 @@\n #include <version.h>\n \n #include <cassert>\n+#include <memory>\n #include <string>\n \n void initialize()\n {\n-    const static auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    const static auto verify_handle = std::make_unique<ECCVerifyHandle>();\n     SelectParams(CBaseChainParams::REGTEST);\n }\n "
      },
      {
        "sha": "cd938a574b6a285b2b65000f7a04584efcaff9f8",
        "filename": "src/test/fuzz/descriptor_parse.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/descriptor_parse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/descriptor_parse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/descriptor_parse.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -6,11 +6,12 @@\n #include <pubkey.h>\n #include <script/descriptor.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n+\n+#include <memory>\n \n void initialize()\n {\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n     SelectParams(CBaseChainParams::REGTEST);\n }\n "
      },
      {
        "sha": "6637474011650b907ab9ffea55e21542bc856381",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -23,6 +23,7 @@\n #include <version.h>\n \n #include <exception>\n+#include <memory>\n #include <stdexcept>\n #include <stdint.h>\n #include <unistd.h>\n@@ -34,7 +35,7 @@\n void initialize()\n {\n     // Fuzzers using pubkey must hold an ECCVerifyHandle.\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n }\n \n namespace {"
      },
      {
        "sha": "e122d5b9fa8b89c2b667b5b1869534662fbf6615",
        "filename": "src/test/fuzz/eval_script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/eval_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/eval_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/eval_script.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -6,13 +6,13 @@\n #include <script/interpreter.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n-#include <util/memory.h>\n \n #include <limits>\n+#include <memory>\n \n void initialize()\n {\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n }\n \n void test_one_input(const std::vector<uint8_t>& buffer)"
      },
      {
        "sha": "5ee220d1109e6967b18721efb4e75d4d9d193670",
        "filename": "src/test/fuzz/parse_univalue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/parse_univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/parse_univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_univalue.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -7,14 +7,14 @@\n #include <rpc/client.h>\n #include <rpc/util.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n \n #include <limits>\n+#include <memory>\n #include <string>\n \n void initialize()\n {\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n     SelectParams(CBaseChainParams::REGTEST);\n }\n "
      },
      {
        "sha": "718cbb9c5c6ec5441695861d5e3e8af434d2fc92",
        "filename": "src/test/fuzz/psbt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/psbt.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -9,17 +9,17 @@\n #include <pubkey.h>\n #include <script/script.h>\n #include <streams.h>\n-#include <util/memory.h>\n #include <version.h>\n \n #include <cstdint>\n+#include <memory>\n #include <optional>\n #include <string>\n #include <vector>\n \n void initialize()\n {\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n }\n \n void test_one_input(const std::vector<uint8_t>& buffer)"
      },
      {
        "sha": "a7ad6b05ec4a86ab12ba294811501a68adaff211",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -15,12 +15,13 @@\n #include <script/standard.h>\n #include <streams.h>\n #include <test/fuzz/fuzz.h>\n-#include <util/memory.h>\n+\n+#include <memory>\n \n void initialize()\n {\n     // Fuzzers using pubkey must hold an ECCVerifyHandle.\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n }\n \n void test_one_input(const std::vector<uint8_t>& buffer)"
      },
      {
        "sha": "3ebdec472e0104ae51fcbf3c446492689df145ad",
        "filename": "src/test/fuzz/script_flags.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/script_flags.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/fuzz/script_flags.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_flags.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -5,17 +5,18 @@\n #include <pubkey.h>\n #include <script/interpreter.h>\n #include <streams.h>\n-#include <util/memory.h>\n #include <version.h>\n \n #include <test/fuzz/fuzz.h>\n \n+#include <memory>\n+\n /** Flags that are not forbidden by an assert */\n static bool IsValidFlagCombination(unsigned flags);\n \n void initialize()\n {\n-    static const auto verify_handle = MakeUnique<ECCVerifyHandle>();\n+    static const auto verify_handle = std::make_unique<ECCVerifyHandle>();\n }\n \n void test_one_input(const std::vector<uint8_t>& buffer)"
      },
      {
        "sha": "597583f76667b0b76d935e58b7f9da80c5fe95ed",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -13,7 +13,6 @@\n #include <net.h>\n #include <netbase.h>\n #include <chainparams.h>\n-#include <util/memory.h>\n #include <util/system.h>\n \n #include <memory>\n@@ -178,12 +177,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn);\n+    std::unique_ptr<CNode> pnode1 = std::make_unique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, fInboundIn);\n+    std::unique_ptr<CNode> pnode2 = std::make_unique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }\n@@ -209,7 +208,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, false);\n+    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, false);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      },
      {
        "sha": "7422b48794488a190f7cbe3c3f784126439ac864",
        "filename": "src/test/util/logging.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/util/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/util/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/logging.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -7,7 +7,6 @@\n #include <logging.h>\n #include <noui.h>\n #include <tinyformat.h>\n-#include <util/memory.h>\n \n #include <stdexcept>\n "
      },
      {
        "sha": "73479184df54fc2eb967740e8fb5c3d0012d8b85",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -21,7 +21,6 @@\n #include <script/sigcache.h>\n #include <streams.h>\n #include <txdb.h>\n-#include <util/memory.h>\n #include <util/strencodings.h>\n #include <util/time.h>\n #include <util/translation.h>\n@@ -30,6 +29,7 @@\n #include <validationinterface.h>\n \n #include <functional>\n+#include <memory>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n@@ -109,7 +109,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-    g_chainstate = MakeUnique<CChainState>();\n+    g_chainstate = std::make_unique<CChainState>();\n     ::ChainstateActive().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     assert(!::ChainstateActive().CanFlushToDisk());\n@@ -133,8 +133,8 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n     m_node.mempool = &::mempool;\n     m_node.mempool->setSanityCheck(1.0);\n-    m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n+    m_node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n }\n \n TestingSetup::~TestingSetup()"
      },
      {
        "sha": "15ecf8f80d4d980a232bc6afa6b3d32ed237743d",
        "filename": "src/util/memory.h",
        "status": "removed",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/memory.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc5db40ee1ae7ac0b10dab18411544018d6160b/src/util/memory.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/memory.h?ref=4cc5db40ee1ae7ac0b10dab18411544018d6160b",
        "patch": "@@ -1,19 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UTIL_MEMORY_H\n-#define BITCOIN_UTIL_MEMORY_H\n-\n-#include <memory>\n-#include <utility>\n-\n-//! Substitute for C++14 std::make_unique.\n-template <typename T, typename... Args>\n-std::unique_ptr<T> MakeUnique(Args&&... args)\n-{\n-    return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n-}\n-\n-#endif"
      },
      {
        "sha": "cee1350d8837aa5e7af6d3ce88efd2e25729e93f",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -29,6 +29,7 @@\n #endif // __linux__\n \n #include <algorithm>\n+#include <memory>\n #include <fcntl.h>\n #include <sched.h>\n #include <sys/resource.h>\n@@ -96,7 +97,7 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     // Create empty lock file if it doesn't exist.\n     FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n-    auto lock = MakeUnique<fsbridge::FileLock>(pathLockFile);\n+    auto lock = std::make_unique<fsbridge::FileLock>(pathLockFile);\n     if (!lock->TryLock()) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), lock->GetReason());\n     }"
      },
      {
        "sha": "19d2791a3d81ed1576ce5fa3a1e335a6ef0473f3",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -20,7 +20,6 @@\n #include <logging.h>\n #include <sync.h>\n #include <tinyformat.h>\n-#include <util/memory.h>\n #include <util/settings.h>\n #include <util/threadnames.h>\n #include <util/time.h>"
      },
      {
        "sha": "82119c7ec60246ba29aa2007ad87abaf176adaf3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -47,6 +47,7 @@\n #include <validationinterface.h>\n #include <warnings.h>\n \n+#include <memory>\n #include <string>\n \n #include <boost/algorithm/string/replace.hpp>\n@@ -1240,7 +1241,7 @@ CoinsViews::CoinsViews(\n \n void CoinsViews::InitCache()\n {\n-    m_cacheview = MakeUnique<CCoinsViewCache>(&m_catcherview);\n+    m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);\n }\n \n // NOTE: for now m_blockman is set to a global, but this will be changed\n@@ -1254,7 +1255,7 @@ void CChainState::InitCoinsDB(\n     bool should_wipe,\n     std::string leveldb_name)\n {\n-    m_coins_views = MakeUnique<CoinsViews>(\n+    m_coins_views = std::make_unique<CoinsViews>(\n         leveldb_name, cache_size_bytes, in_memory, should_wipe);\n }\n "
      },
      {
        "sha": "7ddf5359d8defcf9ecca51f9ab6360fe93403015",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -8,6 +8,7 @@\n #include <util/strencodings.h>\n #include <util/translation.h>\n \n+#include <memory>\n #include <stdint.h>\n \n #ifndef WIN32\n@@ -358,7 +359,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     }\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+    std::unique_ptr<Db> pdbCopy = std::make_unique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -536,7 +537,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n         pdb = database.m_db.get();\n         if (pdb == nullptr) {\n             int ret;\n-            std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n+            std::unique_ptr<Db> pdb_temp = std::make_unique<Db>(env->dbenv.get(), 0);\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n@@ -693,7 +694,7 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     BerkeleyBatch db(database, \"r\");\n-                    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+                    std::unique_ptr<Db> pdbCopy = std::make_unique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                                             strFileRes.c_str(), // Filename"
      },
      {
        "sha": "38ef8cca73bf214d0bd9b1c6b44267f991b72e22",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -136,19 +136,19 @@ class BerkeleyDatabase\n     static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)\n     {\n         std::string filename;\n-        return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n+        return std::make_unique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n     }\n \n     /** Return object for accessing dummy database with no read/write capabilities. */\n     static std::unique_ptr<BerkeleyDatabase> CreateDummy()\n     {\n-        return MakeUnique<BerkeleyDatabase>();\n+        return std::make_unique<BerkeleyDatabase>();\n     }\n \n     /** Return object for accessing temporary in-memory database. */\n     static std::unique_ptr<BerkeleyDatabase> CreateMock()\n     {\n-        return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n+        return std::make_unique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n     }\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero"
      },
      {
        "sha": "6fbdbaed113c8fc2cf1fb3506aaaa9e414563c10",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -19,6 +19,7 @@\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n+#include <memory>\n #include <stdint.h>\n #include <tuple>\n \n@@ -993,14 +994,14 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n         }\n         auto parsed_redeemscript = ParseHex(strRedeemScript);\n-        import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+        import_data.redeemscript = std::make_unique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n     }\n     if (witness_script_hex.size()) {\n         if (!IsHex(witness_script_hex)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n         }\n         auto parsed_witnessscript = ParseHex(witness_script_hex);\n-        import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+        import_data.witnessscript = std::make_unique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n     }\n     for (size_t i = 0; i < pubKeys.size(); ++i) {\n         const auto& str = pubKeys[i].get_str();"
      },
      {
        "sha": "0ef7523f77d30effbd9eb36102ab117347b651b2",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -11,6 +11,8 @@\n #include <wallet/scriptpubkeyman.h>\n #include <wallet/wallet.h>\n \n+#include <memory>\n+\n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n     error.clear();\n@@ -304,7 +306,7 @@ void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n         return;\n     }\n \n-    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(m_storage.GetDatabase());\n+    std::unique_ptr<WalletBatch> batch = std::make_unique<WalletBatch>(m_storage.GetDatabase());\n     for (auto& meta_pair : mapKeyMetadata) {\n         CKeyMetadata& meta = meta_pair.second;\n         if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin"
      },
      {
        "sha": "1aab12d2acd03715b1f4a60e6377c1f207cd25f8",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -13,6 +13,7 @@\n #include <wallet/test/wallet_test_fixture.h>\n \n #include <boost/test/unit_test.hpp>\n+#include <memory>\n #include <random>\n \n BOOST_FIXTURE_TEST_SUITE(coinselector_tests, WalletTestingSetup)\n@@ -74,7 +75,7 @@ static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bo\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx)));\n+    std::unique_ptr<CWalletTx> wtx = std::make_unique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx)));\n     if (fIsFromMe)\n     {\n         wtx->m_amounts[CWalletTx::DEBIT].Set(ISMINE_SPENDABLE, 1);\n@@ -274,7 +275,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Make sure that can use BnB when there are preset inputs\n     empty_wallet();\n     {\n-        std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+        std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "80128d01bc3aff22010098ed5314b5a0a173f83b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -454,7 +454,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+        wallet = std::make_unique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n         {\n             LOCK(wallet->cs_wallet);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());"
      },
      {
        "sha": "4c3cd96f0605cb8c0996759f3596954b2992e17a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -32,6 +32,7 @@\n \n #include <algorithm>\n #include <assert.h>\n+#include <memory>\n \n #include <boost/algorithm/string/replace.hpp>\n \n@@ -3615,7 +3616,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n \n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n+        std::unique_ptr<CWallet> tempWallet = std::make_unique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n             error = strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile);"
      },
      {
        "sha": "976dd7455bfa41d901c2c5cc73c481b683d4dae3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236eb0686dce40b1c955c53a4e264b94370533a2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=236eb0686dce40b1c955c53a4e264b94370533a2",
        "patch": "@@ -1132,7 +1132,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     // Temporary LegacyScriptPubKeyMan accessors and aliases.\n     friend class LegacyScriptPubKeyMan;\n-    std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man = MakeUnique<LegacyScriptPubKeyMan>(*this);\n+    std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man = std::make_unique<LegacyScriptPubKeyMan>(*this);\n     CCriticalSection& cs_KeyStore = m_spk_man->cs_KeyStore;\n     LegacyScriptPubKeyMan::KeyMap& mapKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapKeys;\n     LegacyScriptPubKeyMan::ScriptMap& mapScripts GUARDED_BY(cs_KeyStore) = m_spk_man->mapScripts;"
      }
    ]
  }
]