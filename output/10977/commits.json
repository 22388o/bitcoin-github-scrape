[
  {
    "sha": "11dd29b658f60e247069a6adb8a0dcb882858858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWRkMjliNjU4ZjYwZTI0NzA2OWE2YWRiOGEwZGNiODgyODU4ODU4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-02T12:02:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-02T21:28:15Z"
      },
      "message": "[net] Fix use of uninitialized value in getnetworkinfo(const JSONRPCRequest& request)\n\nWhen running test_bitcoin under Valgrind I found the following issue:\n\n```\n$ valgrind src/test/test_bitcoin\n...\n==10465== Use of uninitialised value of size 8\n==10465==    at 0x6D09B61: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==10465==    by 0x6D0B1BB: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==10465==    by 0x6D0B36C: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==10465==    by 0x6D17699: std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==10465==    by 0x4CAAD7: operator<< (ostream:171)\n==10465==    by 0x4CAAD7: formatValue<ServiceFlags> (tinyformat.h:345)\n==10465==    by 0x4CAAD7: void tinyformat::detail::FormatArg::formatImpl<ServiceFlags>(std::ostream&, char const*, char const*, int, void const*) (tinyformat.h:523)\n==10465==    by 0x1924D4: format (tinyformat.h:510)\n==10465==    by 0x1924D4: tinyformat::detail::formatImpl(std::ostream&, char const*, tinyformat::detail::FormatArg const*, int) (tinyformat.h:803)\n==10465==    by 0x553A55: vformat (tinyformat.h:947)\n==10465==    by 0x553A55: format<ServiceFlags> (tinyformat.h:957)\n==10465==    by 0x553A55: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > tinyformat::format<ServiceFlags>(char const*, ServiceFlags const&) (tinyformat.h:966)\n==10465==    by 0x54C952: getnetworkinfo(JSONRPCRequest const&) (net.cpp:462)\n==10465==    by 0x28EDB5: CallRPC(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (rpc_tests.cpp:31)\n==10465==    by 0x293947: rpc_tests::rpc_togglenetwork::test_method() (rpc_tests.cpp:88)\n==10465==    by 0x2950E5: rpc_tests::rpc_togglenetwork_invoker() (rpc_tests.cpp:84)\n==10465==    by 0x182496: invoke<void (*)()> (callback.hpp:56)\n==10465==    by 0x182496: boost::unit_test::ut_detail::callback0_impl_t<boost::unit_test::ut_detail::unused, void (*)()>::invoke() (callback.hpp:89)\n...\n```\n\nThe read of the uninitialized variable nLocalServices is triggered by g_connman->GetLocalServices()\nin getnetworkinfo(const JSONRPCRequest& request) (net.cpp:462):\n\n```c++\nUniValue getnetworkinfo(const JSONRPCRequest& request)\n{\n...\n    if(g_connman)\n        obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n...\n}\n```\n\nThe reason for the uninitialized nLocalServices is that CConnman::Start(...) is not called\nby the tests, and hence the initialization normally performed by CConnman::Start(...) is\nnot done.\n\nThis commit adds a method Init(const Options& connOptions) which is called by both the\nconstructor and CConnman::Start(...). This method initializes nLocalServices and the other\nrelevant values from the supplied Options object.",
      "tree": {
        "sha": "decee9a372fb88d270ffa8473c66ec694cec5e01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/decee9a372fb88d270ffa8473c66ec694cec5e01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11dd29b658f60e247069a6adb8a0dcb882858858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11dd29b658f60e247069a6adb8a0dcb882858858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11dd29b658f60e247069a6adb8a0dcb882858858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11dd29b658f60e247069a6adb8a0dcb882858858/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "659c096134080034b5a5cdce4bdd8cae91632f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/659c096134080034b5a5cdce4bdd8cae91632f63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/659c096134080034b5a5cdce4bdd8cae91632f63"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 24,
      "deletions": 26
    },
    "files": [
      {
        "sha": "ca9a173abe7c38b84135694ccdd21f3c2f751302",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 25,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11dd29b658f60e247069a6adb8a0dcb882858858/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11dd29b658f60e247069a6adb8a0dcb882858858/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=11dd29b658f60e247069a6adb8a0dcb882858858",
        "patch": "@@ -2210,12 +2210,10 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     nReceiveFloodSize = 0;\n     semOutbound = NULL;\n     semAddnode = NULL;\n-    nMaxConnections = 0;\n-    nMaxOutbound = 0;\n-    nMaxAddnode = 0;\n-    nBestHeight = 0;\n-    clientInterface = NULL;\n     flagInterruptMsgProc = false;\n+\n+    Options connOptions;\n+    Init(connOptions);\n }\n \n NodeId CConnman::GetNewNodeId()\n@@ -2254,30 +2252,15 @@ bool CConnman::InitBinds(const std::vector<CService>& binds, const std::vector<C\n     return fBound;\n }\n \n-bool CConnman::Start(CScheduler& scheduler, Options connOptions)\n+bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n+    Init(connOptions);\n+\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n     nMaxOutboundTotalBytesSentInCycle = 0;\n     nMaxOutboundCycleStartTime = 0;\n \n-    nRelevantServices = connOptions.nRelevantServices;\n-    nLocalServices = connOptions.nLocalServices;\n-    nMaxConnections = connOptions.nMaxConnections;\n-    nMaxOutbound = std::min((connOptions.nMaxOutbound), nMaxConnections);\n-    nMaxAddnode = connOptions.nMaxAddnode;\n-    nMaxFeeler = connOptions.nMaxFeeler;\n-\n-    nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n-    nReceiveFloodSize = connOptions.nReceiveFloodSize;\n-\n-    nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n-    nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n-\n-    SetBestHeight(connOptions.nBestHeight);\n-\n-    clientInterface = connOptions.uiInterface;\n-\n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n@@ -2287,8 +2270,6 @@ bool CConnman::Start(CScheduler& scheduler, Options connOptions)\n         return false;\n     }\n \n-    vWhitelistedRange = connOptions.vWhitelistedRange;\n-\n     for (const auto& strDest : connOptions.vSeedNodes) {\n         AddOneShot(strDest);\n     }"
      },
      {
        "sha": "93a76fc09308f15463a2b66eb23e403c7c671a0d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11dd29b658f60e247069a6adb8a0dcb882858858/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11dd29b658f60e247069a6adb8a0dcb882858858/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=11dd29b658f60e247069a6adb8a0dcb882858858",
        "patch": "@@ -146,9 +146,26 @@ class CConnman\n         std::vector<CSubNet> vWhitelistedRange;\n         std::vector<CService> vBinds, vWhiteBinds;\n     };\n+\n+    void Init(const Options& connOptions) {\n+        nLocalServices = connOptions.nLocalServices;\n+        nRelevantServices = connOptions.nRelevantServices;\n+        nMaxConnections = connOptions.nMaxConnections;\n+        nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n+        nMaxAddnode = connOptions.nMaxAddnode;\n+        nMaxFeeler = connOptions.nMaxFeeler;\n+        nBestHeight = connOptions.nBestHeight;\n+        clientInterface = connOptions.uiInterface;\n+        nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n+        nReceiveFloodSize = connOptions.nReceiveFloodSize;\n+        nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n+        nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n+        vWhitelistedRange = connOptions.vWhitelistedRange;\n+    }\n+\n     CConnman(uint64_t seed0, uint64_t seed1);\n     ~CConnman();\n-    bool Start(CScheduler& scheduler, Options options);\n+    bool Start(CScheduler& scheduler, const Options& options);\n     void Stop();\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };"
      }
    ]
  }
]