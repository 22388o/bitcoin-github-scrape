[
  {
    "sha": "1b85cc5b444bb2d633c51db2dbb7d85884a3801c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjg1Y2M1YjQ0NGJiMmQ2MzNjNTFkYjJkYmI3ZDg1ODg0YTM4MDFj",
    "commit": {
      "author": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-11-17T03:18:39Z"
      },
      "committer": {
        "name": "Emil Engler",
        "email": "me@emilengler.com",
        "date": "2019-11-17T03:18:39Z"
      },
      "message": "Add permission whitelisting system",
      "tree": {
        "sha": "ae3a8ff82a3f73372497dbce44ce85dcb6875e31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae3a8ff82a3f73372497dbce44ce85dcb6875e31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b85cc5b444bb2d633c51db2dbb7d85884a3801c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE82XmVEpcmrEyk0LUL21BRcVfx8cFAl3QvA8ACgkQL21BRcVf\nx8coQhAAgMQyPe5fo8KU78F8w8QNBI1FilUd2vCOU20BmEi9dDnQe6Fc5OENp5xe\nqafFWMZ5b3VtPaIYyIravgEOz1bl6e/faYWKRW2NgxlkC38ooK00PvLV3adKm5vX\nWwNAk3q4yepgTenEW0r7E7OooRismMqa/DvM/sdvhlv7WEqyIYsx4NefEUt4Vs9c\nJyCXDP91/ESU6+9HRD4QKdgyrfWmdyYZSwwii/v24fHIb3ZLiTdTUU66P2hnF6eB\n26xTmNhGglgBnOvnWXUZlMu9Wo1YmCTXHvvumRrRv4Os+Maswgq9tLaHY5yOX4LS\n+hFTZRyuChwHxZEOHgZy/kCa9uk6dMAPuvrzV6Oi6xxUDwWzMLibwVFHMm2jRY+5\nWXY5PN2Ccaw4ajJ0pgzlAtWhn7cOPH8nHX8R2rnInlg/7TIWLPQMIeq+qStXM01M\nYNH6YZxOVuDcx7YT/+2ducKpR5rmkQraT5WJbnSzoJpAdtoLZgFXBsKChTWDE0Kl\noP2b8jU2BD4nC8s8AOlc617smW1fg1XiiA46eHob+OItCSyWiGNYshuQkhnU6cd9\nWABrUvDK8qZ8Y6wdyqeEedB9b42SiC/F/lOIVdOQ67mhaeinKClEGQqBMY86HNxw\nqhafii5UZ1g1icrI5gMAZGiN9KSW5ZhTfUFEsvNilGxKrtKMSLQ=\n=4pV3\n-----END PGP SIGNATURE-----",
        "payload": "tree ae3a8ff82a3f73372497dbce44ce85dcb6875e31\nparent b90dad5143993d266cdfeece898164d648bbbd78\nauthor Emil Engler <me@emilengler.com> 1573960719 +0100\ncommitter Emil Engler <me@emilengler.com> 1573960719 +0100\n\nAdd permission whitelisting system\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b85cc5b444bb2d633c51db2dbb7d85884a3801c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b85cc5b444bb2d633c51db2dbb7d85884a3801c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b85cc5b444bb2d633c51db2dbb7d85884a3801c/comments",
    "author": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b90dad5143993d266cdfeece898164d648bbbd78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90dad5143993d266cdfeece898164d648bbbd78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b90dad5143993d266cdfeece898164d648bbbd78"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "38c28c1cca3ee82f1fd4761197124218d48b1348",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b85cc5b444bb2d633c51db2dbb7d85884a3801c/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b85cc5b444bb2d633c51db2dbb7d85884a3801c/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=1b85cc5b444bb2d633c51db2dbb7d85884a3801c",
        "patch": "@@ -13,13 +13,21 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <boost/algorithm/string.hpp>\n #include <walletinitinterface.h>\n \n #include <memory>\n+#include <vector>\n+#include <map>\n+#include <string>\n+#include <algorithm>\n #include <stdio.h>\n \n #include <boost/algorithm/string.hpp> // boost::trim\n \n+std::map<std::string, std::vector<std::string>> rpcWhitelist;\n+bool rpcWhitelistOn = false;\n+\n /** WWW-Authenticate to present with 401 Unauthorized response */\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n \n@@ -186,6 +194,16 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         // singleton request\n         if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n+            // Parse permissions\n+            if(gArgs.GetBoolArg(\"-rpcwhitelistenable\", false)) {\n+                // Check if the user key is set\n+                if (rpcWhitelist.count(jreq.authUser) == 0)\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"User is not whitelisted for anything\");\n+                // Check if the method is in the permissions\n+                if (std::find(rpcWhitelist[jreq.authUser].begin(), rpcWhitelist[jreq.authUser].end(), jreq.strMethod) == rpcWhitelist[jreq.authUser].end()) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"User has insufficent permissions\");\n+                }\n+            }\n \n             UniValue result = tableRPC.execute(jreq);\n \n@@ -228,6 +246,27 @@ static bool InitRPCAuthentication()\n     if (gArgs.GetArg(\"-rpcauth\",\"\") != \"\")\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n+        // Load permissions\n+        if(gArgs.GetBoolArg(\"-rpcwhitelistenable\", false)) {\n+            std::vector<std::string> permissions = gArgs.GetArgs(\"-rpcwhitelist\");\n+            for (unsigned int i = 0; i < permissions.size(); ++i) {\n+                // Parse element, skip malformatted elements\n+                if(permissions[i].find(':') == std::string::npos) {\n+                    LogPrintf(\"Invalid -rpcwhitelist, skipping it\\n\");\n+                    continue;\n+                }\n+                std::string username = permissions[i].substr(0, permissions[i].find(':'));\n+                std::string userpermissions_str = permissions[i].substr(username.size() + 1);\n+                std::vector<std::string> userpermissions;\n+                // Get the actual permissions by splitting the ',' in the string\n+                boost::split(userpermissions, userpermissions_str, [](char c){return c == ',';});\n+                // Add it to the actual whitelist\n+                rpcWhitelist[username] = userpermissions;\n+                LogPrintf(\"RPC Whitelist: %s\\n\", permissions[i]);\n+            }\n+            // If there were no errors, turn it on\n+            rpcWhitelistOn = true;\n+        }\n     }\n     return true;\n }"
      },
      {
        "sha": "bf282a601d3db30e9c9b0e5db132a24882d295cf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b85cc5b444bb2d633c51db2dbb7d85884a3801c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b85cc5b444bb2d633c51db2dbb7d85884a3801c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1b85cc5b444bb2d633c51db2dbb7d85884a3801c",
        "patch": "@@ -534,6 +534,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelistenable\", \"Enable the whitelist feature\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcwhitelist=<whitelist>\", \"Give users speciic permissions, only works when -rpcwhitelistenable=1\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n "
      }
    ]
  }
]