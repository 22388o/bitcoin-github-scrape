[
  {
    "sha": "dbf30ff10f76d2ab9114b345e8712cba30a8d282",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmYzMGZmMTBmNzZkMmFiOTExNGIzNDVlODcxMmNiYTMwYThkMjgy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-03-21T18:49:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-03-21T18:49:08Z"
      },
      "message": "[trivial] Fix typos in comments",
      "tree": {
        "sha": "113b54b12a394382eee95bf40120009b2d143b0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/113b54b12a394382eee95bf40120009b2d143b0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbf30ff10f76d2ab9114b345e8712cba30a8d282",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf30ff10f76d2ab9114b345e8712cba30a8d282",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf30ff10f76d2ab9114b345e8712cba30a8d282",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf30ff10f76d2ab9114b345e8712cba30a8d282/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c17afcbe73ec546bc63aea34639fa0f4ea45c37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c17afcbe73ec546bc63aea34639fa0f4ea45c37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c17afcbe73ec546bc63aea34639fa0f4ea45c37"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "36b3523692bfc124981b4d0d525628544f7afe56",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -134,7 +134,7 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n         vchRet.clear();\n         return false;\n     }\n-    // re-calculate the checksum, insure it matches the included 4-byte checksum\n+    // re-calculate the checksum, ensure it matches the included 4-byte checksum\n     uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n     if (memcmp(&hash, &vchRet.end()[-4], 4) != 0) {\n         vchRet.clear();"
      },
      {
        "sha": "f12a41126c0456c89410b600e161203ba43b8d71",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -14,7 +14,7 @@\n \n // Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n // framework (see https://github.com/google/benchmark)\n-// Wny not use the Google Benchmark framework? Because adding Yet Another Dependency\n+// Why not use the Google Benchmark framework? Because adding Yet Another Dependency\n // (that uses cmake as its build system and has lots of features we don't need) isn't\n // worth it.\n "
      },
      {
        "sha": "90120b82eba3df3dc990e281db6370c85821a5a4",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -147,7 +147,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n                 // request it.\n                 // This should be rare enough that the extra bandwidth doesn't matter,\n                 // but eating a round-trip due to FillBlock failure would be annoying\n-                // Note that we dont want duplication between extra_txn and mempool to\n+                // Note that we don't want duplication between extra_txn and mempool to\n                 // trigger this case, so we compare witness hashes first\n                 if (txn_available[idit->second] &&\n                         txn_available[idit->second]->GetWitnessHash() != extra_txn[i].second->GetWitnessHash()) {"
      },
      {
        "sha": "bb5b2d4347018edef10c91211c8ec9fcec9a8865",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -443,7 +443,7 @@ void SubstituteFonts(const QString& language)\n             /* 10.10 or later system */\n             if (language == \"zh_CN\" || language == \"zh_TW\" || language == \"zh_HK\") // traditional or simplified Chinese\n               QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Heiti SC\");\n-            else if (language == \"ja\") // Japanesee\n+            else if (language == \"ja\") // Japanese\n               QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Songti SC\");\n             else\n               QFont::insertSubstitution(\".Helvetica Neue DeskInterface\", \"Lucida Grande\");"
      },
      {
        "sha": "08a76c7d49632b2da1eac7254eabffc398935a2b",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -142,7 +142,7 @@ void PaymentServerTests::paymentServerTests()\n     byteArray = QByteArray((const char*)&data[0], data.size());\n     r.paymentRequest.parse(byteArray);\n     // Ensure the request is initialized, because network \"main\" is default, even for\n-    // uninizialized payment requests and that will fail our test here.\n+    // uninitialized payment requests and that will fail our test here.\n     QVERIFY(r.paymentRequest.IsInitialized());\n     QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);\n "
      },
      {
        "sha": "5d1c5b78d1786aa61316389a70961601dd073c27",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -413,7 +413,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     size_t percent23 = (addrman.size() * 23) / 100;\n     BOOST_CHECK(vAddr.size() == percent23);\n     BOOST_CHECK(vAddr.size() == 461);\n-    // (Addrman.size() < number of addresses added) due to address collisons.\n+    // (Addrman.size() < number of addresses added) due to address collisions.\n     BOOST_CHECK(addrman.size() == 2007);\n }\n "
      },
      {
        "sha": "287395c6c653128dacb75a2e4a91f2e2ea35c774",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n }\n \n \n-// Test that blocks which might allocate lots of memory free their memory agressively.\n+// Test that blocks which might allocate lots of memory free their memory aggressively.\n //\n // This test attempts to catch a pathological case where by lazily freeing\n // checks might mean leaving a check un-swapped out, and decreasing by 1 each"
      },
      {
        "sha": "4d6d6d6210416573aae7820ffe25387d7b9037a1",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -379,7 +379,7 @@ void test_cache_generations()\n         // Loose Check that hit rate is above min_hit_rate\n         BOOST_CHECK(hit > min_hit_rate);\n         // Tighter check, count number of times we are less than tight_hit_rate\n-        // (and implicityly, greater than min_hit_rate)\n+        // (and implicitly, greater than min_hit_rate)\n         out_of_tight_tolerance += hit < tight_hit_rate;\n     }\n     // Check that being out of tolerance happens less than"
      },
      {
        "sha": "f2f06fa8e253147a67bb645f08f671da6c5df6d7",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE(merkle_test)\n             // If no mutation was done (once for every ntx value), try up to 16 branches.\n             if (mutate == 0) {\n                 for (int loop = 0; loop < std::min(ntx, 16); loop++) {\n-                    // If ntx <= 16, try all branches. Otherise, try 16 random ones.\n+                    // If ntx <= 16, try all branches. Otherwise, try 16 random ones.\n                     int mtx = loop;\n                     if (ntx > 16) {\n                         mtx = insecure_rand() % ntx;"
      },
      {
        "sha": "7cf2a744ea75a2f03571c2146c6f5a3ce5332833",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -276,7 +276,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK(banned_until.get_int64() > now);\n     BOOST_CHECK(banned_until.get_int64()-now <= 200);\n \n-    // must throw an exception because 127.0.0.1 is in already banned suubnet range\n+    // must throw an exception because 127.0.0.1 is in already banned subnet range\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"setban 127.0.0.1 add\")), std::runtime_error);\n \n     BOOST_CHECK_NO_THROW(CallRPC(std::string(\"setban 127.0.0.0/24 remove\")));"
      },
      {
        "sha": "5da4907f060cdcd0c113244bd907c92f7aaf0305",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -247,7 +247,7 @@ BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n     for (int mod=2;mod<11;mod++)\n     {\n         int mask = 1;\n-        // Really rough binomal confidence approximation.\n+        // Really rough binomial confidence approximation.\n         int err = 30*10000./mod*sqrt((1./mod*(1-1./mod))/10000.);\n         //mask is 2^ceil(log2(mod))-1\n         while(mask<mod-1)mask=(mask<<1)+1;"
      },
      {
        "sha": "037b9c0abcc579ef0259006c70114836a1601c91",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf30ff10f76d2ab9114b345e8712cba30a8d282/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dbf30ff10f76d2ab9114b345e8712cba30a8d282",
        "patch": "@@ -3152,7 +3152,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n     // TODO: Decouple this function from the block download logic by removing fRequested\n-    // This requires some new chain datastructure to efficiently look up if a\n+    // This requires some new chain data structure to efficiently look up if a\n     // block is in a chain leading to a candidate for best tip, despite not\n     // being such a candidate itself.\n "
      }
    ]
  }
]