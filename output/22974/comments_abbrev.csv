mzumsande,2021-09-14 17:55:41,cc @vasild ,https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-919384556,919384556,
jonatack,2021-09-14 18:31:39,Nice code reduction.  Did you see a difference in `./src/bench/bench_bitcoin -filter=AddrManGood`?,https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-919411617,919411617,
DrahtBot,2021-09-14 18:40:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22950](https://github.com/bitcoin/bitcoin/pull/22950) ([p2p] Pimpl AddrMan to abstract implementation details by amitiut",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-919417960,919417960,
jonatack,2021-09-14 19:04:24,"Concept ACK. Benches are showing a huge speedup for me locally.\n\nbefore\n```\n$ ./src/bench/bench_bitcoin -filter=AddrManGood\n\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|      801,906,990.00 |                1.25 |    5.7% |      4.26 | AddrManGood\n|      814,159,543.0",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-919435266,919435266,
mzumsande,2021-09-14 19:09:08,"Thanks! I didn't know about this benchmark, will try to confirm locally and add the result to OP!",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-919438590,919438590,
amitiuttarwar,2021-09-14 22:32:39,"approach ACK, planning to do a more in-depth review later this week",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-919558678,919558678,
naumenkogs,2021-09-15 10:08:45,"Concept ACK.\nCode also looks good, but I'm gonna ACK once you resolve all the pending suggestions from other reviewers. I agree with those suggestions.",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-919883958,919883958,
mzumsande,2021-09-15 22:54:20,"Thanks for the reviews - I addressed all comments.\nI added a commit to allow for a lower number of sources in the fuzz test as suggested by @MarcoFalke .\n\nI also ran the benchmark and got similar results to @jonatack:\n\n`./src/bench/bench_bitcoin -filter=AddrManGood`\nbefore:\n```\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-920445700,920445700,
naumenkogs,2021-09-16 08:33:57,ACK 57ce20307e604530f78ef4f0f8d9fb94f80ca81b,https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-920702275,920702275,
jnewbery,2021-09-16 10:08:24,"ACK 57ce20307e\n\nUsing the public interface to fuzz addrman is a much better approach. As well as being fewer lines of code, the fuzz test is more correct now. The previous code reached into the internals and made changes to private data which invalidated addrman's invariants. For example, entries were placed into the tried table without setting `nLastSuccess`, which would cause `check()` to fa",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-920767718,920767718,
laanwj,2021-09-20 17:44:29,"This is fantastic, faster *and* less code.\nCode review ACK 57ce20307e604530f78ef4f0f8d9fb94f80ca81b",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-923140946,923140946,
mzumsande,2021-09-20 18:26:04,"> Notice that it is adding entries with addr != source, so that lucky `start_bucket` is not playing a role in the benchmark, I guess.\n\nI think it does: The first `Add()` call creates a `CAddrInfo`  entry in `mapInfo` and set `CAddrInfo.source` to the source, no matter if `addr==source` or not. Then `GetNewBucket(uint256, const std::vector<bool>)` which is now called from `MakeTried` uses just ",https://github.com/bitcoin/bitcoin/pull/22974#issuecomment-923172221,923172221,
jonatack,2021-09-14 18:33:43,"in general: clang-format, and where useful consider const, and braced initialization for type safety\n```suggestion\n        const int bucket{(start_bucket + n) % ADDRMAN_NEW_BUCKET_COUNT};\n```",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r708530751,708530751,src/addrman.cpp
jonatack,2021-09-14 18:35:32,"prefer prefix iterator where postfix isn't needed (per developer-notes.md)\n```suggestion\n    for (int n = 0; n < ADDRMAN_NEW_BUCKET_COUNT; ++n) {\n```",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r708532028,708532028,src/addrman.cpp
jonatack,2021-09-14 18:37:47,"while touching this conditional, maybe add the missing brackets we require with conditionals of more than one line (CVE-2014-1266: the Apple ""goto fail"" vulnerability, https://dwheeler.com/essays/apple-goto-fail)\n",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r708533494,708533494,src/addrman.cpp
MarcoFalke,2021-09-15 07:21:13,"I presume this shouldn't happen after the sanity checks passed on a deserialized addrman. So, on ""bad things"" that are caused by internal logic flaws, it might be better to crash in debug/test builds. Otherwise this will be harder to notice or only noticed later on.\n\n\n```suggestion\n    if (!Assume(info.nRefCount > 0)) {\n```",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r708908831,708908831,src/addrman.cpp
MarcoFalke,2021-09-15 10:13:42,"Completely unrelated, but I was wondering if it makes sense to fuzz the time here",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r709044009,709044009,src/test/fuzz/addrman.cpp
mzumsande,2021-09-15 22:21:26,done for all variables in this loop.,https://github.com/bitcoin/bitcoin/pull/22974#discussion_r709615117,709615117,src/addrman.cpp
mzumsande,2021-09-15 22:22:04,done,https://github.com/bitcoin/bitcoin/pull/22974#discussion_r709615407,709615407,src/addrman.cpp
mzumsande,2021-09-15 22:22:48,"added brackets here, thanks",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r709615771,709615771,src/addrman.cpp
mzumsande,2021-09-15 22:23:24,done as suggested,https://github.com/bitcoin/bitcoin/pull/22974#discussion_r709616011,709616011,src/addrman.cpp
mzumsande,2021-09-15 22:24:51,"The comment before this block warns against fuzzing in this loop, some problem with running out of random numbers. Could use `insecure_rand` though?",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r709616562,709616562,src/test/fuzz/addrman.cpp
vasild,2021-09-17 14:44:25,"Just above, on line 83 (github does not let me comment on it) is a comment:\n```cpp\n// Add some of the addresses directly to the ""tried"" table.\n```\nI think the word ""directly"" does not apply anymore since the hackish direct addition is replaced by `Add_()` (goes to ""new"") + `Good_()` (moved to ""tried"").",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r711119626,711119626,src/test/fuzz/addrman.cpp
vasild,2021-09-17 15:01:11,"I compared this branch with the `#else` branch, filled addrman with 9k addresses and did not observe any difference in performance. That is - now the high level `Add_()` + `Good_()` perform the same way as the hackish direct add to the tried table :racehorse:.",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r711133474,711133474,src/test/fuzz/addrman.cpp
mzumsande,2021-09-20 18:26:58,"Thanks, will fix this in a follow-up!",https://github.com/bitcoin/bitcoin/pull/22974#discussion_r712412186,712412186,src/test/fuzz/addrman.cpp
