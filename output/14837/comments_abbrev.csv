gmaxwell,2018-11-29T08:42:27Z," The argument that the CVE fix was a performance regression is based on a misunderstand of the system's current operation: Block validation is only very rarely on the critical path for block propagation.  This wasn't the case when the duplicate checking skipping was added, but it is the case now. I can't imagine that the PR to skip the ""redundant"" duplicate check would have gone through if it wasn",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442751314,442751314,
JeremyRubin,2018-11-29T09:05:01Z,"The main benefit I'm emphasizing here is that it checks more strict properties.\n\nAs noted. the stricter check need not introduce a 'DoS attack' -- it can revert to the existing runtime easily. In any case, our goal isn't really to validate a maliciously created block quickly, it is to validate an honestly created block as quickly as possible and a maliciously created block in tolerable time --",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442757835,442757835,
DrahtBot,2018-11-29T09:31:58Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15773](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15773.html) (test: Add BitcoinTestFramework::sync_* meth",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442766164,442766164,
ryanofsky,2018-11-29T15:44:24Z,"> Stricter Invariants This PR checks stricter properties. Before this PR, a block might pass checkblock with duplicate inputs spent across transactions and invalid longchain order.\n\n> The main benefit I'm emphasizing here is that it checks more strict properties.\n\nWhat's the list of properties that this PR checks for? ""Invalid longchain order"" seems to mean that ""outputs being created by t",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442881137,442881137,
ryanofsky,2018-11-29T16:27:22Z,"> What's the list of properties that this PR checks for?\n\nFound the list here:\n\nhttps://github.com/JeremyRubin/bitcoin/blob/0425c6409000aeb3270ba8f9c30d2746c5c5b784/src/validation.cpp#L3078-L3086\n\nThe actual implementation of this is change is short, clean and not hard to understand. This change doesn't add ""hundreds of lines of code"", though it does add a lot of comments and analysis.",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442898663,442898663,
sdaftuar,2018-11-30T15:05:57Z,"I agree with @gmaxwell.  Adding complexity to the consensus code (or, as I often argue, changing it at all) should be something we do for only very good reasons, both because of the high review burden consensus code changes incur on the project, and because of the maintenance burden and cognitive load we put on future developers as well. \n\nI really don't think we should consider making consens",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-443231239,443231239,
gmaxwell,2018-11-30T18:50:12Z,"If there were a PR with some massive validation speedup that needed the new behaviour this provides, then it might be worth considering on the basis of that improvement.  But as conjectural prepatory work I just don't see the gain.\n\nTo the extent that there is an argument that belt-and-suspendering the consistent check would make the code safer holds -- I'm not sure about that, but I think it'",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-443301640,443301640,
JeremyRubin,2018-12-06T05:07:18Z,"@sdaftuar Thanks for the review and feedback.\n\n1. Understood. It's often times hard to tell the borderline between small-steps that are easy to reason about and sweeping changes which change lots of code. I tend to err on the side of small steps with easy to reason about changes because when things are larger I perceive there's more of a rejection for review simply because of large amount of c",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-444749879,444749879,
gmaxwell,2018-12-09T14:55:20Z,"A reindex (-chainstate is fine) would be the standard benchmark, you could set assumevalid to whatever you think will highlight the improvement the most-- both extremes of AV setting fairly characterize different but important aspects of sync performance (the performance on older vs more recent history).  Similarly, default dbcache or maximized dbcache are both defensible benchmarking configuratio",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-445544371,445544371,
DrahtBot,2019-04-10T14:21:20Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-481711492,481711492,
MarcoFalke,2019-04-19T17:33:11Z,"There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-484965751,484965751,
practicalswift,2018-11-30T09:05:14Z,"This `.get()` is redundant, right?",https://github.com/bitcoin/bitcoin/pull/14837#discussion_r237787620,237787620,src/validation.cpp
practicalswift,2018-11-30T09:07:20Z,Make it explicit that the unsigned integer wraparound that will take place here at run-time is intentional? Or alternatively rewrite so that no integer wraparound takes place at run-time? Verify with `-fsanitize=integer`.,https://github.com/bitcoin/bitcoin/pull/14837#discussion_r237788322,237788322,src/validation.cpp
practicalswift,2018-11-30T09:09:22Z,Make it explicit that the unsigned integer wraparound that will take place here at run-time is intentional? Or alternatively rewrite so that no integer wraparound takes place at run-time? Verify with `-fsanitize=integer`.,https://github.com/bitcoin/bitcoin/pull/14837#discussion_r237789039,237789039,src/validation.cpp
practicalswift,2018-11-30T09:10:33Z,Critical :-),https://github.com/bitcoin/bitcoin/pull/14837#discussion_r237789510,237789510,src/validation.cpp
ken2812221,2018-11-30T12:55:11Z,`#include <bitset>` to make appveyor happy.,https://github.com/bitcoin/bitcoin/pull/14837#discussion_r237850750,237850750,src/validation.cpp
JeremyRubin,2018-11-30T22:41:00Z,How do I make the wraparound explicit?,https://github.com/bitcoin/bitcoin/pull/14837#discussion_r238024768,238024768,src/validation.cpp
practicalswift,2018-12-04T20:52:05Z,"You could use the method I used in PR #14224: \n\nhttps://github.com/practicalswift/bitcoin/blob/0373038cedc07e3d775a1055c0da45f4e8fda2b7/src/attributes.h#L9-L15\n",https://github.com/bitcoin/bitcoin/pull/14837#discussion_r238833478,238833478,src/validation.cpp
MarcoFalke,2018-12-04T23:00:00Z,Why would that be preferable to the sanitizer suppressions in `./test/`?,https://github.com/bitcoin/bitcoin/pull/14837#discussion_r238873171,238873171,src/validation.cpp
JeremyRubin,2018-12-06T04:29:54Z,"Yeah I'm not sure about it. Unsigned integer overflow isn't a bug, it's a feature... I would also like a suppression that operates at the statement level (e.g., like rust's wrapping_mul) rather than marking the entire function with an attribute. What if there is an unsigned wraparound issue elsewhere in the code?",https://github.com/bitcoin/bitcoin/pull/14837#discussion_r239325118,239325118,src/validation.cpp
practicalswift,2018-12-06T05:21:29Z,"@MarcoFalke In contrast to the sanitizer suppressions it documents if the wraparound is intentional or not.\n\nWhat do you think about using say `INTENTIONAL_WRAPAROUND` for the intentional wraparounds and the file based sanitizer suppressions to cover the unintentional wraparounds?",https://github.com/bitcoin/bitcoin/pull/14837#discussion_r239331146,239331146,src/validation.cpp
practicalswift,2018-12-06T05:24:40Z,"@JeremyRubin I assume you're talking about intentional wraparounds as features? The problem isn't intentional wraparounds â€“ they are totally fine by definition. The problem is unintentional wraparounds. \n\nI share your wish for suppressions that operated at the statement level, but they don't exist yet AFAIK :-)",https://github.com/bitcoin/bitcoin/pull/14837#discussion_r239331523,239331523,src/validation.cpp
