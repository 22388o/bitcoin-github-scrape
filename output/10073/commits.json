[
  {
    "sha": "717ad131f6b665b2e7cf55db689da9616e727d78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTdhZDEzMWY2YjY2NWIyZTdjZjU1ZGI2ODlkYTk2MTZlNzI3ZDc4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-23T23:00:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-24T22:23:36Z"
      },
      "message": "Actually run assumevalid.py.\n\nassumevalid was merged as part of PR 9484, but was not added to the\ntest_runner, so is not run even as part of the extended tests.\n\nThis commit adds assumevalid to the list of tests in test_runner. It\nalso clarifies the code in assumevalid considerably.",
      "tree": {
        "sha": "2f78784f67f0b13796d7a6fcdc4527f6cee85f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f78784f67f0b13796d7a6fcdc4527f6cee85f11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/717ad131f6b665b2e7cf55db689da9616e727d78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/717ad131f6b665b2e7cf55db689da9616e727d78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/717ad131f6b665b2e7cf55db689da9616e727d78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/717ad131f6b665b2e7cf55db689da9616e727d78/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0b1e57b20a17177ed5a9a54e4a8aab597a546b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0b1e57b20a17177ed5a9a54e4a8aab597a546b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0b1e57b20a17177ed5a9a54e4a8aab597a546b4"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 59,
      "deletions": 44
    },
    "files": [
      {
        "sha": "da680a5d24ba40c8fc4380b3f6e85aef4e6a005a",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 58,
        "deletions": 44,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/717ad131f6b665b2e7cf55db689da9616e727d78/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/717ad131f6b665b2e7cf55db689da9616e727d78/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=717ad131f6b665b2e7cf55db689da9616e727d78",
        "patch": "@@ -15,7 +15,7 @@\n     2-101:    bury that block with 100 blocks so the coinbase transaction\n               output can be spent\n     102:      a block containing a transaction spending the coinbase\n-              transaction output. The transaction has an invalid signature. \n+              transaction output. The transaction has an invalid signature.\n     103-2202: bury the bad block with just over two weeks' worth of blocks\n               (2100 blocks)\n \n@@ -29,40 +29,34 @@\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n \"\"\"\n+import time\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.key import CECKey\n-from test_framework.script import *\n+from test_framework.mininode import (CBlockHeader,\n+                                     COutPoint,\n+                                     CTransaction,\n+                                     CTxIn,\n+                                     CTxOut,\n+                                     NetworkThread,\n+                                     NodeConn,\n+                                     SingleNodeConnCB,\n+                                     msg_block,\n+                                     msg_headers)\n+from test_framework.script import (CScript, OP_TRUE)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_node, p2p_port, assert_equal)\n \n class BaseNode(SingleNodeConnCB):\n     def __init__(self):\n-        SingleNodeConnCB.__init__(self)\n-        self.last_inv = None\n-        self.last_headers = None\n-        self.last_block = None\n-        self.last_getdata = None\n-        self.block_announced = False\n-        self.last_getheaders = None\n-        self.disconnected = False\n-        self.last_blockhash_announced = None\n-\n-    def on_close(self, conn):\n-        self.disconnected = True\n-\n-    def wait_for_disconnect(self, timeout=60):\n-        test_function = lambda: self.disconnected\n-        assert(wait_until(test_function, timeout=timeout))\n-        return\n+        super().__init__()\n \n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n-        headers_message.headers = [ CBlockHeader(b) for b in new_blocks ]\n+        headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n         self.send_message(headers_message)\n \n-class SendHeadersTest(BitcoinTestFramework):\n+class AssumeValidTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n@@ -72,8 +66,34 @@ def setup_network(self):\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid.\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n+        self.nodes = [start_node(0, self.options.tmpdir)]\n+\n+    def send_blocks_until_disconnected(self, node):\n+        \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n+        for i in range(len(self.blocks)):\n+            try:\n+                node.send_message(msg_block(self.blocks[i]))\n+            except IOError as e:\n+                assert str(e) == 'Not connected, no pushbuf'\n+                break\n+\n+    def assert_blockchain_height(self, node, height):\n+        \"\"\"Wait until the blockchain is no longer advancing and verify it's reached the expected height.\"\"\"\n+        last_height = node.getblock(node.getbestblockhash())['height']\n+        timeout = 10\n+        while True:\n+            time.sleep(0.25)\n+            current_height = node.getblock(node.getbestblockhash())['height']\n+            if current_height != last_height:\n+                last_height = current_height\n+                if timeout < 0:\n+                    assert False, \"blockchain too short after timeout: %d\" % current_height\n+                timeout - 0.25\n+                continue\n+            elif current_height > height:\n+                assert False, \"blockchain too long: %d\" % current_height\n+            elif current_height == height:\n+                break\n \n     def run_test(self):\n \n@@ -83,7 +103,7 @@ def run_test(self):\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n         node0.add_connection(connections[0])\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        NetworkThread().start()  # Start up network handling in another thread\n         node0.wait_for_verack()\n \n         # Build the blockchain\n@@ -120,7 +140,7 @@ def run_test(self):\n         # Create a transaction spending the coinbase output with an invalid (null) signature\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.block1.vtx[0].sha256, 0), scriptSig=b\"\"))\n-        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.vout.append(CTxOut(49 * 100000000, CScript([OP_TRUE])))\n         tx.calc_sha256()\n \n         block102 = create_block(self.tip, create_coinbase(height), self.block_time)\n@@ -166,25 +186,19 @@ def run_test(self):\n         node1.send_header_for_blocks(self.blocks[2000:])\n         node2.send_header_for_blocks(self.blocks[0:200])\n \n-        # Send 102 blocks to node0. Block 102 will be rejected.\n-        for i in range(101):\n-            node0.send_message(msg_block(self.blocks[i]))\n-        node0.sync_with_ping() # make sure the most recent block is synced\n-        node0.send_message(msg_block(self.blocks[101]))\n-        assert_equal(self.nodes[0].getblock(self.nodes[0].getbestblockhash())['height'], 101)\n+        # Send blocks to node0. Block 102 will be rejected.\n+        self.send_blocks_until_disconnected(node0)\n+        self.assert_blockchain_height(self.nodes[0], 101)\n \n-        # Send 3102 blocks to node1. All blocks will be accepted.\n+        # Send all blocks to node1. All blocks will be accepted.\n         for i in range(2202):\n             node1.send_message(msg_block(self.blocks[i]))\n-        node1.sync_with_ping() # make sure the most recent block is synced\n+        node1.sync_with_ping()  # make sure the most recent block is synced\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n-        # Send 102 blocks to node2. Block 102 will be rejected.\n-        for i in range(101):\n-            node2.send_message(msg_block(self.blocks[i]))\n-        node2.sync_with_ping() # make sure the most recent block is synced\n-        node2.send_message(msg_block(self.blocks[101]))\n-        assert_equal(self.nodes[2].getblock(self.nodes[2].getbestblockhash())['height'], 101)\n+        # Send blocks to node2. Block 102 will be rejected.\n+        self.send_blocks_until_disconnected(node2)\n+        self.assert_blockchain_height(self.nodes[2], 101)\n \n if __name__ == '__main__':\n-    SendHeadersTest().main()\n+    AssumeValidTest().main()"
      },
      {
        "sha": "e2c0e8e5285064037130b672bd8e003ed0ddcc7a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/717ad131f6b665b2e7cf55db689da9616e727d78/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/717ad131f6b665b2e7cf55db689da9616e727d78/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=717ad131f6b665b2e7cf55db689da9616e727d78",
        "patch": "@@ -110,6 +110,7 @@\n     'p2p-feefilter.py',\n     'rpcbind_test.py',\n     # vv Tests less than 30s vv\n+    'assumevalid.py',\n     'bip65-cltv.py',\n     'bip65-cltv-p2p.py',\n     'bipdersig-p2p.py',"
      }
    ]
  }
]