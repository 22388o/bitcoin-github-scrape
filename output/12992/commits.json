[
  {
    "sha": "909f54c80abb7195c2e82c6e06c414f4526a339e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDlmNTRjODBhYmI3MTk1YzJlODJjNmUwNmM0MTRmNDUyNmEzMzll",
    "commit": {
      "author": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-06-15T23:02:52Z"
      },
      "committer": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-08-02T16:09:39Z"
      },
      "message": "[wallet] Add wallet name to log messages\n\nAfter multiple wallets became supported, wallet-related log messages\nbecame ambiguous as to which wallet they were being emitted by.\n\nfixes #11317",
      "tree": {
        "sha": "d0bb2bf8350d71c611da2b21b96870285d8351fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0bb2bf8350d71c611da2b21b96870285d8351fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/909f54c80abb7195c2e82c6e06c414f4526a339e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/909f54c80abb7195c2e82c6e06c414f4526a339e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/909f54c80abb7195c2e82c6e06c414f4526a339e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/909f54c80abb7195c2e82c6e06c414f4526a339e/comments",
    "author": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ef57a96b8b7255bd1f1ea0583846f18305419bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef57a96b8b7255bd1f1ea0583846f18305419bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef57a96b8b7255bd1f1ea0583846f18305419bf"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 66,
      "deletions": 54
    },
    "files": [
      {
        "sha": "97ec5e073c038e9bc9fb0dcbe7701f442d65b8d7",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=909f54c80abb7195c2e82c6e06c414f4526a339e",
        "patch": "@@ -195,7 +195,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n     if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet, ::feeEstimator))) {\n-        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n+        wallet->WalletLogPrintf(\"Bumping fee and discarding dust output\\n\");\n         new_fee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);\n     }"
      },
      {
        "sha": "2a7777a69069e4b1f6fa4bb5f530b14cc79b0192",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=909f54c80abb7195c2e82c6e06c414f4526a339e",
        "patch": "@@ -553,7 +553,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n         // Use uiInterface.ShowProgress instead of pwallet.ShowProgress because pwallet.ShowProgress has a cancel button tied to AbortRescan which\n         // we don't want for this progress bar showing the import progress. uiInterface.ShowProgress does not have a cancel button.\n-        uiInterface.ShowProgress(_(\"Importing...\"), 0, false); // show progress dialog in GUI\n+        uiInterface.ShowProgress(strprintf(\"%s \" + _(\"Importing...\"), pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n         while (file.good()) {\n             uiInterface.ShowProgress(\"\", std::max(1, std::min(99, (int)(((double)file.tellg() / (double)nFilesize) * 100))), false);\n             std::string line;\n@@ -571,7 +571,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 assert(key.VerifyPubKey(pubkey));\n                 CKeyID keyid = pubkey.GetID();\n                 if (pwallet->HaveKey(keyid)) {\n-                    LogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n+                    pwallet->WalletLogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n                     continue;\n                 }\n                 int64_t nTime = DecodeDumpTime(vstr[1]);\n@@ -589,7 +589,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                         fLabel = true;\n                     }\n                 }\n-                LogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n+                pwallet->WalletLogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n                 if (!pwallet->AddKeyPubKey(key, pubkey)) {\n                     fGood = false;\n                     continue;\n@@ -603,11 +603,11 @@ UniValue importwallet(const JSONRPCRequest& request)\n                CScript script = CScript(vData.begin(), vData.end());\n                CScriptID id(script);\n                if (pwallet->HaveCScript(id)) {\n-                   LogPrintf(\"Skipping import of %s (script already present)\\n\", vstr[0]);\n+                   pwallet->WalletLogPrintf(\"Skipping import of %s (script already present)\\n\", vstr[0]);\n                    continue;\n                }\n                if(!pwallet->AddCScript(script)) {\n-                   LogPrintf(\"Error importing script %s\\n\", vstr[0]);\n+                   pwallet->WalletLogPrintf(\"Error importing script %s\\n\", vstr[0]);\n                    fGood = false;\n                    continue;\n                }"
      },
      {
        "sha": "bfa903ac13213f3a5b18a4c7465ea7c8d29871b8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 43,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=909f54c80abb7195c2e82c6e06c414f4526a339e",
        "patch": "@@ -82,7 +82,7 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name)\n // Custom deleter for shared_ptr<CWallet>.\n static void ReleaseWallet(CWallet* wallet)\n {\n-    LogPrintf(\"Releasing wallet %s\\n\", wallet->GetName());\n+    wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n     wallet->BlockUntilSyncedToCurrentChain();\n     wallet->Flush();\n     delete wallet;\n@@ -354,8 +354,7 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n     {\n         std::string strAddr = EncodeDestination(CScriptID(redeemScript));\n-        LogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\",\n-            __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n+        WalletLogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\", __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n         return true;\n     }\n \n@@ -445,7 +444,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                 if (pMasterKey.second.nDeriveIterations < 25000)\n                     pMasterKey.second.nDeriveIterations = 25000;\n \n-                LogPrintf(\"Wallet passphrase changed to an nDeriveIterations of %i\\n\", pMasterKey.second.nDeriveIterations);\n+                WalletLogPrintf(\"Wallet passphrase changed to an nDeriveIterations of %i\\n\", pMasterKey.second.nDeriveIterations);\n \n                 if (!crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                     return false;\n@@ -653,7 +652,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     if (kMasterKey.nDeriveIterations < 25000)\n         kMasterKey.nDeriveIterations = 25000;\n \n-    LogPrintf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n+    WalletLogPrintf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n \n     if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n         return false;\n@@ -907,7 +906,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n \n     bool success = true;\n     if (!batch.WriteTx(wtx)) {\n-        LogPrintf(\"%s: Updating batch tx %s failed\\n\", __func__, wtx.GetHash().ToString());\n+        WalletLogPrintf(\"%s: Updating batch tx %s failed\\n\", __func__, wtx.GetHash().ToString());\n         success = false;\n     }\n \n@@ -974,7 +973,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     }\n \n     //// debug print\n-    LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+    WalletLogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n     // Write to disk\n     if (fInsertedNew || fUpdated)\n@@ -1032,7 +1031,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n                 std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n-                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pIndex->GetBlockHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pIndex->GetBlockHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n                         MarkConflicted(pIndex->GetBlockHash(), range.first->second);\n                     }\n                     range.first++;\n@@ -1058,11 +1057,11 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n                 for (const CKeyID &keyid : vAffected) {\n                     std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n                     if (mi != m_pool_key_to_index.end()) {\n-                        LogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+                        WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n                         MarkReserveKeysAsUsed(mi->second);\n \n                         if (!TopUpKeyPool()) {\n-                            LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+                            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n                         }\n                     }\n                 }\n@@ -1641,8 +1640,8 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n \n         if (!ExtractDestination(txout.scriptPubKey, address) && !txout.scriptPubKey.IsUnspendable())\n         {\n-            LogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n-                     this->GetHash().ToString());\n+            pwallet->WalletLogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n+                                    this->GetHash().ToString());\n             address = CNoDestination();\n         }\n \n@@ -1676,7 +1675,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     {\n         LOCK(cs_main);\n         startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n     }\n \n     if (startBlock) {\n@@ -1717,11 +1716,11 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n     CBlockIndex* pindex = pindexStart;\n     CBlockIndex* ret = nullptr;\n \n-    if (pindex) LogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n \n     {\n         fAbortRescan = false;\n-        ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n+        ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n         CBlockIndex* tip = nullptr;\n         double progress_begin;\n         double progress_end;\n@@ -1739,11 +1738,11 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n         while (pindex && !fAbortRescan && !ShutdownRequested())\n         {\n             if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n-                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n+                ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n             }\n \n             CBlock block;\n@@ -1776,11 +1775,11 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             }\n         }\n         if (pindex && fAbortRescan) {\n-            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n         } else if (pindex && ShutdownRequested()) {\n-            LogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n         }\n-        ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n+        ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n     }\n     return ret;\n }\n@@ -1823,7 +1822,7 @@ bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n         if (InMempool() || AcceptToMemoryPool(maxTxFee, state)) {\n-            LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n+            pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             if (connman) {\n                 CInv inv(MSG_TX, GetHash());\n                 connman->ForEachNode([&inv](CNode* pnode)\n@@ -2085,7 +2084,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n     // block was found:\n     std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60, connman);\n     if (!relayed.empty())\n-        LogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n+        WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n \n /** @} */ // end of mapWallet\n@@ -3025,7 +3024,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n         }\n     }\n \n-    LogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n+    WalletLogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n               nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n               feeCalc.est.pass.start, feeCalc.est.pass.end,\n               100 * feeCalc.est.pass.withinTarget / (feeCalc.est.pass.totalConfirmed + feeCalc.est.pass.inMempool + feeCalc.est.pass.leftMempool),\n@@ -3051,7 +3050,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         wtxNew.fTimeReceivedIsTxTime = true;\n         wtxNew.fFromMe = true;\n \n-        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n+        WalletLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n         {\n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n@@ -3077,7 +3076,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         {\n             // Broadcast\n             if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n-                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n+                WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n                 wtx.RelayWalletTransaction(connman);\n@@ -3285,7 +3284,7 @@ bool CWallet::NewKeyPool()\n         if (!TopUpKeyPool()) {\n             return false;\n         }\n-        LogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n+        WalletLogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n     }\n     return true;\n }\n@@ -3369,7 +3368,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             m_pool_key_to_index[pubkey.GetID()] = index;\n         }\n         if (missingInternal + missingExternal > 0) {\n-            LogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n+            WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n         }\n     }\n     return true;\n@@ -3414,7 +3413,7 @@ bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         }\n \n         m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n-        LogPrintf(\"keypool reserve %d\\n\", nIndex);\n+        WalletLogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n     return true;\n }\n@@ -3424,7 +3423,7 @@ void CWallet::KeepKey(int64_t nIndex)\n     // Remove from key pool\n     WalletBatch batch(*database);\n     batch.ErasePool(nIndex);\n-    LogPrintf(\"keypool keep %d\\n\", nIndex);\n+    WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n@@ -3441,7 +3440,7 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n         }\n         m_pool_key_to_index[pubkey.GetID()] = nIndex;\n     }\n-    LogPrintf(\"keypool return %d\\n\", nIndex);\n+    WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n }\n \n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n@@ -3703,7 +3702,7 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n         }\n         LearnAllRelatedScripts(keypool.vchPubKey);\n         batch.ErasePool(index);\n-        LogPrintf(\"keypool index %d removed\\n\", index);\n+        WalletLogPrintf(\"keypool index %d removed\\n\", index);\n         it = setKeyPool->erase(it);\n     }\n }\n@@ -3867,7 +3866,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n             int64_t blocktime = pindex->GetBlockTime();\n             nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n         } else {\n-            LogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());\n+            WalletLogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());\n         }\n     }\n     return nTimeSmart;\n@@ -4006,7 +4005,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         }\n     }\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    uiInterface.InitMessage(strprintf(_(\"Loading wallet %s...\"), walletFile));\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n@@ -4047,12 +4046,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n         if (nMaxVersion == 0) // the -upgradewallet without argument case\n         {\n-            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n             nMaxVersion = FEATURE_LATEST;\n             walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n         }\n         else\n-            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+            walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n             InitError(_(\"Cannot downgrade wallet\"));\n@@ -4075,7 +4074,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         bool hd_upgrade = false;\n         bool split_upgrade = false;\n         if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n-            LogPrintf(\"Upgrading wallet to HD\\n\");\n+            walletInstance->WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n             walletInstance->SetMinVersion(FEATURE_HD);\n \n             // generate a new master key\n@@ -4085,7 +4084,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         }\n         // Upgrade to HD chain split if necessary\n         if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-            LogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+            walletInstance->WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n             walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n             split_upgrade = FEATURE_HD_SPLIT > prev_version;\n         }\n@@ -4218,7 +4217,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n-    LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n+    walletInstance->WalletLogPrintf(\"wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n@@ -4254,7 +4253,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         }\n \n         uiInterface.InitMessage(_(\"Rescanning...\"));\n-        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+        walletInstance->WalletLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n@@ -4271,7 +4270,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n             }\n             walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, true);\n         }\n-        LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n+        walletInstance->WalletLogPrintf(\"rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->ChainStateFlushed(chainActive.GetLocator());\n         walletInstance->database->IncrementUpdateCounter();\n \n@@ -4310,9 +4309,9 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n \n     {\n         LOCK(walletInstance->cs_wallet);\n-        LogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n-        LogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n-        LogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n+        walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n+        walletInstance->WalletLogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n+        walletInstance->WalletLogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n     }\n \n     return walletInstance;"
      },
      {
        "sha": "06a7c0a75266d7b848be4c2e2664506aab89950d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=909f54c80abb7195c2e82c6e06c414f4526a339e",
        "patch": "@@ -1195,6 +1195,19 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /** overwrite all flags by the given uint64_t\n        returns false if unknown, non-tolerable flags are present */\n     bool SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n+\n+    /** Returns a bracketed wallet name for displaying in logs, will return [default wallet] if the wallet has no name */\n+    const std::string GetDisplayName() const {\n+        std::string wallet_name = GetName().length() == 0 ? \"default wallet\" : GetName();\n+        return strprintf(\"[%s]\", wallet_name);\n+    };\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "7f9e4a0458d8ac16ab5802f7f3d4bdcaf415a851",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909f54c80abb7195c2e82c6e06c414f4526a339e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=909f54c80abb7195c2e82c6e06c414f4526a339e",
        "patch": "@@ -545,7 +545,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         Dbc* pcursor = m_batch.GetCursor();\n         if (!pcursor)\n         {\n-            LogPrintf(\"Error getting wallet database cursor\\n\");\n+            pwallet->WalletLogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n         }\n \n@@ -559,7 +559,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 break;\n             else if (ret != 0)\n             {\n-                LogPrintf(\"Error reading next record from wallet database\\n\");\n+                pwallet->WalletLogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n \n@@ -583,7 +583,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 }\n             }\n             if (!strErr.empty())\n-                LogPrintf(\"%s\\n\", strErr);\n+                pwallet->WalletLogPrintf(\"%s\\n\", strErr);\n         }\n         pcursor->close();\n     }\n@@ -602,9 +602,9 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     if (result != DBErrors::LOAD_OK)\n         return result;\n \n-    LogPrintf(\"nFileVersion = %d\\n\", wss.nFileVersion);\n+    pwallet->WalletLogPrintf(\"nFileVersion = %d\\n\", wss.nFileVersion);\n \n-    LogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total. Unknown wallet records: %u\\n\",\n+    pwallet->WalletLogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total. Unknown wallet records: %u\\n\",\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n     // nTimeFirstKey is only reliable if all keys have metadata"
      }
    ]
  }
]