[
  {
    "sha": "5aa31f6ef26f51ce461c917654dd1cfbbdd1409a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWEzMWY2ZWYyNmY1MWNlNDYxYzkxNzY1NGRkMWNmYmJkZDE0MDlh",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-10-19T17:32:49Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-11-01T18:52:46Z"
      },
      "message": "tests: add utility to assert node memory usage hasn't increased\n\nAdds a utility to get resident set size memory usage for a test\nnode and a context manager that allows assertions based upon\nmaximum memory use increase.",
      "tree": {
        "sha": "8ecb0e8e72ec29b46bea9b267e3fac7d74d82b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ecb0e8e72ec29b46bea9b267e3fac7d74d82b0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3f377daaa86cd7755a552fa3adfeb195835f58e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f377daaa86cd7755a552fa3adfeb195835f58e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3f377daaa86cd7755a552fa3adfeb195835f58e"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 45,
      "deletions": 0
    },
    "files": [
      {
        "sha": "27a4dbf0631dc9760085bf735717c7a23d1f4fdf",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=5aa31f6ef26f51ce461c917654dd1cfbbdd1409a",
        "patch": "@@ -115,6 +115,28 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None\n+\n+        try:\n+            return int(subprocess.check_output(\n+                \"ps h -o rss {}\".format(self.process.pid),\n+                shell=True, stderr=subprocess.DEVNULL).strip())\n+\n+        # Catching `Exception` broadly to avoid failing on platforms where ps\n+        # isn't installed or doesn't work as expected, e.g. OpenBSD.\n+        #\n+        # We could later use something like `psutils` to work across platforms.\n+        except Exception:\n+            self.log.exception(\"Unable to get memory usage\")\n+            return None\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)\n@@ -267,6 +289,29 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n+        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n+        hasn't increased beyond some threshold percentage.\n+        \"\"\"\n+        before_memory_usage = self.get_mem_rss()\n+\n+        yield\n+\n+        after_memory_usage = self.get_mem_rss()\n+\n+        if not (before_memory_usage and after_memory_usage):\n+            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")\n+            return\n+\n+        perc_increase_memory_usage = 1 - (float(before_memory_usage) / after_memory_usage)\n+\n+        if perc_increase_memory_usage > perc_increase_allowed:\n+            self._raise_assertion_error(\n+                \"Memory usage increased over threshold of {:.3f}% from {} to {} ({:.3f}%)\".format(\n+                    perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n+                    perc_increase_memory_usage * 100))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      }
    ]
  },
  {
    "sha": "62f94d39f8de88a44bb0a8a2837d864f777aaacc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmY5NGQzOWY4ZGU4OGE0NGJiMGE4YTI4MzdkODY0Zjc3N2FhYWNj",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-10-19T17:34:28Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-11-01T18:52:49Z"
      },
      "message": "tests: add P2PConnection.send_raw_message",
      "tree": {
        "sha": "d88b9c6e313e17b161a3ca1274cf8ea8c60f7d3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d88b9c6e313e17b161a3ca1274cf8ea8c60f7d3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62f94d39f8de88a44bb0a8a2837d864f777aaacc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62f94d39f8de88a44bb0a8a2837d864f777aaacc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62f94d39f8de88a44bb0a8a2837d864f777aaacc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62f94d39f8de88a44bb0a8a2837d864f777aaacc/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5aa31f6ef26f51ce461c917654dd1cfbbdd1409a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aa31f6ef26f51ce461c917654dd1cfbbdd1409a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4d78f4adf3b0bf0fb4ef3f03533f6680fd71646b",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62f94d39f8de88a44bb0a8a2837d864f777aaacc/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62f94d39f8de88a44bb0a8a2837d864f777aaacc/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=62f94d39f8de88a44bb0a8a2837d864f777aaacc",
        "patch": "@@ -175,10 +175,13 @@ def send_message(self, message):\n \n         This method takes a P2P payload, builds the P2P header and adds\n         the message to the send buffer to be sent over the socket.\"\"\"\n+        tmsg = self.build_message(message)\n+        self._log_message(\"send\", message)\n+        return self.send_raw_message(tmsg)\n+\n+    def send_raw_message(self, raw_message_bytes):\n         if not self.is_connected:\n             raise IOError('Not connected')\n-        self._log_message(\"send\", message)\n-        tmsg = self._build_message(message)\n \n         def maybe_write():\n             if not self._transport:\n@@ -188,12 +191,12 @@ def maybe_write():\n             # Python 3.4 versions.\n             if hasattr(self._transport, 'is_closing') and self._transport.is_closing():\n                 return\n-            self._transport.write(tmsg)\n+            self._transport.write(raw_message_bytes)\n         NetworkThread.network_event_loop.call_soon_threadsafe(maybe_write)\n \n     # Class utility methods\n \n-    def _build_message(self, message):\n+    def build_message(self, message):\n         \"\"\"Build a serialized P2P message\"\"\"\n         command = message.command\n         data = message.serialize()\n@@ -376,9 +379,9 @@ def wait_for_verack(self, timeout=60):\n \n     # Message sending helper functions\n \n-    def send_and_ping(self, message):\n+    def send_and_ping(self, message, timeout=60):\n         self.send_message(message)\n-        self.sync_with_ping()\n+        self.sync_with_ping(timeout=timeout)\n \n     # Sync up with the node\n     def sync_with_ping(self, timeout=60):"
      }
    ]
  },
  {
    "sha": "d20a9fa13d1c13f552e879798c0508be70190e71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjBhOWZhMTNkMWMxM2Y1NTJlODc5Nzk4YzA1MDhiZTcwMTkwZTcx",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-10-19T17:34:52Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-11-01T18:52:49Z"
      },
      "message": "tests: add tests for invalid P2P messages\n\nE.g., ensure that we can't DoS a node by sending it a bunch of large,\nunrecognized messages.",
      "tree": {
        "sha": "52fd2832a3c95abdabcdc3dc6246e198e53ea782",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52fd2832a3c95abdabcdc3dc6246e198e53ea782"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d20a9fa13d1c13f552e879798c0508be70190e71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d20a9fa13d1c13f552e879798c0508be70190e71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d20a9fa13d1c13f552e879798c0508be70190e71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d20a9fa13d1c13f552e879798c0508be70190e71/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62f94d39f8de88a44bb0a8a2837d864f777aaacc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62f94d39f8de88a44bb0a8a2837d864f777aaacc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62f94d39f8de88a44bb0a8a2837d864f777aaacc"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 176,
      "deletions": 0
    },
    "files": [
      {
        "sha": "85f035628ff65dfee551f729c77e851285b5c0a8",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d20a9fa13d1c13f552e879798c0508be70190e71/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d20a9fa13d1c13f552e879798c0508be70190e71/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=d20a9fa13d1c13f552e879798c0508be70190e71",
        "patch": "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid network messages.\"\"\"\n+import struct\n+\n+from test_framework import messages\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class msg_unrecognized:\n+    \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n+\n+    command = b'badmsg'\n+\n+    def __init__(self, str_data):\n+        self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n+\n+    def serialize(self):\n+        return messages.ser_string(self.str_data)\n+\n+    def __repr__(self):\n+        return \"{}(data={})\".format(self.command, self.str_data)\n+\n+\n+class msg_nametoolong(msg_unrecognized):\n+\n+    command = b'thisnameiswayyyyyyyyytoolong'\n+\n+\n+class InvalidMessagesTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        \"\"\"\n+        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n+           that it isn't an effective DoS against the node.\n+\n+        1. Send an oversized (4MB+) message and check that we're disconnected.\n+\n+        2. Send a few messages with an incorrect data size in the header, ensure the\n+           messages are ignored.\n+\n+        3. Send an unrecognized message with a command name longer than 12 characters.\n+\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.node = node\n+        node.add_p2p_connection(P2PDataStore())\n+        conn2 = node.add_p2p_connection(P2PDataStore())\n+\n+        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n+        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n+\n+        #\n+        # 0.\n+        #\n+        # Send as large a message as is valid, ensure we aren't disconnected but\n+        # also can't exhaust resources.\n+        #\n+        msg_at_size = msg_unrecognized(\"b\" * valid_data_limit)\n+        assert len(msg_at_size.serialize()) == msg_limit\n+\n+        with node.assert_memory_usage_stable(perc_increase_allowed=0.03):\n+            self.log.info(\n+                \"Sending a bunch of large, junk messages to test \"\n+                \"memory exhaustion. May take a bit...\")\n+\n+            # Run a bunch of times to test for memory exhaustion.\n+            for _ in range(200):\n+                node.p2p.send_message(msg_at_size)\n+\n+            # Check that, even though the node is being hammered by nonsense from one\n+            # connection, it can still service other peers in a timely way.\n+            for _ in range(20):\n+                conn2.sync_with_ping(timeout=2)\n+\n+            # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+            self.log.info(\"Waiting for node to drop junk messages.\")\n+            node.p2p.sync_with_ping(timeout=8)\n+            assert node.p2p.is_connected\n+\n+        #\n+        # 1.\n+        #\n+        # Send an oversized message, ensure we're disconnected.\n+        #\n+        msg_over_size = msg_unrecognized(\"b\" * (valid_data_limit + 1))\n+        assert len(msg_over_size.serialize()) == (msg_limit + 1)\n+\n+        with node.assert_debug_log([\"Oversized message from peer=0, disconnecting\"]):\n+            # An unknown message type (or *any* message type) over\n+            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n+            node.p2p.send_message(msg_over_size)\n+            node.p2p.wait_for_disconnect(timeout=4)\n+\n+        node.disconnect_p2ps()\n+        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.wait_for_verack()\n+\n+        #\n+        # 2.\n+        #\n+        # Send messages with an incorrect data size in the header.\n+        #\n+        actual_size = 100\n+        msg = msg_unrecognized(\"b\" * actual_size)\n+\n+        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n+        for wrong_size in (2, 77, 78, 79):\n+            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n+\n+            # Unmodified message should submit okay.\n+            node.p2p.send_and_ping(msg)\n+\n+            # A message lying about its data size results in a disconnect when the incorrect\n+            # data size is less than the actual size.\n+            #\n+            # TODO: why does behavior change at 78 bytes?\n+            #\n+            node.p2p.send_raw_message(self._tweak_msg_data_size(msg, wrong_size))\n+\n+            # For some reason unknown to me, we sometimes have to push additional data to the\n+            # peer in order for it to realize a disconnect.\n+            try:\n+                node.p2p.send_message(messages.msg_ping(nonce=123123))\n+            except IOError:\n+                pass\n+\n+            node.p2p.wait_for_disconnect(timeout=10)\n+            node.disconnect_p2ps()\n+            node.add_p2p_connection(P2PDataStore())\n+\n+        #\n+        # 3.\n+        #\n+        # Send a message with a too-long command name.\n+        #\n+        node.p2p.send_message(msg_nametoolong(\"foobar\"))\n+        node.p2p.wait_for_disconnect(timeout=4)\n+\n+        # Node is still up.\n+        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.sync_with_ping()\n+\n+\n+    def _tweak_msg_data_size(self, message, wrong_size):\n+        \"\"\"\n+        Return a raw message based on another message but with an incorrect data size in\n+        the message header.\n+        \"\"\"\n+        raw_msg = self.node.p2p.build_message(message)\n+\n+        bad_size_bytes = struct.pack(\"<I\", wrong_size)\n+        num_header_bytes_before_size = 4 + 12\n+\n+        # Replace the correct data size in the message with an incorrect one.\n+        raw_msg_with_wrong_size = (\n+            raw_msg[:num_header_bytes_before_size] +\n+            bad_size_bytes +\n+            raw_msg[(num_header_bytes_before_size + len(bad_size_bytes)):]\n+        )\n+        assert len(raw_msg) == len(raw_msg_with_wrong_size)\n+\n+        return raw_msg_with_wrong_size\n+\n+\n+\n+if __name__ == '__main__':\n+    InvalidMessagesTest().main()"
      },
      {
        "sha": "90bbe665984c66c54b00a2526bb8f172652eafc4",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d20a9fa13d1c13f552e879798c0508be70190e71/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d20a9fa13d1c13f552e879798c0508be70190e71/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d20a9fa13d1c13f552e879798c0508be70190e71",
        "patch": "@@ -139,6 +139,7 @@\n     'mining_prioritisetransaction.py',\n     'p2p_invalid_locator.py',\n     'p2p_invalid_block.py',\n+    'p2p_invalid_messages.py',\n     'p2p_invalid_tx.py',\n     'feature_assumevalid.py',\n     'example_test.py',"
      }
    ]
  }
]