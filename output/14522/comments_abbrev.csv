DrahtBot,2018-10-20T09:49:53Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14519](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14519.html) (tests: add utility to easily profile node p",https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-431566168,431566168,
jamesob,2018-10-23T15:00:40Z,Addressed @practicalswift nits.,https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-432283648,432283648,
conscott,2018-10-23T15:17:33Z,ACK dfbb8624c3747f4e9e76c9b9a051e973857a15c3,https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-432290623,432290623,
jamesob,2018-10-24T20:02:37Z,Pushed a small change to ensure `get_mem_rss()` failure is handled gracefully on Windows.,https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-432807765,432807765,
laanwj,2018-10-31T18:05:39Z,"looks good to me, thanks for adding testing for this particular corner\n",https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-434790334,434790334,
laanwj,2018-10-31T20:29:40Z,"checked: fails on FreeBSD:\n```\nuser@vm13:~/bitcoin % test/functional/p2p_invalid_messages.py\n2018-10-31T20:28:53.767000Z TestFramework (INFO): Initializing test directory /tmp/testw9nvke44\n2018-10-31T20:28:54.336000Z TestFramework (ERROR): Unexpected exception caught during testing\nTraceback (most recent call last):\n  File ""/usr/home/user/bitcoin/test/functional/test_framework/test_fra",https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-434836495,434836495,
jamesob,2018-11-01T15:24:26Z,Addressed feedback from @laanwj and @conscott; thanks for the looks.,https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-435076736,435076736,
conscott,2018-11-06T08:12:45Z,Tested Re-ACK d20a9fa13d1c13f552e879798c0508be70190e71,https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-436165994,436165994,
laanwj,2018-11-06T10:15:23Z,utACK d20a9fa13d1c13f552e879798c0508be70190e71,https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-436201162,436201162,
MarcoFalke,2018-11-07T20:49:02Z,"Also, the test fails on macOS (with `OSError: [Errno 41] Protocol wrong type for socket` printed to stderr):\n\n```\nstdout:\n2018-11-07T18:35:07.995000Z TestFramework (INFO): Initializing test directory /var/folders/nz/vv4_9tw56nv9k3tkvyszvwg80000gn/T/test_runner_₿_🏃_20181107_182921/p2p_invalid_messages_46\n2018-11-07T18:35:08.836000Z TestFramework.node0 (ERROR): Unable to get memory usage\",https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-436771967,436771967,
jnewbery,2019-02-21T15:32:30Z,"I'm very late to this party, but my opinion is that testing memory usage is very useful, but should not be part of a functional test suite. Functional tests should test the _functionality_ of the product, ie the outputs that are triggered by passing in various inputs. Memory usage is related to the _implementation_ of the product. As the follow-on problems with this PR show, making rigid tests tha",https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-466044015,466044015,
jamesob,2019-02-21T15:53:14Z,"> I think that this code could be very useful when incorporated into a soak testing framework, but that it shouldn't be included in our functional test suite.\n\nProbably worth adding some guidance around what is and isn't appropriate for the functional test suite in one of the READMEs.\n\nI'm generally inclined to agree with you, but I think having a comprehensive and easy-to-use framework fo",https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-466052280,466052280,
jnewbery,2019-02-21T16:06:49Z,"> Probably worth adding some guidance around what is and isn't appropriate for the functional test suite in one of the READMEs.\n\nGood idea. I'll add that to my list (or I'm happy to review yours if you want to add it)\n\n> I think having a comprehensive and easy-to-use framework for adding checks like this is very worthwhile.\n\nAlso agree. The `TestNode` class is supposed to be reusable, ",https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-466057740,466057740,
practicalswift,2018-10-22T16:19:24Z,Use `for _ in range(200):` instead to show that the variable is intentionally unused :-),https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227041595,227041595,test/functional/p2p_invalid_messages.py
practicalswift,2018-10-22T16:20:44Z,Try to find a less general exception to catch :-),https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227042048,227042048,test/functional/test_framework/test_node.py
conscott,2018-10-23T05:55:30Z,I think you are looking for `subprocess.CalledProcessError` :),https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227233907,227233907,test/functional/test_framework/test_node.py
conscott,2018-10-23T06:19:32Z,"If this is expected to happen sometimes, (I would assume because `ps` isn't supported), might want to leave a comment as to why this check is being skipped rather than throwing an exception. ",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227238734,227238734,test/functional/test_framework/test_node.py
jamesob,2018-10-23T14:48:20Z,No exception thrown here - just a warning log statement and early return.,https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227428152,227428152,test/functional/test_framework/test_node.py
conscott,2018-10-23T15:01:39Z,"Sorry - I didn't phrase that right. I meant, it may make sense to leave a comment as to why its okay to skip the check, and not just throw an exception (as some might expect to happen). ",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227434400,227434400,test/functional/test_framework/test_node.py
conscott,2018-10-23T15:16:51Z,"Actually with the log from the CalledProcessError its fine, so please disregard :)",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227441204,227441204,test/functional/test_framework/test_node.py
conscott,2018-10-25T05:51:53Z,"Since you are displaying as a % instead of decimal, I think you just need to multiply by 100\n```\n.format(perc_increase_allowed*100, \n        before_memory_usage, \n        after_memory_usage, \n        perc_increase_memory_usage*100)\n```\n\nNow it'll show something like\n`Memory usage increased over threshold of 3.0%....`",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r228041463,228041463,test/functional/test_framework/test_node.py
laanwj,2018-10-31T18:01:33Z,"I agree that dragging in python's pstools library is *probably* overkill for this however this needs testing on at least:\n- OpenBSD \n- FreeBSD\n- MacOSX\n\nAlso possiblity would be to skip it on 'unknown' platforms.",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r229807159,229807159,test/functional/test_framework/test_node.py
laanwj,2018-10-31T20:28:27Z,please add it to the test runner?,https://github.com/bitcoin/bitcoin/pull/14522#discussion_r229855652,229855652,test/functional/p2p_invalid_messages.py
jamesob,2018-11-01T15:23:37Z,"Instead of implementing something more sophisticated in this PR, I'm just going to skip it on platforms where `ps` doesn't work as this expects. If someone wants to drag in `psutils` in a later PR or implemented additional parsing logic, that sounds fine to me.",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r230081702,230081702,test/functional/test_framework/test_node.py
MarcoFalke,2018-11-06T22:49:02Z,"You are taking `after_memory_usage` as reference, so a increase of n% in the memory usage will result always in  `perc_increase_memory_usage` < n%.\n\nFor example you double the memory usage from 1GB to 2GB, this will give you 50%:\n\n```py\n>>> 1 - (1 / 2)\n0.5\n```\n\nAlso you don't need the float conversion with `/`",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231323467,231323467,test/functional/test_framework/test_node.py
MarcoFalke,2018-11-06T22:51:29Z,Why is shell required here?,https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324135,231324135,test/functional/test_framework/test_node.py
MarcoFalke,2018-11-06T22:52:28Z,"I'd prefer to explicitly catch `subprocess.SubprocessError` and `ValueError`, so that `KeyError` et al is not caught.",https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324371,231324371,test/functional/test_framework/test_node.py
MarcoFalke,2018-11-06T22:53:17Z,Couldn't this be an assert? How is this different from calling an RPC method when the node is not running?,https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324557,231324557,test/functional/test_framework/test_node.py
MarcoFalke,2018-11-06T23:01:11Z,nit: Could assert debug log for unknown message type?,https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326521,231326521,test/functional/p2p_invalid_messages.py
MarcoFalke,2018-11-06T23:02:11Z,Could assert debug log with the exact error?,https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326767,231326767,test/functional/p2p_invalid_messages.py
MarcoFalke,2018-11-06T23:02:38Z,Could assert debug log?,https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326878,231326878,test/functional/p2p_invalid_messages.py
