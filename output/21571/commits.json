[
  {
    "sha": "4d6e246fa46f2309e2998b542e4c104d73d29071",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDZlMjQ2ZmE0NmYyMzA5ZTI5OThiNTQyZTRjMTA0ZDczZDI5MDcx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-20T10:26:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T16:32:46Z"
      },
      "message": "test: use pointers in denialofservice_tests/peer_discouragement\n\nThis is a non-functional change that replaces the `CNode` on-stack\nvariables with `CNode` pointers.\n\nThe reason for this is that it would allow us to add those `CNode`s\nto `CConnman::vNodes[]` which in turn would allow us to check that they\nare disconnected properly - a `CNode` object must be in\n`CConnman::vNodes[]` in order for its `fDisconnect` flag to be set.\n\nIf we store pointers to the on-stack variables in `CConnman` then it\nwould crash at the end, trying to `delete` them.",
      "tree": {
        "sha": "a96b2df57aff9577c8e7c7b85fe5afa8173431c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a96b2df57aff9577c8e7c7b85fe5afa8173431c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d6e246fa46f2309e2998b542e4c104d73d29071",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d6e246fa46f2309e2998b542e4c104d73d29071",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d6e246fa46f2309e2998b542e4c104d73d29071",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d6e246fa46f2309e2998b542e4c104d73d29071/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e08f3193b543017702d000c2263bccbefa981c14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08f3193b543017702d000c2263bccbefa981c14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e08f3193b543017702d000c2263bccbefa981c14"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 41,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1769664a6ca9f67e8d80cb31f4c36933873659df",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 28,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d6e246fa46f2309e2998b542e4c104d73d29071/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d6e246fa46f2309e2998b542e4c104d73d29071/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=4d6e246fa46f2309e2998b542e4c104d73d29071",
        "patch": "@@ -22,6 +22,7 @@\n \n #include <test/util/setup_common.h>\n \n+#include <array>\n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -213,42 +214,54 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n+    const std::array<CAddress, 2> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE}};\n+\n+    const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n+\n+    std::array<CNode*, 2> nodes;\n+\n     banman->ClearBanned();\n-    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\n+                         /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false};\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));\n-    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n-\n-    CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, /* nKeyedNetGroupIn */ 1, /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n+\n+    nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\n+                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false};\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1])); // [1] not discouraged yet...\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));  // ... but [0] still should be\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n+    // Expect both [0] and [1] to be discouraged now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n \n-    peerLogic->FinalizeNode(dummyNode1);\n-    peerLogic->FinalizeNode(dummyNode2);\n+    for (CNode* node : nodes) {\n+        peerLogic->FinalizeNode(*node);\n+        delete node;\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      }
    ]
  },
  {
    "sha": "637bb6da368b87711005b909f451f94909400092",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzdiYjZkYTM2OGI4NzcxMTAwNWI5MDlmNDUxZjk0OTA5NDAwMDky",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-20T10:40:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T16:32:51Z"
      },
      "message": "test: also check disconnect in denialofservice_tests/peer_discouragement\n\nUse `CConnmanTest` instead of `CConnman` and add the nodes to it\nso that their `fDisconnect` flag is set during disconnection.",
      "tree": {
        "sha": "d62f0a90d80cec3d9b63a80bdcabda530248260c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d62f0a90d80cec3d9b63a80bdcabda530248260c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/637bb6da368b87711005b909f451f94909400092",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/637bb6da368b87711005b909f451f94909400092",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/637bb6da368b87711005b909f451f94909400092",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/637bb6da368b87711005b909f451f94909400092/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d6e246fa46f2309e2998b542e4c104d73d29071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d6e246fa46f2309e2998b542e4c104d73d29071",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d6e246fa46f2309e2998b542e4c104d73d29071"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f556585b42f4a9ce49b1af93438da0ddb2a37e35",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/637bb6da368b87711005b909f451f94909400092/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/637bb6da368b87711005b909f451f94909400092/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=637bb6da368b87711005b909f451f94909400092",
        "patch": "@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n@@ -228,12 +228,14 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[0]);\n     nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n     peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n         LOCK(nodes[0]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n \n     nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\n@@ -242,26 +244,33 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[1]);\n     nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n     peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n         LOCK(nodes[1]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr[1])); // [1] not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr[0]));  // ... but [0] still should be\n+    // [0] is still discouraged/disconnected.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    // [1] is not discouraged/disconnected yet.\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n     peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n         LOCK(nodes[1]->cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    // Expect both [0] and [1] to be discouraged now.\n+    // Expect both [0] and [1] to be discouraged/disconnected now.\n     BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n \n     for (CNode* node : nodes) {\n         peerLogic->FinalizeNode(*node);\n-        delete node;\n     }\n+    connman->ClearNodes();\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      }
    ]
  },
  {
    "sha": "81747b21719b3fa6b0fdfc3b084c0104d64903f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTc0N2IyMTcxOWIzZmE2YjBmZGZjM2IwODRjMDEwNGQ2NDkwM2Y5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-20T10:54:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-02T16:33:45Z"
      },
      "message": "test: make sure non-IP peers get discouraged and disconnected",
      "tree": {
        "sha": "6c2bec5d768936348ef529b4acc2276d9232141b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c2bec5d768936348ef529b4acc2276d9232141b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81747b21719b3fa6b0fdfc3b084c0104d64903f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81747b21719b3fa6b0fdfc3b084c0104d64903f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81747b21719b3fa6b0fdfc3b084c0104d64903f9/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "637bb6da368b87711005b909f451f94909400092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/637bb6da368b87711005b909f451f94909400092",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/637bb6da368b87711005b909f451f94909400092"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 30,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e7cb12dbba497869ebc8dcc856849b9be5fa663d",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81747b21719b3fa6b0fdfc3b084c0104d64903f9/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81747b21719b3fa6b0fdfc3b084c0104d64903f9/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=81747b21719b3fa6b0fdfc3b084c0104d64903f9",
        "patch": "@@ -214,12 +214,18 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n-    const std::array<CAddress, 2> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n-                                       CAddress{ip(0xa0b0c002), NODE_NONE}};\n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service{tor_netaddr, Params().GetDefaultPort()};\n+\n+    const std::array<CAddress, 3> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE},\n+                                       CAddress{tor_service, NODE_NONE}};\n \n     const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n \n-    std::array<CNode*, 2> nodes;\n+    std::array<CNode*, 3> nodes;\n \n     banman->ClearBanned();\n     nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\n@@ -267,6 +273,27 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n     BOOST_CHECK(nodes[1]->fDisconnect);\n \n+    // Make sure non-IP peers are discouraged and disconnected properly.\n+\n+    nodes[2] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /* nKeyedNetGroupIn */ 1,\n+                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false};\n+    nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[2]);\n+    nodes[2]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[2]);\n+    peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n+    {\n+        LOCK(nodes[2]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[2]));\n+    }\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(banman->IsDiscouraged(addr[2]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+    BOOST_CHECK(nodes[2]->fDisconnect);\n+\n     for (CNode* node : nodes) {\n         peerLogic->FinalizeNode(*node);\n     }"
      }
    ]
  }
]