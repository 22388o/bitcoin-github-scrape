laanwj,2020-12-05 11:35:07,"Concept ACK.\nThis feels very deja-vu. Is it somehow possible to prevent these from being introduced? How did you find them?",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739239277,739239277,
MarcoFalke,2020-12-05 12:35:02,"An alternative (and shorter patch) would be to use `Assert`, whose expression is always evaluated, even if for some unexplainable reason NDEBUG is set. ",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739245250,739245250,
promag,2020-12-05 12:38:02,@MarcoFalke that's a different approach right? It would be allowed to use stuff like `Assert(--i)`.,https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739245577,739245577,
theStack,2020-12-05 13:13:05,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739249471,739249471,
practicalswift,2020-12-05 16:23:10,"> Concept ACK.\n\nThanks!\n\n> This feels very deja-vu.\n> Is it somehow possible to prevent these from being introduced? \n\nHeh, the deja-vu is understandable :)  You [asked](https://github.com/bitcoin/bitcoin/pull/9344#issuecomment-266971851) the same question (""How can we avoid these from being introduced again?"") in a gmaxwell PR with _exactly_ the same title four years ago: #9344 (""Do",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739316938,739316938,
laanwj,2020-12-10 12:44:32,"> Luckily assertion side-effects can trivially be guarded against using liniting. Let me know if we want such a linter: I'd be happy to write one if we have a consensus Concept ACK on that.\n\nMaybe—@sipa's find shows that at least a trivial linter could be easily confused.\n\n> An alternative (and shorter patch) would be to use Assert, whose expression is always evaluated, even if for some un",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-742498461,742498461,
Saibato,2020-12-13 10:18:17,"@practicalswift good catch ....\n\nGeneral Remark:\n/> When I read assert, my AI I read hazard too.\nQuestion: \n/> Morph from assert to general own Assert https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739245250 has my sympathy too. \n/> why do we here and in some other places **const** ...  and not like in Assert  i.e. auto&& check; assert(...  & check); ....\n/> **const** is ",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-743983757,743983757,
practicalswift,2020-12-13 20:42:20,"@Saibato \n\nIs the question why `const bool foo = bar(…)` (with `const`) is used instead of `bool foo = bar(…)` (without `const`)?\n\nI try to make objects immutable by default. \n\nRationale from C++ Core Guidelines' [""Con.1: By default, make objects immutable""](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#con1-by-default-make-objects-immutable): ""Immutable objects are easi",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-744065584,744065584,
Saibato,2020-12-14 07:33:48,"@practicalswift \n> Is the question why `const bool foo = bar(…)` (with `const`) is used instead of `bool foo = bar(…)` (without `const`)?\n\nYup, that was the question, thx for the reasoning for that.\n\nAnd in every other case other  that assert, I would say perfect and sufficient and best good practice but in case of assert we check almost always for things that are volatile var and critic",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-744237351,744237351,
practicalswift,2020-12-15 12:54:09,"@Saibato \n\n> And in every other case other that assert, I would say perfect and sufficient and best good practice but in case of assert we check almost always for things that are volatile var and critical and my point is if we put them even temp by promise const and expose those critical statements about what we expect to interpreted other as in the following lines we like to protect ( const m",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745269201,745269201,
Saibato,2020-12-15 17:19:34,"@practicalswift \n> Is the concern that this change would give permission to the compiler to optimise away the assertions?\n\nI hope not and also that no compiler does that ever in a way  i,e hey const bla = blabla(blablabla) , why update more than once, always true or false at first run and then save processor time? ,\nI was wary more that those values land in special regs or in general treat",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745438282,745438282,
practicalswift,2020-12-15 17:33:54,Two ACKs (laanwj & theStack) and one stale ACK (promag): getting ready for merge? :),https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745446866,745446866,
sipa,2020-12-15 17:47:21,"@Saibato The C and C++ languages specify exactly what kind of optimizations the compiler is allowed to make, and with a very small set of exceptions, that is the ""as if"" rule: optimizations may not change observable behavior: https://en.cppreference.com/w/cpp/language/as_if . Making an object const may enable optimizations (though only very rarely), but the effect can never be observable (and an a",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745455521,745455521,
sipa,2020-12-15 17:48:39,utACK 5021810650afc3073c2af6953ff046ad4d27a1fc,https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745456414,745456414,
Saibato,2020-12-16 07:40:12,"@practicalswift @sipa thx for addressing my remarks I rest this now,assuming the overall consensus is that https://github.com/bitcoin/bitcoin/commit/5021810650afc3073c2af6953ff046ad4d27a1fc  is well defined save behavior,",https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745842499,745842499,
sipa,2020-12-06 00:41:52,Pretty sure this doesn't have side effects. Why does your tool think otherwise?,https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536922900,536922900,src/validation.cpp
practicalswift,2020-12-06 00:49:24,You're right. Dropping this one and marking `CanFlushToDisk` const.,https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536923887,536923887,src/validation.cpp
sipa,2020-12-06 00:50:46,The function could be made const. Perhaps `cppcheck` then doesn't see this as potentially side-effect having?,https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536924077,536924077,src/validation.cpp
