[
  {
    "sha": "d5863c0b3e20d56acf7246008b7832efde68ab21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTg2M2MwYjNlMjBkNTZhY2Y3MjQ2MDA4Yjc4MzJlZmRlNjhhYjIx",
    "commit": {
      "author": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2020-07-12T19:52:02Z"
      },
      "committer": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2020-09-27T00:57:26Z"
      },
      "message": "[send] Make send RPCs return fee reason",
      "tree": {
        "sha": "899055a8ef8fd8a49a6a86f410144cbf8639a65f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/899055a8ef8fd8a49a6a86f410144cbf8639a65f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5863c0b3e20d56acf7246008b7832efde68ab21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5863c0b3e20d56acf7246008b7832efde68ab21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5863c0b3e20d56acf7246008b7832efde68ab21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5863c0b3e20d56acf7246008b7832efde68ab21/comments",
    "author": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b313cacc99a1b372238f9036abed5491f9d28f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b313cacc99a1b372238f9036abed5491f9d28f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b313cacc99a1b372238f9036abed5491f9d28f7"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 60,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f68016b557368d6025739555c41b8c820e03b064",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -231,8 +231,9 @@ class WalletImpl : public Wallet\n     {\n         LOCK(m_wallet->cs_wallet);\n         CTransactionRef tx;\n+        FeeCalculation fee_calc_out;\n         if (!m_wallet->CreateTransaction(recipients, tx, fee, change_pos,\n-                fail_reason, coin_control, sign)) {\n+                fail_reason, coin_control, fee_calc_out, sign)) {\n             return {};\n         }\n         return tx;"
      },
      {
        "sha": "88c8ebe1f62d58a017b5f5316e0b3348ea684b88",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -41,6 +41,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendtoaddress\", 5 , \"replaceable\" },\n     { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"sendtoaddress\", 8, \"avoid_reuse\" },\n+    { \"sendtoaddress\", 9, \"verbose\"},\n     { \"settxfee\", 0, \"amount\" },\n     { \"sethdseed\", 0, \"newkeypool\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n@@ -72,6 +73,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n+    { \"sendmany\", 8, \"verbose\" },\n     { \"deriveaddresses\", 1, \"range\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },"
      },
      {
        "sha": "6cbad14de85fe0a380d805e469dfe6552b802fc8",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -219,7 +219,8 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     CAmount fee_ret;\n     int change_pos_in_out = -1; // No requested location for change\n     bilingual_str fail_reason;\n-    if (!wallet.CreateTransaction(recipients, tx_new, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n+    FeeCalculation fee_calc_out;\n+    if (!wallet.CreateTransaction(recipients, tx_new, fee_ret, change_pos_in_out, fail_reason, new_coin_control, fee_calc_out, false)) {\n         errors.push_back(Untranslated(\"Unable to create transaction.\") + Untranslated(\" \") + fail_reason);\n         return Result::WALLET_ERROR;\n     }"
      },
      {
        "sha": "45616431fb873c2b937c98be99f7679dcc1aa8be",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 12,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -397,7 +397,7 @@ void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_f\n     }\n }\n \n-UniValue SendMoney(CWallet* const pwallet, const CCoinControl &coin_control, std::vector<CRecipient> &recipients, mapValue_t map_value)\n+UniValue SendMoney(CWallet* const pwallet, const CCoinControl &coin_control, std::vector<CRecipient> &recipients, mapValue_t map_value, bool verbose)\n {\n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -409,11 +409,18 @@ UniValue SendMoney(CWallet* const pwallet, const CCoinControl &coin_control, std\n     int nChangePosRet = -1;\n     bilingual_str error;\n     CTransactionRef tx;\n-    bool fCreated = pwallet->CreateTransaction(recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    FeeCalculation fee_calc_out;\n+    bool fCreated = pwallet->CreateTransaction(recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, fee_calc_out, !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     if (!fCreated) {\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n     }\n     pwallet->CommitTransaction(tx, std::move(map_value), {} /* orderForm */);\n+    if (verbose) {\n+        UniValue entry(UniValue::VOBJ);\n+        entry.pushKV(\"txid\", tx->GetHash().GetHex());\n+        entry.pushKV(\"fee_reason\", StringForFeeReason(fee_calc_out.reason));\n+        return entry;\n+    }\n     return tx->GetHash().GetHex();\n }\n \n@@ -438,9 +445,19 @@ static RPCHelpMan sendtoaddress()\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n             \"                             dirty if they have previously been used in a transaction.\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra information about the transaction.\"},\n                 },\n-                RPCResult{\n-                    RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n+                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"\n+                    },\n+                    RPCResult{\"if verbose is set to true\",\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n+                            {RPCResult::Type::STR, \"fee reason\", \"The transaction fee reason.\"}\n+                        },\n+                    },\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\")\n@@ -497,8 +514,9 @@ static RPCHelpMan sendtoaddress()\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(address_amounts, subtractFeeFromAmount, recipients);\n+    bool verbose = request.params[9].isNull() ? false: request.params[9].get_bool();\n \n-    return SendMoney(pwallet, coin_control, recipients, mapValue);\n+    return SendMoney(pwallet, coin_control, recipients, mapValue, verbose);\n },\n     };\n }\n@@ -853,11 +871,22 @@ static RPCHelpMan sendmany()\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra infomration about the transaction.\"},\n+                },\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n+                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only  1 transaction is created regardless of\\n\"\n+                \"the number of addresses.\"\n+                    },\n+                    RPCResult{\"if verbose is set to true\",\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n+                \"the number of addresses.\"},\n+                            {RPCResult::Type::STR, \"fee reason\", \"The transaction fee reason.\"}\n+                        },\n+                    },\n                 },\n-                 RPCResult{\n-                     RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n-            \"the number of addresses.\"\n-                 },\n                 RPCExamples{\n             \"\\nSend two amounts to two different addresses:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\":0.01,\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\":0.02}\\\"\") +\n@@ -902,12 +931,14 @@ static RPCHelpMan sendmany()\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n+    bool verbose = request.params[8].isNull() ? false : request.params[8].get_bool();\n \n-    return SendMoney(pwallet, coin_control, recipients, std::move(mapValue));\n+    return SendMoney(pwallet, coin_control, recipients, std::move(mapValue), verbose);\n },\n     };\n }\n \n+\n static RPCHelpMan addmultisigaddress()\n {\n     return RPCHelpMan{\"addmultisigaddress\",\n@@ -4501,8 +4532,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n     { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"options\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"verbose\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\",\"verbose\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n     { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },"
      },
      {
        "sha": "c42114c3947df8bd51404c79e4ac1180bf43ae2a",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -524,8 +524,9 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         int changePos = -1;\n         bilingual_str error;\n         CCoinControl dummy;\n+        FeeCalculation fee_calc_out;\n         {\n-            BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, fee, changePos, error, dummy));\n+            BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, fee, changePos, error, dummy, fee_calc_out));\n         }\n         wallet->CommitTransaction(tx, {}, {});\n         CMutableTransaction blocktx;"
      },
      {
        "sha": "d97ec019a8d78ee79e753d3fc746484631582463",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -2631,7 +2631,8 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     LOCK(cs_wallet);\n \n     CTransactionRef tx_new;\n-    if (!CreateTransaction(vecSend, tx_new, nFeeRet, nChangePosInOut, error, coinControl, false)) {\n+    FeeCalculation fee_calc_out;\n+    if (!CreateTransaction(vecSend, tx_new, nFeeRet, nChangePosInOut, error, coinControl, fee_calc_out, false)) {\n         return false;\n     }\n \n@@ -2755,6 +2756,7 @@ bool CWallet::CreateTransactionInternal(\n         int& nChangePosInOut,\n         bilingual_str& error,\n         const CCoinControl& coin_control,\n+        FeeCalculation& fee_calc_out,\n         bool sign)\n {\n     CAmount nValue = 0;\n@@ -3098,6 +3100,7 @@ bool CWallet::CreateTransactionInternal(\n     // Before we return success, we assume any change key will be used to prevent\n     // accidental re-use.\n     reservedest.KeepDestination();\n+    fee_calc_out = feeCalc;\n \n     WalletLogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n               nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n@@ -3117,19 +3120,20 @@ bool CWallet::CreateTransaction(\n         int& nChangePosInOut,\n         bilingual_str& error,\n         const CCoinControl& coin_control,\n+        FeeCalculation& fee_calc_out,\n         bool sign)\n {\n     int nChangePosIn = nChangePosInOut;\n     CTransactionRef tx2 = tx;\n-    bool res = CreateTransactionInternal(vecSend, tx, nFeeRet, nChangePosInOut, error, coin_control, sign);\n+    bool res = CreateTransactionInternal(vecSend, tx, nFeeRet, nChangePosInOut, error, coin_control, fee_calc_out, sign);\n     // try with avoidpartialspends unless it's enabled already\n     if (res && nFeeRet > 0 /* 0 means non-functional fee rate estimation */ && m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n         CCoinControl tmp_cc = coin_control;\n         tmp_cc.m_avoid_partial_spends = true;\n         CAmount nFeeRet2;\n         int nChangePosInOut2 = nChangePosIn;\n         bilingual_str error2; // fired and forgotten; if an error occurs, we discard the results\n-        if (CreateTransactionInternal(vecSend, tx2, nFeeRet2, nChangePosInOut2, error2, tmp_cc, sign)) {\n+        if (CreateTransactionInternal(vecSend, tx2, nFeeRet2, nChangePosInOut2, error2, tmp_cc, fee_calc_out, sign)) {\n             // if fee of this alternative one is within the range of the max fee, we use this one\n             const bool use_aps = nFeeRet2 <= nFeeRet + m_max_aps_fee;\n             WalletLogPrintf(\"Fee non-grouped = %lld, grouped = %lld, using %s\\n\", nFeeRet, nFeeRet2, use_aps ? \"grouped\" : \"non-grouped\");"
      },
      {
        "sha": "3a1f0876033f02c0528b23246cfa7a4dee37add9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -723,7 +723,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     // ScriptPubKeyMan::GetID. In many cases it will be the hash of an internal structure\n     std::map<uint256, std::unique_ptr<ScriptPubKeyMan>> m_spk_managers;\n \n-    bool CreateTransactionInternal(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, bool sign);\n+    bool CreateTransactionInternal(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, FeeCalculation& fee_calc_out, bool sign);\n \n public:\n     /*\n@@ -974,7 +974,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, bool sign = true);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, FeeCalculation& fee_calc_out, bool sign = true);\n     /**\n      * Submit the transaction to the node's mempool and then relay to peers.\n      * Should be called after CreateTransaction unless you want to abort"
      },
      {
        "sha": "4f1cadc835d3b0ed3c66359955e0a86643f7369c",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5863c0b3e20d56acf7246008b7832efde68ab21/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5863c0b3e20d56acf7246008b7832efde68ab21/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=d5863c0b3e20d56acf7246008b7832efde68ab21",
        "patch": "@@ -661,6 +661,5 @@ def run_test(self):\n         assert_array_result(tx[\"details\"], {\"category\": \"receive\"}, expected_receive_vout)\n         assert_equal(tx[verbose_field], self.nodes[0].decoderawtransaction(tx[\"hex\"]))\n \n-\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "69cf5d4eeb73f7d685e915fc17af64634d88a4a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWNmNWQ0ZWViNzNmN2Q2ODVlOTE1ZmMxN2FmNjQ2MzRkODhhNGEy",
    "commit": {
      "author": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2020-09-27T00:58:56Z"
      },
      "committer": {
        "name": "Sishir Giri",
        "email": "sishirg27@gmail.com",
        "date": "2020-09-28T22:04:56Z"
      },
      "message": "[test] Make sure send rpc returns fee reason",
      "tree": {
        "sha": "bf3a3b9808e09ac2a66ab814d819a45f416b0a14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf3a3b9808e09ac2a66ab814d819a45f416b0a14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69cf5d4eeb73f7d685e915fc17af64634d88a4a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69cf5d4eeb73f7d685e915fc17af64634d88a4a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69cf5d4eeb73f7d685e915fc17af64634d88a4a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69cf5d4eeb73f7d685e915fc17af64634d88a4a2/comments",
    "author": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "stackman27",
      "id": 26356227,
      "node_id": "MDQ6VXNlcjI2MzU2MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stackman27",
      "html_url": "https://github.com/stackman27",
      "followers_url": "https://api.github.com/users/stackman27/followers",
      "following_url": "https://api.github.com/users/stackman27/following{/other_user}",
      "gists_url": "https://api.github.com/users/stackman27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
      "organizations_url": "https://api.github.com/users/stackman27/orgs",
      "repos_url": "https://api.github.com/users/stackman27/repos",
      "events_url": "https://api.github.com/users/stackman27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stackman27/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5863c0b3e20d56acf7246008b7832efde68ab21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5863c0b3e20d56acf7246008b7832efde68ab21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5863c0b3e20d56acf7246008b7832efde68ab21"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "68498fdbf8bf727a5626c8526132b222a34cf1b7",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69cf5d4eeb73f7d685e915fc17af64634d88a4a2/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69cf5d4eeb73f7d685e915fc17af64634d88a4a2/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=69cf5d4eeb73f7d685e915fc17af64634d88a4a2",
        "patch": "@@ -661,5 +661,17 @@ def run_test(self):\n         assert_array_result(tx[\"details\"], {\"category\": \"receive\"}, expected_receive_vout)\n         assert_equal(tx[verbose_field], self.nodes[0].decoderawtransaction(tx[\"hex\"]))\n \n+        self.log.info(\"Test send* RPCs with verbose=True\")\n+        address = self.nodes[0].getnewaddress(\"test\")\n+        txid_feeReason_one = self.nodes[2].sendtoaddress(address = address, amount = 5, verbose = True)\n+        assert_equal(txid_feeReason_one[\"fee_reason\"], \"Fallback fee\")\n+        txid_feeReason_two = self.nodes[2].sendmany(dummy = '', amounts = {address: 5}, verbose = True)\n+        assert_equal(txid_feeReason_two[\"fee_reason\"], \"Fallback fee\")\n+        self.log.info(\"Test send* RPCs with verbose=False\")\n+        txid_feeReason_three = self.nodes[2].sendtoaddress(address = address, amount = 5, verbose = False)\n+        assert_equal(self.nodes[2].gettransaction(txid_feeReason_three)['txid'], txid_feeReason_three)\n+        txid_feeReason_four = self.nodes[2].sendmany(dummy = '', amounts = {address: 5}, verbose = False)\n+        assert_equal(self.nodes[2].gettransaction(txid_feeReason_four)['txid'], txid_feeReason_four)\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  }
]