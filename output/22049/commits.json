[
  {
    "sha": "6086c58d27146d500b7ff8de89a5279a6f88457d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDg2YzU4ZDI3MTQ2ZDUwMGI3ZmY4ZGU4OWE1Mjc5YTZmODg0NTdk",
    "commit": {
      "author": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T13:22:10Z"
      },
      "committer": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T17:52:46Z"
      },
      "message": "rpc: allow specifying min chain depth for inputs in fund calls\n\nEnables users to craft BIP-125 replacements with changes to the output\nlist, ensuring that if additional funds are needed they will be added.",
      "tree": {
        "sha": "7042ea04756fec8180ae74a3cd6a25d0f36a14ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7042ea04756fec8180ae74a3cd6a25d0f36a14ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6086c58d27146d500b7ff8de89a5279a6f88457d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6086c58d27146d500b7ff8de89a5279a6f88457d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6086c58d27146d500b7ff8de89a5279a6f88457d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6086c58d27146d500b7ff8de89a5279a6f88457d/comments",
    "author": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "296841794864992e908dbda36d2ca9d86c037a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/296841794864992e908dbda36d2ca9d86c037a11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/296841794864992e908dbda36d2ca9d86c037a11"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 110,
      "deletions": 0
    },
    "files": [
      {
        "sha": "50779934079b4f9e136b0035d453216446539c5f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6086c58d27146d500b7ff8de89a5279a6f88457d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6086c58d27146d500b7ff8de89a5279a6f88457d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6086c58d27146d500b7ff8de89a5279a6f88457d",
        "patch": "@@ -3098,6 +3098,7 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+                {\"inputs_min_depth\", UniValueType(UniValue::VNUM)},\n             },\n             true, true);\n \n@@ -3162,6 +3163,14 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n+\n+        if (options.exists(\"inputs_min_depth\")) {\n+            if (options[\"inputs_min_depth\"].get_int() < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative inputs_min_depth\");\n+            }\n+\n+            coinControl.m_min_depth = options[\"inputs_min_depth\"].get_int();\n+        }\n         SetFeeEstimateMode(wallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n       }\n     } else {\n@@ -3215,6 +3224,7 @@ static RPCHelpMan fundrawtransaction()\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n+                            {\"inputs_min_depth\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this chain depth.\"},\n                             {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -4043,6 +4053,7 @@ static RPCHelpMan send()\n                     {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n+                    {\"inputs_min_depth\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this chain depth.\"},\n                     {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n                     {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n@@ -4389,6 +4400,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n+                            {\"inputs_min_depth\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this chain depth.\"},\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},"
      },
      {
        "sha": "d2c97095d75fff7ef2255c091c9c2164921899d5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6086c58d27146d500b7ff8de89a5279a6f88457d/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6086c58d27146d500b7ff8de89a5279a6f88457d/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=6086c58d27146d500b7ff8de89a5279a6f88457d",
        "patch": "@@ -99,6 +99,7 @@ def run_test(self):\n         self.test_subtract_fee_with_presets()\n         self.test_transaction_too_large()\n         self.test_include_unsafe()\n+        self.test_inputs_min_chain_depth()\n \n     def test_change_position(self):\n         \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n@@ -969,6 +970,53 @@ def test_include_unsafe(self):\n         signedtx = wallet.signrawtransactionwithwallet(fundedtx['hex'])\n         wallet.sendrawtransaction(signedtx['hex'])\n \n+    def test_inputs_min_chain_depth(self):\n+        unconfirmedAddress = self.nodes[0].getnewaddress()\n+        targetAddress = self.nodes[2].getnewaddress()\n+        unconfirmedTxid = self.nodes[0].sendtoaddress(unconfirmedAddress, 1)\n+\n+        utxo1 = self.nodes[0].listunspent(0, 1, [unconfirmedAddress])[0]\n+        assert unconfirmedTxid == utxo1['txid']\n+\n+        self.log.info(\"Crafting PSBT using an unconfirmed input\")\n+        raw_tx1 = self.nodes[0].createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, True)\n+        funded_tx1 = self.nodes[0].fundrawtransaction(raw_tx1, {'fee_rate': 1})['hex']\n+\n+        # Make sure we only had the one input\n+        assert_equal(len(self.nodes[0].decoderawtransaction(funded_tx1)['vin']), 1)\n+\n+        final_tx1 = self.nodes[0].signrawtransactionwithwallet(funded_tx1)['hex']\n+        txid1 = self.nodes[0].sendrawtransaction(final_tx1)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert txid1 in mempool\n+\n+        self.log.info(\"Fail to craft a new PSBT that sends more funds with add_inputs = False\")\n+        raw_tx2 = self.nodes[0].createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].fundrawtransaction, raw_tx2, {'fee_rate': 1, 'add_inputs': False})\n+\n+        highest_confs = 0\n+        for utxo in self.nodes[0].listunspent():\n+            highest_confs = max(highest_confs, utxo['confirmations'])\n+\n+        self.log.info(\"Fail to craft a new PSBT with min depth above highest one\")\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].fundrawtransaction, raw_tx2, {'add_inputs': True, 'inputs_min_depth': highest_confs + 1, 'fee_rate': 10})\n+\n+        self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n+        funded_tx2 = self.nodes[0].fundrawtransaction(raw_tx2, {'add_inputs': True, 'inputs_min_depth': highest_confs, 'fee_rate': 10})['hex']\n+        tx2_inputs = self.nodes[0].decoderawtransaction(funded_tx2)['vin']\n+        assert_greater_than_or_equal(len(tx2_inputs), 2)\n+        for vin in tx2_inputs:\n+            if vin['txid'] != unconfirmedTxid:\n+                assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], highest_confs)\n+\n+        final_tx2 = self.nodes[0].signrawtransactionwithwallet(funded_tx2)['hex']\n+        txid2 = self.nodes[0].sendrawtransaction(final_tx2)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert txid1 not in mempool\n+        assert txid2 in mempool\n+\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "6f15708cdcfa3b4933a4f8d274e134be6237b9bb",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6086c58d27146d500b7ff8de89a5279a6f88457d/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6086c58d27146d500b7ff8de89a5279a6f88457d/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=6086c58d27146d500b7ff8de89a5279a6f88457d",
        "patch": "@@ -13,6 +13,7 @@\n     assert_approx,\n     assert_equal,\n     assert_greater_than,\n+    assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n     find_output,\n )\n@@ -82,6 +83,53 @@ def test_utxo_conversion(self):\n         self.connect_nodes(0, 1)\n         self.connect_nodes(0, 2)\n \n+    def test_inputs_min_chain_depth(self):\n+        unconfirmedAddress = self.nodes[0].getnewaddress()\n+        targetAddress = self.nodes[2].getnewaddress()\n+        unconfirmedTxid = self.nodes[0].sendtoaddress(unconfirmedAddress, 1)\n+\n+        utxo1 = self.nodes[0].listunspent(0, 1, [unconfirmedAddress])[0]\n+        assert unconfirmedTxid == utxo1['txid']\n+\n+        self.log.info(\"Crafting PSBT using an unconfirmed input\")\n+        psbtx1 = self.nodes[0].walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, {'fee_rate': 1})['psbt']\n+\n+        # Make sure we only had the one input\n+        assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['tx']['vin']), 1)\n+\n+        signed_tx1 = self.nodes[0].walletprocesspsbt(psbtx1)['psbt']\n+        final_tx1 = self.nodes[0].finalizepsbt(signed_tx1)['hex']\n+        txid1 = self.nodes[0].sendrawtransaction(final_tx1)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert txid1 in mempool\n+\n+        self.log.info(\"Fail to craft a new PSBT that sends more funds with add_inputs = False\")\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': False})\n+\n+        highest_confs = 0\n+        for utxo in self.nodes[0].listunspent():\n+            highest_confs = max(highest_confs, utxo['confirmations'])\n+\n+        self.log.info(\"Fail to craft a new PSBT with min depth above highest one\")\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': highest_confs + 1, 'fee_rate': 10})\n+\n+        self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n+        psbtx2 = self.nodes[0].walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': highest_confs, 'fee_rate': 10})['psbt']\n+        tx2_inputs = self.nodes[0].decodepsbt(psbtx2)['tx']['vin']\n+        assert_greater_than_or_equal(len(tx2_inputs), 2)\n+        for vin in tx2_inputs:\n+            if vin['txid'] != unconfirmedTxid:\n+                assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], highest_confs)\n+\n+        signed_tx2 = self.nodes[0].walletprocesspsbt(psbtx2)['psbt']\n+        final_tx2 = self.nodes[0].finalizepsbt(signed_tx2)['hex']\n+        txid2 = self.nodes[0].sendrawtransaction(final_tx2)\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert txid1 not in mempool\n+        assert txid2 in mempool\n+\n     def assert_change_type(self, psbtx, expected_type):\n         \"\"\"Assert that the given PSBT has a change output with the given type.\"\"\"\n \n@@ -598,5 +646,7 @@ def test_psbt_input_keys(psbt_input, keys):\n \n         assert_raises_rpc_error(-25, 'Inputs missing or spent', self.nodes[0].walletprocesspsbt, 'cHNidP8BAJoCAAAAAkvEW8NnDtdNtDpsmze+Ht2LH35IJcKv00jKAlUs21RrAwAAAAD/////S8Rbw2cO1020OmybN74e3Ysffkglwq/TSMoCVSzbVGsBAAAAAP7///8CwLYClQAAAAAWABSNJKzjaUb3uOxixsvh1GGE3fW7zQD5ApUAAAAAFgAUKNw0x8HRctAgmvoevm4u1SbN7XIAAAAAAAEAnQIAAAACczMa321tVHuN4GKWKRncycI22aX3uXgwSFUKM2orjRsBAAAAAP7///9zMxrfbW1Ue43gYpYpGdzJwjbZpfe5eDBIVQozaiuNGwAAAAAA/v///wIA+QKVAAAAABl2qRT9zXUVA8Ls5iVqynLHe5/vSe1XyYisQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAAAAAQEfQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAA==')\n \n+        self.test_inputs_min_chain_depth()\n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWMwYTNhZjkzZmNjYjlhNTE4NGFiM2I0YzVkMmUxZjk5YjJkZWI0",
    "commit": {
      "author": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T20:45:51Z"
      },
      "committer": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T20:45:51Z"
      },
      "message": "test: fix inputs_min_depth test cases after rebase",
      "tree": {
        "sha": "1080ed26b05306e15819ffcc40caede5e302fb76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1080ed26b05306e15819ffcc40caede5e302fb76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4/comments",
    "author": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6086c58d27146d500b7ff8de89a5279a6f88457d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6086c58d27146d500b7ff8de89a5279a6f88457d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6086c58d27146d500b7ff8de89a5279a6f88457d"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 58,
      "deletions": 37
    },
    "files": [
      {
        "sha": "20491fd6eec4b591d701c0db970f7da1bef59832",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 30,
        "deletions": 20,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
        "patch": "@@ -971,52 +971,62 @@ def test_include_unsafe(self):\n         wallet.sendrawtransaction(signedtx['hex'])\n \n     def test_inputs_min_chain_depth(self):\n-        unconfirmedAddress = self.nodes[0].getnewaddress()\n-        targetAddress = self.nodes[2].getnewaddress()\n-        unconfirmedTxid = self.nodes[0].sendtoaddress(unconfirmedAddress, 1)\n+        self.nodes[0].createwallet(\"inputs_min_chain_depth\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"inputs_min_chain_depth\")\n+\n+        # Fund the wallet with different chain heights\n+        self.nodes[2].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[2].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[2].generate(1)\n+        self.nodes[2].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[2].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[2].generate(1)\n \n-        utxo1 = self.nodes[0].listunspent(0, 1, [unconfirmedAddress])[0]\n+        self.sync_blocks()\n+\n+        unconfirmedAddress = wallet.getnewaddress()\n+        unconfirmedTxid = wallet.sendtoaddress(unconfirmedAddress, 1)\n+\n+        utxo1 = wallet.listunspent(0, 1, [unconfirmedAddress])[0]\n         assert unconfirmedTxid == utxo1['txid']\n \n-        self.log.info(\"Crafting PSBT using an unconfirmed input\")\n-        raw_tx1 = self.nodes[0].createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, True)\n-        funded_tx1 = self.nodes[0].fundrawtransaction(raw_tx1, {'fee_rate': 1})['hex']\n+        self.log.info(\"Crafting TX using an unconfirmed input\")\n+        targetAddress = self.nodes[2].getnewaddress()\n+        raw_tx1 = wallet.createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, True)\n+        funded_tx1 = wallet.fundrawtransaction(raw_tx1, {'fee_rate': 1})['hex']\n \n         # Make sure we only had the one input\n         assert_equal(len(self.nodes[0].decoderawtransaction(funded_tx1)['vin']), 1)\n \n-        final_tx1 = self.nodes[0].signrawtransactionwithwallet(funded_tx1)['hex']\n+        final_tx1 = wallet.signrawtransactionwithwallet(funded_tx1)['hex']\n         txid1 = self.nodes[0].sendrawtransaction(final_tx1)\n \n         mempool = self.nodes[0].getrawmempool()\n         assert txid1 in mempool\n \n-        self.log.info(\"Fail to craft a new PSBT that sends more funds with add_inputs = False\")\n-        raw_tx2 = self.nodes[0].createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1})\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].fundrawtransaction, raw_tx2, {'fee_rate': 1, 'add_inputs': False})\n-\n-        highest_confs = 0\n-        for utxo in self.nodes[0].listunspent():\n-            highest_confs = max(highest_confs, utxo['confirmations'])\n+        self.log.info(\"Fail to craft a new TX that sends more funds with add_inputs = False\")\n+        raw_tx2 = wallet.createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'fee_rate': 1, 'add_inputs': False})\n \n-        self.log.info(\"Fail to craft a new PSBT with min depth above highest one\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].fundrawtransaction, raw_tx2, {'add_inputs': True, 'inputs_min_depth': highest_confs + 1, 'fee_rate': 10})\n+        self.log.info(\"Fail to craft a new TX with min depth above highest one\")\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'add_inputs': True, 'inputs_min_depth': 3, 'fee_rate': 10})\n \n         self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n-        funded_tx2 = self.nodes[0].fundrawtransaction(raw_tx2, {'add_inputs': True, 'inputs_min_depth': highest_confs, 'fee_rate': 10})['hex']\n+        funded_tx2 = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'inputs_min_depth': 2, 'fee_rate': 10})['hex']\n         tx2_inputs = self.nodes[0].decoderawtransaction(funded_tx2)['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:\n             if vin['txid'] != unconfirmedTxid:\n-                assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], highest_confs)\n+                assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], 2)\n \n-        final_tx2 = self.nodes[0].signrawtransactionwithwallet(funded_tx2)['hex']\n+        final_tx2 = wallet.signrawtransactionwithwallet(funded_tx2)['hex']\n         txid2 = self.nodes[0].sendrawtransaction(final_tx2)\n \n         mempool = self.nodes[0].getrawmempool()\n         assert txid1 not in mempool\n         assert txid2 in mempool\n \n+        wallet.unloadwallet()\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "355245e5560a05ee0cdae420de07423e285fa55d",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 28,
        "deletions": 17,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
        "patch": "@@ -84,52 +84,63 @@ def test_utxo_conversion(self):\n         self.connect_nodes(0, 2)\n \n     def test_inputs_min_chain_depth(self):\n-        unconfirmedAddress = self.nodes[0].getnewaddress()\n-        targetAddress = self.nodes[2].getnewaddress()\n-        unconfirmedTxid = self.nodes[0].sendtoaddress(unconfirmedAddress, 1)\n+        self.nodes[0].createwallet(\"inputs_min_chain_depth\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"inputs_min_chain_depth\")\n \n-        utxo1 = self.nodes[0].listunspent(0, 1, [unconfirmedAddress])[0]\n+        # Fund the wallet with different chain heights\n+        self.nodes[1].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[1].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[1].generate(1)\n+        self.nodes[1].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[1].sendtoaddress(wallet.getnewaddress(), 1)\n+        self.nodes[1].generate(1)\n+\n+        self.sync_blocks()\n+\n+        unconfirmedAddress = wallet.getnewaddress()\n+        targetAddress = self.nodes[1].getnewaddress()\n+        unconfirmedTxid = wallet.sendtoaddress(unconfirmedAddress, 1)\n+\n+        utxo1 = wallet.listunspent(0, 1, [unconfirmedAddress])[0]\n         assert unconfirmedTxid == utxo1['txid']\n \n         self.log.info(\"Crafting PSBT using an unconfirmed input\")\n-        psbtx1 = self.nodes[0].walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, {'fee_rate': 1})['psbt']\n+        psbtx1 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, {'fee_rate': 1})['psbt']\n \n         # Make sure we only had the one input\n         assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['tx']['vin']), 1)\n \n-        signed_tx1 = self.nodes[0].walletprocesspsbt(psbtx1)['psbt']\n-        final_tx1 = self.nodes[0].finalizepsbt(signed_tx1)['hex']\n+        signed_tx1 = wallet.walletprocesspsbt(psbtx1)['psbt']\n+        final_tx1 = wallet.finalizepsbt(signed_tx1)['hex']\n         txid1 = self.nodes[0].sendrawtransaction(final_tx1)\n \n         mempool = self.nodes[0].getrawmempool()\n         assert txid1 in mempool\n \n         self.log.info(\"Fail to craft a new PSBT that sends more funds with add_inputs = False\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': False})\n-\n-        highest_confs = 0\n-        for utxo in self.nodes[0].listunspent():\n-            highest_confs = max(highest_confs, utxo['confirmations'])\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': False})\n \n         self.log.info(\"Fail to craft a new PSBT with min depth above highest one\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': highest_confs + 1, 'fee_rate': 10})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': 3, 'fee_rate': 10})\n \n         self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n-        psbtx2 = self.nodes[0].walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': highest_confs, 'fee_rate': 10})['psbt']\n+        psbtx2 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': 2, 'fee_rate': 10})['psbt']\n         tx2_inputs = self.nodes[0].decodepsbt(psbtx2)['tx']['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:\n             if vin['txid'] != unconfirmedTxid:\n-                assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], highest_confs)\n+                assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], 2)\n \n-        signed_tx2 = self.nodes[0].walletprocesspsbt(psbtx2)['psbt']\n-        final_tx2 = self.nodes[0].finalizepsbt(signed_tx2)['hex']\n+        signed_tx2 = wallet.walletprocesspsbt(psbtx2)['psbt']\n+        final_tx2 = wallet.finalizepsbt(signed_tx2)['hex']\n         txid2 = self.nodes[0].sendrawtransaction(final_tx2)\n \n         mempool = self.nodes[0].getrawmempool()\n         assert txid1 not in mempool\n         assert txid2 in mempool\n \n+        wallet.unloadwallet()\n+\n     def assert_change_type(self, psbtx, expected_type):\n         \"\"\"Assert that the given PSBT has a change output with the given type.\"\"\"\n "
      }
    ]
  },
  {
    "sha": "87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzM3MWJmMTE5NWFiOGM5NjE3ZDViMjVhMzE4MmVkNTViNWY2OWYw",
    "commit": {
      "author": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T20:58:52Z"
      },
      "committer": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T20:58:52Z"
      },
      "message": "rpc: rename inputs_min_depth to minconfs for consistency with listunspent",
      "tree": {
        "sha": "610cce6f832be916c0bfe0e1a566881dc0b1f5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/610cce6f832be916c0bfe0e1a566881dc0b1f5af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87371bf1195ab8c9617d5b25a3182ed55b5f69f0/comments",
    "author": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91c0a3af93fccb9a5184ab3b4c5d2e1f99b2deb4"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "dd9240dc3861da8a5a14c4c9bcc1af7c37ae568f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87371bf1195ab8c9617d5b25a3182ed55b5f69f0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87371bf1195ab8c9617d5b25a3182ed55b5f69f0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
        "patch": "@@ -3098,7 +3098,7 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n-                {\"inputs_min_depth\", UniValueType(UniValue::VNUM)},\n+                {\"minconfs\", UniValueType(UniValue::VNUM)},\n             },\n             true, true);\n \n@@ -3164,12 +3164,12 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n \n-        if (options.exists(\"inputs_min_depth\")) {\n-            if (options[\"inputs_min_depth\"].get_int() < 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative inputs_min_depth\");\n+        if (options.exists(\"minconfs\")) {\n+            if (options[\"minconfs\"].get_int() < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconfs\");\n             }\n \n-            coinControl.m_min_depth = options[\"inputs_min_depth\"].get_int();\n+            coinControl.m_min_depth = options[\"minconfs\"].get_int();\n         }\n         SetFeeEstimateMode(wallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n       }\n@@ -3224,7 +3224,7 @@ static RPCHelpMan fundrawtransaction()\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                            {\"inputs_min_depth\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this chain depth.\"},\n+                            {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n                             {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -4053,7 +4053,7 @@ static RPCHelpMan send()\n                     {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                    {\"inputs_min_depth\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this chain depth.\"},\n+                    {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n                     {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n                     {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n@@ -4400,7 +4400,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                            {\"inputs_min_depth\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this chain depth.\"},\n+                            {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},"
      },
      {
        "sha": "af29f6d5245cfe6ede71ec4c2ec25366ebaa04b4",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87371bf1195ab8c9617d5b25a3182ed55b5f69f0/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87371bf1195ab8c9617d5b25a3182ed55b5f69f0/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
        "patch": "@@ -99,7 +99,7 @@ def run_test(self):\n         self.test_subtract_fee_with_presets()\n         self.test_transaction_too_large()\n         self.test_include_unsafe()\n-        self.test_inputs_min_chain_depth()\n+        self.test_minconfs()\n \n     def test_change_position(self):\n         \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n@@ -970,9 +970,9 @@ def test_include_unsafe(self):\n         signedtx = wallet.signrawtransactionwithwallet(fundedtx['hex'])\n         wallet.sendrawtransaction(signedtx['hex'])\n \n-    def test_inputs_min_chain_depth(self):\n-        self.nodes[0].createwallet(\"inputs_min_chain_depth\")\n-        wallet = self.nodes[0].get_wallet_rpc(\"inputs_min_chain_depth\")\n+    def test_minconfs(self):\n+        self.nodes[0].createwallet(\"minconfs\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"minconfs\")\n \n         # Fund the wallet with different chain heights\n         self.nodes[2].sendtoaddress(wallet.getnewaddress(), 1)\n@@ -1009,10 +1009,10 @@ def test_inputs_min_chain_depth(self):\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'fee_rate': 1, 'add_inputs': False})\n \n         self.log.info(\"Fail to craft a new TX with min depth above highest one\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'add_inputs': True, 'inputs_min_depth': 3, 'fee_rate': 10})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'add_inputs': True, 'minconfs': 3, 'fee_rate': 10})\n \n         self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n-        funded_tx2 = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'inputs_min_depth': 2, 'fee_rate': 10})['hex']\n+        funded_tx2 = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'minconfs': 2, 'fee_rate': 10})['hex']\n         tx2_inputs = self.nodes[0].decoderawtransaction(funded_tx2)['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:"
      },
      {
        "sha": "2aa86aeb7bcfa29673ee60679775016c0612480c",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87371bf1195ab8c9617d5b25a3182ed55b5f69f0/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87371bf1195ab8c9617d5b25a3182ed55b5f69f0/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
        "patch": "@@ -83,9 +83,9 @@ def test_utxo_conversion(self):\n         self.connect_nodes(0, 1)\n         self.connect_nodes(0, 2)\n \n-    def test_inputs_min_chain_depth(self):\n-        self.nodes[0].createwallet(\"inputs_min_chain_depth\")\n-        wallet = self.nodes[0].get_wallet_rpc(\"inputs_min_chain_depth\")\n+    def test_minconfs(self):\n+        self.nodes[0].createwallet(\"minconfs\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"minconfs\")\n \n         # Fund the wallet with different chain heights\n         self.nodes[1].sendtoaddress(wallet.getnewaddress(), 1)\n@@ -121,10 +121,10 @@ def test_inputs_min_chain_depth(self):\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': False})\n \n         self.log.info(\"Fail to craft a new PSBT with min depth above highest one\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': 3, 'fee_rate': 10})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'minconfs': 3, 'fee_rate': 10})\n \n         self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n-        psbtx2 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'inputs_min_depth': 2, 'fee_rate': 10})['psbt']\n+        psbtx2 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'minconfs': 2, 'fee_rate': 10})['psbt']\n         tx2_inputs = self.nodes[0].decodepsbt(psbtx2)['tx']['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:\n@@ -657,7 +657,7 @@ def test_psbt_input_keys(psbt_input, keys):\n \n         assert_raises_rpc_error(-25, 'Inputs missing or spent', self.nodes[0].walletprocesspsbt, 'cHNidP8BAJoCAAAAAkvEW8NnDtdNtDpsmze+Ht2LH35IJcKv00jKAlUs21RrAwAAAAD/////S8Rbw2cO1020OmybN74e3Ysffkglwq/TSMoCVSzbVGsBAAAAAP7///8CwLYClQAAAAAWABSNJKzjaUb3uOxixsvh1GGE3fW7zQD5ApUAAAAAFgAUKNw0x8HRctAgmvoevm4u1SbN7XIAAAAAAAEAnQIAAAACczMa321tVHuN4GKWKRncycI22aX3uXgwSFUKM2orjRsBAAAAAP7///9zMxrfbW1Ue43gYpYpGdzJwjbZpfe5eDBIVQozaiuNGwAAAAAA/v///wIA+QKVAAAAABl2qRT9zXUVA8Ls5iVqynLHe5/vSe1XyYisQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAAAAAQEfQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAA==')\n \n-        self.test_inputs_min_chain_depth()\n+        self.test_minconfs()\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "290f9dad447256bd97e50f243e70b8a06bc7123c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTBmOWRhZDQ0NzI1NmJkOTdlNTBmMjQzZTcwYjhhMDZiYzcxMjNj",
    "commit": {
      "author": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T22:10:48Z"
      },
      "committer": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-24T22:10:48Z"
      },
      "message": "rpc: add maxconfs parameter in fund calls",
      "tree": {
        "sha": "e1730f0510cb52311cf095583574d8d3b646b5ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1730f0510cb52311cf095583574d8d3b646b5ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/290f9dad447256bd97e50f243e70b8a06bc7123c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/290f9dad447256bd97e50f243e70b8a06bc7123c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/290f9dad447256bd97e50f243e70b8a06bc7123c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/290f9dad447256bd97e50f243e70b8a06bc7123c/comments",
    "author": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87371bf1195ab8c9617d5b25a3182ed55b5f69f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87371bf1195ab8c9617d5b25a3182ed55b5f69f0"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 53,
      "deletions": 30
    },
    "files": [
      {
        "sha": "50e22775b224fba8d33794c95c705c8686e0e607",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/290f9dad447256bd97e50f243e70b8a06bc7123c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/290f9dad447256bd97e50f243e70b8a06bc7123c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=290f9dad447256bd97e50f243e70b8a06bc7123c",
        "patch": "@@ -3099,6 +3099,7 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n                 {\"minconfs\", UniValueType(UniValue::VNUM)},\n+                {\"maxconfs\", UniValueType(UniValue::VNUM)},\n             },\n             true, true);\n \n@@ -3171,6 +3172,14 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n \n             coinControl.m_min_depth = options[\"minconfs\"].get_int();\n         }\n+\n+        if (options.exists(\"maxconfs\")) {\n+            if (options[\"maxconfs\"].get_int() < coinControl.m_min_depth) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"maxconfs can't be lower than minconfs: %d < %d\", options[\"maxconfs\"].get_int(), coinControl.m_min_depth));\n+            }\n+\n+            coinControl.m_max_depth = options[\"maxconfs\"].get_int();\n+        }\n         SetFeeEstimateMode(wallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n       }\n     } else {\n@@ -3225,6 +3234,7 @@ static RPCHelpMan fundrawtransaction()\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n                             {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n+                            {\"maxconfs\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n                             {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -4054,6 +4064,7 @@ static RPCHelpMan send()\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n                     {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n+                    {\"maxconfs\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n                     {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n                     {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n@@ -4401,6 +4412,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n                             {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n+                            {\"maxconfs\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},"
      },
      {
        "sha": "ca0ca0a99baa271a7c11287cf5617f3b65588e20",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/290f9dad447256bd97e50f243e70b8a06bc7123c/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/290f9dad447256bd97e50f243e70b8a06bc7123c/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=290f9dad447256bd97e50f243e70b8a06bc7123c",
        "patch": "@@ -99,7 +99,7 @@ def run_test(self):\n         self.test_subtract_fee_with_presets()\n         self.test_transaction_too_large()\n         self.test_include_unsafe()\n-        self.test_minconfs()\n+        self.test_input_confs_control()\n \n     def test_change_position(self):\n         \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n@@ -970,7 +970,7 @@ def test_include_unsafe(self):\n         signedtx = wallet.signrawtransactionwithwallet(fundedtx['hex'])\n         wallet.sendrawtransaction(signedtx['hex'])\n \n-    def test_minconfs(self):\n+    def test_input_confs_control(self):\n         self.nodes[0].createwallet(\"minconfs\")\n         wallet = self.nodes[0].get_wallet_rpc(\"minconfs\")\n \n@@ -984,19 +984,19 @@ def test_minconfs(self):\n \n         self.sync_blocks()\n \n-        unconfirmedAddress = wallet.getnewaddress()\n-        unconfirmedTxid = wallet.sendtoaddress(unconfirmedAddress, 1)\n-\n-        utxo1 = wallet.listunspent(0, 1, [unconfirmedAddress])[0]\n-        assert unconfirmedTxid == utxo1['txid']\n+        unconfirmed_txid = wallet.sendtoaddress(wallet.getnewaddress(), 0.5)\n \n         self.log.info(\"Crafting TX using an unconfirmed input\")\n-        targetAddress = self.nodes[2].getnewaddress()\n-        raw_tx1 = wallet.createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, True)\n-        funded_tx1 = wallet.fundrawtransaction(raw_tx1, {'fee_rate': 1})['hex']\n+        target_address = self.nodes[2].getnewaddress()\n+        raw_tx1 = wallet.createrawtransaction([], {target_address: 0.1}, 0, True)\n+        funded_tx1 = wallet.fundrawtransaction(raw_tx1, {'fee_rate': 1, 'maxconfs': 0})['hex']\n \n         # Make sure we only had the one input\n-        assert_equal(len(self.nodes[0].decoderawtransaction(funded_tx1)['vin']), 1)\n+        tx1_inputs = self.nodes[0].decoderawtransaction(funded_tx1)['vin']\n+        assert_equal(len(tx1_inputs), 1)\n+\n+        utxo1 = tx1_inputs[0]\n+        assert unconfirmed_txid == utxo1['txid']\n \n         final_tx1 = wallet.signrawtransactionwithwallet(funded_tx1)['hex']\n         txid1 = self.nodes[0].sendrawtransaction(final_tx1)\n@@ -1005,18 +1005,23 @@ def test_minconfs(self):\n         assert txid1 in mempool\n \n         self.log.info(\"Fail to craft a new TX that sends more funds with add_inputs = False\")\n-        raw_tx2 = wallet.createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1})\n+        raw_tx2 = wallet.createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1})\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'fee_rate': 1, 'add_inputs': False})\n \n-        self.log.info(\"Fail to craft a new TX with min depth above highest one\")\n+        self.log.info(\"Fail to craft a new TX with minconfs above highest one\")\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'add_inputs': True, 'minconfs': 3, 'fee_rate': 10})\n \n+        self.log.info(\"Fail to broadcast a new TX with maxconfs 0 due to BIP125 rules to verify it actually chose unconfirmed outputs\")\n+        funded_invalid = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'maxconfs': 0, 'fee_rate': 10})['hex']\n+        final_invalid = wallet.signrawtransactionwithwallet(funded_invalid)['hex']\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, final_invalid)\n+\n         self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n         funded_tx2 = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'minconfs': 2, 'fee_rate': 10})['hex']\n         tx2_inputs = self.nodes[0].decoderawtransaction(funded_tx2)['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:\n-            if vin['txid'] != unconfirmedTxid:\n+            if vin['txid'] != unconfirmed_txid:\n                 assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], 2)\n \n         final_tx2 = wallet.signrawtransactionwithwallet(funded_tx2)['hex']"
      },
      {
        "sha": "24c61ddb706d80ab91fa1860cf240a74073a3de4",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/290f9dad447256bd97e50f243e70b8a06bc7123c/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/290f9dad447256bd97e50f243e70b8a06bc7123c/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=290f9dad447256bd97e50f243e70b8a06bc7123c",
        "patch": "@@ -83,7 +83,7 @@ def test_utxo_conversion(self):\n         self.connect_nodes(0, 1)\n         self.connect_nodes(0, 2)\n \n-    def test_minconfs(self):\n+    def test_input_confs_control(self):\n         self.nodes[0].createwallet(\"minconfs\")\n         wallet = self.nodes[0].get_wallet_rpc(\"minconfs\")\n \n@@ -97,18 +97,18 @@ def test_minconfs(self):\n \n         self.sync_blocks()\n \n-        unconfirmedAddress = wallet.getnewaddress()\n-        targetAddress = self.nodes[1].getnewaddress()\n-        unconfirmedTxid = wallet.sendtoaddress(unconfirmedAddress, 1)\n-\n-        utxo1 = wallet.listunspent(0, 1, [unconfirmedAddress])[0]\n-        assert unconfirmedTxid == utxo1['txid']\n+        unconfirmed_txid = wallet.sendtoaddress(wallet.getnewaddress(), 0.5)\n \n         self.log.info(\"Crafting PSBT using an unconfirmed input\")\n-        psbtx1 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 0.1}, 0, {'fee_rate': 1})['psbt']\n+        target_address = self.nodes[1].getnewaddress()\n+        psbtx1 = wallet.walletcreatefundedpsbt([], {target_address: 0.1}, 0, {'fee_rate': 1, 'maxconfs': 0})['psbt']\n \n         # Make sure we only had the one input\n-        assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['tx']['vin']), 1)\n+        tx1_inputs = self.nodes[0].decodepsbt(psbtx1)['tx']['vin']\n+        assert_equal(len(tx1_inputs), 1)\n+\n+        utxo1 = tx1_inputs[0]\n+        assert unconfirmed_txid == utxo1['txid']\n \n         signed_tx1 = wallet.walletprocesspsbt(psbtx1)['psbt']\n         final_tx1 = wallet.finalizepsbt(signed_tx1)['hex']\n@@ -118,17 +118,23 @@ def test_minconfs(self):\n         assert txid1 in mempool\n \n         self.log.info(\"Fail to craft a new PSBT that sends more funds with add_inputs = False\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': False})\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': False})\n+\n+        self.log.info(\"Fail to craft a new PSBT with minconfs above highest one\")\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'minconfs': 3, 'fee_rate': 10})\n \n-        self.log.info(\"Fail to craft a new PSBT with min depth above highest one\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'minconfs': 3, 'fee_rate': 10})\n+        self.log.info(\"Fail to broadcast a new PSBT with maxconfs 0 due to BIP125 rules to verify it actually chose unconfirmed outputs\")\n+        psbt_invalid = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'maxconfs': 0, 'fee_rate': 10})['psbt']\n+        signed_invalid = wallet.walletprocesspsbt(psbt_invalid)['psbt']\n+        final_invalid = wallet.finalizepsbt(signed_invalid)['hex']\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, final_invalid)\n \n-        self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n-        psbtx2 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {targetAddress: 1}, 0, {'add_inputs': True, 'minconfs': 2, 'fee_rate': 10})['psbt']\n+        self.log.info(\"Craft a replacement adding inputs with highest confs possible\")\n+        psbtx2 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'minconfs': 2, 'fee_rate': 10})['psbt']\n         tx2_inputs = self.nodes[0].decodepsbt(psbtx2)['tx']['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:\n-            if vin['txid'] != unconfirmedTxid:\n+            if vin['txid'] != unconfirmed_txid:\n                 assert_greater_than_or_equal(self.nodes[0].gettxout(vin['txid'], vin['vout'])['confirmations'], 2)\n \n         signed_tx2 = wallet.walletprocesspsbt(psbtx2)['psbt']\n@@ -657,7 +663,7 @@ def test_psbt_input_keys(psbt_input, keys):\n \n         assert_raises_rpc_error(-25, 'Inputs missing or spent', self.nodes[0].walletprocesspsbt, 'cHNidP8BAJoCAAAAAkvEW8NnDtdNtDpsmze+Ht2LH35IJcKv00jKAlUs21RrAwAAAAD/////S8Rbw2cO1020OmybN74e3Ysffkglwq/TSMoCVSzbVGsBAAAAAP7///8CwLYClQAAAAAWABSNJKzjaUb3uOxixsvh1GGE3fW7zQD5ApUAAAAAFgAUKNw0x8HRctAgmvoevm4u1SbN7XIAAAAAAAEAnQIAAAACczMa321tVHuN4GKWKRncycI22aX3uXgwSFUKM2orjRsBAAAAAP7///9zMxrfbW1Ue43gYpYpGdzJwjbZpfe5eDBIVQozaiuNGwAAAAAA/v///wIA+QKVAAAAABl2qRT9zXUVA8Ls5iVqynLHe5/vSe1XyYisQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAAAAAQEfQM0ClQAAAAAWABRmWQUcjSjghQ8/uH4Bn/zkakwLtAAAAA==')\n \n-        self.test_minconfs()\n+        self.test_input_confs_control()\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjRjOTAzOWY3MTdlNGQzYzk5YzdiOTA1ZGZjNmQ3N2M0ZmFlZWMx",
    "commit": {
      "author": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-25T12:25:55Z"
      },
      "committer": {
        "name": "Juan Pablo Civile",
        "email": "elementohb@gmail.com",
        "date": "2021-05-25T12:33:25Z"
      },
      "message": "scripted-diff: drop trailing s from maxconfs and minconfs\n\n-BEGIN VERIFY SCRIPT-\nsed -i\"\" -e \"s/minconfs/minconf/\" ./src/wallet/rpcwallet.cpp ./test/functional/rpc_fundrawtransaction.py ./test/functional/rpc_psbt.py\nsed -i\"\" -e \"s/maxconfs/maxconf/\" ./src/wallet/rpcwallet.cpp ./test/functional/rpc_fundrawtransaction.py ./test/functional/rpc_psbt.py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "8911bc96b896aafeb5d6b7ffe8ae431132aaa2ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8911bc96b896aafeb5d6b7ffe8ae431132aaa2ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1/comments",
    "author": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "champo",
      "id": 202728,
      "node_id": "MDQ6VXNlcjIwMjcyOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/202728?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/champo",
      "html_url": "https://github.com/champo",
      "followers_url": "https://api.github.com/users/champo/followers",
      "following_url": "https://api.github.com/users/champo/following{/other_user}",
      "gists_url": "https://api.github.com/users/champo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/champo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/champo/subscriptions",
      "organizations_url": "https://api.github.com/users/champo/orgs",
      "repos_url": "https://api.github.com/users/champo/repos",
      "events_url": "https://api.github.com/users/champo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/champo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "290f9dad447256bd97e50f243e70b8a06bc7123c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/290f9dad447256bd97e50f243e70b8a06bc7123c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/290f9dad447256bd97e50f243e70b8a06bc7123c"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "2e1ef706a5b3460881b18f8b792512c170dcab8d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1",
        "patch": "@@ -3098,8 +3098,8 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n-                {\"minconfs\", UniValueType(UniValue::VNUM)},\n-                {\"maxconfs\", UniValueType(UniValue::VNUM)},\n+                {\"minconf\", UniValueType(UniValue::VNUM)},\n+                {\"maxconf\", UniValueType(UniValue::VNUM)},\n             },\n             true, true);\n \n@@ -3165,20 +3165,20 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n \n-        if (options.exists(\"minconfs\")) {\n-            if (options[\"minconfs\"].get_int() < 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconfs\");\n+        if (options.exists(\"minconf\")) {\n+            if (options[\"minconf\"].get_int() < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n             }\n \n-            coinControl.m_min_depth = options[\"minconfs\"].get_int();\n+            coinControl.m_min_depth = options[\"minconf\"].get_int();\n         }\n \n-        if (options.exists(\"maxconfs\")) {\n-            if (options[\"maxconfs\"].get_int() < coinControl.m_min_depth) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"maxconfs can't be lower than minconfs: %d < %d\", options[\"maxconfs\"].get_int(), coinControl.m_min_depth));\n+        if (options.exists(\"maxconf\")) {\n+            if (options[\"maxconf\"].get_int() < coinControl.m_min_depth) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"maxconf can't be lower than minconf: %d < %d\", options[\"maxconfs\"].get_int(), coinControl.m_min_depth));\n             }\n \n-            coinControl.m_max_depth = options[\"maxconfs\"].get_int();\n+            coinControl.m_max_depth = options[\"maxconf\"].get_int();\n         }\n         SetFeeEstimateMode(wallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n       }\n@@ -3233,8 +3233,8 @@ static RPCHelpMan fundrawtransaction()\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                            {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n-                            {\"maxconfs\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n+                            {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n+                            {\"maxconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n                             {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -4063,8 +4063,8 @@ static RPCHelpMan send()\n                     {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                    {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n-                    {\"maxconfs\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n+                    {\"maxconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n                     {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n                     {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n@@ -4411,8 +4411,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n                                                           \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n                                                           \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                            {\"minconfs\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n-                            {\"maxconfs\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n+                            {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{0}, \"If add_inputs is specified, require inputs with at least this confirmations.\"},\n+                            {\"maxconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If add_inputs is specified, require inputs with at most this confirmations.\"},\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},"
      },
      {
        "sha": "edf04d22f6c691fdfbab18e5f32ec6ef11982ca8",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1",
        "patch": "@@ -971,8 +971,8 @@ def test_include_unsafe(self):\n         wallet.sendrawtransaction(signedtx['hex'])\n \n     def test_input_confs_control(self):\n-        self.nodes[0].createwallet(\"minconfs\")\n-        wallet = self.nodes[0].get_wallet_rpc(\"minconfs\")\n+        self.nodes[0].createwallet(\"minconf\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"minconf\")\n \n         # Fund the wallet with different chain heights\n         self.nodes[2].sendtoaddress(wallet.getnewaddress(), 1)\n@@ -989,7 +989,7 @@ def test_input_confs_control(self):\n         self.log.info(\"Crafting TX using an unconfirmed input\")\n         target_address = self.nodes[2].getnewaddress()\n         raw_tx1 = wallet.createrawtransaction([], {target_address: 0.1}, 0, True)\n-        funded_tx1 = wallet.fundrawtransaction(raw_tx1, {'fee_rate': 1, 'maxconfs': 0})['hex']\n+        funded_tx1 = wallet.fundrawtransaction(raw_tx1, {'fee_rate': 1, 'maxconf': 0})['hex']\n \n         # Make sure we only had the one input\n         tx1_inputs = self.nodes[0].decoderawtransaction(funded_tx1)['vin']\n@@ -1008,16 +1008,16 @@ def test_input_confs_control(self):\n         raw_tx2 = wallet.createrawtransaction([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1})\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'fee_rate': 1, 'add_inputs': False})\n \n-        self.log.info(\"Fail to craft a new TX with minconfs above highest one\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'add_inputs': True, 'minconfs': 3, 'fee_rate': 10})\n+        self.log.info(\"Fail to craft a new TX with minconf above highest one\")\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, raw_tx2, {'add_inputs': True, 'minconf': 3, 'fee_rate': 10})\n \n-        self.log.info(\"Fail to broadcast a new TX with maxconfs 0 due to BIP125 rules to verify it actually chose unconfirmed outputs\")\n-        funded_invalid = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'maxconfs': 0, 'fee_rate': 10})['hex']\n+        self.log.info(\"Fail to broadcast a new TX with maxconf 0 due to BIP125 rules to verify it actually chose unconfirmed outputs\")\n+        funded_invalid = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'maxconf': 0, 'fee_rate': 10})['hex']\n         final_invalid = wallet.signrawtransactionwithwallet(funded_invalid)['hex']\n         assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, final_invalid)\n \n         self.log.info(\"Craft a replacement adding inputs with highest depth possible\")\n-        funded_tx2 = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'minconfs': 2, 'fee_rate': 10})['hex']\n+        funded_tx2 = wallet.fundrawtransaction(raw_tx2, {'add_inputs': True, 'minconf': 2, 'fee_rate': 10})['hex']\n         tx2_inputs = self.nodes[0].decoderawtransaction(funded_tx2)['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:"
      },
      {
        "sha": "45c10d6b4fc1216c2165ceda5148872fb10e0dbb",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=7f4c9039f717e4d3c99c7b905dfc6d77c4faeec1",
        "patch": "@@ -84,8 +84,8 @@ def test_utxo_conversion(self):\n         self.connect_nodes(0, 2)\n \n     def test_input_confs_control(self):\n-        self.nodes[0].createwallet(\"minconfs\")\n-        wallet = self.nodes[0].get_wallet_rpc(\"minconfs\")\n+        self.nodes[0].createwallet(\"minconf\")\n+        wallet = self.nodes[0].get_wallet_rpc(\"minconf\")\n \n         # Fund the wallet with different chain heights\n         self.nodes[1].sendtoaddress(wallet.getnewaddress(), 1)\n@@ -101,7 +101,7 @@ def test_input_confs_control(self):\n \n         self.log.info(\"Crafting PSBT using an unconfirmed input\")\n         target_address = self.nodes[1].getnewaddress()\n-        psbtx1 = wallet.walletcreatefundedpsbt([], {target_address: 0.1}, 0, {'fee_rate': 1, 'maxconfs': 0})['psbt']\n+        psbtx1 = wallet.walletcreatefundedpsbt([], {target_address: 0.1}, 0, {'fee_rate': 1, 'maxconf': 0})['psbt']\n \n         # Make sure we only had the one input\n         tx1_inputs = self.nodes[0].decodepsbt(psbtx1)['tx']['vin']\n@@ -120,17 +120,17 @@ def test_input_confs_control(self):\n         self.log.info(\"Fail to craft a new PSBT that sends more funds with add_inputs = False\")\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': False})\n \n-        self.log.info(\"Fail to craft a new PSBT with minconfs above highest one\")\n-        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'minconfs': 3, 'fee_rate': 10})\n+        self.log.info(\"Fail to craft a new PSBT with minconf above highest one\")\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.walletcreatefundedpsbt, [{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'minconf': 3, 'fee_rate': 10})\n \n-        self.log.info(\"Fail to broadcast a new PSBT with maxconfs 0 due to BIP125 rules to verify it actually chose unconfirmed outputs\")\n-        psbt_invalid = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'maxconfs': 0, 'fee_rate': 10})['psbt']\n+        self.log.info(\"Fail to broadcast a new PSBT with maxconf 0 due to BIP125 rules to verify it actually chose unconfirmed outputs\")\n+        psbt_invalid = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'maxconf': 0, 'fee_rate': 10})['psbt']\n         signed_invalid = wallet.walletprocesspsbt(psbt_invalid)['psbt']\n         final_invalid = wallet.finalizepsbt(signed_invalid)['hex']\n         assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, final_invalid)\n \n         self.log.info(\"Craft a replacement adding inputs with highest confs possible\")\n-        psbtx2 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'minconfs': 2, 'fee_rate': 10})['psbt']\n+        psbtx2 = wallet.walletcreatefundedpsbt([{'txid': utxo1['txid'], 'vout': utxo1['vout']}], {target_address: 1}, 0, {'add_inputs': True, 'minconf': 2, 'fee_rate': 10})['psbt']\n         tx2_inputs = self.nodes[0].decodepsbt(psbtx2)['tx']['vin']\n         assert_greater_than_or_equal(len(tx2_inputs), 2)\n         for vin in tx2_inputs:"
      }
    ]
  }
]