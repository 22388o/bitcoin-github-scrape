cozz,2015-05-16T11:30:31Z,"Fine with me. Reorg is still a problem, but relaying the tip is at least better than relaying nothing.\n\nTo solve the reorg-problem, I would want to also call FindNextBlocksToDownload on pruned-nodes, if it is ensured that we can not ask them for pruned blocks.\n@sipa Would this be possible, to just call FindNextBlocksToDownload also for pruned nodes, when we are close to being synced?\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-102613206,102613206,
morcos,2015-05-17T21:00:48Z,ACK. Tested for tip relay for master and reorg relay (up to a certain depth) for 0.9.\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-102857824,102857824,
jonasschnelli,2015-05-20T11:04:21Z,"I just sopped my pruned node, added this PR on top of the current master, ran again and had the following issue:\n\n**Stopping:**\n\n```\nPrune: target=550MiB actual=467MiB diff=82MiB min_must_keep=356959 removed 0 blk/rev pairs\nreceive version message: /bitcoinseeder:0.01/: version 60000, blocks=230000, us=***:8334, peer=18138\nreceive version message: /Snoopy:0.1/: version 60001, blocks=0, us=*",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-103843806,103843806,
jonasschnelli,2015-05-20T11:06:12Z,My `/blocks` dir contains the following:\n\n```\nblk00268.dat  blk00269.dat  blk00270.dat  blk00271.dat  index  rev00268.dat  rev00269.dat  rev00270.dat  rev00271.dat\n```\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-103844273,103844273,
jonasschnelli,2015-05-20T11:14:07Z,"Further up i can see in my log that `blk00264.dat` has been deleted because of pruning (around 9 days ago).\n\n```\nreceive version message: /btccrawler.ch:v0.1/: version 70002, blocks=355967, us=***:8334, peer=729\nERROR: AcceptToMemoryPool: nonstandard transaction: dust\nPrune: target=550MiB actual=532MiB diff=17MiB min_must_keep=355679 removed 0 blk/rev pairs\nPrune: target=550MiB actual=388MiB",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-103846388,103846388,
sdaftuar,2015-05-20T12:15:27Z,@jonasschnelli any chance you had been running with #6118 and then switched to running without? This looks exactly like what happens when trying to downgrade from lazy updating of mapBlockIndex. If that is the issue you can workaround by restarting your node with #6118 and then quickly stopping; the block index is refreshed on startup. You could then restart without the lazy updating code and thin,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-103860722,103860722,
jonasschnelli,2015-05-20T12:19:55Z,"@sdaftuar pretty sure i did this. I'll now try to run a master-full-node, sync up, add this PR on top and continue to confirm the missing-lazy-update issue.\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-103861280,103861280,
jonasschnelli,2015-05-20T12:59:56Z,"Stopped a full-node, copied datadir, ran a new master-full-node with the just copied datadir and pruning target 550, stopped after a while, added this PR on top and it looks good.\n\nNow testing block relying.\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-103875842,103875842,
jonasschnelli,2015-05-21T09:24:54Z,Did some testing.\nConnected a fresh mainnet node to a pruned node.\nI was expecting that my fresh node can load at least the whole headers-first-chain but encountered:\n\n```\n--- snip\nsending: pong (8 bytes) peer=1\nreceived: getheaders (997 bytes) peer=1\ngetheaders -1 to 0000000000000000000000000000000000000000000000000000000000000000 from peer=1\nsending: headers (1 bytes) peer=1\nreceived: ,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-104193558,104193558,
sdaftuar,2015-05-28T13:32:43Z,"@jonasschnelli  The fresh node won't load the whole headers from the pruning node on startup, because we only choose full NODE_NETWORK nodes to sync the headers chain.  However, if you were to wait long enough for the pruning node to inv a block, then at that point at getheaders message should be sent to the pruning node, and headers should then sync.\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-106311194,106311194,
juscamarena,2015-06-10T04:05:27Z,"Nice, I'm running 0.11.0rc1 and bitcoin in %appdata% is only taking up 1.33 GB of space.. Would love to be able to relay blocks. I'd actually leave this on with this small of a memory footprint.\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-110581479,110581479,
sipa,2015-06-14T13:49:57Z,"I haven't followed up on all proposed changes related to this. Is there a plan to also make peers use the inventories we send out? With a change like this, the immediate fetching logic may react to an fClient peer sending a block inv, but the asynchronous fetching won't, making this (for now) useless for reorgs, for example.\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-111827959,111827959,
sipa,2015-06-14T14:14:16Z,I'm confused by the several related and seemingly-overlapping PRs here.\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-111829759,111829759,
sdaftuar,2015-06-16T15:11:11Z,"@sipa Sorry for the PR confusion.  #6130 fixes a bug where pruning nodes would respond badly to a getblocks message by inv'ing blocks they don't actually have.  This pull adds block relaying for pruning nodes, which would not work without the fix in #6130, so I built it on top.\n\nInitially I thought the bug fix in #6130 should stand on its own, but on further thought I think it could only be trig",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-112465268,112465268,
sipa,2015-06-16T15:19:03Z,"No, just querying what the current state/plan is :)\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-112468327,112468327,
sipa,2015-06-21T13:22:19Z,"Been running on bitcoin.sipa.be for a week, no problems.\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-113901149,113901149,
sdaftuar,2015-07-30T13:31:31Z,"@jonasschnelli I saw your comment in #6460 about this PR -- I think this could be merged as-is without any new service bits.  Adding a service bit would be needed to implement a system for selectively downloading historical blocks from less-than-full nodes, but I don't think it's needed to enable relaying at the tip.\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-126324873,126324873,
jonasschnelli,2015-07-30T13:33:08Z,@sdaftuar: Agreed. Will test again soon and sry for the delay.\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-126325581,126325581,
sipa,2015-07-30T13:40:20Z,"ACK (have done a ""it works"" test before).\n\n@laanwj Acceptable for 0.11?\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-126327892,126327892,
jonasschnelli,2015-07-31T11:38:32Z,"Running since >18h on a pruned synced full node (master).\nServed ~291887 blocks since than.\n\n```\njonasschnelli@server6:~$ cat ~/.bitcoin/debug.log | grep ""sending: block"" | wc -l\n291887\n```\n\ntested ACK\n",https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-126662167,126662167,
gmaxwell,2015-09-07T07:29:48Z,I've been testing this against master and it's happily relaying at the tip among my peers without issue. Appears to work great. \n\nHas someone tried the case where the peer is on a fork and needs to fetch futher back than the pruning window to complete the reorg?\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-138215049,138215049,
gmaxwell,2015-09-08T23:09:37Z,To be clear: ACK.\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-138727767,138727767,
dcousens,2015-09-09T02:13:53Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-138755366,138755366,
sdaftuar,2015-09-21T17:35:27Z,@laanwj I think this is ready to be merged; are there any outstanding concerns here?\n,https://github.com/bitcoin/bitcoin/pull/6148#issuecomment-142052270,142052270,
sipa,2015-06-14T13:47:40Z,Can you use a symbolic constant here? Or some calculation based on consensus params?\n,https://github.com/bitcoin/bitcoin/pull/6148#discussion_r32379784,32379784,src/main.cpp
sdaftuar,2015-06-17T19:44:38Z,@sipa Fixed to use a calculation based on consensus params.\n,https://github.com/bitcoin/bitcoin/pull/6148#discussion_r32666526,32666526,src/main.cpp
