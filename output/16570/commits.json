[
  {
    "sha": "b9ee63c71b751fd67da777774ea8c0b27e7db2f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWVlNjNjNzFiNzUxZmQ2N2RhNzc3Nzc0ZWE4YzBiMjdlN2RiMmY4",
    "commit": {
      "author": {
        "name": "David Reikher",
        "email": "david.reikher@gmail.com",
        "date": "2019-08-07T11:50:48Z"
      },
      "committer": {
        "name": "David Reikher",
        "email": "david.reikher@gmail.com",
        "date": "2019-08-21T05:22:55Z"
      },
      "message": "Make descriptor test deterministic\n\nChanged MaybeUseHInsteadOfApostrophy to UseHInsteadOfApostrophe.\nThis function now always replaces apostrophes with 'h'.\nThe original Check function was renamed to DoCheck and it's\ncalled with an additional parameter which tells it to either\nleave the prv and pub arguments as is or replace the apostrophes\nwith 'h'. The test runs with apostrophes replaced in prv only,\npub only, prv and pub and without replacement at all. Replacement\nof apostrophes in a descriptor and then running DoCheck is conditional\non whether apostrophes are found in that descriptor.\n\nAdditionally, instead of dropping the checksum recalculate it\nafter replacing apostrophes with 'h' in the function UseHInsteadOfApostrophe\nusing the GetDescriptorChecksum function. That way, this also\nintroduces an indirect unit test to GetDescriptoChecksum.",
      "tree": {
        "sha": "9d2cb0d40606aff5108bbd92f1ffd4381b90ad0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d2cb0d40606aff5108bbd92f1ffd4381b90ad0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9ee63c71b751fd67da777774ea8c0b27e7db2f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9ee63c71b751fd67da777774ea8c0b27e7db2f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9ee63c71b751fd67da777774ea8c0b27e7db2f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9ee63c71b751fd67da777774ea8c0b27e7db2f8/comments",
    "author": {
      "login": "davereikher",
      "id": 5347350,
      "node_id": "MDQ6VXNlcjUzNDczNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5347350?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davereikher",
      "html_url": "https://github.com/davereikher",
      "followers_url": "https://api.github.com/users/davereikher/followers",
      "following_url": "https://api.github.com/users/davereikher/following{/other_user}",
      "gists_url": "https://api.github.com/users/davereikher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davereikher/subscriptions",
      "organizations_url": "https://api.github.com/users/davereikher/orgs",
      "repos_url": "https://api.github.com/users/davereikher/repos",
      "events_url": "https://api.github.com/users/davereikher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davereikher/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "davereikher",
      "id": 5347350,
      "node_id": "MDQ6VXNlcjUzNDczNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5347350?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davereikher",
      "html_url": "https://github.com/davereikher",
      "followers_url": "https://api.github.com/users/davereikher/followers",
      "following_url": "https://api.github.com/users/davereikher/following{/other_user}",
      "gists_url": "https://api.github.com/users/davereikher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davereikher/subscriptions",
      "organizations_url": "https://api.github.com/users/davereikher/orgs",
      "repos_url": "https://api.github.com/users/davereikher/repos",
      "events_url": "https://api.github.com/users/davereikher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davereikher/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48e5bfe2240596eb6d2ae64d4daf727fd886a696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48e5bfe2240596eb6d2ae64d4daf727fd886a696",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48e5bfe2240596eb6d2ae64d4daf727fd886a696"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 54,
      "deletions": 14
    },
    "files": [
      {
        "sha": "50ac0bd7b8986a310c461c964981d01bccfb811b",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 14,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9ee63c71b751fd67da777774ea8c0b27e7db2f8/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9ee63c71b751fd67da777774ea8c0b27e7db2f8/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=b9ee63c71b751fd67da777774ea8c0b27e7db2f8",
        "patch": "@@ -42,33 +42,47 @@ bool EqualDescriptor(std::string a, std::string b)\n     return a == b;\n }\n \n-std::string MaybeUseHInsteadOfApostrophy(std::string ret)\n+std::string UseHInsteadOfApostrophe(const std::string& desc)\n {\n-    if (InsecureRandBool()) {\n-        while (true) {\n-            auto it = ret.find(\"'\");\n-            if (it != std::string::npos) {\n-                ret[it] = 'h';\n-                if (ret.size() > 9 && ret[ret.size() - 9] == '#') ret = ret.substr(0, ret.size() - 9); // Changing apostrophe to h breaks the checksum\n-            } else {\n-                break;\n-            }\n-        }\n+    std::string ret = desc;\n+    while (true) {\n+        auto it = ret.find('\\'');\n+        if (it == std::string::npos) break;\n+        ret[it] = 'h';\n+    }\n+\n+    // GetDescriptorChecksum returns \"\" if the checksum exists but is bad.\n+    // Switching apostrophes with 'h' breaks the checksum if it exists - recalculate it and replace the broken one.\n+    if (GetDescriptorChecksum(ret) == \"\") {\n+        ret = ret.substr(0, desc.size() - 9);\n+        ret += std::string(\"#\") + GetDescriptorChecksum(ret);\n     }\n     return ret;\n }\n \n const std::set<std::vector<uint32_t>> ONLY_EMPTY{{}};\n \n-void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void DoCheck(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n+    bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n     std::set<std::vector<uint32_t>> left_paths = paths;\n     std::string error;\n \n+    std::unique_ptr<Descriptor> parse_priv;\n+    std::unique_ptr<Descriptor> parse_pub;\n     // Check that parsing succeeds.\n-    auto parse_priv = Parse(MaybeUseHInsteadOfApostrophy(prv), keys_priv, error);\n-    auto parse_pub = Parse(MaybeUseHInsteadOfApostrophy(pub), keys_pub, error);\n+    if (replace_apostrophe_with_h_in_prv) {\n+        parse_priv = Parse(UseHInsteadOfApostrophe(prv), keys_priv, error);\n+    } else {\n+        parse_priv = Parse(prv, keys_priv, error);\n+    }\n+    if (replace_apostrophe_with_h_in_pub) {\n+        parse_pub = Parse(UseHInsteadOfApostrophe(pub), keys_pub, error);\n+    } else {\n+        parse_pub = Parse(pub, keys_pub, error);\n+    }\n+\n     BOOST_CHECK(parse_priv);\n     BOOST_CHECK(parse_pub);\n \n@@ -167,6 +181,32 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n+void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+{\n+    bool found_apostrophes_in_prv = false;\n+    bool found_apostrophes_in_pub = false;\n+\n+    // Do not replace apostrophes with 'h' in prv and pub\n+    DoCheck(prv, pub, flags, scripts, paths);\n+\n+    // Replace apostrophes with 'h' in prv but not in pub, if apostrophes are found in prv\n+    if (prv.find('\\'') != std::string::npos) {\n+        found_apostrophes_in_prv = true;\n+        DoCheck(prv, pub, flags, scripts, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */false);\n+    }\n+\n+    // Replace apostrophes with 'h' in pub but not in prv, if apostrophes are found in pub\n+    if (pub.find('\\'') != std::string::npos) {\n+        found_apostrophes_in_pub = true;\n+        DoCheck(prv, pub, flags, scripts, paths, /* replace_apostrophe_with_h_in_prv = */false, /*replace_apostrophe_with_h_in_pub = */true);\n+    }\n+\n+    // Replace apostrophes with 'h' both in prv and in pub, if apostrophes are found in both\n+    if (found_apostrophes_in_prv && found_apostrophes_in_pub) {\n+        DoCheck(prv, pub, flags, scripts, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */true);\n+    }\n+}\n+\n }\n \n BOOST_FIXTURE_TEST_SUITE(descriptor_tests, BasicTestingSetup)"
      }
    ]
  }
]