[
  {
    "sha": "6355214fd70ce7b44739acb8d546aaaf243f90b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzU1MjE0ZmQ3MGNlN2I0NDczOWFjYjhkNTQ2YWFhZjI0M2Y5MGIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-20T01:06:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-28T22:09:01Z"
      },
      "message": "Simplify orphan processing in preparation for interruptibility\n\nGithub-Pull: #15644\nRebased-From: 9453018fdc8f02d42832374bcf1d6e3a1df02281",
      "tree": {
        "sha": "fe729ba6f46b667771c3a2ba116638f7c9ce0163",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe729ba6f46b667771c3a2ba116638f7c9ce0163"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6355214fd70ce7b44739acb8d546aaaf243f90b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6355214fd70ce7b44739acb8d546aaaf243f90b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6355214fd70ce7b44739acb8d546aaaf243f90b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6355214fd70ce7b44739acb8d546aaaf243f90b3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bcf90cb01aa964a54e3450ec5515e67db7088b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bcf90cb01aa964a54e3450ec5515e67db7088b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bcf90cb01aa964a54e3450ec5515e67db7088b7"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 54,
      "deletions": 56
    },
    "files": [
      {
        "sha": "8270dee2470a79ef6668e77bac612d0e58d14f4d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 56,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6355214fd70ce7b44739acb8d546aaaf243f90b3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6355214fd70ce7b44739acb8d546aaaf243f90b3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6355214fd70ce7b44739acb8d546aaaf243f90b3",
        "patch": "@@ -2342,8 +2342,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return true;\n         }\n \n-        std::deque<COutPoint> vWorkQueue;\n-        std::vector<uint256> vEraseQueue;\n+        std::set<uint256> orphan_work_set;\n+\n         CTransactionRef ptx;\n         vRecv >> ptx;\n         const CTransaction& tx = *ptx;\n@@ -2368,7 +2368,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             mempool.check(pcoinsTip.get());\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-                vWorkQueue.emplace_back(inv.hash, i);\n+                auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(inv.hash, i));\n+                if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n+                    for (const auto& elem : it_by_prev->second) {\n+                        orphan_work_set.insert(elem->first);\n+                    }\n+                }\n             }\n \n             pfrom->nLastTXTime = GetTime();\n@@ -2380,64 +2385,57 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n             // Recursively process any orphan transactions that depended on this one\n             std::set<NodeId> setMisbehaving;\n-            while (!vWorkQueue.empty()) {\n-                auto itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue.front());\n-                vWorkQueue.pop_front();\n-                if (itByPrev == mapOrphanTransactionsByPrev.end())\n-                    continue;\n-                for (auto mi = itByPrev->second.begin();\n-                     mi != itByPrev->second.end();\n-                     ++mi)\n-                {\n-                    const CTransactionRef& porphanTx = (*mi)->second.tx;\n-                    const CTransaction& orphanTx = *porphanTx;\n-                    const uint256& orphanHash = orphanTx.GetHash();\n-                    NodeId fromPeer = (*mi)->second.fromPeer;\n-                    bool fMissingInputs2 = false;\n-                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n-                    // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n-                    // anyone relaying LegitTxX banned)\n-                    CValidationState stateDummy;\n-\n-\n-                    if (setMisbehaving.count(fromPeer))\n-                        continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n-                        LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                        RelayTransaction(orphanTx, connman);\n-                        for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n-                            vWorkQueue.emplace_back(orphanHash, i);\n+            while (!orphan_work_set.empty()) {\n+                const uint256 orphanHash = *orphan_work_set.begin();\n+                orphan_work_set.erase(orphan_work_set.begin());\n+\n+                auto orphan_it = mapOrphanTransactions.find(orphanHash);\n+                if (orphan_it == mapOrphanTransactions.end()) continue;\n+\n+                const CTransactionRef porphanTx = orphan_it->second.tx;\n+                const CTransaction& orphanTx = *porphanTx;\n+                NodeId fromPeer = orphan_it->second.fromPeer;\n+                bool fMissingInputs2 = false;\n+                // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n+                // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n+                // anyone relaying LegitTxX banned)\n+                CValidationState stateDummy;\n+\n+                if (setMisbehaving.count(fromPeer)) continue;\n+                if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+                    LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+                    RelayTransaction(orphanTx, connman);\n+                    for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n+                        auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n+                        if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n+                            for (const auto& elem : it_by_prev->second) {\n+                                orphan_work_set.insert(elem->first);\n+                            }\n                         }\n-                        vEraseQueue.push_back(orphanHash);\n                     }\n-                    else if (!fMissingInputs2)\n-                    {\n-                        int nDos = 0;\n-                        if (stateDummy.IsInvalid(nDos) && nDos > 0)\n-                        {\n-                            // Punish peer that gave us an invalid orphan tx\n-                            Misbehaving(fromPeer, nDos);\n-                            setMisbehaving.insert(fromPeer);\n-                            LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n-                        }\n-                        // Has inputs but not accepted to mempool\n-                        // Probably non-standard or insufficient fee\n-                        LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n-                        vEraseQueue.push_back(orphanHash);\n-                        if (!orphanTx.HasWitness() && !stateDummy.CorruptionPossible()) {\n-                            // Do not use rejection cache for witness transactions or\n-                            // witness-stripped transactions, as they can have been malleated.\n-                            // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                            assert(recentRejects);\n-                            recentRejects->insert(orphanHash);\n-                        }\n+                    EraseOrphanTx(orphanHash);\n+                } else if (!fMissingInputs2) {\n+                    int nDos = 0;\n+                    if (stateDummy.IsInvalid(nDos) && nDos > 0) {\n+                        // Punish peer that gave us an invalid orphan tx\n+                        Misbehaving(fromPeer, nDos);\n+                        setMisbehaving.insert(fromPeer);\n+                        LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n+                    }\n+                    // Has inputs but not accepted to mempool\n+                    // Probably non-standard or insufficient fee\n+                    LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n+                    if (!orphanTx.HasWitness() && !stateDummy.CorruptionPossible()) {\n+                        // Do not use rejection cache for witness transactions or\n+                        // witness-stripped transactions, as they can have been malleated.\n+                        // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+                        assert(recentRejects);\n+                        recentRejects->insert(orphanHash);\n                     }\n-                    mempool.check(pcoinsTip.get());\n+                    EraseOrphanTx(orphanHash);\n                 }\n+                mempool.check(pcoinsTip.get());\n             }\n-\n-            for (const uint256& hash : vEraseQueue)\n-                EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n         {"
      }
    ]
  },
  {
    "sha": "bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjYwMTIxZGExZWIzNDg0ZWNmMjBjNWQxMTMwZDllMmY2ZjhmOGM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-20T22:09:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-28T22:09:03Z"
      },
      "message": "[MOVEONLY] Move processing of orphan queue to ProcessOrphanTx\n\nGithub-Pull: #15644\nRebased-From: 6e051f3d323af1d209c02e7a4319834f1947ffa7",
      "tree": {
        "sha": "390a617b9f08666fe4985468c986fd12f76f76ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/390a617b9f08666fe4985468c986fd12f76f76ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6355214fd70ce7b44739acb8d546aaaf243f90b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6355214fd70ce7b44739acb8d546aaaf243f90b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6355214fd70ce7b44739acb8d546aaaf243f90b3"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 59,
      "deletions": 52
    },
    "files": [
      {
        "sha": "74990b6e2a7716fc45d432b0d7e3e8d202efbb35",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 52,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8",
        "patch": "@@ -1713,6 +1713,64 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     return true;\n }\n \n+void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(g_cs_orphans);\n+    std::set<NodeId> setMisbehaving;\n+    while (!orphan_work_set.empty()) {\n+        const uint256 orphanHash = *orphan_work_set.begin();\n+        orphan_work_set.erase(orphan_work_set.begin());\n+\n+        auto orphan_it = mapOrphanTransactions.find(orphanHash);\n+        if (orphan_it == mapOrphanTransactions.end()) continue;\n+\n+        const CTransactionRef porphanTx = orphan_it->second.tx;\n+        const CTransaction& orphanTx = *porphanTx;\n+        NodeId fromPeer = orphan_it->second.fromPeer;\n+        bool fMissingInputs2 = false;\n+        // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n+        // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n+        // anyone relaying LegitTxX banned)\n+        CValidationState stateDummy;\n+\n+        if (setMisbehaving.count(fromPeer)) continue;\n+        if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+            LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+            RelayTransaction(orphanTx, connman);\n+            for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n+                auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n+                if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n+                    for (const auto& elem : it_by_prev->second) {\n+                        orphan_work_set.insert(elem->first);\n+                    }\n+                }\n+            }\n+            EraseOrphanTx(orphanHash);\n+        } else if (!fMissingInputs2) {\n+            int nDos = 0;\n+            if (stateDummy.IsInvalid(nDos) && nDos > 0) {\n+                // Punish peer that gave us an invalid orphan tx\n+                Misbehaving(fromPeer, nDos);\n+                setMisbehaving.insert(fromPeer);\n+                LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n+            }\n+            // Has inputs but not accepted to mempool\n+            // Probably non-standard or insufficient fee\n+            LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n+            if (!orphanTx.HasWitness() && !stateDummy.CorruptionPossible()) {\n+                // Do not use rejection cache for witness transactions or\n+                // witness-stripped transactions, as they can have been malleated.\n+                // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n+                assert(recentRejects);\n+                recentRejects->insert(orphanHash);\n+            }\n+            EraseOrphanTx(orphanHash);\n+        }\n+        mempool.check(pcoinsTip.get());\n+    }\n+}\n+\n bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n@@ -2384,58 +2442,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            std::set<NodeId> setMisbehaving;\n-            while (!orphan_work_set.empty()) {\n-                const uint256 orphanHash = *orphan_work_set.begin();\n-                orphan_work_set.erase(orphan_work_set.begin());\n-\n-                auto orphan_it = mapOrphanTransactions.find(orphanHash);\n-                if (orphan_it == mapOrphanTransactions.end()) continue;\n-\n-                const CTransactionRef porphanTx = orphan_it->second.tx;\n-                const CTransaction& orphanTx = *porphanTx;\n-                NodeId fromPeer = orphan_it->second.fromPeer;\n-                bool fMissingInputs2 = false;\n-                // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n-                // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n-                // anyone relaying LegitTxX banned)\n-                CValidationState stateDummy;\n-\n-                if (setMisbehaving.count(fromPeer)) continue;\n-                if (AcceptToMemoryPool(mempool, stateDummy, porphanTx, &fMissingInputs2, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n-                    LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                    RelayTransaction(orphanTx, connman);\n-                    for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n-                        auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(orphanHash, i));\n-                        if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n-                            for (const auto& elem : it_by_prev->second) {\n-                                orphan_work_set.insert(elem->first);\n-                            }\n-                        }\n-                    }\n-                    EraseOrphanTx(orphanHash);\n-                } else if (!fMissingInputs2) {\n-                    int nDos = 0;\n-                    if (stateDummy.IsInvalid(nDos) && nDos > 0) {\n-                        // Punish peer that gave us an invalid orphan tx\n-                        Misbehaving(fromPeer, nDos);\n-                        setMisbehaving.insert(fromPeer);\n-                        LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n-                    }\n-                    // Has inputs but not accepted to mempool\n-                    // Probably non-standard or insufficient fee\n-                    LogPrint(BCLog::MEMPOOL, \"   removed orphan tx %s\\n\", orphanHash.ToString());\n-                    if (!orphanTx.HasWitness() && !stateDummy.CorruptionPossible()) {\n-                        // Do not use rejection cache for witness transactions or\n-                        // witness-stripped transactions, as they can have been malleated.\n-                        // See https://github.com/bitcoin/bitcoin/issues/8279 for details.\n-                        assert(recentRejects);\n-                        recentRejects->insert(orphanHash);\n-                    }\n-                    EraseOrphanTx(orphanHash);\n-                }\n-                mempool.check(pcoinsTip.get());\n-            }\n+            ProcessOrphanTx(connman, orphan_work_set, lRemovedTxn);\n         }\n         else if (fMissingInputs)\n         {"
      }
    ]
  },
  {
    "sha": "50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGM1NmYyZmNmMDAzODVkYmU4ZjkxNTg4YWYzZWUxYTg5YTlkMmQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-20T22:26:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-28T22:09:05Z"
      },
      "message": "Interrupt orphan processing after every transaction\n\nThis makes orphan processing work like handling getdata messages:\nAfter every actual transaction validation attempt, interrupt\nprocessing to deal with messages arriving from other peers.\n\nGithub-Pull: #15644\nRebased-From: 866c8058a706931f025335b3e794ed2f4d287918",
      "tree": {
        "sha": "44cf9d89944d1bedaa647edbb4fb8a086b4e98b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44cf9d89944d1bedaa647edbb4fb8a086b4e98b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb60121da1eb3484ecf20c5d1130d9e2f6f8f8c8"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f1d09f5934f3449207fc163e3c2be4cc65a41750",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
        "patch": "@@ -739,6 +739,8 @@ class CNode\n     CAmount lastSentFeeFilter{0};\n     int64_t nextSendTimeFeeFilter{0};\n \n+    std::set<uint256> orphan_work_set;\n+\n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n     CNode(const CNode&) = delete;"
      },
      {
        "sha": "53ff6a52ac1f0e2d11e6841b1ca1fbf8c04dbc2b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
        "patch": "@@ -1718,7 +1718,8 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n     std::set<NodeId> setMisbehaving;\n-    while (!orphan_work_set.empty()) {\n+    bool done = false;\n+    while (!done && !orphan_work_set.empty()) {\n         const uint256 orphanHash = *orphan_work_set.begin();\n         orphan_work_set.erase(orphan_work_set.begin());\n \n@@ -1747,6 +1748,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n                 }\n             }\n             EraseOrphanTx(orphanHash);\n+            done = true;\n         } else if (!fMissingInputs2) {\n             int nDos = 0;\n             if (stateDummy.IsInvalid(nDos) && nDos > 0) {\n@@ -1766,6 +1768,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n                 recentRejects->insert(orphanHash);\n             }\n             EraseOrphanTx(orphanHash);\n+            done = true;\n         }\n         mempool.check(pcoinsTip.get());\n     }\n@@ -2400,8 +2403,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return true;\n         }\n \n-        std::set<uint256> orphan_work_set;\n-\n         CTransactionRef ptx;\n         vRecv >> ptx;\n         const CTransaction& tx = *ptx;\n@@ -2429,7 +2430,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 auto it_by_prev = mapOrphanTransactionsByPrev.find(COutPoint(inv.hash, i));\n                 if (it_by_prev != mapOrphanTransactionsByPrev.end()) {\n                     for (const auto& elem : it_by_prev->second) {\n-                        orphan_work_set.insert(elem->first);\n+                        pfrom->orphan_work_set.insert(elem->first);\n                     }\n                 }\n             }\n@@ -2442,7 +2443,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(connman, orphan_work_set, lRemovedTxn);\n+            ProcessOrphanTx(connman, pfrom->orphan_work_set, lRemovedTxn);\n         }\n         else if (fMissingInputs)\n         {\n@@ -3150,11 +3151,21 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (!pfrom->vRecvGetData.empty())\n         ProcessGetData(pfrom, chainparams, connman, interruptMsgProc);\n \n+    if (!pfrom->orphan_work_set.empty()) {\n+        std::list<CTransactionRef> removed_txn;\n+        LOCK2(cs_main, g_cs_orphans);\n+        ProcessOrphanTx(connman, pfrom->orphan_work_set, removed_txn);\n+        for (const CTransactionRef& removedTx : removed_txn) {\n+            AddToCompactExtraTransactions(removedTx);\n+        }\n+    }\n+\n     if (pfrom->fDisconnect)\n         return false;\n \n     // this maintains the order of responses\n     if (!pfrom->vRecvGetData.empty()) return true;\n+    if (!pfrom->orphan_work_set.empty()) return true;\n \n     // Don't bother if send buffer is too full to respond anyway\n     if (pfrom->fPauseSend)"
      }
    ]
  },
  {
    "sha": "a90db2f175f86b78d8edc5c03b7bb351c8f43e5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTBkYjJmMTc1Zjg2Yjc4ZDhlZGM1YzAzYjdiYjM1MWM4ZjQzZTVl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-22T18:04:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-01T19:46:32Z"
      },
      "message": "[tests] Add test for wallet rebroadcasts\n\nThe existing wallet_resendwallettransactions.py test only tests the\nresendwallettransactions RPC. It does not test whether transactions are\nactually rebroadcast, or whether the rebroadcast logic is called on a\ntimer.\n\nThis commit updates the test to not use the resendwallettransactions RPC and\ntest that transactions are rebroadcast on a timer.\n\nGithub-Pull: #15646\nRebased-From: 529c1ae4a04248a46a8b4a5a63ecbb12a63ff50e",
      "tree": {
        "sha": "3a78ec930644fb686d7b996b2f2df3f2ae0f3571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a78ec930644fb686d7b996b2f2df3f2ae0f3571"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50c56f2fcf00385dbe8f91588af3ee1a89a9d2d0"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 51,
      "deletions": 12
    },
    "files": [
      {
        "sha": "8aafa94c2e096f224d7e128fca3606db7f0b3f19",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 51,
        "deletions": 12,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=a90db2f175f86b78d8edc5c03b7bb351c8f43e5e",
        "patch": "@@ -2,31 +2,70 @@\n # Copyright (c) 2017-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test resendwallettransactions RPC.\"\"\"\n+\"\"\"Test that the wallet resends transactions periodically.\"\"\"\n+from collections import defaultdict\n+import time\n \n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import ToHex\n+from test_framework.mininode import P2PInterface, mininode_lock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import assert_equal, wait_until\n+\n+class P2PStoreTxInvs(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.tx_invs_received = defaultdict(int)\n+\n+    def on_inv(self, message):\n+        # Store how many times invs have been received for each tx.\n+        for i in message.inv:\n+            if i.type == 1:\n+                # save txid\n+                self.tx_invs_received[i.hash] += 1\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['--walletbroadcast=false']]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n-        assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n+        node = self.nodes[0]  # alias\n+\n+        node.add_p2p_connection(P2PStoreTxInvs())\n+\n+        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n+        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+\n+        # Can take a few seconds due to transaction trickling\n+        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n+\n+        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n+        node.add_p2p_connection(P2PStoreTxInvs())\n+\n+        self.log.info(\"Create a block\")\n+        # Create and submit a block without the transaction.\n+        # Transactions are only rebroadcast if there has been a block at least five minutes\n+        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n+        block_time = int(time.time()) + 6 * 60\n+        node.setmocktime(block_time)\n+        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockchaininfo()['blocks']), block_time)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(ToHex(block))\n \n-        # Should return an empty array if there aren't unconfirmed wallet transactions.\n-        self.stop_node(0)\n-        self.start_node(0, extra_args=[])\n-        assert_equal(self.nodes[0].resendwallettransactions(), [])\n+        # Transaction should not be rebroadcast\n+        node.p2ps[1].sync_with_ping()\n+        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n \n-        # Should return an array with the unconfirmed wallet transaction.\n-        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        assert_equal(self.nodes[0].resendwallettransactions(), [txid])\n+        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n+        # Use mocktime and give an extra 5 minutes to be sure.\n+        rebroadcast_time = int(time.time()) + 41 * 60\n+        node.setmocktime(rebroadcast_time)\n+        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n \n if __name__ == '__main__':\n     ResendWalletTransactionsTest().main()"
      }
    ]
  },
  {
    "sha": "ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmY2NTY2NmMyNmI3ZTJkZmYxYjM1YjE3ZDhmYzQ2NmMzZjM0N2E2",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-27T16:59:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-01T19:46:42Z"
      },
      "message": "wallet: Move CWallet::ReacceptWalletTransactions locks to callers\n\nGithub-Pull: #15652\nRebased-From: 0440481c6bf5683eff669c789bdf6a306d99adc5",
      "tree": {
        "sha": "0feb164cd9f82b2e8121335a9bf2d17c92330cba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0feb164cd9f82b2e8121335a9bf2d17c92330cba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a90db2f175f86b78d8edc5c03b7bb351c8f43e5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a90db2f175f86b78d8edc5c03b7bb351c8f43e5e"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 23,
      "deletions": 10
    },
    "files": [
      {
        "sha": "bdf901dee4d26de9f7fc4f00936f063047d4dd10",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
        "patch": "@@ -346,7 +346,11 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (fRescan)\n     {\n         RescanWallet(*pwallet, reserver);\n-        pwallet->ReacceptWalletTransactions();\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions(*locked_chain);\n+        }\n     }\n \n     return NullUniValue;\n@@ -529,7 +533,11 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (fRescan)\n     {\n         RescanWallet(*pwallet, reserver);\n-        pwallet->ReacceptWalletTransactions();\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions(*locked_chain);\n+        }\n     }\n \n     return NullUniValue;\n@@ -1464,7 +1472,11 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n     if (fRescan && fRunScan && requests.size()) {\n         int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, reserver, true /* update */);\n-        pwallet->ReacceptWalletTransactions();\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions(*locked_chain);\n+        }\n \n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");"
      },
      {
        "sha": "c3193f793ebdf74e2c28802a3f0d112f100f6df7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
        "patch": "@@ -1859,13 +1859,11 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     return result;\n }\n \n-void CWallet::ReacceptWalletTransactions()\n+void CWallet::ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain)\n {\n     // If transactions aren't being broadcasted, don't let them into local mempool either\n     if (!fBroadcastTransactions)\n         return;\n-    auto locked_chain = chain().lock();\n-    LOCK(cs_wallet);\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n@@ -1875,7 +1873,7 @@ void CWallet::ReacceptWalletTransactions()\n         CWalletTx& wtx = item.second;\n         assert(wtx.GetHash() == wtxid);\n \n-        int nDepth = wtx.GetDepthInMainChain(*locked_chain);\n+        int nDepth = wtx.GetDepthInMainChain(locked_chain);\n \n         if (!wtx.IsCoinBase() && (nDepth == 0 && !wtx.isAbandoned())) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n@@ -1886,7 +1884,7 @@ void CWallet::ReacceptWalletTransactions()\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         CValidationState state;\n-        wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state);\n+        wtx.AcceptToMemoryPool(locked_chain, maxTxFee, state);\n     }\n }\n \n@@ -4425,9 +4423,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n void CWallet::postInitProcess()\n {\n+    auto locked_chain = chain().lock();\n+    LOCK(cs_wallet);\n+\n     // Add wallet transactions that aren't already in a block to mempool\n     // Do this here as mempool requires genesis block to be loaded\n-    ReacceptWalletTransactions();\n+    ReacceptWalletTransactions(*locked_chain);\n }\n \n bool CWallet::BackupWallet(const std::string& strDest)"
      },
      {
        "sha": "9a4d252618e0ed3fa0c630eb9aae198288e27f0a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
        "patch": "@@ -943,7 +943,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     };\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n-    void ReacceptWalletTransactions();\n+    void ReacceptWalletTransactions(interfaces::Chain::Lock& locked_chain) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n     std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman);"
      }
    ]
  },
  {
    "sha": "ed0498af2827ccf033c9a7c4f46b82424e411083",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDA0OThhZjI4MjdjY2YwMzNjOWE3YzRmNDZiODI0MjRlNDExMDgz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-27T17:00:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-01T20:34:37Z"
      },
      "message": "interfaces: Add Chain::requestMempoolTransactions\n\nGithub-Pull: #15652\nRebased-From: 57908a739ca377d60ef224ce0f565d4412a414f4",
      "tree": {
        "sha": "27d07231195940aeb8c94760face92f29e5c8c84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27d07231195940aeb8c94760face92f29e5c8c84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0498af2827ccf033c9a7c4f46b82424e411083",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0498af2827ccf033c9a7c4f46b82424e411083",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0498af2827ccf033c9a7c4f46b82424e411083",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0498af2827ccf033c9a7c4f46b82424e411083/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebf65666c26b7e2dff1b35b17d8fc466c3f347a6"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d3d9e86e8d248f9a71b9d5f6d739f46efded7cfc",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed0498af2827ccf033c9a7c4f46b82424e411083/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed0498af2827ccf033c9a7c4f46b82424e411083/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=ed0498af2827ccf033c9a7c4f46b82424e411083",
        "patch": "@@ -8,6 +8,7 @@\n #include <chainparams.h>\n #include <primitives/block.h>\n #include <sync.h>\n+#include <txmempool.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -177,6 +178,13 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n     }\n+    void requestMempoolTransactions(std::function<void(const CTransactionRef&)> fn) override\n+    {\n+        LOCK2(::cs_main, ::mempool.cs);\n+        for (const CTxMemPoolEntry& entry : ::mempool.mapTx) {\n+            fn(entry.GetSharedTx());\n+        }\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "57e970375879ad1cd5958041b0c1ce580d5a30db",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed0498af2827ccf033c9a7c4f46b82424e411083/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed0498af2827ccf033c9a7c4f46b82424e411083/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=ed0498af2827ccf033c9a7c4f46b82424e411083",
        "patch": "@@ -16,6 +16,9 @@ class CBlock;\n class CScheduler;\n class uint256;\n struct CBlockLocator;\n+class CTransaction;\n+\n+using CTransactionRef = std::shared_ptr<const CTransaction>;\n \n namespace interfaces {\n \n@@ -127,6 +130,16 @@ class Chain\n     //! Estimate fraction of total transactions verified if blocks up to\n     //! the specified block hash are verified.\n     virtual double guessVerificationProgress(const uint256& block_hash) = 0;\n+\n+    //! Synchronously send TransactionAddedToMempool notifications about all\n+    //! current mempool transactions to the specified handler and return after\n+    //! the last one is sent. These notifications aren't coordinated with async\n+    //! notifications sent by handleNotifications, so out of date async\n+    //! notifications from handleNotifications can arrive during and after\n+    //! synchronous notifications from requestMempoolTransactions. Clients need\n+    //! to be prepared to handle this by ignoring notifications about unknown\n+    //! removed transactions and already added new transactions.\n+    virtual void requestMempoolTransactions(std::function<void(const CTransactionRef&)> fn) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      }
    ]
  },
  {
    "sha": "59716ec395daaf914924fe5c1a4fbeb5d5031907",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTcxNmVjMzk1ZGFhZjkxNDkyNGZlNWMxYTRmYmViNWQ1MDMxOTA3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-27T17:00:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-01T20:34:37Z"
      },
      "message": "wallet: Update transactions with current mempool after load\n\nGithub-Pull: #15652\nRebased-From: 2ebf650b2eb7a078ab60c8c4d5c726823686f549",
      "tree": {
        "sha": "14abdb75d06087b380eaeaeea5577992edddc16c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14abdb75d06087b380eaeaeea5577992edddc16c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59716ec395daaf914924fe5c1a4fbeb5d5031907",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59716ec395daaf914924fe5c1a4fbeb5d5031907",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59716ec395daaf914924fe5c1a4fbeb5d5031907",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59716ec395daaf914924fe5c1a4fbeb5d5031907/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed0498af2827ccf033c9a7c4f46b82424e411083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0498af2827ccf033c9a7c4f46b82424e411083",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0498af2827ccf033c9a7c4f46b82424e411083"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b1b2a631666cc512fbc4c909c91b7362b86cd522",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59716ec395daaf914924fe5c1a4fbeb5d5031907/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59716ec395daaf914924fe5c1a4fbeb5d5031907/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=59716ec395daaf914924fe5c1a4fbeb5d5031907",
        "patch": "@@ -4429,6 +4429,9 @@ void CWallet::postInitProcess()\n     // Add wallet transactions that aren't already in a block to mempool\n     // Do this here as mempool requires genesis block to be loaded\n     ReacceptWalletTransactions(*locked_chain);\n+\n+    // Update wallet transactions with current mempool transactions.\n+    chain().requestMempoolTransactions([this](const CTransactionRef& tx) { TransactionAddedToMempool(tx); });\n }\n \n bool CWallet::BackupWallet(const std::string& strDest)"
      }
    ]
  },
  {
    "sha": "95faffed264cf54a3b3041db2471c10f5011aabe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWZhZmZlZDI2NGNmNTRhM2IzMDQxZGIyNDcxYzEwZjUwMTFhYWJl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-27T17:00:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-01T20:40:10Z"
      },
      "message": "qa: Check unconfirmed balance after loadwallet\n\nGithub-Pull: #15652\nRebased-From: 4bf1b1cefa9723bf2cfa8b1a938757abc99bb17b",
      "tree": {
        "sha": "7a35f91f61d67cc9295daf467edb52071741552c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a35f91f61d67cc9295daf467edb52071741552c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95faffed264cf54a3b3041db2471c10f5011aabe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95faffed264cf54a3b3041db2471c10f5011aabe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95faffed264cf54a3b3041db2471c10f5011aabe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95faffed264cf54a3b3041db2471c10f5011aabe/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59716ec395daaf914924fe5c1a4fbeb5d5031907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59716ec395daaf914924fe5c1a4fbeb5d5031907",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59716ec395daaf914924fe5c1a4fbeb5d5031907"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a65b684c8890b67db09a6b96d264eeb40991a2d",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95faffed264cf54a3b3041db2471c10f5011aabe/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95faffed264cf54a3b3041db2471c10f5011aabe/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=95faffed264cf54a3b3041db2471c10f5011aabe",
        "patch": "@@ -129,5 +129,17 @@ def run_test(self):\n         # getbalance with minconf=2 will show the new balance.\n         assert_equal(self.nodes[1].getbalance(minconf=2), Decimal('0'))\n \n+        # check mempool transactions count for wallet unconfirmed balance after\n+        # dynamically loading the wallet.\n+        before = self.nodes[1].getunconfirmedbalance()\n+        dst = self.nodes[1].getnewaddress()\n+        self.nodes[1].unloadwallet('')\n+        self.nodes[0].sendtoaddress(dst, 0.1)\n+        self.sync_all()\n+        self.nodes[1].loadwallet('')\n+        after = self.nodes[1].getunconfirmedbalance()\n+        assert_equal(before + Decimal('0.1'), after)\n+\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  }
]