sdaftuar,2020-10-19 18:40:31,I'm still trying to verify that the bug being fixed relating to test-before-evict is in fact a bug (and I'm not just misunderstanding the logic); but if my understanding is correct I think we should fix all these issues in the next release.,https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-712367742,712367742,
DrahtBot,2020-10-19 19:21:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20233 (addrman: Make consistency checks a runtime option by jnewbery)\n* #20228 (addrman: Make addrman a top-level compon",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-712389721,712389721,
naumenkogs,2020-10-20 06:31:28,"Concept ACK.\n\nThe former issues are worth addressing.\nSeems like the latter bug is real, even though the chance of hitting it is rather low.",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-712626312,712626312,
sdaftuar,2020-10-25 15:20:02,"I was able to verify the test-before-evict bug by modifying the tried table to be very small, making collisions with existing peers likely.  The patch here appears to fix it as well.",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-716164872,716164872,
sdaftuar,2020-10-26 18:05:35,"> An alternative approach could be to just periodically refresh the info.nLastSuccess for all active connections. If I'm understanding the addrman code correctly, as long as we're refreshing that value every 4 hours, we'll never evict that peer.\n\n> Adding a StillGood() (with a better name) method to CAddrMan which simply updates nLastSuccess and calling it either globally or per-peer every thr",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-716728387,716728387,
jnewbery,2020-10-26 18:57:45,"> relying on Good() or a StillGood() being called at the right times to avoid this problem as a consequence of how and when those variables get updated just seems unnecessarily complex...? The next time someone wonders if it's possible for an existing peer to be evicted from the tried table, I think it'll be much easier to reason about my proposed change than the alternative you're suggesting.\n",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-716756846,716756846,
sdaftuar,2020-10-26 20:25:50,"> I disagree, but perhaps it's just a matter of taste. To me, making addrman always aware of existing connections and keeping nLastSuccess fresh by periodic notifications from net_processing or net seems much cleaner than only finding out at the point that we attempt to reconnect.\n\nWe could add an interface to addrman so that it explicitly keeps track of currently connected peers, by notifying",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-716802555,716802555,
jnewbery,2020-10-26 22:36:51,"> We could add an interface to addrman so that it explicitly keeps track of currently connected peers, by notifying it when we successfully make new connections and again when a peer disconnects, and then use that to prevent tried collisions with current peers from ever making it into the tried-collision list for later resolution.\n\nYes, that seems like another reasonable approach.\n\nTo be c",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-716861647,716861647,
jnewbery,2020-10-27 12:06:24,"If you squashed the last commit (_Eliminate unnecessary parameter from FinalizeNode()_) with the first commit (_Avoid calling CAddrMan::Connected() on block-relay-only peer addresses_), or even just moved it to be the first commit, you'd avoid having to touch other lines of code (e.g. in denialofservice_tests.cpp) multiple times.",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-717198192,717198192,
jnewbery,2020-10-27 15:05:00,"utACK 430c8b6c0f9381f039d83066aa2cbd70c1d1414b\n\nI think moving the last commit to the beginning would make this easier for other reviewers. Very happy to reACK if you decide to do that while you just have my ACK.",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-717307740,717307740,
sdaftuar,2020-10-27 15:42:24,"Thanks for the review @jnewbery -- I went ahead and squashed that last commit into the first one, so that the `FinalizeNode` interface changes are all together now.",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-717332799,717332799,
jnewbery,2020-10-27 15:58:11,utACK 16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751,https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-717343706,717343706,
sipa,2020-10-28 23:15:50,"I haven't looked at the code here, but just tried to verify the test-before-evict bug you mention. I believe it is indeed there, and will result in the conncted node being forgotten. Consider the following scenario:\n* Addrman has a `tried` entry A and a `new` entry B that would collide with A if moved to the `tried` table. There is a (long term) ongoining outbound connection to A currently.\n* ",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-718261810,718261810,
amitiuttarwar,2020-10-29 05:05:06,"approach ACK - I've read through the code, understand the proposed changes, and think they make sense. \n\nthe update to `Connected` looks good & I agree that the test-before-evict logic was bugged & this patch fixes it. I also appreciate the refactoring to `ThreadOpenConnections`, I've looked at that code before but wasn't able to fully retain the pieces to understand the big picture, but with ",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-718362016,718362016,
sdaftuar,2020-10-30 17:59:36,">I'm not entirely convinced that calling Good for blocks-only peers leaks strictly no information at all (e.g. it updates internal state such as nLastSuccess, which influence IsTerrible(), which influences GetAddr Response selection), but I couldn't think of a way to use that, especially after GetAddr caching (18991).\n\n@mzumsande I agree that it's unlikely we're leaking no information by calli",https://github.com/bitcoin/bitcoin/pull/20187#issuecomment-719709075,719709075,
jnewbery,2020-10-26 08:44:13,"This further splits the logic about whether to call `Connected()` for a node. Now there are three three places that you need to look:\n\n- Is the peer an outbound (https://github.com/bitcoin/bitcoin/blob/dafde15cc04fbeb5851fa98fec34dd9f2a7e8420/src/net_processing.cpp#L2475-L2478)\n- Does the peer have any misbehavior points (https://github.com/bitcoin/bitcoin/blob/dafde15cc04fbeb5851fa98fec34dd",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511795306,511795306,src/net.cpp
jnewbery,2020-10-26 08:50:45,"Is there any reason to net send a `getaddr` message to block relay only peers? See the comment above ""If we're starting up for the first time, our addrman may be pretty empty..."". Since #17428, the first peers we connect to on startup will be anchor connections, which are block relay only peers. I can't see any downside to asking them for addrs.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511799043,511799043,src/net_processing.cpp
jnewbery,2020-10-26 08:52:27,"Make this a doxygen format comment (starting with `/**`, so that doxygen docs can be generated from it: https://doxygen.bitcoincore.org/)",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511800034,511800034,src/net.h
jnewbery,2020-10-26 10:02:25,"This logic is already very convoluted, and I think this change makes it even more difficult to follow. The mainline case (connecting to a new outbound beer), currently calls `SelectedTriedCollision()`, then sets `test_before_evict` to false, and then throws away the return value from `SelectedTriedCollision()` in the `if (!test_before_evict)` block below.\n\nThe logic for feeler connections and ",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511842475,511842475,src/net.cpp
jnewbery,2020-10-26 10:02:49,No need to call this CConnman forwarding function. Just call `addrman.Good()` directly.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511842695,511842695,src/net.cpp
jnewbery,2020-10-26 10:04:27,"Remove the word 'also'. Comments have a habit of migrating around in the codebase, and joining words like also lose their meaning if additional code/comments are added around the existing comments.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511843620,511843620,src/net_processing.cpp
jnewbery,2020-10-26 10:07:51,"Note that this is inefficient (lock cs_vNodes, iterate through nodes, unlock, lock, iterate, unlock), but that was a problem with the existing code. It could be made more efficient by converting this to a `ForEachNode()` call with a lambda returning if the address matches the `CNetAddr` or string.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511845721,511845721,src/net.cpp
jnewbery,2020-10-26 10:09:31,nit: `AlreadyConnectedToAddress()` would be a more accurate name.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511846688,511846688,src/net.cpp
jnewbery,2020-10-26 10:11:15,It might be worth adding a comment about why we search both for the `CNetAddr` _and_ the ip/port string. It was added here: https://github.com/bitcoin/bitcoin/commit/9bab521df895c149579b9e64931405c56b008afb#diff-00021eed586a482abdb09d6cdada1d90115abe988a91421851960e26658bed02R1416 in the PR to add support for SOCKS5.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511847746,511847746,src/net.cpp
sdaftuar,2020-10-26 12:49:12,"Well if you have anchor connections to connect to, you likely have a useful `peers.dat` as well (you must have been running before), so I don't think that reasoning applies.\n\nIf we process an `addr` message from a peer by adding entries to addrman, we then will leak that information in at least two ways I can think of -- feeler connections will be attempted to addresses we learn that are in th",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511933800,511933800,src/net_processing.cpp
sdaftuar,2020-10-26 12:50:21,"Agreed, but I didn't want to rewrite this.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511934522,511934522,src/net.cpp
sdaftuar,2020-10-26 12:52:49,"Agreed that this is confusing.  Originally I was contemplating have code in `net.cpp` that wouldn't call `CAddrMan::Attempt()` on block-relay-only peers, and so having this logic also be in `net.cpp` made more sense to me; but now I think it's fine to move into `net_processing`/`FinalizeNode()`.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511935957,511935957,src/net.cpp
jnewbery,2020-10-26 14:23:01,"Ah, I see that we ignore all `addr` messages from block-relay-only peers anyway, in the addr message processing (https://github.com/bitcoin/bitcoin/blob/d67883d01e507dd22d1281f4a4860e79d6a46a47/src/net_processing.cpp#L2549), so this seems fine.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511998003,511998003,src/net_processing.cpp
jnewbery,2020-10-26 14:31:39,"I'd suggest going further and removing `fCurrentlyConnected`, and then changing `FinalizeNode()` to check whether the peer is:\n- `fSuccessfullyConnected`\n- not inbound and not block relay only\n- has 0 misbehavior score\nand then directly call `CAddrMan.Connected()` directly, so that all the logic around calling `Connected()` is in one place.\n\nIf you agree, perhaps you could take a look ",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512004982,512004982,src/net.cpp
jnewbery,2020-10-26 16:42:38,I think it'd be cleaner to pass in a `const CNode&` and get the id and block relay only state from the CNode.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512106253,512106253,src/net_processing.cpp
jnewbery,2020-10-26 16:43:46,"This is now in FinalizeNode, not net.cpp :)",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512106972,512106972,src/net_processing.cpp
sdaftuar,2020-10-26 16:53:33,Done.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512116986,512116986,src/net.h
sdaftuar,2020-10-26 16:54:49,"I just did the simple thing of moving this to `FinalizeNode()`.  Because there's no good way to get a `CNode` from a `NodeId` while it's in the process of being deleted (as far as I can tell!), I had to change the interface to accommodate this move.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512118406,512118406,src/net.cpp
sdaftuar,2020-10-26 16:55:12,"I'm indifferent, so taking your patch.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512118798,512118798,src/net.cpp
sdaftuar,2020-10-26 16:55:22,I took this change as part of your patch for rewriting the loop.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512118929,512118929,src/net.cpp
sdaftuar,2020-10-26 16:55:29,Done.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512119008,512119008,src/net_processing.cpp
sdaftuar,2020-10-26 16:55:37,"Agreed, done.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512119091,512119091,src/net.cpp
sdaftuar,2020-10-26 16:55:43,Care to suggest a comment?  I'm not sure my understanding of when we might be looking up by `CNetAddr` versus string is precise enough to say the right thing here.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512119159,512119159,src/net.cpp
jnewbery,2020-10-26 17:12:59,"I was hoping you might have a better understanding of this than me :grin: . My understanding of how hostnames/proxies work in Bitcoin Core is certainly too hazy to suggest any wording here.\n\nI'm going to mark this as resolved. It'd be good to document why we're doing this, but this PR isn't changing the behavior, so it's certainly not a blocker.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512130998,512130998,src/net.cpp
jnewbery,2020-10-26 17:13:31,That's reasonable. It's not a change in behaviour. Marking resolved.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512131320,512131320,src/net.cpp
jnewbery,2020-10-26 17:16:02,"`DeleteNode()` is holding a reference to the `CNode`, so you should just be able to pass a const reference to that CNode down to `FinalizeNode()`. That'd be more symmetrical with the other `NetEventsInterface` interface functions (you could also pass a pointer like the other functions, but they should all be const references really)",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512133129,512133129,src/net.cpp
sdaftuar,2020-10-26 18:28:31,Done.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512179647,512179647,src/net_processing.cpp
sdaftuar,2020-10-26 18:28:44,"Oops, thanks for catching that. Fixed.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512179793,512179793,src/net_processing.cpp
jnewbery,2020-10-26 18:50:11,"Sorry I wasn't clear here, but you can also drop the `NodeId` argument from the function signature, and then call `GetId()` from within `FinalizeNode()`. Passing both CNode& and NodeId is somewhat redundant.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512192998,512192998,src/net_processing.cpp
sdaftuar,2020-10-26 19:56:02,Done in 430c8b6c0f9381f039d83066aa2cbd70c1d1414b.,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512230086,512230086,src/net_processing.cpp
jnewbery,2020-10-27 09:32:02,"nit: if you have to retouch the branch, you could make this const.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512536970,512536970,src/net_processing.cpp
jnewbery,2020-10-27 09:46:44,"This will call `Good()` for any address that we're connected to, including inbound peers. That's different from the current behavior, where we're careful to not call `Good()` for inbounds. The result of that is we'll move addresses of inbound peers to the tried table, even though we've never actually successfully connected out to them.\n\nDoes this open up a gap where an attacker can get address",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512546431,512546431,src/net.cpp
sdaftuar,2020-10-27 12:40:39,"That can only happen if there's a tried-table collision with the address of the inbound peer -- so that inbound peer's address is already in our tried-table anyway...  I don't think calling `Good()` on an address already in our tried-table can be all that detrimental?  I think there are two cases to consider:\n- If we were to initiate an outbound connection to the address, it would accept it, and",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512658215,512658215,src/net.cpp
jnewbery,2020-10-27 14:16:30,"Ah yes, of course you're right. Anything returned from `SelectTriedCollision()` must by definition already be in the tried table.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r512729365,512729365,src/net.cpp
jonatack,2020-10-28 17:23:11,"Commented this here for my own understanding while parsing the changed logic in 16d9bfc4172b4f6ce2.\n```diff\n-                }\n+                } // Otherwise, keep the selected addr if we have a tried\n+                  // collision we're not already connected to.\n```\n",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r513627928,513627928,src/net.cpp
sipa,2020-10-29 00:06:09,Very happy to see this rewritten. The logic where we always called `SelectTriedCollision` and then throw out the result if `!fFeeler` was very confusing (and inefficient...).,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r513833238,513833238,src/net.cpp
ariard,2020-10-30 00:48:45,"I would mention the reference to anchors you made in PR description. Otherwise, I don't think this change is that much valuable if we had only non-persistent block-relay peers. I don't see how learning a past connection would significantly help an attacker to disrupt them further in the future, `CAddrInfo.nTime` isn't considered by `AddrMan::Select` ?\n\nNote, maybe we should rename `AddrMan::Co",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r514646785,514646785,src/net_processing.cpp
ariard,2020-10-30 01:56:16,"If the peer connection is initiated based on hostname (e.g `-seednode`, `-addnode`) we have to resolve first the provided hostname to obtain the addr (in `ConnectNode`).  If we succeed this resolution, we store the hostname (`MaybeSetAddrName`). In case of future connection also from hostname (`OpenNetworkConnection` with `pszDest != null`), for already-open connection check step, search is done o",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r514692064,514692064,src/net.cpp
sipa,2020-10-30 02:27:25,"@ariard If there is a name proxy, we never resolve ourselves, and instead make a proxy connection to the specified name (by asking the proxy to do the resolving for us). In that case there is no `CNetAddr` known.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r514721020,514721020,src/net.cpp
ajtowns,2020-10-30 02:53:17,@sipa But `CAddress& addr` is a `CNetAddr` and `addr.ToStringIPPort()` generates a string from the `CNetAddr` member variables? As far as I can see there's no way to initialise `CNetAddr::m_addr` to something like `::1` or `0:0:0:0:0:0:0:1` which would be disambiguated by converting to a canonical string?,https://github.com/bitcoin/bitcoin/pull/20187#discussion_r514746020,514746020,src/net.cpp
sipa,2020-10-30 02:54:41,"Oh, right. What I said isn't relevant here.",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r514747385,514747385,src/net.cpp
sdaftuar,2020-10-30 14:27:50,"> I would mention the reference to anchors you made in PR description. Otherwise, I don't think this change is that much valuable if we had only non-persistent block-relay peers. I don't see how learning a past connection would significantly help an attacker to disrupt them further in the future, CAddrInfo.nTime isn't considered by AddrMan::Select ?\n\nPerhaps it doesn't, but I think if we left ",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r515137714,515137714,src/net_processing.cpp
mzumsande,2020-10-30 16:50:13,"This line confused me into thinking that `addrman::Connected()` could also be called for inbound peers on disconnection - which would be not ideal, because then our peer might be leaking the information about our long-term blocks-only connections by updating `nTime` on their side of the connection.\n\nHowever, if I read the code correctly, `fCurrentlyConnected`, despite its name, actually rather",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r515236277,515236277,src/net_processing.cpp
jnewbery,2020-10-30 17:47:26,"Yes, you're exactly right. See https://github.com/bitcoin/bitcoin/pull/20187#discussion_r511795306.\n\nIt'd be great to consolidate the `pfrom.IsInboundConn()` check here too. That could easily be done as a follow up, eliminating `fCurrentlyConnected` entirely (and using `fSuccessfullyConnected` to check that the version handshake is complete).",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r515276256,515276256,src/net_processing.cpp
ariard,2020-11-01 02:54:33,"> So philosophically I still think no interaction should be our default way of thinking, and an exception to that is being proposed in this PR because I don't have a better alternative right now. But I would hate for someone to later argue that it's somehow safe to make these addrman calls because we don't know of an information leak\n\nRight, I concede fixing the information leak in itself is v",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r515567688,515567688,src/net_processing.cpp
amitiuttarwar,2020-11-01 03:39:05,"@sipa, so do you agree having the two lookups seems redundant? or am I missing something?",https://github.com/bitcoin/bitcoin/pull/20187#discussion_r515570640,515570640,src/net.cpp
