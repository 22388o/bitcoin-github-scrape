[
  {
    "sha": "daf55531260833d597ee599e2d289ea1be0b1d9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWY1NTUzMTI2MDgzM2Q1OTdlZTU5OWUyZDI4OWVhMWJlMGIxZDlj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-24T07:16:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-27T15:14:58Z"
      },
      "message": "Avoid calling CAddrMan::Connected() on block-relay-only peer addresses\n\nConnected() updates the time we serve in addr messages, so avoid leaking\nblock-relay-only peer connections by avoiding these calls.",
      "tree": {
        "sha": "11c9097434ce1645353d6094419f384ae5d65c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11c9097434ce1645353d6094419f384ae5d65c2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daf55531260833d597ee599e2d289ea1be0b1d9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daf55531260833d597ee599e2d289ea1be0b1d9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daf55531260833d597ee599e2d289ea1be0b1d9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daf55531260833d597ee599e2d289ea1be0b1d9c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d67883d01e507dd22d1281f4a4860e79d6a46a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67883d01e507dd22d1281f4a4860e79d6a46a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67883d01e507dd22d1281f4a4860e79d6a46a47"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9680e9947d6228c8a9afecea5fa7985c3dd24697",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=daf55531260833d597ee599e2d289ea1be0b1d9c",
        "patch": "@@ -2624,7 +2624,7 @@ void CConnman::DeleteNode(CNode* pnode)\n {\n     assert(pnode);\n     bool fUpdateConnectionTime = false;\n-    m_msgproc->FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n+    m_msgproc->FinalizeNode(*pnode, fUpdateConnectionTime);\n     if (fUpdateConnectionTime) {\n         addrman.Connected(pnode->addr);\n     }"
      },
      {
        "sha": "fc01f44dd2d9ac1835d2afe299de5d1d6524d34d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=daf55531260833d597ee599e2d289ea1be0b1d9c",
        "patch": "@@ -618,7 +618,7 @@ class NetEventsInterface\n     virtual bool ProcessMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n     virtual bool SendMessages(CNode* pnode) = 0;\n     virtual void InitializeNode(CNode* pnode) = 0;\n-    virtual void FinalizeNode(NodeId id, bool& update_connection_time) = 0;\n+    virtual void FinalizeNode(const CNode& node, bool& update_connection_time) = 0;\n \n protected:\n     /**"
      },
      {
        "sha": "a4dfab62e2ccc888b194c0c5fdc4a280a655a88e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=daf55531260833d597ee599e2d289ea1be0b1d9c",
        "patch": "@@ -837,7 +837,8 @@ void PeerManager::ReattemptInitialBroadcast(CScheduler& scheduler) const\n     scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n }\n \n-void PeerManager::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n+void PeerManager::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) {\n+    NodeId nodeid = node.GetId();\n     fUpdateConnectionTime = false;\n     LOCK(cs_main);\n     int misbehavior{0};\n@@ -854,7 +855,8 @@ void PeerManager::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n     if (state->fSyncStarted)\n         nSyncStarted--;\n \n-    if (misbehavior == 0 && state->fCurrentlyConnected) {\n+    if (misbehavior == 0 && state->fCurrentlyConnected && !node.IsBlockOnlyConn()) {\n+        // Note: we avoid changing visible addrman state for block-relay-only peers\n         fUpdateConnectionTime = true;\n     }\n "
      },
      {
        "sha": "87eee566deb83e89d04e985d48200be17ab62b99",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daf55531260833d597ee599e2d289ea1be0b1d9c/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=daf55531260833d597ee599e2d289ea1be0b1d9c",
        "patch": "@@ -58,7 +58,7 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n     void InitializeNode(CNode* pnode) override;\n     /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;\n+    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n     /**\n     * Process protocol messages received from a given node\n     *"
      },
      {
        "sha": "c399da900f6ac658f05f61c9e78066731a7a7ac6",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daf55531260833d597ee599e2d289ea1be0b1d9c/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daf55531260833d597ee599e2d289ea1be0b1d9c/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=daf55531260833d597ee599e2d289ea1be0b1d9c",
        "patch": "@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     SetMockTime(0);\n \n     bool dummy;\n-    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+    peerLogic->FinalizeNode(dummyNode1, dummy);\n }\n \n static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &peerLogic, CConnmanTest* connman)\n@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n     bool dummy;\n     for (const CNode *node : vNodes) {\n-        peerLogic->FinalizeNode(node->GetId(), dummy);\n+        peerLogic->FinalizeNode(*node, dummy);\n     }\n \n     connman->ClearNodes();\n@@ -259,8 +259,8 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n \n     bool dummy;\n-    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n-    peerLogic->FinalizeNode(dummyNode2.GetId(), dummy);\n+    peerLogic->FinalizeNode(dummyNode1, dummy);\n+    peerLogic->FinalizeNode(dummyNode2, dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n@@ -288,7 +288,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     BOOST_CHECK(banman->IsDiscouraged(addr));\n \n     bool dummy;\n-    peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n+    peerLogic->FinalizeNode(dummyNode, dummy);\n }\n \n static CTransactionRef RandomOrphan()"
      }
    ]
  },
  {
    "sha": "4fe338ab3ed73b3ffb20eedf95500c56ec2920e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmUzMzhhYjNlZDczYjNmZmIyMGVlZGY5NTUwMGM1NmVjMjkyMGUx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-19T13:31:51Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-27T15:15:21Z"
      },
      "message": "Call CAddrMan::Good() on block-relay-only peer addresses\n\nBeing able to invoke Good() is important for address management (new vs tried\ntable, tried table eviction via test-before-evict). We mitigate potential\ninformation leaks by not calling Connected() on these peer addresses.",
      "tree": {
        "sha": "bf31b79769476a8ff767d4168e07089e5e2777d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf31b79769476a8ff767d4168e07089e5e2777d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "daf55531260833d597ee599e2d289ea1be0b1d9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daf55531260833d597ee599e2d289ea1be0b1d9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/daf55531260833d597ee599e2d289ea1be0b1d9c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e57ddbb116882cdd3a1970ee913f9445fdaa0d20",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4fe338ab3ed73b3ffb20eedf95500c56ec2920e1",
        "patch": "@@ -2407,14 +2407,8 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             // empty and no one will know who we are, so these mechanisms are\n             // important to help us connect to the network.\n             //\n-            // We also update the addrman to record connection success for\n-            // these peers (which include OUTBOUND_FULL_RELAY and FEELER\n-            // connections) so that addrman will have an up-to-date notion of\n-            // which peers are online and available.\n-            //\n-            // We skip these operations for BLOCK_RELAY peers to avoid\n-            // potentially leaking information about our BLOCK_RELAY\n-            // connections via the addrman or address relay.\n+            // We skip this for BLOCK_RELAY peers to avoid potentially leaking\n+            // information about our BLOCK_RELAY connections via address relay.\n             if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom.addr, pfrom.GetLocalServices());\n@@ -2433,9 +2427,23 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             // Get recent addresses\n             m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(NetMsgType::GETADDR));\n             pfrom.fGetAddr = true;\n+        }\n \n-            // Moves address from New to Tried table in Addrman, resolves\n-            // tried-table collisions, etc.\n+        if (!pfrom.IsInboundConn()) {\n+            // For non-inbound connections, we update the addrman to record\n+            // connection success so that addrman will have an up-to-date\n+            // notion of which peers are online and available.\n+            //\n+            // While we strive to not leak information about block-relay-only\n+            // connections via the addrman, not moving an address to the tried\n+            // table is also potentially detrimental because new-table entries\n+            // are subject to eviction in the event of addrman collisions.  We\n+            // mitigate the information-leak by never calling\n+            // CAddrMan::Connected() on block-relay-only peers; see\n+            // FinalizeNode().\n+            //\n+            // This moves an address from New to Tried table in Addrman,\n+            // resolves tried-table collisions, etc.\n             m_connman.MarkAddressGood(pfrom.addr);\n         }\n "
      }
    ]
  },
  {
    "sha": "e8b215a086d91a8774210bb6ce8d1560aaaf0789",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGIyMTVhMDg2ZDkxYTg3NzQyMTBiYjZjZThkMTU2MGFhYWYwNzg5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-16T15:10:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-27T15:15:21Z"
      },
      "message": "Refactor test for existing peer connection into own function",
      "tree": {
        "sha": "9d4018c2fde49bf922ef39b7accdcec067ea0d74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d4018c2fde49bf922ef39b7accdcec067ea0d74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8b215a086d91a8774210bb6ce8d1560aaaf0789",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b215a086d91a8774210bb6ce8d1560aaaf0789",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b215a086d91a8774210bb6ce8d1560aaaf0789",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b215a086d91a8774210bb6ce8d1560aaaf0789/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fe338ab3ed73b3ffb20eedf95500c56ec2920e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fe338ab3ed73b3ffb20eedf95500c56ec2920e1"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "11e975c3a9cc6a7a323442a0f07179ceab2e7e15",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8b215a086d91a8774210bb6ce8d1560aaaf0789/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8b215a086d91a8774210bb6ce8d1560aaaf0789/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e8b215a086d91a8774210bb6ce8d1560aaaf0789",
        "patch": "@@ -354,6 +354,11 @@ CNode* CConnman::FindNode(const CService& addr)\n     return nullptr;\n }\n \n+bool CConnman::AlreadyConnectedToAddress(const CAddress& addr)\n+{\n+    return FindNode(static_cast<CNetAddr>(addr)) || FindNode(addr.ToStringIPPort());\n+}\n+\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n@@ -2160,7 +2165,7 @@ void CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     }\n     if (!pszDest) {\n         bool banned_or_discouraged = m_banman && (m_banman->IsDiscouraged(addrConnect) || m_banman->IsBanned(addrConnect));\n-        if (IsLocal(addrConnect) || FindNode(static_cast<CNetAddr>(addrConnect)) || banned_or_discouraged || FindNode(addrConnect.ToStringIPPort())) {\n+        if (IsLocal(addrConnect) || banned_or_discouraged || AlreadyConnectedToAddress(addrConnect)) {\n             return;\n         }\n     } else if (FindNode(std::string(pszDest)))"
      },
      {
        "sha": "77649247d95a7ef6b42ef83fa8ef2504bedea7c6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8b215a086d91a8774210bb6ce8d1560aaaf0789/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8b215a086d91a8774210bb6ce8d1560aaaf0789/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e8b215a086d91a8774210bb6ce8d1560aaaf0789",
        "patch": "@@ -442,6 +442,12 @@ class CConnman\n     CNode* FindNode(const std::string& addrName);\n     CNode* FindNode(const CService& addr);\n \n+    /**\n+     * Determine whether we're already connected to a given address, in order to\n+     * avoid initiating duplicate connections.\n+     */\n+    bool AlreadyConnectedToAddress(const CAddress& addr);\n+\n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type);\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;"
      }
    ]
  },
  {
    "sha": "16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmQ5YmZjNDE3MmI0ZjZjZTI0YTNjZDFhMWNmYTM5MzNjZDI2NzUx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-16T18:05:09Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-10-27T15:15:21Z"
      },
      "message": "Avoid test-before-evict evictions of current peers\n\nOutbound peer logic prevents connecting to addresses that we're already\nconnected to, so prevent inadvertent eviction of current peers via\ntest-before-evict by checking this condition and marking current peer's\naddresses as Good().\n\nCo-authored-by: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "78ab57787329a7b58c7b80a38384bdb3856aa067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78ab57787329a7b58c7b80a38384bdb3856aa067"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8b215a086d91a8774210bb6ce8d1560aaaf0789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b215a086d91a8774210bb6ce8d1560aaaf0789",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b215a086d91a8774210bb6ce8d1560aaaf0789"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 23,
      "deletions": 4
    },
    "files": [
      {
        "sha": "468358a94d1e77a8636668dbb5f0e5969e633ea8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 4,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=16d9bfc4172b4f6ce24a3cd1a1cfa3933cd26751",
        "patch": "@@ -1999,11 +1999,30 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             if (nTries > 100)\n                 break;\n \n-            CAddrInfo addr = addrman.SelectTriedCollision();\n+            CAddrInfo addr;\n \n-            // SelectTriedCollision returns an invalid address if it is empty.\n-            if (!fFeeler || !addr.IsValid()) {\n-                addr = addrman.Select(fFeeler);\n+            if (fFeeler) {\n+                // First, try to get a tried table collision address. This returns\n+                // an empty (invalid) address if there are no collisions to try.\n+                addr = addrman.SelectTriedCollision();\n+\n+                if (!addr.IsValid()) {\n+                    // No tried table collisions. Select a new table address\n+                    // for our feeler.\n+                    addr = addrman.Select(true);\n+                } else if (AlreadyConnectedToAddress(addr)) {\n+                    // If test-before-evict logic would have us connect to a\n+                    // peer that we're already connected to, just mark that\n+                    // address as Good(). We won't be able to initiate the\n+                    // connection anyway, so this avoids inadvertently evicting\n+                    // a currently-connected peer.\n+                    addrman.Good(addr);\n+                    // Select a new table address for our feeler instead.\n+                    addr = addrman.Select(true);\n+                }\n+            } else {\n+                // Not a feeler\n+                addr = addrman.Select();\n             }\n \n             // Require outbound connections, other than feelers, to be to distinct network groups"
      }
    ]
  }
]