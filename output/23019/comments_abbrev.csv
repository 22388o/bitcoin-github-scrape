DrahtBot,2021-09-18 01:47:50,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23417](https://github.com/bitcoin/bitcoin/pull/23417) (wallet, spkm: Move key management from DescriptorScriptPubKeyMan ",https://github.com/bitcoin/bitcoin/pull/23019#issuecomment-922158351,922158351,
achow101,2021-09-24 19:03:16,"Approach NACK\n\nI started reviewing, but I have some fundamental issues with the approach taken. I like the general idea, but this specific implementation has issues.\n\nFirst of all, why does this even need to take parameters? I don't see why a ""starting index"" or ""ending index"" need to be provided. We shouldn't need to derive addresses on the fly because they should already be in the wallet",https://github.com/bitcoin/bitcoin/pull/23019#issuecomment-926856642,926856642,
lsilva01,2021-09-27 06:41:15,"@achow101 thanks for detailed review.\n\nMy original implementation used the keypool (for legacy wallets), m_wallet_descriptor (for descriptor wallets) and key metadata.\nOriginally, the `ScriptPubKeyMan::ListAddresses()` methods also didn't call `TopUp()`. \n\nBut the problem is the following case: if the user wants to know some address whose index is greater than the keypool total (such as ",https://github.com/bitcoin/bitcoin/pull/23019#issuecomment-927576568,927576568,
achow101,2021-09-27 16:25:44,"> But the problem is the following case: if the user wants to know some address whose index is greater than the keypool total (such as 2395th), an error would be generated. Deriving addresses solved this issue. The listaddresses RPC would work regardless of keypool size.\n\nI don't think that is a situation we should support. It would mean that users could get addresses that are not currently be",https://github.com/bitcoin/bitcoin/pull/23019#issuecomment-928047795,928047795,
lsilva01,2021-09-30 03:58:24,"I removed the indexes and changed the code to use address book, the keypool, and key metadata.\nThe results of this RPC are:\n\n. Legacy wallet:  The addresses from `address book` (those returned by `getnewaddress`) are not ordered, but the those from  keypool are in the correct BIP32 derivation order.  This is a limitation on legacy wallet result, since keypool erases the key in `getnewaddress",https://github.com/bitcoin/bitcoin/pull/23019#issuecomment-930759617,930759617,
luke-jr,2021-09-20 17:21:41,"Addresses don't hold funds. They only receive, never send.\n\nInstead, it should just tally the total received ever.",https://github.com/bitcoin/bitcoin/pull/23019#discussion_r712367521,712367521,src/wallet/rpcwallet.cpp
lsilva01,2021-09-21 23:33:07,"The code to count the total received is already available in the function. It can be done.\n\nBut address explorers in most software wallets, such as Electrum and Specter Desktop, only show the funds available to be spent at each address. I think the idea is to see how the UTXO values are distributed across the addresses (if there is any significant gap, for example).",https://github.com/bitcoin/bitcoin/pull/23019#discussion_r713488076,713488076,src/wallet/rpcwallet.cpp
achow101,2021-09-30 18:40:21,"In dd28fcb4d868763b47a62a41d2114462407481c2 ""Add listaddresses RPC""\n\nIt seems like instead of doing this, you could just have `CWallet::ListAddresses` do internal too.",https://github.com/bitcoin/bitcoin/pull/23019#discussion_r719666816,719666816,src/wallet/rpcwallet.cpp
achow101,2021-09-30 18:51:04,"In dd28fcb4d868763b47a62a41d2114462407481c2 ""Add listaddresses RPC""\n\nThis section is somewhat duplicated with `getaddressinfo`. I think it would be better to refactor that so that these can share the same code. Additionally, this does not need to be in the wallet (and thus require the introduction of another struct). I would prefer if you just did it in the RPC code.",https://github.com/bitcoin/bitcoin/pull/23019#discussion_r719673814,719673814,src/wallet/wallet.cpp
achow101,2021-09-30 18:54:58,"In dd28fcb4d868763b47a62a41d2114462407481c2 ""Add listaddresses RPC""\n\nIt would be more efficient to iterate `m_map_script_pub_keys` than to expand the descriptor again. This would also work for descriptors that have hardened derivation as the last step.",https://github.com/bitcoin/bitcoin/pull/23019#discussion_r719676303,719676303,src/wallet/scriptpubkeyman.cpp
lsilva01,2021-10-01 23:30:53,Done in 4c2625a .,https://github.com/bitcoin/bitcoin/pull/23019#discussion_r720586976,720586976,src/wallet/rpcwallet.cpp
lsilva01,2021-10-01 23:32:18,"Done in 4c2625a.\n\n`m_map_script_pub_keys` is sorted by descriptor range index before iteration.",https://github.com/bitcoin/bitcoin/pull/23019#discussion_r720587252,720587252,src/wallet/scriptpubkeyman.cpp
lsilva01,2021-10-01 23:36:35,"Done in fcade9b.\n\nCreated a new function that both `getaddressinfo` and `listaddresses` call.\nThis new function keeps the order of `getaddressinfo` fields.",https://github.com/bitcoin/bitcoin/pull/23019#discussion_r720588249,720588249,src/wallet/wallet.cpp
