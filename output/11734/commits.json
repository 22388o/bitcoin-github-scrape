[
  {
    "sha": "6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTliZDRlNjM4ZjkxN2JmMWY3ZTVmZWQzYjljYzA0M2VkZGY0ODQw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-21T08:53:14Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-22T07:32:24Z"
      },
      "message": "rpc: Work around Clang thread safety analysis quirks\n\nThe conditional lock ...\n\n```\nLOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr)\n```\n\n... confuses Clang's thread safety analysis (it complains\nabout not holding the mutex pwallet->cs_wallet even in the\ncase when pwallet is non-NULL).\n\nSo does the access to `pwallet->mapKeyMetadata` via `meta`\n(it complains about not holding the mutex `cs_wallet`\ndespite `pwallet->cs_wallet` being held).\n\nThis commit introduces locking that Clang's thread safety\nanalysis is able to understand correctly.",
      "tree": {
        "sha": "c7b4b218f163ce44b0f31350593ae1042e33fdc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7b4b218f163ce44b0f31350593ae1042e33fdc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4267a3ab271d9affd3c1b0c2e30062490af804e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4267a3ab271d9affd3c1b0c2e30062490af804e"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "2425d8cd96449a3121d8b8aa1d235f6261e4ca96",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=6a9bd4e638f917bf1f7e5fed3b9cc043eddf4840",
        "patch": "@@ -183,17 +183,22 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n-        }\n         if (pwallet) {\n-            const auto& meta = pwallet->mapKeyMetadata;\n+            // Re-acquiring already held recursive lock to work around a Clang\n+            // thread safety analysis quirk. This lock is technically redundant.\n+            AssertLockHeld(pwallet->cs_wallet);\n+            LOCK(pwallet->cs_wallet);\n+\n+            auto i = pwallet->mapAddressBook.find(dest);\n+            if (i != pwallet->mapAddressBook.end()) {\n+                ret.push_back(Pair(\"account\", i->second.name));\n+            }\n             const CKeyID *keyID = boost::get<CKeyID>(&dest);\n-            auto it = keyID ? meta.find(*keyID) : meta.end();\n-            if (it == meta.end()) {\n-                it = meta.find(CScriptID(scriptPubKey));\n+            auto it = keyID ? pwallet->mapKeyMetadata.find(*keyID) : pwallet->mapKeyMetadata.end();\n+            if (it == pwallet->mapKeyMetadata.end()) {\n+                it = pwallet->mapKeyMetadata.find(CScriptID(scriptPubKey));\n             }\n-            if (it != meta.end()) {\n+            if (it != pwallet->mapKeyMetadata.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {\n                     ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));"
      }
    ]
  }
]