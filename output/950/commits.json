[
  {
    "sha": "c682cdf3eda0f55297eb0e72a04508b7b9c2f5df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjgyY2RmM2VkYTBmNTUyOTdlYjBlNzJhMDQ1MDhiN2I5YzJmNWRm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-19T01:02:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-19T14:47:05Z"
      },
      "message": "Use unpadded encryption for wallet keys (fixes #933)\n\nWallet keys are 32 bytes, exactly two AES blocks. Using padded encryption\nmakes attacking somewhat easier, as the attacker can check whether the\npadding is correct after decrypting using an attempted passphrase, rather\nthan needing to do an EC multiplication to check whether the private and\npublic keys match.",
      "tree": {
        "sha": "818d94888ab26cbc7d64dafe9f62ea48ade9a566",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/818d94888ab26cbc7d64dafe9f62ea48ade9a566"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "840f69c582b35391d38524e5216991836035d1db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/840f69c582b35391d38524e5216991836035d1db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/840f69c582b35391d38524e5216991836035d1db"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d7c499268638c37812e4ced8e29c87cd93e69c64",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=c682cdf3eda0f55297eb0e72a04508b7b9c2f5df",
        "patch": "@@ -60,7 +60,7 @@ bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigne\n     return true;\n }\n \n-bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)\n+bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext, bool fPad)\n {\n     if (!fKeySet)\n         return false;\n@@ -75,6 +75,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n \n     EVP_CIPHER_CTX_init(&ctx);\n     EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);\n+    EVP_CIPHER_CTX_set_padding(&ctx, fPad);\n \n     EVP_EncryptUpdate(&ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen);\n     EVP_EncryptFinal_ex(&ctx, (&vchCiphertext[0])+nCLen, &nFLen);\n@@ -85,7 +86,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)\n+bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext, bool fPad)\n {\n     if (!fKeySet)\n         return false;\n@@ -100,6 +101,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n \n     EVP_CIPHER_CTX_init(&ctx);\n     EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV);\n+    EVP_CIPHER_CTX_set_padding(&ctx, fPad);\n \n     EVP_DecryptUpdate(&ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen);\n     EVP_DecryptFinal_ex(&ctx, (&vchPlaintext[0])+nPLen, &nFLen);\n@@ -118,7 +120,7 @@ bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, con\n     memcpy(&chIV[0], &nIV, WALLET_CRYPTO_KEY_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n-    return cKeyCrypter.Encrypt((CKeyingMaterial)vchPlaintext, vchCiphertext);\n+    return cKeyCrypter.Encrypt((CKeyingMaterial)vchPlaintext, vchCiphertext, false);\n }\n \n bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CSecret& vchPlaintext)\n@@ -128,5 +130,8 @@ bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned\n     memcpy(&chIV[0], &nIV, WALLET_CRYPTO_KEY_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n-    return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));\n+    if (!cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext), false))\n+        return false;\n+    vchPlaintext.resize(WALLET_CRYPTO_KEY_SIZE); // cut off padding left by versions <0.6.0\n+    return true;\n }"
      },
      {
        "sha": "edfc660608812df424ee6b4dd6faf162cbd3199c",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=c682cdf3eda0f55297eb0e72a04508b7b9c2f5df",
        "patch": "@@ -67,8 +67,8 @@ class CCrypter\n \n public:\n     bool SetKeyFromPassphrase(const SecureString &strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod);\n-    bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext);\n-    bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext);\n+    bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext, bool fPad = true);\n+    bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext, bool fPad = true);\n     bool SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV);\n \n     void CleanKey()"
      },
      {
        "sha": "c11e306abe90b2758abcc831eda19913fa77a2ee",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c682cdf3eda0f55297eb0e72a04508b7b9c2f5df/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c682cdf3eda0f55297eb0e72a04508b7b9c2f5df",
        "patch": "@@ -81,8 +81,9 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n         {\n             if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n-            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n+            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey, false))\n                 return false;\n+            vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE); // cut off padding left by versions <0.6.0\n             if (CCryptoKeyStore::Unlock(vMasterKey))\n                 return true;\n         }\n@@ -103,8 +104,9 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n         {\n             if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n-            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n+            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey, false))\n                 return false;\n+            vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n             if (CCryptoKeyStore::Unlock(vMasterKey))\n             {\n                 int64 nStartTime = GetTimeMillis();\n@@ -122,7 +124,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n                 if (!crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                     return false;\n-                if (!crypter.Encrypt(vMasterKey, pMasterKey.second.vchCryptedKey))\n+                if (!crypter.Encrypt(vMasterKey, pMasterKey.second.vchCryptedKey, false))\n                     return false;\n                 CWalletDB(strWalletFile).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n                 if (fWasLocked)\n@@ -207,7 +209,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n     if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n         return false;\n-    if (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey))\n+    if (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey, false))\n         return false;\n \n     CRITICAL_BLOCK(cs_wallet)"
      }
    ]
  }
]