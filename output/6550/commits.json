[
  {
    "sha": "391dff16fe9ace90fc0f3308a5c63c453370e713",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTFkZmYxNmZlOWFjZTkwZmMwZjMzMDhhNWM2M2M0NTMzNzBlNzEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-08-11T19:03:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-09-22T16:51:07Z"
      },
      "message": "Do not store Merkle branches in the wallet.\n\nAssume that when a wallet transaction has a valid block hash and transaction position\nin it, the transaction is actually there. We're already trusting wallet data in a\nmuch more fundamental way anyway.\n\nTo prevent backward compatibility issues, a new record is used for storing the\nblock locator in the wallet. Old wallets will see a wallet file synchronized up\nto the genesis block, and rescan automatically.",
      "tree": {
        "sha": "3337a40ad6bca7c57560c45d091bb9ebfd6523cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3337a40ad6bca7c57560c45d091bb9ebfd6523cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/391dff16fe9ace90fc0f3308a5c63c453370e713",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/391dff16fe9ace90fc0f3308a5c63c453370e713",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/391dff16fe9ace90fc0f3308a5c63c453370e713",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/391dff16fe9ace90fc0f3308a5c63c453370e713/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e59d2a80f9167031521d882394a08b02fa9d0343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e59d2a80f9167031521d882394a08b02fa9d0343",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e59d2a80f9167031521d882394a08b02fa9d0343"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 25,
      "deletions": 73
    },
    "files": [
      {
        "sha": "bef9af60ef00d14e7356cde43b9da3d8fe467032",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -105,6 +105,15 @@ In this version, it is only enforced for peers that send protocol versions\n removed. It is recommended to update SPV clients to check for the `NODE_BLOOM`\n service bit for nodes that report versions newer than 70011.\n \n+Merkle branches removed from wallet\n+-----------------------------------\n+\n+Previously, every wallet transaction stored a Merkle branch to prove its\n+presence in blocks. This wasn't being used for more than an expensive\n+sanity check. Since 0.12, these are no longer stored. When loading a\n+0.12 wallet into an older version, it will automatically rescan to avoid\n+failed checks.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "15b86cdda639de310ede720eeb535330679114ea",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -31,7 +31,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n     genesis.nVersion = nVersion;\n     genesis.vtx.push_back(txNew);\n     genesis.hashPrevBlock.SetNull();\n-    genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n+    genesis.hashMerkleRoot = genesis.ComputeMerkleRoot();\n     return genesis;\n }\n "
      },
      {
        "sha": "a05f59ee0cd9c1db286639c685095a418c12ff43",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -48,7 +48,7 @@ static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n }\n \n static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n-    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n+    size_t mem = memusage::DynamicUsage(block.vtx);\n     for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n         mem += RecursiveDynamicUsage(*it);\n     }"
      },
      {
        "sha": "1e0194e2cdfffb508da2e8c1a70570357d4044b0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -2595,7 +2595,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;\n-        uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n+        uint256 hashMerkleRoot2 = block.ComputeMerkleRoot(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n             return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);"
      },
      {
        "sha": "42c8bb970b9b5aa051af5b280944b9895a67f114",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -368,7 +368,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;\n-    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n }\n \n //////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "7a58074d2404ccf6c43bc1140847dfffb968ea51",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 37,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -15,7 +15,7 @@ uint256 CBlockHeader::GetHash() const\n     return SerializeHash(*this);\n }\n \n-uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n+uint256 CBlock::ComputeMerkleRoot(bool* fMutated) const\n {\n     /* WARNING! If you're reading this because you're learning about crypto\n        and/or designing a new system that will use merkle trees, keep in mind\n@@ -52,7 +52,7 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n        known ways of changing the transactions without affecting the merkle\n        root.\n     */\n-    vMerkleTree.clear();\n+    std::vector<uint256> vMerkleTree;\n     vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n     for (std::vector<CTransaction>::const_iterator it(vtx.begin()); it != vtx.end(); ++it)\n         vMerkleTree.push_back(it->GetHash());\n@@ -78,37 +78,6 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n     return (vMerkleTree.empty() ? uint256() : vMerkleTree.back());\n }\n \n-std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const\n-{\n-    if (vMerkleTree.empty())\n-        BuildMerkleTree();\n-    std::vector<uint256> vMerkleBranch;\n-    int j = 0;\n-    for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n-    {\n-        int i = std::min(nIndex^1, nSize-1);\n-        vMerkleBranch.push_back(vMerkleTree[j+i]);\n-        nIndex >>= 1;\n-        j += nSize;\n-    }\n-    return vMerkleBranch;\n-}\n-\n-uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n-{\n-    if (nIndex == -1)\n-        return uint256();\n-    for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n-    {\n-        if (nIndex & 1)\n-            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n-        else\n-            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n-        nIndex >>= 1;\n-    }\n-    return hash;\n-}\n-\n std::string CBlock::ToString() const\n {\n     std::stringstream s;\n@@ -123,9 +92,5 @@ std::string CBlock::ToString() const\n     {\n         s << \"  \" << vtx[i].ToString() << \"\\n\";\n     }\n-    s << \"  vMerkleTree: \";\n-    for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n-        s << \" \" << vMerkleTree[i].ToString();\n-    s << \"\\n\";\n     return s.str();\n }"
      },
      {
        "sha": "7fe8c84cb7fc3e7c02c530e14d901e05376e1339",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -77,9 +77,6 @@ class CBlock : public CBlockHeader\n     // network and disk\n     std::vector<CTransaction> vtx;\n \n-    // memory only\n-    mutable std::vector<uint256> vMerkleTree;\n-\n     CBlock()\n     {\n         SetNull();\n@@ -103,7 +100,6 @@ class CBlock : public CBlockHeader\n     {\n         CBlockHeader::SetNull();\n         vtx.clear();\n-        vMerkleTree.clear();\n     }\n \n     CBlockHeader GetBlockHeader() const\n@@ -118,14 +114,12 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n-    // Build the in-memory merkle tree for this block and return the merkle root.\n+    // Build the merkle tree for this block and return the merkle root.\n     // If non-NULL, *mutated is set to whether mutation was detected in the merkle\n     // tree (a duplication of transactions in the block leading to an identical\n     // merkle root).\n-    uint256 BuildMerkleTree(bool* mutated = NULL) const;\n+    uint256 ComputeMerkleRoot(bool* mutated = NULL) const;\n \n-    std::vector<uint256> GetMerkleBranch(int nIndex) const;\n-    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex);\n     std::string ToString() const;\n };\n "
      },
      {
        "sha": "91a3a5738ef298526c762d2f85ebdf3f5ca135cc",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -87,7 +87,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->vtx[0] = CTransaction(txCoinbase);\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n-        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+        pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n         BOOST_CHECK(ProcessNewBlock(state, NULL, pblock, true, NULL));"
      },
      {
        "sha": "d9f3c3e467a989360cc04ac42d4c827d76354eae",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         }\n \n         // calculate actual merkle root and height\n-        uint256 merkleRoot1 = block.BuildMerkleTree();\n+        uint256 merkleRoot1 = block.ComputeMerkleRoot();\n         std::vector<uint256> vTxid(nTx, uint256());\n         for (unsigned int j=0; j<nTx; j++)\n             vTxid[j] = block.vtx[j].GetHash();"
      },
      {
        "sha": "39eff3af303264e54be3ec14fd27c6b6d0d94c61",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -702,9 +702,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                 wtx.hashBlock = wtxIn.hashBlock;\n                 fUpdated = true;\n             }\n-            if (wtxIn.nIndex != -1 && (wtxIn.vMerkleBranch != wtx.vMerkleBranch || wtxIn.nIndex != wtx.nIndex))\n+            if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n             {\n-                wtx.vMerkleBranch = wtxIn.vMerkleBranch;\n                 wtx.nIndex = wtxIn.nIndex;\n                 fUpdated = true;\n             }\n@@ -2812,15 +2811,11 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n             break;\n     if (nIndex == (int)block.vtx.size())\n     {\n-        vMerkleBranch.clear();\n         nIndex = -1;\n         LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n         return 0;\n     }\n \n-    // Fill in merkle branch\n-    vMerkleBranch = block.GetMerkleBranch(nIndex);\n-\n     // Is the tx in a block that's in the main chain\n     BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n@@ -2846,14 +2841,6 @@ int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const\n     if (!pindex || !chainActive.Contains(pindex))\n         return 0;\n \n-    // Make sure the merkle branch connects to this block\n-    if (!fMerkleVerified)\n-    {\n-        if (CBlock::CheckMerkleBranch(GetHash(), vMerkleBranch, nIndex) != pindex->hashMerkleRoot)\n-            return 0;\n-        fMerkleVerified = true;\n-    }\n-\n     pindexRet = pindex;\n     return chainActive.Height() - pindex->nHeight + 1;\n }"
      },
      {
        "sha": "34e98cfb812ffab5bfbf1e3b7e3bc385d7b9bc09",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -151,13 +151,8 @@ class CMerkleTx : public CTransaction\n \n public:\n     uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n     int nIndex;\n \n-    // memory only\n-    mutable bool fMerkleVerified;\n-\n-\n     CMerkleTx()\n     {\n         Init();\n@@ -172,13 +167,13 @@ class CMerkleTx : public CTransaction\n     {\n         hashBlock = uint256();\n         nIndex = -1;\n-        fMerkleVerified = false;\n     }\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        std::vector<uint256> vMerkleBranch; // For compatibility with older versions.\n         READWRITE(*(CTransaction*)this);\n         nVersion = this->nVersion;\n         READWRITE(hashBlock);"
      },
      {
        "sha": "0624e442d16b431741093c60893885f0327db775",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/391dff16fe9ace90fc0f3308a5c63c453370e713/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/391dff16fe9ace90fc0f3308a5c63c453370e713/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=391dff16fe9ace90fc0f3308a5c63c453370e713",
        "patch": "@@ -131,12 +131,14 @@ bool CWalletDB::EraseWatchOnly(const CScript &dest)\n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdated++;\n-    return Write(std::string(\"bestblock\"), locator);\n+    Write(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n+    return Write(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n {\n-    return Read(std::string(\"bestblock\"), locator);\n+    if (Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n+    return Read(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)"
      }
    ]
  },
  {
    "sha": "3b33ec85ed00ba7e7525858e3701f9f55071c58b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjMzZWM4NWVkMDBiYTdlNzUyNTg1OGUzNzAxZjlmNTUwNzFjNThi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-08-15T21:32:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-09-22T16:51:08Z"
      },
      "message": "Avoid duplicate CheckBlock checks",
      "tree": {
        "sha": "ff0ec0f97d3058f8bd89edc82b78cf1706308b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff0ec0f97d3058f8bd89edc82b78cf1706308b5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b33ec85ed00ba7e7525858e3701f9f55071c58b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b33ec85ed00ba7e7525858e3701f9f55071c58b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b33ec85ed00ba7e7525858e3701f9f55071c58b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b33ec85ed00ba7e7525858e3701f9f55071c58b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "391dff16fe9ace90fc0f3308a5c63c453370e713",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/391dff16fe9ace90fc0f3308a5c63c453370e713",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/391dff16fe9ace90fc0f3308a5c63c453370e713"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8bc68fe648276280a8f7921d553f39448de2ad7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33ec85ed00ba7e7525858e3701f9f55071c58b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33ec85ed00ba7e7525858e3701f9f55071c58b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3b33ec85ed00ba7e7525858e3701f9f55071c58b",
        "patch": "@@ -2587,6 +2587,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n {\n     // These are checks that are independent of context.\n \n+    if (block.fChecked)\n+        return true;\n+\n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n     if (!CheckBlockHeader(block, state, fCheckPOW))\n@@ -2642,6 +2645,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n+    if (fCheckPOW && fCheckMerkleRoot)\n+        block.fChecked = true;\n+\n     return true;\n }\n "
      },
      {
        "sha": "86106098f5a1d5dc51edefe2448ba9267310fee5",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33ec85ed00ba7e7525858e3701f9f55071c58b/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33ec85ed00ba7e7525858e3701f9f55071c58b/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3b33ec85ed00ba7e7525858e3701f9f55071c58b",
        "patch": "@@ -77,6 +77,9 @@ class CBlock : public CBlockHeader\n     // network and disk\n     std::vector<CTransaction> vtx;\n \n+    // memory only\n+    mutable bool fChecked;\n+\n     CBlock()\n     {\n         SetNull();\n@@ -100,6 +103,7 @@ class CBlock : public CBlockHeader\n     {\n         CBlockHeader::SetNull();\n         vtx.clear();\n+        fChecked = false;\n     }\n \n     CBlockHeader GetBlockHeader() const"
      }
    ]
  }
]