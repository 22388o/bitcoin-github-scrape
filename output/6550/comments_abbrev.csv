dcousens,2015-08-12T00:53:59Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130125823,130125823,
laanwj,2015-08-12T07:37:36Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130202735,130202735,
jtimon,2015-08-12T09:21:25Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130233597,130233597,
sipa,2015-08-12T18:42:24Z,This needs testing :)\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130407856,130407856,
jonasschnelli,2015-08-12T18:46:19Z,Concept ACK. Started testing...\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130408875,130408875,
jonasschnelli,2015-08-12T19:51:41Z,"**Tested ACK** (lldb stepped; update of ""old"" wallet.dat works). Played around with some huge regtest wallets/chains. Moved wallet.dat back and forth from master bitcoin-core to master+this PR bitcoin-core.\n\nI think this is a step forward. IMO it's totally sufficient to check if a wtx has a valid block in the active chain and the wtx transaction index matches the position in the block.\n\nNext s",https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130425239,130425239,
sipa,2015-08-12T20:04:07Z,"Thanks for testing!\n\n@jonasschnelli No need for a height cache, just a cached chainActive.Tip() inside the wallet suffices (you can do ancestor-of checks without cs_main). I can do that, but it's not for this PR.\n",https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130428218,130428218,
theuni,2015-08-12T20:07:53Z,"This will cause the merkle tree to be calculated at least 3x per accepted block, as far as I can see:\nProcessNewBlock -> CheckBlock\nProcessNewBlock -> AcceptBlock -> CheckBlock\nProcessNewBlock -> ActivateBestChain -> ... ConnectBlock -> CheckBlock\n\nIs the calculation time significant enough to try to skip some of that?\n",https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130429052,130429052,
sipa,2015-08-12T20:09:11Z,"@theuni Ugh, that's bad. No, it won't make up for that. We should avoid doing those duplicated checks.\n",https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130429354,130429354,
theuni,2015-08-12T20:37:03Z,"@sipa If I'm reading correctly, it looks like the CheckBlock() in AcceptBlock() is safe to use !fCheckMerkleRoot since it's only ever called from ProcessNewBlock() where it's already been checked.\n\nSame for the ConnectBlock() in ConnectTip(), since they're already checked before writing to disk. That seems a bit more risky, but surely a bad/corrupt read would be detected long before that point a",https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130439788,130439788,
sipa,2015-08-13T16:20:18Z,"I guess we want to verify the merkle root any time 1) we receive new block\ndate 2) read block data back from this.\n\nIf the functions who do that always verify, and there is no other way to\nconstruct a full CBlock, I think we're good.\n",https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-130748979,130748979,
sipa,2015-08-15T21:34:16Z,"@theuni It looks a bit more complicated, as currently we do a CheckBlock on blocks read from disk for validation, which would be harder to do if we want to avoid duplicate checks. I've made a much simpler (and slightly uglier) change for now here, which is to cache the result of CheckBlock in CBlock. That also avoids a few other checks that were being done 3 times before.\n",https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-131449967,131449967,
gmaxwell,2015-09-06T08:33:55Z,Where does this stand right now?  Should I spend cycles testing it as is?\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-138055435,138055435,
sipa,2015-09-07T16:17:04Z,@gmaxwell Test away.\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-138334528,138334528,
sipa,2015-09-14T22:38:53Z,_Ping_\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-140225519,140225519,
dcousens,2015-09-14T22:46:41Z,re-utACK\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-140226836,140226836,
sipa,2015-09-22T16:51:32Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-142346651,142346651,
laanwj,2015-09-23T17:35:32Z,Tested forward/backward compatibility of wallet with this code change.\nACK.\n,https://github.com/bitcoin/bitcoin/pull/6550#issuecomment-142674185,142674185,
dcousens,2015-08-12T00:55:55Z,"Unrelated to this PR,  but is there any reason we prefer the optional arguments compared to a `tuple` return value?\n",https://github.com/bitcoin/bitcoin/pull/6550#discussion_r36817587,36817587,src/primitives/block.cpp
dcousens,2015-08-12T00:58:14Z,Why is this added?  Its already done above in:\n\n``` c++\n if (hashBlock.IsNull() || nIndex == -1)\n         return 0;\n```\n\nOr is `nIndex` somehow modified elsewhere?\n,https://github.com/bitcoin/bitcoin/pull/6550#discussion_r36817733,36817733,src/wallet/wallet.cpp
laanwj,2015-08-12T07:36:39Z,"I'm not sure this is so much ""preferred"", it's how it happens to be written between two more-or-less equivalent ways to formulate it.\n",https://github.com/bitcoin/bitcoin/pull/6550#discussion_r36833338,36833338,src/primitives/block.cpp
sipa,2015-08-12T18:34:47Z,You're relying on an optional optimization allowed by the C++ standard (copy elision) to avoid constructing a tuple as a temporary and copying it to the return location. In C++11 it's better because you can explicitly indicate move semantics.\n,https://github.com/bitcoin/bitcoin/pull/6550#discussion_r36896764,36896764,src/primitives/block.cpp
jonasschnelli,2015-08-12T19:12:52Z,Yes. I think this check can be removed completely.\n,https://github.com/bitcoin/bitcoin/pull/6550#discussion_r36901114,36901114,src/wallet/wallet.cpp
sipa,2015-08-12T19:14:48Z,Indeed. I missed it was already checked.\n,https://github.com/bitcoin/bitcoin/pull/6550#discussion_r36901309,36901309,src/wallet/wallet.cpp
sipa,2015-09-07T16:15:51Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/6550#discussion_r38872127,38872127,src/wallet/wallet.cpp
dcousens,2015-09-14T22:46:13Z,`const`?\n,https://github.com/bitcoin/bitcoin/pull/6550#discussion_r39456779,39456779,src/main.cpp
sipa,2015-09-22T16:51:48Z,const what?\n,https://github.com/bitcoin/bitcoin/pull/6550#discussion_r40111304,40111304,src/main.cpp
laanwj,2015-09-23T16:39:43Z,"Ideally we'd have this `fChecked` status (which isn't used in CBlock itself) on an administrative object that wraps a CBlock, instead of on CBlock itself.\n",https://github.com/bitcoin/bitcoin/pull/6550#discussion_r40226370,40226370,src/primitives/block.h
sipa,2015-09-23T16:49:29Z,"Fully agree, I actually started implementing that as a follow-up, but didn't want to interfere with other refactorings.\n",https://github.com/bitcoin/bitcoin/pull/6550#discussion_r40227478,40227478,src/primitives/block.h
laanwj,2015-09-23T16:55:09Z,"OK, yes, I'm fine with keeping it like this for this pull\n",https://github.com/bitcoin/bitcoin/pull/6550#discussion_r40228089,40228089,src/primitives/block.h
