[
  {
    "sha": "6ae2d37c7112656f3fb09e5fabc016345f73aa06",
    "node_id": "C_kwDOABII59oAKDZhZTJkMzdjNzExMjY1NmYzZmIwOWU1ZmFiYzAxNjM0NWY3M2FhMDY",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-10-03T22:16:58Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-10-04T08:36:12Z"
      },
      "message": "qa: test descriptors with mixed xpubs and const pubkeys\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "12c9c2d90d3a839af02188cd5bc83b4e0dfb0437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12c9c2d90d3a839af02188cd5bc83b4e0dfb0437"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ae2d37c7112656f3fb09e5fabc016345f73aa06",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmFavPwACgkQ4T/BRc0/\nQwRbeAv/bet7PAPR/Gcld4L6c7bS/cb6hkKPwyb3jhiuzAhXxhiU58Bv8uNXMBmh\nU1JhlrH3I/7pxVqqC49Fygly+enzb7JBhkOefG0H1sSTXw8PIuRsoUY5faknWyj0\nAgi5INYGoVnDTK/r7qB1Yi254xsqZNxpDaZZCQg7WleSqPPwn1sDDBieOPA9F/Wg\nRcZknvT9vI8efnadJ5TeL41Kaaie3pg146hNJSIfZjNEvP9xuyeEWxGZOisxL1hx\n+thLSSbBpOyvcl1SrIrMx8U3mgsfQEZ+4deUsaXPI/ZVBOQvvqsc2QAT9liY5Ubu\nAUHqQPohnhAU6q1H+jfZmA2nsKvpXW3iWXQxhnKs47nL+o6J8AkDsfeYrcBqQ4Kt\nTDnhf2rtvUhzKk9kpYqWHZwQV8nk11zRD8xYdlq1VX0UcXLpugYEi31l7D+4ZvtB\nYH+UqaAECVsgb34kAaHWk3ZgGxGFogoDDgdObwKdAdeE2xcJvCumDu3F9Xdp1Au6\nmXGxZqK4\n=ztzn\n-----END PGP SIGNATURE-----",
        "payload": "tree 12c9c2d90d3a839af02188cd5bc83b4e0dfb0437\nparent 446b706696451ae1a66ac416f347d734c5741d7c\nauthor Antoine Poinsot <darosior@protonmail.com> 1633299418 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1633336572 +0200\n\nqa: test descriptors with mixed xpubs and const pubkeys\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ae2d37c7112656f3fb09e5fabc016345f73aa06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ae2d37c7112656f3fb09e5fabc016345f73aa06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ae2d37c7112656f3fb09e5fabc016345f73aa06/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "446b706696451ae1a66ac416f347d734c5741d7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/446b706696451ae1a66ac416f347d734c5741d7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/446b706696451ae1a66ac416f347d734c5741d7c"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 19,
      "deletions": 10
    },
    "files": [
      {
        "sha": "032dd5ebaa1e6085d7bc1bb546af5878540ce208",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ae2d37c7112656f3fb09e5fabc016345f73aa06/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ae2d37c7112656f3fb09e5fabc016345f73aa06/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=6ae2d37c7112656f3fb09e5fabc016345f73aa06",
        "patch": "@@ -76,7 +76,7 @@ std::string UseHInsteadOfApostrophe(const std::string& desc)\n const std::set<std::vector<uint32_t>> ONLY_EMPTY{{}};\n \n void DoCheck(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY,\n-    bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false)\n+    bool replace_apostrophe_with_h_in_prv=false, bool replace_apostrophe_with_h_in_pub=false, bool mixed_pubkeys=false)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n     std::set<std::vector<uint32_t>> left_paths = paths;\n@@ -171,7 +171,7 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n             // Check whether keys are in the cache\n             const auto& der_xpub_cache = desc_cache.GetCachedDerivedExtPubKeys();\n             const auto& parent_xpub_cache = desc_cache.GetCachedParentExtPubKeys();\n-            if ((flags & RANGE) && !(flags & DERIVE_HARDENED)) {\n+            if (!mixed_pubkeys && (flags & RANGE) && !(flags & DERIVE_HARDENED)) {\n                 // For ranged, unhardened derivation, None of the keys in origins should appear in the cache but the cache should have parent keys\n                 // But we can derive one level from each of those parent keys and find them all\n                 BOOST_CHECK(der_xpub_cache.empty());\n@@ -187,7 +187,7 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n                     const CPubKey& pk = origin_pair.second.first;\n                     BOOST_CHECK(pubkeys.count(pk) > 0);\n                 }\n-            } else if (pub1.find(\"xpub\") != std::string::npos) {\n+            } else if (!mixed_pubkeys && pub1.find(\"xpub\") != std::string::npos) {\n                 // For ranged, hardened derivation, or not ranged, but has an xpub, all of the keys should appear in the cache\n                 BOOST_CHECK(der_xpub_cache.size() + parent_xpub_cache.size() == script_provider_cached.origins.size());\n                 // Get all of the derived pubkeys\n@@ -210,8 +210,8 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n                     const CPubKey& pk = origin_pair.second.first;\n                     BOOST_CHECK(pubkeys.count(pk) > 0);\n                 }\n-            } else {\n-                // No xpub, nothing should be cached\n+            } else if (!mixed_pubkeys) {\n+                // Only const pubkeys, nothing should be cached\n                 BOOST_CHECK(der_xpub_cache.empty());\n                 BOOST_CHECK(parent_xpub_cache.empty());\n             }\n@@ -268,29 +268,33 @@ void DoCheck(const std::string& prv, const std::string& pub, const std::string&\n     BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n-void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n+void Check(const std::string& prv, const std::string& pub, const std::string& norm_prv, const std::string& norm_pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::optional<OutputType>& type, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY, bool mixed_pubkeys=false)\n {\n     bool found_apostrophes_in_prv = false;\n     bool found_apostrophes_in_pub = false;\n \n     // Do not replace apostrophes with 'h' in prv and pub\n-    DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths);\n+    DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */false,\n+            /*replace_apostrophe_with_h_in_pub = */false, /*mixed_pubkeys = */mixed_pubkeys);\n \n     // Replace apostrophes with 'h' in prv but not in pub, if apostrophes are found in prv\n     if (prv.find('\\'') != std::string::npos) {\n         found_apostrophes_in_prv = true;\n-        DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */false);\n+        DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true,\n+                /*replace_apostrophe_with_h_in_pub = */false, /*mixed_pubkeys = */mixed_pubkeys);\n     }\n \n     // Replace apostrophes with 'h' in pub but not in prv, if apostrophes are found in pub\n     if (pub.find('\\'') != std::string::npos) {\n         found_apostrophes_in_pub = true;\n-        DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */false, /*replace_apostrophe_with_h_in_pub = */true);\n+        DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */false,\n+                /*replace_apostrophe_with_h_in_pub = */true, /*mixed_pubkeys = */mixed_pubkeys);\n     }\n \n     // Replace apostrophes with 'h' both in prv and in pub, if apostrophes are found in both\n     if (found_apostrophes_in_prv && found_apostrophes_in_pub) {\n-        DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true, /*replace_apostrophe_with_h_in_pub = */true);\n+        DoCheck(prv, pub, norm_prv, norm_pub, flags, scripts, type, paths, /* replace_apostrophe_with_h_in_prv = */true,\n+                /*replace_apostrophe_with_h_in_pub = */true, /*mixed_pubkeys = */mixed_pubkeys);\n     }\n }\n \n@@ -333,6 +337,11 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", \"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, OutputType::BECH32, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n     Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", \"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | DERIVE_HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, OutputType::P2SH_SEGWIT, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", \"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, std::nullopt, {{0}, {1}});\n+    // Mixed xpubs and const pubkeys\n+    Check(\"wsh(multi(1,xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/0,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\",\"wsh(multi(1,xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/0,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\",\"wsh(multi(1,xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/0,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\",\"wsh(multi(1,xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/0,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\",DEFAULT,{{\"0020cb155486048b23a6da976d4c6fe071a2dbc8a7b57aaf225b8955f2e2a27b5f00\"}},OutputType::BECH32,{{0},{}},/* mixed_pubkeys = */true);\n+    // Mixed range xpubs and const pubkeys\n+    Check(\"multi(1,xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\",\"multi(1,xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\",\"multi(1,xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\",\"multi(1,xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\",RANGE,{{\"512102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e0762103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd52ae\"},{\"5121032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ec2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd52ae\"},{\"5121035d30b6c66dc1e036c45369da8287518cf7e0d6ed1e2b905171c605708f14ca032103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd52ae\"}}, std::nullopt,{{2},{1},{0},{}},/* mixed_pubkeys = */true);\n+\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", \"Fingerprint is not 4 bytes (9 characters instead of 8 characters)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\", \"Key path value 2147483648 is out of range\"); // BIP 32 path element overflow\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/1aa)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1aa)\", \"Key path value '1aa' is not a valid uint32\"); // Path is not valid uint"
      }
    ]
  }
]