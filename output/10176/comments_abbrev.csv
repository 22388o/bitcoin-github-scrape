laanwj,2017-04-11T07:45:10Z,"I'm a bit ambivalent about going to 64 bit ints for the node id. I think it is a good temporary workaround for the wrap-around problem, but as you do want to handle wrapping, it seems a double measure. At the least please add a regression test for the wrapping code, as with 64 bits is so unlikely to ever trigger that the code will rot.\n",https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293178193,293178193,
gmaxwell,2017-04-11T08:38:53Z,"We could take a tip from the linux kernel counter handling and cause it to immediately wrap shortly after start by starting shortly below the wrap point,  but esp with 64-bit IDs, the really long IDs would be kind of obnoxious. (also this wouldn't test the skipping code)",https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293190359,293190359,
jnewbery,2017-04-11T14:12:19Z,"utACK 17c93bf4f6cdf259c735becffd2e319ecc222dd4 , although I'd prefer NodeID to by a uint32_t\n\nEDIT: I'd prefer *either* using a uint32_t with this wrapping logic *or* a uint64_t without the new logic. Perhaps just add an assert in GetNewNodeId that we haven't reached std::numeric_limits<NodeId>::max().",https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293275937,293275937,
TheBlueMatt,2017-04-11T14:18:17Z,I'd kinda prefer we /just/ switch it to a int64_t and drop all the wrap logic. With a 64-bit ID you'd need billions of connections per second for years.,https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293277779,293277779,
sipa,2017-04-11T14:31:01Z,"Agree with @TheBlueMatt.\n\n> With a 64-bit ID you'd need billions of connections per second for years.\n\n585 years of 1 billion connections per second. I think that's sufficient.",https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293281908,293281908,
theuni,2017-04-11T14:41:25Z,"Hmm.\n\nThis originally switched to int32_t and addressed the wrapping as a non-theoretical problem. @TheBlueMatt pointed out that it may be possible that a user could mistakenly assume that the post-wrap nodeid ""0"" today is the same nodeid ""0"" that was connected 3 months ago, and take an action on the wrong node. Bumping to an int64_t solves that, so it seemed like a reasonable change.\n\nThi",https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293285074,293285074,
theuni,2017-04-12T18:20:28Z,Updated after discussion here.,https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293664617,293664617,
TheBlueMatt,2017-04-12T18:52:28Z,utACK c851be4b25905977ca471c42435dc590fd2ff2f5,https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293673516,293673516,
jnewbery,2017-04-12T19:48:50Z,"Looks good. ACK c851be4b25905977ca471c42435dc590fd2ff2f5\n\nDid you consider asserting in GetNewNodeID():\n\n```\n    assert(nLastNodeId.load() < std::numeric_limits<int64_t>::max());\n```",https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293687727,293687727,
jtimon,2017-04-12T20:18:10Z,utACK c851be4,https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293695102,293695102,
laanwj,2017-04-13T14:34:50Z,"> 585 years of 1 billion connections per second. I think that's sufficient.\n\nYes, restarting your node every century at least is a good precaution in any case.\n\nSome JSON implementations will start to lose precision at 52 bits (due to using doubles for numbers). But not worried about that here.\n\nutACK https://github.com/bitcoin/bitcoin/commit/c851be4b25905977ca471c42435dc590fd2ff2f5 (a",https://github.com/bitcoin/bitcoin/pull/10176#issuecomment-293913397,293913397,
gmaxwell,2017-04-11T08:42:24Z,Not -1? (or =0 and having the ++ in an else?) Why should it fail to reconsider reusing 0?,https://github.com/bitcoin/bitcoin/pull/10176#discussion_r110844447,110844447,src/net.cpp
gmaxwell,2017-04-11T08:45:51Z,"The theoretical infinite loop is perhaps unfortunate, perhaps there should be an assert if size of the set is => max. (the reason for doing that would be more obvious if you imagine someone deciding to reduce the id to a s16 since its more than enough for current connections. :) )... or an exception.",https://github.com/bitcoin/bitcoin/pull/10176#discussion_r110845174,110845174,src/net.cpp
theuni,2017-04-11T14:33:01Z,"~~Thanks, I'll address both of those.~~\nEdit: No need to address these if we're not going to worry about wrapping.",https://github.com/bitcoin/bitcoin/pull/10176#discussion_r110918280,110918280,src/net.cpp
