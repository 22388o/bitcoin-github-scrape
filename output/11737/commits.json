[
  {
    "sha": "9d811dc18b28ed2dd00ba219754764a76c4f859b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDgxMWRjMThiMjhlZDJkZDAwYmEyMTk3NTQ3NjRhNzZjNGY4NTli",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-20T19:13:12Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-20T19:31:15Z"
      },
      "message": "Document partial validation in ConnectBlock()\n\nConnectBlock() relies on validation that happens in ContextualCheckBlock() and\nContextualCheckBlockHeader(). This has implications for implementing consensus\nchanges and handling software upgrade to ensure that nodes upgrading their\nsoftware end up enforcing all the consensus rules.",
      "tree": {
        "sha": "3a27231925a32e644bffca695d929b5f57d34917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a27231925a32e644bffca695d929b5f57d34917"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d811dc18b28ed2dd00ba219754764a76c4f859b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d811dc18b28ed2dd00ba219754764a76c4f859b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d811dc18b28ed2dd00ba219754764a76c4f859b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d811dc18b28ed2dd00ba219754764a76c4f859b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7293d064133aeafd9f0ae0bdbb2ed74a44d91ecc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de6031db39d9e492a5813877b301d9f4f23386b3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d811dc18b28ed2dd00ba219754764a76c4f859b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d811dc18b28ed2dd00ba219754764a76c4f859b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9d811dc18b28ed2dd00ba219754764a76c4f859b",
        "patch": "@@ -1667,6 +1667,18 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     int64_t nTimeStart = GetTimeMicros();\n \n     // Check it again in case a previous version let a bad block in\n+    // NOTE: We don't currently (re-)invoke ContextualCheckBlock() or\n+    // ContextualCheckBlockHeader() here. This means that if we add a new\n+    // consensus rule that is enforced in one of those two functions, then we\n+    // may have let in a block that violates the rule prior to updating the\n+    // software, and we would NOT be enforcing the rule here. Fully solving\n+    // upgrade from one software version to the next after a consensus rule\n+    // change is potentially tricky and issue-specific (see RewindBlockIndex()\n+    // for one general approach that was used for BIP 141 deployment).\n+    // Also, currently the rule against blocks more than 2 hours in the future\n+    // is enforced in ContextualCheckBlockHeader(); we wouldn't want to\n+    // re-enforce that rule here (at least until we make it impossible for\n+    // GetAdjustedTime() to go backward).\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n@@ -2952,7 +2964,13 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n \n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n- *  set; UTXO-related validity checks are done in ConnectBlock(). */\n+ *  set; UTXO-related validity checks are done in ConnectBlock().\n+ *  NOTE: This function is not currently invoked by ConnectBlock(), so we\n+ *  should consider upgrade issues if we change which consensus rules are\n+ *  enforced in this function (eg by adding a new consensus rule). See comment\n+ *  in ConnectBlock().\n+ *  Note that -reindex-chainstate skips the validation that happens here!\n+ */\n static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n     assert(pindexPrev != nullptr);\n@@ -2992,6 +3010,12 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n     return true;\n }\n \n+/** NOTE: This function is not currently invoked by ConnectBlock(), so we\n+ *  should consider upgrade issues if we change which consensus rules are\n+ *  enforced in this function (eg by adding a new consensus rule). See comment\n+ *  in ConnectBlock().\n+ *  Note that -reindex-chainstate skips the validation that happens here!\n+ */\n static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;"
      }
    ]
  }
]