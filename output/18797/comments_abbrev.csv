sipa,2020-04-28 08:20:22,"I think it may make sense to export some notion of standardness from libconsensus, but I don't think exporting every individual script flag of the interpreter makes sense.\n\nWould it be sufficient for your use case if there was just a catch-all libconsensus_SCRIPT_VERIFY_STANDARD (which would always refer to whatever the current version's policy was, with no guarantees for consistency between v",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-620456111,620456111,
ariard,2020-04-28 08:40:59,"@sipa note I don't target specifically one use case even if issue has been raised in LN context. It should be a good practice to verify any transaction against current version's policy, even for application with lower requirement, to avoid any surprise for user.\n\nSCRIPT_VERIFY_STANDARD would be fine and that was my intention by defining a SCRIPT_FLAGS_VERIFY_STANDARD. But I'm not sure if such ",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-620466453,620466453,
sipa,2020-04-28 21:30:29,"@ariard I guess a hypothetical SCRIPT_VERIFY_STANDARD flag would automatically also enable all consensus rules. If you care about whether your transaction will be acceptable to full nodes similar to the one whose libconsensus you're using, it doesn't make sense to disable certain consensus checks but still enable standardness ones.\n\nI don't understand what you're trying to distinguish in your ",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-620866175,620866175,
ariard,2020-04-29 06:07:57,"> it doesn't make sense to disable certain consensus checks but still enable standardness ones.\n\nYes right, you would need to call verify function twice to dissociate between standard/consensus in case of failure but that's acceptable. Let's do a global standard flag.\n\n> in case there are concerns like keeping the flag up to date with future standardness changes\n\nYes it should be easy ",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-621008975,621008975,
luke-jr,2020-04-30 17:56:27,"Concept NACK.\n\nNode policy is a per-node decision. It should not be assumed to have any global consistency, and users should always be able to easily modify it (libconsensus should definitely not read bitcoin.conf!).\n\nFurthermore, libconsensus is for consensus logic. This is strictly not that.",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-622008886,622008886,
sipa,2020-04-30 18:04:09,"I strongly feel we should not be exporting all the nitty details of how Bitcoin Core implements standardness. There is no requirement that the various standardness VERIFY flags have any consistency across versions.\n\nEither you ask for consensus-validity, and specify which consensus rules you want to enable; or you ask for standardness without the ability to select what parts of it.",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-622012813,622012813,
luke-jr,2020-04-30 18:57:58,"To help provide clarity: libconsensus is supposed to be just raw *Bitcoin*, not *Bitcoin Core* (implementation details aside).",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-622040439,622040439,
TheBlueMatt,2020-04-30 20:13:10,"I tend to agree with @sipa here, we definitely shouldn't be trying to export all of the internal flags in Bitcoin Core as a reasonably-supported interface, but at the same time, not exporting some basic concept of ""will this transaction likely be accepted by the network"" limits the utility of libbitcoinconsensus as it exists today to...very little. Certainly it wasn't the initial goal of libbitcoi",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-622084237,622084237,
MarcoFalke,2020-04-30 20:24:58,"Concept ACK to expose this as a cheap sanity pre-check for testmempoolaccept, but for a full policy check you'll have to ask the mempool of a full node",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-622090392,622090392,
ariard,2020-05-03 09:11:13,"Updated with only exporting a simple `verify_script_standard_with_amount` method, without flags passing, therefore making standard opaque to caller.\n\nI'm making the point again that this export isn't only useful for testing cases but also for production. Time-sensitive protocols like LN or Coinswap rely on confirming onchain transaction before some time-lock expiration. Doing so means they nee",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-623079298,623079298,
ariard,2020-05-07 09:26:16,"Thanks Russ for review, took your points, specially call-up on better documentation.",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-625138849,625138849,
elichai,2020-05-26 17:57:51,"Code Review ACK 9f0a6f36b5ccf08e054af63d242c8b98344676b0\nI do believe that even though standardness is an implementation detail in practice it's important to follow if you want your transactions to actually make their way to miners through the p2p, so you'll want to follow it even if you don't use bitcoin core.",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-634181443,634181443,
ariard,2020-06-17 16:45:57,@luke-jr If you still have concerns on this can you raise them before PR moves forward ? See https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-623079298 as a motivation.,https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-645489345,645489345,
luke-jr,2020-06-17 17:59:14,">I'm making the point again that this export isn't only useful for testing cases but also for production. Time-sensitive protocols like LN or Coinswap rely on confirming onchain transaction before some time-lock expiration. Doing so means they need to guarantee that these transactions broadcast smoothly on the currently deployed network, therefore have a higher concern with regards to policy. A fl",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-645530045,645530045,
ariard,2020-06-18 20:37:15,"@luke-jr \n\n> Policy can never be guaranteed, and shouldn't be trusted to be uniform. Acting on policy is almost(?) always a design flaw.\n\nHow can we be sure we're not acting on policy if its scope is not _well-defined_  ? Sounds like a) policy is a moving target but b) be sure you're not making any assumption on a moving target :)\n\n> Core's policies also do not define what is a standar",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-646292947,646292947,
luke-jr,2020-06-20 04:38:59,">How can we be sure we're not acting on policy if its scope is not well-defined ? Sounds like a) policy is a moving target but b) be sure you're not making any assumption on a moving target :)\n\n@ariard Policy's scope *is* well-defined... it's any decisions made that aren't required by the consensus protocol.\n\n>Again, how can you say they tolerate non-standard things if you don't have a sta",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-646940215,646940215,
theuni,2020-06-23 01:07:30,"I'm afraid that this isn't as all-encompassing as it may seem. If the goal is a boolean ""yes"" or ""no"" as to whether a spending script would propagate, I don't think this is enough.\n\nAs a quick example, if a scriptSig is not pushonly, it will not fail policy in the interpreter. It will fail above that, inside of IsStandardTx. Arguably, SCRIPT_VERIFY_SIGPUSHONLY could be added to the standard fl",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-647846185,647846185,
ariard,2020-06-24 23:23:29,"@luke-jr \n\nYou gave a formal definition of policy, namely negatively define wrt consensus rules. The material content of such rules is\nactually what is implemented by Core for a given release. Some of them are standardized in BIPs (but not all of them, like\nMINIMALIF). A lot of them can't be changed by user configuration like the script interpreter ones. For the ones which aren't\ndepende",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-649124556,649124556,
ariard,2020-06-24 23:34:53,"> As a quick example, if a scriptSig is not pushonly, it will not fail policy in the interpreter. It will fail above that, inside of IsStandardTx. Arguably, SCRIPT_VERIFY_SIGPUSHONLY could be added to the standard flags, but I believe that other unchecked policies would still remain outside of the interpreter.\n\nI agree, beyond a verification of witness compliance you're transaction may be reje",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-649128255,649128255,
TheBlueMatt,2020-06-26 03:29:31,"> You mean an audit of the script interpreter to acknowledge that standard script flags are working as expected or an audit that on-the-top-application using this library export do have their transactions effectively broadcasting ?\n\nI believe he means carefully reading all relevant standardness checks (ie starting from ATMP and reading the full function and all the things it calls) and making ",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-649937549,649937549,
theuni,2020-06-26 15:11:10,"Thanks @TheBlueMatt, that's indeed what I meant.\n\nEither this api is meant to export the policy flags so that 3rd party developers can control what checks are done (I believe this idea has been largely NACK'd), or it's meant to mirror Core's exact relay policy. If we attempt the latter but only end up performing a subset of ATMP's checks, I'm not sure what the real-world utility the library wo",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-650232275,650232275,
ariard,2020-08-02 16:34:47,"Closing for now, this work necessitates more conceptual discussion on exposing Core's relay policy and first and foremost if applications should have access to it or not.",https://github.com/bitcoin/bitcoin/pull/18797#issuecomment-667696049,667696049,
ryanofsky,2020-04-28 22:02:05,"In commit ""[policy] Extend bitcoinconsensus library with standard script flags"" (e07ecdedc70ea045f98b592d36fdbf543696db28)\n\nIt seems like the name `VERIFY_ALL` is going to be misleading if it isn't actually going to include every verify flag. Would maybe suggest calling it `VERIFY_CONSENSUS` and changing VERIFY_ALL into a deprecated alias for VERIFY_CONSENSUS",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r416950736,416950736,src/script/bitcoinconsensus.h
ariard,2020-04-29 06:09:35,"I would like but this may break upstream libraries using exported flag? So need an API bump, we can do this.",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r417085948,417085948,src/script/bitcoinconsensus.h
ryanofsky,2020-04-29 11:21:31,Not suggesting API bump. Suggestion is to use `VERIFY_CONSENSUS` instead of `VERIFY_ALL` in main definition for clarity in new code and add `VERIFY_ALL = VERIFY_CONSENSUS /* deprecated */` at the bottom for backwards compatibility with old code,https://github.com/bitcoin/bitcoin/pull/18797#discussion_r417241166,417241166,src/script/bitcoinconsensus.h
ryanofsky,2020-05-07 02:15:03,"In commit ""[policy] Extend bitcoinconsensus library with standard script flags"" (a7a0c4c7612efbf95849cd70c28497d27b3386c2)\n\nShould drop the whitespace changes here. Assuming they are unintentional",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r421199004,421199004,src/script/bitcoinconsensus.h
ryanofsky,2020-05-07 02:28:17,"In commit ""[policy] Extend bitcoinconsensus library with standard script flags"" (a7a0c4c7612efbf95849cd70c28497d27b3386c2)\n\nMaybe extend comment to say something about limitations of this function, e.g. that it only reflects default policy in the current release, actual policy can vary between nodes, software versions",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r421202268,421202268,src/script/bitcoinconsensus.h
ryanofsky,2020-05-07 02:30:23,"In commit ""[doc] Document shared-libraries.md on standard verification"" (4ea5e6d18203f1c45fa68b8f5585c7fc96e5677b)\n\nMaybe standardize on standardness: s/correctness/standardness/ and s/standard/standardness/",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r421202844,421202844,doc/shared-libraries.md
ariard,2020-05-07 09:24:16,"Oh right, they weren't disclosed by `git show -b` locally.",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r421364823,421364823,src/script/bitcoinconsensus.h
ryanofsky,2020-05-07 12:17:57,"In commit ""[policy] Extend bitcoinconsensus library with standard script flags"" (e68badd2ccc2fbced8663127f2f3d94d8029e903)\n\nThere are still extra whitespace changes here that could be reverted",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r421458613,421458613,src/script/bitcoinconsensus.h
fjahr,2020-06-16 14:57:04,nit-ish: This whole block seems to be weirdly placed. Shouldn't this be below `Script validation`? Or at least under `API`. It is documenting a new part of the API...,https://github.com/bitcoin/bitcoin/pull/18797#discussion_r440917334,440917334,doc/shared-libraries.md
ariard,2020-06-17 16:44:51,"API is really about where to find its definition in the codebase. New documentation is about explaining how to use API and its limitations, but I agree I should add `bitcoinconsensus_verify_script_standard_with_amount` in `Script Validation`. Will do if I have to rebase/modify PR.",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r441683651,441683651,doc/shared-libraries.md
laanwj,2020-06-18 13:50:46,"Tend to agree here. This is an introductory paragraph and while you could add one sentence mentioning that there's also a policy function, it shouldn't describe the details. That can be done separately in a new section, for example.",https://github.com/bitcoin/bitcoin/pull/18797#discussion_r442241237,442241237,doc/shared-libraries.md
