[
  {
    "sha": "0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzk5NTlhMzA4MTMyOGYxYThmNGQ5YTVkMjdkMTU1OWI2ZWRlNTYx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T01:15:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:02:04Z"
      },
      "message": "Add failing test checking timelocked-txn removal during reorg",
      "tree": {
        "sha": "fdcb09e994ecd67c97977e506a121639b17cc4d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdcb09e994ecd67c97977e506a121639b17cc4d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e02e0147188a7e364489db23128a05505e7a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e02e0147188a7e364489db23128a05505e7a4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e02e0147188a7e364489db23128a05505e7a4c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 21,
      "deletions": 7
    },
    "files": [
      {
        "sha": "09557241740cb10f4224bbaf4dd991f689feb541",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "patch": "@@ -77,7 +77,7 @@\n     'rawtransactions.py',\n     'rest.py',\n     'mempool_spendcoinbase.py',\n-    'mempool_coinbase_spends.py',\n+    'mempool_reorg.py',\n     'httpbasics.py',\n     'zapwallettxes.py',\n     'proxy_test.py',"
      },
      {
        "sha": "fdbaf689ad5b223a82b632ed9af34010de0f1fb3",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "renamed",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9959a3081328f1a8f4d9a5d27d1559b6ede561/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "patch": "@@ -52,32 +52,46 @@ def run_test(self):\n         # 3. Indirect (coinbase and child both in chain) : spend_103 and spend_103_1\n         # Use invalidatblock to make all of the above coinbase spends invalid (immature coinbase),\n         # and make sure the mempool code behaves correctly.\n-        b = [ self.nodes[0].getblockhash(n) for n in range(102, 105) ]\n+        b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = self.create_tx(coinbase_txids[0], node1_address, 50)\n-        spend_102_raw = self.create_tx(coinbase_txids[1], node0_address, 50)\n-        spend_103_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_101_raw = self.create_tx(coinbase_txids[1], node1_address, 50)\n+        spend_102_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_103_raw = self.create_tx(coinbase_txids[3], node0_address, 50)\n+\n+        # Create a block-height-locked transaction which will be invalid after reorg\n+        timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 50})\n+        # Set the time lock\n+        timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111111\", 1)\n+        timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n+        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n         spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)\n-        self.nodes[0].generate(1)\n+        last_block = self.nodes[0].generate(1)\n+        timelock_tx_id = self.nodes[0].sendrawtransaction(timelock_tx)\n \n         # ... now put spend_101 and spend_102_1 in memory pools:\n         spend_101_id = self.nodes[0].sendrawtransaction(spend_101_raw)\n         spend_102_1_id = self.nodes[0].sendrawtransaction(spend_102_1_raw)\n \n         self.sync_all()\n \n-        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id ]))\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, timelock_tx_id ]))\n+\n+        for node in self.nodes:\n+            node.invalidateblock(last_block[0])\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, spend_103_1_id ]))\n \n         # Use invalidateblock to re-org back and make all those coinbase spends\n         # immature/invalid:",
        "previous_filename": "qa/rpc-tests/mempool_coinbase_spends.py"
      }
    ]
  },
  {
    "sha": "9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjA2MGU1Y2ZiMGQxODViNTUzYjIxYWUxOWQzOTBmODFlODNiZDRk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T01:58:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:02:04Z"
      },
      "message": "Fix removal of time-locked transactions during reorg",
      "tree": {
        "sha": "102cf99621b43a118cc0239990bf5a25614f43d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/102cf99621b43a118cc0239990bf5a25614f43d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9959a3081328f1a8f4d9a5d27d1559b6ede561",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9959a3081328f1a8f4d9a5d27d1559b6ede561"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3422c56cfc34c6bb7024a200a45451b29c998f30",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "patch": "@@ -2350,7 +2350,7 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // UpdateTransactionsFromBlock finds descendants of any transactions in this\n     // block that were added back and cleans up the mempool state.\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n-    mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n+    mempool.removeForReorg(pcoinsTip, pindexDelete->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);"
      },
      {
        "sha": "1c38e32601889ec42d9bbb56ebb23d0fa9325d14",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"policy/fees.h\"\n #include \"streams.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utiltime.h\"\n@@ -478,22 +479,26 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     }\n }\n \n-void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n-            if (it2 != mapTx.end())\n-                continue;\n-            const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-            if (nCheckFrequency != 0) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n-                transactionsToRemove.push_back(tx);\n-                break;\n+        if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime())) {\n+            transactionsToRemove.push_back(tx);\n+        } else {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+                if (it2 != mapTx.end())\n+                    continue;\n+                const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n+\t\tif (nCheckFrequency != 0) assert(coins);\n+                if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n+                    transactionsToRemove.push_back(tx);\n+                    break;\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "f45d5a20845ace43c297509ab2ea7b151a6e903f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b060e5cfb0d185b553b21ae19d390f81e83bd4d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "patch": "@@ -376,7 +376,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);"
      }
    ]
  },
  {
    "sha": "b0a064c4b825c15dee87739348bab23f13541bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGEwNjRjNGI4MjVjMTVkZWU4NzczOTM0OGJhYjIzZjEzNTQxYmRk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-06T04:40:21Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:02:05Z"
      },
      "message": "Fix comment in removeForReorg",
      "tree": {
        "sha": "6189a5275df6f0ef457278a3dafc8bf9ea08d8bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6189a5275df6f0ef457278a3dafc8bf9ea08d8bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0a064c4b825c15dee87739348bab23f13541bdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a064c4b825c15dee87739348bab23f13541bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0a064c4b825c15dee87739348bab23f13541bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a064c4b825c15dee87739348bab23f13541bdd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b060e5cfb0d185b553b21ae19d390f81e83bd4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b060e5cfb0d185b553b21ae19d390f81e83bd4d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a2a53b0180c4697fdc7b7133f8304f664b20f35b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0a064c4b825c15dee87739348bab23f13541bdd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0a064c4b825c15dee87739348bab23f13541bdd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b0a064c4b825c15dee87739348bab23f13541bdd",
        "patch": "@@ -481,7 +481,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n-    // Remove transactions spending a coinbase which are now immature\n+    // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      }
    ]
  },
  {
    "sha": "474b84a7413f124524cccf097dd36c7a24d406b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzRiODRhNzQxM2YxMjQ1MjRjY2NmMDk3ZGQzNmM3YTI0ZDQwNmI4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T21:54:11Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:03:56Z"
      },
      "message": "Make indentation in ActivateBestChainStep readable",
      "tree": {
        "sha": "ae98850d16564eea325548f449f6158950f0f47a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae98850d16564eea325548f449f6158950f0f47a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/474b84a7413f124524cccf097dd36c7a24d406b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474b84a7413f124524cccf097dd36c7a24d406b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/474b84a7413f124524cccf097dd36c7a24d406b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474b84a7413f124524cccf097dd36c7a24d406b8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0a064c4b825c15dee87739348bab23f13541bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a064c4b825c15dee87739348bab23f13541bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0a064c4b825c15dee87739348bab23f13541bdd"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 33,
      "deletions": 33
    },
    "files": [
      {
        "sha": "e05237da201d58da5cb588cc5b25a4c4e789da07",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/474b84a7413f124524cccf097dd36c7a24d406b8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/474b84a7413f124524cccf097dd36c7a24d406b8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=474b84a7413f124524cccf097dd36c7a24d406b8",
        "patch": "@@ -2525,43 +2525,43 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     bool fContinue = true;\n     int nHeight = pindexFork ? pindexFork->nHeight : -1;\n     while (fContinue && nHeight != pindexMostWork->nHeight) {\n-    // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n-    // a few blocks along the way.\n-    int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n-    vpindexToConnect.clear();\n-    vpindexToConnect.reserve(nTargetHeight - nHeight);\n-    CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n-    while (pindexIter && pindexIter->nHeight != nHeight) {\n-        vpindexToConnect.push_back(pindexIter);\n-        pindexIter = pindexIter->pprev;\n-    }\n-    nHeight = nTargetHeight;\n-\n-    // Connect new blocks.\n-    BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n-            if (state.IsInvalid()) {\n-                // The block violates a consensus rule.\n-                if (!state.CorruptionPossible())\n-                    InvalidChainFound(vpindexToConnect.back());\n-                state = CValidationState();\n-                fInvalidFound = true;\n-                fContinue = false;\n-                break;\n+        // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n+        // a few blocks along the way.\n+        int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n+        vpindexToConnect.clear();\n+        vpindexToConnect.reserve(nTargetHeight - nHeight);\n+        CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+        while (pindexIter && pindexIter->nHeight != nHeight) {\n+            vpindexToConnect.push_back(pindexIter);\n+            pindexIter = pindexIter->pprev;\n+        }\n+        nHeight = nTargetHeight;\n+\n+        // Connect new blocks.\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+                if (state.IsInvalid()) {\n+                    // The block violates a consensus rule.\n+                    if (!state.CorruptionPossible())\n+                        InvalidChainFound(vpindexToConnect.back());\n+                    state = CValidationState();\n+                    fInvalidFound = true;\n+                    fContinue = false;\n+                    break;\n+                } else {\n+                    // A system error occurred (disk space, database error, ...).\n+                    return false;\n+                }\n             } else {\n-                // A system error occurred (disk space, database error, ...).\n-                return false;\n-            }\n-        } else {\n-            PruneBlockIndexCandidates();\n-            if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n-                // We're in a better position than we were. Return temporarily to release the lock.\n-                fContinue = false;\n-                break;\n+                PruneBlockIndexCandidates();\n+                if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n+                    // We're in a better position than we were. Return temporarily to release the lock.\n+                    fContinue = false;\n+                    break;\n+                }\n             }\n         }\n     }\n-    }\n \n     if (fBlocksDisconnected)\n         mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);"
      }
    ]
  },
  {
    "sha": "bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjhlYTFmNjMwNGQ3ZWQzZjVmZTBhMDFjMDYwYWM5Zjk0NjI5MzQ5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T23:31:20Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:03:57Z"
      },
      "message": "removeForReorg calls once-per-disconnect-> once-per-reorg",
      "tree": {
        "sha": "41743375b4d3be9c81c497aec284ca10e79da2bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41743375b4d3be9c81c497aec284ca10e79da2bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "474b84a7413f124524cccf097dd36c7a24d406b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/474b84a7413f124524cccf097dd36c7a24d406b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/474b84a7413f124524cccf097dd36c7a24d406b8"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 15,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8f67c035106172be7c0d38214f909f8573a80042",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "patch": "@@ -2310,12 +2310,11 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     }\n }\n \n-/** Disconnect chainActive's tip. You want to manually re-limit mempool size after this */\n+/** Disconnect chainActive's tip. You probably want to call mempool.removeForReorg and manually re-limit mempool size after this, with cs_main held. */\n bool static DisconnectTip(CValidationState& state, const Consensus::Params& consensusParams)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete, consensusParams))\n@@ -2350,8 +2349,6 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n     // UpdateTransactionsFromBlock finds descendants of any transactions in this\n     // block that were added back and cleans up the mempool state.\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n-    mempool.removeForReorg(pcoinsTip, pindexDelete->nHeight);\n-    mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -2375,7 +2372,6 @@ static int64_t nTimePostConnect = 0;\n bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n     CBlock block;\n@@ -2412,7 +2408,6 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n-    mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n@@ -2515,8 +2510,11 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     // Disconnect active blocks which are no longer in the best chain.\n     bool fBlocksDisconnected = false;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-        if (!DisconnectTip(state, chainparams.GetConsensus()))\n+        if (!DisconnectTip(state, chainparams.GetConsensus())) {\n+            // Probably an AbortNode() error, but try to keep mempool consistent anyway\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n             return false;\n+        }\n         fBlocksDisconnected = true;\n     }\n \n@@ -2550,6 +2548,9 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n                     break;\n                 } else {\n                     // A system error occurred (disk space, database error, ...).\n+                    // Probably gonna shut down ASAP, but try to keep mempool consistent anyway\n+                    if (fBlocksDisconnected)\n+                        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n                     return false;\n                 }\n             } else {\n@@ -2563,8 +2564,11 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n         }\n     }\n \n-    if (fBlocksDisconnected)\n+    if (fBlocksDisconnected) {\n+        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n         mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    }\n+    mempool.check(pcoinsTip);\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n@@ -2672,6 +2676,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, consensusParams)) {\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n             return false;\n         }\n     }\n@@ -2689,6 +2694,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n     return true;\n }\n "
      },
      {
        "sha": "2996fdcb5a0e8cd7b37e1de135696d5f548e63e1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "patch": "@@ -467,7 +467,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n /** Remove invalidity status from a block and its descendants. */\n bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex);\n \n-/** The currently-connected chain of blocks. */\n+/** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain chainActive;\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */"
      }
    ]
  },
  {
    "sha": "7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTQ5ZjVmOGI0ZTIzN2Q3MjEyZDAyN2E3YmVhNGJiZDUyYzllN2I2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-10-29T18:06:13Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:12:53Z"
      },
      "message": "Track coinbase spends in CTxMemPoolEntry\n\nThis allows us to optimize CTxMemPool::removeForReorg.",
      "tree": {
        "sha": "43ad2997b024e53c22b81c7d585e0a752c134167",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43ad2997b024e53c22b81c7d585e0a752c134167"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8ea1f6304d7ed3f5fe0a01c060ac9f94629349"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 38,
      "deletions": 18
    },
    "files": [
      {
        "sha": "ad8819eb3d9d5418ff1b421d284f6fc802f09835",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -953,7 +953,18 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount inChainInputValue;\n         double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue);\n+        // Keep track of transactions that spend a coinbase, which we re-scan\n+        // during reorgs to ensure COINBASE_MATURITY is still met.\n+        bool fSpendsCoinbase = false;\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+            const CCoins *coins = view.AccessCoins(txin.prevout.hash);\n+            if (coins->IsCoinBase()) {\n+                fSpendsCoinbase = true;\n+                break;\n+            }\n+        }\n+\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block"
      },
      {
        "sha": "ab7357641daf05cccb8258695f5eb6f5834bd412",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -119,7 +119,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -139,7 +140,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -158,15 +160,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -177,7 +179,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -190,12 +192,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -206,10 +208,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -235,7 +237,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -249,7 +251,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx2));\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      },
      {
        "sha": "9645c7c94295888ba620a52ba6e7926b80488878",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue);\n+                           hasNoDependencies, inChainValue, spendsCoinbase);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "343c27673ce000756334fe7e9ed70fba1f065510",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -65,10 +65,11 @@ struct TestMemPoolEntryHelper\n     double dPriority;\n     unsigned int nHeight;\n     bool hadNoDependencies;\n+    bool spendsCoinbase;\n \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false) { }\n+        hadNoDependencies(false), spendsCoinbase(false) { }\n \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n@@ -78,5 +79,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Priority(double _priority) { dPriority = _priority; return *this; }\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n+    TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n };\n #endif"
      },
      {
        "sha": "5a3062291fd353847d7ea2aa7e69f6d1c262517e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -21,9 +21,11 @@ using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                                 bool poolHasNoInputsOf, CAmount _inChainInputValue):\n+                                 bool poolHasNoInputsOf, CAmount _inChainInputValue,\n+                                 bool _spendsCoinbase):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n-    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue)\n+    hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n+    spendsCoinbase(_spendsCoinbase)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -488,7 +490,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         const CTransaction& tx = it->GetTx();\n         if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime())) {\n             transactionsToRemove.push_back(tx);\n-        } else {\n+        } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())"
      },
      {
        "sha": "4c35f4ca0842846cdd0c5ed8f2c3e29847957809",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "patch": "@@ -67,6 +67,7 @@ class CTxMemPoolEntry\n     unsigned int entryHeight; //! Chain height when entering the mempool\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n+    bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -80,7 +81,7 @@ class CTxMemPoolEntry\n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                    bool poolHasNoInputsOf, CAmount _inChainInputValue);\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -109,6 +110,8 @@ class CTxMemPoolEntry\n     uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n     uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n     CAmount GetFeesWithDescendants() const { return nFeesWithDescendants; }\n+\n+    bool GetSpendsCoinbase() const { return spendsCoinbase; }\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index."
      }
    ]
  },
  {
    "sha": "b7fa4aa3876b56694b27af0beef367be9e0733fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2ZhNGFhMzg3NmI1NjY5NGIyN2FmMGJlZWYzNjdiZTllMDczM2Zk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-12T20:54:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T18:12:55Z"
      },
      "message": "Don't call removeForReorg if DisconnectTip fails",
      "tree": {
        "sha": "56e7b048f164a214890ab78282a35d23e3888360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56e7b048f164a214890ab78282a35d23e3888360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7fa4aa3876b56694b27af0beef367be9e0733fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e49f5f8b4e237d7212d027a7bea4bbd52c9e7b6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 1,
      "deletions": 7
    },
    "files": [
      {
        "sha": "feb526e09c3939c895430d6a40aa635c10f693a9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7fa4aa3876b56694b27af0beef367be9e0733fd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7fa4aa3876b56694b27af0beef367be9e0733fd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b7fa4aa3876b56694b27af0beef367be9e0733fd",
        "patch": "@@ -2521,11 +2521,8 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     // Disconnect active blocks which are no longer in the best chain.\n     bool fBlocksDisconnected = false;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-        if (!DisconnectTip(state, chainparams.GetConsensus())) {\n-            // Probably an AbortNode() error, but try to keep mempool consistent anyway\n-            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+        if (!DisconnectTip(state, chainparams.GetConsensus()))\n             return false;\n-        }\n         fBlocksDisconnected = true;\n     }\n \n@@ -2559,9 +2556,6 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n                     break;\n                 } else {\n                     // A system error occurred (disk space, database error, ...).\n-                    // Probably gonna shut down ASAP, but try to keep mempool consistent anyway\n-                    if (fBlocksDisconnected)\n-                        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n                     return false;\n                 }\n             } else {"
      }
    ]
  },
  {
    "sha": "2d8860e820e2ca73000f558eb9686206bec2652a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDg4NjBlODIwZTJjYTczMDAwZjU1OGViOTY4NjIwNmJlYzI2NTJh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-23T21:06:12Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-30T19:35:17Z"
      },
      "message": "Fix removeForReorg to use MedianTimePast",
      "tree": {
        "sha": "b30da37c98806571d0edfce8fe5731b1fe7131dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b30da37c98806571d0edfce8fe5731b1fe7131dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d8860e820e2ca73000f558eb9686206bec2652a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8860e820e2ca73000f558eb9686206bec2652a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8860e820e2ca73000f558eb9686206bec2652a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8860e820e2ca73000f558eb9686206bec2652a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7fa4aa3876b56694b27af0beef367be9e0733fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7fa4aa3876b56694b27af0beef367be9e0733fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7fa4aa3876b56694b27af0beef367be9e0733fd"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0b758f391ae81eb8398986ee387ae134f66b4d0f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8860e820e2ca73000f558eb9686206bec2652a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8860e820e2ca73000f558eb9686206bec2652a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2d8860e820e2ca73000f558eb9686206bec2652a",
        "patch": "@@ -2570,7 +2570,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     }\n \n     if (fBlocksDisconnected) {\n-        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n         mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     mempool.check(pcoinsTip);\n@@ -2681,7 +2681,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, consensusParams)) {\n-            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n             return false;\n         }\n     }\n@@ -2699,7 +2699,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n-    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     return true;\n }\n "
      },
      {
        "sha": "9d2513948112a04b57d2ee8ef83ebba5e309ceda",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2d8860e820e2ca73000f558eb9686206bec2652a",
        "patch": "@@ -481,14 +481,14 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     }\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime())) {\n+        if (!CheckFinalTx(tx, flags)) {\n             transactionsToRemove.push_back(tx);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      },
      {
        "sha": "c4ea51557c2aefc22ad3a19bc093cbc8808a0c37",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d8860e820e2ca73000f558eb9686206bec2652a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2d8860e820e2ca73000f558eb9686206bec2652a",
        "patch": "@@ -379,7 +379,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);"
      }
    ]
  }
]