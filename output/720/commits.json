[
  {
    "sha": "21d9f36781604e4ca9fc35dc65265593423b73e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWQ5ZjM2NzgxNjA0ZTRjYTlmYzM1ZGM2NTI2NTU5MzQyM2I3M2U5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-20T21:52:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-20T21:52:59Z"
      },
      "message": "Use standard C99 (and Qt) types for 64-bit integers",
      "tree": {
        "sha": "223bf70418e43a0b9c8366c65db214780f77d61a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/223bf70418e43a0b9c8366c65db214780f77d61a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21d9f36781604e4ca9fc35dc65265593423b73e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d9f36781604e4ca9fc35dc65265593423b73e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21d9f36781604e4ca9fc35dc65265593423b73e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d9f36781604e4ca9fc35dc65265593423b73e9/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "781c06c0f534913321a415a4fb64a60734e43101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/781c06c0f534913321a415a4fb64a60734e43101",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/781c06c0f534913321a415a4fb64a60734e43101"
      }
    ],
    "stats": {
      "total": 968,
      "additions": 526,
      "deletions": 442
    },
    "files": [
      {
        "sha": "21fcfaf766768372273376b53bdcc82d1ddbf196",
        "filename": "doc/coding.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/doc/coding.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/doc/coding.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/coding.txt?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -28,7 +28,7 @@ someVariable.\n \r\n Common types:\r\n n       integer number: short, unsigned short, int, unsigned int,\r\n-            int64, uint64, sometimes char if used as a number\r\n+            int64_t, uint64_t, sometimes char if used as a number\r\n d       double, float\r\n f       flag\r\n hash    uint256\r"
      },
      {
        "sha": "3f2d82f11b8eeded50ec18ca473d66daf5272ee8",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -15,6 +15,8 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n+#include <stdint.h>\n+\n #include <string>\n #include <vector>\n #include \"bignum.h\""
      },
      {
        "sha": "baa9cb55da5533ad7b82a032df2de649645fff11",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_BIGNUM_H\n #define BITCOIN_BIGNUM_H\n \n+#include <stdint.h>\n+\n #include <stdexcept>\n #include <vector>\n #include <openssl/bn.h>\n@@ -81,12 +83,12 @@ class CBigNum : public BIGNUM\n     CBigNum(short n)            { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n     CBigNum(int n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n     CBigNum(long n)             { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(int64 n)            { BN_init(this); setint64(n); }\n+    CBigNum(int64_t n)          { BN_init(this); setint64(n); }\n     CBigNum(unsigned char n)    { BN_init(this); setulong(n); }\n     CBigNum(unsigned short n)   { BN_init(this); setulong(n); }\n     CBigNum(unsigned int n)     { BN_init(this); setulong(n); }\n     CBigNum(unsigned long n)    { BN_init(this); setulong(n); }\n-    CBigNum(uint64 n)           { BN_init(this); setuint64(n); }\n+    CBigNum(uint64_t n)         { BN_init(this); setuint64(n); }\n     explicit CBigNum(uint256 n) { BN_init(this); setuint256(n); }\n \n     explicit CBigNum(const std::vector<unsigned char>& vch)\n@@ -120,12 +122,12 @@ class CBigNum : public BIGNUM\n             return (n > std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n     }\n \n-    void setint64(int64 n)\n+    void setint64(int64_t n)\n     {\n         unsigned char pch[sizeof(n) + 6];\n         unsigned char* p = pch + 4;\n         bool fNegative = false;\n-        if (n < (int64)0)\n+        if (n < (int64_t)0)\n         {\n             n = -n;\n             fNegative = true;\n@@ -155,7 +157,7 @@ class CBigNum : public BIGNUM\n         BN_mpi2bn(pch, p - pch, this);\n     }\n \n-    void setuint64(uint64 n)\n+    void setuint64(uint64_t n)\n     {\n         unsigned char pch[sizeof(n) + 6];\n         unsigned char* p = pch + 4;"
      },
      {
        "sha": "0c22e0bb8b19e4d6c460513ba2b7619e895de08d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 51,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"db.h\"\n #include \"net.h\"\n@@ -40,7 +42,7 @@ extern map<string, rpcfn_type> mapCallTable;\n \n static std::string strRPCUserColonPass;\n \n-static int64 nWalletUnlockTime;\n+static int64_t nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n extern Value dumpprivkey(const Array& params, bool fHelp);\n@@ -73,18 +75,18 @@ void PrintConsole(const std::string &format, ...)\n }\n \n \n-int64 AmountFromValue(const Value& value)\n+int64_t AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n         throw JSONRPCError(-3, \"Invalid amount\");\n-    int64 nAmount = roundint64(dAmount * COIN);\n+    int64_t nAmount = roundint64(dAmount * COIN);\n     if (!MoneyRange(nAmount))\n         throw JSONRPCError(-3, \"Invalid amount\");\n     return nAmount;\n }\n \n-Value ValueFromAmount(int64 amount)\n+Value ValueFromAmount(int64_t amount)\n {\n     return (double)amount / (double)COIN;\n }\n@@ -499,7 +501,7 @@ Value settxfee(const Array& params, bool fHelp)\n             \"<amount> is a real and is rounded to the nearest 0.00000001\");\n \n     // Amount\n-    int64 nAmount = 0;\n+    int64_t nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n \n@@ -524,7 +526,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(-5, \"Invalid bitcoin address\");\n \n     // Amount\n-    int64 nAmount = AmountFromValue(params[1]);\n+    int64_t nAmount = AmountFromValue(params[1]);\n \n     // Wallet comments\n     CWalletTx wtx;\n@@ -632,7 +634,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     // Tally\n-    int64 nAmount = 0;\n+    int64_t nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -679,7 +681,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     GetAccountAddresses(strAccount, setAddress);\n \n     // Tally\n-    int64 nAmount = 0;\n+    int64_t nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -699,9 +701,9 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n+int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n {\n-    int64 nBalance = 0;\n+    int64_t nBalance = 0;\n \n     // Tally wallet transactions\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -710,7 +712,7 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n         if (!wtx.IsFinal())\n             continue;\n \n-        int64 nGenerated, nReceived, nSent, nFee;\n+        int64_t nGenerated, nReceived, nSent, nFee;\n         wtx.GetAccountAmounts(strAccount, nGenerated, nReceived, nSent, nFee);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n@@ -724,7 +726,7 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n     return nBalance;\n }\n \n-int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n+int64_t GetAccountBalance(const string& strAccount, int nMinDepth)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth);\n@@ -750,23 +752,23 @@ Value getbalance(const Array& params, bool fHelp)\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' should always return the same number.\n-        int64 nBalance = 0;\n+        int64_t nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsFinal())\n                 continue;\n \n-            int64 allGeneratedImmature, allGeneratedMature, allFee;\n+            int64_t allGeneratedImmature, allGeneratedMature, allFee;\n             allGeneratedImmature = allGeneratedMature = allFee = 0;\n             string strSentAccount;\n-            list<pair<CBitcoinAddress, int64> > listReceived;\n-            list<pair<CBitcoinAddress, int64> > listSent;\n+            list<pair<CBitcoinAddress, int64_t> > listReceived;\n+            list<pair<CBitcoinAddress, int64_t> > listSent;\n             wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n-                BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64_t)& r, listReceived)\n                     nBalance += r.second;\n-            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64_t)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n             nBalance += allGeneratedMature;\n@@ -776,7 +778,7 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n \n     return ValueFromAmount(nBalance);\n }\n@@ -791,7 +793,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n-    int64 nAmount = AmountFromValue(params[2]);\n+    int64_t nAmount = AmountFromValue(params[2]);\n     if (params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)params[3].get_int();\n@@ -802,7 +804,7 @@ Value movecmd(const Array& params, bool fHelp)\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     walletdb.TxnBegin();\n \n-    int64 nNow = GetAdjustedTime();\n+    int64_t nNow = GetAdjustedTime();\n \n     // Debit\n     CAccountingEntry debit;\n@@ -844,7 +846,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(-5, \"Invalid bitcoin address\");\n-    int64 nAmount = AmountFromValue(params[2]);\n+    int64_t nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n@@ -860,7 +862,7 @@ Value sendfrom(const Array& params, bool fHelp)\n         throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (nAmount > nBalance)\n         throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n@@ -897,9 +899,9 @@ Value sendmany(const Array& params, bool fHelp)\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, int64> > vecSend;\n+    vector<pair<CScript, int64_t> > vecSend;\n \n-    int64 totalAmount = 0;\n+    int64_t totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n@@ -912,7 +914,7 @@ Value sendmany(const Array& params, bool fHelp)\n \n         CScript scriptPubKey;\n         scriptPubKey.SetBitcoinAddress(address);\n-        int64 nAmount = AmountFromValue(s.value_); \n+        int64_t nAmount = AmountFromValue(s.value_); \n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -922,13 +924,13 @@ Value sendmany(const Array& params, bool fHelp)\n         throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n-    int64 nFeeRequired = 0;\n+    int64_t nFeeRequired = 0;\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n     if (!fCreated)\n     {\n@@ -1007,7 +1009,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n \n struct tallyitem\n {\n-    int64 nAmount;\n+    int64_t nAmount;\n     int nConf;\n     tallyitem()\n     {\n@@ -1063,7 +1065,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n-        int64 nAmount = 0;\n+        int64_t nAmount = 0;\n         int nConf = std::numeric_limits<int>::max();\n         if (it != mapTally.end())\n         {\n@@ -1092,7 +1094,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         for (map<string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n         {\n-            int64 nAmount = (*it).second.nAmount;\n+            int64_t nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n             Object obj;\n             obj.push_back(Pair(\"account\",       (*it).first));\n@@ -1138,10 +1140,10 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n-    int64 nGeneratedImmature, nGeneratedMature, nFee;\n+    int64_t nGeneratedImmature, nGeneratedMature, nFee;\n     string strSentAccount;\n-    list<pair<CBitcoinAddress, int64> > listReceived;\n-    list<pair<CBitcoinAddress, int64> > listSent;\n+    list<pair<CBitcoinAddress, int64_t> > listReceived;\n+    list<pair<CBitcoinAddress, int64_t> > listSent;\n     wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n@@ -1169,7 +1171,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64_t)& s, listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1185,7 +1187,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64_t)& r, listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1243,7 +1245,7 @@ Value listtransactions(const Array& params, bool fHelp)\n \n     // Firs: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap:\n     typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef multimap<int64, TxPair > TxItems;\n+    typedef multimap<int64_t, TxPair > TxItems;\n     TxItems txByTime;\n \n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -1297,7 +1299,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n \n-    map<string, int64> mapAccountBalances;\n+    map<string, int64_t> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& entry, pwalletMain->mapAddressBook) {\n         if (pwalletMain->HaveKey(entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second] = 0;\n@@ -1306,18 +1308,18 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64 nGeneratedImmature, nGeneratedMature, nFee;\n+        int64_t nGeneratedImmature, nGeneratedMature, nFee;\n         string strSentAccount;\n-        list<pair<CBitcoinAddress, int64> > listReceived;\n-        list<pair<CBitcoinAddress, int64> > listSent;\n+        list<pair<CBitcoinAddress, int64_t> > listReceived;\n+        list<pair<CBitcoinAddress, int64_t> > listSent;\n         wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64_t)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n             mapAccountBalances[\"\"] += nGeneratedMature;\n-            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n+            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64_t)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;\n                 else\n@@ -1331,7 +1333,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    BOOST_FOREACH(const PAIRTYPE(string, int64)& accountBalance, mapAccountBalances) {\n+    BOOST_FOREACH(const PAIRTYPE(string, int64_t)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1417,10 +1419,10 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    int64 nCredit = wtx.GetCredit();\n-    int64 nDebit = wtx.GetDebit();\n-    int64 nNet = nCredit - nDebit;\n-    int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n+    int64_t nCredit = wtx.GetCredit();\n+    int64_t nDebit = wtx.GetDebit();\n+    int64_t nNet = nCredit - nDebit;\n+    int64_t nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe())\n@@ -1480,7 +1482,7 @@ void ThreadTopUpKeyPool(void* parg)\n \n void ThreadCleanWalletPassphrase(void* parg)\n {\n-    int64 nMyWakeTime = GetTime() + *((int*)parg);\n+    int64_t nMyWakeTime = GetTime() + *((int*)parg);\n \n     if (nWalletUnlockTime == 0)\n     {\n@@ -1727,7 +1729,7 @@ Value getwork(const Array& params, bool fHelp)\n         // Update block\n         static unsigned int nTransactionsUpdatedLast;\n         static CBlockIndex* pindexPrev;\n-        static int64 nStart;\n+        static int64_t nStart;\n         static CBlock* pblock;\n         if (pindexPrev != pindexBest ||\n             (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60))\n@@ -1831,7 +1833,7 @@ Value getmemorypool(const Array& params, bool fHelp)\n         // Update block\n         static unsigned int nTransactionsUpdatedLast;\n         static CBlockIndex* pindexPrev;\n-        static int64 nStart;\n+        static int64_t nStart;\n         static CBlock* pblock;\n         if (pindexPrev != pindexBest ||\n             (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 5))"
      },
      {
        "sha": "578742e3093065cf129ed03f509e86f6340b2bea",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n@@ -52,7 +54,7 @@ namespace Checkpoints\n     {\n         if (fTestNet) return NULL;\n \n-        int64 nResult;\n+        int64_t nResult;\n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, mapCheckpoints)\n         {\n             const uint256& hash = i.second;"
      },
      {
        "sha": "af2ae834dd40bedc09fa589a315354bfa5fc3b4d",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"db.h\"\n #include \"net.h\"\n@@ -14,7 +16,7 @@ using namespace boost;\n \n \n unsigned int nWalletDBUpdated;\n-uint64 nAccountingEntryNumber = 0;\n+uint64_t nAccountingEntryNumber = 0;\n \n \n \n@@ -705,12 +707,12 @@ bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n     return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, ++nAccountingEntryNumber), acentry);\n }\n \n-int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+int64_t CWalletDB::GetAccountCreditDebit(const string& strAccount)\n {\n     list<CAccountingEntry> entries;\n     ListAccountCreditDebit(strAccount, entries);\n \n-    int64 nCreditDebit = 0;\n+    int64_t nCreditDebit = 0;\n     BOOST_FOREACH (const CAccountingEntry& entry, entries)\n         nCreditDebit += entry.nCreditDebit;\n \n@@ -730,7 +732,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         // Read next record\n         CDataStream ssKey;\n         if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n+            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64_t(0));\n         CDataStream ssValue;\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n@@ -846,7 +848,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n             {\n                 string strAccount;\n                 ssKey >> strAccount;\n-                uint64 nNumber;\n+                uint64_t nNumber;\n                 ssKey >> nNumber;\n                 if (nNumber > nAccountingEntryNumber)\n                     nAccountingEntryNumber = nNumber;\n@@ -899,7 +901,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n             }\n             else if (strType == \"pool\")\n             {\n-                int64 nIndex;\n+                int64_t nIndex;\n                 ssKey >> nIndex;\n                 pwallet->setKeyPool.insert(nIndex);\n             }\n@@ -989,7 +991,7 @@ void ThreadFlushWalletDB(void* parg)\n \n     unsigned int nLastSeen = nWalletDBUpdated;\n     unsigned int nLastFlushed = nWalletDBUpdated;\n-    int64 nLastWalletUpdate = GetTime();\n+    int64_t nLastWalletUpdate = GetTime();\n     while (!fShutdown)\n     {\n         Sleep(500);\n@@ -1021,7 +1023,7 @@ void ThreadFlushWalletDB(void* parg)\n                         printf(\"%s \", DateTimeStrFormat(\"%x %H:%M:%S\", GetTime()).c_str());\n                         printf(\"Flushing wallet.dat\\n\");\n                         nLastFlushed = nWalletDBUpdated;\n-                        int64 nStart = GetTimeMillis();\n+                        int64_t nStart = GetTimeMillis();\n \n                         // Flush wallet.dat so it's self contained\n                         CloseDb(strFile);"
      },
      {
        "sha": "674d1475d592c1b89ffbd1eb53e10cd51425105c",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_DB_H\n #define BITCOIN_DB_H\n \n+#include <stdint.h>\n+\n #include \"key.h\"\n \n #include <map>\n@@ -317,7 +319,7 @@ bool LoadAddresses();\n class CKeyPool\n {\n public:\n-    int64 nTime;\n+    int64_t nTime;\n     std::vector<unsigned char> vchPubKey;\n \n     CKeyPool()\n@@ -456,18 +458,18 @@ class CWalletDB : public CDB\n         return Write(std::string(\"defaultkey\"), vchPubKey);\n     }\n \n-    bool ReadPool(int64 nPool, CKeyPool& keypool)\n+    bool ReadPool(int64_t nPool, CKeyPool& keypool)\n     {\n         return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n     }\n \n-    bool WritePool(int64 nPool, const CKeyPool& keypool)\n+    bool WritePool(int64_t nPool, const CKeyPool& keypool)\n     {\n         nWalletDBUpdated++;\n         return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n     }\n \n-    bool ErasePool(int64 nPool)\n+    bool ErasePool(int64_t nPool)\n     {\n         nWalletDBUpdated++;\n         return Erase(std::make_pair(std::string(\"pool\"), nPool));\n@@ -489,7 +491,7 @@ class CWalletDB : public CDB\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64 GetAccountCreditDebit(const std::string& strAccount);\n+    int64_t GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     int LoadWallet(CWallet* pwallet);"
      },
      {
        "sha": "6fa25ac2814b589bbbf28697c12765952d671fe5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -2,6 +2,9 @@\n // Copyright (c) 2011 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"db.h\"\n #include \"bitcoinrpc.h\"\n@@ -349,7 +352,7 @@ bool AppInit2(int argc, char* argv[])\n     //\n     if (fDaemon)\n         fprintf(stdout, \"bitcoin server starting\\n\");\n-    int64 nStart;\n+    int64_t nStart;\n \n     InitMessage(_(\"Loading addresses...\"));\n     printf(\"Loading addresses...\\n\");"
      },
      {
        "sha": "0f6f46e5f7689a8ec296057378bb8199ef4d6955",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"irc.h\"\n #include \"net.h\"\n@@ -354,7 +356,7 @@ void ThreadIRCSeed2(void* parg)\n             Send(hSocket, strprintf(\"WHO #bitcoin%02d\\r\", channel_number).c_str());\n         }\n \n-        int64 nStart = GetTime();\n+        int64_t nStart = GetTime();\n         string strLine;\n         strLine.reserve(10000);\n         while (!fShutdown && RecvLineIRC(hSocket, strLine))"
      },
      {
        "sha": "c1f54a5fa8e26527beaae6c9cbc9a964b844a91f",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"crypter.h\"\n #include \"db.h\""
      },
      {
        "sha": "975c2b9ba9dcdb24754a94aa95174ba5b03ee54b",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_KEYSTORE_H\n #define BITCOIN_KEYSTORE_H\n \n+#include <stdint.h>\n+\n #include \"crypter.h\"\n #include \"script.h\"\n "
      },
      {
        "sha": "0b004466a09014217a1fdf8cdf2c832ef2ab58e8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 43,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -2,6 +2,9 @@\n // Copyright (c) 2011 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"checkpoints.h\"\n #include \"db.h\"\n@@ -42,7 +45,7 @@ CBigNum bnBestChainWork = 0;\n CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n-int64 nTimeBestReceived = 0;\n+int64_t nTimeBestReceived = 0;\n \n CMedianFilter<int> cPeerBlockCounts(5, 0); // Amount of blocks that other nodes claim to have\n \n@@ -54,11 +57,11 @@ multimap<uint256, CDataStream*> mapOrphanTransactionsByPrev;\n \n \n double dHashesPerSec;\n-int64 nHPSTimerStart;\n+int64_t nHPSTimerStart;\n \n // Settings\n int fGenerateBitcoins = false;\n-int64 nTransactionFee = 0;\n+int64_t nTransactionFee = 0;\n int fLimitProcessors = false;\n int nLimitProcessors = 1;\n int fMinimizeToTray = true;\n@@ -378,7 +381,7 @@ bool CTransaction::CheckTransaction() const\n         return DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n \n     // Check for negative or overflow output values\n-    int64 nValueOut = 0;\n+    int64_t nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         if (txout.nValue < 0)\n@@ -427,7 +430,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         return DoS(100, error(\"AcceptToMemoryPool() : coinbase as individual tx\"));\n \n     // To help v0.1.5 clients who would see it as a negative number\n-    if ((int64)nLockTime > std::numeric_limits<int>::max())\n+    if ((int64_t)nLockTime > std::numeric_limits<int>::max())\n         return error(\"AcceptToMemoryPool() : not accepting nLockTime beyond 2038 yet\");\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n@@ -487,7 +490,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n             return error(\"AcceptToMemoryPool() : nonstandard transaction input\");\n \n         // Check against previous transactions\n-        int64 nFees = 0;\n+        int64_t nFees = 0;\n         int nSigOps = 0;\n         if (!ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, nFees, false, false, nSigOps))\n         {\n@@ -513,8 +516,8 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         {\n             static CCriticalSection cs;\n             static double dFreeCount;\n-            static int64 nLastTime;\n-            int64 nNow = GetTime();\n+            static int64_t nLastTime;\n+            int64_t nNow = GetTime();\n \n             CRITICAL_BLOCK(cs)\n             {\n@@ -725,25 +728,25 @@ uint256 static GetOrphanRoot(const CBlock* pblock)\n     return pblock->GetHash();\n }\n \n-int64 static GetBlockValue(int nHeight, int64 nFees)\n+int64_t static GetBlockValue(int nHeight, int64_t nFees)\n {\n-    int64 nSubsidy = 50 * COIN;\n+    int64_t nSubsidy = 50 * COIN;\n \n     // Subsidy is cut in half every 4 years\n     nSubsidy >>= (nHeight / 210000);\n \n     return nSubsidy + nFees;\n }\n \n-static const int64 nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-static const int64 nTargetSpacing = 10 * 60;\n-static const int64 nInterval = nTargetTimespan / nTargetSpacing;\n+static const int64_t nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+static const int64_t nTargetSpacing = 10 * 60;\n+static const int64_t nInterval = nTargetTimespan / nTargetSpacing;\n \n //\n // minimum amount of work that could possibly be required nTime after\n // minimum work required was nBase\n //\n-unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n+unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n {\n     CBigNum bnResult;\n     bnResult.SetCompact(nBase);\n@@ -777,7 +780,7 @@ unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast)\n     assert(pindexFirst);\n \n     // Limit adjustment step\n-    int64 nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n     printf(\"  nActualTimespan = %\"PRI64d\"  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < nTargetTimespan/4)\n         nActualTimespan = nTargetTimespan/4;\n@@ -828,7 +831,7 @@ bool IsInitialBlockDownload()\n {\n     if (pindexBest == NULL || nBestHeight < (Checkpoints::GetTotalBlocksEstimate()-nInitialBlockThreshold))\n         return true;\n-    static int64 nLastUpdate;\n+    static int64_t nLastUpdate;\n     static CBlockIndex* pindexLastBest;\n     if (pindexBest != pindexLastBest)\n     {\n@@ -951,15 +954,15 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n \n bool CTransaction::ConnectInputs(map<uint256, pair<CTxIndex, CTransaction> > inputs,\n                                  map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64 nMinFee)\n+                                 CBlockIndex* pindexBlock, int64_t& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64_t nMinFee)\n {\n     // Take over previous transactions' spent pointers\n     // fBlock is true when this is called from AcceptBlock when a new best-block is added to the blockchain\n     // fMiner is true when called from the internal bitcoin miner\n     // ... both are false when called from CTransaction::AcceptToMemoryPool\n     if (!IsCoinBase())\n     {\n-        int64 nValueIn = 0;\n+        int64_t nValueIn = 0;\n         for (int i = 0; i < vin.size(); i++)\n         {\n             COutPoint prevout = vin[i].prevout;\n@@ -989,7 +992,7 @@ bool CTransaction::ConnectInputs(map<uint256, pair<CTxIndex, CTransaction> > inp\n                     // To avoid being on the short end of a block-chain split,\n                     // interpret OP_EVAL as a NO_OP until blocks with timestamps\n                     // after opevaltime:\n-                    int64 nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400); // Feb 1, 2012\n+                    int64_t nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400); // Feb 1, 2012\n                     fStrictOpEval = (pindexBlock->nTime >= nEvalSwitchTime);\n                 }\n                 // if !fBlock, then always be strict-- don't accept\n@@ -1027,7 +1030,7 @@ bool CTransaction::ConnectInputs(map<uint256, pair<CTxIndex, CTransaction> > inp\n             return DoS(100, error(\"ConnectInputs() : %s value in < value out\", GetHash().ToString().substr(0,10).c_str()));\n \n         // Tally transaction fees\n-        int64 nTxFee = nValueIn - GetValueOut();\n+        int64_t nTxFee = nValueIn - GetValueOut();\n         if (nTxFee < 0)\n             return DoS(100, error(\"ConnectInputs() : %s nTxFee < 0\", GetHash().ToString().substr(0,10).c_str()));\n         if (nTxFee < nMinFee)\n@@ -1060,7 +1063,7 @@ bool CTransaction::ClientConnectInputs()\n     // Take over previous transactions' spent pointers\n     CRITICAL_BLOCK(cs_mapTransactions)\n     {\n-        int64 nValueIn = 0;\n+        int64_t nValueIn = 0;\n         for (int i = 0; i < vin.size(); i++)\n         {\n             // Get prev tx from single transactions in memory\n@@ -1131,7 +1134,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(), SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size());\n \n     map<uint256, CTxIndex> mapQueuedChanges;\n-    int64 nFees = 0;\n+    int64_t nFees = 0;\n     int nSigOps = 0;\n     BOOST_FOREACH(CTransaction& tx, vtx)\n     {\n@@ -1499,7 +1502,7 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64_t deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n             pfrom->Misbehaving(100);\n@@ -1565,12 +1568,12 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n \n \n \n-bool CheckDiskSpace(uint64 nAdditionalBytes)\n+bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n-    uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = filesystem::space(GetDataDir()).available;\n \n     // Check for 15MB because database could create another 10MB log file at any time\n-    if (nFreeBytesAvailable < (uint64)15000000 + nAdditionalBytes)\n+    if (nFreeBytesAvailable < (uint64_t)15000000 + nAdditionalBytes)\n     {\n         fShutdown = true;\n         string strMessage = _(\"Warning: Disk space is low  \");\n@@ -1945,10 +1948,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             return false;\n         }\n \n-        int64 nTime;\n+        int64_t nTime;\n         CAddress addrMe;\n         CAddress addrFrom;\n-        uint64 nNonce = 1;\n+        uint64_t nNonce = 1;\n         vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n         if (pfrom->nVersion == 10300)\n             pfrom->nVersion = 300;\n@@ -2059,8 +2062,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // Store the new addresses\n         CAddrDB addrDB;\n         addrDB.TxnBegin();\n-        int64 nNow = GetAdjustedTime();\n-        int64 nSince = nNow - 10 * 60;\n+        int64_t nNow = GetAdjustedTime();\n+        int64_t nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n         {\n             if (fShutdown)\n@@ -2082,7 +2085,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     static uint256 hashSalt;\n                     if (hashSalt == 0)\n                         RAND_bytes((unsigned char*)&hashSalt, sizeof(hashSalt));\n-                    uint256 hashRand = hashSalt ^ (((int64)addr.ip)<<32) ^ ((GetTime()+addr.ip)/(24*60*60));\n+                    uint256 hashRand = hashSalt ^ (((int64_t)addr.ip)<<32) ^ ((GetTime()+addr.ip)/(24*60*60));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n                     multimap<uint256, CNode*> mapMix;\n                     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -2344,7 +2347,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     {\n         // Nodes rebroadcast an addr every 24 hours\n         pfrom->vAddrToSend.clear();\n-        int64 nSince = GetAdjustedTime() - 3 * 60 * 60; // in the last 3 hours\n+        int64_t nSince = GetAdjustedTime() - 3 * 60 * 60; // in the last 3 hours\n         CRITICAL_BLOCK(cs_mapAddresses)\n         {\n             unsigned int nCount = 0;\n@@ -2582,7 +2585,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         ResendWalletTransactions();\n \n         // Address refresh broadcast\n-        static int64 nLastRebroadcast;\n+        static int64_t nLastRebroadcast;\n         if (GetTime() - nLastRebroadcast > 24 * 60 * 60)\n         {\n             nLastRebroadcast = GetTime();\n@@ -2605,7 +2608,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         }\n \n         // Clear out old addresses periodically so it's not too much work at once\n-        static int64 nLastClear;\n+        static int64_t nLastClear;\n         if (nLastClear == 0)\n             nLastClear = GetTime();\n         if (GetTime() - nLastClear > 10 * 60 && vNodes.size() >= 3)\n@@ -2614,7 +2617,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             CRITICAL_BLOCK(cs_mapAddresses)\n             {\n                 CAddrDB addrdb;\n-                int64 nSince = GetAdjustedTime() - 14 * 24 * 60 * 60;\n+                int64_t nSince = GetAdjustedTime() - 14 * 24 * 60 * 60;\n                 for (map<vector<unsigned char>, CAddress>::iterator mi = mapAddresses.begin();\n                      mi != mapAddresses.end();)\n                 {\n@@ -2722,7 +2725,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Message: getdata\n         //\n         vector<CInv> vGetData;\n-        int64 nNow = GetTime() * 1000000;\n+        int64_t nNow = GetTime() * 1000000;\n         CTxDB txdb(\"r\");\n         while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n@@ -2877,7 +2880,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     pblock->vtx.push_back(txNew);\n \n     // Collect memory pool transactions into the block\n-    int64 nFees = 0;\n+    int64_t nFees = 0;\n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(cs_mapTransactions)\n     {\n@@ -2913,7 +2916,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n                     porphan->setDependsOn.insert(txin.prevout.hash);\n                     continue;\n                 }\n-                int64 nValueIn = txPrev.vout[txin.prevout.n].nValue;\n+                int64_t nValueIn = txPrev.vout[txin.prevout.n].nValue;\n \n                 // Read block header\n                 int nConf = txindex.GetDepthInMainChain();\n@@ -2943,7 +2946,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n         // Collect transactions into block\n         map<uint256, CTxIndex> mapTestPool;\n-        uint64 nBlockSize = 1000;\n+        uint64_t nBlockSize = 1000;\n         int nBlockSigOps = 100;\n         while (!mapPriority.empty())\n         {\n@@ -2959,7 +2962,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n+            int64_t nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n \n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency\n@@ -3169,7 +3172,7 @@ void static BitcoinMiner(CWallet *pwallet)\n         //\n         // Search\n         //\n-        int64 nStart = GetTime();\n+        int64_t nStart = GetTime();\n         uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n         uint256 hashbuf[2];\n         uint256& hash = *alignup<16>(hashbuf);\n@@ -3202,7 +3205,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             }\n \n             // Meter hashes/sec\n-            static int64 nHashCounter;\n+            static int64_t nHashCounter;\n             if (nHPSTimerStart == 0)\n             {\n                 nHPSTimerStart = GetTimeMillis();\n@@ -3222,7 +3225,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                         nHashCounter = 0;\n                         string strStatus = strprintf(\"    %.0f khash/s\", dHashesPerSec/1000.0);\n                         UIThreadCall(boost::bind(CalledSetStatusBar, strStatus, 0));\n-                        static int64 nLogTime;\n+                        static int64_t nLogTime;\n                         if (GetTime() - nLogTime > 30 * 60)\n                         {\n                             nLogTime = GetTime();"
      },
      {
        "sha": "7b18d22b6961d2f88c917068fe1681cf24fa2f7c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 34,
        "deletions": 32,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n+#include <stdint.h>\n+\n #include \"bignum.h\"\n #include \"net.h\"\n #include \"key.h\"\n@@ -34,12 +36,12 @@ extern const std::string CLIENT_NAME;\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE/2;\n static const int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n-static const int64 COIN = 100000000;\n-static const int64 CENT = 1000000;\n-static const int64 MIN_TX_FEE = 50000;\n-static const int64 MIN_RELAY_TX_FEE = 10000;\n-static const int64 MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+static const int64_t COIN = 100000000;\n+static const int64_t CENT = 1000000;\n+static const int64_t MIN_TX_FEE = 50000;\n+static const int64_t MIN_RELAY_TX_FEE = 10000;\n+static const int64_t MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n static const int COINBASE_MATURITY = 100;\n // Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp.\n static const int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n@@ -65,14 +67,14 @@ extern uint256 hashBestChain;\n extern CBlockIndex* pindexBest;\n extern unsigned int nTransactionsUpdated;\n extern double dHashesPerSec;\n-extern int64 nHPSTimerStart;\n-extern int64 nTimeBestReceived;\n+extern int64_t nHPSTimerStart;\n+extern int64_t nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n \n // Settings\n extern int fGenerateBitcoins;\n-extern int64 nTransactionFee;\n+extern int64_t nTransactionFee;\n extern int fLimitProcessors;\n extern int nLimitProcessors;\n extern int fMinimizeToTray;\n@@ -90,7 +92,7 @@ class CTxIndex;\n void RegisterWallet(CWallet* pwalletIn);\n void UnregisterWallet(CWallet* pwalletIn);\n bool ProcessBlock(CNode* pfrom, CBlock* pblock);\n-bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n+bool CheckDiskSpace(uint64_t nAdditionalBytes=0);\n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode=\"rb\");\n FILE* AppendBlockFile(unsigned int& nFileRet);\n bool LoadBlockIndex(bool fAllowNew=true);\n@@ -103,7 +105,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n-unsigned int ComputeMinWork(unsigned int nBase, int64 nTime);\n+unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime);\n int GetNumBlocksOfPeers();\n bool IsInitialBlockDownload();\n std::string GetWarnings(std::string strFor);\n@@ -330,15 +332,15 @@ class CTxIn\n class CTxOut\n {\n public:\n-    int64 nValue;\n+    int64_t nValue;\n     CScript scriptPubKey;\n \n     CTxOut()\n     {\n         SetNull();\n     }\n \n-    CTxOut(int64 nValueIn, CScript scriptPubKeyIn)\n+    CTxOut(int64_t nValueIn, CScript scriptPubKeyIn)\n     {\n         nValue = nValueIn;\n         scriptPubKey = scriptPubKeyIn;\n@@ -449,7 +451,7 @@ class CTransaction\n         return SerializeHash(*this);\n     }\n \n-    bool IsFinal(int nBlockHeight=0, int64 nBlockTime=0) const\n+    bool IsFinal(int nBlockHeight=0, int64_t nBlockTime=0) const\n     {\n         // Time based nLockTime implemented in 0.1.6\n         if (nLockTime == 0)\n@@ -458,7 +460,7 @@ class CTransaction\n             nBlockHeight = nBestHeight;\n         if (nBlockTime == 0)\n             nBlockTime = GetAdjustedTime();\n-        if ((int64)nLockTime < (nLockTime < LOCKTIME_THRESHOLD ? (int64)nBlockHeight : nBlockTime))\n+        if ((int64_t)nLockTime < (nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n             return true;\n         BOOST_FOREACH(const CTxIn& txin, vin)\n             if (!txin.IsFinal())\n@@ -503,9 +505,9 @@ class CTransaction\n     bool IsStandard() const;\n     bool AreInputsStandard(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const;\n \n-    int64 GetValueOut() const\n+    int64_t GetValueOut() const\n     {\n-        int64 nValueOut = 0;\n+        int64_t nValueOut = 0;\n         BOOST_FOREACH(const CTxOut& txout, vout)\n         {\n             nValueOut += txout.nValue;\n@@ -522,14 +524,14 @@ class CTransaction\n         return dPriority > COIN * 144 / 250;\n     }\n \n-    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n+    int64_t GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n     {\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n-        int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n+        int64_t nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n \n         unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK);\n         unsigned int nNewBlockSize = nBlockSize + nBytes;\n-        int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n+        int64_t nMinFee = (1 + (int64_t)nBytes / 1000) * nBaseFee;\n \n         if (fAllowFree)\n         {\n@@ -635,7 +637,7 @@ class CTransaction\n                      bool fBlock, bool fMiner, std::map<uint256, std::pair<CTxIndex, CTransaction> >& inputsRet);\n     bool ConnectInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > inputs,\n                        std::map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                       CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64 nMinFee=0);\n+                       CBlockIndex* pindexBlock, int64_t& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64_t nMinFee=0);\n     bool ClientConnectInputs();\n     bool CheckTransaction() const;\n     bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool* pfMissingInputs=NULL);\n@@ -840,9 +842,9 @@ class CBlock\n         return Hash(BEGIN(nVersion), END(nNonce));\n     }\n \n-    int64 GetBlockTime() const\n+    int64_t GetBlockTime() const\n     {\n-        return (int64)nTime;\n+        return (int64_t)nTime;\n     }\n \n \n@@ -1066,9 +1068,9 @@ class CBlockIndex\n         return *phashBlock;\n     }\n \n-    int64 GetBlockTime() const\n+    int64_t GetBlockTime() const\n     {\n-        return (int64)nTime;\n+        return (int64_t)nTime;\n     }\n \n     CBigNum GetBlockWork() const\n@@ -1107,11 +1109,11 @@ class CBlockIndex\n \n     enum { nMedianTimeSpan=11 };\n \n-    int64 GetMedianTimePast() const\n+    int64_t GetMedianTimePast() const\n     {\n-        int64 pmedian[nMedianTimeSpan];\n-        int64* pbegin = &pmedian[nMedianTimeSpan];\n-        int64* pend = &pmedian[nMedianTimeSpan];\n+        int64_t pmedian[nMedianTimeSpan];\n+        int64_t* pbegin = &pmedian[nMedianTimeSpan];\n+        int64_t* pend = &pmedian[nMedianTimeSpan];\n \n         const CBlockIndex* pindex = this;\n         for (int i = 0; i < nMedianTimeSpan && pindex; i++, pindex = pindex->pprev)\n@@ -1121,7 +1123,7 @@ class CBlockIndex\n         return pbegin[(pend - pbegin)/2];\n     }\n \n-    int64 GetMedianTime() const\n+    int64_t GetMedianTime() const\n     {\n         const CBlockIndex* pindex = this;\n         for (int i = 0; i < nMedianTimeSpan/2; i++)\n@@ -1375,8 +1377,8 @@ class CUnsignedAlert\n {\n public:\n     int nVersion;\n-    int64 nRelayUntil;      // when newer nodes stop relaying to newer nodes\n-    int64 nExpiration;\n+    int64_t nRelayUntil;      // when newer nodes stop relaying to newer nodes\n+    int64_t nExpiration;\n     int nID;\n     int nCancel;\n     std::set<int> setCancel;"
      },
      {
        "sha": "b90eebde4fa5f1ed28afb50e2a92036b825f3fd6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"irc.h\"\n #include \"db.h\"\n@@ -44,10 +46,10 @@ bool OpenNetworkConnection(const CAddress& addrConnect);\n //\n bool fClient = false;\n bool fAllowDNS = false;\n-uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n+uint64_t nLocalServices = (fClient ? 0 : NODE_NETWORK);\n CAddress addrLocalHost(\"0.0.0.0\", 0, false, nLocalServices);\n static CNode* pnodeLocalHost = NULL;\n-uint64 nLocalHostNonce = 0;\n+uint64_t nLocalHostNonce = 0;\n array<int, 10> vnThreadsRunning;\n static SOCKET hListenSocket = INVALID_SOCKET;\n \n@@ -56,9 +58,9 @@ CCriticalSection cs_vNodes;\n map<vector<unsigned char>, CAddress> mapAddresses;\n CCriticalSection cs_mapAddresses;\n map<CInv, CDataStream> mapRelay;\n-deque<pair<int64, CInv> > vRelayExpiration;\n+deque<pair<int64_t, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n-map<CInv, int64> mapAlreadyAskedFor;\n+map<CInv, int64_t> mapAlreadyAskedFor;\n \n // Settings\n int fUseProxy = false;\n@@ -437,13 +439,13 @@ void ThreadGetMyExternalIP(void* parg)\n \n \n \n-bool AddAddress(CAddress addr, int64 nTimePenalty, CAddrDB *pAddrDB)\n+bool AddAddress(CAddress addr, int64_t nTimePenalty, CAddrDB *pAddrDB)\n {\n     if (!addr.IsRoutable())\n         return false;\n     if (addr.ip == addrLocalHost.ip)\n         return false;\n-    addr.nTime = max((int64)0, (int64)addr.nTime - nTimePenalty);\n+    addr.nTime = max((int64_t)0, (int64_t)addr.nTime - nTimePenalty);\n     bool fUpdated = false;\n     bool fNew = false;\n     CAddress addrFound = addr;\n@@ -469,7 +471,7 @@ bool AddAddress(CAddress addr, int64 nTimePenalty, CAddrDB *pAddrDB)\n                 fUpdated = true;\n             }\n             bool fCurrentlyOnline = (GetAdjustedTime() - addr.nTime < 24 * 60 * 60);\n-            int64 nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n+            int64_t nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n             if (addrFound.nTime < addr.nTime - nUpdateInterval)\n             {\n                 // Periodically update most recently seen time\n@@ -503,7 +505,7 @@ void AddressCurrentlyConnected(const CAddress& addr)\n         if (it != mapAddresses.end())\n         {\n             CAddress& addrFound = (*it).second;\n-            int64 nUpdateInterval = 20 * 60;\n+            int64_t nUpdateInterval = 20 * 60;\n             if (addrFound.nTime < GetAdjustedTime() - nUpdateInterval)\n             {\n                 // Periodically update most recently seen time\n@@ -642,7 +644,7 @@ CNode* FindNode(CAddress addr)\n     return NULL;\n }\n \n-CNode* ConnectNode(CAddress addrConnect, int64 nTimeout)\n+CNode* ConnectNode(CAddress addrConnect, int64_t nTimeout)\n {\n     if (addrConnect.ip == addrLocalHost.ip)\n         return NULL;\n@@ -730,7 +732,7 @@ void CNode::Cleanup()\n void CNode::PushVersion()\n {\n     /// when NTP implemented, change to just nTime = GetAdjustedTime()\n-    int64 nTime = (fInbound ? GetAdjustedTime() : GetTime());\n+    int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (fUseProxy ? CAddress(\"0.0.0.0\") : addr);\n     CAddress addrMe = (fUseProxy ? CAddress(\"0.0.0.0\") : addrLocalHost);\n     RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n@@ -742,7 +744,7 @@ void CNode::PushVersion()\n \n \n \n-std::map<unsigned int, int64> CNode::setBanned;\n+std::map<unsigned int, int64_t> CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n \n void CNode::ClearBanned()\n@@ -755,10 +757,10 @@ bool CNode::IsBanned(unsigned int ip)\n     bool fResult = false;\n     CRITICAL_BLOCK(cs_setBanned)\n     {\n-        std::map<unsigned int, int64>::iterator i = setBanned.find(ip);\n+        std::map<unsigned int, int64_t>::iterator i = setBanned.find(ip);\n         if (i != setBanned.end())\n         {\n-            int64 t = (*i).second;\n+            int64_t t = (*i).second;\n             if (GetTime() < t)\n                 fResult = true;\n         }\n@@ -777,7 +779,7 @@ bool CNode::Misbehaving(int howmuch)\n     nMisbehavior += howmuch;\n     if (nMisbehavior >= GetArg(\"-banscore\", 100))\n     {\n-        int64 banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n+        int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n         CRITICAL_BLOCK(cs_setBanned)\n             if (setBanned[addr.ip] < banTime)\n                 setBanned[addr.ip] = banTime;\n@@ -1403,7 +1405,7 @@ void ThreadOpenConnections2(void* parg)\n     // Connect to specific addresses\n     if (mapArgs.count(\"-connect\"))\n     {\n-        for (int64 nLoop = 0;; nLoop++)\n+        for (int64_t nLoop = 0;; nLoop++)\n         {\n             BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n             {\n@@ -1437,7 +1439,7 @@ void ThreadOpenConnections2(void* parg)\n     }\n \n     // Initiate network connections\n-    int64 nStart = GetTime();\n+    int64_t nStart = GetTime();\n     loop\n     {\n         // Limit outbound connections\n@@ -1474,7 +1476,7 @@ void ThreadOpenConnections2(void* parg)\n                     // it'll get a pile of addresses with newer timestamps.\n                     // Seed nodes are given a random 'last seen time' of between one and two\n                     // weeks ago.\n-                    const int64 nOneWeek = 7*24*60*60;\n+                    const int64_t nOneWeek = 7*24*60*60;\n                     CAddress addr;\n                     addr.ip = pnSeed[i];\n                     addr.nTime = GetTime()-GetRand(nOneWeek)-nOneWeek;\n@@ -1488,7 +1490,7 @@ void ThreadOpenConnections2(void* parg)\n         // Choose an address to connect to based on most recently seen\n         //\n         CAddress addrConnect;\n-        int64 nBest = std::numeric_limits<int64>::min();\n+        int64_t nBest = std::numeric_limits<int64_t>::min();\n \n         // Only connect to one address per a.b.?.? range.\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n@@ -1497,7 +1499,7 @@ void ThreadOpenConnections2(void* parg)\n             BOOST_FOREACH(CNode* pnode, vNodes)\n                 setConnected.insert(pnode->addr.ip & 0x0000ffff);\n \n-        int64 nANow = GetAdjustedTime();\n+        int64_t nANow = GetAdjustedTime();\n \n         CRITICAL_BLOCK(cs_mapAddresses)\n         {\n@@ -1506,11 +1508,11 @@ void ThreadOpenConnections2(void* parg)\n                 const CAddress& addr = item.second;\n                 if (!addr.IsIPv4() || !addr.IsValid() || setConnected.count(addr.ip & 0x0000ffff))\n                     continue;\n-                int64 nSinceLastSeen = nANow - addr.nTime;\n-                int64 nSinceLastTry = nANow - addr.nLastTry;\n+                int64_t nSinceLastSeen = nANow - addr.nTime;\n+                int64_t nSinceLastTry = nANow - addr.nLastTry;\n \n                 // Randomize the order in a deterministic way, putting the standard port first\n-                int64 nRandomizer = (uint64)(nStart * 4951 + addr.nLastTry * 9567851 + addr.ip * 7789) % (2 * 60 * 60);\n+                int64_t nRandomizer = (uint64_t)(nStart * 4951 + addr.nLastTry * 9567851 + addr.ip * 7789) % (2 * 60 * 60);\n                 if (addr.port != htons(GetDefaultPort()))\n                     nRandomizer += 2 * 60 * 60;\n \n@@ -1524,7 +1526,7 @@ void ThreadOpenConnections2(void* parg)\n                 //   30 days   27 hours\n                 //   90 days   46 hours\n                 //  365 days   93 hours\n-                int64 nDelay = (int64)(3600.0 * sqrt(fabs((double)nSinceLastSeen) / 3600.0) + nRandomizer);\n+                int64_t nDelay = (int64_t)(3600.0 * sqrt(fabs((double)nSinceLastSeen) / 3600.0) + nRandomizer);\n \n                 // Fast reconnect for one hour after last seen\n                 if (nSinceLastSeen < 60 * 60)\n@@ -1545,7 +1547,7 @@ void ThreadOpenConnections2(void* parg)\n \n                 // If multiple addresses are ready, prioritize by time since\n                 // last seen and time since last tried.\n-                int64 nScore = min(nSinceLastTry, (int64)24 * 60 * 60) - nSinceLastSeen - nRandomizer;\n+                int64_t nScore = min(nSinceLastTry, (int64_t)24 * 60 * 60) - nSinceLastSeen - nRandomizer;\n                 if (nScore > nBest)\n                 {\n                     nBest = nScore;\n@@ -1852,7 +1854,7 @@ bool StopNode()\n     printf(\"StopNode()\\n\");\n     fShutdown = true;\n     nTransactionsUpdated++;\n-    int64 nStart = GetTime();\n+    int64_t nStart = GetTime();\n     while (vnThreadsRunning[0] > 0 || vnThreadsRunning[2] > 0 || vnThreadsRunning[3] > 0 || vnThreadsRunning[4] > 0\n #ifdef USE_UPNP\n         || vnThreadsRunning[5] > 0"
      },
      {
        "sha": "9f99f474f6f55eab840ffbf6c7d9ae6c9905cc35",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 20,
        "deletions": 18,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_NET_H\n #define BITCOIN_NET_H\n \n+#include <stdint.h>\n+\n #include <deque>\n #include <boost/array.hpp>\n #include <boost/foreach.hpp>\n@@ -33,10 +35,10 @@ bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout\n bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool GetMyExternalIP(unsigned int& ipRet);\n-bool AddAddress(CAddress addr, int64 nTimePenalty=0, CAddrDB *pAddrDB=NULL);\n+bool AddAddress(CAddress addr, int64_t nTimePenalty=0, CAddrDB *pAddrDB=NULL);\n void AddressCurrentlyConnected(const CAddress& addr);\n CNode* FindNode(unsigned int ip);\n-CNode* ConnectNode(CAddress addrConnect, int64 nTimeout=0);\n+CNode* ConnectNode(CAddress addrConnect, int64_t nTimeout=0);\n void AbandonRequests(void (*fn)(void*, CDataStream&), void* param1);\n bool AnySubscribed(unsigned int nChannel);\n void MapPort(bool fMapPort);\n@@ -74,19 +76,19 @@ class CRequestTracker\n \n extern bool fClient;\n extern bool fAllowDNS;\n-extern uint64 nLocalServices;\n+extern uint64_t nLocalServices;\n extern CAddress addrLocalHost;\n-extern uint64 nLocalHostNonce;\n+extern uint64_t nLocalHostNonce;\n extern boost::array<int, 10> vnThreadsRunning;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n extern std::map<std::vector<unsigned char>, CAddress> mapAddresses;\n extern CCriticalSection cs_mapAddresses;\n extern std::map<CInv, CDataStream> mapRelay;\n-extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n+extern std::deque<std::pair<int64_t, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n-extern std::map<CInv, int64> mapAlreadyAskedFor;\n+extern std::map<CInv, int64_t> mapAlreadyAskedFor;\n \n // Settings\n extern int fUseProxy;\n@@ -101,16 +103,16 @@ class CNode\n {\n public:\n     // socket\n-    uint64 nServices;\n+    uint64_t nServices;\n     SOCKET hSocket;\n     CDataStream vSend;\n     CDataStream vRecv;\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_vRecv;\n-    int64 nLastSend;\n-    int64 nLastRecv;\n-    int64 nLastSendEmpty;\n-    int64 nTimeConnected;\n+    int64_t nLastSend;\n+    int64_t nLastRecv;\n+    int64_t nLastSendEmpty;\n+    int64_t nTimeConnected;\n     unsigned int nHeaderStart;\n     unsigned int nMessageStart;\n     CAddress addr;\n@@ -126,12 +128,12 @@ class CNode\n \n     // Denial-of-service detection/prevention\n     // Key is ip address, value is banned-until-time\n-    static std::map<unsigned int, int64> setBanned;\n+    static std::map<unsigned int, int64_t> setBanned;\n     static CCriticalSection cs_setBanned;\n     int nMisbehavior;\n \n public:\n-    int64 nReleaseTime;\n+    int64_t nReleaseTime;\n     std::map<uint256, CRequestTracker> mapRequests;\n     CCriticalSection cs_mapRequests;\n     uint256 hashContinue;\n@@ -149,7 +151,7 @@ class CNode\n     std::set<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n-    std::multimap<int64, CInv> mapAskFor;\n+    std::multimap<int64_t, CInv> mapAskFor;\n \n     // publish and subscription\n     std::vector<char> vfSubscribe;\n@@ -217,7 +219,7 @@ class CNode\n         return std::max(nRefCount, 0) + (GetTime() < nReleaseTime ? 1 : 0);\n     }\n \n-    CNode* AddRef(int64 nTimeout=0)\n+    CNode* AddRef(int64_t nTimeout=0)\n     {\n         if (nTimeout != 0)\n             nReleaseTime = std::max(nReleaseTime, GetTime() + nTimeout);\n@@ -265,12 +267,12 @@ class CNode\n     {\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n-        int64& nRequestTime = mapAlreadyAskedFor[inv];\n+        int64_t& nRequestTime = mapAlreadyAskedFor[inv];\n         printf(\"askfor %s   %\"PRI64d\"\\n\", inv.ToString().c_str(), nRequestTime);\n \n         // Make sure not to reuse time indexes to keep things in the same order\n-        int64 nNow = (GetTime() - 1) * 1000000;\n-        static int64 nLastTime;\n+        int64_t nNow = (GetTime() - 1) * 1000000;\n+        static int64_t nLastTime;\n         nLastTime = nNow = std::max(nNow, ++nLastTime);\n \n         // Each retry is 2 minutes after the last"
      },
      {
        "sha": "5f6cc752b0ee1c3c6168bbe4b0faccf7a92d83c7",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_NOUI_H\n #define BITCOIN_NOUI_H\n \n+#include <stdint.h>\n+\n #include <string>\n #include <boost/function.hpp>\n #include \"wallet.h\"\n@@ -50,7 +52,7 @@ inline int ThreadSafeMessageBox(const std::string& message, const std::string& c\n     return MyMessageBox(message, caption, style, parent, x, y);\n }\n \n-inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n+inline bool ThreadSafeAskFee(int64_t nFeeRequired, const std::string& strCaption, wxWindow* parent)\n {\n     return true;\n }"
      },
      {
        "sha": "8e588652de428a5a74a7801bf1b27ccb1eafdcbe",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"protocol.h\"\n #include \"util.h\"\n \n@@ -82,41 +84,41 @@ CAddress::CAddress()\n     Init();\n }\n \n-CAddress::CAddress(unsigned int ipIn, unsigned short portIn, uint64 nServicesIn)\n+CAddress::CAddress(unsigned int ipIn, unsigned short portIn, uint64_t nServicesIn)\n {\n     Init();\n     ip = ipIn;\n     port = htons(portIn == 0 ? GetDefaultPort() : portIn);\n     nServices = nServicesIn;\n }\n \n-CAddress::CAddress(const struct sockaddr_in& sockaddr, uint64 nServicesIn)\n+CAddress::CAddress(const struct sockaddr_in& sockaddr, uint64_t nServicesIn)\n {\n     Init();\n     ip = sockaddr.sin_addr.s_addr;\n     port = sockaddr.sin_port;\n     nServices = nServicesIn;\n }\n \n-CAddress::CAddress(const char* pszIn, int portIn, bool fNameLookup, uint64 nServicesIn)\n+CAddress::CAddress(const char* pszIn, int portIn, bool fNameLookup, uint64_t nServicesIn)\n {\n     Init();\n     Lookup(pszIn, *this, nServicesIn, fNameLookup, portIn);\n }\n \n-CAddress::CAddress(const char* pszIn, bool fNameLookup, uint64 nServicesIn)\n+CAddress::CAddress(const char* pszIn, bool fNameLookup, uint64_t nServicesIn)\n {\n     Init();\n     Lookup(pszIn, *this, nServicesIn, fNameLookup, 0, true);\n }\n \n-CAddress::CAddress(std::string strIn, int portIn, bool fNameLookup, uint64 nServicesIn)\n+CAddress::CAddress(std::string strIn, int portIn, bool fNameLookup, uint64_t nServicesIn)\n {\n     Init();\n     Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, portIn);\n }\n \n-CAddress::CAddress(std::string strIn, bool fNameLookup, uint64 nServicesIn)\n+CAddress::CAddress(std::string strIn, bool fNameLookup, uint64_t nServicesIn)\n {\n     Init();\n     Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, 0, true);"
      },
      {
        "sha": "4d1b329514262f180d4f887206bd12188e51523b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -10,6 +10,8 @@\n #ifndef __INCLUDED_PROTOCOL_H__\n #define __INCLUDED_PROTOCOL_H__\n \n+#include <stdint.h>\n+\n #include \"serialize.h\"\n #include <string>\n #include \"uint256.h\"\n@@ -65,12 +67,12 @@ class CAddress\n {\n     public:\n         CAddress();\n-        CAddress(unsigned int ipIn, unsigned short portIn=0, uint64 nServicesIn=NODE_NETWORK);\n-        explicit CAddress(const struct sockaddr_in& sockaddr, uint64 nServicesIn=NODE_NETWORK);\n-        explicit CAddress(const char* pszIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n-        explicit CAddress(const char* pszIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n-        explicit CAddress(std::string strIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n-        explicit CAddress(std::string strIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n+        CAddress(unsigned int ipIn, unsigned short portIn=0, uint64_t nServicesIn=NODE_NETWORK);\n+        explicit CAddress(const struct sockaddr_in& sockaddr, uint64_t nServicesIn=NODE_NETWORK);\n+        explicit CAddress(const char* pszIn, int portIn, bool fNameLookup = false, uint64_t nServicesIn=NODE_NETWORK);\n+        explicit CAddress(const char* pszIn, bool fNameLookup = false, uint64_t nServicesIn=NODE_NETWORK);\n+        explicit CAddress(std::string strIn, int portIn, bool fNameLookup = false, uint64_t nServicesIn=NODE_NETWORK);\n+        explicit CAddress(std::string strIn, bool fNameLookup = false, uint64_t nServicesIn=NODE_NETWORK);\n \n         void Init();\n \n@@ -109,7 +111,7 @@ class CAddress\n \n     // TODO: make private (improves encapsulation)\n     public:\n-        uint64 nServices;\n+        uint64_t nServices;\n         unsigned char pchReserved[12];\n         unsigned int ip;\n         unsigned short port;"
      },
      {
        "sha": "f696ca0f89270b86e5efdb33bf146f0114f94651",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -9,6 +9,7 @@\n #include \"headers.h\"\n #include \"init.h\"\n \n+#include <QtGlobal>\n #include <QApplication>\n #include <QMessageBox>\n #include <QThread>\n@@ -56,7 +57,7 @@ int ThreadSafeMessageBox(const std::string& message, const std::string& caption,\n     return 4;\n }\n \n-bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n+bool ThreadSafeAskFee(qint64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n {\n     if(!guiref)\n         return false;"
      },
      {
        "sha": "f385bc55e8cf7984371707195feaca9b5217eebe",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"guiconstants.h\"\n \n+#include <QtGlobal>\n #include <QLabel>\n #include <QLineEdit>\n #include <QRegExpValidator>"
      },
      {
        "sha": "954ed1ebd0e20bfbc11d90d9d1464ea94925e2d9",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef BITCOINFIELD_H\n #define BITCOINFIELD_H\n \n+#include <QtGlobal>\n #include <QWidget>\n \n QT_BEGIN_NAMESPACE"
      },
      {
        "sha": "fa317a25ef35ee995d5cec5f6d9515087092e611",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -27,6 +27,7 @@\n #include \"macdockiconhandler.h\"\n #endif\n \n+#include <QtGlobal>\n #include <QApplication>\n #include <QMainWindow>\n #include <QMenuBar>"
      },
      {
        "sha": "a0b3652fc06b9de13b384a01b307b83309749e82",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef BITCOINGUI_H\n #define BITCOINGUI_H\n \n+#include <QtGlobal>\n #include <QMainWindow>\n #include <QSystemTrayIcon>\n "
      },
      {
        "sha": "b4ebe9d723819c74f44056ea1489fea6615e3225",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -82,4 +82,4 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: Please check that your computer's date and time are correct.  If \"\n \"your clock is wrong Bitcoin will not work properly.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"beta\"),\n-};\n\\ No newline at end of file\n+};"
      },
      {
        "sha": "0845d2104bfb04a00cbe8eced363748300c276d6",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,5 +1,6 @@\n #include \"bitcoinunits.h\"\n \n+#include <QtGlobal>\n #include <QStringList>\n \n BitcoinUnits::BitcoinUnits(QObject *parent):"
      },
      {
        "sha": "35c0d8ea0d282ca9a30d655d9a80066e44897fbe",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef BITCOINUNITS_H\n #define BITCOINUNITS_H\n \n+#include <QtGlobal>\n #include <QString>\n #include <QAbstractListModel>\n "
      },
      {
        "sha": "378660b0490dc6d6e906dcf7ed15c0cec2d6526a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"headers.h\"\n \n+#include <QtGlobal>\n #include <QString>\n #include <QDateTime>\n #include <QDoubleValidator>"
      },
      {
        "sha": "4a4cc623459eb64f293631c32b8ea84b9187bd32",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef GUIUTIL_H\n #define GUIUTIL_H\n \n+#include <QtGlobal>\n #include <QString>\n \n QT_BEGIN_NAMESPACE"
      },
      {
        "sha": "5e9969bf9e52512808c8a24a579a34f067b96b9b",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,5 +1,6 @@\n #include \"notificator.h\"\n \n+#include <QtGlobal>\n #include <QMetaType>\n #include <QVariant>\n #include <QIcon>"
      },
      {
        "sha": "bc56bdea03157a7a025a9f463e5b913532c5a7b2",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,3 +1,5 @@\n+#include <QtGlobal>\n+\n #include \"optionsmodel.h\"\n #include \"bitcoinunits.h\"\n "
      },
      {
        "sha": "13d964b256c5d74e74cbee0c8b362195667c640d",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef OPTIONSMODEL_H\n #define OPTIONSMODEL_H\n \n+#include <QtGlobal>\n #include <QAbstractListModel>\n \n class CWallet;"
      },
      {
        "sha": "1710519e0da04cfd3518cebbf07bb4543e53b904",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -9,6 +9,7 @@\n #include \"guiutil.h\"\n #include \"guiconstants.h\"\n \n+#include <QtGlobal>\n #include <QAbstractItemDelegate>\n #include <QPainter>\n "
      },
      {
        "sha": "46317d9b9ef11ce3c28b564f5841a17f13aa6259",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef OVERVIEWPAGE_H\n #define OVERVIEWPAGE_H\n \n+#include <QtGlobal>\n #include <QWidget>\n \n QT_BEGIN_NAMESPACE"
      },
      {
        "sha": "e6b500cfde0ff44cc19704a4b96ec211ebc65b16",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -8,6 +8,7 @@\n #include \"guiutil.h\"\n #include \"askpassphrasedialog.h\"\n \n+#include <QtGlobal>\n #include <QMessageBox>\n #include <QLocale>\n #include <QTextDocument>"
      },
      {
        "sha": "d879fbe97348251cce48b1a9d982daf673d2c40b",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef SENDCOINSDIALOG_H\n #define SENDCOINSDIALOG_H\n \n+#include <QtGlobal>\n #include <QDialog>\n \n namespace Ui {"
      },
      {
        "sha": "a19ec875d989f6e3607e23f7e7be80e91a61d51b",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -6,6 +6,7 @@\n #include \"headers.h\"\n #include \"qtui.h\"\n \n+#include <QtGlobal>\n #include <QString>\n #include <QTextDocument> // For Qt::escape\n \n@@ -55,10 +56,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n         strHTML.reserve(4000);\n         strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n-        int64 nTime = wtx.GetTxTime();\n-        int64 nCredit = wtx.GetCredit();\n-        int64 nDebit = wtx.GetDebit();\n-        int64 nNet = nCredit - nDebit;\n+        qint64 nTime = wtx.GetTxTime();\n+        qint64 nCredit = wtx.GetCredit();\n+        qint64 nDebit = wtx.GetDebit();\n+        qint64 nNet = nCredit - nDebit;\n \n         strHTML += tr(\"<b>Status:</b> \") + FormatTxStatus(wtx);\n         int nRequests = wtx.GetRequestCount();\n@@ -141,7 +142,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n             //\n             // Coinbase\n             //\n-            int64 nUnmatured = 0;\n+            qint64 nUnmatured = 0;\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 nUnmatured += wallet->GetCredit(txout);\n             strHTML += tr(\"<b>Credit:</b> \");\n@@ -200,13 +201,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                 if (fAllToMe)\n                 {\n                     // Payment to self\n-                    int64 nChange = wtx.GetChange();\n-                    int64 nValue = nCredit - nChange;\n+                    qint64 nChange = wtx.GetChange();\n+                    qint64 nValue = nCredit - nChange;\n                     strHTML += tr(\"<b>Debit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, -nValue) + \"<br>\";\n                     strHTML += tr(\"<b>Credit:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, nValue) + \"<br>\";\n                 }\n \n-                int64 nTxFee = nDebit - wtx.GetValueOut();\n+                qint64 nTxFee = nDebit - wtx.GetValueOut();\n                 if (nTxFee > 0)\n                     strHTML += tr(\"<b>Transaction fee:</b> \") + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,-nTxFee) + \"<br>\";\n             }"
      },
      {
        "sha": "278186fe6e91d324a912648581576549e61f667e",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #include \"transactionfilterproxy.h\"\n #include \"transactiontablemodel.h\"\n \n+#include <QtGlobal>\n #include <QDateTime>\n \n #include <cstdlib>"
      },
      {
        "sha": "e33b5e5fb0b5919ea484113df7e1b522e14fba5b",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef TRANSACTIONFILTERPROXY_H\n #define TRANSACTIONFILTERPROXY_H\n \n+#include <QtGlobal>\n #include <QSortFilterProxyModel>\n #include <QDateTime>\n "
      },
      {
        "sha": "8a1f1b677227f7226e8392de81ee6901f7297634",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,3 +1,5 @@\n+#include <QtGlobal>\n+\n #include \"transactionrecord.h\"\n \n #include \"headers.h\"\n@@ -33,10 +35,10 @@ bool TransactionRecord::showTransaction(const CWalletTx &wtx)\n QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *wallet, const CWalletTx &wtx)\n {\n     QList<TransactionRecord> parts;\n-    int64 nTime = wtx.nTimeDisplayed = wtx.GetTxTime();\n-    int64 nCredit = wtx.GetCredit(true);\n-    int64 nDebit = wtx.GetDebit();\n-    int64 nNet = nCredit - nDebit;\n+    qint64 nTime = wtx.nTimeDisplayed = wtx.GetTxTime();\n+    qint64 nCredit = wtx.GetCredit(true);\n+    qint64 nDebit = wtx.GetDebit();\n+    qint64 nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n@@ -58,7 +60,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n \n                 if (nCredit == 0)\n                 {\n-                    int64 nUnmatured = 0;\n+                    qint64 nUnmatured = 0;\n                     BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                         nUnmatured += wallet->GetCredit(txout);\n                     sub.credit = nUnmatured;\n@@ -103,7 +105,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             if (fAllFromMe && fAllToMe)\n             {\n                 // Payment to self\n-                int64 nChange = wtx.GetChange();\n+                qint64 nChange = wtx.GetChange();\n \n                 parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                                 -(nDebit - nChange), nCredit - nChange));\n@@ -113,7 +115,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 //\n                 // Debit\n                 //\n-                int64 nTxFee = nDebit - wtx.GetValueOut();\n+                qint64 nTxFee = nDebit - wtx.GetValueOut();\n \n                 for (int nOut = 0; nOut < wtx.vout.size(); nOut++)\n                 {\n@@ -144,7 +146,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                         }\n                     }\n \n-                    int64 nValue = txout.nValue;\n+                    qint64 nValue = txout.nValue;\n                     /* Add fee to first output */\n                     if (nTxFee > 0)\n                     {\n@@ -227,7 +229,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     // For generated transactions, determine maturity\n     if(type == TransactionRecord::Generated)\n     {\n-        int64 nCredit = wtx.GetCredit(true);\n+        qint64 nCredit = wtx.GetCredit(true);\n         if (nCredit == 0)\n         {\n             status.maturity = TransactionStatus::Immature;"
      },
      {
        "sha": "db29b94576ed1cc6276e734205dd569d9104e400",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,7 @@\n \n #include \"uint256.h\"\n \n+#include <QtGlobal>\n #include <QList>\n \n class CWallet;\n@@ -46,8 +47,8 @@ class TransactionStatus\n     /** @name Reported status\n        @{*/\n     Status status;\n-    int64 depth;\n-    int64 open_for; /**< Timestamp if status==OpenUntilDate, otherwise number of blocks */\n+    qint64 depth;\n+    qint64 open_for; /**< Timestamp if status==OpenUntilDate, otherwise number of blocks */\n     /**@}*/\n \n     /** Current number of blocks (to know whether cached status is still valid) */\n@@ -79,15 +80,15 @@ class TransactionRecord\n     {\n     }\n \n-    TransactionRecord(uint256 hash, int64 time):\n+    TransactionRecord(uint256 hash, qint64 time):\n             hash(hash), time(time), type(Other), address(\"\"), debit(0),\n             credit(0), idx(0)\n     {\n     }\n \n-    TransactionRecord(uint256 hash, int64 time,\n+    TransactionRecord(uint256 hash, qint64 time,\n                 Type type, const std::string &address,\n-                int64 debit, int64 credit):\n+                qint64 debit, qint64 credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n             idx(0)\n     {\n@@ -101,11 +102,11 @@ class TransactionRecord\n     /** @name Immutable transaction attributes\n       @{*/\n     uint256 hash;\n-    int64 time;\n+    qint64 time;\n     Type type;\n     std::string address;\n-    int64 debit;\n-    int64 credit;\n+    qint64 debit;\n+    qint64 credit;\n     /**@}*/\n \n     /** Subtransaction index, for sort key */"
      },
      {
        "sha": "af9597117d3f511116fe30152edc3e5ee6847d71",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -11,6 +11,7 @@\n #include \"editaddressdialog.h\"\n #include \"optionsmodel.h\"\n \n+#include <QtGlobal>\n #include <QScrollBar>\n #include <QComboBox>\n #include <QDoubleValidator>"
      },
      {
        "sha": "b71256a23df52260b09756e162f59b7293748b4f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"headers.h\"\n \n+#include <QtGlobal>\n #include <QTimer>\n #include <QSet>\n \n@@ -120,7 +121,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n     CRITICAL_BLOCK(wallet->cs_wallet)\n     {\n         // Sendmany\n-        std::vector<std::pair<CScript, int64> > vecSend;\n+        std::vector<std::pair<CScript, qint64> > vecSend;\n         foreach(const SendCoinsRecipient &rcp, recipients)\n         {\n             CScript scriptPubKey;\n@@ -130,7 +131,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n \n         CWalletTx wtx;\n         CReserveKey keyChange(wallet);\n-        int64 nFeeRequired = 0;\n+        qint64 nFeeRequired = 0;\n         bool fCreated = wallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired);\n \n         if(!fCreated)"
      },
      {
        "sha": "6c0d6d2afd1d37d389f3e6bdade1ce4267054dde",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,7 @@\n #ifndef WALLETMODEL_H\n #define WALLETMODEL_H\n \n+#include <QtGlobal>\n #include <QObject>\n \n #include \"util.h\""
      },
      {
        "sha": "3eef1ce5e0225763e31c84a64f1d52d436f9e6a7",
        "filename": "src/qtui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qtui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/qtui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qtui.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -4,6 +4,8 @@\n #ifndef BITCOIN_EXTERNUI_H\n #define BITCOIN_EXTERNUI_H\n \n+#include <stdint.h>\n+\n #include <string>\n #include <boost/function/function0.hpp>\n #include \"wallet.h\"\n@@ -39,7 +41,7 @@ typedef void wxWindow;\n extern int MyMessageBox(const std::string& message, const std::string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n #define wxMessageBox  MyMessageBox\n extern int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n-extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent);\n+extern bool ThreadSafeAskFee(int64_t nFeeRequired, const std::string& strCaption, wxWindow* parent);\n extern void CalledSetStatusBar(const std::string& strText, int nField);\n extern void UIThreadCall(boost::function0<void> fn);\n extern void MainFrameRepaint();"
      },
      {
        "sha": "c7c5b1d36c684fa05620f031f0085c61823a00b9",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n@@ -31,7 +33,7 @@ class CTxDump\n {\n public:\n     CBlockIndex *pindex;\n-    int64 nValue;\n+    int64_t nValue;\n     bool fSpent;\n     CWalletTx* ptx;\n     int nOut;"
      },
      {
        "sha": "e3c6b15b6d6b31b91615d23c1ffcf77bc0051af1",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef H_BITCOIN_SCRIPT\n #define H_BITCOIN_SCRIPT\n \n+#include <stdint.h>\n+\n #include \"base58.h\"\n \n #include <string>\n@@ -219,7 +221,7 @@ inline std::string StackString(const std::vector<std::vector<unsigned char> >& v\n class CScript : public std::vector<unsigned char>\n {\n protected:\n-    CScript& push_int64(int64 n)\n+    CScript& push_int64(int64_t n)\n     {\n         if (n == -1 || (n >= 1 && n <= 16))\n         {\n@@ -233,7 +235,7 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n-    CScript& push_uint64(uint64 n)\n+    CScript& push_uint64(uint64_t n)\n     {\n         if (n >= 1 && n <= 16)\n         {\n@@ -273,12 +275,12 @@ class CScript : public std::vector<unsigned char>\n     explicit CScript(short b)          { operator<<(b); }\n     explicit CScript(int b)            { operator<<(b); }\n     explicit CScript(long b)           { operator<<(b); }\n-    explicit CScript(int64 b)          { operator<<(b); }\n+    explicit CScript(int64_t b)        { operator<<(b); }\n     explicit CScript(unsigned char b)  { operator<<(b); }\n     explicit CScript(unsigned int b)   { operator<<(b); }\n     explicit CScript(unsigned short b) { operator<<(b); }\n     explicit CScript(unsigned long b)  { operator<<(b); }\n-    explicit CScript(uint64 b)         { operator<<(b); }\n+    explicit CScript(uint64_t b)       { operator<<(b); }\n \n     explicit CScript(opcodetype b)     { operator<<(b); }\n     explicit CScript(const uint256& b) { operator<<(b); }\n@@ -290,12 +292,12 @@ class CScript : public std::vector<unsigned char>\n     CScript& operator<<(short b)          { return push_int64(b); }\n     CScript& operator<<(int b)            { return push_int64(b); }\n     CScript& operator<<(long b)           { return push_int64(b); }\n-    CScript& operator<<(int64 b)          { return push_int64(b); }\n+    CScript& operator<<(int64_t b)        { return push_int64(b); }\n     CScript& operator<<(unsigned char b)  { return push_uint64(b); }\n     CScript& operator<<(unsigned int b)   { return push_uint64(b); }\n     CScript& operator<<(unsigned short b) { return push_uint64(b); }\n     CScript& operator<<(unsigned long b)  { return push_uint64(b); }\n-    CScript& operator<<(uint64 b)         { return push_uint64(b); }\n+    CScript& operator<<(uint64_t b)       { return push_uint64(b); }\n \n     CScript& operator<<(opcodetype opcode)\n     {"
      },
      {
        "sha": "4bfff0a1a29ccf81dd8bf0eab603d8f43c2e9224",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_SERIALIZE_H\n #define BITCOIN_SERIALIZE_H\n \n+#include <stdint.h>\n+\n #include <string>\n #include <vector>\n #include <map>\n@@ -19,9 +21,6 @@\n #include <boost/tuple/tuple_comparison.hpp>\n #include <boost/tuple/tuple_io.hpp>\n \n-typedef long long  int64;\n-typedef unsigned long long  uint64;\n-\n #ifdef WIN32\n #include <windows.h>\n // This is used to attempt to keep keying material out of swap\n@@ -137,8 +136,8 @@ inline unsigned int GetSerializeSize(signed int a,     int, int=0) { return size\n inline unsigned int GetSerializeSize(unsigned int a,   int, int=0) { return sizeof(a); }\n inline unsigned int GetSerializeSize(signed long a,    int, int=0) { return sizeof(a); }\n inline unsigned int GetSerializeSize(unsigned long a,  int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(int64 a,          int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(uint64 a,         int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(int64_t a,        int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(uint64_t a,       int, int=0) { return sizeof(a); }\n inline unsigned int GetSerializeSize(float a,          int, int=0) { return sizeof(a); }\n inline unsigned int GetSerializeSize(double a,         int, int=0) { return sizeof(a); }\n \n@@ -151,8 +150,8 @@ template<typename Stream> inline void Serialize(Stream& s, signed int a,     int\n template<typename Stream> inline void Serialize(Stream& s, unsigned int a,   int, int=0) { WRITEDATA(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, signed long a,    int, int=0) { WRITEDATA(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, unsigned long a,  int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int64 a,          int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint64 a,         int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, int64_t a,        int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, uint64_t a,       int, int=0) { WRITEDATA(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, float a,          int, int=0) { WRITEDATA(s, a); }\n template<typename Stream> inline void Serialize(Stream& s, double a,         int, int=0) { WRITEDATA(s, a); }\n \n@@ -165,8 +164,8 @@ template<typename Stream> inline void Unserialize(Stream& s, signed int& a,\n template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,   int, int=0) { READDATA(s, a); }\n template<typename Stream> inline void Unserialize(Stream& s, signed long& a,    int, int=0) { READDATA(s, a); }\n template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,  int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, int64& a,          int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint64& a,         int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,        int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,       int, int=0) { READDATA(s, a); }\n template<typename Stream> inline void Unserialize(Stream& s, float& a,          int, int=0) { READDATA(s, a); }\n template<typename Stream> inline void Unserialize(Stream& s, double& a,         int, int=0) { READDATA(s, a); }\n \n@@ -186,16 +185,16 @@ template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0\n //  size <= UINT_MAX   -- 5 bytes  (254 + 4 bytes)\n //  size >  UINT_MAX   -- 9 bytes  (255 + 8 bytes)\n //\n-inline unsigned int GetSizeOfCompactSize(uint64 nSize)\n+inline unsigned int GetSizeOfCompactSize(uint64_t nSize)\n {\n     if (nSize < 253)             return sizeof(unsigned char);\n     else if (nSize <= std::numeric_limits<unsigned short>::max()) return sizeof(unsigned char) + sizeof(unsigned short);\n     else if (nSize <= std::numeric_limits<unsigned int>::max())  return sizeof(unsigned char) + sizeof(unsigned int);\n-    else                         return sizeof(unsigned char) + sizeof(uint64);\n+    else                         return sizeof(unsigned char) + sizeof(uint64_t);\n }\n \n template<typename Stream>\n-void WriteCompactSize(Stream& os, uint64 nSize)\n+void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n@@ -219,19 +218,19 @@ void WriteCompactSize(Stream& os, uint64 nSize)\n     else\n     {\n         unsigned char chSize = 255;\n-        uint64 xSize = nSize;\n+        uint64_t xSize = nSize;\n         WRITEDATA(os, chSize);\n         WRITEDATA(os, xSize);\n     }\n     return;\n }\n \n template<typename Stream>\n-uint64 ReadCompactSize(Stream& is)\n+uint64_t ReadCompactSize(Stream& is)\n {\n     unsigned char chSize;\n     READDATA(is, chSize);\n-    uint64 nSizeRet = 0;\n+    uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n@@ -250,11 +249,11 @@ uint64 ReadCompactSize(Stream& is)\n     }\n     else\n     {\n-        uint64 xSize;\n+        uint64_t xSize;\n         READDATA(is, xSize);\n         nSizeRet = xSize;\n     }\n-    if (nSizeRet > (uint64)MAX_SIZE)\n+    if (nSizeRet > (uint64_t)MAX_SIZE)\n         throw std::ios_base::failure(\"ReadCompactSize() : size too large\");\n     return nSizeRet;\n }"
      },
      {
        "sha": "bea671c311b147a47bc82a1362ccfe3d9b4c34fe",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,6 +1,8 @@\n //\n // Unit tests for denial-of-service detection/prevention code\n //\n+#include <stdint.h>\n+\n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n@@ -50,7 +52,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     CNode::ClearBanned();\n-    int64 nStartTime = GetTime();\n+    int64_t nStartTime = GetTime();\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(0xa0b0c001);\n@@ -66,11 +68,11 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     BOOST_CHECK(!CNode::IsBanned(addr.ip));\n }    \n \n-static bool CheckNBits(unsigned int nbits1, int64 time1, unsigned int nbits2, int64 time2)\n+static bool CheckNBits(unsigned int nbits1, int64_t time1, unsigned int nbits2, int64_t time2)\n {\n     if (time1 > time2)\n         return CheckNBits(nbits2, time2, nbits1, time1);\n-    int64 deltaTime = time2-time1;\n+    int64_t deltaTime = time2-time1;\n \n     CBigNum required;\n     required.SetCompact(ComputeMinWork(nbits1, deltaTime));\n@@ -85,7 +87,7 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n     // Timestamps,nBits from the bitcoin blockchain.\n     // These are the block-chain checkpoint blocks\n-    typedef std::map<int64, unsigned int> BlockData;\n+    typedef std::map<int64_t, unsigned int> BlockData;\n     BlockData chainData =\n         map_list_of(1239852051,486604799)(1262749024,486594666)\n         (1279305360,469854461)(1280200847,469830746)(1281678674,469809688)"
      },
      {
        "sha": "0ceff9f28f95dec3b09758bd20fd574ffe51b05c",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,3 +1,5 @@\n+#include <stdint.h>\n+\n #include <boost/test/unit_test.hpp>\n \n #include \"main.h\""
      },
      {
        "sha": "14c025b4258a6a9db8d1c713b1222d183c058465",
        "filename": "src/test/script_op_eval_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/script_op_eval_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/script_op_eval_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_op_eval_tests.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,3 +1,5 @@\n+#include <stdint.h>\n+\n #include <boost/assert.hpp>\n #include <boost/assign/list_of.hpp>\n #include <boost/assign/list_inserter.hpp>"
      },
      {
        "sha": "d986c30870b6be73a73114d94accb7b02e3592de",
        "filename": "src/test/uint160_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/uint160_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/uint160_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint160_tests.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,3 +1,5 @@\n+#include <stdint.h>\n+\n #include <boost/test/unit_test.hpp>\n \n #include \"uint256.h\"\n@@ -10,7 +12,7 @@ BOOST_AUTO_TEST_CASE(uint160_equality)\n     uint160 num2 = 11;\n     BOOST_CHECK(num1+1 == num2);\n \n-    uint64 num3 = 10;\n+    uint64_t num3 = 10;\n     BOOST_CHECK(num1 == num3);\n     BOOST_CHECK(num1+num2 == num3+num2);\n }"
      },
      {
        "sha": "d7e1e513793a1eb6ff810c9c4a90a044351a5d4e",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,3 +1,5 @@\n+#include <stdint.h>\n+\n #include <boost/test/unit_test.hpp>\n \n #include \"uint256.h\"\n@@ -10,7 +12,7 @@ BOOST_AUTO_TEST_CASE(uint256_equality)\n     uint256 num2 = 11;\n     BOOST_CHECK(num1+1 == num2);\n \n-    uint64 num3 = 10;\n+    uint64_t num3 = 10;\n     BOOST_CHECK(num1 == num3);\n     BOOST_CHECK(num1+num2 == num3+num2);\n }"
      },
      {
        "sha": "08d243751ec61210397394054a051675728d705b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -1,3 +1,5 @@\n+#include <stdint.h>\n+\n #include <vector>\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n@@ -186,7 +188,7 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)\n {\n-    int64 ret = 0;\n+    int64_t ret = 0;\n     BOOST_CHECK(ParseMoney(\"0.0\", ret));\n     BOOST_CHECK_EQUAL(ret, 0);\n "
      },
      {
        "sha": "20438993cdb43e7551633e8fd10849f5035a1a25",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 20,
        "deletions": 21,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,15 +5,14 @@\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n+#include <stdint.h>\n+\n #include \"serialize.h\"\n \n #include <limits.h>\n #include <string>\n #include <vector>\n \n-typedef long long  int64;\n-typedef unsigned long long  uint64;\n-\n \n inline int Testuint256AdHoc(std::vector<std::string> vArg);\n \n@@ -55,7 +54,7 @@ class base_uint\n     }\n \n \n-    base_uint& operator=(uint64 b)\n+    base_uint& operator=(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n@@ -85,21 +84,21 @@ class base_uint\n         return *this;\n     }\n \n-    base_uint& operator^=(uint64 b)\n+    base_uint& operator^=(uint64_t b)\n     {\n         pn[0] ^= (unsigned int)b;\n         pn[1] ^= (unsigned int)(b >> 32);\n         return *this;\n     }\n \n-    base_uint& operator&=(uint64 b)\n+    base_uint& operator&=(uint64_t b)\n     {\n         pn[0] &= (unsigned int)b;\n         pn[1] &= (unsigned int)(b >> 32);\n         return *this;\n     }\n \n-    base_uint& operator|=(uint64 b)\n+    base_uint& operator|=(uint64_t b)\n     {\n         pn[0] |= (unsigned int)b;\n         pn[1] |= (unsigned int)(b >> 32);\n@@ -142,10 +141,10 @@ class base_uint\n \n     base_uint& operator+=(const base_uint& b)\n     {\n-        uint64 carry = 0;\n+        uint64_t carry = 0;\n         for (int i = 0; i < WIDTH; i++)\n         {\n-            uint64 n = carry + pn[i] + b.pn[i];\n+            uint64_t n = carry + pn[i] + b.pn[i];\n             pn[i] = n & 0xffffffff;\n             carry = n >> 32;\n         }\n@@ -158,15 +157,15 @@ class base_uint\n         return *this;\n     }\n \n-    base_uint& operator+=(uint64 b64)\n+    base_uint& operator+=(uint64_t b64)\n     {\n         base_uint b;\n         b = b64;\n         *this += b;\n         return *this;\n     }\n \n-    base_uint& operator-=(uint64 b64)\n+    base_uint& operator-=(uint64_t b64)\n     {\n         base_uint b;\n         b = b64;\n@@ -266,7 +265,7 @@ class base_uint\n         return true;\n     }\n \n-    friend inline bool operator==(const base_uint& a, uint64 b)\n+    friend inline bool operator==(const base_uint& a, uint64_t b)\n     {\n         if (a.pn[0] != (unsigned int)b)\n             return false;\n@@ -283,7 +282,7 @@ class base_uint\n         return (!(a == b));\n     }\n \n-    friend inline bool operator!=(const base_uint& a, uint64 b)\n+    friend inline bool operator!=(const base_uint& a, uint64_t b)\n     {\n         return (!(a == b));\n     }\n@@ -420,15 +419,15 @@ class uint160 : public base_uint160\n         return *this;\n     }\n \n-    uint160(uint64 b)\n+    uint160(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n         for (int i = 2; i < WIDTH; i++)\n             pn[i] = 0;\n     }\n \n-    uint160& operator=(uint64 b)\n+    uint160& operator=(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n@@ -451,8 +450,8 @@ class uint160 : public base_uint160\n     }\n };\n \n-inline bool operator==(const uint160& a, uint64 b)                           { return (base_uint160)a == b; }\n-inline bool operator!=(const uint160& a, uint64 b)                           { return (base_uint160)a != b; }\n+inline bool operator==(const uint160& a, uint64_t b)                         { return (base_uint160)a == b; }\n+inline bool operator!=(const uint160& a, uint64_t b)                         { return (base_uint160)a != b; }\n inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { return uint160(a) <<= shift; }\n inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }\n inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }\n@@ -534,15 +533,15 @@ class uint256 : public base_uint256\n         return *this;\n     }\n \n-    uint256(uint64 b)\n+    uint256(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n         for (int i = 2; i < WIDTH; i++)\n             pn[i] = 0;\n     }\n \n-    uint256& operator=(uint64 b)\n+    uint256& operator=(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n@@ -565,8 +564,8 @@ class uint256 : public base_uint256\n     }\n };\n \n-inline bool operator==(const uint256& a, uint64 b)                           { return (base_uint256)a == b; }\n-inline bool operator!=(const uint256& a, uint64 b)                           { return (base_uint256)a != b; }\n+inline bool operator==(const uint256& a, uint64_t b)                         { return (base_uint256)a == b; }\n+inline bool operator!=(const uint256& a, uint64_t b)                         { return (base_uint256)a != b; }\n inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { return uint256(a) <<= shift; }\n inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }\n inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }"
      },
      {
        "sha": "d4d4520b66bd7b7298574eefeac0d4504128a9d9",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 27,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -2,6 +2,9 @@\n // Copyright (c) 2011 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"strlcpy.h\"\n #include <boost/algorithm/string/join.hpp>\n@@ -31,7 +34,7 @@ string strMiscWarning;\n bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n-CMedianFilter<int64> vTimeOffsets(200,0);\n+CMedianFilter<int64_t> vTimeOffsets(200,0);\n \n \n \n@@ -94,7 +97,7 @@ instance_of_cinit;\n void RandAddSeed()\n {\n     // Seed with CPU performance counter\n-    int64 nCounter = GetPerformanceCounter();\n+    int64_t nCounter = GetPerformanceCounter();\n     RAND_add(&nCounter, sizeof(nCounter), 1.5);\n     memset(&nCounter, 0, sizeof(nCounter));\n }\n@@ -104,7 +107,7 @@ void RandAddSeedPerfmon()\n     RandAddSeed();\n \n     // This can take up to 2 seconds, so only do it every 10 minutes\n-    static int64 nLastPerfmon;\n+    static int64_t nLastPerfmon;\n     if (GetTime() < nLastPerfmon + 10 * 60)\n         return;\n     nLastPerfmon = GetTime();\n@@ -126,15 +129,15 @@ void RandAddSeedPerfmon()\n #endif\n }\n \n-uint64 GetRand(uint64 nMax)\n+uint64_t GetRand(uint64_t nMax)\n {\n     if (nMax == 0)\n         return 0;\n \n     // The range of the random source must be a multiple of the modulus\n     // to give every possible output value an equal possibility\n-    uint64 nRange = (std::numeric_limits<uint64>::max() / nMax) * nMax;\n-    uint64 nRand = 0;\n+    uint64_t nRange = (std::numeric_limits<uint64_t>::max() / nMax) * nMax;\n+    uint64_t nRand = 0;\n     do\n         RAND_bytes((unsigned char*)&nRand, sizeof(nRand));\n     while (nRand >= nRange);\n@@ -330,13 +333,13 @@ void ParseString(const string& str, char c, vector<string>& v)\n }\n \n \n-string FormatMoney(int64 n, bool fPlus)\n+string FormatMoney(int64_t n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n-    int64 n_abs = (n > 0 ? n : -n);\n-    int64 quotient = n_abs/COIN;\n-    int64 remainder = n_abs%COIN;\n+    int64_t n_abs = (n > 0 ? n : -n);\n+    int64_t quotient = n_abs/COIN;\n+    int64_t remainder = n_abs%COIN;\n     string str = strprintf(\"%\"PRI64d\".%08\"PRI64d, quotient, remainder);\n \n     // Right-trim excess 0's before the decimal point:\n@@ -354,15 +357,15 @@ string FormatMoney(int64 n, bool fPlus)\n }\n \n \n-bool ParseMoney(const string& str, int64& nRet)\n+bool ParseMoney(const string& str, int64_t& nRet)\n {\n     return ParseMoney(str.c_str(), nRet);\n }\n \n-bool ParseMoney(const char* pszIn, int64& nRet)\n+bool ParseMoney(const char* pszIn, int64_t& nRet)\n {\n     string strWhole;\n-    int64 nUnits = 0;\n+    int64_t nUnits = 0;\n     const char* p = pszIn;\n     while (isspace(*p))\n         p++;\n@@ -371,7 +374,7 @@ bool ParseMoney(const char* pszIn, int64& nRet)\n         if (*p == '.')\n         {\n             p++;\n-            int64 nMult = CENT*10;\n+            int64_t nMult = CENT*10;\n             while (isdigit(*p) && (nMult > 0))\n             {\n                 nUnits += nMult * (*p++ - '0');\n@@ -392,8 +395,8 @@ bool ParseMoney(const char* pszIn, int64& nRet)\n         return false;\n     if (nUnits < 0 || nUnits > COIN)\n         return false;\n-    int64 nWhole = atoi64(strWhole);\n-    int64 nValue = nWhole*COIN + nUnits;\n+    int64_t nWhole = atoi64(strWhole);\n+    int64_t nValue = nWhole*COIN + nUnits;\n \n     nRet = nValue;\n     return true;\n@@ -910,30 +913,30 @@ void ShrinkDebugFile()\n //  - Median of other nodes's clocks\n //  - The user (asking the user to fix the system clock if the first two disagree)\n //\n-static int64 nMockTime = 0;  // For unit testing\n+static int64_t nMockTime = 0;  // For unit testing\n \n-int64 GetTime()\n+int64_t GetTime()\n {\n     if (nMockTime) return nMockTime;\n \n     return time(NULL);\n }\n \n-void SetMockTime(int64 nMockTimeIn)\n+void SetMockTime(int64_t nMockTimeIn)\n {\n     nMockTime = nMockTimeIn;\n }\n \n-static int64 nTimeOffset = 0;\n+static int64_t nTimeOffset = 0;\n \n-int64 GetAdjustedTime()\n+int64_t GetAdjustedTime()\n {\n     return GetTime() + nTimeOffset;\n }\n \n-void AddTimeData(unsigned int ip, int64 nTime)\n+void AddTimeData(unsigned int ip, int64_t nTime)\n {\n-    int64 nOffsetSample = nTime - GetTime();\n+    int64_t nOffsetSample = nTime - GetTime();\n \n     // Ignore duplicates\n     static set<unsigned int> setKnown;\n@@ -945,8 +948,8 @@ void AddTimeData(unsigned int ip, int64 nTime)\n     printf(\"Added time data, samples %d, offset %+\"PRI64d\" (%+\"PRI64d\" minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n     if (vTimeOffsets.size() >= 5 && vTimeOffsets.size() % 2 == 1)\n     {\n-        int64 nMedian = vTimeOffsets.median();\n-        std::vector<int64> vSorted = vTimeOffsets.sorted();\n+        int64_t nMedian = vTimeOffsets.median();\n+        std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n         if (abs64(nMedian) < 70 * 60)\n         {\n@@ -961,7 +964,7 @@ void AddTimeData(unsigned int ip, int64 nTime)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                BOOST_FOREACH(int64 nOffset, vSorted)\n+                BOOST_FOREACH(int64_t nOffset, vSorted)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -976,7 +979,7 @@ void AddTimeData(unsigned int ip, int64 nTime)\n             }\n         }\n         if (fDebug) {\n-            BOOST_FOREACH(int64 n, vSorted)\n+            BOOST_FOREACH(int64_t n, vSorted)\n                 printf(\"%+\"PRI64d\"  \", n);\n             printf(\"|  \");\n         }"
      },
      {
        "sha": "8dd08d8a806f41c8dc2d45b4c915f4708e1008d1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_UTIL_H\n #define BITCOIN_UTIL_H\n \n+#include <stdint.h>\n+\n #include \"uint256.h\"\n \n #ifndef WIN32\n@@ -25,9 +27,6 @@\n #include <openssl/ripemd.h>\n \n \n-typedef long long  int64;\n-typedef unsigned long long  uint64;\n-\n #define loop                for (;;)\n #define BEGIN(a)            ((char*)&(a))\n #define END(a)              ((char*)&((&(a))[1]))\n@@ -98,7 +97,7 @@ typedef u_int SOCKET;\n #define _strlwr(psz)        to_lower(psz)\n #define MAX_PATH            1024\n #define Beep(n1,n2)         (0)\n-inline void Sleep(int64 n)\n+inline void Sleep(int64_t n)\n {\n     boost::thread::sleep(boost::get_system_time() + boost::posix_time::milliseconds(n));\n }\n@@ -158,9 +157,9 @@ void LogException(std::exception* pex, const char* pszThread);\n void PrintException(std::exception* pex, const char* pszThread);\n void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n void ParseString(const std::string& str, char c, std::vector<std::string>& v);\n-std::string FormatMoney(int64 n, bool fPlus=false);\n-bool ParseMoney(const std::string& str, int64& nRet);\n-bool ParseMoney(const char* pszIn, int64& nRet);\n+std::string FormatMoney(int64_t n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, int64_t& nRet);\n+bool ParseMoney(const char* pszIn, int64_t& nRet);\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = NULL);\n@@ -183,11 +182,11 @@ std::string GetDefaultDataDir();\n std::string GetDataDir();\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n-uint64 GetRand(uint64 nMax);\n-int64 GetTime();\n-void SetMockTime(int64 nMockTimeIn);\n-int64 GetAdjustedTime();\n-void AddTimeData(unsigned int ip, int64 nTime);\n+uint64_t GetRand(uint64_t nMax);\n+int64_t GetTime();\n+void SetMockTime(int64_t nMockTimeIn);\n+int64_t GetAdjustedTime();\n+void AddTimeData(unsigned int ip, int64_t nTime);\n std::string FormatFullVersion();\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n \n@@ -284,7 +283,7 @@ typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> >\n \n \n \n-inline std::string i64tostr(int64 n)\n+inline std::string i64tostr(int64_t n)\n {\n     return strprintf(\"%\"PRI64d, n);\n }\n@@ -294,7 +293,7 @@ inline std::string itostr(int n)\n     return strprintf(\"%d\", n);\n }\n \n-inline int64 atoi64(const char* psz)\n+inline int64_t atoi64(const char* psz)\n {\n #ifdef _MSC_VER\n     return _atoi64(psz);\n@@ -303,7 +302,7 @@ inline int64 atoi64(const char* psz)\n #endif\n }\n \n-inline int64 atoi64(const std::string& str)\n+inline int64_t atoi64(const std::string& str)\n {\n #ifdef _MSC_VER\n     return _atoi64(str.c_str());\n@@ -322,12 +321,12 @@ inline int roundint(double d)\n     return (int)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-inline int64 roundint64(double d)\n+inline int64_t roundint64(double d)\n {\n-    return (int64)(d > 0 ? d + 0.5 : d - 0.5);\n+    return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-inline int64 abs64(int64 n)\n+inline int64_t abs64(int64_t n)\n {\n     return (n >= 0 ? n : -n);\n }\n@@ -381,9 +380,9 @@ inline void PrintHex(const std::vector<unsigned char>& vch, const char* pszForma\n     printf(pszFormat, HexStr(vch, fSpaces).c_str());\n }\n \n-inline int64 GetPerformanceCounter()\n+inline int64_t GetPerformanceCounter()\n {\n-    int64 nCounter = 0;\n+    int64_t nCounter = 0;\n #ifdef WIN32\n     QueryPerformanceCounter((LARGE_INTEGER*)&nCounter);\n #else\n@@ -394,13 +393,13 @@ inline int64 GetPerformanceCounter()\n     return nCounter;\n }\n \n-inline int64 GetTimeMillis()\n+inline int64_t GetTimeMillis()\n {\n     return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n             boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n }\n \n-inline std::string DateTimeStrFormat(const char* pszFormat, int64 nTime)\n+inline std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n {\n     time_t n = nTime;\n     struct tm* ptmTime = gmtime(&n);\n@@ -432,7 +431,7 @@ inline std::string GetArg(const std::string& strArg, const std::string& strDefau\n     return strDefault;\n }\n \n-inline int64 GetArg(const std::string& strArg, int64 nDefault)\n+inline int64_t GetArg(const std::string& strArg, int64_t nDefault)\n {\n     if (mapArgs.count(strArg))\n         return atoi64(mapArgs[strArg]);"
      },
      {
        "sha": "20336a380cfc52ba0ea980ade86990797936b8ed",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 62,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <stdint.h>\n+\n #include \"headers.h\"\n #include \"db.h\"\n #include \"crypter.h\"\n@@ -90,7 +92,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                 return false;\n             if (CCryptoKeyStore::Unlock(vMasterKey))\n             {\n-                int64 nStartTime = GetTimeMillis();\n+                int64_t nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n                 pMasterKey.second.nDeriveIterations = pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime)));\n \n@@ -149,7 +151,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     RAND_bytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n \n     CCrypter crypter;\n-    int64 nStartTime = GetTimeMillis();\n+    int64_t nStartTime = GetTimeMillis();\n     crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n     kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n \n@@ -367,7 +369,7 @@ bool CWallet::IsMine(const CTxIn &txin) const\n     return false;\n }\n \n-int64 CWallet::GetDebit(const CTxIn &txin) const\n+int64_t CWallet::GetDebit(const CTxIn &txin) const\n {\n     CRITICAL_BLOCK(cs_wallet)\n     {\n@@ -401,7 +403,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     return false;\n }\n \n-int64 CWalletTx::GetTxTime() const\n+int64_t CWalletTx::GetTxTime() const\n {\n     return nTimeReceived;\n }\n@@ -445,8 +447,8 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CBitcoinAddress, int64> >& listReceived,\n-                           list<pair<CBitcoinAddress, int64> >& listSent, int64& nFee, string& strSentAccount) const\n+void CWalletTx::GetAmounts(int64_t& nGeneratedImmature, int64_t& nGeneratedMature, list<pair<CBitcoinAddress, int64_t> >& listReceived,\n+                           list<pair<CBitcoinAddress, int64_t> >& listSent, int64_t& nFee, string& strSentAccount) const\n {\n     nGeneratedImmature = nGeneratedMature = nFee = 0;\n     listReceived.clear();\n@@ -463,10 +465,10 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n     }\n \n     // Compute fee:\n-    int64 nDebit = GetDebit();\n+    int64_t nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64 nValueOut = GetValueOut();\n+        int64_t nValueOut = GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n \n@@ -495,29 +497,29 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived, \n-                                  int64& nSent, int64& nFee) const\n+void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nGenerated, int64_t& nReceived, \n+                                  int64_t& nSent, int64_t& nFee) const\n {\n     nGenerated = nReceived = nSent = nFee = 0;\n \n-    int64 allGeneratedImmature, allGeneratedMature, allFee;\n+    int64_t allGeneratedImmature, allGeneratedMature, allFee;\n     allGeneratedImmature = allGeneratedMature = allFee = 0;\n     string strSentAccount;\n-    list<pair<CBitcoinAddress, int64> > listReceived;\n-    list<pair<CBitcoinAddress, int64> > listSent;\n+    list<pair<CBitcoinAddress, int64_t> > listReceived;\n+    list<pair<CBitcoinAddress, int64_t> > listSent;\n     GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n \n     if (strAccount == \"\")\n         nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64_t)& s, listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     CRITICAL_BLOCK(pwallet->cs_wallet)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64_t)& r, listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n@@ -720,7 +722,7 @@ void CWallet::ResendWalletTransactions()\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n-    static int64 nNextTime;\n+    static int64_t nNextTime;\n     if (GetTime() < nNextTime)\n         return;\n     bool fFirst = (nNextTime == 0);\n@@ -729,7 +731,7 @@ void CWallet::ResendWalletTransactions()\n         return;\n \n     // Only do it if there's been a new block since last time\n-    static int64 nLastTime;\n+    static int64_t nLastTime;\n     if (nTimeBestReceived < nLastTime)\n         return;\n     nLastTime = GetTime();\n@@ -746,7 +748,7 @@ void CWallet::ResendWalletTransactions()\n             CWalletTx& wtx = item.second;\n             // Don't rebroadcast until it's had plenty of time that\n             // it should have gotten in already by now.\n-            if (nTimeBestReceived - (int64)wtx.nTimeReceived > 5 * 60)\n+            if (nTimeBestReceived - (int64_t)wtx.nTimeReceived > 5 * 60)\n                 mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n         }\n         BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n@@ -768,9 +770,9 @@ void CWallet::ResendWalletTransactions()\n //\n \n \n-int64 CWallet::GetBalance() const\n+int64_t CWallet::GetBalance() const\n {\n-    int64 nTotal = 0;\n+    int64_t nTotal = 0;\n     CRITICAL_BLOCK(cs_wallet)\n     {\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -785,9 +787,9 @@ int64 CWallet::GetBalance() const\n     return nTotal;\n }\n \n-int64 CWallet::GetUnconfirmedBalance() const\n+int64_t CWallet::GetUnconfirmedBalance() const\n {\n-    int64 nTotal = 0;\n+    int64_t nTotal = 0;\n     CRITICAL_BLOCK(cs_wallet)\n     {\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -801,17 +803,17 @@ int64 CWallet::GetUnconfirmedBalance() const\n     return nTotal;\n }\n \n-bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    pair<int64, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<int64>::max();\n+    pair<int64_t, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    coinLowestLarger.first = std::numeric_limits<int64_t>::max();\n     coinLowestLarger.second.first = NULL;\n-    vector<pair<int64, pair<const CWalletTx*,unsigned int> > > vValue;\n-    int64 nTotalLower = 0;\n+    vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > > vValue;\n+    int64_t nTotalLower = 0;\n \n     CRITICAL_BLOCK(cs_wallet)\n     {\n@@ -838,12 +840,12 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n                 if (pcoin->IsSpent(i) || !IsMine(pcoin->vout[i]))\n                     continue;\n \n-                int64 n = pcoin->vout[i].nValue;\n+                int64_t n = pcoin->vout[i].nValue;\n \n                 if (n <= 0)\n                     continue;\n \n-                pair<int64,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin,i));\n+                pair<int64_t,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin,i));\n \n                 if (n == nTargetValue)\n                 {\n@@ -890,12 +892,12 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n     sort(vValue.rbegin(), vValue.rend());\n     vector<char> vfIncluded;\n     vector<char> vfBest(vValue.size(), true);\n-    int64 nBest = nTotalLower;\n+    int64_t nBest = nTotalLower;\n \n     for (int nRep = 0; nRep < 1000 && nBest != nTargetValue; nRep++)\n     {\n         vfIncluded.assign(vValue.size(), false);\n-        int64 nTotal = 0;\n+        int64_t nTotal = 0;\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n@@ -946,7 +948,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n     return true;\n }\n \n-bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const\n+bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n {\n     return (SelectCoinsMinConf(nTargetValue, 1, 6, setCoinsRet, nValueRet) ||\n             SelectCoinsMinConf(nTargetValue, 1, 1, setCoinsRet, nValueRet) ||\n@@ -956,10 +958,10 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet)\n {\n-    int64 nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n+    int64_t nValue = 0;\n+    BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n     {\n         if (nValue < 0)\n             return false;\n@@ -983,30 +985,30 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 wtxNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n-                int64 nTotalValue = nValue + nFeeRet;\n+                int64_t nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n+                BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n                     wtxNew.vout.push_back(CTxOut(s.second, s.first));\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n-                int64 nValueIn = 0;\n+                int64_t nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn))\n                     return false;\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n-                    int64 nCredit = pcoin.first->vout[pcoin.second].nValue;\n+                    int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     dPriority += (double)nCredit * pcoin.first->GetDepthInMainChain();\n                 }\n \n-                int64 nChange = nValueIn - nValue - nFeeRet;\n+                int64_t nChange = nValueIn - nValue - nFeeRet;\n                 // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n                 // or until nChange becomes zero\n                 // NOTE: this depends on the exact behaviour of GetMinFee\n                 if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n                 {\n-                    int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n+                    int64_t nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n                     nChange -= nMoveToFee;\n                     nFeeRet += nMoveToFee;\n                 }\n@@ -1054,9 +1056,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 dPriority /= nBytes;\n \n                 // Check that enough fee is included\n-                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+                int64_t nPayFee = nTransactionFee * (1 + (int64_t)nBytes / 1000);\n                 bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n+                int64_t nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);\n@@ -1074,9 +1076,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet)\n {\n-    vector< pair<CScript, int64> > vecSend;\n+    vector< pair<CScript, int64_t> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet);\n }\n@@ -1135,10 +1137,10 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew, bool fAskFee)\n {\n     CReserveKey reservekey(this);\n-    int64 nFeeRequired;\n+    int64_t nFeeRequired;\n \n     if (IsLocked())\n     {\n@@ -1169,7 +1171,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n \n-string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64_t nValue, CWalletTx& wtxNew, bool fAskFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1299,17 +1301,17 @@ bool CWallet::NewKeyPool()\n     CRITICAL_BLOCK(cs_wallet)\n     {\n         CWalletDB walletdb(strWalletFile);\n-        BOOST_FOREACH(int64 nIndex, setKeyPool)\n+        BOOST_FOREACH(int64_t nIndex, setKeyPool)\n             walletdb.ErasePool(nIndex);\n         setKeyPool.clear();\n \n         if (IsLocked())\n             return false;\n \n-        int64 nKeys = max(GetArg(\"-keypool\", 100), (int64)0);\n+        int64_t nKeys = max(GetArg(\"-keypool\", 100), (int64_t)0);\n         for (int i = 0; i < nKeys; i++)\n         {\n-            int64 nIndex = i+1;\n+            int64_t nIndex = i+1;\n             walletdb.WritePool(nIndex, CKeyPool(GenerateNewKey()));\n             setKeyPool.insert(nIndex);\n         }\n@@ -1328,10 +1330,10 @@ bool CWallet::TopUpKeyPool()\n         CWalletDB walletdb(strWalletFile);\n \n         // Top up key pool\n-        int64 nTargetSize = max(GetArg(\"-keypool\", 100), (int64)0);\n+        int64_t nTargetSize = max(GetArg(\"-keypool\", 100), (int64_t)0);\n         while (setKeyPool.size() < nTargetSize+1)\n         {\n-            int64 nEnd = 1;\n+            int64_t nEnd = 1;\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n@@ -1343,7 +1345,7 @@ bool CWallet::TopUpKeyPool()\n     return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n+void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n {\n     nIndex = -1;\n     keypool.vchPubKey.clear();\n@@ -1369,14 +1371,14 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n     }\n }\n \n-int64 CWallet::AddReserveKey(const CKeyPool& keypool)\n+int64_t CWallet::AddReserveKey(const CKeyPool& keypool)\n {\n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(cs_wallet)\n     {\n         CWalletDB walletdb(strWalletFile);\n \n-        int64 nIndex = 1 + *(--setKeyPool.end());\n+        int64_t nIndex = 1 + *(--setKeyPool.end());\n         if (!walletdb.WritePool(nIndex, keypool))\n             throw runtime_error(\"AddReserveKey() : writing added key failed\");\n         setKeyPool.insert(nIndex);\n@@ -1385,7 +1387,7 @@ int64 CWallet::AddReserveKey(const CKeyPool& keypool)\n     return -1;\n }\n \n-void CWallet::KeepKey(int64 nIndex)\n+void CWallet::KeepKey(int64_t nIndex)\n {\n     // Remove from key pool\n     if (fFileBacked)\n@@ -1396,7 +1398,7 @@ void CWallet::KeepKey(int64 nIndex)\n     printf(\"keypool keep %\"PRI64d\"\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64 nIndex)\n+void CWallet::ReturnKey(int64_t nIndex)\n {\n     // Return to key pool\n     CRITICAL_BLOCK(cs_wallet)\n@@ -1406,7 +1408,7 @@ void CWallet::ReturnKey(int64 nIndex)\n \n bool CWallet::GetKeyFromPool(vector<unsigned char>& result, bool fAllowReuse)\n {\n-    int64 nIndex = 0;\n+    int64_t nIndex = 0;\n     CKeyPool keypool;\n     CRITICAL_BLOCK(cs_wallet)\n     {\n@@ -1428,9 +1430,9 @@ bool CWallet::GetKeyFromPool(vector<unsigned char>& result, bool fAllowReuse)\n     return true;\n }\n \n-int64 CWallet::GetOldestKeyPoolTime()\n+int64_t CWallet::GetOldestKeyPoolTime()\n {\n-    int64 nIndex = 0;\n+    int64_t nIndex = 0;\n     CKeyPool keypool;\n     ReserveKeyFromKeyPool(nIndex, keypool);\n     if (nIndex == -1)\n@@ -1481,7 +1483,7 @@ void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n \n     CRITICAL_BLOCK(cs_main)\n     CRITICAL_BLOCK(cs_wallet)\n-    BOOST_FOREACH(const int64& id, setKeyPool)\n+    BOOST_FOREACH(const int64_t& id, setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))"
      },
      {
        "sha": "7ab1c708f70cd4f6e28040117178ce70e0bb31e9",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 45,
        "deletions": 43,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d9f36781604e4ca9fc35dc65265593423b73e9/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d9f36781604e4ca9fc35dc65265593423b73e9/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=21d9f36781604e4ca9fc35dc65265593423b73e9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n+#include <stdint.h>\n+\n #include \"bignum.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -20,8 +22,8 @@ class CWalletDB;\n class CWallet : public CCryptoKeyStore\n {\n private:\n-    bool SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n-    bool SelectCoins(int64 nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n+    bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n+    bool SelectCoins(int64_t nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -31,7 +33,7 @@ class CWallet : public CCryptoKeyStore\n     bool fFileBacked;\n     std::string strWalletFile;\n \n-    std::set<int64> setKeyPool;\n+    std::set<int64_t> setKeyPool;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -86,39 +88,39 @@ class CWallet : public CCryptoKeyStore\n     int ScanForWalletTransaction(const uint256& hashTx);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n-    int64 GetBalance() const;\n-    int64 GetUnconfirmedBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n-    bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n+    int64_t GetBalance() const;\n+    int64_t GetUnconfirmedBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, int64_t> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet);\n+    bool CreateTransaction(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n     bool BroadcastTransaction(CWalletTx& wtxNew);\n-    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64_t nValue, CWalletTx& wtxNew, bool fAskFee=false);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool();\n-    int64 AddReserveKey(const CKeyPool& keypool);\n-    void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n-    void KeepKey(int64 nIndex);\n-    void ReturnKey(int64 nIndex);\n+    int64_t AddReserveKey(const CKeyPool& keypool);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex);\n     bool GetKeyFromPool(std::vector<unsigned char> &key, bool fAllowReuse=true);\n-    int64 GetOldestKeyPoolTime();\n+    int64_t GetOldestKeyPoolTime();\n     void GetAllReserveAddresses(std::set<CBitcoinAddress>& setAddress);\n \n     bool IsMine(const CTxIn& txin) const;\n-    int64 GetDebit(const CTxIn& txin) const;\n+    int64_t GetDebit(const CTxIn& txin) const;\n     bool IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64 GetCredit(const CTxOut& txout) const\n+    int64_t GetCredit(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return (IsMine(txout) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n-    int64 GetChange(const CTxOut& txout) const\n+    int64_t GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n@@ -135,9 +137,9 @@ class CWallet : public CCryptoKeyStore\n     {\n         return (GetDebit(tx) > 0);\n     }\n-    int64 GetDebit(const CTransaction& tx) const\n+    int64_t GetDebit(const CTransaction& tx) const\n     {\n-        int64 nDebit = 0;\n+        int64_t nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n             nDebit += GetDebit(txin);\n@@ -146,9 +148,9 @@ class CWallet : public CCryptoKeyStore\n         }\n         return nDebit;\n     }\n-    int64 GetCredit(const CTransaction& tx) const\n+    int64_t GetCredit(const CTransaction& tx) const\n     {\n-        int64 nCredit = 0;\n+        int64_t nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nCredit += GetCredit(txout);\n@@ -157,9 +159,9 @@ class CWallet : public CCryptoKeyStore\n         }\n         return nCredit;\n     }\n-    int64 GetChange(const CTransaction& tx) const\n+    int64_t GetChange(const CTransaction& tx) const\n     {\n-        int64 nChange = 0;\n+        int64_t nChange = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nChange += GetChange(txout);\n@@ -214,7 +216,7 @@ class CReserveKey\n {\n protected:\n     CWallet* pwallet;\n-    int64 nIndex;\n+    int64_t nIndex;\n     std::vector<unsigned char> vchPubKey;\n public:\n     CReserveKey(CWallet* pwalletIn)\n@@ -260,10 +262,10 @@ class CWalletTx : public CMerkleTx\n     mutable char fCreditCached;\n     mutable char fAvailableCreditCached;\n     mutable char fChangeCached;\n-    mutable int64 nDebitCached;\n-    mutable int64 nCreditCached;\n-    mutable int64 nAvailableCreditCached;\n-    mutable int64 nChangeCached;\n+    mutable int64_t nDebitCached;\n+    mutable int64_t nCreditCached;\n+    mutable int64_t nAvailableCreditCached;\n+    mutable int64_t nChangeCached;\n \n     // memory only UI hints\n     mutable unsigned int nTimeDisplayed;\n@@ -416,7 +418,7 @@ class CWalletTx : public CMerkleTx\n         return (!!vfSpent[nOut]);\n     }\n \n-    int64 GetDebit() const\n+    int64_t GetDebit() const\n     {\n         if (vin.empty())\n             return 0;\n@@ -427,7 +429,7 @@ class CWalletTx : public CMerkleTx\n         return nDebitCached;\n     }\n \n-    int64 GetCredit(bool fUseCache=true) const\n+    int64_t GetCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -441,7 +443,7 @@ class CWalletTx : public CMerkleTx\n         return nCreditCached;\n     }\n \n-    int64 GetAvailableCredit(bool fUseCache=true) const\n+    int64_t GetAvailableCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -450,7 +452,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableCreditCached)\n             return nAvailableCreditCached;\n \n-        int64 nCredit = 0;\n+        int64_t nCredit = 0;\n         for (int i = 0; i < vout.size(); i++)\n         {\n             if (!IsSpent(i))\n@@ -468,7 +470,7 @@ class CWalletTx : public CMerkleTx\n     }\n \n \n-    int64 GetChange() const\n+    int64_t GetChange() const\n     {\n         if (fChangeCached)\n             return nChangeCached;\n@@ -477,11 +479,11 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CBitcoinAddress, int64> >& listReceived,\n-                    std::list<std::pair<CBitcoinAddress, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n+    void GetAmounts(int64_t& nGeneratedImmature, int64_t& nGeneratedMature, std::list<std::pair<CBitcoinAddress, int64_t> >& listReceived,\n+                    std::list<std::pair<CBitcoinAddress, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n-                           int64& nSent, int64& nFee) const;\n+    void GetAccountAmounts(const std::string& strAccount, int64_t& nGenerated, int64_t& nReceived, \n+                           int64_t& nSent, int64_t& nFee) const;\n \n     bool IsFromMe() const\n     {\n@@ -531,7 +533,7 @@ class CWalletTx : public CMerkleTx\n \n     bool WriteToDisk();\n \n-    int64 GetTxTime() const;\n+    int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n     void AddSupportingTransactions(CTxDB& txdb);\n@@ -551,13 +553,13 @@ class CWalletKey\n {\n public:\n     CPrivKey vchPrivKey;\n-    int64 nTimeCreated;\n-    int64 nTimeExpires;\n+    int64_t nTimeCreated;\n+    int64_t nTimeExpires;\n     std::string strComment;\n     //// todo: add something to note what created it (user, getnewaddress, change)\n     ////   maybe should have a map<string, string> property map\n \n-    CWalletKey(int64 nExpires=0)\n+    CWalletKey(int64_t nExpires=0)\n     {\n         nTimeCreated = (nExpires ? GetTime() : 0);\n         nTimeExpires = nExpires;\n@@ -616,8 +618,8 @@ class CAccountingEntry\n {\n public:\n     std::string strAccount;\n-    int64 nCreditDebit;\n-    int64 nTime;\n+    int64_t nCreditDebit;\n+    int64_t nTime;\n     std::string strOtherAccount;\n     std::string strComment;\n "
      }
    ]
  }
]