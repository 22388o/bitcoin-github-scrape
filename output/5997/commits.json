[
  {
    "sha": "4e382177eda203e799310350ffb2efc28d010799",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTM4MjE3N2VkYTIwM2U3OTkzMTAzNTBmZmIyZWZjMjhkMDEwNzk5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-09T13:58:34Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-12T21:01:30Z"
      },
      "message": "Chainparams: Refactor: Remove redundant HashGenesisBlock() getter",
      "tree": {
        "sha": "ee6c031f0f5f8fe1198228795ae36336cc7752f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee6c031f0f5f8fe1198228795ae36336cc7752f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e382177eda203e799310350ffb2efc28d010799",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e382177eda203e799310350ffb2efc28d010799",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e382177eda203e799310350ffb2efc28d010799",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e382177eda203e799310350ffb2efc28d010799/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8a13501196fc79a3f728683b74f9d586dda46c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8a13501196fc79a3f728683b74f9d586dda46c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8a13501196fc79a3f728683b74f9d586dda46c1"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 15,
      "deletions": 10
    },
    "files": [
      {
        "sha": "03b4be8e17f4c86d12effd40fe695c91dc893173",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e382177eda203e799310350ffb2efc28d010799/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e382177eda203e799310350ffb2efc28d010799/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=4e382177eda203e799310350ffb2efc28d010799",
        "patch": "@@ -41,7 +41,6 @@ class CChainParams\n     };\n \n     const Consensus::Params& GetConsensus() const { return consensus; }\n-    const uint256& HashGenesisBlock() const { return consensus.hashGenesisBlock; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }"
      },
      {
        "sha": "0d98b2b92bbf2f89bd55889426e86b9c4e896eb2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e382177eda203e799310350ffb2efc28d010799/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e382177eda203e799310350ffb2efc28d010799/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4e382177eda203e799310350ffb2efc28d010799",
        "patch": "@@ -607,6 +607,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n #endif\n \n     // ********************************************************* Step 2: parameter interactions\n+    const CChainParams& chainparams = Params();\n \n     // Set this early so that parameter interactions go to console\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n@@ -699,8 +700,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n         InitWarning(_(\"Warning: Unsupported argument -benchmark ignored, use -debug=bench.\"));\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n-    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", Params().DefaultConsistencyChecks()));\n-    fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", Params().DefaultConsistencyChecks());\n+    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks()));\n+    fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n@@ -1043,7 +1044,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!mapBlockIndex.empty() && mapBlockIndex.count(Params().HashGenesisBlock()) == 0)\n+                if (!mapBlockIndex.empty() && mapBlockIndex.count(chainparams.GetConsensus().hashGenesisBlock) == 0)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Initialize the block index (no-op if non-empty database was already loaded)"
      },
      {
        "sha": "247c2c786d4e6e85cd3c3e26e8d009d3db297b9f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e382177eda203e799310350ffb2efc28d010799/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e382177eda203e799310350ffb2efc28d010799/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4e382177eda203e799310350ffb2efc28d010799",
        "patch": "@@ -1680,6 +1680,7 @@ static int64_t nTimeTotal = 0;\n \n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n+    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     // Check it again in case a previous version let a bad block in\n     if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n@@ -1691,7 +1692,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (block.GetHash() == Params().HashGenesisBlock()) {\n+    if (block.GetHash() == chainparams.GetConsensus().hashGenesisBlock) {\n         if (!fJustCheck)\n             view.SetBestBlock(pindex->GetBlockHash());\n         return true;\n@@ -2541,8 +2542,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     uint256 hash = block.GetHash();\n-    if (hash == Params().HashGenesisBlock())\n+    if (hash == consensusParams.hashGenesisBlock)\n         return true;\n \n     assert(pindexPrev);\n@@ -2612,6 +2614,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n {\n+    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n@@ -2632,7 +2635,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n-    if (hash != Params().HashGenesisBlock()) {\n+    if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n@@ -3119,6 +3122,7 @@ bool InitBlockIndex() {\n \n bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n {\n+    const CChainParams& chainparams = Params();\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n@@ -3164,7 +3168,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n \n                 // detect out of order blocks, and store them for later\n                 uint256 hash = block.GetHash();\n-                if (hash != Params().HashGenesisBlock() && mapBlockIndex.find(block.hashPrevBlock) == mapBlockIndex.end()) {\n+                if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex.find(block.hashPrevBlock) == mapBlockIndex.end()) {\n                     LogPrint(\"reindex\", \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                             block.hashPrevBlock.ToString());\n                     if (dbp)\n@@ -3179,7 +3183,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n-                } else if (hash != Params().HashGenesisBlock() && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n+                } else if (hash != chainparams.GetConsensus().hashGenesisBlock && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n                     LogPrintf(\"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n                 }\n \n@@ -3221,6 +3225,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n \n void static CheckBlockIndex()\n {\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     if (!fCheckBlockIndex) {\n         return;\n     }\n@@ -3263,7 +3268,7 @@ void static CheckBlockIndex()\n         // Begin: actual consistency checks.\n         if (pindex->pprev == NULL) {\n             // Genesis block checks.\n-            assert(pindex->GetBlockHash() == Params().HashGenesisBlock()); // Genesis block's hash must match.\n+            assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n             assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n         }\n         // HAVE_DATA is equivalent to VALID_TRANSACTIONS and equivalent to nTx > 0 (we stored the number of transactions in the block)"
      }
    ]
  }
]