[
  {
    "sha": "2012d4df23b7b065ccc1dbe596073d98e428fd3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDEyZDRkZjIzYjdiMDY1Y2NjMWRiZTU5NjA3M2Q5OGU0MjhmZDNk",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-27T15:06:19Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-29T13:31:48Z"
      },
      "message": "Add CScriptNum decode python implementation in functional suite",
      "tree": {
        "sha": "7f565e7c1bc56bff9e44f8fa6d3bc991a2fdc5f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f565e7c1bc56bff9e44f8fa6d3bc991a2fdc5f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2012d4df23b7b065ccc1dbe596073d98e428fd3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2012d4df23b7b065ccc1dbe596073d98e428fd3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2012d4df23b7b065ccc1dbe596073d98e428fd3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2012d4df23b7b065ccc1dbe596073d98e428fd3d/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4eaaa6ac53606a1533b56050af77961d8c27dc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4eaaa6ac53606a1533b56050af77961d8c27dc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4eaaa6ac53606a1533b56050af77961d8c27dc7"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 26,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6e74731349b6be41de3ab5e4e18fcfb09b2e24a0",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2012d4df23b7b065ccc1dbe596073d98e428fd3d/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2012d4df23b7b065ccc1dbe596073d98e428fd3d/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=2012d4df23b7b065ccc1dbe596073d98e428fd3d",
        "patch": "@@ -25,7 +25,7 @@\n     assert_raises_rpc_error,\n     bytes_to_hex_str as b2x,\n )\n-\n+from test_framework.script import CScriptNum\n \n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n@@ -65,11 +65,19 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert 'proposal' in tmpl['capabilities']\n         assert 'coinbasetxn' not in tmpl\n \n-        coinbase_tx = create_coinbase(height=int(tmpl[\"height\"]) + 1)\n+        next_height = int(tmpl[\"height\"])\n+        coinbase_tx = create_coinbase(height=next_height)\n         # sequence numbers must not be max for nLockTime to have effect\n         coinbase_tx.vin[0].nSequence = 2 ** 32 - 2\n         coinbase_tx.rehash()\n \n+        # round-trip the encoded bip34 block height commitment\n+        assert_equal(CScriptNum.decode(coinbase_tx.vin[0].scriptSig), next_height)\n+        # round-trip negative and multi-byte CScriptNums to catch python regression\n+        assert_equal(CScriptNum.decode(CScriptNum.encode(CScriptNum(1500))), 1500)\n+        assert_equal(CScriptNum.decode(CScriptNum.encode(CScriptNum(-1500))), -1500)\n+        assert_equal(CScriptNum.decode(CScriptNum.encode(CScriptNum(-1))), -1)\n+\n         block = CBlock()\n         block.nVersion = tmpl[\"version\"]\n         block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)"
      },
      {
        "sha": "2c5ba24a6a0dfb25a63e4aaf352fd0f24b11eca0",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2012d4df23b7b065ccc1dbe596073d98e428fd3d/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2012d4df23b7b065ccc1dbe596073d98e428fd3d/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=2012d4df23b7b065ccc1dbe596073d98e428fd3d",
        "patch": "@@ -385,6 +385,22 @@ def encode(obj):\n             r[-1] |= 0x80\n         return bytes([len(r)]) + r\n \n+    @staticmethod\n+    def decode(vch):\n+        result = 0\n+        # We assume valid push_size and minimal encoding\n+        value = vch[1:]\n+        if len(value) == 0:\n+            return result\n+        for i, byte in enumerate(value):\n+            result |= int(byte) << 8*i\n+        if value[-1] >= 0x80:\n+            # Mask for all but the highest result bit\n+            num_mask = (2**(len(value)*8) - 1) >> 1\n+            result &= num_mask\n+            result *= -1\n+        return result\n+\n \n class CScript(bytes):\n     \"\"\"Serialized script"
      }
    ]
  }
]