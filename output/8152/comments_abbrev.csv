sipa,2016-06-07T07:00:47Z,"I think the persistent CWalletDb object here is just there to prevent a flush to disk in between every added transaction, for performance reasons. Based on earlier pull requests by @pstratem around this, I think he intends to re-introduce a single CWalletDb\* inside CWallet rather than reopening one all the time, after cleaning things up. Perhaps that will need to be done in the same PR, though?\n",https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224196799,224196799,
dcousens,2016-06-07T07:33:12Z,"> Perhaps that will need to be done in the same PR, though?\n\nI think provided it is done before a release,  there is no issue.\n",https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224202649,224202649,
MarcoFalke,2016-06-07T07:40:01Z,I think there is no advantage merging this small refactoring early. Might as well just add the second commit to address @jonasschnelli s and @sipa s feedback.\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224203931,224203931,
jonasschnelli,2016-06-07T09:20:07Z,Regardless of the persistent CWalletDB \* I think this PR has value (refactoring). But I guess we should **not** change the `ReadKeyValue`/`AddToWallet` in that way that it instantiate a new CWalletDB on each wallet transaction load from the wallet.dat (which this PR currently does).\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224225831,224225831,
laanwj,2016-06-07T13:32:34Z,A refactoring shouldn't result in behavioral changes. I'd rather stick with ugly code somewhat longer than introduce a temporary (but serious) performance regression.\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224281044,224281044,
dcousens,2016-06-07T14:01:21Z,>  introduce a temporary (but serious) performance regression.\n\nAt least then you'll have users reminding you :laughing: \n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224289534,224289534,
pstratem,2016-06-08T02:08:00Z,I've split up AddToWallet into AddToWallet and LoadToWallet around the fFromLoadWallet flag.\n\nThis addresses the performance @jonasschnelli noticed and improves the API.\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224468339,224468339,
pstratem,2016-06-08T04:42:20Z,I swapped the order of the commits such that there's no performance issue at any point.\n\n22fa63e74150139c7c71108ee46ed87d31a4a2f3c171d16c34530f76ecc79f82\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224485574,224485574,
pstratem,2016-06-08T23:32:02Z,"import hashlib;hashlib.sha256(""there is still a performance issue"").hexdigest()\n\nthere isn't actually\n",https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-224762203,224762203,
jonasschnelli,2016-06-16T07:08:54Z,utACK 44d5267bfcd8abae5f0ae2a0f4052fc5a88acd2e\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-226405277,226405277,
MarcoFalke,2016-06-17T10:28:55Z,utACK 44d5267\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-226736020,226736020,
instagibbs,2016-07-21T18:56:09Z,tACK 6246add89a46523526a57b66bb87daf9413c69d7\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-234349669,234349669,
MarcoFalke,2016-07-21T19:09:20Z,Seems 6246add is just  a plain rebase of 44d5267\n\nre-utACK  6246add\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-234353160,234353160,
pstratem,2016-07-21T21:38:49Z,@MarcoFalke indeed it is\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-234392276,234392276,
jonasschnelli,2016-07-22T09:43:27Z,"Looks good now!\nExtensive Code Review ACK (6246add89a46523526a57b66bb87daf9413c69d7), nit: maybe squash commit.\n",https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-234501510,234501510,
pstratem,2016-07-23T03:22:04Z,"@jonasschnelli I'd rather not squash, each commit is logically independent.\n",https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-234696186,234696186,
sipa,2016-07-29T20:05:32Z,utACK c04225e7fdb9651ae2f97ed0e3f9601205ea858b\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-236280379,236280379,
pstratem,2016-07-30T00:18:45Z,@laanwj I was having trouble getting consistent benchmark results from -rescan (+-30 seconds on runs taking 160-200 seconds).\n\nSo I just added an fFlushOnClose parameter so it's now clearly doing the same thing as before the change.\n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-236324354,236324354,
sipa,2016-07-30T00:39:39Z,reutACK 5723bb44ce2c6bb14114aa7f211160702a47ac91 \n,https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-236326449,236326449,
pstratem,2016-07-31T18:48:22Z,"Indeed I generally agree, but I was already squashing adding the\nfFlushOnClose flag.\n\nWhenever possible I strongly prefer that each commit produces a complete\nworking build.\n\nOn Jul 31, 2016 3:56 AM, ""MarcoFalke"" notifications@github.com wrote:\n\n> indeed it is\n> \n> I prefer no rebase when it is not necessary. Reviewers always have to\n> reconstruct the history locally each time a rebase ",https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-236449291,236449291,
MarcoFalke,2016-07-31T19:07:29Z,"With rebase I meant changing the commit which the pull is based on,\nnot squashing.\n\nreACK 5723bb44ce2c6bb14114aa7f211160702a47ac91\n",https://github.com/bitcoin/bitcoin/pull/8152#issuecomment-236450372,236450372,
jonasschnelli,2016-06-06T18:04:02Z,just curious: what is the reason to not keep a instance variable (within CWallet) that holds walletdb object? What are the benefits of constantly opening/instantiating the CWalletDB?\n,https://github.com/bitcoin/bitcoin/pull/8152#discussion_r65938277,65938277,src/wallet/wallet.cpp
jonasschnelli,2016-06-06T18:05:50Z,"If you have 10'000 wallet transaction, this would now result in 10'000 x `CWalletDB walletdb(strWalletFile);`.\nWhat about the performance impacts?\n",https://github.com/bitcoin/bitcoin/pull/8152#discussion_r65938583,65938583,src/wallet/walletdb.cpp
laanwj,2016-06-07T06:50:55Z,The scope is used to manage the lifetime of the (database) transaction.\n\nSo having a single CWalletDB object would change semantics significantly. Some people have had this idea before but it was always rejected.\n,https://github.com/bitcoin/bitcoin/pull/8152#discussion_r66018156,66018156,src/wallet/wallet.cpp
pstratem,2016-06-08T01:57:53Z,"@jonasschnelli I will eventually get to that point, but it's going to take a significant amount of work to get there.\n",https://github.com/bitcoin/bitcoin/pull/8152#discussion_r66182712,66182712,src/wallet/wallet.cpp
jonasschnelli,2016-06-16T07:04:03Z,"IMO the non-file-backend state is only used in UnitTests, right? We should also consider dropping it completely (in a later PR).\n",https://github.com/bitcoin/bitcoin/pull/8152#discussion_r67295653,67295653,src/wallet/wallet.cpp
jonasschnelli,2016-06-16T07:08:31Z,The third argument `fFlushOnClose` (`false` here) will be `true` after this PR (default value is `true`).\n= before this PR `importprunedfunds` will not flush on close. After this PR it will.\nBut I guess this is not a problem.\n,https://github.com/bitcoin/bitcoin/pull/8152#discussion_r67296049,67296049,src/wallet/rpcdump.cpp
pstratem,2016-06-16T07:39:24Z,Indeed this does change the default. There doesn't seem to be a good reason not to flush here.\n,https://github.com/bitcoin/bitcoin/pull/8152#discussion_r67299481,67299481,src/wallet/rpcdump.cpp
pstratem,2016-06-16T07:42:39Z,I'll be able to easily remove it once more of the logic is encapsulated.\n,https://github.com/bitcoin/bitcoin/pull/8152#discussion_r67299826,67299826,src/wallet/wallet.cpp
laanwj,2016-07-27T09:11:43Z,"This can go\n\nEdit: Note that the parameters under which walletdb are opened change here - it used to be specifically overriding the flush to false, but after this change, the walletdb will be opened inside AddToWallet with default parameters.\nWhat is the impact of this?\n",https://github.com/bitcoin/bitcoin/pull/8152#discussion_r72405937,72405937,src/wallet/wallet.cpp
pstratem,2016-07-28T00:50:30Z,Indeed this can go. I'll run a benchmark of master and this pr doing a rescan with a wallet that has an enormous number of transactions and keys.\n,https://github.com/bitcoin/bitcoin/pull/8152#discussion_r72550145,72550145,src/wallet/wallet.cpp
