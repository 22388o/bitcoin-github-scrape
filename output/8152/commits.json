[
  {
    "sha": "00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGYwOWM5MjBjMmU4OTA2ZDIyNjAyNTFiZTZkMWQyZmExYmJiMjlk",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-06-08T04:25:31Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T00:04:14Z"
      },
      "message": "Split CWallet::AddToWallet into AddToWallet and LoadToWallet.\n\nThis removes the fFromLoadWallet flag in AddToWallet.  These were already\neffectively two methods.",
      "tree": {
        "sha": "878f8979628021569acfda540623db2a55d53b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/878f8979628021569acfda540623db2a55d53b21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbcb8fd884335134065143047e9798dc8ec13445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcb8fd884335134065143047e9798dc8ec13445"
      }
    ],
    "stats": {
      "total": 235,
      "additions": 119,
      "deletions": 116
    },
    "files": [
      {
        "sha": "9d403a453889fe06fbfa95259adc2a8b1bc4a979",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -310,7 +310,7 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n \n     if (pwalletMain->IsMine(tx)) {\n         CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n-        pwalletMain->AddToWallet(wtx, false, &walletdb);\n+        pwalletMain->AddToWallet(wtx, &walletdb);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "8aad568c93cc61de1d25dbe3ee52133768461ce8",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "68ce26eaa8ae032d6ccafaa772fa236683f91b82",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 110,
        "changes": 222,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -741,138 +741,140 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n {\n     uint256 hash = wtxIn.GetHash();\n \n-    if (fFromLoadWallet)\n-    {\n-        mapWallet[hash] = wtxIn;\n-        CWalletTx& wtx = mapWallet[hash];\n-        wtx.BindWallet(this);\n+    LOCK(cs_wallet);\n+    // Inserts only if not already there, returns tx inserted or tx found\n+    pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n+    CWalletTx& wtx = (*ret.first).second;\n+    wtx.BindWallet(this);\n+    bool fInsertedNew = ret.second;\n+    if (fInsertedNew)\n+    {\n+        wtx.nTimeReceived = GetAdjustedTime();\n+        wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-        AddToSpends(hash);\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n-            if (mapWallet.count(txin.prevout.hash)) {\n-                CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n-                if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n-                    MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n-                }\n-            }\n-        }\n-    }\n-    else\n-    {\n-        LOCK(cs_wallet);\n-        // Inserts only if not already there, returns tx inserted or tx found\n-        pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n-        CWalletTx& wtx = (*ret.first).second;\n-        wtx.BindWallet(this);\n-        bool fInsertedNew = ret.second;\n-        if (fInsertedNew)\n-        {\n-            wtx.nTimeReceived = GetAdjustedTime();\n-            wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n-            wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-\n-            wtx.nTimeSmart = wtx.nTimeReceived;\n-            if (!wtxIn.hashUnset())\n+\n+        wtx.nTimeSmart = wtx.nTimeReceived;\n+        if (!wtxIn.hashUnset())\n+        {\n+            if (mapBlockIndex.count(wtxIn.hashBlock))\n             {\n-                if (mapBlockIndex.count(wtxIn.hashBlock))\n+                int64_t latestNow = wtx.nTimeReceived;\n+                int64_t latestEntry = 0;\n                 {\n-                    int64_t latestNow = wtx.nTimeReceived;\n-                    int64_t latestEntry = 0;\n+                    // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                    int64_t latestTolerated = latestNow + 300;\n+                    const TxItems & txOrdered = wtxOrdered;\n+                    for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n                     {\n-                        // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-                        int64_t latestTolerated = latestNow + 300;\n-                        const TxItems & txOrdered = wtxOrdered;\n-                        for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        CWalletTx *const pwtx = (*it).second.first;\n+                        if (pwtx == &wtx)\n+                            continue;\n+                        CAccountingEntry *const pacentry = (*it).second.second;\n+                        int64_t nSmartTime;\n+                        if (pwtx)\n                         {\n-                            CWalletTx *const pwtx = (*it).second.first;\n-                            if (pwtx == &wtx)\n-                                continue;\n-                            CAccountingEntry *const pacentry = (*it).second.second;\n-                            int64_t nSmartTime;\n-                            if (pwtx)\n-                            {\n-                                nSmartTime = pwtx->nTimeSmart;\n-                                if (!nSmartTime)\n-                                    nSmartTime = pwtx->nTimeReceived;\n-                            }\n-                            else\n-                                nSmartTime = pacentry->nTime;\n-                            if (nSmartTime <= latestTolerated)\n-                            {\n-                                latestEntry = nSmartTime;\n-                                if (nSmartTime > latestNow)\n-                                    latestNow = nSmartTime;\n-                                break;\n-                            }\n+                            nSmartTime = pwtx->nTimeSmart;\n+                            if (!nSmartTime)\n+                                nSmartTime = pwtx->nTimeReceived;\n+                        }\n+                        else\n+                            nSmartTime = pacentry->nTime;\n+                        if (nSmartTime <= latestTolerated)\n+                        {\n+                            latestEntry = nSmartTime;\n+                            if (nSmartTime > latestNow)\n+                                latestNow = nSmartTime;\n+                            break;\n                         }\n                     }\n-\n-                    int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n-                    wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n-                else\n-                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n-                             wtxIn.GetHash().ToString(),\n-                             wtxIn.hashBlock.ToString());\n+\n+                int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n+                wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n             }\n-            AddToSpends(hash);\n+            else\n+                LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n+                         wtxIn.GetHash().ToString(),\n+                         wtxIn.hashBlock.ToString());\n         }\n+        AddToSpends(hash);\n+    }\n \n-        bool fUpdated = false;\n-        if (!fInsertedNew)\n+    bool fUpdated = false;\n+    if (!fInsertedNew)\n+    {\n+        // Merge\n+        if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n         {\n-            // Merge\n-            if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n-            {\n-                wtx.hashBlock = wtxIn.hashBlock;\n-                fUpdated = true;\n-            }\n-            // If no longer abandoned, update\n-            if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n-            {\n-                wtx.hashBlock = wtxIn.hashBlock;\n-                fUpdated = true;\n-            }\n-            if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n-            {\n-                wtx.nIndex = wtxIn.nIndex;\n-                fUpdated = true;\n-            }\n-            if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n-            {\n-                wtx.fFromMe = wtxIn.fFromMe;\n-                fUpdated = true;\n-            }\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n         }\n+        // If no longer abandoned, update\n+        if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n+        {\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n+        }\n+        if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n+        {\n+            wtx.nIndex = wtxIn.nIndex;\n+            fUpdated = true;\n+        }\n+        if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n+        {\n+            wtx.fFromMe = wtxIn.fFromMe;\n+            fUpdated = true;\n+        }\n+    }\n \n-        //// debug print\n-        LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+    //// debug print\n+    LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n-        // Write to disk\n-        if (fInsertedNew || fUpdated)\n-            if (!pwalletdb->WriteTx(wtx))\n-                return false;\n+    // Write to disk\n+    if (fInsertedNew || fUpdated)\n+        if (!pwalletdb->WriteTx(wtx))\n+            return false;\n \n-        // Break debit/credit balance caches:\n-        wtx.MarkDirty();\n+    // Break debit/credit balance caches:\n+    wtx.MarkDirty();\n \n-        // Notify UI of new or updated transaction\n-        NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+    // Notify UI of new or updated transaction\n+    NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n-        // notify an external script when a wallet transaction comes in or is updated\n-        std::string strCmd = GetArg(\"-walletnotify\", \"\");\n+    // notify an external script when a wallet transaction comes in or is updated\n+    std::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n-        if ( !strCmd.empty())\n-        {\n-            boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-            boost::thread t(runCommand, strCmd); // thread runs free\n-        }\n+    if ( !strCmd.empty())\n+    {\n+        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n+{\n+    uint256 hash = wtxIn.GetHash();\n \n+    mapWallet[hash] = wtxIn;\n+    CWalletTx& wtx = mapWallet[hash];\n+    wtx.BindWallet(this);\n+    wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+    AddToSpends(hash);\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+        if (mapWallet.count(txin.prevout.hash)) {\n+            CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+            if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n+                MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+            }\n+        }\n     }\n+\n     return true;\n }\n \n@@ -913,7 +915,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n             CWalletDB walletdb(strWalletFile, \"r+\", false);\n \n-            return AddToWallet(wtx, false, &walletdb);\n+            return AddToWallet(wtx, &walletdb);\n         }\n     }\n     return false;\n@@ -2456,7 +2458,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew, false, pwalletdb);\n+            AddToWallet(wtxNew, pwalletdb);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;"
      },
      {
        "sha": "3bbacaae5786faf36eaf5d6c5744c74f4f31aa39",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -729,7 +729,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n+    bool AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb);\n+    bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);"
      },
      {
        "sha": "543522ca6485c111c3ed048bc42a9ca35fa2a07d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -400,7 +400,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->AddToWallet(wtx, true, NULL);\n+            pwallet->LoadToWallet(wtx);\n         }\n         else if (strType == \"acentry\")\n         {"
      }
    ]
  },
  {
    "sha": "867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjdmODQyZjFlNWEzODVhZWIyMDkzZjgwMmQ2ZjM3YTg0ZDBmZTVk",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-06-08T04:41:03Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T00:04:14Z"
      },
      "message": "Remove CWalletDB* parameter from CWallet::AddToWallet",
      "tree": {
        "sha": "11f1d708106754f15a7d6f5c03bb61df3c714b07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11f1d708106754f15a7d6f5c03bb61df3c714b07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00f09c920c2e8906d2260251be6d1d2fa1bbb29d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "fe8b53ceb0c1af8de6d4d506ef613b8491790e48",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -309,8 +309,7 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (pwalletMain->IsMine(tx)) {\n-        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n-        pwalletMain->AddToWallet(wtx, &walletdb);\n+        pwalletMain->AddToWallet(wtx, false);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "a6cada46a226c83d47d0db47e1828358bfd27efb",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "63a3baea04957bf449a780877d1bb9a54b534bd9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -741,11 +741,14 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n+    LOCK(cs_wallet);\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\", fFlushOnClose);\n+\n     uint256 hash = wtxIn.GetHash();\n \n-    LOCK(cs_wallet);\n     // Inserts only if not already there, returns tx inserted or tx found\n     pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n     CWalletTx& wtx = (*ret.first).second;\n@@ -754,7 +757,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n     if (fInsertedNew)\n     {\n         wtx.nTimeReceived = GetAdjustedTime();\n-        wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n+        wtx.nOrderPos = IncOrderPosNext(&walletdb);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n         wtx.nTimeSmart = wtx.nTimeReceived;\n@@ -836,7 +839,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n \n     // Write to disk\n     if (fInsertedNew || fUpdated)\n-        if (!pwalletdb->WriteTx(wtx))\n+        if (!walletdb.WriteTx(wtx))\n             return false;\n \n     // Break debit/credit balance caches:\n@@ -911,11 +914,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             if (pblock)\n                 wtx.SetMerkleBranch(*pblock);\n \n-            // Do not flush the wallet here for performance reasons\n-            // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n-            CWalletDB walletdb(strWalletFile, \"r+\", false);\n-\n-            return AddToWallet(wtx, &walletdb);\n+            return AddToWallet(wtx, false);\n         }\n     }\n     return false;\n@@ -2458,7 +2457,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew, pwalletdb);\n+            AddToWallet(wtxNew);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;"
      },
      {
        "sha": "236ef85114e1a4afd6b80701c041f4b5886f3f27",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -729,7 +729,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);"
      }
    ]
  },
  {
    "sha": "5723bb44ce2c6bb14114aa7f211160702a47ac91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzIzYmI0NGNlMmM2YmIxNDExNGFhN2YyMTExNjA3MDJhNDdhYzkx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-06-08T23:20:59Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T00:04:14Z"
      },
      "message": "Remove unused pwalletdb from CWallet::AddToWallet",
      "tree": {
        "sha": "05bcacc3f3e2b5b3a95842c11fc814aba1eb1208",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05bcacc3f3e2b5b3a95842c11fc814aba1eb1208"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5723bb44ce2c6bb14114aa7f211160702a47ac91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5723bb44ce2c6bb14114aa7f211160702a47ac91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5723bb44ce2c6bb14114aa7f211160702a47ac91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5723bb44ce2c6bb14114aa7f211160702a47ac91/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/867f842f1e5a385aeb2093f802d6f37a84d0fe5d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ee9254050ce7842c56a58451455af85456197e2c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5723bb44ce2c6bb14114aa7f211160702a47ac91/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5723bb44ce2c6bb14114aa7f211160702a47ac91/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5723bb44ce2c6bb14114aa7f211160702a47ac91",
        "patch": "@@ -2447,11 +2447,6 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         LOCK2(cs_main, cs_wallet);\n         LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.ToString());\n         {\n-            // This is only to keep the database open to defeat the auto-flush for the\n-            // duration of this scope.  This is the only place where this optimization\n-            // maybe makes sense; please don't do it anywhere else.\n-            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r+\") : NULL;\n-\n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n \n@@ -2467,9 +2462,6 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n                 coin.BindWallet(this);\n                 NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n-\n-            if (fFileBacked)\n-                delete pwalletdb;\n         }\n \n         // Track how many getdata requests our transaction gets"
      }
    ]
  }
]