DrahtBot,2019-07-29 21:30:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16658](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16658.html) ([WIP] validation: Rename CheckInputs to Che",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-516169991,516169991,
fanquake,2019-07-30 03:53:28,@jamesob Could you run bitcoin perf over this PR?,https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-516250057,516250057,
fanquake,2019-07-30 06:22:56,"I've done a single, simple (maybe too simple) benchmark of running `time src/bitcoind -stopatheight=227931` for master (33894612c0de953b75b41dbfcc643986e4ac177e) and this PR. Starting with an empty data dir on each run, except for a `bitcoin.conf` which contained `par=8` and `dbcache=2048`. Master took `16m27s` and this PR took `16m43s`.",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-516280898,516280898,
pstratem,2019-07-30 17:47:46,"time ./src/bitcoind -reindex-chainstate -stopatheight=227931 -dbcache=1024\n\nthis pr: 3m25.503s\nmaster: 3m47.508s\n\nie 10% faster",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-516522713,516522713,
sdaftuar,2019-07-30 20:14:52,"Since that quantity (22 seconds) doesn’t scale as the chain grows, this performance benefit doesn’t seem worth it to me (even though I think this change could be made to be correct, this is complex enough that we should have a higher bar for making this kind of change).",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-516578196,516578196,
fanquake,2019-08-02 06:56:33,"Running `time ./src/bitcoind -reindex-chainstate -stopatheight=227931 -dbcache=1024` I do see the speedup:\n\nmaster e653eeff7651d823407e2e31a89176cc0b240c62: `6m8s`\nthis PR: `5m48s`",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-517579663,517579663,
jamesob,2019-08-02 13:35:31,"-0 on this since it doesn't speed up the non-trivial parts of IBD and introduces more varied behavior to consensus-critical code. Benching the first 200k blocks is deceptive since that's such a small part of total IBD time. Benching a more meaningful part of the chain (almost by definition) shows no improvement:\n\n![ibd local range 500000 501500](https://user-images.githubusercontent.com/73197/",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-517703094,517703094,
fanquake,2019-08-05 05:25:52,"I think I'm in agreement with @sdaftuar and @jamesob, even though this may bring a slight speedup to a small portion of IBD.\n\n@laanwj Can you weigh in here?\n\n@sdaftuar \n> (even though I think this change could be made to be correct, this is complex enough that we should have a higher bar for making this kind of change).\n\nI'd be interested in hearing more of your thoughts on this. i.e",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-518090519,518090519,
DrahtBot,2019-09-02 09:48:33,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-527082733,527082733,
fanquake,2020-02-25 02:15:08,"No further discussion, and any potential performance improvement doesn't seem to be worth the increased complexity in validation code. Going to close this for now.",https://github.com/bitcoin/bitcoin/pull/16486#issuecomment-590646552,590646552,
sdaftuar,2019-07-29 17:51:45,"If the assumevalid block (which is command-line specifiable) is not on the chain that builds off the BIP34Hash, then I think not enforcing BIP 30 would be a bug that could prevent us from reorging to the honest chain.  ",https://github.com/bitcoin/bitcoin/pull/16486#discussion_r308357588,308357588,src/validation.cpp
pstratem,2019-07-30 19:33:06,"Yes, but in the exact same way that an assumevalid chain with invalid scripts would cause that today.\n\nI don't see a incentives issue, as violating bip30 really only allows you to destroy coins.\n\nAm I missing something?",https://github.com/bitcoin/bitcoin/pull/16486#discussion_r308903147,308903147,src/validation.cpp
sdaftuar,2019-07-30 20:13:03,"Currently, if a bad assumevalid hash was given, we could still reorg to the honest chain if it had more work and we found a peer advertising it. The way this code is written would preclude that if an assumevalid hash was given for a chain where bip 30 was violated, which can prevent us from correctly reorging.",https://github.com/bitcoin/bitcoin/pull/16486#discussion_r308920972,308920972,src/validation.cpp
MarcoFalke,2019-07-31 15:24:36,"From IRC:\n\n> [08:29] <sdaftuar> Anyway this would be a simple fix to your PR — just ensure that you only skip the bip30 checks if assume valid is set and the assume valid block hash builds on the known bip34 activation block hash; that would ensure that we only skip the bip30 checks on blocks we know to be safe from this issue\n",https://github.com/bitcoin/bitcoin/pull/16486#discussion_r309284185,309284185,src/validation.cpp
