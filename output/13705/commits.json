[
  {
    "sha": "a3e455694901a887e0feef69bd63e3aa122ea44b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2U0NTU2OTQ5MDFhODg3ZTBmZWVmNjliZDYzZTNhYTEyMmVhNDRi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-20T12:27:00Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-07T12:07:21Z"
      },
      "message": "build: Add format string linter\n\nThis linter checks that the number of arguments passed to each variadic format\nstring function matches the number of format specifiers in the format string.",
      "tree": {
        "sha": "ac3e584c197578054b074124c81dc78b7e42b781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac3e584c197578054b074124c81dc78b7e42b781"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3e455694901a887e0feef69bd63e3aa122ea44b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e455694901a887e0feef69bd63e3aa122ea44b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3e455694901a887e0feef69bd63e3aa122ea44b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e455694901a887e0feef69bd63e3aa122ea44b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c3c402a5a2da9c4c62655b64a9adceced7e9cf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c3c402a5a2da9c4c62655b64a9adceced7e9cf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c3c402a5a2da9c4c62655b64a9adceced7e9cf4"
      }
    ],
    "stats": {
      "total": 292,
      "additions": 292,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dcdd1dcf7e0ab35088f014cc9f01f58d6ce2357f",
        "filename": "test/lint/lint-format-strings.py",
        "status": "added",
        "additions": 252,
        "deletions": 0,
        "changes": 252,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e455694901a887e0feef69bd63e3aa122ea44b/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e455694901a887e0feef69bd63e3aa122ea44b/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=a3e455694901a887e0feef69bd63e3aa122ea44b",
        "patch": "@@ -0,0 +1,252 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Lint format strings: This program checks that the number of arguments passed\n+# to a variadic format string function matches the number of format specifiers\n+# in the format string.\n+\n+import argparse\n+import re\n+import sys\n+\n+FALSE_POSITIVES = [\n+    (\"src/dbwrapper.cpp\", \"vsnprintf(p, limit - p, format, backup_ap)\"),\n+    (\"src/index/base.cpp\", \"FatalError(const char* fmt, const Args&... args)\"),\n+    (\"src/netbase.cpp\", \"LogConnectFailure(bool manual_connection, const char* fmt, const Args&... args)\"),\n+    (\"src/util.cpp\", \"strprintf(_(COPYRIGHT_HOLDERS), _(COPYRIGHT_HOLDERS_SUBSTITUTION))\"),\n+    (\"src/util.cpp\", \"strprintf(COPYRIGHT_HOLDERS, COPYRIGHT_HOLDERS_SUBSTITUTION)\"),\n+]\n+\n+\n+def parse_function_calls(function_name, source_code):\n+    \"\"\"Return an array with all calls to function function_name in string source_code.\n+    Preprocessor directives and C++ style comments (\"//\") in source_code are removed.\n+\n+    >>> len(parse_function_calls(\"foo\", \"foo();bar();foo();bar();\"))\n+    2\n+    >>> parse_function_calls(\"foo\", \"foo(1);bar(1);foo(2);bar(2);\")[0].startswith(\"foo(1);\")\n+    True\n+    >>> parse_function_calls(\"foo\", \"foo(1);bar(1);foo(2);bar(2);\")[1].startswith(\"foo(2);\")\n+    True\n+    >>> len(parse_function_calls(\"foo\", \"foo();bar();// foo();bar();\"))\n+    1\n+    >>> len(parse_function_calls(\"foo\", \"#define FOO foo();\"))\n+    0\n+    \"\"\"\n+    assert(type(function_name) is str and type(source_code) is str and function_name)\n+    lines = [re.sub(\"// .*\", \" \", line).strip()\n+             for line in source_code.split(\"\\n\")\n+             if not line.strip().startswith(\"#\")]\n+    return re.findall(r\"[^a-zA-Z_](?=({}\\(.*).*)\".format(function_name), \" \" + \" \".join(lines))\n+\n+\n+def normalize(s):\n+    \"\"\"Return a normalized version of string s with newlines, tabs and C style comments (\"/* ... */\")\n+    replaced with spaces. Multiple spaces are replaced with a single space.\n+\n+    >>> normalize(\"  /* nothing */   foo\\tfoo  /* bar */  foo     \")\n+    'foo foo foo'\n+    \"\"\"\n+    assert(type(s) is str)\n+    s = s.replace(\"\\n\", \" \")\n+    s = s.replace(\"\\t\", \" \")\n+    s = re.sub(\"/\\*.*?\\*/\", \" \", s)\n+    s = re.sub(\" {2,}\", \" \", s)\n+    return s.strip()\n+\n+\n+ESCAPE_MAP = {\n+    r\"\\n\": \"[escaped-newline]\",\n+    r\"\\t\": \"[escaped-tab]\",\n+    r'\\\"': \"[escaped-quote]\",\n+}\n+\n+\n+def escape(s):\n+    \"\"\"Return the escaped version of string s with \"\\\\\\\"\", \"\\\\n\" and \"\\\\t\" escaped as\n+    \"[escaped-backslash]\", \"[escaped-newline]\" and \"[escaped-tab]\".\n+\n+    >>> unescape(escape(\"foo\")) == \"foo\"\n+    True\n+    >>> escape(r'foo \\\\t foo \\\\n foo \\\\\\\\ foo \\\\ foo \\\\\"bar\\\\\"')\n+    'foo [escaped-tab] foo [escaped-newline] foo \\\\\\\\\\\\\\\\ foo \\\\\\\\ foo [escaped-quote]bar[escaped-quote]'\n+    \"\"\"\n+    assert(type(s) is str)\n+    for raw_value, escaped_value in ESCAPE_MAP.items():\n+        s = s.replace(raw_value, escaped_value)\n+    return s\n+\n+\n+def unescape(s):\n+    \"\"\"Return the unescaped version of escaped string s.\n+    Reverses the replacements made in function escape(s).\n+\n+    >>> unescape(escape(\"bar\"))\n+    'bar'\n+    >>> unescape(\"foo [escaped-tab] foo [escaped-newline] foo \\\\\\\\\\\\\\\\ foo \\\\\\\\ foo [escaped-quote]bar[escaped-quote]\")\n+    'foo \\\\\\\\t foo \\\\\\\\n foo \\\\\\\\\\\\\\\\ foo \\\\\\\\ foo \\\\\\\\\"bar\\\\\\\\\"'\n+    \"\"\"\n+    assert(type(s) is str)\n+    for raw_value, escaped_value in ESCAPE_MAP.items():\n+        s = s.replace(escaped_value, raw_value)\n+    return s\n+\n+\n+def parse_function_call_and_arguments(function_name, function_call):\n+    \"\"\"Split string function_call into an array of strings consisting of:\n+    * the string function_call followed by \"(\"\n+    * the function call argument #1\n+    * ...\n+    * the function call argument #n\n+    * a trailing \");\"\n+\n+    The strings returned are in escaped form. See escape(...).\n+\n+    >>> parse_function_call_and_arguments(\"foo\", 'foo(\"%s\", \"foo\");')\n+    ['foo(', '\"%s\",', ' \"foo\"', ')']\n+    >>> parse_function_call_and_arguments(\"foo\", 'foo(\"%s\", \"foo\");')\n+    ['foo(', '\"%s\",', ' \"foo\"', ')']\n+    >>> parse_function_call_and_arguments(\"foo\", 'foo(\"%s %s\", \"foo\", \"bar\");')\n+    ['foo(', '\"%s %s\",', ' \"foo\",', ' \"bar\"', ')']\n+    >>> parse_function_call_and_arguments(\"fooprintf\", 'fooprintf(\"%050d\", i);')\n+    ['fooprintf(', '\"%050d\",', ' i', ')']\n+    >>> parse_function_call_and_arguments(\"foo\", 'foo(bar(foobar(barfoo(\"foo\"))), foobar); barfoo')\n+    ['foo(', 'bar(foobar(barfoo(\"foo\"))),', ' foobar', ')']\n+    >>> parse_function_call_and_arguments(\"foo\", \"foo()\")\n+    ['foo(', '', ')']\n+    >>> parse_function_call_and_arguments(\"foo\", \"foo(123)\")\n+    ['foo(', '123', ')']\n+    >>> parse_function_call_and_arguments(\"foo\", 'foo(\"foo\")')\n+    ['foo(', '\"foo\"', ')']\n+    \"\"\"\n+    assert(type(function_name) is str and type(function_call) is str and function_name)\n+    remaining = normalize(escape(function_call))\n+    expected_function_call = \"{}(\".format(function_name)\n+    assert(remaining.startswith(expected_function_call))\n+    parts = [expected_function_call]\n+    remaining = remaining[len(expected_function_call):]\n+    open_parentheses = 1\n+    in_string = False\n+    parts.append(\"\")\n+    for char in remaining:\n+        parts.append(parts.pop() + char)\n+        if char == \"\\\"\":\n+            in_string = not in_string\n+            continue\n+        if in_string:\n+            continue\n+        if char == \"(\":\n+            open_parentheses += 1\n+            continue\n+        if char == \")\":\n+            open_parentheses -= 1\n+        if open_parentheses > 1:\n+            continue\n+        if open_parentheses == 0:\n+            parts.append(parts.pop()[:-1])\n+            parts.append(char)\n+            break\n+        if char == \",\":\n+            parts.append(\"\")\n+    return parts\n+\n+\n+def parse_string_content(argument):\n+    \"\"\"Return the text within quotes in string argument.\n+\n+    >>> parse_string_content('1 \"foo %d bar\" 2')\n+    'foo %d bar'\n+    >>> parse_string_content('1 foobar 2')\n+    ''\n+    >>> parse_string_content('1 \"bar\" 2')\n+    'bar'\n+    >>> parse_string_content('1 \"foo\" 2 \"bar\" 3')\n+    'foobar'\n+    >>> parse_string_content('1 \"foo\" 2 \" \" \"bar\" 3')\n+    'foo bar'\n+    >>> parse_string_content('\"\"')\n+    ''\n+    >>> parse_string_content('')\n+    ''\n+    >>> parse_string_content('1 2 3')\n+    ''\n+    \"\"\"\n+    assert(type(argument) is str)\n+    string_content = \"\"\n+    in_string = False\n+    for char in normalize(escape(argument)):\n+        if char == \"\\\"\":\n+            in_string = not in_string\n+        elif in_string:\n+            string_content += char\n+    return string_content\n+\n+\n+def count_format_specifiers(format_string):\n+    \"\"\"Return the number of format specifiers in string format_string.\n+\n+    >>> count_format_specifiers(\"foo bar foo\")\n+    0\n+    >>> count_format_specifiers(\"foo %d bar foo\")\n+    1\n+    >>> count_format_specifiers(\"foo %d bar %i foo\")\n+    2\n+    >>> count_format_specifiers(\"foo %d bar %i foo %% foo\")\n+    2\n+    >>> count_format_specifiers(\"foo %d bar %i foo %% foo %d foo\")\n+    3\n+    >>> count_format_specifiers(\"foo %d bar %i foo %% foo %*d foo\")\n+    4\n+    \"\"\"\n+    assert(type(format_string) is str)\n+    n = 0\n+    in_specifier = False\n+    for i, char in enumerate(format_string):\n+        if format_string[i - 1:i + 1] == \"%%\" or format_string[i:i + 2] == \"%%\":\n+            pass\n+        elif char == \"%\":\n+            in_specifier = True\n+            n += 1\n+        elif char in \"aAcdeEfFgGinopsuxX\":\n+            in_specifier = False\n+        elif in_specifier and char == \"*\":\n+            n += 1\n+    return n\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser(description=\"This program checks that the number of arguments passed \"\n+                                     \"to a variadic format string function matches the number of format \"\n+                                     \"specifiers in the format string.\")\n+    parser.add_argument(\"--skip-arguments\", type=int, help=\"number of arguments before the format string \"\n+                        \"argument (e.g. 1 in the case of fprintf)\", default=0)\n+    parser.add_argument(\"function_name\", help=\"function name (e.g. fprintf)\", default=None)\n+    parser.add_argument(\"file\", type=argparse.FileType(\"r\", encoding=\"utf-8\"), nargs=\"*\", help=\"C++ source code file (e.g. foo.cpp)\")\n+    args = parser.parse_args()\n+\n+    exit_code = 0\n+    for f in args.file:\n+        for function_call_str in parse_function_calls(args.function_name, f.read()):\n+            parts = parse_function_call_and_arguments(args.function_name, function_call_str)\n+            relevant_function_call_str = unescape(\"\".join(parts))[:512]\n+            if (f.name, relevant_function_call_str) in FALSE_POSITIVES:\n+                continue\n+            if len(parts) < 3 + args.skip_arguments:\n+                exit_code = 1\n+                print(\"{}: Could not parse function call string \\\"{}(...)\\\": {}\".format(f.name, args.function_name, relevant_function_call_str))\n+                continue\n+            argument_count = len(parts) - 3 - args.skip_arguments\n+            format_str = parse_string_content(parts[1 + args.skip_arguments])\n+            format_specifier_count = count_format_specifiers(format_str)\n+            if format_specifier_count != argument_count:\n+                exit_code = 1\n+                print(\"{}: Expected {} argument(s) after format string but found {} argument(s): {}\".format(f.name, format_specifier_count, argument_count, relevant_function_call_str))\n+                continue\n+    sys.exit(exit_code)\n+\n+\n+if __name__ == \"__main__\":\n+    main()"
      },
      {
        "sha": "c4041d4b3de0959b6ee5efa7ca3fad1c70d0bdef",
        "filename": "test/lint/lint-format-strings.sh",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e455694901a887e0feef69bd63e3aa122ea44b/test/lint/lint-format-strings.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e455694901a887e0feef69bd63e3aa122ea44b/test/lint/lint-format-strings.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.sh?ref=a3e455694901a887e0feef69bd63e3aa122ea44b",
        "patch": "@@ -0,0 +1,40 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Lint format strings: This program checks that the number of arguments passed\n+# to a variadic format string function matches the number of format specifiers\n+# in the format string.\n+\n+export LC_ALL=C\n+\n+FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS=(\n+    FatalError,0\n+    fprintf,1\n+    LogConnectFailure,1\n+    LogPrint,1\n+    LogPrintf,0\n+    printf,0\n+    snprintf,2\n+    sprintf,1\n+    strprintf,0\n+    vfprintf,1\n+    vprintf,1\n+    vsnprintf,1\n+    vsprintf,1\n+)\n+\n+EXIT_CODE=0\n+if ! python3 -m doctest test/lint/lint-format-strings.py; then\n+    EXIT_CODE=1\n+fi\n+for S in \"${FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS[@]}\"; do\n+    IFS=\",\" read -r FUNCTION_NAME SKIP_ARGUMENTS <<< \"${S}\"\n+    mapfile -t MATCHING_FILES < <(git grep --full-name -l \"${FUNCTION_NAME}\" -- \"*.c\" \"*.cpp\" \"*.h\" | sort | grep -vE \"^src/(leveldb|secp256k1|tinyformat|univalue)\")\n+    if ! test/lint/lint-format-strings.py --skip-arguments \"${SKIP_ARGUMENTS}\" \"${FUNCTION_NAME}\" \"${MATCHING_FILES[@]}\"; then\n+        EXIT_CODE=1\n+    fi\n+done\n+exit ${EXIT_CODE}"
      }
    ]
  },
  {
    "sha": "bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2Q0YjBmNWNkZGUyYTFiNTYyYTYxMmM3OGVjMWVmMWZlNDdkM2Rk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-07T12:57:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-07T12:57:54Z"
      },
      "message": "Add linting of WalletLogPrintf(...) format strings",
      "tree": {
        "sha": "e2e417d5e2294ba0ab2db097b7e955e5a2ccf01f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2e417d5e2294ba0ab2db097b7e955e5a2ccf01f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3e455694901a887e0feef69bd63e3aa122ea44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e455694901a887e0feef69bd63e3aa122ea44b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3e455694901a887e0feef69bd63e3aa122ea44b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c07dfe317b5f11fe86ceb9eff734c23e4c4dd780",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd",
        "patch": "@@ -18,6 +18,8 @@\n     (\"src/netbase.cpp\", \"LogConnectFailure(bool manual_connection, const char* fmt, const Args&... args)\"),\n     (\"src/util.cpp\", \"strprintf(_(COPYRIGHT_HOLDERS), _(COPYRIGHT_HOLDERS_SUBSTITUTION))\"),\n     (\"src/util.cpp\", \"strprintf(COPYRIGHT_HOLDERS, COPYRIGHT_HOLDERS_SUBSTITUTION)\"),\n+    (\"src/wallet/wallet.h\",  \"WalletLogPrintf(std::string fmt, Params... parameters)\"),\n+    (\"src/wallet/wallet.h\", \"LogPrintf((\\\"%s \\\" + fmt).c_str(), GetDisplayName(), parameters...)\"),\n ]\n \n "
      },
      {
        "sha": "17f846d29b57589b2b307918ddfe2d080dda79be",
        "filename": "test/lint/lint-format-strings.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd/test/lint/lint-format-strings.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd/test/lint/lint-format-strings.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.sh?ref=bcd4b0f5cdde2a1b562a612c78ec1ef1fe47d3dd",
        "patch": "@@ -24,6 +24,7 @@ FUNCTION_NAMES_AND_NUMBER_OF_LEADING_ARGUMENTS=(\n     vprintf,1\n     vsnprintf,1\n     vsprintf,1\n+    WalletLogPrintf,0\n )\n \n EXIT_CODE=0"
      }
    ]
  }
]