achow101,2019-10-26 05:17:46,The final diff is very similar to #16341 just with some things dropped as they were deemed unnecessary.,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-546570620,546570620,
Sjors,2019-10-26 08:35:58,"For comparison, my last [ACK](https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-546274939) on the original was for c37be15. That code was identical to @ryanofsky's [branch](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) at  299296e51f6ea0e416aa84d7fc139195be96a58d, just using a different set of commits to get there.   This PR rebases that on master @25d7e2e78137d07eb612c44d19b0d4",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-546582908,546582908,
DrahtBot,2019-10-26 11:55:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17954](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17954.html) (wallet: Remove calls to Chain::Lock methods",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-546596120,546596120,
ryanofsky,2019-10-29 18:39:58,"Suggestion: there's a cluster of fairly trivial refactoring commits in this PR that I think could be pulled out into a separate PR and merged pretty quickly. Doing this would reduce the number of commits here by almost half:\n\n- [ ] b318219c51e316cfb75639f0820cc1b8017bfdfd MOVEONLY: Reorder LegacyScriptPubKeyMan methods (4/36)\n- [ ] 8c7eac4de3e94adcf3ec8a0358c410a198b8b844 Refactor: Declare L",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-547570983,547570983,
achow101,2019-10-29 19:03:56,@ryanofsky Done as #17304 ,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-547581348,547581348,
MarcoFalke,2019-10-29 20:15:09,">  fanquake added this to Blockers in High-priority for review 5 hours ago \n\nWhy? I thought that high-prio could only be used once per week per contributor.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-547609311,547609311,
fanquake,2019-10-29 20:24:32,"Achow requested it via IRC. He didn't have anything in high-prio.\n\nOn Tue, 29 Oct 2019 at 16:15, MarcoFalke <notifications@github.com> wrote:\n\n> fanquake added this to Blockers in High-priority for review 5 hours ago\n>\n> Why?\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/p",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-547613017,547613017,
MarcoFalke,2019-10-30 00:36:21,"https://github.com/bitcoin/bitcoin/pull/17260#event-2751955233 was in for this week, but fair enough",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-547688818,547688818,
ryanofsky,2019-11-04 16:51:41,"In case its useful, rebased branch [`pr/keyman`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) 9e776722b902d8f6d095d06053b12746065baa46 -> 6ff0b88d5a98465eb79a02ceb7a46afb31d43708 ([`pr/keyman.9`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman.9) -> [`pr/keyman.10`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman.10)) after #17300 and #17304",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-549445203,549445203,
ryanofsky,2019-11-04 17:59:48,"Updated branch [`pr/keyman`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) 6ff0b88d5a98465eb79a02ceb7a46afb31d43708 -> 72df6f1050d27a13435fab77f20c1a0e08fdbf51 ([`pr/keyman.10`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman.10) -> [`pr/keyman.11`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/keyman.10..pr/k",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-549473896,549473896,
achow101,2019-11-04 18:31:06,Rebased,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-549486714,549486714,
ryanofsky,2019-11-04 18:33:22,"Now that most of code movement is done, to make more progress on this, I'd say the following individual commits are complicated enough to be their own PRs which could all be reviewed and merged in parallel:\n\n- [ ] b5f456eb91e687ed39bc38e5b9b4e5aca0434515 Always try to sign for all pubkeys in multisig (2/20)\n- [ ] a1297615cce13bba3c16412418e0522e3f7f9eff Store p2sh scripts in AddAndGetDestina",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-549487627,549487627,
achow101,2019-11-04 23:46:50,"""Refactor: Move encryption code between KeyMan and Wallet"" was split into #17369\n\n""Refactor: Require scriptPubKey to get wallet SigningProvider"" was split into #17371 \n\nThe Keypool commits were split into #17373\n\n""IsMine: Set state to WATCH_ONLY if we can get the pubkey"" was split into #17374\n\nI had some issues with making ""Refactor: Allow LegacyScriptPubKeyMan to be null"" standalo",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-549598810,549598810,
ryanofsky,2019-11-07 13:27:50,"Maybe say at the top of the PR description that this builds on #17369, #17371, #17373, and those PRs should be reviewed first to avoid misplaced review comments here.\n\nCan also link to the descriptor wallet project url which lists all PRs https://github.com/bitcoin/bitcoin/projects/12",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-551078486,551078486,
Sjors,2019-11-27 13:35:01,"For those interested in helping out, please review #17369, #17537 and #17261.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-559089495,559089495,
ryanofsky,2019-11-27 13:50:05,"> For those interested in helping out, please review #17369, #17537 and #17261.\n\nWould add #17373. You can also check https://github.com/bitcoin/bitcoin/projects/12 for the latest list of descriptor wallet pull requests.\n",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-559095239,559095239,
instagibbs,2020-01-03 21:29:30,"utACK https://github.com/bitcoin/bitcoin/pull/17261/commits/db4a741d30a44ebd975c905cef0f9578c816e8f2\n\nupdates are as requested",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-570703818,570703818,
Sjors,2020-01-04 06:24:47,"85901a994ea00a6fa9af44eeaed418b968829f26 `Refactor: Allow LegacyScriptPubKeyMan to be null` breaks `sethdseed` for blank wallets, because of the `EnsureLegacyScriptPubKeyMan` check. None of the tests catch this.\n\nI'm also seeing `""keypoololdest"": 1578118989` (instead of `0`) for blank wallets, not when created, but after a restart. That may be a pre-existing issue.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-570761068,570761068,
instagibbs,2020-01-04 19:06:24,"> I'm also seeing ""keypoololdest"": 1578118989 (instead of 0) for blank wallets, not when created, but after a restart. That may be a pre-existing issue.\n\nFrom my reading of the code that's what it's ""supposed"" to do when the keypool is empty on master; it will just use current clock time. Help should probably detail that.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-570810888,570810888,
kallewoof,2020-01-05 00:34:34,"@instagibbs \n> From my reading of the code that's what it's ""supposed"" to do when the keypool is empty on master; it will just use current clock time. Help should probably detail that.\n\nI think the problem here is that it is `0` before restart, not that it uses current clock time.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-570832827,570832827,
kallewoof,2020-01-05 01:18:00,"Tested ACK db4a741d30a44ebd975c905cef0f9578c816e8f2\n\nTested on top of signet patch. Received and sent funds. All seems to work a-OK. (Did not test GUI.)",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-570834864,570834864,
achow101,2020-01-06 19:07:11,"Fixed the sethdseed problem.\n\nEdit: I changed the fix so that it also has the `import*` RPCs work with blank wallets too.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-571268922,571268922,
Sjors,2020-01-07 07:29:04,"Code review re-ACK b5afe999206ee6982fd555b490fae6dd50a1c0c3\n\nI assume we don't want to  add a `LegacyScriptPubKeyMan` to a (future) descriptor based wallet. That's working correctly I believe, because  `EnsureLegacyScriptPubKeyMan(*wallet, true)` calls `SetupLegacyScriptPubKeyMan` which fails if any other `ScriptPubKeyMan` types exist. But I would prefer if `EnsureLegacyScriptPubKeyMan` checke",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-571469973,571469973,
kallewoof,2020-01-07 08:27:01,Is b5afe999206ee6982fd555b490fae6dd50a1c0c3 not meant to be squashed into d8a3c7830e1292c8b7d52b5a02fdd1d2459de3ef?,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-571486095,571486095,
instagibbs,2020-01-07 15:18:20,"> EnsureLegacyScriptPubKeyMan(*wallet, true) calls SetupLegacyScriptPubKeyMan which fails if any other ScriptPubKeyMan types exist\n\nIt'll hit asserts, right? Yeah I'd rather things be explicitly checked and handled instead if possible.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-571630835,571630835,
achow101,2020-01-07 17:11:28,"> I assume we don't want to add a `LegacyScriptPubKeyMan` to a (future) descriptor based wallet. That's working correctly I believe, because `EnsureLegacyScriptPubKeyMan(*wallet, true)` calls `SetupLegacyScriptPubKeyMan` which fails if any other `ScriptPubKeyMan` types exist. But I would prefer if `EnsureLegacyScriptPubKeyMan` checked this directly.\n\nWhat do you mean by ""checked this directly""",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-571681499,571681499,
Sjors,2020-01-08 06:26:10,"> The descriptor wallet PR checks the wallet flag and will return early if the descriptor wallet flag is set. No asserts.\n\nIt's good that `EnsureLegacyScriptPubKeyMan` never gets called for a descriptor wallet, but it would be better if it explicitly checked that there is no other `ScriptPubKeyMan` out there. Currently it only checks that there's no `LegacyScriptPubKeyMan` out there, but then ",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-571909471,571909471,
achow101,2020-01-10 17:34:02,"> > The descriptor wallet PR checks the wallet flag and will return early if the descriptor wallet flag is set. No asserts.\n> \n> It's good that `EnsureLegacyScriptPubKeyMan` never gets called for a descriptor wallet, but it would be better if it explicitly checked that there is no other `ScriptPubKeyMan` out there. Currently it only checks that there's no `LegacyScriptPubKeyMan` out there, but",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-573131579,573131579,
Sjors,2020-01-15 02:20:22,"Instead of:\n```cpp\n LegacyScriptPubKeyMan* spk_man = nullptr;\n if (also_create) {\n     spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n } else {\n     spk_man = wallet.GetLegacyScriptPubKeyMan();\n }\n```\n\nThis seems more clear:\n```cpp\n LegacyScriptPubKeyMan* spk_man = wallet.GetLegacyScriptPubKeyMan();\n if (!spk_man && also_create) {\n     spk_man = wallet.GetOrCreate",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-574464622,574464622,
achow101,2020-01-15 17:40:10,"Rebased.\n\n@Sjors Done. I changed your suggestion for `SetupLegacyScriptPubKeyMan` to check whether any of the `*spk_managers` maps has a `ScriptPubKeyMan`.",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-574771817,574771817,
instagibbs,2020-01-15 23:49:31,utACK https://github.com/bitcoin/bitcoin/pull/17261/commits/bbf50a006410bd3e56908983664c5a1a0b475c2c,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-574911385,574911385,
Sjors,2020-01-16 12:38:21,Code review ACK bbf50a006410bd3e56908983664c5a1a0b475c2c,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-575133163,575133163,
achow101,2020-01-17 02:10:50,Rebased,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-575432835,575432835,
Sjors,2020-01-17 09:12:21,re-ACK c985aea9be828c0a49eb81f5a5d54b42147ef20c; just a rebase with merged #17843 content dropped.,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-575540707,575540707,
Sjors,2020-01-19 11:23:14,re-utACK 126d6945e38cdc47b1227cdacfaa456714efcdf5,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-575994760,575994760,
instagibbs,2020-01-23 22:15:36,re-utACK https://github.com/bitcoin/bitcoin/pull/17261/commits/3f373659d732a5b1e5fdc692a45b2b8179f66bec,https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-577903160,577903160,
Sjors,2020-01-24 08:38:23,re-utACK 3f373659d732a5b1e5fdc692a45b2b8179f66bec (it still compiles on macOS after https://github.com/bitcoin/bitcoin/pull/17261#discussion_r370377070),https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-578040227,578040227,
meshcollider,2020-01-30 04:20:22,"Tested re-ACK 3f373659d732a5b1e5fdc692a45b2b8179f66bec\n\nI think this is ready to go in",https://github.com/bitcoin/bitcoin/pull/17261#issuecomment-580076232,580076232,
ryanofsky,2019-11-04 18:50:09,"In commit ""Locking: Lock cs_KeyStore instead of cs_main in legacy keyman"" (90287119f4bab55e3ffb8e5b9139d19f11eebd61):\n\nLooks like comment this line was unintentionally deleted (mistake during rebase)\n",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r342210748,342210748,src/wallet/scriptpubkeyman.h
achow101,2019-11-04 19:19:46,Added it back in.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r342224444,342224444,src/wallet/scriptpubkeyman.h
promag,2019-11-07 12:40:18,"3499674136167f662e5b0ef0b599c02f5a959558\n\nYou gave ACK in #17237 so I wonder why is this here?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r343629024,343629024,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-11-07 13:21:13,"> [3499674](https://github.com/bitcoin/bitcoin/commit/3499674136167f662e5b0ef0b599c02f5a959558)\n> \n> You gave ACK in #17237 so I wonder why is this here?\n\nBetter to ask this question in #17373 where this commit was moved than this PR. Specifically [17373/commits/35c37b5](https://github.com/bitcoin/bitcoin/pull/17373/commits/35c37b59c5bb918c15aca3092b6506ef3974e50c)\n\nProbably this code ",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r343645137,343645137,src/wallet/scriptpubkeyman.cpp
promag,2019-11-07 14:06:37,"Thanks for pointing to the right PR, I think I'll just wait for this get merged.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r343667539,343667539,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-11-07 14:14:50,"It would be nice to get more review on #17373, even if this question won't be raised. The changes there are confusing to me, and might be more straightforward to you. (The changes there are minor and seem safe but I don't understand why they are made.)",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r343671731,343671731,src/wallet/scriptpubkeyman.cpp
promag,2019-11-07 14:29:44,"You mean #17373, not #17237 right? If so I'll review the first.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r343679653,343679653,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-12-19 20:21:09,little confused; the commit says `cs_main` and I see `cs_wallet` being deleted. Fix commit message?,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r360091041,360091041,src/qt/test/wallettests.cpp
instagibbs,2019-12-30 17:03:49,"`s/can/is sufficient/` since the wallet itself may actually be unable to sign(watchonly)\n\n",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362041319,362041319,src/wallet/scriptpubkeyman.h
instagibbs,2019-12-30 17:12:03,"Let's make a constant like `CWalletTx::ABANDON_HASH`, or rename that one since it's the same constant...",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362043257,362043257,src/wallet/scriptpubkeyman.cpp
instagibbs,2019-12-30 17:20:52,For keypool checks do we want to assert that these are only being used for LegacySPKM?,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362045611,362045611,src/wallet/wallet.cpp
instagibbs,2019-12-30 17:35:02,"could make this function roughly half the code by making a temporary reference `spk_managers` which points to internal(or not) based on the argument, which avoids code copying/pasting.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362049084,362049084,src/wallet/wallet.cpp
instagibbs,2019-12-30 17:40:34,s/De-duplicates and returns all ScriptPubKeyMans/Returns all unique ScriptPubKeyMans/,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362050426,362050426,src/wallet/wallet.h
instagibbs,2019-12-30 18:12:41,comment is now out of date,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362057697,362057697,src/wallet/rpcwallet.cpp
achow101,2019-12-30 18:59:39,"Is that not stated by the ""combined with sigdata"" part?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362068459,362068459,src/wallet/scriptpubkeyman.h
achow101,2019-12-30 19:44:18,"No, they still apply to other SPKMs.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362078899,362078899,src/wallet/wallet.cpp
achow101,2019-12-30 19:56:03,Fixed.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362081526,362081526,src/qt/test/wallettests.cpp
achow101,2019-12-30 19:57:01,"Since this value of one is used in a couple of other places,  I've added a commit refactor those uses and adding a constant `UINT256_ONE` to uint256.h. So we use that constant and so do the other places that use that value of one.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362081740,362081740,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-30 19:57:11,Done,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362081774,362081774,src/wallet/wallet.cpp
achow101,2019-12-30 19:57:18,Done,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362081802,362081802,src/wallet/wallet.h
achow101,2019-12-30 19:57:59,Updated,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362081945,362081945,src/wallet/rpcwallet.cpp
instagibbs,2020-01-03 21:29:52,If I think of better wording I'll let you know.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r362967421,362967421,src/wallet/scriptpubkeyman.h
kallewoof,2020-01-04 07:35:47,"In commit a92b77e82f4905e8a0568b3de6b53345356dbf58 (""List output types in an array in order to be iterated over""):\n\nNit: leave newline at end of file (or am I misreading this diff?)",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363021586,363021586,src/outputtype.h
kallewoof,2020-01-04 07:40:42,"In commit 50145c8ad53c604713689ae587badbb0a473471a (""Store p2sh scripts in AddAndGetDestinationForScript""):\n\nWhy add brackets?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363021754,363021754,src/outputtype.cpp
kallewoof,2020-01-04 07:43:34,"In commit 50145c8ad53c604713689ae587badbb0a473471a (""Store p2sh scripts in AddAndGetDestinationForScript""):\n\nI think this could use a comment explaining why the `sh` dest is added to `keystore` when `witprog` is not solvable.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363021900,363021900,src/outputtype.cpp
Sjors,2020-01-04 10:22:07,"This is fine while there's only one (legacy) scriptPubKeyManager, but with descriptor wallets this would cause the seed to be reset three times. In the current descriptor wallet PR there's a separate code branch for descriptor wallets: https://github.com/bitcoin/bitcoin/pull/16528/files#diff-b2bb174788c7409b671c46ccc86034bdR580\n\nInstead of a loop, maybe just call the `LegacyScriptPubkeyMan`?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363027478,363027478,src/wallet/wallet.cpp
kallewoof,2020-01-04 22:31:53,Why not simply make this `extern uint256 UINT256_ONE;` instead of a function? ,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363058528,363058528,src/uint256.h
kallewoof,2020-01-04 23:06:39,This looks like debug leftovers.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363059635,363059635,src/wallet/rpcwallet.cpp
kallewoof,2020-01-04 23:22:52,Call it `m_spk_man` and avoid `a(a)` â†’ `m_spk_man(spk_man)` ?,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363060157,363060157,src/wallet/scriptpubkeyman.h
achow101,2020-01-06 18:42:19,"There's an extra newline that's being removed.\n\nTechnically an unnecessary change, but oh well.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363425800,363425800,src/outputtype.h
achow101,2020-01-06 18:52:44,Clang didn't like it. Something about static initialization order resulting in a potential uninitialized object access. There's a failed travis build you can check for the error.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363430301,363430301,src/uint256.h
achow101,2020-01-06 19:06:28,Done,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363436115,363436115,src/wallet/wallet.cpp
achow101,2020-01-06 19:06:42,They were needed in a previous iteration. Removed.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363436223,363436223,src/outputtype.cpp
achow101,2020-01-06 19:06:48,Done,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363436265,363436265,src/outputtype.cpp
achow101,2020-01-06 19:06:52,Removed,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363436303,363436303,src/wallet/rpcwallet.cpp
achow101,2020-01-06 19:06:57,Done,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363436342,363436342,src/wallet/scriptpubkeyman.h
kallewoof,2020-01-07 01:50:49,"Oh, I misread then. +1 removing extra NL.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363561777,363561777,src/outputtype.h
kallewoof,2020-01-07 01:52:17,Weird. :/ I've seen that once before too. Sounds like a compiler bug tbh.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363562064,363562064,src/uint256.h
instagibbs,2020-01-07 15:08:16,Are we not going to replace the seed for descriptor wallets?,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363792482,363792482,src/wallet/wallet.cpp
achow101,2020-01-07 17:05:38,"No, descriptor wallets have a different way of doing it.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363851907,363851907,src/wallet/wallet.cpp
instagibbs,2020-01-15 20:30:17,"What's the general usage for this new boolean? I see it's set to true for most importing, but not for `addmultisigaddress` for instance. A guiding comment on usage would be helpful.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367091529,367091529,src/wallet/rpcwallet.cpp
instagibbs,2020-01-15 20:36:43,"micro-nit: wsh is a bit of a minsnomer, it's `sh_w`, or something",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367094287,367094287,src/outputtype.cpp
instagibbs,2020-01-15 20:39:10,any way to actually use the constant rather than referring to it and hoping the value never changes?,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367095280,367095280,src/wallet/scriptpubkeyman.cpp
achow101,2020-01-15 23:44:19,"Added a comment.\n\nIt's to be used for RPCs that make a blank wallet no longer blank. `addmultisigaddress` wasn't doing this before, although I suppose the expected behavior of it with a blank wallet isn't really known (i.e. what do we want it to do?).",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367165331,367165331,src/wallet/rpcwallet.cpp
achow101,2020-01-15 23:44:28,Done,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367165372,367165372,src/outputtype.cpp
achow101,2020-01-15 23:45:13,"Yes. the proper header is being imported now, so no need for this hack. Changed it.\n\nAlso, the value should never change because its persisted to wallet files and changing it would break backwards compatibility.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367165559,367165559,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-01-15 23:49:13,"Hm, yeah it would be a weird non-blank wallet. I'm fine as-is for now.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367166645,367166645,src/wallet/rpcwallet.cpp
meshcollider,2020-01-17 09:23:31,"Comment doesn't make sense referring to ""all of these are empty"" now.\n\nEDIT: it makes slightly more sense after later commit, but it would be better to explicitly say ""all the SPK managers are empty""",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367837892,367837892,src/wallet/wallet.cpp
meshcollider,2020-01-17 09:29:52,"I don't understand the purpose of this change, more explanation pls?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367840645,367840645,src/wallet/scriptpubkeyman.cpp
meshcollider,2020-01-17 10:02:52,This assert seems a little unnecessary considering the if-statement above,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367855853,367855853,src/wallet/wallet.cpp
meshcollider,2020-01-17 10:10:27,"In what case would these asserts ever be hit, directly following the setup code? Is there a scenario you can think of?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367859220,367859220,src/wallet/wallet.cpp
meshcollider,2020-01-17 10:15:17,"Why only check the ""active"" SPKMans here?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367861313,367861313,src/wallet/wallet.cpp
achow101,2020-01-17 13:48:51,Edited the comment.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367943118,367943118,src/wallet/wallet.cpp
achow101,2020-01-17 13:49:09,"On further examination, that entire commit doesn't make sense, so I've dropped it.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367943252,367943252,src/wallet/scriptpubkeyman.cpp
achow101,2020-01-17 13:49:16,Removed,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367943290,367943290,src/wallet/wallet.cpp
achow101,2020-01-17 13:49:29,I don't think so. I've removed these asserts.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367943387,367943387,src/wallet/wallet.cpp
achow101,2020-01-17 13:49:36,Changed to check all.,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r367943443,367943443,src/wallet/wallet.cpp
achow101,2020-01-17 17:25:29,"I think a better solution would be to have this return a bool, but that's an improvement we can make in the future as it's really a belt-and-suspenders check. And also have this check sameness check somewhere.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r368050039,368050039,src/wallet/wallet.cpp
instagibbs,2020-01-17 17:48:46,"not sure this was needed, but it's a safe change",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r368059107,368059107,src/wallet/wallet.cpp
laanwj,2020-01-20 19:03:02,"Doesn't defining the value of non-primitive constants in the header file potentially cause linker issues in C++ (or duplication, as this literal data will be included in multiple files)?. I think it's better to only declare the variable here then initialize the value in the `cpp`.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r368691383,368691383,src/outputtype.h
achow101,2020-01-20 22:01:51,"I don't think this would cause any issues since it's const. I also haven't seen any linker warnings or errors about this. I think there would only be some duplication, but isn't that the same for any constant global variable that is defined in a header?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r368739441,368739441,src/outputtype.h
kallewoof,2020-01-21 00:28:25,"If you are fine trusting the word of [Microsoft](https://docs.microsoft.com/en-us/cpp/cpp/const-cpp?view=vs-2019),\n\n> In C, constant values default to external linkage, so they can appear only in source files. In C++, constant values default to internal linkage, which allows them to appear in header files.\n\nAnother source said C++ does not normally create storage for consts, which I assume",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r368766440,368766440,src/outputtype.h
sipa,2020-01-23 19:39:20,"If you replace the {...} initializer with a function call, and then have the constant in multiple translation units, the function will get called once for each.",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r370316391,370316391,src/outputtype.h
achow101,2020-01-23 21:58:46,I moved the initialization to the cpp file,https://github.com/bitcoin/bitcoin/pull/17261#discussion_r370377070,370377070,src/outputtype.h
ryanofsky,2020-02-05 18:08:25,"In commit ""HD Split: Avoid redundant upgrades"" (415afcccd3e5583defdb76e3a280f48e98983301):\n\nThis seems buggy and the change looks like it has no effect. Is this supposed to say `&& hdChain.nVersion < CHDChain::VERSION_HD_CHAIN_SPLIT`?",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r375419985,375419985,src/wallet/scriptpubkeyman.cpp
ryanofsky,2020-02-05 18:21:00,"re: https://github.com/bitcoin/bitcoin/pull/17261#discussion_r363792482\n\n> No, descriptor wallets have a different way of doing it.\n\nIn commit ""Box the wallet: Add multiple keyman maps and loops"" (c729afd0a3b74a3943e4c359270beaf3e6ff8a7b):\n\nIt seems bad to do nothing at all and keep using unencrypted seeds for non-legacy wallets, and the comment here doesn't here doesn't explain any le",https://github.com/bitcoin/bitcoin/pull/17261#discussion_r375426516,375426516,src/wallet/wallet.cpp
