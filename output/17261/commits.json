[
  {
    "sha": "f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWJlNDc5Njk0ZDRkYmFmNTllZWY1NjJkODBmYmVhY2IzYmI3ZGMx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-01-07T13:47:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:34:28Z"
      },
      "message": "wallet: Improve CWallet:MarkDestinationsDirty",
      "tree": {
        "sha": "6cfc5eb5d604be934db936c09ef6d495973a821b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cfc5eb5d604be934db936c09ef6d495973a821b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95ca6aeec7b8d9dbf39e3a036a5c238634ce3793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ca6aeec7b8d9dbf39e3a036a5c238634ce3793",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95ca6aeec7b8d9dbf39e3a036a5c238634ce3793"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0e0f06c64cde6402820023076a7ac3b1024815b7",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
        "patch": "@@ -78,6 +78,7 @@ static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bo\n     if (fIsFromMe)\n     {\n         wtx->m_amounts[CWalletTx::DEBIT].Set(ISMINE_SPENDABLE, 1);\n+        wtx->m_is_cache_empty = false;\n     }\n     COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);"
      },
      {
        "sha": "724997a36df693c4695a51af92838308ae51c227",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
        "patch": "@@ -1795,6 +1795,7 @@ CAmount CWalletTx::GetCachableAmount(AmountType type, const isminefilter& filter\n     auto& amount = m_amounts[type];\n     if (recalculate || !amount.m_cached[filter]) {\n         amount.Set(filter, type == DEBIT ? pwallet->GetDebit(*tx, filter) : pwallet->GetCredit(*tx, filter));\n+        m_is_cache_empty = false;\n     }\n     return amount.m_value[filter];\n }\n@@ -1871,6 +1872,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter\n \n     if (allow_cache) {\n         m_amounts[AVAILABLE_CREDIT].Set(filter, nCredit);\n+        m_is_cache_empty = false;\n     }\n \n     return nCredit;\n@@ -3171,10 +3173,9 @@ int64_t CWallet::GetOldestKeyPoolTime()\n void CWallet::MarkDestinationsDirty(const std::set<CTxDestination>& destinations) {\n     for (auto& entry : mapWallet) {\n         CWalletTx& wtx = entry.second;\n-\n+        if (wtx.m_is_cache_empty) continue;\n         for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n             CTxDestination dst;\n-\n             if (ExtractDestination(wtx.tx->vout[i].scriptPubKey, dst) && destinations.count(dst)) {\n                 wtx.MarkDirty();\n                 break;"
      },
      {
        "sha": "6835f33b5242504d02a2f798deebe0eea06c2c2f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
        "patch": "@@ -313,6 +313,13 @@ class CWalletTx\n     enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };\n     CAmount GetCachableAmount(AmountType type, const isminefilter& filter, bool recalculate = false) const;\n     mutable CachableAmount m_amounts[AMOUNTTYPE_ENUM_ELEMENTS];\n+    /**\n+     * This flag is true if all m_amounts caches are empty. This is particularly\n+     * useful in places where MarkDirty is conditionally called and the\n+     * condition can be expensive and thus can be skipped if the flag is true.\n+     * See MarkDestinationsDirty.\n+     */\n+    mutable bool m_is_cache_empty{true};\n     mutable bool fChangeCached;\n     mutable bool fInMempool;\n     mutable CAmount nChangeCached;\n@@ -439,6 +446,7 @@ class CWalletTx\n         m_amounts[IMMATURE_CREDIT].Reset();\n         m_amounts[AVAILABLE_CREDIT].Reset();\n         fChangeCached = false;\n+        m_is_cache_empty = true;\n     }\n \n     void BindWallet(CWallet *pwalletIn)"
      }
    ]
  },
  {
    "sha": "fadc08ad944cad42e805228cdd58e0332f4d7184",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRjMDhhZDk0NGNhZDQyZTgwNTIyOGNkZDU4ZTAzMzJmNGQ3MTg0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:34:28Z"
      },
      "message": "Locking: Lock cs_KeyStore instead of cs_wallet in legacy keyman\n\nThis commit only affects locking behavior and doesn't have other changes.",
      "tree": {
        "sha": "f0b992bca5359762a0cc8b8cc702ee3cb8e7b9cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0b992bca5359762a0cc8b8cc702ee3cb8e7b9cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadc08ad944cad42e805228cdd58e0332f4d7184",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadc08ad944cad42e805228cdd58e0332f4d7184",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadc08ad944cad42e805228cdd58e0332f4d7184",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadc08ad944cad42e805228cdd58e0332f4d7184/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5be479694d4dbaf59eef562d80fbeacb3bb7dc1"
      }
    ],
    "stats": {
      "total": 228,
      "additions": 112,
      "deletions": 116
    },
    "files": [
      {
        "sha": "b500248f78c202c3d6bfb7162c7d3a410f70c9d9",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -145,8 +145,7 @@ void TestGUI(interfaces::Node& node)\n     {\n         auto spk_man = wallet->GetLegacyScriptPubKeyMan();\n         auto locked_chain = wallet->chain().lock();\n-        LOCK(wallet->cs_wallet);\n-        AssertLockHeld(spk_man->cs_wallet);\n+        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n         spk_man->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n         wallet->SetLastBlockProcessed(105, ::ChainActive().Tip()->GetBlockHash());"
      },
      {
        "sha": "fd6012e9fe2d44e3e88e35203734820773e1331c",
        "filename": "src/test/util/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/test/util/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/test/util/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -27,8 +27,7 @@ std::string getnewaddress(CWallet& w)\n void importaddress(CWallet& wallet, const std::string& address)\n {\n     auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n-    LOCK(wallet.cs_wallet);\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n     const auto dest = DecodeDestination(address);\n     assert(IsValidDestination(dest));\n     const auto script = GetScriptForDestination(dest);"
      },
      {
        "sha": "782cf226aecf7418376c142630f6c1e35600e34a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -700,7 +700,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*wallet);\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -751,8 +751,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*wallet);\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-    AssertLockHeld(spk_man.cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n     EnsureWalletIsUnlocked(pwallet);\n "
      },
      {
        "sha": "1ee0d06867782ba223fb8ccd4ececd213424519d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -983,7 +983,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet);\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n     std::string label;\n     if (!request.params[2].isNull())\n@@ -4014,7 +4014,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n+    LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n     // Do not do anything to non-HD wallets\n     if (!pwallet->CanSupportFeature(FEATURE_HD)) {"
      },
      {
        "sha": "32bd2bc204f460fc0bc9f2aa7d59b6d14d501d21",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -13,6 +13,7 @@\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n+    LOCK(cs_KeyStore);\n     error.clear();\n \n     // Generate a new key that is added to wallet\n@@ -238,7 +239,6 @@ bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key\n \n bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    AssertLockHeld(cs_wallet);\n     LOCK(cs_KeyStore);\n     encrypted_batch = batch;\n     if (!mapCryptedKeys.empty()) {\n@@ -269,6 +269,7 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n \n bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n+    LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n         return false;\n     }\n@@ -282,7 +283,7 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n \n void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     // extract addresses and check if they match with an unused keypool key\n     for (const auto& keyid : GetAffectedKeys(script, *this)) {\n         std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n@@ -299,7 +300,7 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     if (m_storage.IsLocked() || m_storage.IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n         return;\n     }\n@@ -352,7 +353,7 @@ bool LegacyScriptPubKeyMan::IsHDEnabled() const\n \n bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n {\n-    LOCK(cs_wallet);\n+    LOCK(cs_KeyStore);\n     // Check if the keypool has keys\n     bool keypool_has_keys;\n     if (internal && m_storage.CanSupportFeature(FEATURE_HD_SPLIT)) {\n@@ -369,7 +370,7 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     error = \"\";\n     bool hd_upgrade = false;\n     bool split_upgrade = false;\n@@ -410,7 +411,7 @@ bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n \n void LegacyScriptPubKeyMan::RewriteDB()\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     setInternalKeyPool.clear();\n     setExternalKeyPool.clear();\n     m_pool_key_to_index.clear();\n@@ -435,7 +436,7 @@ static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, Walle\n \n int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n {\n-    LOCK(cs_wallet);\n+    LOCK(cs_KeyStore);\n \n     WalletBatch batch(m_storage.GetDatabase());\n \n@@ -453,25 +454,25 @@ int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n \n size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     return nTimeFirstKey;\n }\n \n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n \n     CKeyID key_id = GetKeyForDestination(*this, dest);\n     if (!key_id.IsNull()) {\n@@ -496,7 +497,7 @@ const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& des\n  */\n void LegacyScriptPubKeyMan::UpdateTimeFirstKey(int64_t nCreateTime)\n {\n-    AssertLockHeld(cs_wallet);\n+    AssertLockHeld(cs_KeyStore);\n     if (nCreateTime <= 1) {\n         // Cannot determine birthday information, so set the wallet birthday to\n         // the beginning of time.\n@@ -513,13 +514,14 @@ bool LegacyScriptPubKeyMan::LoadKey(const CKey& key, const CPubKey &pubkey)\n \n bool LegacyScriptPubKeyMan::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n+    LOCK(cs_KeyStore);\n     WalletBatch batch(m_storage.GetDatabase());\n     return LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(batch, secret, pubkey);\n }\n \n bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)\n {\n-    AssertLockHeld(cs_wallet);\n+    AssertLockHeld(cs_KeyStore);\n \n     // Make sure we aren't adding private keys to private key disabled wallets\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n@@ -574,14 +576,14 @@ bool LegacyScriptPubKeyMan::LoadCScript(const CScript& redeemScript)\n \n void LegacyScriptPubKeyMan::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[keyID] = meta;\n }\n \n void LegacyScriptPubKeyMan::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     UpdateTimeFirstKey(meta.nCreateTime);\n     m_script_metadata[script_id] = meta;\n }\n@@ -630,7 +632,7 @@ bool LegacyScriptPubKeyMan::AddCryptedKey(const CPubKey &vchPubKey,\n     if (!AddCryptedKeyInner(vchPubKey, vchCryptedSecret))\n         return false;\n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n         if (encrypted_batch)\n             return encrypted_batch->WriteCryptedKey(vchPubKey,\n                                                         vchCryptedSecret,\n@@ -663,7 +665,6 @@ static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n \n bool LegacyScriptPubKeyMan::RemoveWatchOnly(const CScript &dest)\n {\n-    AssertLockHeld(cs_wallet);\n     {\n         LOCK(cs_KeyStore);\n         setWatchOnly.erase(dest);\n@@ -734,7 +735,7 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n \n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n-    LOCK(cs_wallet);\n+    LOCK(cs_KeyStore);\n     if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n         throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n \n@@ -771,7 +772,7 @@ bool LegacyScriptPubKeyMan::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& inf\n {\n     CKeyMetadata meta;\n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n         auto it = mapKeyMetadata.find(keyID);\n         if (it != mapKeyMetadata.end()) {\n             meta = it->second;\n@@ -821,7 +822,7 @@ CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n-    AssertLockHeld(cs_wallet);\n+    AssertLockHeld(cs_KeyStore);\n     bool fCompressed = m_storage.CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n@@ -913,7 +914,7 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n \n void LegacyScriptPubKeyMan::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n {\n-    AssertLockHeld(cs_wallet);\n+    LOCK(cs_KeyStore);\n     if (keypool.m_pre_split) {\n         set_pre_split_keypool.insert(nIndex);\n     } else if (keypool.fInternal) {\n@@ -935,7 +936,7 @@ void LegacyScriptPubKeyMan::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n bool LegacyScriptPubKeyMan::CanGenerateKeys()\n {\n     // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n-    LOCK(cs_wallet);\n+    LOCK(cs_KeyStore);\n     return IsHDEnabled() || !m_storage.CanSupportFeature(FEATURE_HD);\n }\n \n@@ -962,7 +963,7 @@ CPubKey LegacyScriptPubKeyMan::DeriveNewSeed(const CKey& key)\n     metadata.hd_seed_id = seed.GetID();\n \n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n \n         // mem store the metadata\n         mapKeyMetadata[seed.GetID()] = metadata;\n@@ -977,7 +978,7 @@ CPubKey LegacyScriptPubKeyMan::DeriveNewSeed(const CKey& key)\n \n void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n {\n-    LOCK(cs_wallet);\n+    LOCK(cs_KeyStore);\n     // store the keyid (hash160) together with\n     // the child index counter in the database\n     // as a hdchain object\n@@ -1000,7 +1001,7 @@ bool LegacyScriptPubKeyMan::NewKeyPool()\n         return false;\n     }\n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n         WalletBatch batch(m_storage.GetDatabase());\n \n         for (const int64_t nIndex : setInternalKeyPool) {\n@@ -1034,7 +1035,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n         return false;\n     }\n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n \n         if (m_storage.IsLocked()) return false;\n \n@@ -1076,7 +1077,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n \n void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n {\n-    LOCK(cs_wallet);\n+    LOCK(cs_KeyStore);\n     assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n     int64_t index = ++m_max_keypool_index;\n     if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n@@ -1107,7 +1108,7 @@ void LegacyScriptPubKeyMan::ReturnDestination(int64_t nIndex, bool fInternal, co\n {\n     // Return to key pool\n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n         if (fInternal) {\n             setInternalKeyPool.insert(nIndex);\n         } else if (!set_pre_split_keypool.empty()) {\n@@ -1131,7 +1132,7 @@ bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType typ\n \n     CKeyPool keypool;\n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n         int64_t nIndex;\n         if (!ReserveKeyFromKeyPool(nIndex, keypool, internal) && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             if (m_storage.IsLocked()) return false;\n@@ -1150,7 +1151,7 @@ bool LegacyScriptPubKeyMan::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& key\n     nIndex = -1;\n     keypool.vchPubKey = CPubKey();\n     {\n-        LOCK(cs_wallet);\n+        LOCK(cs_KeyStore);\n \n         bool fReturningInternal = fRequestedInternal;\n         fReturningInternal &= (IsHDEnabled() && m_storage.CanSupportFeature(FEATURE_HD_SPLIT)) || m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n@@ -1210,7 +1211,7 @@ void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n \n void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n {\n-    AssertLockHeld(cs_wallet);\n+    AssertLockHeld(cs_KeyStore);\n     bool internal = setInternalKeyPool.count(keypool_id);\n     if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n     std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);\n@@ -1281,7 +1282,7 @@ bool LegacyScriptPubKeyMan::AddCScriptWithDB(WalletBatch& batch, const CScript&\n \n bool LegacyScriptPubKeyMan::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n {\n-    LOCK(cs_wallet);\n+    LOCK(cs_KeyStore);\n     std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n     mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n     mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n@@ -1397,8 +1398,7 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n // Temporary CWallet accessors and aliases.\n LegacyScriptPubKeyMan::LegacyScriptPubKeyMan(CWallet& wallet)\n     : ScriptPubKeyMan(wallet),\n-      m_wallet(wallet),\n-      cs_wallet(wallet.cs_wallet) {}\n+      m_wallet(wallet) {}\n \n void LegacyScriptPubKeyMan::NotifyWatchonlyChanged(bool fHaveWatchOnly) const { return m_wallet.NotifyWatchonlyChanged(fHaveWatchOnly); }\n void LegacyScriptPubKeyMan::NotifyCanGetAddressesChanged() const { return m_wallet.NotifyCanGetAddressesChanged(); }"
      },
      {
        "sha": "edb147a0b4386c1554dc322968c1fba6f5d87683",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 29,
        "deletions": 30,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -209,15 +209,15 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n \n-    WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n \n     CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n     WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n     WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n \n-    int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n \n     bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n     bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n@@ -231,14 +231,14 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      * of the other AddWatchOnly which accepts a timestamp and sets\n      * nTimeFirstKey more intelligently for more efficient rescans.\n      */\n-    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     bool AddWatchOnlyInMem(const CScript &dest);\n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n@@ -252,12 +252,12 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n-    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n-    int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n     std::map<int64_t, CKeyID> m_index_to_reserved_key;\n@@ -297,7 +297,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void MarkUnusedAddresses(const CScript& script) override;\n \n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n-    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UpgradeKeyMetadata();\n \n     bool IsHDEnabled() const override;\n \n@@ -310,7 +310,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void RewriteDB() override;\n \n     int64_t GetOldestKeyPoolTime() override;\n-    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    size_t KeypoolCountExternalKeys() override;\n     unsigned int GetKeyPoolSize() const override;\n \n     int64_t GetTimeFirstKey() const override;\n@@ -320,27 +320,27 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool CanGetAddresses(bool internal = false) override;\n \n     // Map from Key ID to key metadata.\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_wallet);\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n \n     // Map from Script ID to key metadata (for watch-only keys).\n-    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n \n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey);\n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     //! Adds a CScript to the store\n     bool LoadCScript(const CScript& redeemScript);\n     //! Load metadata (used by LoadWallet)\n-    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n     //! Generate a new key\n-    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     /* Set the HD chain model (chain child index counters) */\n     void SetHDChain(const CHDChain& chain, bool memonly);\n@@ -353,8 +353,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Returns whether there are any watch-only things in the wallet\n     bool HaveWatchOnly() const;\n     //! Remove a watch only script from the keystore\n-    bool RemoveWatchOnly(const CScript &dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool RemoveWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     //! Fetches a pubkey from mapWatchKeys if it exists there\n     bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n@@ -367,14 +367,14 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n     //! Load a keypool entry\n-    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n     bool NewKeyPool();\n-    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n-    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     /* Returns true if the wallet can generate new keys */\n     bool CanGenerateKeys();\n@@ -408,7 +408,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     /**\n      * Marks all keys in the keypool up to and including reserve_key as used.\n      */\n-    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n     std::set<CKeyID> GetKeys() const override;\n@@ -420,7 +420,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void NotifyCanGetAddressesChanged() const;\n     template<typename... Params> void WalletLogPrintf(const std::string& fmt, const Params&... parameters) const;\n     CWallet& m_wallet;\n-    RecursiveMutex& cs_wallet;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "0ed6db47b6bd88610e73e06c961280b4d567190e",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -36,7 +36,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PK compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PK uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n@@ -68,7 +68,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PKH compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n \n         // Keystore does not have key\n@@ -84,7 +84,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PKH uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n \n         // Keystore does not have key\n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2SH\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemScript = GetScriptForDestination(PKHash(pubkeys[0]));\n         scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n@@ -123,7 +123,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // (P2PKH inside) P2SH inside P2SH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript redeemscript = GetScriptForDestination(ScriptHash(redeemscript_inner));\n@@ -140,7 +140,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // (P2PKH inside) P2SH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemscript = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript witnessscript = GetScriptForDestination(ScriptHash(redeemscript));\n@@ -157,7 +157,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WPKH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n         scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessscript));\n@@ -172,7 +172,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // (P2PKH inside) P2WSH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n         CScript witnessscript = GetScriptForDestination(WitnessV0ScriptHash(witnessscript_inner));\n@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WPKH compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n@@ -203,7 +203,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WPKH uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n \n         scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(uncompressedPubkey)));\n@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // scriptPubKey multisig\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         scriptPubKey = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n \n@@ -251,7 +251,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2SH multisig\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n \n@@ -271,7 +271,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WSH multisig with compressed keys\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n \n@@ -296,7 +296,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WSH multisig with uncompressed key\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n \n@@ -321,7 +321,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WSH multisig wrapped in P2SH\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n         CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n@@ -347,7 +347,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // OP_RETURN\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();\n@@ -360,7 +360,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // witness unspendable\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();\n@@ -373,7 +373,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // witness unknown\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();\n@@ -386,7 +386,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // Nonstandard\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        LOCK(keystore.cs_wallet);\n+        LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n         scriptPubKey.clear();"
      },
      {
        "sha": "1eaf14e75db150237e89c9776acd5df8b3f1082b",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -17,7 +17,7 @@ BOOST_FIXTURE_TEST_SUITE(psbt_wallet_tests, WalletTestingSetup)\n BOOST_AUTO_TEST_CASE(psbt_updater_test)\n {\n     auto spk_man = m_wallet.GetLegacyScriptPubKeyMan();\n-    LOCK(m_wallet.cs_wallet);\n+    LOCK2(m_wallet.cs_wallet, spk_man->cs_KeyStore);\n \n     // Create prevtxs and add to wallet\n     CDataStream s_prev_tx1(ParseHex(\"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000\"), SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "125b57bcd8ce4c9642db5d8ea6ea1cf762bfd6bb",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -29,8 +29,7 @@ BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n static void AddKey(CWallet& wallet, const CKey& key)\n {\n     auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n-    LOCK(wallet.cs_wallet);\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n     spk_man->AddKeyPubKey(key, key.GetPubKey());\n }\n \n@@ -217,8 +216,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         auto spk_man = wallet->GetLegacyScriptPubKeyMan();\n-        LOCK(wallet->cs_wallet);\n-        AssertLockHeld(spk_man->cs_wallet);\n+        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         spk_man->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n@@ -272,8 +270,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n \n     auto locked_chain = chain->lock();\n     LockAssertion lock(::cs_main);\n-    LOCK(wallet.cs_wallet);\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n     wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n \n     CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash(), 0);\n@@ -377,7 +374,7 @@ static void TestWatchOnlyPubKey(LegacyScriptPubKeyMan* spk_man, const CPubKey& a\n     CScript p2pk = GetScriptForRawPubKey(add_pubkey);\n     CKeyID add_address = add_pubkey.GetID();\n     CPubKey found_pubkey;\n-    LOCK(spk_man->cs_wallet);\n+    LOCK(spk_man->cs_KeyStore);\n \n     // all Scripts (i.e. also all PubKeys) are added to the general watch-only set\n     BOOST_CHECK(!spk_man->HaveWatchOnly(p2pk));\n@@ -394,7 +391,6 @@ static void TestWatchOnlyPubKey(LegacyScriptPubKeyMan* spk_man, const CPubKey& a\n         BOOST_CHECK(found_pubkey == CPubKey()); // passed key is unchanged\n     }\n \n-    AssertLockHeld(spk_man->cs_wallet);\n     spk_man->RemoveWatchOnly(p2pk);\n     BOOST_CHECK(!spk_man->HaveWatchOnly(p2pk));\n "
      },
      {
        "sha": "86c2cfdfda70c0879231269a08c2dacf951841b6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -219,6 +219,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n \n             // Set a seed for the wallet\n             {\n+                LOCK(wallet->cs_wallet);\n                 if (auto spk_man = wallet->m_spk_man.get()) {\n                     if (!spk_man->SetupGeneration()) {\n                         error = \"Unable to generate initial keys\";\n@@ -265,7 +266,6 @@ void CWallet::UpgradeKeyMetadata()\n     }\n \n     if (m_spk_man) {\n-        AssertLockHeld(m_spk_man->cs_wallet);\n         m_spk_man->UpgradeKeyMetadata();\n     }\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n@@ -1322,6 +1322,7 @@ bool CWallet::IsHDEnabled() const\n \n bool CWallet::CanGetAddresses(bool internal)\n {\n+    LOCK(cs_wallet);\n     {\n         auto spk_man = m_spk_man.get();\n         if (spk_man && spk_man->CanGetAddresses(internal)) {\n@@ -1427,7 +1428,7 @@ bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n     if (!spk_man) {\n         return false;\n     }\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK(spk_man->cs_KeyStore);\n     return spk_man->ImportScripts(scripts, timestamp);\n }\n \n@@ -1437,7 +1438,7 @@ bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const in\n     if (!spk_man) {\n         return false;\n     }\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK(spk_man->cs_KeyStore);\n     return spk_man->ImportPrivKeys(privkey_map, timestamp);\n }\n \n@@ -1447,7 +1448,7 @@ bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const st\n     if (!spk_man) {\n         return false;\n     }\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK(spk_man->cs_KeyStore);\n     return spk_man->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n@@ -1457,7 +1458,7 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n     if (!spk_man) {\n         return false;\n     }\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK(spk_man->cs_KeyStore);\n     if (!spk_man->ImportScriptPubKeys(script_pub_keys, have_solving_data, timestamp)) {\n         return false;\n     }\n@@ -3103,7 +3104,6 @@ size_t CWallet::KeypoolCountExternalKeys()\n \n     unsigned int count = 0;\n     if (auto spk_man = m_spk_man.get()) {\n-        AssertLockHeld(spk_man->cs_wallet);\n         count += spk_man->KeypoolCountExternalKeys();\n     }\n \n@@ -3123,6 +3123,7 @@ unsigned int CWallet::GetKeyPoolSize() const\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n+    LOCK(cs_wallet);\n     bool res = true;\n     if (auto spk_man = m_spk_man.get()) {\n         res &= spk_man->TopUp(kpSize);\n@@ -3149,6 +3150,7 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n \n bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n+    LOCK(cs_wallet);\n     error.clear();\n \n     ReserveDestination reservedest(this, type);\n@@ -3163,6 +3165,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n \n int64_t CWallet::GetOldestKeyPoolTime()\n {\n+    LOCK(cs_wallet);\n     int64_t oldestKey = std::numeric_limits<int64_t>::max();\n     if (auto spk_man = m_spk_man.get()) {\n         oldestKey = spk_man->GetOldestKeyPoolTime();\n@@ -3416,7 +3419,7 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n \n     LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n     assert(spk_man != nullptr);\n-    AssertLockHeld(spk_man->cs_wallet);\n+    LOCK(spk_man->cs_KeyStore);\n \n     // get birth times for keys with metadata\n     for (const auto& entry : spk_man->mapKeyMetadata) {\n@@ -3725,6 +3728,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n+            LOCK(walletInstance->cs_wallet);\n             if (auto spk_man = walletInstance->m_spk_man.get()) {\n                 if (!spk_man->SetupGeneration()) {\n                     error = _(\"Unable to generate initial keys\").translated;\n@@ -4064,7 +4068,7 @@ bool CWallet::IsLocked() const\n     if (!IsCrypted()) {\n         return false;\n     }\n-    LOCK(cs_KeyStore);\n+    LOCK(cs_wallet);\n     return vMasterKey.empty();\n }\n \n@@ -4074,7 +4078,7 @@ bool CWallet::Lock()\n         return false;\n \n     {\n-        LOCK(cs_KeyStore);\n+        LOCK(cs_wallet);\n         vMasterKey.clear();\n     }\n \n@@ -4085,7 +4089,7 @@ bool CWallet::Lock()\n bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n {\n     {\n-        LOCK(cs_KeyStore);\n+        LOCK(cs_wallet);\n         if (m_spk_man) {\n             if (!m_spk_man->CheckDecryptionKey(vMasterKeyIn, accept_no_keys)) {\n                 return false;"
      },
      {
        "sha": "ef4c8ea8a1bf61e2b39b174b772903786e88637e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -606,7 +606,7 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n class CWallet final : public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n-    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n \n \n     bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false);"
      },
      {
        "sha": "19e0292ff61e8a297fecd92860cff9405d34de1a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -196,7 +196,7 @@ class CWalletScanState {\n \n static bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet, pwallet->GetLegacyScriptPubKeyMan()->cs_wallet)\n+             CWalletScanState &wss, std::string& strType, std::string& strErr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n         // Unserialize\n@@ -434,7 +434,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     DBErrors result = DBErrors::LOAD_OK;\n \n     LOCK(pwallet->cs_wallet);\n-    AssertLockHeld(pwallet->GetLegacyScriptPubKeyMan()->cs_wallet);\n     try {\n         int nMinVersion = 0;\n         if (m_batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n@@ -518,6 +517,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n         auto spk_man = pwallet->GetLegacyScriptPubKeyMan();\n         if (spk_man) {\n+            LOCK(spk_man->cs_KeyStore);\n             spk_man->UpdateTimeFirstKey(1);\n         }\n     }\n@@ -713,7 +713,6 @@ bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, C\n     {\n         // Required in LoadKeyMetadata():\n         LOCK(dummyWallet->cs_wallet);\n-        AssertLockHeld(dummyWallet->GetLegacyScriptPubKeyMan()->cs_wallet);\n         fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue,\n                                dummyWss, strType, strErr);\n     }"
      },
      {
        "sha": "4bc9d7edf1434b069b1e535de2d184b38cce9fcd",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadc08ad944cad42e805228cdd58e0332f4d7184/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=fadc08ad944cad42e805228cdd58e0332f4d7184",
        "patch": "@@ -27,6 +27,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     }\n     // dummy chain interface\n     std::shared_ptr<CWallet> wallet_instance(new CWallet(nullptr /* chain */, WalletLocation(name), WalletDatabase::Create(path)), WalletToolReleaseWallet);\n+    LOCK(wallet_instance->cs_wallet);\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     if (load_wallet_ret != DBErrors::LOAD_OK) {"
      }
    ]
  },
  {
    "sha": "eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjgxZmMzZWU1OGQzZTg4YWYzNmQ4MDkxYjllNDAxN2E4NjAzYjNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:34:28Z"
      },
      "message": "Refactor: Allow LegacyScriptPubKeyMan to be null\n\nIn CWallet::LoadWallet, use this to detect and empty wallet with no keys\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "0a9922fec8bc4c6960f955db0c8422598a881446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a9922fec8bc4c6960f955db0c8422598a881446"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fadc08ad944cad42e805228cdd58e0332f4d7184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadc08ad944cad42e805228cdd58e0332f4d7184",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadc08ad944cad42e805228cdd58e0332f4d7184"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 86,
      "deletions": 37
    },
    "files": [
      {
        "sha": "d6d5e67c5bcfd3c18cb9f3246b14f03954b88381",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -31,7 +31,8 @@ static void CoinSelection(benchmark::State& state)\n {\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n-    const CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    wallet.SetupLegacyScriptPubKeyMan();\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n \n@@ -64,7 +65,7 @@ static void CoinSelection(benchmark::State& state)\n typedef std::set<CInputCoin> CoinSet;\n static NodeContext testNode;\n static auto testChain = interfaces::MakeChain(testNode);\n-static const CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+static CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp\n@@ -93,6 +94,7 @@ static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\n static void BnBExhaustion(benchmark::State& state)\n {\n     // Setup\n+    testWallet.SetupLegacyScriptPubKeyMan();\n     std::vector<OutputGroup> utxo_pool;\n     CoinSet selection;\n     CAmount value_ret = 0;"
      },
      {
        "sha": "62568a9da5abd4f9b4a09ff00d4d7a7127408356",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -20,6 +20,7 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n     std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n     CWallet wallet{chain.get(), WalletLocation(), WalletDatabase::CreateMock()};\n     {\n+        wallet.SetupLegacyScriptPubKeyMan();\n         bool first_run;\n         if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n         wallet.handleNotifications();"
      },
      {
        "sha": "0f082802cca3edffca36596ce9fa901391c7c722",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -59,6 +59,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n {\n     TestChain100Setup test;\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+    wallet->SetupLegacyScriptPubKeyMan();\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n "
      },
      {
        "sha": "c1a0f63f7383b26c34bb63f0a727970ce4461fd6",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -143,7 +143,7 @@ void TestGUI(interfaces::Node& node)\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {\n-        auto spk_man = wallet->GetLegacyScriptPubKeyMan();\n+        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n         auto locked_chain = wallet->chain().lock();\n         LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");"
      },
      {
        "sha": "b730d4a4dd7058ec663d59d6de1639a5620c12e1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -125,7 +125,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n     }\n \n-    EnsureLegacyScriptPubKeyMan(*wallet);\n+    EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n     WalletRescanReserver reserver(pwallet);\n     bool fRescan = true;\n@@ -253,7 +253,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    EnsureLegacyScriptPubKeyMan(*pwallet);\n+    EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -454,7 +454,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    EnsureLegacyScriptPubKeyMan(*wallet);\n+    EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -538,7 +538,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    EnsureLegacyScriptPubKeyMan(*wallet);\n+    EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n     if (pwallet->chain().havePruned()) {\n         // Exit early and print an error.\n@@ -1334,7 +1334,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n \n-    EnsureLegacyScriptPubKeyMan(*wallet);\n+    EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n     const UniValue& requests = mainRequest.params[0];\n "
      },
      {
        "sha": "6ae18b1ed74b07098f87745804bac2b81990a1d3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -124,9 +124,13 @@ void EnsureWalletIsUnlocked(const CWallet* pwallet)\n     }\n }\n \n-LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet)\n+// also_create should only be set to true only when the RPC is expected to add things to a blank wallet and make it no longer blank\n+LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create)\n {\n     LegacyScriptPubKeyMan* spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    if (!spk_man && also_create) {\n+        spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n+    }\n     if (!spk_man) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"This type of wallet does not support this command\");\n     }\n@@ -4003,7 +4007,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet);\n+    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     if (pwallet->chain().isInitialBlockDownload()) {\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");"
      },
      {
        "sha": "2813fa2bfc4203f6128aff6a93731faed7109e2c",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -41,7 +41,7 @@ std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& reques\n std::string HelpRequiringPassphrase(const CWallet*);\n void EnsureWalletIsUnlocked(const CWallet*);\n bool EnsureWalletIsAvailable(const CWallet*, bool avoidException);\n-LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet);\n+LegacyScriptPubKeyMan& EnsureLegacyScriptPubKeyMan(CWallet& wallet, bool also_create = false);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);"
      },
      {
        "sha": "d65a0e90755578538f77188d83b9cfaf60220328",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -136,6 +136,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();\n \n     // Setup\n     std::vector<CInputCoin> utxo_pool;\n@@ -278,6 +279,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         std::unique_ptr<CWallet> wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n+        wallet->SetupLegacyScriptPubKeyMan();\n         LOCK(wallet->cs_wallet);\n         add_coin(*wallet, 5 * CENT, 6 * 24, false, 0, true);\n         add_coin(*wallet, 3 * CENT, 6 * 24, false, 0, true);\n@@ -299,6 +301,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n     bool bnb_used;\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();\n \n     // test multiple times to allow for differences in the shuffle order\n     for (int i = 0; i < RUN_TESTS; i++)\n@@ -578,6 +581,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     bool bnb_used;\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();\n \n     empty_wallet();\n \n@@ -596,6 +600,8 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n // Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value\n BOOST_AUTO_TEST_CASE(SelectCoins_test)\n {\n+    testWallet.SetupLegacyScriptPubKeyMan();\n+\n     // Random generator stuff\n     std::default_random_engine generator;\n     std::exponential_distribution<double> distribution (100);"
      },
      {
        "sha": "4c0e4dc65318b2bf6104f52ec11cb26f97f991ef",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -36,6 +36,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PK compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n@@ -52,6 +53,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PK uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n@@ -68,6 +70,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PKH compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(pubkeys[0]));\n \n@@ -84,6 +87,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2PKH uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         scriptPubKey = GetScriptForDestination(PKHash(uncompressedPubkey));\n \n@@ -100,6 +104,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2SH\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemScript = GetScriptForDestination(PKHash(pubkeys[0]));\n@@ -123,6 +128,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // (P2PKH inside) P2SH inside P2SH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n@@ -140,6 +146,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // (P2PKH inside) P2SH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript redeemscript = GetScriptForDestination(PKHash(pubkeys[0]));\n@@ -157,6 +164,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WPKH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessscript = GetScriptForDestination(WitnessV0KeyHash(PKHash(pubkeys[0])));\n@@ -172,6 +180,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // (P2PKH inside) P2WSH inside P2WSH (invalid)\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessscript_inner = GetScriptForDestination(PKHash(pubkeys[0]));\n@@ -189,6 +198,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WPKH compressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n@@ -203,6 +213,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WPKH uncompressed\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n \n@@ -221,6 +232,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // scriptPubKey multisig\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         scriptPubKey = GetScriptForMultisig(2, {uncompressedPubkey, pubkeys[1]});\n@@ -251,6 +263,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2SH multisig\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n@@ -271,6 +284,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WSH multisig with compressed keys\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n@@ -296,6 +310,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WSH multisig with uncompressed key\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n@@ -321,6 +336,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // P2WSH multisig wrapped in P2SH\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n \n         CScript witnessScript = GetScriptForMultisig(2, {pubkeys[0], pubkeys[1]});\n@@ -347,6 +363,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // OP_RETURN\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n@@ -360,6 +377,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // witness unspendable\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n@@ -373,6 +391,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // witness unknown\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n \n@@ -386,6 +405,7 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     // Nonstandard\n     {\n         CWallet keystore(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        keystore.SetupLegacyScriptPubKeyMan();\n         LOCK(keystore.GetLegacyScriptPubKeyMan()->cs_KeyStore);\n         BOOST_CHECK(keystore.GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n "
      },
      {
        "sha": "ff20d71360b5f11f2bfeafba3685d92b5579197c",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -16,7 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(psbt_wallet_tests, WalletTestingSetup)\n \n BOOST_AUTO_TEST_CASE(psbt_updater_test)\n {\n-    auto spk_man = m_wallet.GetLegacyScriptPubKeyMan();\n+    auto spk_man = m_wallet.GetOrCreateLegacyScriptPubKeyMan();\n     LOCK2(m_wallet.cs_wallet, spk_man->cs_KeyStore);\n \n     // Create prevtxs and add to wallet"
      },
      {
        "sha": "a487e9e2e0f09bdee3675aea925994e4969e9cf8",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -28,7 +28,7 @@ BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n static void AddKey(CWallet& wallet, const CKey& key)\n {\n-    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n     LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n     spk_man->AddKeyPubKey(key, key.GetPubKey());\n }\n@@ -151,6 +151,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // after.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        wallet->SetupLegacyScriptPubKeyMan();\n         AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -215,7 +216,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        auto spk_man = wallet->GetLegacyScriptPubKeyMan();\n+        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n         LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         spk_man->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -232,6 +233,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // were scanned, and no prior blocks were scanned.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        wallet->SetupLegacyScriptPubKeyMan();\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -265,7 +267,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     auto chain = interfaces::MakeChain(node);\n \n     CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n     auto locked_chain = chain->lock();\n@@ -280,7 +282,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     // cache the current immature credit amount, which is 0.\n     BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 0);\n \n-    // Invalidate the cached vanue, add the key, and make sure a new immature\n+    // Invalidate the cached value, add the key, and make sure a new immature\n     // credit amount is calculated.\n     wtx.MarkDirty();\n     BOOST_CHECK(spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey()));\n@@ -415,7 +417,7 @@ BOOST_AUTO_TEST_CASE(WatchOnlyPubKeys)\n {\n     CKey key;\n     CPubKey pubkey;\n-    LegacyScriptPubKeyMan* spk_man = m_wallet.GetLegacyScriptPubKeyMan();\n+    LegacyScriptPubKeyMan* spk_man = m_wallet.GetOrCreateLegacyScriptPubKeyMan();\n \n     BOOST_CHECK(!spk_man->HaveWatchOnly());\n \n@@ -577,6 +579,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    wallet->SetupLegacyScriptPubKeyMan();\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));"
      },
      {
        "sha": "224996af1582c46566667114e7b1fb425b685553",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -2993,10 +2993,9 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         }\n     }\n \n+    // This wallet is in its first run if there are no ScriptPubKeyMans and it isn't blank or no privkeys\n     {\n-        LOCK(cs_KeyStore);\n-        // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n+        fFirstRunRet = !m_spk_man\n             && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n     }\n \n@@ -3727,6 +3726,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->SetMinVersion(FEATURE_LATEST);\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n+\n+        // Always create LegacyScriptPubKeyMan for now\n+        walletInstance->SetupLegacyScriptPubKeyMan();\n+\n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n             if (auto spk_man = walletInstance->m_spk_man.get()) {\n@@ -4121,6 +4124,17 @@ LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n     return m_spk_man.get();\n }\n \n+LegacyScriptPubKeyMan* CWallet::GetOrCreateLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return GetLegacyScriptPubKeyMan();\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (!m_spk_man) m_spk_man = MakeUnique<LegacyScriptPubKeyMan>(*this);\n+}\n+\n const CKeyingMaterial& CWallet::GetEncryptionKey() const\n {\n     return vMasterKey;"
      },
      {
        "sha": "a3efdb813b31e37ade9c30af3e23670732a3be84",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -1140,19 +1140,17 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     const SigningProvider* GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n \n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n+    LegacyScriptPubKeyMan* GetOrCreateLegacyScriptPubKeyMan();\n+\n+    //! Make a LegacyScriptPubKeyMan and set it for all types, internal, and external.\n+    void SetupLegacyScriptPubKeyMan();\n \n     const CKeyingMaterial& GetEncryptionKey() const override;\n     bool HasEncryptionKeys() const override;\n \n     // Temporary LegacyScriptPubKeyMan accessors and aliases.\n     friend class LegacyScriptPubKeyMan;\n-    std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man = MakeUnique<LegacyScriptPubKeyMan>(*this);\n-    RecursiveMutex& cs_KeyStore = m_spk_man->cs_KeyStore;\n-    LegacyScriptPubKeyMan::KeyMap& mapKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapKeys;\n-    LegacyScriptPubKeyMan::ScriptMap& mapScripts GUARDED_BY(cs_KeyStore) = m_spk_man->mapScripts;\n-    LegacyScriptPubKeyMan::CryptedKeyMap& mapCryptedKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapCryptedKeys;\n-    LegacyScriptPubKeyMan::WatchOnlySet& setWatchOnly GUARDED_BY(cs_KeyStore) = m_spk_man->setWatchOnly;\n-    LegacyScriptPubKeyMan::WatchKeyMap& mapWatchKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapWatchKeys;\n+    std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man;\n \n     /** Get last block processed height */\n     int GetLastBlockHeight() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)"
      },
      {
        "sha": "a1928f45c4504014bab4a0889d2c3812d6917d04",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -251,7 +251,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1') {\n-                pwallet->GetLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n+                pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadWatchOnly(script);\n             }\n         } else if (strType == DBKeys::KEY) {\n             CPubKey vchPubKey;\n@@ -303,7 +303,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: CPrivKey corrupt\";\n                 return false;\n             }\n-            if (!pwallet->GetLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n             {\n                 strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n                 return false;\n@@ -334,7 +334,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> vchPrivKey;\n             wss.nCKeys++;\n \n-            if (!pwallet->GetLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey))\n+            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCryptedKey(vchPubKey, vchPrivKey))\n             {\n                 strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCryptedKey failed\";\n                 return false;\n@@ -346,14 +346,14 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n-            pwallet->GetLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n         } else if (strType == DBKeys::WATCHMETA) {\n             CScript script;\n             ssKey >> script;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n-            pwallet->GetLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadScriptMetadata(CScriptID(script), keyMeta);\n         } else if (strType == DBKeys::DEFAULTKEY) {\n             // We don't want or need the default key, but if there is one set,\n             // we want to make sure that it is valid so that we can detect corruption\n@@ -369,13 +369,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CKeyPool keypool;\n             ssValue >> keypool;\n \n-            pwallet->GetLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyPool(nIndex, keypool);\n         } else if (strType == DBKeys::CSCRIPT) {\n             uint160 hash;\n             ssKey >> hash;\n             CScript script;\n             ssValue >> script;\n-            if (!pwallet->GetLegacyScriptPubKeyMan()->LoadCScript(script))\n+            if (!pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadCScript(script))\n             {\n                 strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadCScript failed\";\n                 return false;\n@@ -391,7 +391,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::HDCHAIN) {\n             CHDChain chain;\n             ssValue >> chain;\n-            pwallet->GetLegacyScriptPubKeyMan()->SetHDChain(chain, true);\n+            pwallet->GetOrCreateLegacyScriptPubKeyMan()->SetHDChain(chain, true);\n         } else if (strType == DBKeys::FLAGS) {\n             uint64_t flags;\n             ssValue >> flags;\n@@ -515,7 +515,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n-        auto spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+        auto spk_man = pwallet->GetOrCreateLegacyScriptPubKeyMan();\n         if (spk_man) {\n             LOCK(spk_man->cs_KeyStore);\n             spk_man->UpdateTimeFirstKey(1);"
      },
      {
        "sha": "fbfdf9dd6bc2f0e3b84b05f30c300d4e146d5672",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "patch": "@@ -38,7 +38,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     wallet_instance->SetMinVersion(FEATURE_HD_SPLIT);\n \n     // generate a new HD seed\n-    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    auto spk_man = wallet_instance->GetOrCreateLegacyScriptPubKeyMan();\n     CPubKey seed = spk_man->GenerateNewSeed();\n     spk_man->SetHDSeed(seed);\n "
      }
    ]
  },
  {
    "sha": "81610eddbc57c46ae243f45d73e715d509f53a6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTYxMGVkZGJjNTdjNDZhZTI0M2Y0NWQ3M2U3MTVkNTA5ZjUzYTZj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:53:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:06Z"
      },
      "message": "List output types in an array in order to be iterated over",
      "tree": {
        "sha": "71b0aec6274d7bcd7f8a985d76d7bfe5a653d223",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71b0aec6274d7bcd7f8a985d76d7bfe5a653d223"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81610eddbc57c46ae243f45d73e715d509f53a6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81610eddbc57c46ae243f45d73e715d509f53a6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81610eddbc57c46ae243f45d73e715d509f53a6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81610eddbc57c46ae243f45d73e715d509f53a6c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb81fc3ee58d3e88af36d8091b9e4017a8603b3c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "71b5cba01c5bbe6a192c1e52080bed0eb84e7b6f",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81610eddbc57c46ae243f45d73e715d509f53a6c/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81610eddbc57c46ae243f45d73e715d509f53a6c/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=81610eddbc57c46ae243f45d73e715d509f53a6c",
        "patch": "@@ -19,6 +19,8 @@ static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n \n+const std::array<OutputType, 3> OUTPUT_TYPES = {OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32};\n+\n bool ParseOutputType(const std::string& type, OutputType& output_type)\n {\n     if (type == OUTPUT_TYPE_STRING_LEGACY) {"
      },
      {
        "sha": "1438f6584487db0f982b8ef65519cf54a05e2bef",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81610eddbc57c46ae243f45d73e715d509f53a6c/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81610eddbc57c46ae243f45d73e715d509f53a6c/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=81610eddbc57c46ae243f45d73e715d509f53a6c",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n \n+#include <array>\n #include <string>\n #include <vector>\n \n@@ -27,6 +28,8 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n+extern const std::array<OutputType, 3> OUTPUT_TYPES;\n+\n NODISCARD bool ParseOutputType(const std::string& str, OutputType& output_type);\n const std::string& FormatOutputType(OutputType type);\n \n@@ -47,4 +50,3 @@ std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore, const CScript& script, OutputType);\n \n #endif // BITCOIN_OUTPUTTYPE_H\n-"
      }
    ]
  },
  {
    "sha": "501acb5538008d98abe79288b92040bc186b93f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDFhY2I1NTM4MDA4ZDk4YWJlNzkyODhiOTIwNDBiYzE4NmI5M2Yz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-03T20:58:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "Always try to sign for all pubkeys in multisig",
      "tree": {
        "sha": "14876627880b6972c45b4c3d1caabba2c521bd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14876627880b6972c45b4c3d1caabba2c521bd4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/501acb5538008d98abe79288b92040bc186b93f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501acb5538008d98abe79288b92040bc186b93f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/501acb5538008d98abe79288b92040bc186b93f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501acb5538008d98abe79288b92040bc186b93f3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81610eddbc57c46ae243f45d73e715d509f53a6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81610eddbc57c46ae243f45d73e715d509f53a6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81610eddbc57c46ae243f45d73e715d509f53a6c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "58eae3ce965d9b809bb26eb5e7fc272a74d25484",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501acb5538008d98abe79288b92040bc186b93f3/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501acb5538008d98abe79288b92040bc186b93f3/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=501acb5538008d98abe79288b92040bc186b93f3",
        "patch": "@@ -144,8 +144,13 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            // We need to always call CreateSig in order to fill sigdata with all\n+            // possible signatures that we can create. This will allow further PSBT\n+            // processing to work as it needs all possible signature and pubkey pairs\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {\n+                    ret.push_back(std::move(sig));\n+                }\n             }\n         }\n         bool ok = ret.size() == required + 1;"
      }
    ]
  },
  {
    "sha": "4a7e43e8460127a40a7895519587399feff3b682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTdlNDNlODQ2MDEyN2E0MGE3ODk1NTE5NTg3Mzk5ZmVmZjNiNjgy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-02T20:21:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "Store p2sh scripts in AddAndGetDestinationForScript",
      "tree": {
        "sha": "ce85b89b6135e10e8a3e022df55331fff204e8a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce85b89b6135e10e8a3e022df55331fff204e8a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a7e43e8460127a40a7895519587399feff3b682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7e43e8460127a40a7895519587399feff3b682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7e43e8460127a40a7895519587399feff3b682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7e43e8460127a40a7895519587399feff3b682/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "501acb5538008d98abe79288b92040bc186b93f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501acb5538008d98abe79288b92040bc186b93f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/501acb5538008d98abe79288b92040bc186b93f3"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "567eecb5c9433dd0e51f4b3f24b0c7f59002602f",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a7e43e8460127a40a7895519587399feff3b682/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a7e43e8460127a40a7895519587399feff3b682/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=4a7e43e8460127a40a7895519587399feff3b682",
        "patch": "@@ -82,22 +82,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh(script);\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n     case OutputType::LEGACY:\n-        return ScriptHash(script);\n+        keystore.AddCScript(GetScriptForDestination(sh));\n+        return sh;\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n+        if (!IsSolvable(keystore, witprog)) {\n+            // Since the wsh is invalid, add and return the sh instead.\n+            keystore.AddCScript(GetScriptForDestination(sh));\n+            return sh;\n+        }\n         // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n         keystore.AddCScript(witprog);\n         if (type == OutputType::BECH32) {\n             return witdest;\n         } else {\n-            return ScriptHash(witprog);\n+            ScriptHash sh_w = ScriptHash(witprog);\n+            keystore.AddCScript(GetScriptForDestination(sh_w));\n+            return sh_w;\n         }\n     }\n     default: assert(false);"
      }
    ]
  },
  {
    "sha": "01b4511206e399981a77976deb15785d18db46ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWI0NTExMjA2ZTM5OTk4MWE3Nzk3NmRlYjE1Nzg1ZDE4ZGI0NmFl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-04T16:00:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "Make UpgradeKeyMetadata work only on LegacyScriptPubKeyMan",
      "tree": {
        "sha": "227d03ed606e9f6f459e013558260847af8b97cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/227d03ed606e9f6f459e013558260847af8b97cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01b4511206e399981a77976deb15785d18db46ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b4511206e399981a77976deb15785d18db46ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01b4511206e399981a77976deb15785d18db46ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b4511206e399981a77976deb15785d18db46ae/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a7e43e8460127a40a7895519587399feff3b682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7e43e8460127a40a7895519587399feff3b682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7e43e8460127a40a7895519587399feff3b682"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "45c8de2eab1ae9c5f325c3e531cd2db1b2a337e8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01b4511206e399981a77976deb15785d18db46ae/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01b4511206e399981a77976deb15785d18db46ae/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=01b4511206e399981a77976deb15785d18db46ae",
        "patch": "@@ -265,9 +265,12 @@ void CWallet::UpgradeKeyMetadata()\n         return;\n     }\n \n-    if (m_spk_man) {\n-        m_spk_man->UpgradeKeyMetadata();\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return;\n     }\n+\n+    spk_man->UpgradeKeyMetadata();\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n "
      }
    ]
  },
  {
    "sha": "415afcccd3e5583defdb76e3a280f48e98983301",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTVhZmNjY2QzZTU1ODNkZWZkYjc2ZTNhMjgwZjQ4ZTk4OTgzMzAx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "HD Split: Avoid redundant upgrades\n\nThis avoids repeaded upgrades when support for more multiple keyman references\nis added in the next commit:\nhttps://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370108",
      "tree": {
        "sha": "bb6421775ae2355970f1bee11119423228576f81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb6421775ae2355970f1bee11119423228576f81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/415afcccd3e5583defdb76e3a280f48e98983301",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/415afcccd3e5583defdb76e3a280f48e98983301",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/415afcccd3e5583defdb76e3a280f48e98983301",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/415afcccd3e5583defdb76e3a280f48e98983301/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01b4511206e399981a77976deb15785d18db46ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b4511206e399981a77976deb15785d18db46ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01b4511206e399981a77976deb15785d18db46ae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "713333007a85415c06a10161e23e2901b7508ce5",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/415afcccd3e5583defdb76e3a280f48e98983301/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/415afcccd3e5583defdb76e3a280f48e98983301/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=415afcccd3e5583defdb76e3a280f48e98983301",
        "patch": "@@ -384,7 +384,7 @@ bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n         hd_upgrade = true;\n     }\n     // Upgrade to HD chain split if necessary\n-    if (m_storage.CanSupportFeature(FEATURE_HD_SPLIT)) {\n+    if (m_storage.CanSupportFeature(FEATURE_HD_SPLIT) && CHDChain::VERSION_HD_CHAIN_SPLIT) {\n         WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n         m_storage.SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n         split_upgrade = FEATURE_HD_SPLIT > prev_version;"
      }
    ]
  },
  {
    "sha": "4977c30d59e88a3e5ee248144bcc023debcd895b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTc3YzMwZDU5ZTg4YTNlNWVlMjQ4MTQ0YmNjMDIzZGViY2Q4OTVi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-30T19:05:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "refactor: define a UINT256_ONE global constant\n\nInstead of having a uint256 representations of one scattered throughout\nwhere it is used, define it globally in uint256.h",
      "tree": {
        "sha": "ffd93cc643f1f5ac0f0255a9da6f3e1c9a202fbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffd93cc643f1f5ac0f0255a9da6f3e1c9a202fbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4977c30d59e88a3e5ee248144bcc023debcd895b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4977c30d59e88a3e5ee248144bcc023debcd895b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4977c30d59e88a3e5ee248144bcc023debcd895b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4977c30d59e88a3e5ee248144bcc023debcd895b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "415afcccd3e5583defdb76e3a280f48e98983301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/415afcccd3e5583defdb76e3a280f48e98983301",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/415afcccd3e5583defdb76e3a280f48e98983301"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d0865d2793e4b1ded810824a8016ab1044c86dad",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4977c30d59e88a3e5ee248144bcc023debcd895b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4977c30d59e88a3e5ee248144bcc023debcd895b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=4977c30d59e88a3e5ee248144bcc023debcd895b",
        "patch": "@@ -1281,13 +1281,11 @@ uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn\n         return ss.GetHash();\n     }\n \n-    static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n-\n     // Check for invalid use of SIGHASH_SINGLE\n     if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n         if (nIn >= txTo.vout.size()) {\n             //  nOut out of range\n-            return one;\n+            return UINT256_ONE();\n         }\n     }\n "
      },
      {
        "sha": "bcc4a468731546e5d2f63f38b97e394c261d5772",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4977c30d59e88a3e5ee248144bcc023debcd895b/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4977c30d59e88a3e5ee248144bcc023debcd895b/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=4977c30d59e88a3e5ee248144bcc023debcd895b",
        "patch": "@@ -26,10 +26,9 @@ extern UniValue read_json(const std::string& jsondata);\n // Old script.cpp SignatureHash function\n uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n-    static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n-        return one;\n+        return UINT256_ONE();\n     }\n     CMutableTransaction txTmp(txTo);\n \n@@ -59,7 +58,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         unsigned int nOut = nIn;\n         if (nOut >= txTmp.vout.size())\n         {\n-            return one;\n+            return UINT256_ONE();\n         }\n         txTmp.vout.resize(nOut+1);\n         for (unsigned int i = 0; i < nOut; i++)"
      },
      {
        "sha": "a943e710620b65e1c7a8d1f82c9aa62aa6c54132",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4977c30d59e88a3e5ee248144bcc023debcd895b/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4977c30d59e88a3e5ee248144bcc023debcd895b/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=4977c30d59e88a3e5ee248144bcc023debcd895b",
        "patch": "@@ -75,3 +75,8 @@ template std::string base_blob<256>::GetHex() const;\n template std::string base_blob<256>::ToString() const;\n template void base_blob<256>::SetHex(const char*);\n template void base_blob<256>::SetHex(const std::string&);\n+\n+uint256& UINT256_ONE() {\n+    static uint256* one = new uint256(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n+    return *one;\n+}"
      },
      {
        "sha": "b36598f572a48082ccd8410c5d28c5198fe45e77",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4977c30d59e88a3e5ee248144bcc023debcd895b/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4977c30d59e88a3e5ee248144bcc023debcd895b/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=4977c30d59e88a3e5ee248144bcc023debcd895b",
        "patch": "@@ -144,4 +144,6 @@ inline uint256 uint256S(const std::string& str)\n     return rv;\n }\n \n+uint256& UINT256_ONE();\n+\n #endif // BITCOIN_UINT256_H"
      },
      {
        "sha": "3d474119622a7c7fcbe298bca10f73840bc6955b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4977c30d59e88a3e5ee248144bcc023debcd895b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4977c30d59e88a3e5ee248144bcc023debcd895b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4977c30d59e88a3e5ee248144bcc023debcd895b",
        "patch": "@@ -238,7 +238,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     return WalletCreationStatus::SUCCESS;\n }\n \n-const uint256 CWalletTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n+const uint256 CWalletTx::ABANDON_HASH(UINT256_ONE());\n \n /** @defgroup mapWallet\n  *"
      }
    ]
  },
  {
    "sha": "c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzI5YWZkMGEzYjc0YTM5NDNlNGMzNTkyNzBiZWFmM2U2ZmY4YTdi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "Box the wallet: Add multiple keyman maps and loops\n\nAdd wallet logic for dealing with multiple ScriptPubKeyMan instances. This\ndoesn't change current behavior because there is still only a single\nLegacyScriptPubKeyMan. But in the future the new logic will be used to support\ndescriptor wallets.",
      "tree": {
        "sha": "23b6ab9bf09334d6d0e427208f699934af717489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23b6ab9bf09334d6d0e427208f699934af717489"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4977c30d59e88a3e5ee248144bcc023debcd895b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4977c30d59e88a3e5ee248144bcc023debcd895b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4977c30d59e88a3e5ee248144bcc023debcd895b"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 177,
      "deletions": 44
    },
    "files": [
      {
        "sha": "192d14ea90f50a6664932b3e135066cb82548479",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
        "patch": "@@ -470,6 +470,34 @@ int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n     return nTimeFirstKey;\n }\n \n+const SigningProvider* LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+{\n+    return this;\n+}\n+\n+bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    if (IsMine(script) != ISMINE_NO) {\n+        // If it IsMine, we can always provide in some way\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        // We can still provide some stuff if we have the script, but IsMine failed because we don't have keys\n+        return true;\n+    } else {\n+        // If, given the stuff in sigdata, we could make a valid sigature, then we can provide for this script\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have a private key to actually make a signature\n+            bool has_privkeys = false;\n+            for (const auto& key_sig_pair : sigdata.signatures) {\n+                has_privkeys |= HaveKey(key_sig_pair.first);\n+            }\n+            return has_privkeys;\n+        }\n+        return false;\n+    }\n+}\n+\n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     LOCK(cs_KeyStore);\n@@ -491,6 +519,11 @@ const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& des\n     return nullptr;\n }\n \n+uint256 LegacyScriptPubKeyMan::GetID() const\n+{\n+    return UINT256_ONE();\n+}\n+\n /**\n  * Update wallet first key creation time. This should be called whenever keys\n  * are added to the wallet, with the oldest key creation time."
      },
      {
        "sha": "e44026f647eebe657c6d7f9419fcaa9b903fe6ba",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
        "patch": "@@ -196,8 +196,16 @@ class ScriptPubKeyMan\n \n     virtual int64_t GetTimeFirstKey() const { return 0; }\n \n-    //! Return address metadata\n     virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n+\n+    virtual const SigningProvider* GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n };\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n@@ -319,6 +327,12 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanGetAddresses(bool internal = false) override;\n \n+    const SigningProvider* GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n "
      },
      {
        "sha": "94362d8dc15de829f35e897b20be06e2cbd34dc5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 110,
        "deletions": 39,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
        "patch": "@@ -220,7 +220,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             // Set a seed for the wallet\n             {\n                 LOCK(wallet->cs_wallet);\n-                if (auto spk_man = wallet->m_spk_man.get()) {\n+                for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n                     if (!spk_man->SetupGeneration()) {\n                         error = \"Unable to generate initial keys\";\n                         return WalletCreationStatus::CREATION_FAILED;\n@@ -551,7 +551,8 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         }\n         encrypted_batch->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n \n-        if (auto spk_man = m_spk_man.get()) {\n+        for (const auto& spk_man_pair : m_spk_managers) {\n+            auto spk_man = spk_man_pair.second.get();\n             if (!spk_man->Encrypt(_vMasterKey, encrypted_batch)) {\n                 encrypted_batch->TxnAbort();\n                 delete encrypted_batch;\n@@ -580,7 +581,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Unlock(strWalletPassphrase);\n \n         // if we are using HD, replace the HD seed with a new one\n-        if (auto spk_man = m_spk_man.get()) {\n+        if (auto spk_man = GetLegacyScriptPubKeyMan()) {\n             if (spk_man->IsHDEnabled()) {\n                 if (!spk_man->SetupGeneration(true)) {\n                     return false;\n@@ -925,8 +926,8 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n \n             // loop though all outputs\n             for (const CTxOut& txout: tx.vout) {\n-                if (auto spk_man = m_spk_man.get()) {\n-                    spk_man->MarkUnusedAddresses(txout.scriptPubKey);\n+                for (const auto& spk_man_pair : m_spk_managers) {\n+                    spk_man_pair.second->MarkUnusedAddresses(txout.scriptPubKey);\n                 }\n             }\n \n@@ -1197,8 +1198,8 @@ isminetype CWallet::IsMine(const CTxDestination& dest) const\n isminetype CWallet::IsMine(const CScript& script) const\n {\n     isminetype result = ISMINE_NO;\n-    if (auto spk_man = m_spk_man.get()) {\n-        result = spk_man->IsMine(script);\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        result = std::max(result, spk_man_pair.second->IsMine(script));\n     }\n     return result;\n }\n@@ -1317,17 +1318,18 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n bool CWallet::IsHDEnabled() const\n {\n     bool result = true;\n-    if (auto spk_man = m_spk_man.get()) {\n-        result &= spk_man->IsHDEnabled();\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        result &= spk_man_pair.second->IsHDEnabled();\n     }\n     return result;\n }\n \n bool CWallet::CanGetAddresses(bool internal)\n {\n     LOCK(cs_wallet);\n-    {\n-        auto spk_man = m_spk_man.get();\n+    if (m_spk_managers.empty()) return false;\n+    for (OutputType t : OUTPUT_TYPES) {\n+        auto spk_man = GetScriptPubKeyMan(t, internal);\n         if (spk_man && spk_man->CanGetAddresses(internal)) {\n             return true;\n         }\n@@ -2990,16 +2992,17 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            if (auto spk_man = m_spk_man.get()) {\n-                spk_man->RewriteDB();\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n             }\n         }\n     }\n \n     // This wallet is in its first run if there are no ScriptPubKeyMans and it isn't blank or no privkeys\n-    {\n-        fFirstRunRet = !m_spk_man\n-            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n+    fFirstRunRet = m_spk_managers.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n+    if (fFirstRunRet) {\n+        assert(m_external_spk_managers.empty());\n+        assert(m_internal_spk_managers.empty());\n     }\n \n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n@@ -3023,8 +3026,8 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            if (auto spk_man = m_spk_man.get()) {\n-                spk_man->RewriteDB();\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n             }\n         }\n     }\n@@ -3044,8 +3047,8 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            if (auto spk_man = m_spk_man.get()) {\n-                spk_man->RewriteDB();\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n             }\n         }\n     }\n@@ -3105,7 +3108,7 @@ size_t CWallet::KeypoolCountExternalKeys()\n     AssertLockHeld(cs_wallet);\n \n     unsigned int count = 0;\n-    if (auto spk_man = m_spk_man.get()) {\n+    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n         count += spk_man->KeypoolCountExternalKeys();\n     }\n \n@@ -3117,7 +3120,7 @@ unsigned int CWallet::GetKeyPoolSize() const\n     AssertLockHeld(cs_wallet);\n \n     unsigned int count = 0;\n-    if (auto spk_man = m_spk_man.get()) {\n+    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n         count += spk_man->GetKeyPoolSize();\n     }\n     return count;\n@@ -3127,7 +3130,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n     LOCK(cs_wallet);\n     bool res = true;\n-    if (auto spk_man = m_spk_man.get()) {\n+    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n         res &= spk_man->TopUp(kpSize);\n     }\n     return res;\n@@ -3138,7 +3141,7 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n     LOCK(cs_wallet);\n     error.clear();\n     bool result = false;\n-    auto spk_man = m_spk_man.get();\n+    auto spk_man = GetScriptPubKeyMan(type, false /* internal */);\n     if (spk_man) {\n         spk_man->TopUp();\n         result = spk_man->GetNewDestination(type, dest, error);\n@@ -3169,8 +3172,8 @@ int64_t CWallet::GetOldestKeyPoolTime()\n {\n     LOCK(cs_wallet);\n     int64_t oldestKey = std::numeric_limits<int64_t>::max();\n-    if (auto spk_man = m_spk_man.get()) {\n-        oldestKey = spk_man->GetOldestKeyPoolTime();\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        oldestKey = std::min(oldestKey, spk_man_pair.second->GetOldestKeyPoolTime());\n     }\n     return oldestKey;\n }\n@@ -3339,7 +3342,7 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal)\n {\n-    m_spk_man = pwallet->GetLegacyScriptPubKeyMan();\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n     if (!m_spk_man) {\n         return false;\n     }\n@@ -3716,7 +3719,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        if (auto spk_man = walletInstance->m_spk_man.get()) {\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n             if (!spk_man->Upgrade(prev_version, error)) {\n                 return nullptr;\n             }\n@@ -3735,7 +3738,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n-            if (auto spk_man = walletInstance->m_spk_man.get()) {\n+            for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n                 if (!spk_man->SetupGeneration()) {\n                     error = _(\"Unable to generate initial keys\").translated;\n                     return nullptr;\n@@ -3750,9 +3753,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile);\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        if (walletInstance->m_spk_man) {\n-            if (walletInstance->m_spk_man->HavePrivateKeys()) {\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+            if (spk_man->HavePrivateKeys()) {\n                 warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+                break;\n             }\n         }\n     }\n@@ -3906,7 +3910,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n         Optional<int64_t> time_first_key;\n-        if (auto spk_man = walletInstance->m_spk_man.get()) {\n+        for (auto spk_man : walletInstance->GetAllScriptPubKeyMans()) {\n             int64_t time = spk_man->GetTimeFirstKey();\n             if (!time_first_key || time < *time_first_key) time_first_key = time;\n         }\n@@ -4096,8 +4100,8 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n {\n     {\n         LOCK(cs_wallet);\n-        if (m_spk_man) {\n-            if (!m_spk_man->CheckDecryptionKey(vMasterKeyIn, accept_no_keys)) {\n+        for (const auto& spk_man_pair : m_spk_managers) {\n+            if (!spk_man_pair.second->CheckDecryptionKey(vMasterKeyIn, accept_no_keys)) {\n                 return false;\n             }\n         }\n@@ -4107,24 +4111,82 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n     return true;\n }\n \n+std::set<ScriptPubKeyMan*> CWallet::GetActiveScriptPubKeyMans() const\n+{\n+    std::set<ScriptPubKeyMan*> spk_mans;\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_man = GetScriptPubKeyMan(t, internal);\n+            if (spk_man) {\n+                spk_mans.insert(spk_man);\n+            }\n+        }\n+    }\n+    return spk_mans;\n+}\n+\n+std::set<ScriptPubKeyMan*> CWallet::GetAllScriptPubKeyMans() const\n+{\n+    std::set<ScriptPubKeyMan*> spk_mans;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        spk_mans.insert(spk_man_pair.second.get());\n+    }\n+    return spk_mans;\n+}\n+\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const OutputType& type, bool internal) const\n+{\n+    const std::map<OutputType, ScriptPubKeyMan*>& spk_managers = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    std::map<OutputType, ScriptPubKeyMan*>::const_iterator it = spk_managers.find(type);\n+    if (it == spk_managers.end()) {\n+        WalletLogPrintf(\"%s scriptPubKey Manager for output type %d does not exist\\n\", internal ? \"Internal\" : \"External\", static_cast<int>(type));\n+        return nullptr;\n+    }\n+    return it->second;\n+}\n+\n ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n {\n-    return m_spk_man.get();\n+    SignatureData sigdata;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        if (spk_man_pair.second->CanProvide(script, sigdata)) {\n+            return spk_man_pair.second.get();\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const uint256& id) const\n+{\n+    if (m_spk_managers.count(id) > 0) {\n+        return m_spk_managers.at(id).get();\n+    }\n+    return nullptr;\n }\n \n const SigningProvider* CWallet::GetSigningProvider(const CScript& script) const\n {\n-    return m_spk_man.get();\n+    SignatureData sigdata;\n+    return GetSigningProvider(script, sigdata);\n }\n \n const SigningProvider* CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n {\n-    return m_spk_man.get();\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        if (spk_man_pair.second->CanProvide(script, sigdata)) {\n+            return spk_man_pair.second->GetSigningProvider(script);\n+        }\n+    }\n+    return nullptr;\n }\n \n LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n {\n-    return m_spk_man.get();\n+    // Legacy wallets only have one ScriptPubKeyMan which is a LegacyScriptPubKeyMan.\n+    // Everything in m_internal_spk_managers and m_external_spk_managers point to the same legacyScriptPubKeyMan.\n+    auto it = m_internal_spk_managers.find(OutputType::LEGACY);\n+    if (it == m_internal_spk_managers.end()) return nullptr;\n+    return dynamic_cast<LegacyScriptPubKeyMan*>(it->second);\n }\n \n LegacyScriptPubKeyMan* CWallet::GetOrCreateLegacyScriptPubKeyMan()\n@@ -4135,7 +4197,16 @@ LegacyScriptPubKeyMan* CWallet::GetOrCreateLegacyScriptPubKeyMan()\n \n void CWallet::SetupLegacyScriptPubKeyMan()\n {\n-    if (!m_spk_man) m_spk_man = MakeUnique<LegacyScriptPubKeyMan>(*this);\n+    if (!m_internal_spk_managers.empty() || !m_external_spk_managers.empty() || !m_spk_managers.empty()) {\n+        return;\n+    }\n+\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan(*this));\n+    for (const auto& type : OUTPUT_TYPES) {\n+        m_internal_spk_managers[type] = spk_manager.get();\n+        m_external_spk_managers[type] = spk_manager.get();\n+    }\n+    m_spk_managers[spk_manager->GetID()] = std::move(spk_manager);\n }\n \n const CKeyingMaterial& CWallet::GetEncryptionKey() const"
      },
      {
        "sha": "0a6ed74153fa25e91b16d924c4fa84272d26e59c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
        "patch": "@@ -702,6 +702,13 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      */\n     int m_last_block_processed_height GUARDED_BY(cs_wallet) = -1;\n \n+    std::map<OutputType, ScriptPubKeyMan*> m_external_spk_managers;\n+    std::map<OutputType, ScriptPubKeyMan*> m_internal_spk_managers;\n+\n+    // Indexed by a unique identifier produced by each ScriptPubKeyMan using\n+    // ScriptPubKeyMan::GetID. In many cases it will be the hash of an internal structure\n+    std::map<uint256, std::unique_ptr<ScriptPubKeyMan>> m_spk_managers;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -1132,13 +1139,25 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n     };\n \n+    //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n+    std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n+\n+    //! Returns all unique ScriptPubKeyMans\n+    std::set<ScriptPubKeyMan*> GetAllScriptPubKeyMans() const;\n+\n+    //! Get the ScriptPubKeyMan for the given OutputType and internal/external chain.\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const OutputType& type, bool internal) const;\n+\n     //! Get the ScriptPubKeyMan for a script\n     ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+    //! Get the ScriptPubKeyMan by id\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n     //! Get the SigningProvider for a script\n     const SigningProvider* GetSigningProvider(const CScript& script) const;\n     const SigningProvider* GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n \n+    //! Get the LegacyScriptPubKeyMan which is used for all types, internal, and external.\n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;\n     LegacyScriptPubKeyMan* GetOrCreateLegacyScriptPubKeyMan();\n \n@@ -1148,10 +1167,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     const CKeyingMaterial& GetEncryptionKey() const override;\n     bool HasEncryptionKeys() const override;\n \n-    // Temporary LegacyScriptPubKeyMan accessors and aliases.\n-    friend class LegacyScriptPubKeyMan;\n-    std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man;\n-\n     /** Get last block processed height */\n     int GetLastBlockHeight() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {"
      }
    ]
  },
  {
    "sha": "e2f02aa59e3402048269362ff692d49a6df35cfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmYwMmFhNTllMzQwMjA0ODI2OTM2MmZmNjkyZDQ5YTZkZjM1Y2Zk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "Refactor: Copy CWallet signals and print function to LegacyScriptPubKeyMan\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "c9c6ff46623592a6f09a3ce5d9cb16c0db48f9da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9c6ff46623592a6f09a3ce5d9cb16c0db48f9da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2f02aa59e3402048269362ff692d49a6df35cfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f02aa59e3402048269362ff692d49a6df35cfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f02aa59e3402048269362ff692d49a6df35cfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f02aa59e3402048269362ff692d49a6df35cfd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c729afd0a3b74a3943e4c359270beaf3e6ff8a7b"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 28,
      "deletions": 21
    },
    "files": [
      {
        "sha": "07920dec2ee07ed693599076c6e24b7bbf80cbb4",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e2f02aa59e3402048269362ff692d49a6df35cfd",
        "patch": "@@ -9,7 +9,6 @@\n #include <util/strencodings.h>\n #include <util/translation.h>\n #include <wallet/scriptpubkeyman.h>\n-#include <wallet/wallet.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n@@ -1427,12 +1426,3 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n-\n-// Temporary CWallet accessors and aliases.\n-LegacyScriptPubKeyMan::LegacyScriptPubKeyMan(CWallet& wallet)\n-    : ScriptPubKeyMan(wallet),\n-      m_wallet(wallet) {}\n-\n-void LegacyScriptPubKeyMan::NotifyWatchonlyChanged(bool fHaveWatchOnly) const { return m_wallet.NotifyWatchonlyChanged(fHaveWatchOnly); }\n-void LegacyScriptPubKeyMan::NotifyCanGetAddressesChanged() const { return m_wallet.NotifyCanGetAddressesChanged(); }\n-template<typename... Params> void LegacyScriptPubKeyMan::WalletLogPrintf(const std::string& fmt, const Params&... parameters) const { return m_wallet.WalletLogPrintf(fmt, parameters...); }"
      },
      {
        "sha": "9ea10c14c7bd034c9b894c1cd3a2ac4c10e245f4",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e2f02aa59e3402048269362ff692d49a6df35cfd",
        "patch": "@@ -206,6 +206,18 @@ class ScriptPubKeyMan\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n     virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), m_storage.GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n };\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n@@ -290,6 +302,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n     bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;\n \n@@ -426,14 +440,6 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n     std::set<CKeyID> GetKeys() const override;\n-    // Temporary CWallet accessors and aliases.\n-    friend class CWallet;\n-    friend class ReserveDestination;\n-    LegacyScriptPubKeyMan(CWallet& wallet);\n-    void NotifyWatchonlyChanged(bool fHaveWatchOnly) const;\n-    void NotifyCanGetAddressesChanged() const;\n-    template<typename... Params> void WalletLogPrintf(const std::string& fmt, const Params&... parameters) const;\n-    CWallet& m_wallet;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "6bf8c7710c3154fd3ed9b3c19fe3e5f2889ae83e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2f02aa59e3402048269362ff692d49a6df35cfd",
        "patch": "@@ -56,6 +56,7 @@ bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n     std::vector<std::shared_ptr<CWallet>>::const_iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n     if (i != vpwallets.end()) return false;\n     vpwallets.push_back(wallet);\n+    wallet->ConnectScriptPubKeyManNotifiers();\n     return true;\n }\n \n@@ -4218,3 +4219,11 @@ bool CWallet::HasEncryptionKeys() const\n {\n     return !mapMasterKeys.empty();\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (const auto& spk_man : GetActiveScriptPubKeyMans()) {\n+        spk_man->NotifyWatchonlyChanged.connect(NotifyWatchonlyChanged);\n+        spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n+    }\n+}"
      },
      {
        "sha": "0a340ec3aa5f61eb8f1f7acfa533c3dca94d8b15",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f02aa59e3402048269362ff692d49a6df35cfd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e2f02aa59e3402048269362ff692d49a6df35cfd",
        "patch": "@@ -1181,6 +1181,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         m_last_block_processed_height = block_height;\n         m_last_block_processed = block_hash;\n     };\n+\n+    //! Connect the signals from ScriptPubKeyMans to the signals in CWallet\n+    void ConnectScriptPubKeyManNotifiers();\n };\n \n /**"
      },
      {
        "sha": "e769039682e709178705ea4c9aac29e5ba62ff75",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f02aa59e3402048269362ff692d49a6df35cfd/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f02aa59e3402048269362ff692d49a6df35cfd/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=e2f02aa59e3402048269362ff692d49a6df35cfd",
        "patch": "@@ -25,7 +25,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> txmempool -> validation -> policy/fees\"\n-    \"wallet/scriptpubkeyman -> wallet/wallet -> wallet/scriptpubkeyman\"\n )\n \n EXIT_CODE=0"
      },
      {
        "sha": "2870432bffb9da98d292fa7219f835940ec63183",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f02aa59e3402048269362ff692d49a6df35cfd/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f02aa59e3402048269362ff692d49a6df35cfd/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=e2f02aa59e3402048269362ff692d49a6df35cfd",
        "patch": "@@ -20,10 +20,10 @@\n     (\"src/validationinterface.cpp\", \"LogPrint(BCLog::VALIDATION, fmt \\\"\\\\n\\\", __VA_ARGS__)\"),\n     (\"src/wallet/wallet.h\",  \"WalletLogPrintf(std::string fmt, Params... parameters)\"),\n     (\"src/wallet/wallet.h\", \"LogPrintf((\\\"%s \\\" + fmt).c_str(), GetDisplayName(), parameters...)\"),\n+    (\"src/wallet/scriptpubkeyman.h\",  \"WalletLogPrintf(std::string fmt, Params... parameters)\"),\n+    (\"src/wallet/scriptpubkeyman.h\", \"LogPrintf((\\\"%s \\\" + fmt).c_str(), m_storage.GetDisplayName(), parameters...)\"),\n     (\"src/logging.h\", \"LogPrintf(const char* fmt, const Args&... args)\"),\n     (\"src/wallet/scriptpubkeyman.h\", \"WalletLogPrintf(const std::string& fmt, const Params&... parameters)\"),\n-    (\"src/wallet/scriptpubkeyman.cpp\", \"WalletLogPrintf(fmt, parameters...)\"),\n-    (\"src/wallet/scriptpubkeyman.cpp\", \"WalletLogPrintf(const std::string& fmt, const Params&... parameters)\"),\n ]\n \n "
      }
    ]
  },
  {
    "sha": "3afe53c4039103670cec5f9cace897ead76e20a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWZlNTNjNDAzOTEwMzY3MGNlYzVmOWNhY2U4OTdlYWQ3NmUyMGE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "Cleanup: Drop unused GUI learnRelatedScripts method\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "fbeb995ef236937a7f9d72ac00d368ca303c563d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbeb995ef236937a7f9d72ac00d368ca303c563d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3afe53c4039103670cec5f9cace897ead76e20a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3afe53c4039103670cec5f9cace897ead76e20a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3afe53c4039103670cec5f9cace897ead76e20a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3afe53c4039103670cec5f9cace897ead76e20a8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2f02aa59e3402048269362ff692d49a6df35cfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f02aa59e3402048269362ff692d49a6df35cfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f02aa59e3402048269362ff692d49a6df35cfd"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b97bbab3330abd80cf5d7e40ec51c236009fbeda",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afe53c4039103670cec5f9cace897ead76e20a8/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afe53c4039103670cec5f9cace897ead76e20a8/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=3afe53c4039103670cec5f9cace897ead76e20a8",
        "patch": "@@ -180,7 +180,6 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet->GetLegacyScriptPubKeyMan()->LearnRelatedScripts(key, type); }\n     bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n     {\n         LOCK(m_wallet->cs_wallet);"
      },
      {
        "sha": "d4280e8091b6da317569e8b05cc73c6ebd2f0b4b",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3afe53c4039103670cec5f9cace897ead76e20a8/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3afe53c4039103670cec5f9cace897ead76e20a8/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=3afe53c4039103670cec5f9cace897ead76e20a8",
        "patch": "@@ -108,10 +108,6 @@ class Wallet\n     //! Get wallet address list.\n     virtual std::vector<WalletAddress> getAddresses() = 0;\n \n-    //! Add scripts to key store so old so software versions opening the wallet\n-    //! database can detect payments to newer address types.\n-    virtual void learnRelatedScripts(const CPubKey& key, OutputType type) = 0;\n-\n     //! Add dest data.\n     virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n "
      }
    ]
  },
  {
    "sha": "3f373659d732a5b1e5fdc692a45b2b8179f66bec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjM3MzY1OWQ3MzJhNWIxZTVmZGM2OTJhNDViMmI4MTc5ZjY2YmVj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-07T18:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-23T21:35:08Z"
      },
      "message": "Refactor: Replace SigningProvider pointers with unique_ptrs\n\nNeeded for future ScriptPubKeyMans which may need to create\nSigningProviders dynamically and thus a normal pointer is not enough\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "0b2c0732141b11956d37c056aff054d3580bac6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b2c0732141b11956d37c056aff054d3580bac6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f373659d732a5b1e5fdc692a45b2b8179f66bec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f373659d732a5b1e5fdc692a45b2b8179f66bec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f373659d732a5b1e5fdc692a45b2b8179f66bec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f373659d732a5b1e5fdc692a45b2b8179f66bec/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3afe53c4039103670cec5f9cace897ead76e20a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3afe53c4039103670cec5f9cace897ead76e20a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3afe53c4039103670cec5f9cace897ead76e20a8"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 46,
      "deletions": 30
    },
    "files": [
      {
        "sha": "baea71d0bb873c74f5fa7973315a1ee6aca2b8ee",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=3f373659d732a5b1e5fdc692a45b2b8179f66bec",
        "patch": "@@ -119,15 +119,15 @@ class WalletImpl : public Wallet\n     }\n     bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) override\n     {\n-        const SigningProvider* provider = m_wallet->GetSigningProvider(script);\n+        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n         if (provider) {\n             return provider->GetPubKey(address, pub_key);\n         }\n         return false;\n     }\n     bool getPrivKey(const CScript& script, const CKeyID& address, CKey& key) override\n     {\n-        const SigningProvider* provider = m_wallet->GetSigningProvider(script);\n+        std::unique_ptr<SigningProvider> provider = m_wallet->GetSigningProvider(script);\n         if (provider) {\n             return provider->GetKey(address, key);\n         }"
      },
      {
        "sha": "b9dde5e99f61df02499463fe1bfcd5732a5a4ba2",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=3f373659d732a5b1e5fdc692a45b2b8179f66bec",
        "patch": "@@ -52,21 +52,21 @@ TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& ps\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        const SigningProvider* provider = pwallet->GetSigningProvider(script, sigdata);\n+        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script, sigdata);\n         if (!provider) {\n             complete = false;\n             continue;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(provider, !sign, !bip32derivs), psbtx, i, sighash_type);\n+        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n     for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n         const CTxOut& out = psbtx.tx->vout.at(i);\n-        const SigningProvider* provider = pwallet->GetSigningProvider(out.scriptPubKey);\n+        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(out.scriptPubKey);\n         if (provider) {\n-            UpdatePSBTOutput(HidingSigningProvider(provider, true, !bip32derivs), psbtx, i);\n+            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n         }\n     }\n "
      },
      {
        "sha": "df71f97e85163c245926c8a6bfd5c4a647149611",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3f373659d732a5b1e5fdc692a45b2b8179f66bec",
        "patch": "@@ -565,7 +565,7 @@ static UniValue signmessage(const JSONRPCRequest& request)\n     }\n \n     CScript script_pub_key = GetScriptForDestination(*pkhash);\n-    const SigningProvider* provider = pwallet->GetSigningProvider(script_pub_key);\n+    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script_pub_key);\n     if (!provider) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n     }\n@@ -2948,7 +2948,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 entry.pushKV(\"label\", i->second.name);\n             }\n \n-            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n             if (provider) {\n                 if (scriptPubKey.IsPayToScriptHash()) {\n                     const CScriptID& hash = CScriptID(boost::get<ScriptHash>(address));\n@@ -2988,7 +2988,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n             if (provider) {\n                 auto descriptor = InferDescriptor(scriptPubKey, *provider);\n                 entry.pushKV(\"desc\", descriptor->ToString());\n@@ -3301,21 +3301,21 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n     // Parse the prevtxs array\n     ParsePrevouts(request.params[1], nullptr, coins);\n \n-    std::set<const SigningProvider*> providers;\n+    std::set<std::shared_ptr<SigningProvider>> providers;\n     for (const std::pair<COutPoint, Coin> coin_pair : coins) {\n-        const SigningProvider* provider = pwallet->GetSigningProvider(coin_pair.second.out.scriptPubKey);\n+        std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(coin_pair.second.out.scriptPubKey);\n         if (provider) {\n             providers.insert(std::move(provider));\n         }\n     }\n     if (providers.size() == 0) {\n-        // When there are no available providers, use DUMMY_SIGNING_PROVIDER so we can check if the tx is complete\n-        providers.insert(&DUMMY_SIGNING_PROVIDER);\n+        // When there are no available providers, use a dummy SigningProvider so we can check if the tx is complete\n+        providers.insert(std::make_shared<SigningProvider>());\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    for (const SigningProvider* provider : providers) {\n-        SignTransaction(mtx, provider, coins, request.params[2], result);\n+    for (std::shared_ptr<SigningProvider> provider : providers) {\n+        SignTransaction(mtx, provider.get(), coins, request.params[2], result);\n     }\n      return result;\n }\n@@ -3701,12 +3701,12 @@ static UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& de\n     UniValue ret(UniValue::VOBJ);\n     UniValue detail = DescribeAddress(dest);\n     CScript script = GetScriptForDestination(dest);\n-    const SigningProvider* provider = nullptr;\n+    std::unique_ptr<SigningProvider> provider = nullptr;\n     if (pwallet) {\n         provider = pwallet->GetSigningProvider(script);\n     }\n     ret.pushKVs(detail);\n-    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider), dest));\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(provider.get()), dest));\n     return ret;\n }\n \n@@ -3804,7 +3804,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     CScript scriptPubKey = GetScriptForDestination(dest);\n     ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n-    const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(scriptPubKey);\n \n     isminetype mine = pwallet->IsMine(dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));"
      },
      {
        "sha": "4c9d88973e9a00d72ee8b6c4586f5f5b6359fbba",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3f373659d732a5b1e5fdc692a45b2b8179f66bec",
        "patch": "@@ -469,9 +469,9 @@ int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n     return nTimeFirstKey;\n }\n \n-const SigningProvider* LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n {\n-    return this;\n+    return MakeUnique<LegacySigningProvider>(*this);\n }\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)"
      },
      {
        "sha": "85e4092dd9f55653fce66b7ba1949e6c515961c3",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=3f373659d732a5b1e5fdc692a45b2b8179f66bec",
        "patch": "@@ -198,7 +198,7 @@ class ScriptPubKeyMan\n \n     virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n \n-    virtual const SigningProvider* GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n \n     /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n       * sigdata, can produce a valid signature.\n@@ -341,7 +341,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanGetAddresses(bool internal = false) override;\n \n-    const SigningProvider* GetSigningProvider(const CScript& script) const override;\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n@@ -442,4 +442,20 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::set<CKeyID> GetKeys() const override;\n };\n \n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+class LegacySigningProvider : public SigningProvider\n+{\n+private:\n+    const LegacyScriptPubKeyMan& m_spk_man;\n+public:\n+    LegacySigningProvider(const LegacyScriptPubKeyMan& spk_man) : m_spk_man(spk_man) {}\n+\n+    bool GetCScript(const CScriptID &scriptid, CScript& script) const override { return m_spk_man.GetCScript(scriptid, script); }\n+    bool HaveCScript(const CScriptID &scriptid) const override { return m_spk_man.HaveCScript(scriptid); }\n+    bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const override { return m_spk_man.GetPubKey(address, pubkey); }\n+    bool GetKey(const CKeyID &address, CKey& key) const override { return m_spk_man.GetKey(address, key); }\n+    bool HaveKey(const CKeyID &address) const override { return m_spk_man.HaveKey(address); }\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n+};\n+\n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "4a38571dfc76d8c074e3f2f17c184b142145a376",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3f373659d732a5b1e5fdc692a45b2b8179f66bec",
        "patch": "@@ -1399,7 +1399,7 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n+    std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n     if (!provider) {\n         // We don't know about this scriptpbuKey;\n         return false;\n@@ -2163,7 +2163,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n-            const SigningProvider* provider = GetSigningProvider(wtx.tx->vout[i].scriptPubKey);\n+            std::unique_ptr<SigningProvider> provider = GetSigningProvider(wtx.tx->vout[i].scriptPubKey);\n \n             bool solvable = provider ? IsSolvable(*provider, wtx.tx->vout[i].scriptPubKey) : false;\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n@@ -2417,7 +2417,7 @@ bool CWallet::SignTransaction(CMutableTransaction& tx)\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;\n \n-        const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n+        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n         if (!provider) {\n             // We don't know about this scriptpbuKey;\n             return false;\n@@ -2886,7 +2886,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                const SigningProvider* provider = GetSigningProvider(scriptPubKey);\n+                std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n                 if (!provider || !ProduceSignature(*provider, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\").translated;\n@@ -4165,13 +4165,13 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const uint256& id) const\n     return nullptr;\n }\n \n-const SigningProvider* CWallet::GetSigningProvider(const CScript& script) const\n+std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script) const\n {\n     SignatureData sigdata;\n     return GetSigningProvider(script, sigdata);\n }\n \n-const SigningProvider* CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n+std::unique_ptr<SigningProvider> CWallet::GetSigningProvider(const CScript& script, SignatureData& sigdata) const\n {\n     for (const auto& spk_man_pair : m_spk_managers) {\n         if (spk_man_pair.second->CanProvide(script, sigdata)) {"
      },
      {
        "sha": "9f3bab9c66b492cd5a05c7a946a3442ab6ea2579",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f373659d732a5b1e5fdc692a45b2b8179f66bec/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3f373659d732a5b1e5fdc692a45b2b8179f66bec",
        "patch": "@@ -1154,8 +1154,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n     //! Get the SigningProvider for a script\n-    const SigningProvider* GetSigningProvider(const CScript& script) const;\n-    const SigningProvider* GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n \n     //! Get the LegacyScriptPubKeyMan which is used for all types, internal, and external.\n     LegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan() const;"
      }
    ]
  }
]