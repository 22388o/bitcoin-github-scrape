[
  {
    "sha": "41edaf227a69bc4846d5996675e8763fdfe0f367",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWVkYWYyMjdhNjliYzQ4NDZkNTk5NjY3NWU4NzYzZmRmZTBmMzY3",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-09-19T17:59:49Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-11-04T19:13:52Z"
      },
      "message": "logs: add BCLog::Timer and related macros\n\nMakes logging timing information about a block of code easier.",
      "tree": {
        "sha": "c32c58d79efd20e311b454c9b360f5d084bc1087",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c32c58d79efd20e311b454c9b360f5d084bc1087"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41edaf227a69bc4846d5996675e8763fdfe0f367",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41edaf227a69bc4846d5996675e8763fdfe0f367",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41edaf227a69bc4846d5996675e8763fdfe0f367",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41edaf227a69bc4846d5996675e8763fdfe0f367/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d86f4d3dacab38f3cd5371d0c920585c178302c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d86f4d3dacab38f3cd5371d0c920585c178302c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d86f4d3dacab38f3cd5371d0c920585c178302c"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 142,
      "deletions": 0
    },
    "files": [
      {
        "sha": "798fab1b02c7f9b8ce762ed8d76f62ad10980556",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41edaf227a69bc4846d5996675e8763fdfe0f367/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41edaf227a69bc4846d5996675e8763fdfe0f367/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=41edaf227a69bc4846d5996675e8763fdfe0f367",
        "patch": "@@ -146,6 +146,7 @@ BITCOIN_CORE_H = \\\n   dbwrapper.h \\\n   limitedmap.h \\\n   logging.h \\\n+  logging/timer.h \\\n   memusage.h \\\n   merkleblock.h \\\n   miner.h \\"
      },
      {
        "sha": "8a0fa1bdc5e794d0c8048c39455cd4ebb9a77086",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41edaf227a69bc4846d5996675e8763fdfe0f367/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41edaf227a69bc4846d5996675e8763fdfe0f367/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=41edaf227a69bc4846d5996675e8763fdfe0f367",
        "patch": "@@ -110,6 +110,7 @@ BITCOIN_TESTS =\\\n   test/key_io_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n+  test/logging_tests.cpp \\\n   test/dbwrapper_tests.cpp \\\n   test/validation_tests.cpp \\\n   test/mempool_tests.cpp \\"
      },
      {
        "sha": "34dbb942c5a03b9fb5cad1f96ba22ba89672f06c",
        "filename": "src/logging/timer.h",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41edaf227a69bc4846d5996675e8763fdfe0f367/src/logging/timer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41edaf227a69bc4846d5996675e8763fdfe0f367/src/logging/timer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging/timer.h?ref=41edaf227a69bc4846d5996675e8763fdfe0f367",
        "patch": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_LOGGING_TIMER_H\n+#define BITCOIN_LOGGING_TIMER_H\n+\n+#include <logging.h>\n+#include <util/macros.h>\n+#include <util/time.h>\n+\n+#include <chrono>\n+#include <string>\n+\n+\n+namespace BCLog {\n+\n+//! RAII-style object that outputs timing information to logs.\n+template <typename TimeType>\n+class Timer\n+{\n+public:\n+    //! If log_category is left as the default, end_msg will log unconditionally\n+    //! (instead of being filtered by category).\n+    Timer(\n+        std::string prefix,\n+        std::string end_msg,\n+        BCLog::LogFlags log_category = BCLog::LogFlags::ALL) :\n+            m_prefix(std::move(prefix)),\n+            m_title(std::move(end_msg)),\n+            m_log_category(log_category)\n+    {\n+        this->Log(strprintf(\"%s started\", m_title));\n+        m_start_t = GetTime<std::chrono::microseconds>();\n+    }\n+\n+    ~Timer()\n+    {\n+        this->Log(strprintf(\"%s completed\", m_title));\n+    }\n+\n+    void Log(const std::string& msg)\n+    {\n+        const std::string full_msg = this->LogMsg(msg);\n+\n+        if (m_log_category == BCLog::LogFlags::ALL) {\n+            LogPrintf(\"%s\\n\", full_msg);\n+        } else {\n+            LogPrint(m_log_category, \"%s\\n\", full_msg);\n+        }\n+    }\n+\n+    std::string LogMsg(const std::string& msg)\n+    {\n+        const auto end_time = GetTime<std::chrono::microseconds>() - m_start_t;\n+        if (m_start_t.count() <= 0) {\n+            return strprintf(\"%s: %s\", m_prefix, msg);\n+        }\n+\n+        std::string units = \"\";\n+        float divisor = 1;\n+\n+        if (std::is_same<TimeType, std::chrono::microseconds>::value) {\n+            units = \"\u03bcs\";\n+        } else if (std::is_same<TimeType, std::chrono::milliseconds>::value) {\n+            units = \"ms\";\n+            divisor = 1000.;\n+        } else if (std::is_same<TimeType, std::chrono::seconds>::value) {\n+            units = \"s\";\n+            divisor = 1000. * 1000.;\n+        }\n+\n+        const float time_ms = end_time.count() / divisor;\n+        return strprintf(\"%s: %s (%.2f%s)\", m_prefix, msg, time_ms, units);\n+    }\n+\n+private:\n+    std::chrono::microseconds m_start_t{};\n+\n+    //! Log prefix; usually the name of the function this was created in.\n+    const std::string m_prefix{};\n+\n+    //! A descriptive message of what is being timed.\n+    const std::string m_title{};\n+\n+    //! Forwarded on to LogPrint if specified - has the effect of only\n+    //! outputing the timing log when a particular debug= category is specified.\n+    const BCLog::LogFlags m_log_category{};\n+\n+};\n+\n+} // namespace BCLog\n+\n+\n+#define LOG_TIME_MICROS(end_msg, ...) \\\n+    BCLog::Timer<std::chrono::microseconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)\n+#define LOG_TIME_MILLIS(end_msg, ...) \\\n+    BCLog::Timer<std::chrono::milliseconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)\n+#define LOG_TIME_SECONDS(end_msg, ...) \\\n+    BCLog::Timer<std::chrono::seconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)\n+\n+\n+#endif // BITCOIN_LOGGING_TIMER_H"
      },
      {
        "sha": "eb1826ae8d9eebf60c120a1310af37d2d8dd7950",
        "filename": "src/test/logging_tests.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41edaf227a69bc4846d5996675e8763fdfe0f367/src/test/logging_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41edaf227a69bc4846d5996675e8763fdfe0f367/src/test/logging_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/logging_tests.cpp?ref=41edaf227a69bc4846d5996675e8763fdfe0f367",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <logging.h>\n+#include <logging/timer.h>\n+#include <test/setup_common.h>\n+\n+#include <chrono>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(logging_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(logging_timer)\n+{\n+\n+    SetMockTime(1);\n+    auto sec_timer = BCLog::Timer<std::chrono::seconds>(\"tests\", \"end_msg\");\n+    SetMockTime(2);\n+    BOOST_CHECK_EQUAL(sec_timer.LogMsg(\"test secs\"), \"tests: test secs (1.00s)\");\n+\n+    SetMockTime(1);\n+    auto ms_timer = BCLog::Timer<std::chrono::milliseconds>(\"tests\", \"end_msg\");\n+    SetMockTime(2);\n+    BOOST_CHECK_EQUAL(ms_timer.LogMsg(\"test ms\"), \"tests: test ms (1000.00ms)\");\n+\n+    SetMockTime(1);\n+    auto micro_timer = BCLog::Timer<std::chrono::microseconds>(\"tests\", \"end_msg\");\n+    SetMockTime(2);\n+    BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000.00\u03bcs)\");\n+\n+    SetMockTime(0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "dcef9a2922317cb2849f397366b6c56d755db6c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2VmOWEyOTIyMzE3Y2IyODQ5ZjM5NzM2NmI2YzU2ZDc1NWRiNmM5",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-08-21T16:03:39Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2019-11-04T19:13:54Z"
      },
      "message": "logs: add timing information to FlushStateToDisk()",
      "tree": {
        "sha": "7691663b89fd150872ddba796f40d5a07ab7eb42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7691663b89fd150872ddba796f40d5a07ab7eb42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcef9a2922317cb2849f397366b6c56d755db6c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcef9a2922317cb2849f397366b6c56d755db6c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcef9a2922317cb2849f397366b6c56d755db6c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcef9a2922317cb2849f397366b6c56d755db6c9/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41edaf227a69bc4846d5996675e8763fdfe0f367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41edaf227a69bc4846d5996675e8763fdfe0f367",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41edaf227a69bc4846d5996675e8763fdfe0f367"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 26,
      "deletions": 3
    },
    "files": [
      {
        "sha": "01355216535ccd52938811903f90721b82289db1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcef9a2922317cb2849f397366b6c56d755db6c9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcef9a2922317cb2849f397366b6c56d755db6c9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dcef9a2922317cb2849f397366b6c56d755db6c9",
        "patch": "@@ -18,6 +18,8 @@\n #include <flatfile.h>\n #include <hash.h>\n #include <index/txindex.h>\n+#include <logging.h>\n+#include <logging/timer.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n@@ -2023,15 +2025,23 @@ bool CChainState::FlushStateToDisk(\n     static int64_t nLastFlush = 0;\n     std::set<int> setFilesToPrune;\n     bool full_flush_completed = false;\n+\n+    const size_t coins_count = CoinsTip().GetCacheSize();\n+    const size_t coins_mem_usage = CoinsTip().DynamicMemoryUsage();\n+\n     try {\n     {\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {\n+                LOG_TIME_MILLIS(\"find files to prune (manual)\", BCLog::BENCH);\n+\n                 FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n             } else {\n+                LOG_TIME_MILLIS(\"find files to prune\", BCLog::BENCH);\n+\n                 FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n                 fCheckForPruning = false;\n             }\n@@ -2070,10 +2080,17 @@ bool CChainState::FlushStateToDisk(\n             if (!CheckDiskSpace(GetBlocksDir())) {\n                 return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n             }\n-            // First make sure all block and undo data is flushed to disk.\n-            FlushBlockFile();\n+            {\n+                LOG_TIME_MILLIS(\"write block and undo data to disk\", BCLog::BENCH);\n+\n+                // First make sure all block and undo data is flushed to disk.\n+                FlushBlockFile();\n+            }\n+\n             // Then update all block file information (which may refer to block and undo files).\n             {\n+                LOG_TIME_MILLIS(\"write block index to disk\", BCLog::BENCH);\n+\n                 std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n                 vFiles.reserve(setDirtyFileInfo.size());\n                 for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n@@ -2091,12 +2108,18 @@ bool CChainState::FlushStateToDisk(\n                 }\n             }\n             // Finally remove any pruned files\n-            if (fFlushForPrune)\n+            if (fFlushForPrune) {\n+                LOG_TIME_MILLIS(\"unlink pruned files\", BCLog::BENCH);\n+\n                 UnlinkPrunedFiles(setFilesToPrune);\n+            }\n             nLastWrite = nNow;\n         }\n         // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n         if (fDoFullFlush && !CoinsTip().GetBestBlock().IsNull()) {\n+            LOG_TIME_SECONDS(strprintf(\"write coins cache to disk (%d coins, %.2fkB)\",\n+                coins_count, coins_mem_usage / 1000));\n+\n             // Typical Coin structures on disk are around 48 bytes in size.\n             // Pushing a new one to the database can cause it to be written\n             // twice (once in the log, and once in the tables). This is already"
      }
    ]
  }
]