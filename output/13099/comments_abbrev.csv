skeees,2018-04-27T14:49:26Z,Thoughts on pulling the `TraceThread` class out of util into the new files you're creating here? Seems like a good home for tracethread and would reduce the clutter in util,https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-384993376,384993376,
practicalswift,2018-04-27T16:18:33Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385020386,385020386,
jamesob,2018-04-27T17:38:14Z,"@promag thanks for the review; I've pushed changes incorporating your feedback.\n\n@skeees I like that idea but maybe we can save it for a future PR? That entails changing a bunch of call sites and I'm worried about introducing a circular dependency between util and threadnames (by way of logging).",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385042045,385042045,
TheBlueMatt,2018-04-28T00:40:42Z,"How does the use of boost::thread::id interact with eventual boost::thread removal? IIRC there was something about no guarantees being made that you can interact with boost::thread if the thread was started by std, though it usually works in practice. We do have a HAVE_THREAD_LOCAL defined, which should be set everywhere but OSX, so maybe we could just turn it on there if boost::thread::id is an i",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385126024,385126024,
conscott,2018-04-30T17:53:12Z,Concept ACK- just a comment on how the maps are used. ,https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385476929,385476929,
jamesob,2018-05-01T18:39:25Z,"@TheBlueMatt good points, thanks for looking. I've pushed changes which\n- only make use of `boost::thread` when `thread_local` is not available. When it is available, we assign each thread a `thread_local`-cached ID based on a static counter.\n- incorporate @conscott's suggestion of using `m_name_to_count` which nicely cuts out a bunch of code.\n- add tests.\n\n([jamesob/threadnames.1 -> jam",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385752118,385752118,
sipa,2018-05-01T18:41:57Z,"@theuni What's the status of `thread_local` on OSX? I remember seeing https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports, but which Xcode version's patches does our clang run with, or...?",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385752850,385752850,
jamesob,2018-05-01T18:59:45Z,"I've pushed a small change removing `GetProcessName` support for *BSD systems. After double-checking `pthread_getname` support for OpenBSD, I found that [it doesn't seem to exist](https://man.openbsd.org/pthreads.3). As a result, any threads which are not explicitly named with `Rename()` will be labeled `""<unknown>""` on BSD systems.\n\n```diff\n $ diff -uw <(git diff master..threadnames.3) <(gi",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385757762,385757762,
jamesob,2018-05-02T21:42:19Z,"After spending the day figuring out that [`thread_local` is apparently broken on mingw32 compilers](https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605), I'm now falling back to boost thread IDs for WIN32. Tests are passing and this is once again ready for review.",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386130606,386130606,
jamesob,2018-05-03T13:45:18Z,"Per @sipa's advice, I'm now using `std::thread` to determine thread IDs for all platforms instead of either boost or the ham-fisted `thread_local` code.\n\n[jamesob/threadnames.11 -> jamesob/threadnames.13](https://gist.github.com/jamesob/310427d0590b1790b7601afdf86c09c8)",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386300574,386300574,
theuni,2018-05-03T16:25:07Z,"If platform-specific functions are being used anyway, why not just use pthread_getspecific/pthread_setspecific, which are meant for exactly this? That also makes it a trivial transition when we're finally ready to use thread_local.",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386354019,386354019,
jamesob,2018-05-03T17:45:35Z,"@theuni what are you talking about replacing at this point? We're now platform agnostic with `std::thread`, and it seems to work fine with boost threads. Any reason you can see that it won't work?",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386378854,386378854,
theuni,2018-05-03T18:36:19Z,"@jamesob See the top two commits here for a quick attempt: https://github.com/theuni/bitcoin/commits/thread_names\n\nThat addresses a few things that make me hesitate about this PR:\n- system thread id/name are conflated with internal use. This drags in system requirements (name length, for ex) and overhead for internal functions.\n- Heavy map lookup with locking. #12970 demonstrated how painf",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386394865,386394865,
jamesob,2018-05-03T20:08:23Z,"@theuni I think your simple implementation looks great. Very much agree with your concern re: map lookup and locking overhead, and I think there's a way to combine our approaches to avoid it. Let me know if this sounds right:\n\nIMO lock acquisition during the single `Rename()` call per thread is acceptable, but we want to avoid any subsequent locking during `GetName()` (since it is called per l",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386420332,386420332,
theuni,2018-05-03T21:14:09Z,"@jamesob Looking again, I think handling the suffix at this layer is unnecessary and adds a significant amount of complication. Why not just add a suffix before passing the name into TraceThread() ?",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386438629,386438629,
jamesob,2018-05-03T21:20:26Z,"@theuni ugh, you're right, that's dumb. Let's go off of your commits. ",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386440185,386440185,
theuni,2018-05-03T21:46:34Z,"From IRC:\n> \<cfields\> jamesob: noo!\n\<cfields\> jamesob: I hope you don't think I'm being NIH about that PR, that wasn't my intention at all. Coding up an alternative myself helps me to understand the challenges better, it wasn't meant to replace your work.",https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386447345,386447345,
jamesob,2018-04-26T22:25:14Z,Is there somewhere more general or useful I should put the two functions in this namespace?,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548289,184548289,src/threadnames.cpp
jamesob,2018-04-26T22:25:48Z,Remove or uncomment this block before merge.,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548394,184548394,src/threadnames.cpp
promag,2018-04-27T08:46:16Z,Should lock mutex.,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627159,184627159,src/threadnames.cpp
promag,2018-04-27T08:47:31Z,This could be a static function or a function in a anonymous namespace.,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627393,184627393,src/threadnames.cpp
promag,2018-04-27T08:47:49Z,This could be a static function or a function in a anonymous namespace.,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627453,184627453,src/threadnames.cpp
promag,2018-04-27T08:48:18Z,Argument could be `const std::string& name`?,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627560,184627560,src/threadnames.cpp
promag,2018-04-27T08:52:03Z,Shoud also add to `m_name_to_id`?,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628415,184628415,src/threadnames.cpp
promag,2018-04-27T08:52:37Z,Why return reference?,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628534,184628534,src/threadnames.h
jamesob,2018-04-27T14:49:05Z,"Good catch, thanks. ",https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184710702,184710702,src/threadnames.cpp
jamesob,2018-04-27T15:14:02Z,"I'd like to be able to unittest the `*Process*` functions eventually, so maybe I should just make them public.",https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184718471,184718471,src/threadnames.cpp
conscott,2018-04-30T17:46:18Z,"Bit of a nit, but maybe `m_name_to_id` could instead be a `map<string, int>` - where it just stores the occurrences of that name/prefix, then you don't have to call `CountMapPrefix`, but can just update the count each time. ",https://github.com/bitcoin/bitcoin/pull/13099#discussion_r185057629,185057629,src/threadnames.h
jamesob,2018-05-01T01:03:11Z,Thanks for the look and great suggestion. I think maintaining a map of counts will also allow me to remove all of the utility functions in the anonymous namespace - nice catch!,https://github.com/bitcoin/bitcoin/pull/13099#discussion_r185149361,185149361,src/threadnames.h
