[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384993376",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-384993376",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 384993376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDk5MzM3Ng==",
    "user": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T14:49:26Z",
    "updated_at": "2018-04-27T14:49:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thoughts on pulling the `TraceThread` class out of util into the new files you're creating here? Seems like a good home for tracethread and would reduce the clutter in util",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384993376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385020386",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385020386",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 385020386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTAyMDM4Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T16:18:33Z",
    "updated_at": "2018-04-27T16:18:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385020386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385042045",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385042045",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 385042045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTA0MjA0NQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T17:38:14Z",
    "updated_at": "2018-04-27T17:38:14Z",
    "author_association": "MEMBER",
    "body": "@promag thanks for the review; I've pushed changes incorporating your feedback.\r\n\r\n@skeees I like that idea but maybe we can save it for a future PR? That entails changing a bunch of call sites and I'm worried about introducing a circular dependency between util and threadnames (by way of logging).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385042045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385126024",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385126024",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 385126024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTEyNjAyNA==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-28T00:40:42Z",
    "updated_at": "2018-04-28T00:40:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "How does the use of boost::thread::id interact with eventual boost::thread removal? IIRC there was something about no guarantees being made that you can interact with boost::thread if the thread was started by std, though it usually works in practice. We do have a HAVE_THREAD_LOCAL defined, which should be set everywhere but OSX, so maybe we could just turn it on there if boost::thread::id is an issue?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385126024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385476929",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385476929",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 385476929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQ3NjkyOQ==",
    "user": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?u=e1ddf3e2c74a5ddd5b994a62d53efabe8adab5ae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-30T17:53:12Z",
    "updated_at": "2018-04-30T17:53:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK- just a comment on how the maps are used. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385476929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385752118",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385752118",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 385752118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc1MjExOA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T18:39:25Z",
    "updated_at": "2018-05-01T18:39:25Z",
    "author_association": "MEMBER",
    "body": "@TheBlueMatt good points, thanks for looking. I've pushed changes which\r\n- only make use of `boost::thread` when `thread_local` is not available. When it is available, we assign each thread a `thread_local`-cached ID based on a static counter.\r\n- incorporate @conscott's suggestion of using `m_name_to_count` which nicely cuts out a bunch of code.\r\n- add tests.\r\n\r\n([jamesob/threadnames.1 -> jamesob/threadnames.3](https://gist.github.com/jamesob/88f7cf082ee0bf97a2411bf8bd120594))\r\n\r\nThis changeset is ready for review-for-merge IMO.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385752118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385752850",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385752850",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 385752850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc1Mjg1MA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T18:41:57Z",
    "updated_at": "2018-05-01T18:41:57Z",
    "author_association": "MEMBER",
    "body": "@theuni What's the status of `thread_local` on OSX? I remember seeing https://stackoverflow.com/questions/28094794/why-does-apple-clang-disallow-c11-thread-local-when-official-clang-supports, but which Xcode version's patches does our clang run with, or...?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385752850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385757762",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-385757762",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 385757762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc1Nzc2Mg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T18:59:45Z",
    "updated_at": "2018-05-01T18:59:45Z",
    "author_association": "MEMBER",
    "body": "I've pushed a small change removing `GetProcessName` support for *BSD systems. After double-checking `pthread_getname` support for OpenBSD, I found that [it doesn't seem to exist](https://man.openbsd.org/pthreads.3). As a result, any threads which are not explicitly named with `Rename()` will be labeled `\"<unknown>\"` on BSD systems.\r\n\r\n```diff\r\n $ diff -uw <(git diff master..threadnames.3) <(git diff master..threadnames.4)\r\n\r\n--- /proc/self/fd/12    2018-05-01 14:56:59.561313752 -0400\r\n+++ /proc/self/fd/13    2018-05-01 14:56:59.549313568 -0400\r\n@@ -2215,10 +2215,10 @@\r\n      void reset();\r\n diff --git a/src/threadnames.cpp b/src/threadnames.cpp\r\n new file mode 100644\r\n-index 0000000..305c3b4\r\n+index 0000000..92e3f75\r\n --- /dev/null\r\n +++ b/src/threadnames.cpp\r\n-@@ -0,0 +1,135 @@\r\n+@@ -0,0 +1,133 @@\r\n +// Copyright (c) 2018 The Bitcoin Core developers\r\n +// Distributed under the MIT software license, see the accompanying\r\n +// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n@@ -2345,8 +2345,6 @@\r\n +\r\n +#if defined(PR_GET_NAME)\r\n +    ::prctl(PR_GET_NAME, pthreadname_buff);\r\n-+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\r\n-+    pthread_get_name_np(pthread_self(), pthreadname_buff);\r\n +#elif defined(MAC_OSX)\r\n +    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\r\n +#else\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385757762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386130606",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386130606",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386130606,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjEzMDYwNg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T21:42:19Z",
    "updated_at": "2018-05-02T21:42:19Z",
    "author_association": "MEMBER",
    "body": "After spending the day figuring out that [`thread_local` is apparently broken on mingw32 compilers](https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605), I'm now falling back to boost thread IDs for WIN32. Tests are passing and this is once again ready for review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386130606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386300574",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386300574",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386300574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjMwMDU3NA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T13:45:18Z",
    "updated_at": "2018-05-03T13:45:18Z",
    "author_association": "MEMBER",
    "body": "Per @sipa's advice, I'm now using `std::thread` to determine thread IDs for all platforms instead of either boost or the ham-fisted `thread_local` code.\r\n\r\n[jamesob/threadnames.11 -> jamesob/threadnames.13](https://gist.github.com/jamesob/310427d0590b1790b7601afdf86c09c8)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386300574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386354019",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386354019",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386354019,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjM1NDAxOQ==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T16:25:07Z",
    "updated_at": "2018-05-03T16:25:07Z",
    "author_association": "MEMBER",
    "body": "If platform-specific functions are being used anyway, why not just use pthread_getspecific/pthread_setspecific, which are meant for exactly this? That also makes it a trivial transition when we're finally ready to use thread_local.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386354019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386378854",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386378854",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386378854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjM3ODg1NA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T17:45:35Z",
    "updated_at": "2018-05-03T17:45:35Z",
    "author_association": "MEMBER",
    "body": "@theuni what are you talking about replacing at this point? We're now platform agnostic with `std::thread`, and it seems to work fine with boost threads. Any reason you can see that it won't work?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386378854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386394865",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386394865",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386394865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjM5NDg2NQ==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T18:36:19Z",
    "updated_at": "2018-05-03T18:36:19Z",
    "author_association": "MEMBER",
    "body": "@jamesob See the top two commits here for a quick attempt: https://github.com/theuni/bitcoin/commits/thread_names\r\n\r\nThat addresses a few things that make me hesitate about this PR:\r\n- system thread id/name are conflated with internal use. This drags in system requirements (name length, for ex) and overhead for internal functions.\r\n- Heavy map lookup with locking. #12970 demonstrated how painful overhead in logging can be.\r\n- Most can go away once we can use thread_local unconditionally.\r\n\r\nI realize that my changes are oversimplified, it's just a quick POC for discussion.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386394865/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386420332",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386420332",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386420332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQyMDMzMg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T20:08:23Z",
    "updated_at": "2018-05-03T20:08:23Z",
    "author_association": "MEMBER",
    "body": "@theuni I think your simple implementation looks great. Very much agree with your concern re: map lookup and locking overhead, and I think there's a way to combine our approaches to avoid it. Let me know if this sounds right:\r\n\r\nIMO lock acquisition during the single `Rename()` call per thread is acceptable, but we want to avoid any subsequent locking during `GetName()` (since it is called per logline). So: during `Rename()` we can use Registry's count map for numeric suffix generation and then use your method for caching the name of the thread for use during `GetName()`.\r\n\r\nIf that sounds good to you, I'll cherry-pick your two commits onto this branch and reorganize accordingly. Otherwise if you think the numeric suffix isn't worthwhile, I'm happy to close this out and proceed on your commits only.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386420332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386438629",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386438629",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386438629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQzODYyOQ==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T21:14:09Z",
    "updated_at": "2018-05-03T21:14:09Z",
    "author_association": "MEMBER",
    "body": "@jamesob Looking again, I think handling the suffix at this layer is unnecessary and adds a significant amount of complication. Why not just add a suffix before passing the name into TraceThread() ?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386438629/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386440185",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386440185",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386440185,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ0MDE4NQ==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T21:20:26Z",
    "updated_at": "2018-05-03T21:20:26Z",
    "author_association": "MEMBER",
    "body": "@theuni ugh, you're right, that's dumb. Let's go off of your commits. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386440185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386447345",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#issuecomment-386447345",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13099",
    "id": 386447345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjQ0NzM0NQ==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T21:46:34Z",
    "updated_at": "2018-05-03T21:46:34Z",
    "author_association": "MEMBER",
    "body": "From IRC:\r\n> \\<cfields\\> jamesob: noo!\r\n\\<cfields\\> jamesob: I hope you don't think I'm being NIH about that PR, that wasn't my intention at all. Coding up an alternative myself helps me to understand the challenges better, it wasn't meant to replace your work.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386447345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548289",
    "pull_request_review_id": 115769336,
    "id": 184548289,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU0ODI4OQ==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_name_registry(new ThreadNameRegistry());\n+\n+namespace {",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "121002fddf40b9c667f962ab40b5d7a5223d4cb4",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is there somewhere more general or useful I should put the two functions in this namespace?",
    "created_at": "2018-04-26T22:25:14Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548289",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548289"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548289"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548394",
    "pull_request_review_id": 115769466,
    "id": 184548394,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDU0ODM5NA==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_name_registry(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Register(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "121002fddf40b9c667f962ab40b5d7a5223d4cb4",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Remove or uncomment this block before merge.",
    "created_at": "2018-04-26T22:25:48Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548394",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548394"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184548394"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184548394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627159",
    "pull_request_review_id": 115862133,
    "id": 184627159,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDYyNzE1OQ==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 102,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should lock mutex.",
    "created_at": "2018-04-27T08:46:16Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627159",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627159"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627159"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627159/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627393",
    "pull_request_review_id": 115862133,
    "id": 184627393,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDYyNzM5Mw==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 113,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This could be a static function or a function in a anonymous namespace.",
    "created_at": "2018-04-27T08:47:31Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627393",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627393"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627393"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 113,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627453",
    "pull_request_review_id": 115862133,
    "id": 184627453,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDYyNzQ1Mw==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string ThreadNameRegistry::GetProcessThreadName()",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 129,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This could be a static function or a function in a anonymous namespace.",
    "created_at": "2018-04-27T08:47:49Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627453",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627453"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627453"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 129,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627560",
    "pull_request_review_id": 115862133,
    "id": 184627560,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDYyNzU2MA==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 113,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Argument could be `const std::string& name`?",
    "created_at": "2018-04-27T08:48:18Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627560",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627560"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184627560"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184627560/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 113,
    "side": "RIGHT",
    "in_reply_to_id": 184627393
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628415",
    "pull_request_review_id": 115862133,
    "id": 184628415,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDYyODQxNQ==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shoud also add to `m_name_to_id`?",
    "created_at": "2018-04-27T08:52:03Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628415",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628415"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628415"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628534",
    "pull_request_review_id": 115862133,
    "id": 184628534,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDYyODUzNA==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_THREADNAMES_H\n+#define BITCOIN_THREADNAMES_H\n+\n+#include <map>\n+#include <mutex>\n+\n+#include <boost/thread.hpp>\n+\n+\n+/**\n+ * Keeps a map of thread IDs to string names and handles system-level thread naming.\n+ */\n+class ThreadNameRegistry\n+{\n+public:\n+    const std::string& GetThreadName();",
    "path": "src/threadnames.h",
    "position": null,
    "original_position": 20,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why return reference?",
    "created_at": "2018-04-27T08:52:37Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628534",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628534"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184628534"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184628534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184710702",
    "pull_request_review_id": 115966694,
    "id": 184710702,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDcxMDcwMg==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch, thanks. ",
    "created_at": "2018-04-27T14:49:05Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184710702",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184710702"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184710702"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184710702/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 184628415
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184718471",
    "pull_request_review_id": 115976185,
    "id": 184718471,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDcxODQ3MQ==",
    "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <boost/thread.hpp>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME\n+#endif\n+\n+\n+extern int LogPrintStr(const std::string &str);\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+namespace {\n+\n+/**\n+ * @return true if `to_check` is prefixed with `prefix`.\n+ */\n+bool HasPrefix(const std::string& to_check, const std::string& prefix) {\n+    return to_check.compare(0, prefix.size(), prefix) == 0;\n+}\n+\n+/**\n+ * Count the number of entries in a map with a given prefix.\n+ *\n+ * @return The number of occurrences of keys with the given prefix.\n+ */\n+template <class T>\n+int CountMapPrefixes(T map, const std::string& prefix) {\n+    auto it = map.lower_bound(prefix);\n+    int count = 0;\n+\n+    while (it != map.end() && HasPrefix(it->first, prefix)) {\n+        ++it; ++count;\n+    }\n+\n+    return count;\n+}\n+\n+} // namespace\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name, CountMapPrefixes(m_name_to_id, name));\n+    }\n+\n+    std::string process_name(name);\n+\n+    /*\n+     * Uncomment if we want to retain the `bitcoin-` system thread name prefix.\n+     *\n+    const std::string process_prefix(\"bitcoin-\");\n+    if (!HasPrefix(process_name, process_prefix)) {\n+        process_name = process_prefix + process_name;\n+    }\n+    */\n+\n+    RenameProcessThread(process_name.c_str());\n+\n+    auto thread_id = boost::this_thread::get_id();\n+    auto it_name = m_name_to_id.find(name);\n+    auto it_id = m_id_to_name.find(thread_id);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_id.end() && it_name->second != thread_id) {\n+        std::stringstream errmsg; // stringstream use necessary to get thread_id into a string.\n+        errmsg << \"Thread name '\" << name << \"' already registered (id: \" << it_name->second << \")\\n\";\n+        LogPrintStr(errmsg.str());\n+        return false;\n+    }\n+    // Warn on reregistration.\n+    else if (it_id != m_id_to_name.end()) {\n+        std::stringstream warnmsg;\n+        warnmsg << \"Reregistering thread \" << thread_id << \" with name '%s'; previously was '%s'\\n\";\n+        LogPrintStr(tfm::format(warnmsg.str().c_str(), name, it_id->second));\n+    }\n+\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_id[name] = thread_id;\n+    return true;\n+}\n+\n+const std::string& ThreadNameRegistry::GetThreadName()\n+{\n+    auto thread_id = boost::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    } else {\n+        auto insert_ret = m_id_to_name.emplace(thread_id, GetProcessThreadName());\n+        return insert_ret.first->second;\n+    }\n+}\n+\n+void ThreadNameRegistry::RenameProcessThread(const char* name)",
    "path": "src/threadnames.cpp",
    "position": null,
    "original_position": 113,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "fcfba12253e67b635b56fc41173cb90ef60645c3",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd like to be able to unittest the `*Process*` functions eventually, so maybe I should just make them public.",
    "created_at": "2018-04-27T15:14:02Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184718471",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184718471"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r184718471"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184718471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 113,
    "side": "RIGHT",
    "in_reply_to_id": 184627393
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185057629",
    "pull_request_review_id": 116373936,
    "id": 185057629,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTA1NzYyOQ==",
    "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_THREADNAMES_H\n+#define BITCOIN_THREADNAMES_H\n+\n+#include <map>\n+#include <mutex>\n+\n+#include <boost/thread.hpp>\n+\n+\n+/**\n+ * Keeps a map of thread IDs to string names and handles system-level thread naming.\n+ */\n+class ThreadNameRegistry\n+{\n+public:\n+    /**\n+     * @return the name of the current thread, falling back to the process\n+     *     name if a value has not been explicitly set with Rename.\n+     */\n+    std::string GetName();\n+\n+    /**\n+     * Name the current thread; doesn't allow colliding names unless `expect_multiple` is true.\n+     *\n+     * @param[in] name             The desired name of the process.\n+     * @param[in] expect_multiple  If true, allow name reuse by appending an ordered \".[n]\" suffix\n+     *                             to the given name.\n+     *\n+     * @return true if the name was registered successfully.\n+     */\n+    bool Rename(std::string name, bool expect_multiple = false);\n+\n+    /**\n+     * Rename the current thread at the system level, e.g. `prctrl(PR_SET_NAME, ...)`.\n+     */\n+    void RenameProcess(const char* name);\n+\n+    /**\n+     * @return the system's name for the current thread.\n+     */\n+    std::string GetProcessName();\n+\n+private:\n+    std::mutex m_map_lock;\n+    std::map<boost::thread::id, std::string> m_id_to_name;\n+    std::map<std::string, boost::thread::id> m_name_to_id;",
    "path": "src/threadnames.h",
    "position": null,
    "original_position": 50,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "8379557572b9261bf317cf35550781341c2ff06f",
    "user": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Bit of a nit, but maybe `m_name_to_id` could instead be a `map<string, int>` - where it just stores the occurrences of that name/prefix, then you don't have to call `CountMapPrefix`, but can just update the count each time. ",
    "created_at": "2018-04-30T17:46:18Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r185057629",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185057629"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r185057629"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185057629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185149361",
    "pull_request_review_id": 116483063,
    "id": 185149361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTE0OTM2MQ==",
    "diff_hunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_THREADNAMES_H\n+#define BITCOIN_THREADNAMES_H\n+\n+#include <map>\n+#include <mutex>\n+\n+#include <boost/thread.hpp>\n+\n+\n+/**\n+ * Keeps a map of thread IDs to string names and handles system-level thread naming.\n+ */\n+class ThreadNameRegistry\n+{\n+public:\n+    /**\n+     * @return the name of the current thread, falling back to the process\n+     *     name if a value has not been explicitly set with Rename.\n+     */\n+    std::string GetName();\n+\n+    /**\n+     * Name the current thread; doesn't allow colliding names unless `expect_multiple` is true.\n+     *\n+     * @param[in] name             The desired name of the process.\n+     * @param[in] expect_multiple  If true, allow name reuse by appending an ordered \".[n]\" suffix\n+     *                             to the given name.\n+     *\n+     * @return true if the name was registered successfully.\n+     */\n+    bool Rename(std::string name, bool expect_multiple = false);\n+\n+    /**\n+     * Rename the current thread at the system level, e.g. `prctrl(PR_SET_NAME, ...)`.\n+     */\n+    void RenameProcess(const char* name);\n+\n+    /**\n+     * @return the system's name for the current thread.\n+     */\n+    std::string GetProcessName();\n+\n+private:\n+    std::mutex m_map_lock;\n+    std::map<boost::thread::id, std::string> m_id_to_name;\n+    std::map<std::string, boost::thread::id> m_name_to_id;",
    "path": "src/threadnames.h",
    "position": null,
    "original_position": 50,
    "commit_id": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "original_commit_id": "8379557572b9261bf317cf35550781341c2ff06f",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for the look and great suggestion. I think maintaining a map of counts will also allow me to remove all of the utility functions in the anonymous namespace - nice catch!",
    "created_at": "2018-05-01T01:03:11Z",
    "updated_at": "2018-05-03T13:14:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r185149361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185149361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13099#discussion_r185149361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13099"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185149361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 185057629
  }
]