[
  {
    "sha": "c3d398ac44dc070186791e09acacbb3bee2c0666",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2QzOThhYzQ0ZGMwNzAxODY3OTFlMDlhY2FjYmIzYmVlMmMwNjY2",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-04-26T21:39:36Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-03T13:13:48Z"
      },
      "message": "Introduce and use ThreadNameRegistry for thread name management\n\nAbstracts system thread name setting and tracks thread names in memory. Allows\nautomatic thread numbering for reused names (e.g. http.0, http.1, ...).\n\nNB: as-written, this removes the `bitcoin-` prefix from child threads.\n\nIncorporates feedback from @conscott @TheBlueMatt @sipa.",
      "tree": {
        "sha": "1473f8a35920a3519bbafb3a2691475a6634d603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1473f8a35920a3519bbafb3a2691475a6634d603"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3d398ac44dc070186791e09acacbb3bee2c0666",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3d398ac44dc070186791e09acacbb3bee2c0666",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3d398ac44dc070186791e09acacbb3bee2c0666",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3d398ac44dc070186791e09acacbb3bee2c0666/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef006d92845a78db0928607c6c11d30962f55f85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef006d92845a78db0928607c6c11d30962f55f85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef006d92845a78db0928607c6c11d30962f55f85"
      }
    ],
    "stats": {
      "total": 343,
      "additions": 314,
      "deletions": 29
    },
    "files": [
      {
        "sha": "442a401ed8e9abb9c526fe0df025bf1191f75eb5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -153,6 +153,7 @@ BITCOIN_CORE_H = \\\n   support/events.h \\\n   support/lockedpool.h \\\n   sync.h \\\n+  threadnames.h \\\n   threadsafety.h \\\n   threadinterrupt.h \\\n   timedata.h \\\n@@ -372,6 +373,7 @@ libbitcoin_util_a_SOURCES = \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n+  threadnames.cpp \\\n   util.cpp \\\n   utilmoneystr.cpp \\\n   utilstrencodings.cpp \\"
      },
      {
        "sha": "81fb5ce38525025dc50af88b47fa93d66111e6ac",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -80,6 +80,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n+  test/threadnames_tests.cpp \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\"
      },
      {
        "sha": "7dfb2c923a1565d5b7ea51add2b3f6c1fd7b1c68",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -11,6 +11,7 @@\n #include <netbase.h>\n #include <rpc/protocol.h> // For HTTP status codes\n #include <sync.h>\n+#include <threadnames.h>\n #include <ui_interface.h>\n \n #include <memory>\n@@ -281,7 +282,7 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n /** Event dispatcher thread */\n static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n {\n-    RenameThread(\"bitcoin-http\");\n+    g_thread_names->Rename(\"http\");\n     LogPrint(BCLog::HTTP, \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n@@ -330,7 +331,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n /** Simple wrapper to set thread name and run work queue */\n static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n {\n-    RenameThread(\"bitcoin-httpworker\");\n+    g_thread_names->Rename(\"httpworker\", /*expect_multiple=*/ true);\n     queue->Run();\n }\n "
      },
      {
        "sha": "89acdf28054d75a9188b56acd34c31a4ba452b94",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -35,6 +35,7 @@\n #include <script/standard.h>\n #include <script/sigcache.h>\n #include <scheduler.h>\n+#include <threadnames.h>\n #include <timedata.h>\n #include <txdb.h>\n #include <txmempool.h>\n@@ -199,7 +200,7 @@ void Shutdown()\n     /// for example if the data directory was found to be locked.\n     /// Be sure that anything that writes files or flushes caches only does this if the respective\n     /// module was initialized.\n-    RenameThread(\"bitcoin-shutoff\");\n+    g_thread_names->Rename(\"shutoff\");\n     mempool.AddTransactionsUpdated(1);\n \n     StopHTTPRPC();\n@@ -633,7 +634,7 @@ void CleanupBlockRevFiles()\n void ThreadImport(std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n-    RenameThread(\"bitcoin-loadblk\");\n+    g_thread_names->Rename(\"loadblk\");\n     ScheduleBatchPriority();\n \n     {"
      },
      {
        "sha": "c3c356d9ce80756a4cacdf361dbf85690af7e2b2",
        "filename": "src/test/threadnames_tests.cpp",
        "status": "added",
        "additions": 131,
        "deletions": 0,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/test/threadnames_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/test/threadnames_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/threadnames_tests.cpp?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -0,0 +1,131 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <thread>\n+#include <vector>\n+#include <set>\n+#include <mutex>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(threadnames_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(threadnames_test_process_rename_serial)\n+{\n+    ThreadNameRegistry reg;\n+\n+    std::string original_process_name = reg.GetProcessName();\n+\n+    reg.RenameProcess(\"bazzz\");\n+#ifdef CAN_READ_PROCESS_NAME\n+    BOOST_CHECK_EQUAL(reg.GetProcessName(), \"bazzz\");\n+#else\n+    // Special case for platforms which don't support reading of process name.\n+    BOOST_CHECK_EQUAL(reg.GetProcessName(), \"<unknown>\");\n+#endif\n+\n+    reg.RenameProcess(\"barrr\");\n+#ifdef CAN_READ_PROCESS_NAME\n+    BOOST_CHECK_EQUAL(reg.GetProcessName(), \"barrr\");\n+#else\n+    // Special case for platforms which don't support reading of process name.\n+    BOOST_CHECK_EQUAL(reg.GetProcessName(), \"<unknown>\");\n+#endif\n+\n+    reg.RenameProcess(original_process_name.c_str());\n+    BOOST_CHECK_EQUAL(reg.GetProcessName(), original_process_name);\n+}\n+\n+/**\n+ * Ensure that expect_multiple prevents collisions by appending a numeric suffix.\n+ */\n+BOOST_AUTO_TEST_CASE(threadnames_test_rename_multiple_serial)\n+{\n+    ThreadNameRegistry reg;\n+\n+    std::string original_process_name = reg.GetProcessName();\n+\n+    BOOST_CHECK(reg.Rename(\"foo\", /*expect_multiple=*/ true));\n+    BOOST_CHECK_EQUAL(reg.GetName(), \"foo.0\");\n+\n+    // Can't rename to \"foo\" as that would be a collision.\n+    BOOST_CHECK_EQUAL(reg.Rename(\"foo\", /*expect_multiple=*/ false), false);\n+    BOOST_CHECK_EQUAL(reg.GetName(), \"foo.0\");\n+\n+    BOOST_CHECK(reg.Rename(\"foo\", /*expect_multiple=*/ true));\n+    BOOST_CHECK_EQUAL(reg.GetName(), \"foo.1\");\n+\n+    BOOST_CHECK(reg.Rename(\"foo\", /*expect_multiple=*/ true));\n+    BOOST_CHECK_EQUAL(reg.GetName(), \"foo.2\");\n+\n+    reg.RenameProcess(original_process_name.c_str());\n+    BOOST_CHECK_EQUAL(reg.GetProcessName(), original_process_name);\n+}\n+\n+/**\n+ * Run a bunch of threads to all call Rename with some parameters.\n+ *\n+ * @return the set of name each thread has after attempted renaming.\n+ */\n+std::set<std::string> RenameEnMasse(int num_threads, bool expect_multiple)\n+{\n+    ThreadNameRegistry reg;\n+    std::vector<std::thread> threads;\n+    std::set<std::string> names;\n+    std::mutex lock;\n+\n+    auto RenameThisThread = [&]() {\n+        reg.Rename(\"test_thread\", /*expect_multiple=*/ expect_multiple);\n+        std::lock_guard<std::mutex> guard(lock);\n+        names.insert(reg.GetName());\n+    };\n+\n+    for (int i = 0; i < num_threads; ++i) {\n+        threads.push_back(std::thread(RenameThisThread));\n+    }\n+\n+    for (std::thread& thread : threads) thread.join();\n+\n+    return names;\n+}\n+\n+/**\n+ * Rename a bunch of threads with the same basename (expect_multiple=true), ensuring suffixes are\n+ * applied properly.\n+ */\n+BOOST_AUTO_TEST_CASE(threadnames_test_rename_multiple_threaded)\n+{\n+    std::set<std::string> names = RenameEnMasse(100, true);\n+\n+    BOOST_CHECK_EQUAL(names.size(), 100);\n+\n+    // Names \"test_thread.[n]\" should exist for n = [0, 99]\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(names.find(\"test_thread.\" + std::to_string(i)) != names.end());\n+    }\n+\n+}\n+\n+/**\n+ * Rename a bunch of threads with the same basename (expect_multiple=false), ensuring only one\n+ * rename succeeds.\n+ */\n+BOOST_AUTO_TEST_CASE(threadnames_test_rename_threaded)\n+{\n+    std::set<std::string> names = RenameEnMasse(100, false);\n+\n+    // Only one thread's Rename should have succeeded for the same name.\n+    BOOST_CHECK_EQUAL(names.count(\"test_thread\"), 1);\n+    BOOST_CHECK_EQUAL(names.size(), 2);  // test_thread and test_bitcoin (name of parent thread)\n+\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "bdfa7991e6422a52417b1cb6f8522c8dc873e289",
        "filename": "src/threadnames.cpp",
        "status": "added",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/threadnames.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/threadnames.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadnames.cpp?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <threadnames.h>\n+#include <tinyformat.h>\n+\n+#include <atomic>\n+#include <cstdint>\n+#include <string>\n+#include <sstream>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread.h>\n+#include <pthread_np.h>\n+#endif\n+\n+std::unique_ptr<ThreadNameRegistry> g_thread_names(new ThreadNameRegistry());\n+\n+bool ThreadNameRegistry::Rename(std::string name, bool expect_multiple)\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+    std::string name_without_suffix = name;\n+\n+    if (expect_multiple) {\n+        name = tfm::format(\"%s.%d\", name_without_suffix, m_name_to_count[name_without_suffix]);\n+    }\n+\n+    std::thread::id thread_id = std::this_thread::get_id();\n+    std::string process_name = name;\n+\n+    auto it_name = m_name_to_count.find(name);\n+\n+    // Don't allow name collisions.\n+    if (it_name != m_name_to_count.end()) {\n+        return false;\n+    }\n+\n+    RenameProcess(process_name.c_str());\n+    m_id_to_name[thread_id] = name;\n+    m_name_to_count[name_without_suffix]++;\n+\n+    return true;\n+}\n+\n+std::string ThreadNameRegistry::GetName()\n+{\n+    std::lock_guard<std::mutex> guard(m_map_lock);\n+\n+    std::thread::id thread_id = std::this_thread::get_id();\n+    auto found = m_id_to_name.find(thread_id);\n+\n+    if (found != m_id_to_name.end()) {\n+        return found->second;\n+    }\n+\n+    std::string pname = GetProcessName();\n+    ++m_name_to_count[pname];\n+    m_id_to_name[thread_id] = pname;\n+    return pname;\n+}\n+\n+void ThreadNameRegistry::RenameProcess(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string ThreadNameRegistry::GetProcessName()\n+{\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#else\n+    return \"<unknown>\";\n+#endif\n+    return std::string(pthreadname_buff);\n+}"
      },
      {
        "sha": "48c2abb93416b4350ef0bc86a51e4efc3e46e76c",
        "filename": "src/threadnames.h",
        "status": "added",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/threadnames.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/threadnames.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadnames.h?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -0,0 +1,71 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_THREADNAMES_H\n+#define BITCOIN_THREADNAMES_H\n+\n+#include <map>\n+#include <memory>\n+#include <mutex>\n+#include <thread>\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h> // For HAVE_SYS_PRCTL_H\n+#endif\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For PR_GET_NAME\n+#endif\n+\n+#if (defined(PR_GET_NAME) || defined(MAC_OSX))\n+#define CAN_READ_PROCESS_NAME\n+#endif\n+\n+/**\n+ * Keeps a map of thread IDs to string names and handles system-level thread naming.\n+ */\n+class ThreadNameRegistry\n+{\n+public:\n+    /**\n+     * @return the name of the current thread, falling back to the process\n+     *     name if a value has not been explicitly set with Rename.\n+     */\n+    std::string GetName();\n+\n+    /**\n+     * Name the current thread; doesn't allow colliding names unless `expect_multiple` is true.\n+     *\n+     * @param[in] name             The desired name of the process.\n+     * @param[in] expect_multiple  If true, allow name reuse by appending an ordered \".[n]\" suffix\n+     *                             to the given name.\n+     *\n+     * @return true if the name was registered successfully.\n+     */\n+    bool Rename(std::string name, bool expect_multiple = false);\n+\n+    /**\n+     * Rename the current thread at the system level, e.g. `prctrl(PR_SET_NAME, ...)`.\n+     */\n+    void RenameProcess(const char* name);\n+\n+    /**\n+     * @return the system's name for the current thread.\n+     */\n+    std::string GetProcessName();\n+\n+private:\n+    std::mutex m_map_lock;\n+    std::map<std::thread::id, std::string> m_id_to_name;\n+    /**\n+     * The number of times this name has been used to identify a thread;\n+     * used to generate numeric suffix.\n+     */\n+    std::map<std::string, size_t> m_name_to_count;\n+\n+};\n+\n+extern std::unique_ptr<ThreadNameRegistry> g_thread_names;\n+\n+#endif // BITCOIN_THREADNAMES_H"
      },
      {
        "sha": "206863746a06b7122f2e3b866472444bdf59b3f3",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -63,10 +63,6 @@\n #include <shlobj.h>\n #endif\n \n-#ifdef HAVE_SYS_PRCTL_H\n-#include <sys/prctl.h>\n-#endif\n-\n #ifdef HAVE_MALLOPT_ARENA_MAX\n #include <malloc.h>\n #endif\n@@ -921,22 +917,6 @@ void runCommand(const std::string& strCommand)\n         LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);\n }\n \n-void RenameThread(const char* name)\n-{\n-#if defined(PR_SET_NAME)\n-    // Only the first 15 characters are used (16 - NUL terminator)\n-    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n-#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n-    pthread_set_name_np(pthread_self(), name);\n-\n-#elif defined(MAC_OSX)\n-    pthread_setname_np(name);\n-#else\n-    // Prevent warnings for unused parameters...\n-    (void)name;\n-#endif\n-}\n-\n void SetupEnvironment()\n {\n #ifdef HAVE_MALLOPT_ARENA_MAX"
      },
      {
        "sha": "e02c58c5f37d44786b409256731fc3425ab7573c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -19,6 +19,7 @@\n #include <logging.h>\n #include <sync.h>\n #include <tinyformat.h>\n+#include <threadnames.h>\n #include <utiltime.h>\n \n #include <atomic>\n@@ -261,15 +262,12 @@ std::string HelpMessageOpt(const std::string& option, const std::string& message\n  */\n int GetNumCores();\n \n-void RenameThread(const char* name);\n-\n /**\n  * .. and a wrapper that just calls func once\n  */\n template <typename Callable> void TraceThread(const char* name,  Callable func)\n {\n-    std::string s = strprintf(\"bitcoin-%s\", name);\n-    RenameThread(s.c_str());\n+    g_thread_names->Rename(std::string(name));\n     try\n     {\n         LogPrintf(\"%s thread start\\n\", name);"
      },
      {
        "sha": "ed45d69c361717563e61b1fcd39e1d5ea9a2f1f8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3d398ac44dc070186791e09acacbb3bee2c0666/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3d398ac44dc070186791e09acacbb3bee2c0666/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c3d398ac44dc070186791e09acacbb3bee2c0666",
        "patch": "@@ -31,6 +31,7 @@\n #include <script/standard.h>\n #include <timedata.h>\n #include <tinyformat.h>\n+#include <threadnames.h>\n #include <txdb.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n@@ -1651,7 +1652,7 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n void ThreadScriptCheck() {\n-    RenameThread(\"bitcoin-scriptch\");\n+    g_thread_names->Rename(\"scriptch\", /*expect_multiple=*/ true);\n     scriptcheckqueue.Thread();\n }\n "
      }
    ]
  },
  {
    "sha": "7422741dcb9650fb7e178b68af84d3c6c118b0e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDIyNzQxZGNiOTY1MGZiN2UxNzhiNjhhZjg0ZDNjNmMxMThiMGU2",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-04-26T21:41:36Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-03T13:13:58Z"
      },
      "message": "Add thread names to log lines",
      "tree": {
        "sha": "18d6fb1bd5947a0184a838fde85ff68a2fbc9082",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18d6fb1bd5947a0184a838fde85ff68a2fbc9082"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7422741dcb9650fb7e178b68af84d3c6c118b0e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7422741dcb9650fb7e178b68af84d3c6c118b0e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7422741dcb9650fb7e178b68af84d3c6c118b0e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7422741dcb9650fb7e178b68af84d3c6c118b0e6/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3d398ac44dc070186791e09acacbb3bee2c0666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3d398ac44dc070186791e09acacbb3bee2c0666",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3d398ac44dc070186791e09acacbb3bee2c0666"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "97f7c0ba1ba887415e09094ec215e10a55389b16",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7422741dcb9650fb7e178b68af84d3c6c118b0e6/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7422741dcb9650fb7e178b68af84d3c6c118b0e6/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=7422741dcb9650fb7e178b68af84d3c6c118b0e6",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_LOGGING_H\n \n #include <fs.h>\n+#include <threadnames.h>\n #include <tinyformat.h>\n \n #include <atomic>\n@@ -147,7 +148,7 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n     if (g_logger->Enabled()) { \\\n         std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n         try { \\\n-            _log_msg_ = tfm::format(__VA_ARGS__); \\\n+            _log_msg_ = tfm::format(\"[%s] %s\", g_thread_names->GetName(), tfm::format(__VA_ARGS__)); \\\n         } catch (tinyformat::format_error &fmterr) { \\\n             /* Original format string will have newline so don't add one here */ \\\n             _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\"
      }
    ]
  },
  {
    "sha": "b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDllMjViMGRhZTg5YzU5MzcwNjFkOGUxYTI5ZmM0YmNjNjM3NTJl",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-04-26T21:41:53Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-03T13:13:58Z"
      },
      "message": "Add thread names to deadlock debugging tools",
      "tree": {
        "sha": "6168851cbbd195b360d2527daf3e80d3de793174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6168851cbbd195b360d2527daf3e80d3de793174"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09e25b0dae89c5937061d8e1a29fc4bcc63752e/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7422741dcb9650fb7e178b68af84d3c6c118b0e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7422741dcb9650fb7e178b68af84d3c6c118b0e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7422741dcb9650fb7e178b68af84d3c6c118b0e6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "aa02bbbc5f5d00c1981616a4686d612c6c519407",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b09e25b0dae89c5937061d8e1a29fc4bcc63752e/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b09e25b0dae89c5937061d8e1a29fc4bcc63752e/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=b09e25b0dae89c5937061d8e1a29fc4bcc63752e",
        "patch": "@@ -3,9 +3,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <sync.h>\n+#include <tinyformat.h>\n \n #include <memory>\n #include <set>\n+#include <sstream>\n #include <util.h>\n #include <utilstrencodings.h>\n \n@@ -35,23 +37,27 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn, std::string thread_name_)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n         fTry = fTryIn;\n+        thread_name = thread_name_;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n+        return tfm::format(\n+            \"%s %s:%s %s (in %s)\",\n+            mutexName, sourceFile, itostr(sourceLine), (fTry ? \"(TRY)\" : \"\"), thread_name);\n     }\n \n private:\n     bool fTry;\n     std::string mutexName;\n     std::string sourceFile;\n+    std::string thread_name;\n     int sourceLine;\n };\n \n@@ -133,7 +139,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry));\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry, g_thread_names->GetName()));\n }\n \n void LeaveCritical()"
      }
    ]
  }
]