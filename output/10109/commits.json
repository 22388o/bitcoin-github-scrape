[
  {
    "sha": "159fe88abfadf67410578c145e631819cf50b660",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTlmZTg4YWJmYWRmNjc0MTA1NzhjMTQ1ZTYzMTgxOWNmNTBiNjYw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-28T17:41:22Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-28T18:16:21Z"
      },
      "message": "Remove SingleNodeConnCB\n\nThis commit merges the NodeConnCB and SingleNodeConnCB into a single\nclass (called NodeConnCB). The original intent for the NodeConnCB was to\nbe able to have a python 'mininode' connect to multiple running\nbitcoinds. This has never been used and can be achieved more easily by\nhaving multiple NodeConns backed by a common datastore if it is ever\nneeded.\n\nThe changes in mininode.py are just code moves (and merging the two\nclasses into a single class). The code changes in the individual test\ncases are changing the subclasses to subclass from NodeConnCB instead of\nSingleNodeConnCB. There is a lot of duplicate code in the subclasses\nthat can be removed in future commits.",
      "tree": {
        "sha": "27ae316eafda9f87fadc4d1a86e51b59c9e288d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27ae316eafda9f87fadc4d1a86e51b59c9e288d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159fe88abfadf67410578c145e631819cf50b660",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159fe88abfadf67410578c145e631819cf50b660",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/159fe88abfadf67410578c145e631819cf50b660",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159fe88abfadf67410578c145e631819cf50b660/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79af9fbd8c3c0e54702a9c92b171f134bd4466c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79af9fbd8c3c0e54702a9c92b171f134bd4466c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79af9fbd8c3c0e54702a9c92b171f134bd4466c8"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 79,
      "deletions": 85
    },
    "files": [
      {
        "sha": "a9c2b17b4a11b0d95a624caa7864c5acf2d791a3",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -40,17 +40,14 @@\n                                      CTxOut,\n                                      NetworkThread,\n                                      NodeConn,\n-                                     SingleNodeConnCB,\n+                                     NodeConnCB,\n                                      msg_block,\n                                      msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (start_node, p2p_port, assert_equal)\n \n-class BaseNode(SingleNodeConnCB):\n-    def __init__(self):\n-        super().__init__()\n-\n+class BaseNode(NodeConnCB):\n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n         headers_message.headers = [CBlockHeader(b) for b in new_blocks]"
      },
      {
        "sha": "4ef2a35a44522cb0fff2871ec7f0ceef6222458c",
        "filename": "test/functional/maxblocksinflight.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxblocksinflight.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -17,7 +17,6 @@\n MAX_REQUESTS = 128\n \n class TestManager(NodeConnCB):\n-    # set up NodeConnCB callbacks, overriding base class\n     def on_getdata(self, conn, message):\n         self.log.debug(\"got getdata %s\" % repr(message))\n         # Log the requests\n@@ -30,11 +29,8 @@ def on_close(self, conn):\n         if not self.disconnectOkay:\n             raise EarlyDisconnectError(0)\n \n-    def __init__(self):\n-        NodeConnCB.__init__(self)\n-\n     def add_new_connection(self, connection):\n-        self.connection = connection\n+        super().add_connection(connection)\n         self.blockReqCounts = {}\n         self.disconnectOkay = False\n "
      },
      {
        "sha": "b26c10796d7d47e0f5084886ff845bc5e31ece7c",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -20,7 +20,7 @@\n # p2p messages to a node, generating the messages in the main testing logic.\n class TestNode(NodeConnCB):\n     def __init__(self):\n-        NodeConnCB.__init__(self)\n+        super().__init__()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "7bdbe2bb1236fe1f97c02889268d941229f9bdc7",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -58,7 +58,7 @@\n # p2p messages to a node, generating the messages in the main testing logic.\n class TestNode(NodeConnCB):\n     def __init__(self):\n-        NodeConnCB.__init__(self)\n+        super().__init__()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "86b767b98acf415fc3804102ff9e2aab167ed41b",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -15,9 +15,9 @@\n from test_framework.script import CScript, OP_TRUE\n \n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n-class TestNode(SingleNodeConnCB):\n+class TestNode(NodeConnCB):\n     def __init__(self):\n-        SingleNodeConnCB.__init__(self)\n+        super().__init__()\n         self.last_sendcmpct = []\n         self.last_headers = None\n         self.last_inv = None"
      },
      {
        "sha": "12539be950f0ad2ecedf03ff32753ea975b6683e",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -24,9 +24,9 @@ def allInvsMatch(invsExpected, testnode):\n \n # TestNode: bare-bones \"peer\".  Used to track which invs are received from a node\n # and to send the node feefilter messages.\n-class TestNode(SingleNodeConnCB):\n+class TestNode(NodeConnCB):\n     def __init__(self):\n-        SingleNodeConnCB.__init__(self)\n+        super().__init__()\n         self.txinvs = []\n \n     def on_inv(self, conn, message):"
      },
      {
        "sha": "5853ec86f0fb5930fa9b772c1e4a6228479c445f",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -19,10 +19,10 @@\n \n class CLazyNode(NodeConnCB):\n     def __init__(self):\n+        super().__init__()\n         self.connection = None\n         self.unexpected_msg = False\n         self.connected = False\n-        super().__init__()\n \n     def add_connection(self, conn):\n         self.connection = conn"
      },
      {
        "sha": "3d3a9939d4a059c8ff78e585b72d0cba9441b1c6",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -14,7 +14,7 @@\n \n class TestNode(NodeConnCB):\n     def __init__(self):\n-        NodeConnCB.__init__(self)\n+        super().__init__()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "69f829279c2907dd079dfd9d28b0f48a634fc501",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -32,10 +32,9 @@ def get_virtual_size(witness_block):\n     vsize = int((3*base_size + total_size + 3)/4)\n     return vsize\n \n-# Note: we can reduce code by using SingleNodeConnCB (in master, not 0.12)\n class TestNode(NodeConnCB):\n     def __init__(self):\n-        NodeConnCB.__init__(self)\n+        super().__init__()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong(0)"
      },
      {
        "sha": "de4edd6800c97e53810fdecd7ca27efaa9914d9c",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -27,9 +27,9 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(SingleNodeConnCB):\n+class TestNode(NodeConnCB):\n     def __init__(self):\n-        SingleNodeConnCB.__init__(self)\n+        super().__init__()\n         self.connected = False\n         self.received_version = False\n "
      },
      {
        "sha": "d4d03861a4ab08308f179c070b2b8155483e8306",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -28,7 +28,7 @@\n # p2p messages to a node, generating the messages in the main testing logic.\n class TestNode(NodeConnCB):\n     def __init__(self):\n-        NodeConnCB.__init__(self)\n+        super().__init__()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "1a7475ae84a2bbed37cd26f9fcffc683e72c612f",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -81,9 +81,9 @@\n \n direct_fetch_response_time = 0.05\n \n-class BaseNode(SingleNodeConnCB):\n+class BaseNode(NodeConnCB):\n     def __init__(self):\n-        SingleNodeConnCB.__init__(self)\n+        super().__init__()\n         self.last_inv = None\n         self.last_headers = None\n         self.last_block = None"
      },
      {
        "sha": "25c18bda82a589771c9e0ebe2004b47aca76e2cc",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -42,7 +42,7 @@ def __repr__(self):\n class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n-        NodeConnCB.__init__(self)\n+        super().__init__()\n         self.conn = None\n         self.bestblockhash = None\n         self.block_store = block_store"
      },
      {
        "sha": "b02ffbe14aa03e5e1851b88d0ac6cd6ec69da780",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 61,
        "deletions": 59,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159fe88abfadf67410578c145e631819cf50b660/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159fe88abfadf67410578c145e631819cf50b660/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=159fe88abfadf67410578c145e631819cf50b660",
        "patch": "@@ -1476,25 +1476,9 @@ def __init__(self):\n         self.deliver_sleep_time = None\n         # Remember the services our peer has advertised\n         self.peer_services = None\n-\n-    def set_deliver_sleep_time(self, value):\n-        with mininode_lock:\n-            self.deliver_sleep_time = value\n-\n-    def get_deliver_sleep_time(self):\n-        with mininode_lock:\n-            return self.deliver_sleep_time\n-\n-    # Spin until verack message is received from the node.\n-    # Tests may want to use this as a signal that the test can begin.\n-    # This can be called from the testing thread, so it needs to acquire the\n-    # global lock.\n-    def wait_for_verack(self):\n-        while True:\n-            with mininode_lock:\n-                if self.verack_received:\n-                    return\n-            time.sleep(0.05)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n \n     def deliver(self, conn, message):\n         deliver_sleep = self.get_deliver_sleep_time()\n@@ -1506,17 +1490,36 @@ def deliver(self, conn, message):\n             except:\n                 logger.exception(\"ERROR delivering %s\" % repr(message))\n \n-    def on_version(self, conn, message):\n-        if message.nVersion >= 209:\n-            conn.send_message(msg_verack())\n-        conn.ver_send = min(MY_VERSION, message.nVersion)\n-        if message.nVersion < 209:\n-            conn.ver_recv = conn.ver_send\n-        conn.nServices = message.nServices\n+    def set_deliver_sleep_time(self, value):\n+        with mininode_lock:\n+            self.deliver_sleep_time = value\n \n-    def on_verack(self, conn, message):\n-        conn.ver_recv = conn.ver_send\n-        self.verack_received = True\n+    def get_deliver_sleep_time(self):\n+        with mininode_lock:\n+            return self.deliver_sleep_time\n+\n+    # Callbacks which can be overridden by subclasses\n+    #################################################\n+\n+    def on_addr(self, conn, message): pass\n+    def on_alert(self, conn, message): pass\n+    def on_block(self, conn, message): pass\n+    def on_blocktxn(self, conn, message): pass\n+    def on_close(self, conn): pass\n+    def on_cmpctblock(self, conn, message): pass\n+    def on_feefilter(self, conn, message): pass\n+    def on_getaddr(self, conn, message): pass\n+    def on_getblocks(self, conn, message): pass\n+    def on_getblocktxn(self, conn, message): pass\n+    def on_getdata(self, conn, message): pass\n+    def on_getheaders(self, conn, message): pass\n+    def on_headers(self, conn, message): pass\n+    def on_mempool(self, conn): pass\n+    def on_open(self, conn): pass\n+    def on_reject(self, conn, message): pass\n+    def on_sendcmpct(self, conn, message): pass\n+    def on_sendheaders(self, conn, message): pass\n+    def on_tx(self, conn, message): pass\n \n     def on_inv(self, conn, message):\n         want = msg_getdata()\n@@ -1526,37 +1529,27 @@ def on_inv(self, conn, message):\n         if len(want.inv):\n             conn.send_message(want)\n \n-    def on_addr(self, conn, message): pass\n-    def on_alert(self, conn, message): pass\n-    def on_getdata(self, conn, message): pass\n-    def on_getblocks(self, conn, message): pass\n-    def on_tx(self, conn, message): pass\n-    def on_block(self, conn, message): pass\n-    def on_getaddr(self, conn, message): pass\n-    def on_headers(self, conn, message): pass\n-    def on_getheaders(self, conn, message): pass\n     def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n-    def on_reject(self, conn, message): pass\n-    def on_open(self, conn): pass\n-    def on_close(self, conn): pass\n-    def on_mempool(self, conn): pass\n-    def on_pong(self, conn, message): pass\n-    def on_feefilter(self, conn, message): pass\n-    def on_sendheaders(self, conn, message): pass\n-    def on_sendcmpct(self, conn, message): pass\n-    def on_cmpctblock(self, conn, message): pass\n-    def on_getblocktxn(self, conn, message): pass\n-    def on_blocktxn(self, conn, message): pass\n \n-# More useful callbacks and functions for NodeConnCB's which have a single NodeConn\n-class SingleNodeConnCB(NodeConnCB):\n-    def __init__(self):\n-        NodeConnCB.__init__(self)\n-        self.connection = None\n-        self.ping_counter = 1\n-        self.last_pong = msg_pong()\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_verack(self, conn, message):\n+        conn.ver_recv = conn.ver_send\n+        self.verack_received = True\n+\n+    def on_version(self, conn, message):\n+        if message.nVersion >= 209:\n+            conn.send_message(msg_verack())\n+        conn.ver_send = min(MY_VERSION, message.nVersion)\n+        if message.nVersion < 209:\n+            conn.ver_recv = conn.ver_send\n+        conn.nServices = message.nServices\n+\n+    # Helper functions\n+    ##################\n \n     def add_connection(self, conn):\n         self.connection = conn\n@@ -1569,18 +1562,27 @@ def send_and_ping(self, message):\n         self.send_message(message)\n         self.sync_with_ping()\n \n-    def on_pong(self, conn, message):\n-        self.last_pong = message\n-\n     # Sync up with the node\n     def sync_with_ping(self, timeout=30):\n         def received_pong():\n             return (self.last_pong.nonce == self.ping_counter)\n         self.send_message(msg_ping(nonce=self.ping_counter))\n         success = wait_until(received_pong, timeout=timeout)\n         self.ping_counter += 1\n+\n         return success\n \n+    # Spin until verack message is received from the node.\n+    # Tests may want to use this as a signal that the test can begin.\n+    # This can be called from the testing thread, so it needs to acquire the\n+    # global lock.\n+    def wait_for_verack(self):\n+        while True:\n+            with mininode_lock:\n+                if self.verack_received:\n+                    return\n+            time.sleep(0.05)\n+\n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node\n class NodeConn(asyncore.dispatcher):"
      }
    ]
  }
]