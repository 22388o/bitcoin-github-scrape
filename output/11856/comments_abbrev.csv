laanwj,2017-12-21T11:26:28Z,"> It does, however, add a good bit of overhead where there was previously none\n\nAdding overhead sounds bad. Can you quantify this somehow?\n\nNote that none of the GUI notifications take significant time. They already just queue a signal to Qt, to be handled later. Adding another layer sounds somewhat bad.",https://github.com/bitcoin/bitcoin/pull/11856#issuecomment-353327834,353327834,
ryanofsky,2018-04-30T17:11:49Z,"Note: The first commit in this PR (""Clarify validationinterface notification ordering"") also appears in #11775 and #12979, but I think the other the commits are unique.",https://github.com/bitcoin/bitcoin/pull/11856#issuecomment-385464669,385464669,
jnewbery,2018-05-17T21:21:57Z,"This needs rebase, but probably shouldn't be updated until #12979 gets merged (with which this PR shares a commit)",https://github.com/bitcoin/bitcoin/pull/11856#issuecomment-390016076,390016076,
jamesob,2017-12-08T23:06:05Z,> itnerrupted,https://github.com/bitcoin/bitcoin/pull/11856#discussion_r155896170,155896170,src/rpc/server.h
jimpo,2017-12-12T19:56:01Z,Why is this necessary if `m_last_block_hash` in block_waiter is initialized to the chain tip? Seems like it would block longer than necessary below if `lpval` has an old block hash.,https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156478288,156478288,src/rpc/mining.cpp
jimpo,2017-12-12T20:20:52Z,"Maybe worth changing to `condvar_GenesisWait.wait(lock, []{ return fHaveGenesis; });` and dropping the loop.",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156484598,156484598,src/init.cpp
jimpo,2017-12-12T20:22:52Z,I'd rather see more of these globals encapsulated in the GenesisWaiter. `AppInitMain` could be simplified if `GenesisWaiter` just had a method like `BlockUntilHaveGenesis` or something.,https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156485068,156485068,src/init.cpp
TheBlueMatt,2017-12-12T20:38:20Z,hashWatchedChain could be set a few lines up by lpstr instead of by chainActive.Tip().,https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156488561,156488561,src/rpc/mining.cpp
jimpo,2017-12-12T20:54:49Z,"Yes, I see that, but it looks like the old behavior would have been to return immediately if the longpollid was out of date.",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156492268,156492268,src/rpc/mining.cpp
TheBlueMatt,2017-12-12T21:13:18Z,"Yea, but without setting m_last_block_hash to hashWatchedChain we would instead still wait until chainActive.Tip() advances?",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156496602,156496602,src/rpc/mining.cpp
TheBlueMatt,2017-12-12T21:13:47Z,Done.,https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156496739,156496739,src/init.cpp
TheBlueMatt,2017-12-12T21:13:49Z,Done.,https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156496746,156496746,src/init.cpp
jimpo,2017-12-12T21:20:08Z,"It would never even enter the `while (block_waiter.m_last_block_hash == hashWatchedChain && ...)` loop, right?",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156498333,156498333,src/rpc/mining.cpp
TheBlueMatt,2017-12-12T21:39:45Z,"Ohoh, yea, I think I had changed the loop condition since a previous iteration. Fixed.",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r156503227,156503227,src/rpc/mining.cpp
jtimon,2017-12-14T23:20:10Z,"style nit: ""break before braces on function, namespace and class definitions""\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/.clang-format#L15\nhttp://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\n",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r157088820,157088820,src/rpc/blockchain.cpp
TheBlueMatt,2017-12-15T23:25:39Z,Fixed (for at least not-two-line-functions).,https://github.com/bitcoin/bitcoin/pull/11856#discussion_r157319995,157319995,src/rpc/blockchain.cpp
ryanofsky,2017-12-21T22:25:36Z,"In commit ""Clarify validationinterface notification ordering""\n\nAll of the other comments in this commit are very good, but for some reason I'm finding this sentence really confusing. I think this is saying that UpdateBlockTip might be called repeatedly with the same pindexNew value in cases where invalid blocks are being received. But the current wording seems to imply that this might actually",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r158392479,158392479,src/validationinterface.h
ryanofsky,2017-12-21T22:43:38Z,"In commit ""Also call UpdatedBlockTip on invalidateblock""\n\nThis seems like a good change, but was it just a bug that that this call wasn't being made before? Or is this preparation for some new feature? Should this have a test? Should it have a mention in release notes if it affects RPC or ZMQ? It's good when commits like this have some test or documentation update, or a sentence in the commit ",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r158395307,158395307,src/validation.cpp
ryanofsky,2017-12-21T22:56:39Z,"In commit ""Replace csBestBlock/cvBlockChanged with validationinterface""\n\nMaybe remove the OnStopped function and stopped signal as they no longer have any listeners.",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r158397185,158397185,src/init.cpp
ryanofsky,2017-12-21T23:08:31Z,"In commit ""Replace csBestBlock/cvBlockChanged with validationinterface ""\n\nIsRPCRunning does not appear to be thread safe. Maybe fRPCRunning be a changed to an atomic bool.",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r158398926,158398926,src/rpc/mining.cpp
ryanofsky,2017-12-21T23:17:51Z,"In commit ""Replace csBestBlock/cvBlockChanged with validationinterface""\n\nIs the `!` here a mistake? I could see how the RPC call might return too early if lpval is null, but if it's non-null and actually set to a hash, it seems like this would only lead to unnecessary delays.",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r158400188,158400188,src/rpc/mining.cpp
ryanofsky,2017-12-21T23:37:12Z,"In commit ""Add RPC utility to block until tip changes or RPC is interrupted""\n\nDo you need to acquire m_cs while updating m_last_block variables here? It doesn't seem like there is a guard against these writes being delayed and UpdatedBlockTip trying to update the values at the same time. Or if this is safe, should add a comment here saying why m_cs isn't needed.",https://github.com/bitcoin/bitcoin/pull/11856#discussion_r158402600,158402600,src/rpc/server.cpp
