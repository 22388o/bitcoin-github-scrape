[
  {
    "sha": "0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTVhNmI5MGJjNzVhOGQ3NWZkZmY3MWM5YjA4YWJlOWIwYjk2YjBh",
    "commit": {
      "author": {
        "name": "Dimitris Tsapakidis",
        "email": "dimitris@tsapakidis.com",
        "date": "2017-06-19T22:57:31Z"
      },
      "committer": {
        "name": "Dimitris Tsapakidis",
        "email": "dimitris@tsapakidis.com",
        "date": "2017-06-22T16:18:10Z"
      },
      "message": "Fixed multiple typos\n\nA few \"a->an\" and \"an->a\".\n\"Shows, if the supplied default SOCKS5 proxy\" -> \"Shows if the supplied default SOCKS5 proxy\". Change made on 3 occurrences.\n\"without fully understanding the ramification of a command\" -> \"without fully understanding the ramifications of a command\".\nRemoved duplicate words such as \"the the\".",
      "tree": {
        "sha": "fed3c77d7bdbe735ca127c017e85db94506f3204",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed3c77d7bdbe735ca127c017e85db94506f3204"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/comments",
    "author": {
      "login": "dimitris-t",
      "id": 8949706,
      "node_id": "MDQ6VXNlcjg5NDk3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8949706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dimitris-t",
      "html_url": "https://github.com/dimitris-t",
      "followers_url": "https://api.github.com/users/dimitris-t/followers",
      "following_url": "https://api.github.com/users/dimitris-t/following{/other_user}",
      "gists_url": "https://api.github.com/users/dimitris-t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dimitris-t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dimitris-t/subscriptions",
      "organizations_url": "https://api.github.com/users/dimitris-t/orgs",
      "repos_url": "https://api.github.com/users/dimitris-t/repos",
      "events_url": "https://api.github.com/users/dimitris-t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dimitris-t/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dimitris-t",
      "id": 8949706,
      "node_id": "MDQ6VXNlcjg5NDk3MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8949706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dimitris-t",
      "html_url": "https://github.com/dimitris-t",
      "followers_url": "https://api.github.com/users/dimitris-t/followers",
      "following_url": "https://api.github.com/users/dimitris-t/following{/other_user}",
      "gists_url": "https://api.github.com/users/dimitris-t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dimitris-t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dimitris-t/subscriptions",
      "organizations_url": "https://api.github.com/users/dimitris-t/orgs",
      "repos_url": "https://api.github.com/users/dimitris-t/repos",
      "events_url": "https://api.github.com/users/dimitris-t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dimitris-t/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c38f540298f0e188df5ed68fd56c623b9ac8331b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38f540298f0e188df5ed68fd56c623b9ac8331b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c38f540298f0e188df5ed68fd56c623b9ac8331b"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 60,
      "deletions": 60
    },
    "files": [
      {
        "sha": "4ab2f356803a8933edd1fe7b573533281ef7c1f2",
        "filename": "contrib/rpm/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -181,5 +181,5 @@ knows what they are getting when installing the GUI package.\n \n As far as minor differences, I generally prefer to assign the file permissions\n in the `%files` portion of an RPM spec file rather than specifying the\n-permissions of a file during `%install` and other minor things like that that\n+permissions of a file during `%install` and other minor things like that\n are largely just cosmetic."
      },
      {
        "sha": "b206866cc5eb4abc3075f8692637a7096d7f0b0e",
        "filename": "contrib/rpm/bitcoin.if",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/bitcoin.if",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/contrib/rpm/bitcoin.if",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/bitcoin.if?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -121,7 +121,7 @@ interface(`bitcoin_manage_lib_dirs',`\n ########################################\n ## <summary>\n ##\tAll of the rules required to administrate\n-##\tan bitcoin environment\n+##\ta bitcoin environment\n ## </summary>\n ## <param name=\"domain\">\n ##\t<summary>"
      },
      {
        "sha": "a7fb4b4da13d168248ca921cb6339670fbb65cf4",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -287,7 +287,7 @@ General C++\n \n - Assertions should not have side-effects\n \n-  - *Rationale*: Even though the source code is set to to refuse to compile\n+  - *Rationale*: Even though the source code is set to refuse to compile\n     with assertions disabled, having side-effects in assertions is unexpected and\n     makes the code harder to understand\n "
      },
      {
        "sha": "8d4c4e7deab8088c2c7a6bad866106670bd098d1",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -126,7 +126,7 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     if (fNegative || fOverflow || bnTarget == 0)\n         return 0;\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as it's too large for an arith_uint256. However, as 2**256 is at least as large\n     // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n     // or ~bnTarget / (nTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;"
      },
      {
        "sha": "2e66901b3504b8cc8c5c068c07a781caebf8534d",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -176,15 +176,15 @@ class cache\n      */\n     mutable std::vector<bool> epoch_flags;\n \n-    /** epoch_heuristic_counter is used to determine when a epoch might be aged\n+    /** epoch_heuristic_counter is used to determine when an epoch might be aged\n      * & an expensive scan should be done.  epoch_heuristic_counter is\n      * decremented on insert and reset to the new number of inserts which would\n      * cause the epoch to reach epoch_size when it reaches zero.\n      */\n     uint32_t epoch_heuristic_counter;\n \n     /** epoch_size is set to be the number of elements supposed to be in a\n-     * epoch. When the number of non-erased elements in a epoch\n+     * epoch. When the number of non-erased elements in an epoch\n      * exceeds epoch_size, a new epoch should be started and all\n      * current entries demoted. epoch_size is set to be 45% of size because\n      * we want to keep load around 90%, and we support 3 epochs at once --"
      },
      {
        "sha": "9df56e5fc554926db46af8efcb47dba7869a403f",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -86,7 +86,7 @@ class HTTPRequest\n \n     /**\n      * Get the request header specified by hdr, or an empty string.\n-     * Return an pair (isPresent,string).\n+     * Return a pair (isPresent,string).\n      */\n     std::pair<bool, std::string> GetHeader(const std::string& hdr);\n \n@@ -125,7 +125,7 @@ class HTTPClosure\n     virtual ~HTTPClosure() {}\n };\n \n-/** Event class. This can be used either as an cross-thread trigger or as a timer.\n+/** Event class. This can be used either as a cross-thread trigger or as a timer.\n  */\n class HTTPEvent\n {"
      },
      {
        "sha": "7935a965a7c9fdd62533a8c13c9b6033675066df",
        "filename": "src/leveldb/db/version_set.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/leveldb/db/version_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/leveldb/db/version_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/version_set.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -376,7 +376,7 @@ class Compaction {\n   // Each compaction reads inputs from \"level_\" and \"level_+1\"\n   std::vector<FileMetaData*> inputs_[2];      // The two sets of inputs\n \n-  // State used to check for number of of overlapping grandparent files\n+  // State used to check for number of overlapping grandparent files\n   // (parent == level_ + 1, grandparent == level_ + 2)\n   std::vector<FileMetaData*> grandparents_;\n   size_t grandparent_index_;  // Index in grandparent_starts_"
      },
      {
        "sha": "2029ce37448eb67554db29abd4bdfad833e50b28",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -48,7 +48,7 @@ class TxConfirmStats;\n  * in each bucket and the total amount of feerate paid in each bucket. Then we\n  * calculate how many blocks Y it took each transaction to be mined.  We convert\n  * from a number of blocks to a number of periods Y' each encompassing \"scale\"\n- * blocks.  This is is tracked in 3 different data sets each up to a maximum\n+ * blocks.  This is tracked in 3 different data sets each up to a maximum\n  * number of periods. Within each data set we have an array of counters in each\n  * feerate bucket and we increment all the counters from Y' up to max periods\n  * representing that a tx was successfully confirmed in less than or equal to"
      },
      {
        "sha": "3dfb51ccfa515504c7f4ceb8374d47d2b0ec02d0",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -303,7 +303,7 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     }\n     // if we are in-sync, update the UI regardless of last update time\n     if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n-        //pass a async signal to the UI thread\n+        //pass an async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, pIndex->nHeight),\n                                   Q_ARG(QDateTime, QDateTime::fromTime_t(pIndex->GetBlockTime())),"
      },
      {
        "sha": "b1d48a92f7eb6905a6638295e8397524dc9d5f1c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -499,7 +499,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             // there is some fudging in these numbers related to the actual virtual transaction size calculation that will keep this estimate from being exact.\n             // usually, the result will be an overestimate within a couple of satoshis so that the confirmation dialog ends up displaying a slightly smaller fee.\n-            // also, the witness stack size value value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n+            // also, the witness stack size value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n             nBytes += 2; // account for the serialized marker and flag bytes\n             nBytes += nQuantity; // account for the witness byte that holds the number of stack items for each input.\n         }"
      },
      {
        "sha": "14078b9ee810503a326b2d212d001e1777c8316c",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -315,7 +315,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>\n@@ -338,7 +338,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>\n@@ -361,7 +361,7 @@\n             <bool>false</bool>\n            </property>\n            <property name=\"toolTip\">\n-            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+            <string>Shows if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n            </property>\n            <property name=\"text\">\n             <string/>"
      },
      {
        "sha": "a83f285034fdb8b30330800c28e5913fc6b42fd4",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -126,7 +126,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n         return;\n \n     // estimate the number of headers left based on nPowTargetSpacing\n-    // and check if the gui is not aware of the the best header (happens rarely)\n+    // and check if the gui is not aware of the best header (happens rarely)\n     int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / Params().GetConsensus().nPowTargetSpacing;\n     bool hasBestHeader = bestHeaderHeight >= count;\n "
      },
      {
        "sha": "ec0580b81c24404cd4b664bde411573404f04f11",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -672,7 +672,7 @@ void RPCConsole::setFontSize(int newSize)\n {\n     QSettings settings;\n \n-    //don't allow a insane font size\n+    //don't allow an insane font size\n     if (newSize < FONT_RANGE.width() || newSize > FONT_RANGE.height())\n         return;\n \n@@ -738,7 +738,7 @@ void RPCConsole::clear(bool clearHistory)\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type <b>help</b> for an overview of available commands.\")) +\n                         \"<br><span class=\\\"secwarning\\\">\" +\n-                        tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.\") +\n+                        tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.\") +\n                         \"</span>\",\n                         true);\n }"
      },
      {
        "sha": "6538a80233c9acc342dcbf13915075631be091d8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -339,7 +339,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         transaction_array.append(&(ssTx[0]), ssTx.size());\n     }\n \n-    // Add addresses / update labels that we've sent to to the address book,\n+    // Add addresses / update labels that we've sent to the address book,\n     // and emit coinsSent signal for each recipient\n     for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {"
      },
      {
        "sha": "33e3fb4529833d3eb14e89e486e9019206c4c420",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -413,7 +413,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n     }\n \n-    // throw exception in case of a empty request\n+    // throw exception in case of an empty request\n     std::string strRequestMutable = req->ReadBody();\n     if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Error: empty request\");"
      },
      {
        "sha": "aecedb48b2c635db0af5cd4344888552bae9255e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -75,7 +75,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n-            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The ip address and port of the peer\\n\"\n+            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n             \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n@@ -199,7 +199,7 @@ UniValue addnode(const JSONRPCRequest& request)\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n-            \"\\nAttempts add or remove a node from the addnode list.\\n\"\n+            \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n             \"Or try a connection to a node once.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n@@ -290,7 +290,7 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node ip address or name (as provided to addnode)\\n\"\n+            \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node IP address or name (as provided to addnode)\\n\"\n             \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n             \"    \\\"addresses\\\" : [                    (list of objects) Only when connected = true\\n\"\n             \"       {\\n\"\n@@ -497,12 +497,12 @@ UniValue setban(const JSONRPCRequest& request)\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw std::runtime_error(\n                             \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n-                            \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n+                            \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n-                            \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n-                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n-                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\\n\"\n+                            \"2. \\\"command\\\"      (string, required) 'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\\n\"\n+                            \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n+                            \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n                             \"\\nExamples:\\n\"\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")"
      },
      {
        "sha": "5198724bea15360d7c680e76ba8d0b2d3ef75641",
        "filename": "src/secp256k1/sage/group_prover.sage",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/sage/group_prover.sage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/sage/group_prover.sage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/sage/group_prover.sage?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -3,7 +3,7 @@\n # to independently set assumptions on input or intermediary variables.\n #\n # The general approach is:\n-# * A constraint is a tuple of two sets of of symbolic expressions:\n+# * A constraint is a tuple of two sets of symbolic expressions:\n #   the first of which are required to evaluate to zero, the second of which\n #   are required to evaluate to nonzero.\n #   - A constraint is said to be conflicting if any of its nonzero expressions"
      },
      {
        "sha": "bd2b629e1c2e9b9699533bc598fa7759918e0645",
        "filename": "src/secp256k1/src/asm/field_10x26_arm.s",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/src/asm/field_10x26_arm.s",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/secp256k1/src/asm/field_10x26_arm.s",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/asm/field_10x26_arm.s?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -11,7 +11,7 @@ Note:\n \n - To avoid unnecessary loads and make use of available registers, two\n   'passes' have every time been interleaved, with the odd passes accumulating c' and d' \n-  which will be added to c and d respectively in the the even passes\n+  which will be added to c and d respectively in the even passes\n \n */\n "
      },
      {
        "sha": "2c98fbcfd67efa8da6fec19070934611c1770369",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -219,7 +219,7 @@ BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n \n \n // Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n-// element of Aarray and Barray, and then converting the result into a arith_uint256.\n+// element of Aarray and Barray, and then converting the result into an arith_uint256.\n #define CHECKBITWISEOPERATOR(_A_,_B_,_OP_)                              \\\n     for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n     BOOST_CHECK(arith_uint256V(std::vector<unsigned char>(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));"
      },
      {
        "sha": "0390d6806d2bb687190bb08e0afe9352a045c397",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -2506,7 +2506,7 @@\n ],\n \n [\"CHECKSEQUENCEVERIFY tests\"],\n-[\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on a empty stack\"],\n+[\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on an empty stack\"],\n [\"-1\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"NEGATIVE_LOCKTIME\", \"CSV automatically fails if stack top is negative\"],\n [\"0x0100\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY,MINIMALDATA\", \"UNKNOWN_ERROR\", \"CSV fails if stack top is not minimally encoded\"],\n [\"0\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"UNSATISFIED_LOCKTIME\", \"CSV fails if stack top bit 1 << 31 is set and the tx version < 2\"],"
      },
      {
        "sha": "e6b382af13e70b8466eb935d5aaac65eab1f9b05",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -174,7 +174,7 @@\n [[[\"5a6b0021a6042a686b6b94abc36b387bef9109847774e8b1e51eb8cc55c53921\", 1, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n \"01000000012139c555ccb81ee5b1e87477840991ef7b386bc3ab946b6b682a04a621006b5a01000000fdb40148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f2204148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390175ac4830450220646b72c35beeec51f4d5bc1cbae01863825750d7f490864af354e6ea4f625e9c022100f04b98432df3a9641719dbced53393022e7249fb59db993af1118539830aab870148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a580039017521038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH\"],\n \n-[\"Finally CHECKMULTISIG removes all signatures prior to hashing the script containing those signatures. In conjunction with the SIGHASH_SINGLE bug this lets us test whether or not FindAndDelete() is actually present in scriptPubKey/redeemScript evaluation by including a signature of the digest 0x01 We can compute in advance for our pubkey, embed it it in the scriptPubKey, and then also using a normal SIGHASH_ALL signature. If FindAndDelete() wasn't run, the 'bugged' signature would still be in the hashed script, and the normal signature would fail.\"],\n+[\"Finally CHECKMULTISIG removes all signatures prior to hashing the script containing those signatures. In conjunction with the SIGHASH_SINGLE bug this lets us test whether or not FindAndDelete() is actually present in scriptPubKey/redeemScript evaluation by including a signature of the digest 0x01 We can compute in advance for our pubkey, embed it in the scriptPubKey, and then also using a normal SIGHASH_ALL signature. If FindAndDelete() wasn't run, the 'bugged' signature would still be in the hashed script, and the normal signature would fail.\"],\n \n [\"Here's an example on mainnet within a P2SH redeemScript. Remarkably it's a standard transaction in <0.9\"],\n [[[\"b5b598de91787439afd5938116654e0b16b7a0d0f82742ba37564219c5afcbf9\", 0, \"DUP HASH160 0x14 0xf6f365c40f0739b61de827a44751e5e99032ed8f EQUALVERIFY CHECKSIG\"],"
      },
      {
        "sha": "4cd64bf0281f15fc371dcf6ae9e1777527f135d4",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -407,7 +407,7 @@ static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n /****** Bitcoin specific TorController implementation ********/\n \n /** Controller that connects to Tor control socket, authenticate, then create\n- * and maintain a ephemeral hidden service.\n+ * and maintain an ephemeral hidden service.\n  */\n class TorController\n {"
      },
      {
        "sha": "bb03e0546087b0f4ad4e88be3697b7e8eb04dea7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -122,7 +122,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // accounted for in the state of their ancestors)\n     std::set<uint256> setAlreadyIncluded(vHashesToUpdate.begin(), vHashesToUpdate.end());\n \n-    // Iterate in reverse, so that whenever we are looking at at a transaction\n+    // Iterate in reverse, so that whenever we are looking at a transaction\n     // we are sure that all in-mempool descendants have already been processed.\n     // This maximizes the benefit of the descendant cache and guarantees that\n     // setMemPoolChildren will be updated, an assumption made in"
      },
      {
        "sha": "93abaec04b1090a25680daf8c2db74c209ad6e97",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -437,7 +437,7 @@ bool ParseInt32(const std::string& str, int32_t *out)\n     errno = 0; // strtol will not set errno if valid\n     long int n = strtol(str.c_str(), &endp, 10);\n     if(out) *out = (int32_t)n;\n-    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n@@ -453,7 +453,7 @@ bool ParseInt64(const std::string& str, int64_t *out)\n     errno = 0; // strtoll will not set errno if valid\n     long long int n = strtoll(str.c_str(), &endp, 10);\n     if(out) *out = (int64_t)n;\n-    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int64_t*.\n     return endp && *endp == 0 && !errno &&\n         n >= std::numeric_limits<int64_t>::min() &&\n@@ -470,7 +470,7 @@ bool ParseUInt32(const std::string& str, uint32_t *out)\n     errno = 0; // strtoul will not set errno if valid\n     unsigned long int n = strtoul(str.c_str(), &endp, 10);\n     if(out) *out = (uint32_t)n;\n-    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report a over/underflow\n+    // Note that strtoul returns a *unsigned long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n@@ -487,7 +487,7 @@ bool ParseUInt64(const std::string& str, uint64_t *out)\n     errno = 0; // strtoull will not set errno if valid\n     unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n     if(out) *out = (uint64_t)n;\n-    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report a over/underflow\n+    // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint64_t*.\n     return endp && *endp == 0 && !errno &&\n         n <= std::numeric_limits<uint64_t>::max();"
      },
      {
        "sha": "7b40447de6c77cbbdd54e2e8af0c10f46d222b7c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -1206,7 +1206,7 @@ static bool CheckInputs(const CTransaction& tx, CValidationState &state, const C\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n                     // Failures of other flags indicate a transaction that is\n-                    // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n+                    // invalid in new blocks, e.g. an invalid P2SH. We DoS ban\n                     // such nodes as they are not following the protocol. That\n                     // said during an upgrade careful thought should be taken\n                     // as to the correct behavior - we may want to continue"
      },
      {
        "sha": "09aaf4f74706c61231b40b4f8f5cc163d0bcda43",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -1049,7 +1049,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n             \"    }\\n\""
      },
      {
        "sha": "c94f337b261d82fa24dc19e0e27979bfebaa626e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -3866,11 +3866,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     else if (IsArgSet(\"-usehd\")) {\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n+            InitError(strprintf(_(\"Error loading %s: You can't disable HD on an already existing HD wallet\"), walletFile));\n             return NULL;\n         }\n         if (!walletInstance->IsHDEnabled() && useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n+            InitError(strprintf(_(\"Error loading %s: You can't enable HD on an already existing non-HD wallet\"), walletFile));\n             return NULL;\n         }\n     }\n@@ -3890,7 +3890,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n-        //this might happen if a user uses a old wallet within a pruned node\n+        //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n         if (fPruneMode)\n         {"
      },
      {
        "sha": "569db7ced5b1d23b4e1ff07d5fd8974d8c894fda",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -10,7 +10,7 @@\n This module consists of around a dozen individual test cases implemented in the\n top-level functions named as test_<test_case_description>. The test functions\n can be disabled or reordered if needed for debugging. If new test cases are\n-added in the the future, they should try to follow the same convention and not\n+added in the future, they should try to follow the same convention and not\n make assumptions about execution order.\n \"\"\"\n "
      },
      {
        "sha": "4f778a933b67d373e8641784481fd5879070a777",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -318,7 +318,7 @@ def wallet_test(self):\n         self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n-        # check that wallet loads loads successfully when restarting a pruned node after IBD.\n+        # check that wallet loads successfully when restarting a pruned node after IBD.\n         # this was reported to fail in #7494.\n         self.log.info(\"Syncing node 5 to test wallet\")\n         connect_nodes(self.nodes[0], 5)"
      },
      {
        "sha": "a69dbb501333a58e3a8372c316fc9023768ae155",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -82,9 +82,9 @@ def run_test(self):\n                 n = vout['n']\n \n \n-        ######################################\n-        # GETUTXOS: query a unspent outpoint #\n-        ######################################\n+        #######################################\n+        # GETUTXOS: query an unspent outpoint #\n+        #######################################\n         json_request = '/checkmempool/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n@@ -97,9 +97,9 @@ def run_test(self):\n         assert_equal(json_obj['utxos'][0]['value'], 0.1)\n \n \n-        ################################################\n-        # GETUTXOS: now query a already spent outpoint #\n-        ################################################\n+        #################################################\n+        # GETUTXOS: now query an already spent outpoint #\n+        #################################################\n         json_request = '/checkmempool/'+vintx+'-0'\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n@@ -161,24 +161,24 @@ def run_test(self):\n         json_request = '/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be a outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 0) #there should be an outpoint because it has just added to the mempool\n \n         json_request = '/checkmempool/'+txid+'-'+str(n)\n         json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be a outpoint because it has just added to the mempool\n+        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n \n         #do some invalid requests\n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid json request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n \n         json_request = '{\"checkmempool'\n         response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n \n         response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send a invalid bin request\n+        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n \n         #test limits\n         json_request = '/checkmempool/'"
      },
      {
        "sha": "bc42a319df79dc061a89eab78351911972c6f087",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n-# So we can create many many transactions without needing to spend\n+# So we can create many transactions without needing to spend\n # time signing.\n redeem_script_1 = CScript([OP_1, OP_DROP])\n redeem_script_2 = CScript([OP_2, OP_DROP])"
      },
      {
        "sha": "688347a68ff53db386e8bbec62e091627ca4c43e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -61,7 +61,7 @@\n \n # One lock for synchronizing all data access between the networking thread (see\n # NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to to a NodeConnCB,\n+# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the NodeConnCB or NodeConn."
      },
      {
        "sha": "e4d40520ef6361e62cdcd50eb6f5147b574ef4c8",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=0a5a6b90bc75a8d75fdff71c9b08abe9b0b96b0a",
        "patch": "@@ -70,7 +70,7 @@ def run_test (self):\n         self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n         \n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n-        #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+        #there must be an exception because the unconfirmed wallettx0 must be gone by now\n \n         tx0 = self.nodes[0].gettransaction(txid0)\n         assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed"
      }
    ]
  }
]