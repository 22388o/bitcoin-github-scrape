[
  {
    "sha": "1e46ebdf8618e585568ffc1b093c79cc9be07b57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTQ2ZWJkZjg2MThlNTg1NTY4ZmZjMWIwOTNjNzljYzliZTA3YjU3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T00:43:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-23T21:45:01Z"
      },
      "message": "Implement {Encode,Decode}Destination without CBitcoinAddress",
      "tree": {
        "sha": "a9c8d433e3555bcfcdc171a7a58d9818a397a203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9c8d433e3555bcfcdc171a7a58d9818a397a203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 49,
      "deletions": 82
    },
    "files": [
      {
        "sha": "0272711575e50909f814b8c60d4ad0e4b4bc97d7",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 81,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "patch": "@@ -5,16 +5,17 @@\n #include \"base58.h\"\n \n #include \"hash.h\"\n+#include \"script/script.h\"\n #include \"uint256.h\"\n \n-#include <assert.h>\n-#include <stdint.h>\n-#include <string.h>\n-#include <vector>\n-#include <string>\n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n \n+#include <algorithm>\n+#include <assert.h>\n+#include <string.h>\n+\n+\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -212,86 +213,55 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n \n namespace\n {\n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id);\n-    bool Set(const CTxDestination &dest);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-};\n-\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+class DestinationEncoder : public boost::static_visitor<std::string>\n {\n private:\n-    CBitcoinAddress* addr;\n+    const CChainParams& m_params;\n \n public:\n-    explicit CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n \n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n+    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+};\n \n-CTxDestination CBitcoinAddress::Get() const\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n {\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    return CNoDestination();\n }\n+} // namespace\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n {\n@@ -328,22 +298,20 @@ bool CBitcoinSecret::SetString(const std::string& strSecret)\n \n std::string EncodeDestination(const CTxDestination& dest)\n {\n-    CBitcoinAddress addr(dest);\n-    if (!addr.IsValid()) return \"\";\n-    return addr.ToString();\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n }\n \n CTxDestination DecodeDestination(const std::string& str)\n {\n-    return CBitcoinAddress(str).Get();\n+    return DecodeDestination(str, Params());\n }\n \n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n-    return CBitcoinAddress(str).IsValid(params);\n+    return IsValidDestination(DecodeDestination(str, params));\n }\n \n bool IsValidDestinationString(const std::string& str)\n {\n-    return CBitcoinAddress(str).IsValid();\n+    return IsValidDestinationString(str, Params());\n }"
      },
      {
        "sha": "9dc4234248b0b411280776e8ae0c4a2443907bf4",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e46ebdf8618e585568ffc1b093c79cc9be07b57/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "patch": "@@ -17,7 +17,6 @@\n #include \"chainparams.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n-#include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"support/allocators/zeroafterfree.h\"\n "
      }
    ]
  },
  {
    "sha": "8fd226705347c2b3955d0d98f8ca21e4325e6765",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmQyMjY3MDUzNDdjMmIzOTU1ZDBkOThmOGNhMjFlNDMyNWU2NzY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T01:12:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:02:16Z"
      },
      "message": "Import Bech32 C++ reference code & tests\n\nThis includes a reformatted version of the Bech32 reference code\n(see https://github.com/sipa/bech32/tree/master/ref/c%2B%2B), with\nextra documentation.",
      "tree": {
        "sha": "0a5e9d0e14fddb614700a06d00cd5ae23955780a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a5e9d0e14fddb614700a06d00cd5ae23955780a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd226705347c2b3955d0d98f8ca21e4325e6765",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e46ebdf8618e585568ffc1b093c79cc9be07b57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e46ebdf8618e585568ffc1b093c79cc9be07b57"
      }
    ],
    "stats": {
      "total": 286,
      "additions": 286,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c71e457ebe940e0ad021f6708f5f9dabf365490b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -78,6 +78,7 @@ BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n   base58.h \\\n+  bech32.h \\\n   bloom.h \\\n   blockencodings.h \\\n   chain.h \\\n@@ -316,6 +317,7 @@ libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n+  bech32.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\"
      },
      {
        "sha": "ed95f345b1e90c64ca824b0588f5a0684ae5bcff",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -31,6 +31,7 @@ BITCOIN_TESTS =\\\n   test/base32_tests.cpp \\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n+  test/bech32_tests.cpp \\\n   test/bip32_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\"
      },
      {
        "sha": "573eac58bb8eec775a28ce76ea088dbaac8e705a",
        "filename": "src/bech32.cpp",
        "status": "added",
        "additions": 191,
        "deletions": 0,
        "changes": 191,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -0,0 +1,191 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+\n+namespace\n+{\n+\n+typedef std::vector<uint8_t> data;\n+\n+/** The Bech32 character set for encoding. */\n+const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+/** The Bech32 character set for decoding. */\n+const int8_t CHARSET_REV[128] = {\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,\n+    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,\n+     1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n+};\n+\n+/** Concatenate two byte arrays. */\n+data Cat(data x, const data& y)\n+{\n+    x.insert(x.end(), y.begin(), y.end());\n+    return x;\n+}\n+\n+/** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n+ *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n+ *  bits correspond to earlier values. */\n+uint32_t PolyMod(const data& v)\n+{\n+    // The input is interpreted as a list of coefficients of a polynomial over F = GF(32), with an\n+    // implicit 1 in front. If the input is [v0,v1,v2,v3,v4], that polynomial is v(x) =\n+    // 1*x^5 + v0*x^4 + v1*x^3 + v2*x^2 + v3*x + v4. The implicit 1 guarantees that\n+    // [v0,v1,v2,...] has a distinct checksum from [0,v0,v1,v2,...].\n+\n+    // The output is a 30-bit integer whose 5-bit groups are the coefficients of the remainder of\n+    // v(x) mod g(x), where g(x) is the Bech32 generator,\n+    // x^6 + {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}. g(x) is chosen in such a way\n+    // that the resulting code is a BCH code, guaranteeing detection of up to 3 errors within a\n+    // window of 1023 characters. Among the various possible BCH codes, one was selected to in\n+    // fact guarantee detection of up to 4 errors within a window of 89 characters.\n+\n+    // Note that the coefficients are elements of GF(32), here represented as decimal numbers\n+    // between {}. In this finite field, addition is just XOR of the corresponding numbers. For\n+    // example, {27} + {13} = {27 ^ 13} = {22}. Multiplication is more complicated, and requires\n+    // treating the bits of values themselves as coefficients of a polynomial over a smaller field,\n+    // GF(2), and multiplying those polynomials mod a^5 + a^3 + 1. For example, {5} * {26} =\n+    // (a^2 + 1) * (a^4 + a^3 + a) = (a^4 + a^3 + a) * a^2 + (a^4 + a^3 + a) = a^6 + a^5 + a^4 + a\n+    // = a^3 + 1 (mod a^5 + a^3 + 1) = {9}.\n+\n+    // During the course of the loop below, `c` contains the bitpacked coefficients of the\n+    // polynomial constructed from just the values of v that were processed so far, mod g(x). In\n+    // the above example, `c` initially corresponds to 1 mod (x), and after processing 2 inputs of\n+    // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n+    // for `c`.\n+    uint32_t c = 1;\n+    for (auto v_i : v) {\n+        // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n+        // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n+        // correspond to c'(x) = (f(x) * x + v_i) mod g(x), where v_i is the next input to\n+        // process. Simplifying:\n+        // c'(x) = (f(x) * x + v_i) mod g(x)\n+        //         ((f(x) mod g(x)) * x + v_i) mod g(x)\n+        //         (c(x) * x + v_i) mod g(x)\n+        // If c(x) = c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5, we want to compute\n+        // c'(x) = (c0*x^5 + c1*x^4 + c2*x^3 + c3*x^2 + c4*x + c5) * x + v_i mod g(x)\n+        //       = c0*x^6 + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i mod g(x)\n+        //       = c0*(x^6 mod g(x)) + c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i\n+        // If we call (x^6 mod g(x)) = k(x), this can be written as\n+        // c'(x) = (c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i) + c0*k(x)\n+\n+        // First, determine the value of c0:\n+        uint8_t c0 = c >> 25;\n+\n+        // Then compute c1*x^5 + c2*x^4 + c3*x^3 + c4*x^2 + c5*x + v_i:\n+        c = ((c & 0x1ffffff) << 5) ^ v_i;\n+\n+        // Finally, for each set bit n in c0, conditionally add {2^n}k(x):\n+        if (c0 & 1)  c ^= 0x3b6a57b2; //     k(x) = {29}x^5 + {22}x^4 + {20}x^3 + {21}x^2 + {29}x + {18}\n+        if (c0 & 2)  c ^= 0x26508e6d; //  {2}k(x) = {19}x^5 +  {5}x^4 +     x^3 +  {3}x^2 + {19}x + {13}\n+        if (c0 & 4)  c ^= 0x1ea119fa; //  {4}k(x) = {15}x^5 + {10}x^4 +  {2}x^3 +  {6}x^2 + {15}x + {26}\n+        if (c0 & 8)  c ^= 0x3d4233dd; //  {8}k(x) = {30}x^5 + {20}x^4 +  {4}x^3 + {12}x^2 + {30}x + {29}\n+        if (c0 & 16) c ^= 0x2a1462b3; // {16}k(x) = {21}x^5 +     x^4 +  {8}x^3 + {24}x^2 + {21}x + {19}\n+    }\n+    return c;\n+}\n+\n+/** Convert to lower case. */\n+inline unsigned char LowerCase(unsigned char c)\n+{\n+    return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n+}\n+\n+/** Expand a HRP for use in checksum computation. */\n+data ExpandHRP(const std::string& hrp)\n+{\n+    data ret;\n+    ret.reserve(hrp.size() + 90);\n+    ret.resize(hrp.size() * 2 + 1);\n+    for (size_t i = 0; i < hrp.size(); ++i) {\n+        unsigned char c = hrp[i];\n+        ret[i] = c >> 5;\n+        ret[i + hrp.size() + 1] = c & 0x1f;\n+    }\n+    ret[hrp.size()] = 0;\n+    return ret;\n+}\n+\n+/** Verify a checksum. */\n+bool VerifyChecksum(const std::string& hrp, const data& values)\n+{\n+    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n+    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n+    // list of values would result in a new valid list. For that reason, Bech32 requires the\n+    // resulting checksum to be 1 instead.\n+    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+}\n+\n+/** Create a checksum. */\n+data CreateChecksum(const std::string& hrp, const data& values)\n+{\n+    data enc = Cat(ExpandHRP(hrp), values);\n+    enc.resize(enc.size() + 6); // Append 6 zeroes\n+    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    data ret(6);\n+    for (size_t i = 0; i < 6; ++i) {\n+        // Convert the 5-bit groups in mod to checksum values.\n+        ret[i] = (mod >> (5 * (5 - i))) & 31;\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. */\n+std::string Encode(const std::string& hrp, const data& values) {\n+    data checksum = CreateChecksum(hrp, values);\n+    data combined = Cat(values, checksum);\n+    std::string ret = hrp + '1';\n+    ret.reserve(ret.size() + combined.size());\n+    for (auto c : combined) {\n+        ret += CHARSET[c];\n+    }\n+    return ret;\n+}\n+\n+/** Decode a Bech32 string. */\n+std::pair<std::string, data> Decode(const std::string& str) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c < 33 || c > 126) return {};\n+        if (c >= 'a' && c <= 'z') lower = true;\n+        if (c >= 'A' && c <= 'Z') upper = true;\n+    }\n+    if (lower && upper) return {};\n+    size_t pos = str.rfind('1');\n+    if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n+        return {};\n+    }\n+    data values(str.size() - 1 - pos);\n+    for (size_t i = 0; i < str.size() - 1 - pos; ++i) {\n+        unsigned char c = str[i + pos + 1];\n+        int8_t rev = (c < 33 || c > 126) ? -1 : CHARSET_REV[c];\n+        if (rev == -1) {\n+            return {};\n+        }\n+        values[i] = rev;\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+    if (!VerifyChecksum(hrp, values)) {\n+        return {};\n+    }\n+    return {hrp, data(values.begin(), values.end() - 6)};\n+}\n+\n+} // namespace bech32"
      },
      {
        "sha": "7ef7b22213fe6f5a95e6b4c01bc6222c0c7885ca",
        "filename": "src/bech32.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// Bech32 is a string encoding format used in newer address types.\n+// The output consists of a human-readable part (alphanumeric), a\n+// separator character (1), and a base32 data section, the last\n+// 6 characters of which are a checksum.\n+//\n+// For more information, see BIP 173.\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+\n+namespace bech32\n+{\n+\n+/** Encode a Bech32 string. Returns the empty string in case of failure. */\n+std::string Encode(const std::string& hrp, const std::vector<uint8_t>& values);\n+\n+/** Decode a Bech32 string. Returns (hrp, data). Empty hrp means failure. */\n+std::pair<std::string, std::vector<uint8_t>> Decode(const std::string& str);\n+\n+} // namespace bech32"
      },
      {
        "sha": "ce4cddd64bc9bc46f7e3da171c3b5620f208371c",
        "filename": "src/test/bech32_tests.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd226705347c2b3955d0d98f8ca21e4325e6765/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2017 Pieter Wuille\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bech32.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n+\n+bool CaseInsensitiveEqual(const std::string &s1, const std::string &s2)\n+{\n+    if (s1.size() != s2.size()) return false;\n+    for (size_t i = 0; i < s1.size(); ++i) {\n+        char c1 = s1[i];\n+        if (c1 >= 'A' && c1 <= 'Z') c1 -= ('A' - 'a');\n+        char c2 = s2[i];\n+        if (c2 >= 'A' && c2 <= 'Z') c2 -= ('A' - 'a');\n+        if (c1 != c2) return false;\n+    }\n+    return true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n+{\n+    static const std::string CASES[] = {\n+        \"A12UEL5L\",\n+        \"a12uel5l\",\n+        \"an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs\",\n+        \"abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw\",\n+        \"11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j\",\n+        \"split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w\",\n+        \"?1ezyfcl\",\n+    };\n+    for (const std::string& str : CASES) {\n+        auto ret = bech32::Decode(str);\n+        BOOST_CHECK(!ret.first.empty());\n+        std::string recode = bech32::Encode(ret.first, ret.second);\n+        BOOST_CHECK(!recode.empty());\n+        BOOST_CHECK(CaseInsensitiveEqual(str, recode));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n+{\n+    static const std::string CASES[] = {\n+        \" 1nwldj5\",\n+        \"\\x7f\"\"1axkwrx\",\n+        \"\\x80\"\"1eym55h\",\n+        \"an84characterslonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1569pvx\",\n+        \"pzry9x0s0muk\",\n+        \"1pzry9x0s0muk\",\n+        \"x1b4n0q5v\",\n+        \"li1dgmt3\",\n+        \"de1lg7wt\\xff\",\n+        \"A1G7SGD8\",\n+        \"10a06t8\",\n+        \"1qzzfhee\",\n+    };\n+    for (const std::string& str : CASES) {\n+        auto ret = bech32::Decode(str);\n+        BOOST_CHECK(ret.first.empty());\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTY1YzU1MDFjZmU3NzU1NTg1ZmQ3MmY2MzI5ZWVhNGM1ZWIyYmYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-19T22:30:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:04:11Z"
      },
      "message": "Convert base58_tests from type/payload to scriptPubKey comparison",
      "tree": {
        "sha": "1216c17e4a3ac94d9d656bcb0413bbfc084c7527",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1216c17e4a3ac94d9d656bcb0413bbfc084c7527"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd226705347c2b3955d0d98f8ca21e4325e6765",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd226705347c2b3955d0d98f8ca21e4325e6765"
      }
    ],
    "stats": {
      "total": 679,
      "additions": 294,
      "deletions": 385
    },
    "files": [
      {
        "sha": "f6613b0b94b69ac8a4422656ad54b43a9d5f28f8",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 86,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "patch": "@@ -10,14 +10,15 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n+\n+#include <univalue.h>\n \n #include <boost/test/unit_test.hpp>\n \n-#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n \n@@ -72,50 +73,6 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n-// Visitor to check address type\n-class TestAddrTypeVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    std::string exp_addrType;\n-public:\n-    explicit TestAddrTypeVisitor(const std::string &_exp_addrType) : exp_addrType(_exp_addrType) { }\n-    bool operator()(const CKeyID &id) const\n-    {\n-        return (exp_addrType == \"pubkey\");\n-    }\n-    bool operator()(const CScriptID &id) const\n-    {\n-        return (exp_addrType == \"script\");\n-    }\n-    bool operator()(const CNoDestination &no) const\n-    {\n-        return (exp_addrType == \"none\");\n-    }\n-};\n-\n-// Visitor to check address payload\n-class TestPayloadVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    std::vector<unsigned char> exp_payload;\n-public:\n-    explicit TestPayloadVisitor(std::vector<unsigned char> &_exp_payload) : exp_payload(_exp_payload) { }\n-    bool operator()(const CKeyID &id) const\n-    {\n-        uint160 exp_key(exp_payload);\n-        return exp_key == id;\n-    }\n-    bool operator()(const CScriptID &id) const\n-    {\n-        uint160 exp_key(exp_payload);\n-        return exp_key == id;\n-    }\n-    bool operator()(const CNoDestination &no) const\n-    {\n-        return exp_payload.size() == 0;\n-    }\n-};\n-\n // Goal: check that parsed keys match test payload\n BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n@@ -127,22 +84,21 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             continue;\n         }\n         std::string exp_base58string = test[0].get_str();\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        if (isTestnet) {\n             SelectParams(CBaseChainParams::TESTNET);\n-        else\n+        } else {\n             SelectParams(CBaseChainParams::MAIN);\n-        if(isPrivkey)\n-        {\n+        }\n+        if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n             BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n@@ -154,15 +110,12 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             // Private key must be invalid public key\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n-        }\n-        else\n-        {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str(); // \"script\" or \"pubkey\"\n+        } else {\n             // Must be valid public key\n             destination = DecodeDestination(exp_base58string);\n+            CScript script = GetScriptForDestination(destination);\n             BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_MESSAGE((boost::get<CScriptID>(&destination) != nullptr) == (exp_addrType == \"script\"), \"isScript mismatch\" + strTest);\n-            BOOST_CHECK_MESSAGE(boost::apply_visitor(TestAddrTypeVisitor(exp_addrType), destination), \"addrType mismatch\" + strTest);\n+            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n \n             // Public key must be invalid private key\n             secret.SetString(exp_base58string);\n@@ -188,44 +141,26 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        if (isTestnet)\n+        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n+        if (isTestnet) {\n             SelectParams(CBaseChainParams::TESTNET);\n-        else\n+        } else {\n             SelectParams(CBaseChainParams::MAIN);\n-        if(isPrivkey)\n-        {\n+        }\n+        if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             CKey key;\n             key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n             assert(key.IsValid());\n             CBitcoinSecret secret;\n             secret.SetKey(key);\n             BOOST_CHECK_MESSAGE(secret.ToString() == exp_base58string, \"result mismatch: \" + strTest);\n-        }\n-        else\n-        {\n-            std::string exp_addrType = find_value(metadata, \"addrType\").get_str();\n+        } else {\n             CTxDestination dest;\n-            if(exp_addrType == \"pubkey\")\n-            {\n-                dest = CKeyID(uint160(exp_payload));\n-            }\n-            else if(exp_addrType == \"script\")\n-            {\n-                dest = CScriptID(uint160(exp_payload));\n-            }\n-            else if(exp_addrType == \"none\")\n-            {\n-                dest = CNoDestination();\n-            }\n-            else\n-            {\n-                BOOST_ERROR(\"Bad addrtype: \" << strTest);\n-                continue;\n-            }\n+            CScript exp_script(exp_payload.begin(), exp_payload.end());\n+            ExtractDestination(exp_script, dest);\n             std::string address = EncodeDestination(dest);\n-            BOOST_CHECK_MESSAGE(address == exp_base58string, \"mismatch: \" + strTest);\n+            BOOST_CHECK_EQUAL(address, exp_base58string);\n         }\n     }\n "
      },
      {
        "sha": "e1e4d0a304ad9ba45531b42d09e3d08cf54f0ea1",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "modified",
        "additions": 273,
        "deletions": 299,
        "changes": 572,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6565c5501cfe7755585fd72f6329eea4c5eb2bf1/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "patch": "@@ -1,452 +1,426 @@\n [\n     [\n-        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\", \n-        \"65a16059864a2fdbc7c99a4723a8395bc6f188eb\", \n+        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\",\n+        \"76a91465a16059864a2fdbc7c99a4723a8395bc6f188eb88ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\", \n-        \"74f209f6ea907e2ea48f74fae05782ae8a665257\", \n+        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\",\n+        \"a91474f209f6ea907e2ea48f74fae05782ae8a66525787\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\", \n-        \"53c0307d6851aa0ce7825ba883c6bd9ad242b486\", \n+        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n+        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\", \n-        \"6349a418fc4578d10a372b54b45c280cc8c4382f\", \n+        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\",\n+        \"a9146349a418fc4578d10a372b54b45c280cc8c4382f87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\", \n-        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\", \n+        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\",\n+        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\", \n-        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\", \n+        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\",\n+        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\", \n-        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\", \n+        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n+        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\", \n-        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\", \n+        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n+        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\", \n-        \"6d23156cbbdcc82a5a47eee4c2c7c583c18b6bf4\", \n+        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\",\n+        \"76a9146d23156cbbdcc82a5a47eee4c2c7c583c18b6bf488ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\", \n-        \"fcc5460dd6e2487c7d75b1963625da0e8f4c5975\", \n+        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\",\n+        \"a914fcc5460dd6e2487c7d75b1963625da0e8f4c597587\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\", \n-        \"f1d470f9b02370fdec2e6b708b08ac431bf7a5f7\", \n+        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\",\n+        \"76a914f1d470f9b02370fdec2e6b708b08ac431bf7a5f788ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\", \n-        \"c579342c2c4c9220205e2cdc285617040c924a0a\", \n+        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\",\n+        \"a914c579342c2c4c9220205e2cdc285617040c924a0a87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\", \n-        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\", \n+        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\",\n+        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\", \n-        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\", \n+        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\",\n+        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\", \n-        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\", \n+        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\",\n+        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\", \n-        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\", \n+        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\",\n+        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\", \n-        \"7987ccaa53d02c8873487ef919677cd3db7a6912\", \n+        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\",\n+        \"76a9147987ccaa53d02c8873487ef919677cd3db7a691288ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\", \n-        \"63bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb\", \n+        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\",\n+        \"a91463bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\", \n-        \"ef66444b5b17f14e8fae6e7e19b045a78c54fd79\", \n+        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\",\n+        \"76a914ef66444b5b17f14e8fae6e7e19b045a78c54fd7988ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\", \n-        \"c3e55fceceaa4391ed2a9677f4a4d34eacd021a0\", \n+        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\",\n+        \"a914c3e55fceceaa4391ed2a9677f4a4d34eacd021a087\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\", \n-        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\", \n+        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\",\n+        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\", \n-        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\", \n+        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\",\n+        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\", \n-        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\", \n+        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\",\n+        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\", \n-        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\", \n+        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\",\n+        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\", \n-        \"adc1cc2081a27206fae25792f28bbc55b831549d\", \n+        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\",\n+        \"76a914adc1cc2081a27206fae25792f28bbc55b831549d88ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\", \n-        \"188f91a931947eddd7432d6e614387e32b244709\", \n+        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\",\n+        \"a914188f91a931947eddd7432d6e614387e32b24470987\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\", \n-        \"1694f5bc1a7295b600f40018a618a6ea48eeb498\", \n+        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\",\n+        \"76a9141694f5bc1a7295b600f40018a618a6ea48eeb49888ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\", \n-        \"3b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f3\", \n+        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\",\n+        \"a9143b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f387\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\", \n-        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\", \n+        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\",\n+        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\", \n-        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\", \n+        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\",\n+        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\", \n-        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\", \n+        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n+        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\", \n-        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\", \n+        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\",\n+        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\", \n-        \"c4c1b72491ede1eedaca00618407ee0b772cad0d\", \n+        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\",\n+        \"76a914c4c1b72491ede1eedaca00618407ee0b772cad0d88ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\", \n-        \"f6fe69bcb548a829cce4c57bf6fff8af3a5981f9\", \n+        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\",\n+        \"a914f6fe69bcb548a829cce4c57bf6fff8af3a5981f987\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\", \n-        \"261f83568a098a8638844bd7aeca039d5f2352c0\", \n+        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\",\n+        \"76a914261f83568a098a8638844bd7aeca039d5f2352c088ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\", \n-        \"e930e1834a4d234702773951d627cce82fbb5d2e\", \n+        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\",\n+        \"a914e930e1834a4d234702773951d627cce82fbb5d2e87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\", \n-        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\", \n+        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\",\n+        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\", \n-        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\", \n+        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\",\n+        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\", \n-        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\", \n+        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\",\n+        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\", \n-        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\", \n+        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\",\n+        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\", \n-        \"5eadaf9bb7121f0f192561a5a62f5e5f54210292\", \n+        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\",\n+        \"76a9145eadaf9bb7121f0f192561a5a62f5e5f5421029288ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\", \n-        \"3f210e7277c899c3a155cc1c90f4106cbddeec6e\", \n+        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\",\n+        \"a9143f210e7277c899c3a155cc1c90f4106cbddeec6e87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\", \n-        \"c8a3c2a09a298592c3e180f02487cd91ba3400b5\", \n+        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\",\n+        \"76a914c8a3c2a09a298592c3e180f02487cd91ba3400b588ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\", \n-        \"99b31df7c9068d1481b596578ddbb4d3bd90baeb\", \n+        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\",\n+        \"a91499b31df7c9068d1481b596578ddbb4d3bd90baeb87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": true\n+            \"isPrivkey\": false,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\", \n-        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\", \n+        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\",\n+        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\", \n-        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\", \n+        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\",\n+        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": false\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\", \n-        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\", \n+        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\",\n+        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\",\n         {\n-            \"isCompressed\": false, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\", \n-        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\", \n+        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\",\n+        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\",\n         {\n-            \"isCompressed\": true, \n-            \"isPrivkey\": true, \n-            \"isTestnet\": true\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"testnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\", \n-        \"1ed467017f043e91ed4c44b4e8dd674db211c4e6\", \n+        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\",\n+        \"76a9141ed467017f043e91ed4c44b4e8dd674db211c4e688ac\",\n         {\n-            \"addrType\": \"pubkey\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n-    ], \n+    ],\n     [\n-        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\", \n-        \"5ece0cadddc415b1980f001785947120acdb36fc\", \n+        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\",\n+        \"a9145ece0cadddc415b1980f001785947120acdb36fc87\",\n         {\n-            \"addrType\": \"script\", \n-            \"isPrivkey\": false, \n-            \"isTestnet\": false\n+            \"isPrivkey\": false,\n+            \"chain\": \"mainnet\"\n         }\n     ]\n ]"
      }
    ]
  },
  {
    "sha": "bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDM1NWI4ZGI5ZmZhYWNhYWZkMTBlYjE0ZjZiNzRjZjAwZDhmYzA2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T07:13:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:04:11Z"
      },
      "message": "Add regtest testing to base58_tests",
      "tree": {
        "sha": "1dff72fe6be9896639d898dafc3442706230f279",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dff72fe6be9896639d898dafc3442706230f279"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6565c5501cfe7755585fd72f6329eea4c5eb2bf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6565c5501cfe7755585fd72f6329eea4c5eb2bf1"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 94,
      "deletions": 66
    },
    "files": [
      {
        "sha": "65092f593b86c5d7f8e63eb784796a4111009833",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "patch": "@@ -92,12 +92,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n-        if (isTestnet) {\n-            SelectParams(CBaseChainParams::TESTNET);\n-        } else {\n-            SelectParams(CBaseChainParams::MAIN);\n-        }\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n@@ -141,12 +136,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        bool isTestnet = find_value(metadata, \"chain\").get_str() == \"testnet\";\n-        if (isTestnet) {\n-            SelectParams(CBaseChainParams::TESTNET);\n-        } else {\n-            SelectParams(CBaseChainParams::MAIN);\n-        }\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             CKey key;\n@@ -185,10 +175,13 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        destination = DecodeDestination(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey:\" + strTest);\n-        secret.SetString(exp_base58string);\n-        BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey:\" + strTest);\n+        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+            SelectParams(chain);\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n+            secret.SetString(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+        }\n     }\n }\n "
      },
      {
        "sha": "175b297a1cac0eb62aa4dc7ee8fad121bfb0d2f7",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "modified",
        "additions": 85,
        "deletions": 50,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "patch": "@@ -4,31 +4,39 @@\n         \"76a91465a16059864a2fdbc7c99a4723a8395bc6f188eb88ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\",\n         \"a91474f209f6ea907e2ea48f74fae05782ae8a66525787\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n         \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n+        }\n+    ],\n+    [\n+        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n+        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n         \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\",\n         \"a9146349a418fc4578d10a372b54b45c280cc8c4382f87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -37,7 +45,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -46,7 +54,16 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n+        }\n+    ],\n+    [\n+        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n+        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n+        {\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -55,7 +72,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n@@ -64,39 +81,48 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n+        }\n+    ],\n+    [\n+        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n+        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n+        {\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true,\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n         \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\",\n         \"76a9146d23156cbbdcc82a5a47eee4c2c7c583c18b6bf488ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\",\n         \"a914fcc5460dd6e2487c7d75b1963625da0e8f4c597587\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\",\n         \"76a914f1d470f9b02370fdec2e6b708b08ac431bf7a5f788ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\",\n         \"a914c579342c2c4c9220205e2cdc285617040c924a0a87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -105,7 +131,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -114,7 +140,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -123,7 +149,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -132,39 +158,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\",\n         \"76a9147987ccaa53d02c8873487ef919677cd3db7a691288ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\",\n         \"a91463bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\",\n         \"76a914ef66444b5b17f14e8fae6e7e19b045a78c54fd7988ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\",\n         \"a914c3e55fceceaa4391ed2a9677f4a4d34eacd021a087\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -173,7 +199,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -182,7 +208,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -191,7 +217,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -200,39 +226,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\",\n         \"76a914adc1cc2081a27206fae25792f28bbc55b831549d88ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\",\n         \"a914188f91a931947eddd7432d6e614387e32b24470987\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\",\n         \"76a9141694f5bc1a7295b600f40018a618a6ea48eeb49888ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\",\n         \"a9143b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f387\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -241,7 +267,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -250,7 +276,16 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n+        }\n+    ],\n+    [\n+        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n+        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n+        {\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true,\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -259,7 +294,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"regtest\"\n         }\n     ],\n     [\n@@ -268,39 +303,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\",\n         \"76a914c4c1b72491ede1eedaca00618407ee0b772cad0d88ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\",\n         \"a914f6fe69bcb548a829cce4c57bf6fff8af3a5981f987\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\",\n         \"76a914261f83568a098a8638844bd7aeca039d5f2352c088ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\",\n         \"a914e930e1834a4d234702773951d627cce82fbb5d2e87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -309,7 +344,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -318,7 +353,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -327,7 +362,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -336,39 +371,39 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\",\n         \"76a9145eadaf9bb7121f0f192561a5a62f5e5f5421029288ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\",\n         \"a9143f210e7277c899c3a155cc1c90f4106cbddeec6e87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\",\n         \"76a914c8a3c2a09a298592c3e180f02487cd91ba3400b588ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\",\n         \"a91499b31df7c9068d1481b596578ddbb4d3bd90baeb87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -377,7 +412,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -386,7 +421,7 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n@@ -395,7 +430,7 @@\n         {\n             \"isCompressed\": false,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n@@ -404,23 +439,23 @@\n         {\n             \"isCompressed\": true,\n             \"isPrivkey\": true,\n-            \"chain\": \"testnet\"\n+            \"chain\": \"test\"\n         }\n     ],\n     [\n         \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\",\n         \"76a9141ed467017f043e91ed4c44b4e8dd674db211c4e688ac\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ],\n     [\n         \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\",\n         \"a9145ece0cadddc415b1980f001785947120acdb36fc87\",\n         {\n             \"isPrivkey\": false,\n-            \"chain\": \"mainnet\"\n+            \"chain\": \"main\"\n         }\n     ]\n ]"
      }
    ]
  },
  {
    "sha": "c091b99379b97cb314c9fa123beabdbc324cf7a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDkxYjk5Mzc5Yjk3Y2IzMTRjOWZhMTIzYmVhYmRiYzMyNGNmN2E0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T02:55:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:24:30Z"
      },
      "message": "Implement BIP173 addresses and tests",
      "tree": {
        "sha": "f1cc720f195b18842831f964a3dd1fc71d29a4ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1cc720f195b18842831f964a3dd1fc71d29a4ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c091b99379b97cb314c9fa123beabdbc324cf7a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd355b8db9ffaacaafd10eb14f6b74cf00d8fc06"
      }
    ],
    "stats": {
      "total": 429,
      "additions": 397,
      "deletions": 32
    },
    "files": [
      {
        "sha": "c2cc5d979f79660a029a01533c9276a58712675f",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 1,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -4,9 +4,11 @@\n \n #include \"base58.h\"\n \n+#include \"bech32.h\"\n #include \"hash.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n@@ -235,7 +237,31 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         return EncodeBase58Check(data);\n     }\n \n-    std::string operator()(const CNoDestination& no) const { return \"\"; }\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n@@ -259,6 +285,40 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n             return CScriptID(hash);\n         }\n     }\n+    data.clear();\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                {\n+                    WitnessV0KeyHash keyid;\n+                    if (data.size() == keyid.size()) {\n+                        std::copy(data.begin(), data.end(), keyid.begin());\n+                        return keyid;\n+                    }\n+                }\n+                {\n+                    WitnessV0ScriptHash scriptid;\n+                    if (data.size() == scriptid.size()) {\n+                        std::copy(data.begin(), data.end(), scriptid.begin());\n+                        return scriptid;\n+                    }\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            std::copy(data.begin(), data.end(), unk.program);\n+            unk.length = data.size();\n+            return unk;\n+        }\n+    }\n     return CNoDestination();\n }\n } // namespace"
      },
      {
        "sha": "85c9cd6934210a4967c5c106ea104474e06a4faa",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -137,6 +137,8 @@ class CMainParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};\n \n+        bech32_hrp = \"bc\";\n+\n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n         fDefaultConsistencyChecks = false;\n@@ -236,6 +238,8 @@ class CTestNetParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n+        bech32_hrp = \"tb\";\n+\n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n         fDefaultConsistencyChecks = false;\n@@ -330,6 +334,8 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n         base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n+\n+        bech32_hrp = \"bcrt\";\n     }\n };\n "
      },
      {
        "sha": "3948c9163feb89ba11a1583b97a2b21b00359915",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -73,6 +73,7 @@ class CChainParams\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n+    const std::string& Bech32HRP() const { return bech32_hrp; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n@@ -86,6 +87,7 @@ class CChainParams\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n+    std::string bech32_hrp;\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<SeedSpec6> vFixedSeeds;"
      },
      {
        "sha": "b2fb284508a7bdc359216aa69cfe604e2891b91a",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -76,7 +76,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n     else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n         return false;\n \n-    return whichType != TX_NONSTANDARD;\n+    return whichType != TX_NONSTANDARD && whichType != TX_WITNESS_UNKNOWN;\n }\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)"
      },
      {
        "sha": "521b49e2a729dcaa3fcd2ee657756225300d0ea7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chain.h\"\n #include \"clientversion.h\"\n #include \"core_io.h\"\n+#include \"crypto/ripemd160.h\"\n #include \"init.h\"\n #include \"validation.h\"\n #include \"httpserver.h\"\n@@ -45,6 +46,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n@@ -56,6 +58,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", false));\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;\n@@ -73,6 +76,47 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         }\n         return obj;\n     }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"isscript\", true));\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", 0));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        obj.push_back(Pair(\"iswitness\", true));\n+        obj.push_back(Pair(\"witness_version\", (int)id.version));\n+        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        return obj;\n+    }\n };\n #endif\n "
      },
      {
        "sha": "6b68f0679e823fe4f8c35a03f542764b2b768927",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -61,6 +61,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();"
      },
      {
        "sha": "ac58b690a2f1f6d99f11345ef701ad5c8df5b17c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -79,6 +79,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n@@ -309,6 +310,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n         // Don't know anything about this, assume bigger one is correct:\n         if (sigs1.script.size() >= sigs2.script.size())\n             return sigs1;"
      },
      {
        "sha": "f57f1f61b4f5999dc9ced88489999861f6445e07",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -30,6 +30,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_NULL_DATA: return \"nulldata\";\n     case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";\n+    case TX_WITNESS_UNKNOWN: return \"witness_unknown\";\n     }\n     return nullptr;\n }\n@@ -75,6 +76,12 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n             vSolutionsRet.push_back(witnessprogram);\n             return true;\n         }\n+        if (witnessversion != 0) {\n+            typeRet = TX_WITNESS_UNKNOWN;\n+            vSolutionsRet.push_back(std::vector<unsigned char>{(unsigned char)witnessversion});\n+            vSolutionsRet.push_back(std::move(witnessprogram));\n+            return true;\n+        }\n         return false;\n     }\n \n@@ -198,6 +205,23 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n     {\n         addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n+    } else if (whichType == TX_WITNESS_V0_KEYHASH) {\n+        WitnessV0KeyHash hash;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_V0_SCRIPTHASH) {\n+        WitnessV0ScriptHash hash;\n+        std::copy(vSolutions[0].begin(), vSolutions[0].end(), hash.begin());\n+        addressRet = hash;\n+        return true;\n+    } else if (whichType == TX_WITNESS_UNKNOWN) {\n+        WitnessUnknown unk;\n+        unk.version = vSolutions[0][0];\n+        std::copy(vSolutions[1].begin(), vSolutions[1].end(), unk.program);\n+        unk.length = vSolutions[1].size();\n+        addressRet = unk;\n+        return true;\n     }\n     // Multisig txns have more than one address...\n     return false;\n@@ -268,6 +292,27 @@ class CScriptVisitor : public boost::static_visitor<bool>\n         *script << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;\n         return true;\n     }\n+\n+    bool operator()(const WitnessV0KeyHash& id) const\n+    {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(id);\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        script->clear();\n+        *script << OP_0 << ToByteVector(id);\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessUnknown& id) const\n+    {\n+        script->clear();\n+        *script << CScript::EncodeOP_N(id.version) << std::vector<unsigned char>(id.program, id.program + id.length);\n+        return true;\n+    }\n };\n } // namespace\n "
      },
      {
        "sha": "fa07ea88c1aa1487cb774ddc5f29ca6e0d98a12a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -64,6 +64,7 @@ enum txnouttype\n     TX_NULL_DATA, //!< unspendable OP_RETURN script that carries data\n     TX_WITNESS_V0_SCRIPTHASH,\n     TX_WITNESS_V0_KEYHASH,\n+    TX_WITNESS_UNKNOWN, //!< Only for Witness versions not already defined above\n };\n \n class CNoDestination {\n@@ -72,14 +73,42 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n+struct WitnessV0ScriptHash : public uint256 {};\n+struct WitnessV0KeyHash : public uint160 {};\n+\n+//! CTxDestination subtype to encode any future Witness version\n+struct WitnessUnknown\n+{\n+    unsigned int version;\n+    unsigned int length;\n+    unsigned char program[40];\n+\n+    friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version != w2.version) return false;\n+        if (w1.length != w2.length) return false;\n+        return std::equal(w1.program, w1.program + w1.length, w2.program);\n+    }\n+\n+    friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {\n+        if (w1.version < w2.version) return true;\n+        if (w1.version > w2.version) return false;\n+        if (w1.length < w2.length) return true;\n+        if (w1.length > w2.length) return false;\n+        return std::lexicographical_compare(w1.program, w1.program + w1.length, w2.program, w2.program + w2.length);\n+    }\n+};\n+\n /**\n  * A txout script template with a specific destination. It is either:\n  *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n+ *  * CKeyID: TX_PUBKEYHASH destination (P2PKH)\n+ *  * CScriptID: TX_SCRIPTHASH destination (P2SH)\n+ *  * WitnessV0ScriptHash: TX_WITNESS_V0_SCRIPTHASH destination (P2WSH)\n+ *  * WitnessV0KeyHash: TX_WITNESS_V0_KEYHASH destination (P2WPKH)\n+ *  * WitnessUnknown: TX_WITNESS_UNKNOWN destination (P2W???)\n  *  A CTxDestination is the internal data type encoded in a bitcoin address\n  */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown> CTxDestination;\n \n /** Check whether a CTxDestination is a CNoDestination. */\n bool IsValidDestination(const CTxDestination& dest);\n@@ -104,7 +133,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n  * Parse a standard scriptPubKey for the destination address. Assigns result to\n  * the addressRet parameter and returns true if successful. For multisig\n  * scripts, instead use ExtractDestinations. Currently only works for P2PK,\n- * P2PKH, and P2SH scripts.\n+ * P2PKH, P2SH, P2WPKH, and P2WSH scripts.\n  */\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n "
      },
      {
        "sha": "6bc6dd51873bc8511e85968ebc395ec1c46a5ffd",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -93,6 +93,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         const UniValue &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         SelectParams(find_value(metadata, \"chain\").get_str());\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n@@ -112,6 +113,21 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n             BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n \n+            // Try flipped case version\n+            for (char& c : exp_base58string) {\n+                if (c >= 'a' && c <= 'z') {\n+                    c = (c - 'a') + 'A';\n+                } else if (c >= 'A' && c <= 'Z') {\n+                    c = (c - 'A') + 'a';\n+                }\n+            }\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n+            if (IsValidDestination(destination)) {\n+                script = GetScriptForDestination(destination);\n+                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+            }\n+\n             // Public key must be invalid private key\n             secret.SetString(exp_base58string);\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n@@ -150,13 +166,15 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             CScript exp_script(exp_payload.begin(), exp_payload.end());\n             ExtractDestination(exp_script, dest);\n             std::string address = EncodeDestination(dest);\n+\n             BOOST_CHECK_EQUAL(address, exp_base58string);\n         }\n     }\n \n     SelectParams(CBaseChainParams::MAIN);\n }\n \n+\n // Goal: check that base58 parsing code is robust against a variety of corrupted data\n BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n {\n@@ -187,4 +205,3 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n \n \n BOOST_AUTO_TEST_SUITE_END()\n-"
      },
      {
        "sha": "2056c7491c491bdab249ea193dd35f82a3731eb6",
        "filename": "src/test/data/base58_keys_invalid.json",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_invalid.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -148,5 +148,35 @@\n     ], \n     [\n         \"2A1q1YsMZowabbvta7kTy2Fd6qN4r5ZCeG3qLpvZBMzCixMUdkN2Y4dHB1wPsZAeVXUGD83MfRED\"\n+    ],\n+    [\n+        \"tc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty\"\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5\"\n+    ],\n+    [\n+        \"BC13W508D6QEJXTDG4Y5R3ZARVARY0C5XW7KN40WF2\"\n+    ],\n+    [\n+        \"bc1rw5uspcuh\"\n+    ],\n+    [\n+        \"bc10w508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kw5rljs90\"\n+    ],\n+    [\n+        \"BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P\"\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sL5k7\"\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvqyzf3du\"\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3pjxtptv\"\n+    ],\n+    [\n+        \"bc1gmk9yu\"\n     ]\n ]"
      },
      {
        "sha": "8418a6002da810ca44f7a84561777af3aa99ab5c",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -457,5 +457,77 @@\n             \"isPrivkey\": false,\n             \"chain\": \"main\"\n         }\n+    ],\n+    [\n+        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080\",\n+        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n+        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n+        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1sw50qa3jx3s\",\n+        \"6002751e\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n+        \"5210751e76e8199196d454941c45d1b3a323\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"main\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"test\",\n+            \"tryCaseFlip\": true\n+        }\n+    ],\n+    [\n+        \"bcrt1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvseswlauz7\",\n+        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        {\n+            \"isPrivkey\": false,\n+            \"chain\": \"regtest\",\n+            \"tryCaseFlip\": true\n+        }\n     ]\n ]"
      },
      {
        "sha": "bd2d9ed115353d56a44267bc0af2e745e68d130d",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -170,11 +170,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n     s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n     BOOST_CHECK(!Solver(s, whichType, solutions));\n \n-    // TX_WITNESS with unknown version\n-    s.clear();\n-    s << OP_1 << ToByteVector(pubkey);\n-    BOOST_CHECK(!Solver(s, whichType, solutions));\n-\n     // TX_WITNESS with incorrect program size\n     s.clear();\n     s << OP_0 << std::vector<unsigned char>(19, 0x01);\n@@ -225,13 +220,29 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n \n     // TX_WITNESS_V0_KEYHASH\n     s.clear();\n-    s << OP_0 << ToByteVector(pubkey);\n-    BOOST_CHECK(!ExtractDestination(s, address));\n+    s << OP_0 << ToByteVector(pubkey.GetID());\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    WitnessV0KeyHash keyhash;\n+    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(keyhash.begin());\n+    BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n \n     // TX_WITNESS_V0_SCRIPTHASH\n     s.clear();\n-    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n-    BOOST_CHECK(!ExtractDestination(s, address));\n+    WitnessV0ScriptHash scripthash;\n+    CSHA256().Write(redeemScript.data(), redeemScript.size()).Finalize(scripthash.begin());\n+    s << OP_0 << ToByteVector(scripthash);\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<WitnessV0ScriptHash>(&address) && *boost::get<WitnessV0ScriptHash>(&address) == scripthash);\n+\n+    // TX_WITNESS with unknown version\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey);\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    WitnessUnknown unk;\n+    unk.length = 33;\n+    unk.version = 1;\n+    std::copy(pubkey.begin(), pubkey.end(), unk.program);\n+    BOOST_CHECK(boost::get<WitnessUnknown>(&address) && *boost::get<WitnessUnknown>(&address) == unk);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n@@ -298,16 +309,6 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     s.clear();\n     s << OP_RETURN << std::vector<unsigned char>({75});\n     BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n-\n-    // TX_WITNESS_V0_KEYHASH\n-    s.clear();\n-    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n-    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n-\n-    // TX_WITNESS_V0_SCRIPTHASH\n-    s.clear();\n-    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n-    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)"
      },
      {
        "sha": "af33f0e5f8c7daa744124332b3bbd3871671243c",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -149,4 +149,28 @@ bool TimingResistantEqual(const T& a, const T& b)\n  */\n bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n+/** Convert from one power-of-2 number base to another. */\n+template<int frombits, int tobits, bool pad, typename O, typename I>\n+bool ConvertBits(O& out, I it, I end) {\n+    size_t acc = 0;\n+    size_t bits = 0;\n+    constexpr size_t maxv = (1 << tobits) - 1;\n+    constexpr size_t max_acc = (1 << (frombits + tobits - 1)) - 1;\n+    while (it != end) {\n+        acc = ((acc << frombits) | *it) & max_acc;\n+        bits += frombits;\n+        while (bits >= tobits) {\n+            bits -= tobits;\n+            out.push_back((acc >> bits) & maxv);\n+        }\n+        ++it;\n+    }\n+    if (pad) {\n+        if (bits) out.push_back((acc << (tobits - bits)) & maxv);\n+    } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n #endif // BITCOIN_UTILSTRENCODINGS_H"
      },
      {
        "sha": "8e2b7d04a81b7663f2c1288ed378271d8b04e97b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -1158,8 +1158,6 @@ class Witnessifier : public boost::static_visitor<bool>\n \n     explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n \n-    bool operator()(const CNoDestination &dest) const { return false; }\n-\n     bool operator()(const CKeyID &keyID) {\n         if (pwallet) {\n             CScript basescript = GetScriptForDestination(keyID);\n@@ -1203,6 +1201,9 @@ class Witnessifier : public boost::static_visitor<bool>\n         }\n         return false;\n     }\n+\n+    template<typename T>\n+    bool operator()(const T& dest) { return false; }\n };\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "594b82a09e63b6037cfea6dccacc9b546222dc3a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -111,7 +111,26 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n             Process(script);\n     }\n \n-    void operator()(const CNoDestination &none) {}\n+    void operator()(const WitnessV0ScriptHash& scriptID)\n+    {\n+        CScriptID id;\n+        CRIPEMD160().Write(scriptID.begin(), 32).Finalize(id.begin());\n+        CScript script;\n+        if (keystore.GetCScript(id, script)) {\n+            Process(script);\n+        }\n+    }\n+\n+    void operator()(const WitnessV0KeyHash& keyid)\n+    {\n+        CKeyID id(keyid);\n+        if (keystore.HaveKey(id)) {\n+            vKeys.push_back(id);\n+        }\n+    }\n+\n+    template<typename X>\n+    void operator()(const X &none) {}\n };\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const"
      },
      {
        "sha": "6c5b49d8765bec28e3f22927d39346ca3875e4e5",
        "filename": "test/util/data/txcreatemultisig3.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatemultisig3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatemultisig3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig3.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 e15a86a23178f433d514dbbce042e87d72662b8b5edcacfd2e37ab7a2d135f05\",\n                 \"hex\": \"0020e15a86a23178f433d514dbbce042e87d72662b8b5edcacfd2e37ab7a2d135f05\",\n-                \"type\": \"witness_v0_scripthash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_scripthash\",\n+                \"addresses\": [\n+                    \"bc1qu9dgdg330r6r84g5mw7wqshg04exv2uttmw2elfwx74h5tgntuzs44gyfg\"\n+                ]\n             }\n         }\n     ],"
      },
      {
        "sha": "4ba5dcb282fedaf6397f76b18db9172e66f4c7d7",
        "filename": "test/util/data/txcreateoutpubkey2.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreateoutpubkey2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreateoutpubkey2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreateoutpubkey2.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 a2516e770582864a6a56ed21a102044e388c62e3\",\n                 \"hex\": \"0014a2516e770582864a6a56ed21a102044e388c62e3\",\n-                \"type\": \"witness_v0_keyhash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_keyhash\",\n+                \"addresses\": [\n+                    \"bc1q5fgkuac9s2ry56jka5s6zqsyfcugcchry5cwu0\"\n+                ]\n             }\n         }\n     ],"
      },
      {
        "sha": "31b6459214f832083bcedbe0665225ea1386d6a4",
        "filename": "test/util/data/txcreatescript3.json",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatescript3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c091b99379b97cb314c9fa123beabdbc324cf7a4/test/util/data/txcreatescript3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatescript3.json?ref=c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "patch": "@@ -14,7 +14,11 @@\n             \"scriptPubKey\": {\n                 \"asm\": \"0 0bfe935e70c321c7ca3afc75ce0d0ca2f98b5422e008bb31c00c6d7f1f1c0ad6\",\n                 \"hex\": \"00200bfe935e70c321c7ca3afc75ce0d0ca2f98b5422e008bb31c00c6d7f1f1c0ad6\",\n-                \"type\": \"witness_v0_scripthash\"\n+                \"reqSigs\": 1,\n+                \"type\": \"witness_v0_scripthash\",\n+                \"addresses\": [\n+                    \"bc1qp0lfxhnscvsu0j36l36uurgv5tuck4pzuqytkvwqp3kh78cupttqyf705v\"\n+                ]\n             }\n         }\n     ],"
      }
    ]
  },
  {
    "sha": "e278f12ca71c2d11916352b91594b068183b605e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjc4ZjEyY2E3MWMyZDExOTE2MzUyYjkxNTk0YjA2ODE4M2I2MDVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-26T21:52:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-28T23:24:33Z"
      },
      "message": "Support BIP173 in addwitnessaddress",
      "tree": {
        "sha": "86f01077650298edbd1e64328707c299a047c35c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86f01077650298edbd1e64328707c299a047c35c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e278f12ca71c2d11916352b91594b068183b605e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f12ca71c2d11916352b91594b068183b605e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e278f12ca71c2d11916352b91594b068183b605e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f12ca71c2d11916352b91594b068183b605e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c091b99379b97cb314c9fa123beabdbc324cf7a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c091b99379b97cb314c9fa123beabdbc324cf7a4"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 46,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f54f24e2a70cad5547caa3aed681d9f9a58f46f0",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e278f12ca71c2d11916352b91594b068183b605e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e278f12ca71c2d11916352b91594b068183b605e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=e278f12ca71c2d11916352b91594b068183b605e",
        "patch": "@@ -129,6 +129,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },\n+    { \"addwitnessaddress\", 1, \"p2sh\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "5d98498a4b0b4487b3d7245a75f4ea8306e9cf73",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 14,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e278f12ca71c2d11916352b91594b068183b605e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e278f12ca71c2d11916352b91594b068183b605e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e278f12ca71c2d11916352b91594b068183b605e",
        "patch": "@@ -1154,9 +1154,10 @@ class Witnessifier : public boost::static_visitor<bool>\n {\n public:\n     CWallet * const pwallet;\n-    CScriptID result;\n+    CTxDestination result;\n+    bool already_witness;\n \n-    explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    explicit Witnessifier(CWallet *_pwallet) : pwallet(_pwallet), already_witness(false) {}\n \n     bool operator()(const CKeyID &keyID) {\n         if (pwallet) {\n@@ -1170,9 +1171,7 @@ class Witnessifier : public boost::static_visitor<bool>\n                 !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n                 return false;\n             }\n-            pwallet->AddCScript(witscript);\n-            result = CScriptID(witscript);\n-            return true;\n+            return ExtractDestination(witscript, result);\n         }\n         return false;\n     }\n@@ -1183,7 +1182,8 @@ class Witnessifier : public boost::static_visitor<bool>\n             int witnessversion;\n             std::vector<unsigned char> witprog;\n             if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n-                result = scriptID;\n+                ExtractDestination(subscript, result);\n+                already_witness = true;\n                 return true;\n             }\n             CScript witscript = GetScriptForWitness(subscript);\n@@ -1195,13 +1195,25 @@ class Witnessifier : public boost::static_visitor<bool>\n                 !VerifyScript(sigs.scriptSig, witscript, &sigs.scriptWitness, MANDATORY_SCRIPT_VERIFY_FLAGS | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, DummySignatureCreator(pwallet).Checker())) {\n                 return false;\n             }\n-            pwallet->AddCScript(witscript);\n-            result = CScriptID(witscript);\n-            return true;\n+            return ExtractDestination(witscript, result);\n         }\n         return false;\n     }\n \n+    bool operator()(const WitnessV0KeyHash& id)\n+    {\n+        already_witness = true;\n+        result = id;\n+        return true;\n+    }\n+\n+    bool operator()(const WitnessV0ScriptHash& id)\n+    {\n+        already_witness = true;\n+        result = id;\n+        return true;\n+    }\n+\n     template<typename T>\n     bool operator()(const T& dest) { return false; }\n };\n@@ -1213,17 +1225,18 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( p2sh )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. p2sh            (bool, optional, default=true) Embed inside P2SH\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH or BIP173).\\n\"\n             \"}\\n\"\n         ;\n         throw std::runtime_error(msg);\n@@ -1241,13 +1254,31 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    bool p2sh = true;\n+    if (!request.params[1].isNull()) {\n+        p2sh = request.params[1].get_bool();\n+    }\n+\n     Witnessifier w(pwallet);\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    CScript witprogram = GetScriptForDestination(w.result);\n+\n+    if (p2sh) {\n+        w.result = CScriptID(witprogram);\n+    }\n+\n+    if (w.already_witness) {\n+        if (!(dest == w.result)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot convert between witness address types\");\n+        }\n+    } else {\n+        pwallet->AddCScript(witprogram);\n+        pwallet->SetAddressBook(w.result, \"\", \"receive\");\n+    }\n \n     return EncodeDestination(w.result);\n }\n@@ -3200,7 +3231,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\"} },\n-    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\"} },\n+    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },"
      }
    ]
  },
  {
    "sha": "fd0041aa27cd0571af0ec018605067137d27ce43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDAwNDFhYTI3Y2QwNTcxYWYwZWMwMTg2MDUwNjcxMzdkMjdjZTQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-27T07:41:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T00:29:01Z"
      },
      "message": "Use BIP173 addresses in segwit.py test",
      "tree": {
        "sha": "4db77a946ca18c7ddefb26c42aeb1636dd22ed8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4db77a946ca18c7ddefb26c42aeb1636dd22ed8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd0041aa27cd0571af0ec018605067137d27ce43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd0041aa27cd0571af0ec018605067137d27ce43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd0041aa27cd0571af0ec018605067137d27ce43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd0041aa27cd0571af0ec018605067137d27ce43/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e278f12ca71c2d11916352b91594b068183b605e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e278f12ca71c2d11916352b91594b068183b605e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e278f12ca71c2d11916352b91594b068183b605e"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 162,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4888bbd308515b083ed1b4295f6f0d503cf7f719",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=fd0041aa27cd0571af0ec018605067137d27ce43",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n-from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.address import script_to_p2sh, key_to_p2pkh, key_to_p2sh_p2wpkh, key_to_p2wpkh, script_to_p2sh_p2wsh, script_to_p2wsh, program_to_witness\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n from io import BytesIO\n \n@@ -33,23 +33,23 @@ def witness_script(use_p2wsh, pubkey):\n \n # Return a transaction (in hex) that spends the given utxo to a segwit output,\n # optionally wrapping the segwit output using P2SH.\n-def create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n-    pkscript = hex_str_to_bytes(witness_script(use_p2wsh, pubkey))\n-    if (encode_p2sh):\n-        p2sh_hash = hash160(pkscript)\n-        pkscript = CScript([OP_HASH160, p2sh_hash, OP_EQUAL])\n-    tx = CTransaction()\n-    tx.vin.append(CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), b\"\"))\n-    tx.vout.append(CTxOut(int(amount*COIN), pkscript))\n-    return ToHex(tx)\n+def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n+    if use_p2wsh:\n+        program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n+        addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n+    else:\n+        addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n+    if not encode_p2sh:\n+        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+    return node.createrawtransaction([utxo], {addr: amount})\n \n # Create a transaction spending a given utxo to a segwit output corresponding\n # to the given pubkey: use_p2wsh determines whether to use P2WPKH or P2WSH;\n # encode_p2sh determines whether to wrap in P2SH.\n # sign=True will have the given node sign the transaction.\n # insert_redeem_script will be added to the scriptSig, if given.\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n-    tx_to_witness = create_witnessprogram(use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n+    tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n         signed = node.signrawtransaction(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n@@ -133,8 +133,15 @@ def run_test(self):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n             multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])\n-            self.nodes[i].addwitnessaddress(newaddress)\n-            self.nodes[i].addwitnessaddress(multiaddress)\n+            multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n+            p2sh_addr = self.nodes[i].addwitnessaddress(newaddress, True)\n+            bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n+            p2sh_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, True)\n+            bip173_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, False)\n+            assert_equal(p2sh_addr, key_to_p2sh_p2wpkh(self.pubkey[-1]))\n+            assert_equal(bip173_addr, key_to_p2wpkh(self.pubkey[-1]))\n+            assert_equal(p2sh_ms_addr, script_to_p2sh_p2wsh(multiscript))\n+            assert_equal(bip173_ms_addr, script_to_p2wsh(multiscript))\n             p2sh_ids.append([])\n             wit_ids.append([])\n             for v in range(2):\n@@ -558,6 +565,13 @@ def run_test(self):\n         solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress, 1))\n         self.mine_and_test_listunspent(unseen_anytime, 0)\n \n+        # Check that createrawtransaction/decoderawtransaction with non-v0 Bech32 works\n+        v1_addr = program_to_witness(1, [3,5])\n+        v1_tx = self.nodes[0].createrawtransaction([getutxo(spendable_txid[0])],{v1_addr: 1})\n+        v1_decoded = self.nodes[1].decoderawtransaction(v1_tx)\n+        assert_equal(v1_decoded['vout'][0]['scriptPubKey']['addresses'][0], v1_addr)\n+        assert_equal(v1_decoded['vout'][0]['scriptPubKey']['hex'], \"51020305\")\n+\n         # Check that spendable outputs are really spendable\n         self.create_and_mine_tx_from_txids(spendable_txid)\n "
      },
      {
        "sha": "2e2db5ffb21a06aec9556ed7f942972d9e0bc371",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=fd0041aa27cd0571af0ec018605067137d27ce43",
        "patch": "@@ -7,6 +7,8 @@\n from .script import hash256, hash160, sha256, CScript, OP_0\n from .util import bytes_to_hex_str, hex_str_to_bytes\n \n+from . import segwit_addr\n+\n chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n \n def byte_to_base58(b, version):\n@@ -44,6 +46,32 @@ def script_to_p2sh(script, main = False):\n     script = check_script(script)\n     return scripthash_to_p2sh(hash160(script), main)\n \n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def program_to_witness(version, program, main = False):\n+    if (type(program) is str):\n+        program = hex_str_to_bytes(program)\n+    assert 0 <= version <= 16\n+    assert 2 <= len(program) <= 40\n+    assert version > 0 or len(program) in [20, 32]\n+    return segwit_addr.encode(\"bc\" if main else \"bcrt\", version, program)\n+\n+def script_to_p2wsh(script, main = False):\n+    script = check_script(script)\n+    return program_to_witness(0, sha256(script), main)\n+\n+def key_to_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    return program_to_witness(0, hash160(key), main)\n+\n+def script_to_p2sh_p2wsh(script, main = False):\n+    script = check_script(script)\n+    p2shscript = CScript([OP_0, sha256(script)])\n+    return script_to_p2sh(p2shscript, main)\n+\n def check_key(key):\n     if (type(key) is str):\n         key = hex_str_to_bytes(key) # Assuming this is hex string"
      },
      {
        "sha": "02368e938fbb75557def0f9565c8b468515b690f",
        "filename": "test/functional/test_framework/segwit_addr.py",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/segwit_addr.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd0041aa27cd0571af0ec018605067137d27ce43/test/functional/test_framework/segwit_addr.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/segwit_addr.py?ref=fd0041aa27cd0571af0ec018605067137d27ce43",
        "patch": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Reference implementation for Bech32 and segwit addresses.\"\"\"\n+\n+\n+CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n+\n+\n+def bech32_polymod(values):\n+    \"\"\"Internal function that computes the Bech32 checksum.\"\"\"\n+    generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n+    chk = 1\n+    for value in values:\n+        top = chk >> 25\n+        chk = (chk & 0x1ffffff) << 5 ^ value\n+        for i in range(5):\n+            chk ^= generator[i] if ((top >> i) & 1) else 0\n+    return chk\n+\n+\n+def bech32_hrp_expand(hrp):\n+    \"\"\"Expand the HRP into values for checksum computation.\"\"\"\n+    return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n+\n+\n+def bech32_verify_checksum(hrp, data):\n+    \"\"\"Verify a checksum given HRP and converted data characters.\"\"\"\n+    return bech32_polymod(bech32_hrp_expand(hrp) + data) == 1\n+\n+\n+def bech32_create_checksum(hrp, data):\n+    \"\"\"Compute the checksum values given HRP and data.\"\"\"\n+    values = bech32_hrp_expand(hrp) + data\n+    polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n+    return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n+\n+\n+def bech32_encode(hrp, data):\n+    \"\"\"Compute a Bech32 string given HRP and data values.\"\"\"\n+    combined = data + bech32_create_checksum(hrp, data)\n+    return hrp + '1' + ''.join([CHARSET[d] for d in combined])\n+\n+\n+def bech32_decode(bech):\n+    \"\"\"Validate a Bech32 string, and determine HRP and data.\"\"\"\n+    if ((any(ord(x) < 33 or ord(x) > 126 for x in bech)) or\n+            (bech.lower() != bech and bech.upper() != bech)):\n+        return (None, None)\n+    bech = bech.lower()\n+    pos = bech.rfind('1')\n+    if pos < 1 or pos + 7 > len(bech) or len(bech) > 90:\n+        return (None, None)\n+    if not all(x in CHARSET for x in bech[pos+1:]):\n+        return (None, None)\n+    hrp = bech[:pos]\n+    data = [CHARSET.find(x) for x in bech[pos+1:]]\n+    if not bech32_verify_checksum(hrp, data):\n+        return (None, None)\n+    return (hrp, data[:-6])\n+\n+\n+def convertbits(data, frombits, tobits, pad=True):\n+    \"\"\"General power-of-2 base conversion.\"\"\"\n+    acc = 0\n+    bits = 0\n+    ret = []\n+    maxv = (1 << tobits) - 1\n+    max_acc = (1 << (frombits + tobits - 1)) - 1\n+    for value in data:\n+        if value < 0 or (value >> frombits):\n+            return None\n+        acc = ((acc << frombits) | value) & max_acc\n+        bits += frombits\n+        while bits >= tobits:\n+            bits -= tobits\n+            ret.append((acc >> bits) & maxv)\n+    if pad:\n+        if bits:\n+            ret.append((acc << (tobits - bits)) & maxv)\n+    elif bits >= frombits or ((acc << (tobits - bits)) & maxv):\n+        return None\n+    return ret\n+\n+\n+def decode(hrp, addr):\n+    \"\"\"Decode a segwit address.\"\"\"\n+    hrpgot, data = bech32_decode(addr)\n+    if hrpgot != hrp:\n+        return (None, None)\n+    decoded = convertbits(data[1:], 5, 8, False)\n+    if decoded is None or len(decoded) < 2 or len(decoded) > 40:\n+        return (None, None)\n+    if data[0] > 16:\n+        return (None, None)\n+    if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n+        return (None, None)\n+    return (data[0], decoded)\n+\n+\n+def encode(hrp, witver, witprog):\n+    \"\"\"Encode a segwit address.\"\"\"\n+    ret = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    if decode(hrp, ret) == (None, None):\n+        return None\n+    return ret"
      }
    ]
  },
  {
    "sha": "06eaca63139ac02abf82b0245b42493c9b383905",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmVhY2E2MzEzOWFjMDJhYmY4MmIwMjQ1YjQyNDkzYzliMzgzOTA1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-09-10T19:37:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T00:29:04Z"
      },
      "message": "[RPC] Wallet: test importing of native witness scripts\n\nIntegration into segwit.py test by Pieter Wuille.",
      "tree": {
        "sha": "299104a014495da88cbef0bcc994ac2e69becbe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/299104a014495da88cbef0bcc994ac2e69becbe6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06eaca63139ac02abf82b0245b42493c9b383905",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06eaca63139ac02abf82b0245b42493c9b383905",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06eaca63139ac02abf82b0245b42493c9b383905",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06eaca63139ac02abf82b0245b42493c9b383905/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd0041aa27cd0571af0ec018605067137d27ce43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd0041aa27cd0571af0ec018605067137d27ce43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd0041aa27cd0571af0ec018605067137d27ce43"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "de5c8c6c87e9f121f9de19876ac4e5eb63e70a3a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06eaca63139ac02abf82b0245b42493c9b383905/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06eaca63139ac02abf82b0245b42493c9b383905/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=06eaca63139ac02abf82b0245b42493c9b383905",
        "patch": "@@ -584,6 +584,29 @@ def run_test(self):\n         self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n         self.create_and_mine_tx_from_txids(solvable_txid)\n \n+        # Test that importing native P2WPKH/P2WSH scripts works\n+        for use_p2wsh in [False, True]:\n+            if use_p2wsh:\n+                scriptPubKey = \"00203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a\"\n+                transaction = \"01000000000100e1f505000000002200203a59f3f56b713fdcf5d1a57357f02c44342cbf306ffe0c4741046837bf90561a00000000\"\n+            else:\n+                scriptPubKey = \"a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d87\"\n+                transaction = \"01000000000100e1f5050000000017a9142f8c469c2f0084c48e11f998ffbe7efa7549f26d8700000000\"\n+\n+            self.nodes[1].importaddress(scriptPubKey, \"\", False)\n+            rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n+            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            txid = self.nodes[1].sendrawtransaction(rawtxfund)\n+\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n+            # Assert it is properly saved\n+            self.stop_node(1)\n+            self.start_node(1)\n+            assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n+            assert_equal(self.nodes[1].listtransactions(\"*\", 1, 0, True)[0][\"txid\"], txid)\n+\n     def mine_and_test_listunspent(self, script_list, ismine):\n         utxo = find_unspent(self.nodes[0], 50)\n         tx = CTransaction()"
      }
    ]
  },
  {
    "sha": "8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjEzODM4ZGIyZTA2MjViN2E3NGU1ZjliNjgzN2U1OWRhNmNiY2Iz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-23T02:48:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-29T00:29:04Z"
      },
      "message": "[Qt] tolerate BIP173/bech32 addresses during input validation\n\nThis eases the during-type validation to allow Bech32 chars.\nOnce the focus has been lost, the address will be properly verified through IsValidDestinationString",
      "tree": {
        "sha": "5d9bb4969bba02a9143cd796b324ad6c04dca8d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d9bb4969bba02a9143cd796b324ad6c04dca8d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8213838db2e0625b7a74e5f9b6837e59da6cbcb3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06eaca63139ac02abf82b0245b42493c9b383905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06eaca63139ac02abf82b0245b42493c9b383905",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06eaca63139ac02abf82b0245b42493c9b383905"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "362a71f04d050e568ac0b90459795988248e81a2",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8213838db2e0625b7a74e5f9b6837e59da6cbcb3/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8213838db2e0625b7a74e5f9b6837e59da6cbcb3/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=8213838db2e0625b7a74e5f9b6837e59da6cbcb3",
        "patch": "@@ -67,7 +67,7 @@ QValidator::State BitcoinAddressEntryValidator::validate(QString &input, int &po\n         if (((ch >= '0' && ch<='9') ||\n             (ch >= 'a' && ch<='z') ||\n             (ch >= 'A' && ch<='Z')) &&\n-            ch != 'l' && ch != 'I' && ch != '0' && ch != 'O')\n+            ch != 'I' && ch != 'O') // Characters invalid in both Base58 and Bech32\n         {\n             // Alphanumeric and not a 'forbidden' character\n         }"
      }
    ]
  }
]