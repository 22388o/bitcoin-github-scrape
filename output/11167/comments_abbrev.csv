luke-jr,2017-08-26T22:37:47Z,"Would prefer to have simply sending-to (maybe validating/analyzing too?) as a separate PR, before wallet upgrades.\n\nI'm not sure when it would make sense to convert between P2SH and BIP173...",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165695,325165695,
sipa,2017-08-26T22:38:57Z,"@luke-jr I agree, but I consider `addwitnessaddress` an RPC to aid with testing, not full support.\n\n> I'm not sure when it would make sense to convert between P2SH and BIP173...\n\nI think you're right. I'll remove that.\n",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165746,325165746,
gmaxwell,2017-08-26T22:45:33Z,"addwitnessaddress is very much not actual support, it's a test shim.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325165977,325165977,
luke-jr,2017-08-26T22:58:29Z,"But it modifies the wallet, no? Seems useful to review independently from the rest. Especially since it has the additional considerations of what happens if you try to use it and then downgrade to an older version...",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325166449,325166449,
sipa,2017-08-26T23:00:39Z,"@luke-jr Consider that we've since 0.13.1 had support for receiving and spending native witness outputs in the wallet (without that, testing the consensus logic for it would have been much harder), just no way to encode such outputs as strings. So I think the encoding is somewhat orthogonal.\n\nIt does modify the wallet, but I'm not sure it's worth trying to separate the logic. We only have one ",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325166537,325166537,
sipa,2017-08-27T07:49:28Z,"Added support in Python framework, and some integrated some functional tests into the `segwit.py` test.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-325182863,325182863,
instagibbs,2017-09-05T23:22:48Z,Include a test with v1+ address?,https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327330449,327330449,
sipa,2017-09-06T00:36:54Z,@instagibbs Done,https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327341082,327341082,
instagibbs,2017-09-06T21:05:56Z,"super surprising to me that regtest has a different human readable part: `bcrt1`.\n\nLegacy addresses shared prefix between testnet and regtest. Perhaps note this somewhere in the code and/or in this PR description.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327612679,327612679,
laanwj,2017-09-06T21:57:54Z,"> super surprising to me that regtest has a different human readable part: bcrt1.\n\nThat was surprising to me too, but I found it a pleasant surprise. It's not like prefixes are a very rare resource, this decreases ambiguity, and fits in with regtest getting its own RPC port in #10825.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327623706,327623706,
instagibbs,2017-09-06T22:06:19Z,"Definitely not arguing against it!\n\nOn Wed, Sep 6, 2017 at 5:58 PM, Wladimir J. van der Laan <\nnotifications@github.com> wrote:\n\n> super surprising to me that regtest has a different human readable part:\n> bcrt1.\n>\n> That was surprising to me too, but I found it a pleasant surprise. It's\n> not like prefixes are a very rare resource, this decreases ambiguity, and\n> fits in with regtest ge",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327625447,327625447,
theuni,2017-09-07T18:30:40Z,"quick nit reminder, TX_WITNESS_UNKNOWN isn't explicitly handled in CombineSignatures/SignStep",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-327885311,327885311,
theuni,2017-09-09T01:42:01Z,"utACK other than those two nits, and excluding the bech32 implementation itself. It looks sane, but I'd like to audit more thoroughly before ACKing.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328246605,328246605,
sipa,2017-09-09T20:44:26Z,"I think I've addressed all comments. I've also added a few extra comments in some places.\n\n> quick nit reminder, TX_WITNESS_UNKNOWN isn't explicitly handled in CombineSignatures/SignStep\n\nFixed.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328302369,328302369,
sipa,2017-09-10T06:50:26Z,Rebased on top of #11297 to hopefully address the Travis issue.,https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328323834,328323834,
NicolasDorier,2017-09-10T07:52:40Z,should fix https://github.com/bitcoin/bitcoin/issues/10924 I made tests on https://github.com/NicolasDorier/bitcoin/commits/importaddresssegwit can you include them @sipa  ? (this one https://github.com/NicolasDorier/bitcoin/commit/a17a74708ddfc8628d5943e0835ff45eb54e06b5),https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328326104,328326104,
sipa,2017-09-10T19:39:35Z,@NicolasDorier Cherry-picked with some refactoring and merging into segwit.py.,https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328366344,328366344,
NicolasDorier,2017-09-11T04:10:33Z,"seems good for me.\n\nWill try later this PR against NTumbleBit. I am using P2SH-P2WSH right now because core was not supporting otherwise. I should be able to move to pure P2WSH thanks to this PR.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328410572,328410572,
ecdsa,2017-09-12T09:08:14Z,"FYI, this BIP is now supported in Electrum, and will be part of the next release",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-328791629,328791629,
instagibbs,2017-09-14T21:24:25Z,"tACK https://github.com/bitcoin/bitcoin/pull/11167/commits/0571b9271b27ce2767e9c7034c23facb495fab65\n\nDid a couple commits on top to get hdkey info returned with native segwit keyhashes. Something like this can be done as a quick followup, perhaps a modified version of #11089: https://github.com/instagibbs/bitcoin/commits/fullseg",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-329613268,329613268,
sipa,2017-09-20T19:35:21Z,"Addressed @gmaxwell's comment about `bcrt` tests, by adding an extra commit that introduces regtest examples to base58_tests, and then extending those in the BIP173 tests commit.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-330957618,330957618,
mruddy,2017-09-22T14:54:42Z,"Related to these changes: https://github.com/bitcoin/bips/pull/587\nI think this is a bug in violation of the BIP, but I'd like feedback on my BIP change proposals, in-case I mis-interpreted something:\n```\nsegwit_addr.bech32_encode('A', [])\n'A1g7sgd8'  # violates ""The lowercase form is used when determining a character's value for checksum purposes.""\n```",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331470140,331470140,
jonasschnelli,2017-09-23T02:52:00Z,Maybe cherry-pick  https://github.com/jonasschnelli/bitcoin/commit/f86c0585dccd29dca63cef3e6a0d434f49abac49 to enable sending to BIP173 addresses through the GUI,https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331605815,331605815,
danra,2017-09-23T11:20:14Z,"@sipa (More of a BIP 173 question) - what's the reasoning for xoring 1 to the checksum both when creating and validating it?\n\nMore specifically: `polymod` in `bech32_create_checksum()` is xored with 1 and `bech32_verify_checksum()` checks for `bench32_polymod(...) == 1`. Instead, one could avoid the xor, and check  `bench32_polymod(...) == 0`.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331627596,331627596,
sipa,2017-09-23T18:31:53Z,"@jonasschnelli Cool, cherry-picked your commit.\n\n@danra The xor 1 to verify the checksum is actually explained in this PR:\n\n```c++\n    // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n    // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n    // list of values would result in a new valid list. For ",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331661290,331661290,
sipa,2017-09-23T22:10:06Z,"Rebased on top of #11116, and fixed a bug that it exposed (`Solver` would treat non-length 20/32 v0 witness outputs as WitnessUnknown rather than failing). Thanks, @jimpo!",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-331673062,331673062,
laanwj,2017-09-28T11:46:04Z,utACK +/- nits,https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332811970,332811970,
QingjingJing,2017-09-28T22:30:44Z,"Resolved?\n\nOn Thu, Sep 28, 2017 at 12:07 PM, Wladimir J. van der Laan <\nnotifications@github.com> wrote:\n\n> *@laanwj* commented on this pull request.\n> ------------------------------\n>\n> In src/test/base58_tests.cpp\n> <https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588515>:\n>\n> > @@ -188,50 +160,37 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n>          std::vector<unsi",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332981656,332981656,
danra,2017-09-28T23:07:53Z,"thereâ€™s a version of tolower where you can specify the locale yourself, so there is no concern about the wrong one being set in the system\n\n> On 29 Sep 2017, at 2:04, Pieter Wuille <notifications@github.com> wrote:\n> \n> @sipa commented on this pull request.\n> \n> In src/test/bech32_tests.cpp:\n> \n> > +#include <boost/test/unit_test.hpp>\n> +\n> +BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTe",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332987781,332987781,
sipa,2017-09-28T23:43:25Z,"I believe I've addressed or at least responded to all comments by @promag, @laanwj, @theuni, and @danra.\n\nI've also updated the Bech32 tests with some new additions to the BIP.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-332992930,332992930,
laanwj,2017-09-29T08:10:25Z,"The commentary seems to have reached the level of nano-nits, which is likely an indication this is ready for merge.",https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-333061036,333061036,
MarcoFalke,2017-11-09T19:44:58Z,Removing from backport,https://github.com/bitcoin/bitcoin/pull/11167#issuecomment-343269706,343269706,
promag,2017-08-27T13:12:49Z,"IMO `bool Decode(const std::string& str, const std::string& hrp, data& d)` feels better, and this way below it can early return.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411503,135411503,src/bech32.cpp
promag,2017-08-27T13:16:30Z,Return in new line?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411584,135411584,src/base58.cpp
promag,2017-08-27T13:17:36Z,Sort.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411597,135411597,src/base58.cpp
promag,2017-08-27T13:19:25Z,Sort.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411639,135411639,src/bech32.h
promag,2017-08-27T13:22:52Z,Must come first? If not which is the cheapest?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411706,135411706,src/base58.cpp
promag,2017-08-27T13:23:35Z,Must come first? If not which is the cheapest?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135411722,135411722,src/base58.cpp
sipa,2017-08-27T17:07:43Z,"It's not often used in the Bitcoin Core codebase, but using pairs for multiple returned values is very typical in C++ (see the return type of [std::map::insert](http://en.cppreference.com/w/cpp/container/map/insert) for example). In C++03 it was a bit verbose to use, but with C++11's `auto` types and `std::tie` for assigning to multiple variables, it's pretty convenient. I'd rather stick with the ",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416365,135416365,src/bech32.cpp
sipa,2017-08-27T17:12:30Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416491,135416491,src/base58.cpp
sipa,2017-08-27T17:12:51Z,"bech32 is far cheaper (no basis conversion, no SHA256).",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416501,135416501,src/base58.cpp
sipa,2017-08-27T17:12:56Z,done,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416505,135416505,src/base58.cpp
sipa,2017-08-27T17:13:06Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416509,135416509,src/bech32.h
sipa,2017-08-27T17:14:41Z,"I haven't benchmarked, but Bech32 should be far cheaper (no SHA256, no basis conversion). There should never be overlap between the addresses, so the order shouldn't matter.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135416546,135416546,src/base58.cpp
sipa,2017-08-27T20:11:53Z,I arbitrarily chose a bech32 prefix for regtest. Feel free to bikeshed (it doesn't even need to be just 2 characters).,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135420123,135420123,src/chainparams.cpp
promag,2017-08-28T10:29:46Z,"Right, in terms of functionality the order doesn't matter. But at the moment most addresses  (don't know numbers) are base58 so for now move `bech32::Decode()` after `DecodeBase58Check()`?\n\nIt would be cool to move this out of `base58.cpp`, follow up maybe?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491563,135491563,src/base58.cpp
promag,2017-08-28T10:30:56Z,Early return?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491736,135491736,src/bech32.cpp
promag,2017-08-28T10:31:29Z,Early return?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491824,135491824,src/bech32.cpp
promag,2017-08-28T10:32:14Z,Early return?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135491958,135491958,src/bech32.cpp
sipa,2017-08-28T18:03:21Z,"> Right, in terms of functionality the order doesn't matter. But at the moment most addresses (don't know numbers) are base58 so for now move bech32::Decode() after DecodeBase58Check()?\n\nI was using a fail-fast approach, making the thing that most quickly fails first. You're right that as long as there are hardly any bech32 addresses, putting Base58 would be overall faster. But none of this is",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135591494,135591494,src/base58.cpp
sipa,2017-08-29T00:57:35Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671584,135671584,src/bech32.cpp
sipa,2017-08-29T00:57:42Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671593,135671593,src/bech32.cpp
sipa,2017-08-29T00:57:47Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r135671602,135671602,src/bech32.cpp
jimpo,2017-09-01T23:28:55Z,"Could you leave a comment referring the reader to more complete documentation on bech32 (either the BIP or reference repo)? Also would be nice to document somewhere in the codebase what `hrp` stands for.\n\nI'm thinking something as simple as: ""Bech32 is a data encoding used for some newer address formats. Output consists of a human-readable part (HRP) followed by a separator, then the data itse",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136680925,136680925,src/bech32.h
jimpo,2017-09-03T18:55:24Z,nit: Maybe use [toupper](http://en.cppreference.com/w/cpp/string/byte/toupper) here to be more descriptive and succinct.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136723550,136723550,src/test/base58_tests.cpp
sipa,2017-09-03T20:09:11Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725195,136725195,src/bech32.h
sipa,2017-09-03T20:09:51Z,"Unfortunately, toupper is locale-dependent, so it can't be used for consistent behaviour.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725208,136725208,src/test/base58_tests.cpp
jimpo,2017-09-03T20:25:08Z,"`std::toupper(c, std::locale::classic())`?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725506,136725506,src/test/base58_tests.cpp
sipa,2017-09-03T20:29:34Z,Seems overkill.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r136725581,136725581,src/test/base58_tests.cpp
instagibbs,2017-09-06T23:29:58Z,move this inside of the else statement below,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415679,137415679,src/wallet/rpcwallet.cpp
instagibbs,2017-09-06T23:31:28Z,"this is more aptly described as a witness program script, since `w.result`  will always be a witness program.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137415870,137415870,src/wallet/rpcwallet.cpp
sipa,2017-09-07T00:43:48Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424201,137424201,src/wallet/rpcwallet.cpp
sipa,2017-09-07T00:43:53Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137424207,137424207,src/wallet/rpcwallet.cpp
theuni,2017-09-09T01:26:42Z,Why is this not ```&data[pubkey_prefix.size()]```  (or ```data.data() +  pubkey_prefix.size()```) ?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137915138,137915138,src/base58.cpp
sipa,2017-09-09T09:10:08Z,"Nice catch, fixed!",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137922308,137922308,src/base58.cpp
meshcollider,2017-09-09T10:23:20Z,`{ }` just to be consistent with the previous one-line if statements in this function?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923351,137923351,src/bech32.cpp
meshcollider,2017-09-09T10:23:41Z,"Tiny nit, end-of-namespace comment? Same for other namespaces in this file and in bech32.h",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923359,137923359,src/bech32.cpp
meshcollider,2017-09-09T10:42:12Z,Move `default=true` into the brackets after `optional` to be consistent with other RPCs,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923611,137923611,src/wallet/rpcwallet.cpp
meshcollider,2017-09-09T10:49:11Z,Why BIP173 not Bech32?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923711,137923711,src/wallet/rpcwallet.cpp
meshcollider,2017-09-09T10:56:16Z,`vSolutions[0].data()`? Same for `TX_WITNESS_V0_SCRIPTHASH` case below,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137923807,137923807,src/script/standard.cpp
sipa,2017-09-09T20:17:52Z,"Bech32 is the generic encoding format (and should be contrasted with Base58Check), BIP173 specifies a specific way of encoding SegWit addresses using Bech32 (like P2SH/BIP13 specifies a specific way of encoding BIP16 addresses using Base58Check).",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934415,137934415,src/wallet/rpcwallet.cpp
sipa,2017-09-09T20:42:56Z,Done again - I somehow lost this change.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934921,137934921,src/bech32.h
sipa,2017-09-09T20:43:32Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934936,137934936,src/script/standard.cpp
sipa,2017-09-09T20:43:38Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934939,137934939,src/wallet/rpcwallet.cpp
sipa,2017-09-09T20:43:43Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934940,137934940,src/bech32.cpp
sipa,2017-09-09T20:43:51Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r137934943,137934943,src/bech32.cpp
promag,2017-09-13T22:41:59Z,"Here and in other places where an empty string is returned prefer:\n```cpp\nreturn {};\n```\nSee https://stackoverflow.com/a/26588207.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138758464,138758464,src/base58.cpp
promag,2017-09-13T22:54:22Z,Swap conditions?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760424,138760424,src/base58.cpp
promag,2017-09-13T22:57:01Z,"```cpp\n} // namespace\n```",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138760859,138760859,src/bech32.cpp
meshcollider,2017-09-14T04:25:20Z,"Ohh heh I must have misclicked and put my comment on the wrong line, I thought I pointed this one out already but it seems I just commented on the end of a function",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138794570,138794570,src/bech32.cpp
sipa,2017-09-14T06:36:09Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807493,138807493,src/base58.cpp
sipa,2017-09-14T06:36:16Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807508,138807508,src/base58.cpp
sipa,2017-09-14T06:36:23Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138807524,138807524,src/bech32.cpp
promag,2017-09-14T09:35:55Z,"```py\ntxid = self.nodes[1].sendrawtransaction(rawtxfund)\n```\nAnd remove above?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r138843438,138843438,test/functional/segwit.py
achow101,2017-09-15T15:43:00Z,Is this the right copyright header (here and in `bech32.h` and elsewhere)?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183195,139183195,src/bech32.cpp
achow101,2017-09-15T15:43:58Z,I don't see the comment... I think you lost it again.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183428,139183428,src/bech32.h
achow101,2017-09-15T15:46:07Z,I think this should be above with the `TX_NULL_DATA` and `TX_NONSTANDARD` cases.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139183925,139183925,src/script/ismine.cpp
sdaftuar,2017-09-15T15:58:10Z,"It took me a while to figure out how this function implements Bech32.  Not sure if this is out of scope since you're bringing this reference implementation in from another repo, and maybe these idioms here are common for math code, but as a newcomer to this I would have found it helpful to explain:\n\na) initializing chk = 1 is how we implement the prepending of a {1} to the values being encoded",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139186921,139186921,src/bech32.cpp
sdaftuar,2017-09-15T15:58:57Z,Perhaps document the fancy bit arithmetic and negation being done here to avoid the conditional?  I find the type conversions here a bit confusing -- we start with a uint8_t and calculate either a 0 or 1.  Then we negate it -- still as a uint8_t? -- and then cast to an unsigned long to do the final bit operation?  It's not clear to me that the negation and then promotion must result in 0xffffffff ,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187109,139187109,src/bech32.cpp
sdaftuar,2017-09-15T16:01:16Z,Perhaps parens around the << operator?  Order of operations between << and ^ was not obvious to me without looking this up.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139187633,139187633,src/bech32.cpp
sdaftuar,2017-09-15T16:23:23Z,Might be helpful to document the `^ 1` here comes from the requirement that the reminder mod g(x) be 1 (rather than 0).,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139192440,139192440,src/bech32.cpp
sipa,2017-09-15T19:32:49Z,I think so.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232521,139232521,src/bech32.cpp
sipa,2017-09-15T19:33:02Z,"Nice catch, done.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232558,139232558,src/script/ismine.cpp
sipa,2017-09-15T19:33:21Z,I've added a long explanation.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232621,139232621,src/bech32.cpp
sipa,2017-09-15T19:33:29Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232646,139232646,src/bech32.cpp
sipa,2017-09-15T19:34:15Z,I've replaced it with much more readable conditions. I've verified that at least GCC 6.3 compiles it to efficient code (without any jumps).,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232787,139232787,src/bech32.cpp
sipa,2017-09-15T19:34:23Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139232808,139232808,src/bech32.cpp
sipa,2017-09-15T19:39:22Z,"It's there, just a bit higher up in the file.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139233636,139233636,src/bech32.h
achow101,2017-09-16T16:28:43Z,"Ok, just checking since most files in this repo have `Copyright (c) The Bitcoin Core developers`",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139290141,139290141,src/bech32.cpp
gmaxwell,2017-09-18T22:26:46Z,gross.  Can these tests be changed to work with whole script pubkeys rather than tweaking the addrType?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139556463,139556463,src/test/base58_tests.cpp
sipa,2017-09-19T22:51:40Z,"> gross\n\nI agree. \n\n> Can these tests be changed to work with whole script pubkeys rather than tweaking the addrType?\n\nDone. I've added an extra commit to first refactor the tests into testing scriptPubKeys.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139838199,139838199,src/test/base58_tests.cpp
gmaxwell,2017-09-20T06:32:30Z,no bcrt tests?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139884736,139884736,src/test/data/base58_keys_valid.json
sipa,2017-09-20T07:27:53Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r139893394,139893394,src/test/data/base58_keys_valid.json
TheBlueMatt,2017-09-22T20:58:17Z,nit: it seems you changed the description text to match the old test and then also changed the test out from under it?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140595269,140595269,src/test/base58_tests.cpp
danra,2017-09-23T15:39:43Z,IMHO boost headers should come before standard library headers,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636125,140636125,src/base58.cpp
danra,2017-09-23T15:40:33Z,"`<algorithm>` should be in the same group as `<assert.h>`, `<string.h>`, all three are standard headers, with the difference being just that the latter two expose functionality into the global namespace.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636138,140636138,src/base58.cpp
danra,2017-09-23T15:43:44Z,Isn't it a shame to completely drop the contents of this comment? Could be nice to have it as-is or split near the Base58 encoding parts.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636193,140636193,src/base58.cpp
danra,2017-09-23T15:56:15Z,Reuse previous overload of `IsValidDestinationString()`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140636403,140636403,src/base58.cpp
danra,2017-09-23T16:36:17Z,"- Use `std::copy[_n]` instead of `memcpy`\n- Suggest DRYing constant lengths 20, 32. Either defining them here or using existing definition from another header.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140637180,140637180,src/base58.cpp
sipa,2017-09-23T18:24:59Z,"We don't have strict rules about header include order, and I'm not convinced they would be a good trade-off (more work for reviewers, only marginally more readable code).",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639002,140639002,src/base58.cpp
sipa,2017-09-23T18:25:20Z,I've merged it into the implementation.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639009,140639009,src/base58.cpp
sipa,2017-09-23T18:25:32Z,"Both done, in multiple places.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639019,140639019,src/base58.cpp
sipa,2017-09-23T18:27:26Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639042,140639042,src/base58.cpp
danra,2017-09-23T18:44:19Z,"IMHO Having the headers not arranged is just a more overhead to the reader. When it's a few headers, it's just a bit of overhead. When it's plenty, the overhead grows.\n\nIn any case, this specific comment is just about grouping standard header together, sorting them alphabetically, a guideline which I got the impression is mostly observed in the code.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639345,140639345,src/base58.cpp
danra,2017-09-23T18:45:51Z,"The reasoning for this is the same as why user includes should come before system includes - avoid hidden dependencies.\n\nWhile boost is canonical and well-tested, it's probably still better practice to have non-standard system headers be included before standard system headers, if only for consistency.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639374,140639374,src/base58.cpp
danra,2017-09-23T18:46:32Z,"I thought I searched for the contents and didn't find it, I guess I missed it. Thanks!",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639388,140639388,src/base58.cpp
sipa,2017-09-23T18:47:38Z,"They're already sorted alphabetically and grouped together (but with C headers separate for C++ headers), which seems perfectly reasonable to me.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639400,140639400,src/base58.cpp
sipa,2017-09-23T18:48:59Z,"Interesting, I hadn't heard about this reason. I'll take it into account in the future.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639422,140639422,src/base58.cpp
sipa,2017-09-23T18:49:17Z,I only did it after you commented. Thanks for pointing it out.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639427,140639427,src/base58.cpp
danra,2017-09-23T19:17:02Z,"Ah, I misunderstood. Thanks!",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r140639910,140639910,src/base58.cpp
instagibbs,2017-09-26T14:19:24Z,nit: I think this deserves an in-line comment.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141070635,141070635,src/qt/bitcoinaddressvalidator.cpp
instagibbs,2017-09-26T14:46:20Z,Not obvious to me here why it's `bech.second.begin() + 1`.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141079340,141079340,src/base58.cpp
instagibbs,2017-09-26T14:54:38Z,unused?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141082070,141082070,src/script/standard.cpp
sipa,2017-09-26T18:00:56Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135623,141135623,src/qt/bitcoinaddressvalidator.cpp
sipa,2017-09-26T18:01:07Z,Added a comment.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135676,141135676,src/base58.cpp
sipa,2017-09-26T18:01:17Z,Removed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141135719,141135719,src/script/standard.cpp
promag,2017-09-27T13:41:34Z,"Call `data.reserve(prefix.size() + id.size())` before filling data to avoid reallocation?\n\nOtherwise use copy constructor? Same below.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141345745,141345745,src/base58.cpp
promag,2017-09-27T14:03:34Z,Avoid copy?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141352548,141352548,src/bech32.cpp
promag,2017-09-27T14:03:37Z,"I believe this is the 3rd possible reallocation on the same vector:\n - 1st L106: `ret.resize()`\n - 2nd L30: `x.insert(...)`\n - 3rd L130: `enc.resize(enc.size() + 6)`\n\nSuggestion, add 2nd argument `capacity = 0` to `ExpandHRP`?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141352566,141352566,src/bech32.cpp
sipa,2017-09-27T17:46:16Z,"No copy occurs here. \n\nNote that `Cat`'s first argument takes a vector by value, not by const reference. This means that the value returned by `ExpandHRP` (which is a temporary) will use a move constructor to become `Cat`'s first argument (instead of just passing a reference). However, no copy occurs, and `Cat` is then free to modify that variable.\n\n`Cat` then extends that vector, and retu",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141417745,141417745,src/bech32.cpp
sipa,2017-09-27T18:26:24Z,The copy constructor is used here when initializing the `data` variable.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141428618,141428618,src/base58.cpp
laanwj,2017-09-28T11:05:29Z,I wonder why we don't use the SelectParams by string here.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588328,141588328,src/test/base58_tests.cpp
laanwj,2017-09-28T11:06:27Z,"Same here, `SelectParams(find_value(metadata, ""chain"").get_str())` would do?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141588515,141588515,src/test/base58_tests.cpp
laanwj,2017-09-28T11:31:46Z,"As this is indexed using a `uint8_t` I'd feel slightly more at ease if we extend this array to size 256, or add an explicit check against 128 in the loop where it is referenced. I know the check at the beginning of `Decode()` makes it impossible to hit this, but it seems something that is easily forgotten with a future code change.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141592625,141592625,src/bech32.cpp
danra,2017-09-28T18:28:34Z,@sipa The change in `operator()` for `CNoDestination` should be rebased onto 1e46ebdf8618e585568ffc1b093c79cc9be07b57,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141699694,141699694,src/base58.cpp
danra,2017-09-28T18:34:40Z,Would be nice to extract the common functionality here (validating some prefix+size+extracting hash) into a function,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141701098,141701098,src/base58.cpp
danra,2017-09-28T18:38:18Z,Perhaps add that copyright as well?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702040,141702040,src/bech32.cpp
danra,2017-09-28T18:39:13Z,"Suggest adding a comment here explaining reasoning for the CHARSET (similar to how it's explained in BIP 173).\nAlso, is there an implementation available showing how the visual similarity was minimized, or was this minimization just done manually? In case of the former, suggest adding a link to that here or in the BIP (or in both)",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702241,141702241,src/bech32.cpp
danra,2017-09-28T18:39:49Z,"This can probably be directly derived from `CHARSET` at compilation time using `constexpr` functions and making `CHARSET` and this `constexpr` as well, making it more robust.\nI can try implementing it, if you agree it's of interest.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141702391,141702391,src/bech32.cpp
danra,2017-09-28T18:50:16Z,"I suggest rephrasing, IIRC multiplication requires some irreducible polynomial, a^5 + a^3 + 1 is just one possibility which was specifically chosen here. Current phrasing implies multiplication ""requires"" this specific polynomial.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141705025,141705025,src/bech32.cpp
danra,2017-09-28T19:09:19Z,"Use a range-for loop, `i` isn't used except for accessing element (and in comments)",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141709639,141709639,src/bech32.cpp
danra,2017-09-28T19:11:44Z,"Here and later, `'A' <= c && c <= 'Z'` is better style (`c` is 'between' the values. Easier to read, harder to get wrong when used consistently)",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141710179,141710179,src/bech32.cpp
theuni,2017-09-28T19:17:37Z,data.clear(),https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141711422,141711422,src/base58.cpp
danra,2017-09-28T19:21:03Z,"I might be wrong, but isn't the problem with prepending a 0, rather than appending one?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141712157,141712157,src/bech32.cpp
danra,2017-09-28T19:25:39Z,Just `data ret(6);`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141713104,141713104,src/bech32.cpp
danra,2017-09-28T19:29:37Z,Use range-for loop,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141714069,141714069,src/bech32.cpp
danra,2017-09-28T19:43:07Z,Just `data values(str.size() - 1 - pos);`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141717000,141717000,src/bech32.cpp
danra,2017-09-28T19:45:34Z,"Here and later, just `return {}`",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141717549,141717549,src/bech32.cpp
danra,2017-09-28T19:49:39Z,"Access `CHARSET_REV` just once, store `const int8_t& val = CHARSET_REV[c]`",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141718442,141718442,src/bech32.cpp
danra,2017-09-28T19:56:11Z,Here too `std::make_pair` can be removed in favor of `{}`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141720047,141720047,src/bech32.cpp
danra,2017-09-28T20:53:32Z,Suggest using `std::tolower()` and standard algorithms to simplify the implementation,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141733308,141733308,src/test/bech32_tests.cpp
danra,2017-09-28T20:59:53Z,`isRegtest` for consistency,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141734853,141734853,src/test/base58_tests.cpp
danra,2017-09-28T21:09:25Z,"`WitnessV0KeyHash` and `WitnessV0ScriptHash` overloads have identical implementation, refactor it to a private template (templated on `id` type) function and call it from these two?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141737103,141737103,src/base58.cpp
danra,2017-09-28T21:13:13Z,Braces around each of `keyid` and `scriptid` segments would reduce their visibility to just the scope where they're needed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141737906,141737906,src/base58.cpp
danra,2017-09-28T21:14:44Z,`std::copy`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141738221,141738221,src/base58.cpp
danra,2017-09-28T21:16:18Z,Early return if the condition fails would reduce indentation,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141738523,141738523,src/base58.cpp
danra,2017-09-28T21:28:30Z,`std::copy`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141741040,141741040,src/script/standard.cpp
danra,2017-09-28T21:33:41Z,"The header comment for `ExtractDestination` is out of date now that P2WPKH and P2WSH are supported, it says\n\n> Currently only works for P2PK, P2PKH, and P2SH scripts.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141742087,141742087,src/script/standard.cpp
danra,2017-09-28T21:36:36Z,`return std::equal(...);`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141742666,141742666,src/script/standard.h
danra,2017-09-28T21:40:34Z,`return std::lexicographical_compare(...);`,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141743481,141743481,src/script/standard.h
sipa,2017-09-28T22:27:51Z,"Fixed. I've added a `reserve` call in `ExpandHRP` (which reserves 90 + hrp.size(), the maximum valid expanded size the checksum is computed over).",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751499,141751499,src/bech32.cpp
sipa,2017-09-28T22:28:08Z,"Good idea, fixed.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751543,141751543,src/test/base58_tests.cpp
sipa,2017-09-28T22:28:19Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751573,141751573,src/test/base58_tests.cpp
sipa,2017-09-28T22:28:30Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141751606,141751606,src/bech32.cpp
sipa,2017-09-28T22:37:50Z,"I think the implementation should focus on explaining why it is a correct implementation of the BIP. It doesn't need to include things the BIP already explains well - that's just gratuitously splitting the knowledge over multiple places.\n\nYes, the code for that optimization is in my repository, but it's very ad-hoc and not really intended for publishing.\n",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141752920,141752920,src/bech32.cpp
sipa,2017-09-28T22:39:52Z,"Sounds good, but seems out of scope for this PR.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753222,141753222,src/bech32.cpp
sipa,2017-09-28T22:43:09Z,"Yes and no.\n\nThere is only one field of size 32 _up to isomorphism_. However, the multiplication of GF(32) elements _when represented as bits_ absolutely depends on the choice of the polynomial - and this is the one used in Bech32. It just so happens that you could do a mapping of the input values to the respective elements in an isomorphic representation (which uses another polynomial), do th",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753671,141753671,src/bech32.cpp
danra,2017-09-28T22:44:56Z,Make sense regarding the information location. Where in your repo can one find the optimization code you used?,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141753985,141753985,src/bech32.cpp
danra,2017-09-28T22:49:35Z,"> However, the multiplication of GF(32) elements when represented as bits absolutely depends on the choice of the polynomial - and this is the one used in Bech32\n\nYes, that's what I meant - emphasizing the fact that this polynomial was chosen, not that it is *the* one required for multiplication. I think this point could be better made. Though, I agree that even without this nit, the documenta",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141754712,141754712,src/bech32.cpp
sipa,2017-09-28T22:52:42Z,I prefer variables up front.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141755153,141755153,src/bech32.cpp
sipa,2017-09-28T22:56:08Z,"Thanks for taking the time to think through it, but no, this is about appending.\n\nIf the requirement was that the checksum was zero, it would mean that c(x) (the codeword polynomial) mod g(x) = 0, or in other words, c(x) is a multiple of g(x) (the generator). If c(x) is a multiple of g(x), then x*c(x) is a multiple of g(x) as well. The corresponding codeword for c(x)*x is the characters of the",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141755794,141755794,src/bech32.cpp
sipa,2017-09-28T23:01:06Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756594,141756594,src/bech32.cpp
sipa,2017-09-28T23:03:17Z,"Unfortunately, `tolower` is locale-dependent. I don't feel that the complexity of avoiding that is worth it for such a trivial algorithm.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756888,141756888,src/test/bech32_tests.cpp
sipa,2017-09-28T23:03:39Z,Already removed in response to @laanwj's comment above.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141756938,141756938,src/test/base58_tests.cpp
sipa,2017-09-28T23:05:33Z,I think being explicit here is clearer. I also don't expect that this correspondence will be maintained in future witness versions.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141757173,141757173,src/base58.cpp
sipa,2017-09-28T23:10:42Z,"It would, but I believe it would reduce readability: there are a number of alternatives being tried, and each has its branch to process it. If it were unindented, it would need to be reindented anyway if more cases were added.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141757780,141757780,src/base58.cpp
sipa,2017-09-28T23:34:52Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141760870,141760870,src/base58.cpp
sipa,2017-09-28T23:35:09Z,I prefer to do that later.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141760909,141760909,src/base58.cpp
sipa,2017-09-28T23:35:41Z,https://github.com/sipa/ezbase32/blob/master/dist32.cpp,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761009,141761009,src/bech32.cpp
sipa,2017-09-28T23:36:32Z,"This wasn't done originally, as the reference code is C++03, but by now it's diverged enough that I'll just bite the bullet and make it C++11 inside Core.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761191,141761191,src/bech32.cpp
sipa,2017-09-28T23:36:43Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761216,141761216,src/bech32.cpp
sipa,2017-09-28T23:36:52Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761234,141761234,src/bech32.cpp
sipa,2017-09-28T23:37:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761245,141761245,src/bech32.cpp
sipa,2017-09-28T23:37:06Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761256,141761256,src/bech32.cpp
sipa,2017-09-28T23:37:19Z,"Cool, done.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761284,141761284,src/bech32.cpp
sipa,2017-09-28T23:38:17Z,"> thereâ€™s a version of tolower where you can specify the locale yourself, so there is no concern about the wrong one being set in the system\n\nLocales scare me. As a reviewer, I would be far less confident that such code is correct due to it as opposed to an absolutely trivial algorithm that obvious does what it should.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761413,141761413,src/test/bech32_tests.cpp
sipa,2017-09-28T23:38:32Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761440,141761440,src/base58.cpp
sipa,2017-09-28T23:38:41Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761453,141761453,src/base58.cpp
sipa,2017-09-28T23:38:50Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761478,141761478,src/script/standard.cpp
sipa,2017-09-28T23:38:58Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761495,141761495,src/script/standard.cpp
sipa,2017-09-28T23:39:06Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761507,141761507,src/script/standard.h
sipa,2017-09-28T23:39:13Z,Done.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141761520,141761520,src/script/standard.h
promag,2017-09-28T23:44:46Z,"```python\nassert 0 <= version <= 16\n```",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762203,141762203,test/functional/test_framework/address.py
promag,2017-09-28T23:45:16Z,"```python\nassert 2 <= len(program) <= 40\n```",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762252,141762252,test/functional/test_framework/address.py
theuni,2017-09-28T23:46:16Z,"Agree. Seeing ""locale"" always means a non-trivial amount of googling is in store.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762354,141762354,src/test/bech32_tests.cpp
sipa,2017-09-28T23:47:13Z,"Well I think it is _the_ one required for multiplication.\n\nThe specific representation of GF(32) we use, is defined as bits representing polynomials over GF(2) modulo exactly the polynomial `a^5 + a^3 + 1` and no other.\n\nYes, other representations using other polynomials exist, and given that all size 32 fields are isomorphic, it's guaranteed that a mapping exists between them which is con",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762455,141762455,src/bech32.cpp
promag,2017-09-28T23:51:04Z,"```python\nassert version > 0 or len(program) in [20, 32]\n```",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141762923,141762923,test/functional/test_framework/address.py
promag,2017-09-28T23:52:35Z,"```python\nrestart_node(1)\n```",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141763078,141763078,test/functional/segwit.py
sipa,2017-09-29T00:30:42Z,"```python\n  File ""./segwit.py"", line 606, in run_test\n    self.restart_node(1)\nAttributeError: 'SegWitTest' object has no attribute 'restart_node'\n```\n",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141767139,141767139,test/functional/segwit.py
danra,2017-09-29T08:00:16Z,"I agree with the principle. But, the only block I suggest dedenting is the one under the condition\n`if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end()))`\nwhich is *after* a case has been decided (Bech32 decoding), and if this condition fails, the decoding fails, so early return makes sense. It's unlikely any additional cases would be added in case of failure here.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141809973,141809973,src/base58.cpp
danra,2017-09-29T08:04:00Z,"Ok, makes sense. In that case I adding a utility function for 'english' [is|to][lower|upper], there's too much repetition of the same (simple) functionality.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141810564,141810564,src/test/bech32_tests.cpp
laanwj,2017-09-29T08:07:56Z,"Yes, that really doesn't help. Please don't introduce dependence on locale. We prefer deterministic, well-defined, nation-independent string processing, even if that means writing some extra code at least we **know** what it's doing then. Also this is specific to bechs32 (part of the standard) so it's better to keep it self-contained.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141811145,141811145,src/test/bech32_tests.cpp
danra,2017-09-29T08:12:45Z,"> Or do you mean that I should point out that Bech32 could have used any of the other irreducible polynomials?\n\nYes. I just suggest a more precise phrasing. e.g., instead of\n> Multiplication is more complicated, and requires [...] multiplying those polynomials mod a^5 + a^3 + 1\n\nwrite \n\n> Multiplication is more complicated, and requires [...] multiplying those polynomials mod an irre",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141811940,141811940,src/bech32.cpp
danra,2017-09-29T08:16:00Z,"@laanwj Just to repeat an earlier comment, `<locale>` has overloads of these functions where you can specify the locale, so there are no hidden dependencies on the default system locale. I do agree it might require more googling, and is perhaps a bit less obvious.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141812552,141812552,src/test/bech32_tests.cpp
danra,2017-09-29T08:22:39Z,"@theuni Good catch!\n@sipa Suggest splitting `DecodeDestination` to two functions, one for decoding Base58 and one for Bech32. This would have trivially eliminated the bug above. Another example of something which would be fixed is `hash` being used only for Base58 decoding but being visible for the entirety of the Bech32 decoding as well.",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141813836,141813836,src/base58.cpp
theuni,2017-09-29T22:52:40Z,+1 to this in some future follow-up.,https://github.com/bitcoin/bitcoin/pull/11167#discussion_r141983470,141983470,src/base58.cpp
theuni,2017-11-02T19:44:13Z,"Unlikely to matter, but shouldn't this be ```LowerCase(hrp[i])``` ?",https://github.com/bitcoin/bitcoin/pull/11167#discussion_r148640134,148640134,src/bech32.cpp
