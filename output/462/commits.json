[
  {
    "sha": "99860de3c9b5809110538e1ab2d4e216d77b5aaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTg2MGRlM2M5YjU4MDkxMTA1MzhlMWFiMmQ0ZTIxNmQ3N2I1YWFm",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-11T11:41:01Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-19T05:24:37Z"
      },
      "message": "Make some global variables less-global (static)\n\nExplicitly make these global variables less-global to reduce the maximum\nscope of this global state.\n\nIn my experience global variables tend to be a major source of bugs. As\nsuch the less accessible they are the less likely they are to be the\nsource of a bug.\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "35579db7032a75646495548859b50495ba656ca6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35579db7032a75646495548859b50495ba656ca6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99860de3c9b5809110538e1ab2d4e216d77b5aaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99860de3c9b5809110538e1ab2d4e216d77b5aaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99860de3c9b5809110538e1ab2d4e216d77b5aaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99860de3c9b5809110538e1ab2d4e216d77b5aaf/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "865ed8a1e5c587468a40756d46bcbc1c5a12bb06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/865ed8a1e5c587468a40756d46bcbc1c5a12bb06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/865ed8a1e5c587468a40756d46bcbc1c5a12bb06"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 4,
      "deletions": 19
    },
    "files": [
      {
        "sha": "8b4b3df9826616b99bec09bb02ca3a8f570334bc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=99860de3c9b5809110538e1ab2d4e216d77b5aaf",
        "patch": "@@ -22,14 +22,14 @@ set<CWallet*> setpwalletRegistered;\n \n CCriticalSection cs_main;\n \n-map<uint256, CTransaction> mapTransactions;\n+static map<uint256, CTransaction> mapTransactions;\n CCriticalSection cs_mapTransactions;\n unsigned int nTransactionsUpdated = 0;\n map<COutPoint, CInPoint> mapNextTx;\n \n map<uint256, CBlockIndex*> mapBlockIndex;\n uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n-CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n+static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n const int nTotalBlocksEstimate = 134444; // Conservative estimate of total nr of blocks on main chain\n const int nInitialBlockThreshold = 120; // Regard blocks up until N-threshold as \"initial download\"\n CBlockIndex* pindexGenesisBlock = NULL;"
      },
      {
        "sha": "d4b89225d12789fd4ff277cc0343399b16b51262",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=99860de3c9b5809110538e1ab2d4e216d77b5aaf",
        "patch": "@@ -54,7 +54,6 @@ static const int fHaveUPnP = false;\n extern CCriticalSection cs_main;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n extern uint256 hashGenesisBlock;\n-extern CBigNum bnProofOfWorkLimit;\n extern CBlockIndex* pindexGenesisBlock;\n extern int nBestHeight;\n extern CBigNum bnBestChainWork;\n@@ -1558,16 +1557,4 @@ class CAlert : public CUnsignedAlert\n     bool ProcessAlert();\n };\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-extern std::map<uint256, CTransaction> mapTransactions;\n-\n #endif"
      },
      {
        "sha": "df98457c729cfcfc87af78a1edf07760c095294e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=99860de3c9b5809110538e1ab2d4e216d77b5aaf",
        "patch": "@@ -50,10 +50,10 @@ bool fClient = false;\n bool fAllowDNS = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n CAddress addrLocalHost(\"0.0.0.0\", 0, false, nLocalServices);\n-CNode* pnodeLocalHost = NULL;\n+static CNode* pnodeLocalHost = NULL;\n uint64 nLocalHostNonce = 0;\n array<int, 10> vnThreadsRunning;\n-SOCKET hListenSocket = INVALID_SOCKET;\n+static SOCKET hListenSocket = INVALID_SOCKET;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;"
      },
      {
        "sha": "52568ef4cec8f855605370d449d958bf3d9ec1fb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99860de3c9b5809110538e1ab2d4e216d77b5aaf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=99860de3c9b5809110538e1ab2d4e216d77b5aaf",
        "patch": "@@ -476,10 +476,8 @@ extern bool fClient;\n extern bool fAllowDNS;\n extern uint64 nLocalServices;\n extern CAddress addrLocalHost;\n-extern CNode* pnodeLocalHost;\n extern uint64 nLocalHostNonce;\n extern boost::array<int, 10> vnThreadsRunning;\n-extern SOCKET hListenSocket;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;"
      }
    ]
  },
  {
    "sha": "e49b83bb1242b37717e5cfabc344b0ff7157484e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDliODNiYjEyNDJiMzc3MTdlNWNmYWJjMzQ0YjBmZjcxNTc0ODRl",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-11T15:19:36Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-19T05:24:37Z"
      },
      "message": "Cleanup makefiles such that diffs to them are smaller\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "acbbb338c29b84ed4ca2c2f973342195ad799219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acbbb338c29b84ed4ca2c2f973342195ad799219"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e49b83bb1242b37717e5cfabc344b0ff7157484e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49b83bb1242b37717e5cfabc344b0ff7157484e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e49b83bb1242b37717e5cfabc344b0ff7157484e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49b83bb1242b37717e5cfabc344b0ff7157484e/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99860de3c9b5809110538e1ab2d4e216d77b5aaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99860de3c9b5809110538e1ab2d4e216d77b5aaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99860de3c9b5809110538e1ab2d4e216d77b5aaf"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 147,
      "deletions": 49
    },
    "files": [
      {
        "sha": "c03cb9d2aa423c4735aa4d4223aad5c98113c887",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=e49b83bb1242b37717e5cfabc344b0ff7157484e",
        "patch": "@@ -35,9 +35,28 @@ LIBS= \\\n DEFS=-D_MT -DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -DUSE_SSL\n DEBUGFLAGS=-g -D__WXDEBUG__\n CFLAGS=-O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h \\\n-    crypter.h init.h\n+HEADERS = \\\n+    base58.h \\\n+    bignum.h \\\n+    crypter.h \\\n+    db.h \\\n+    headers.h \\\n+    init.h \\\n+    irc.h \\\n+    key.h \\\n+    keystore.h \\\n+    main.h \\\n+    net.h \\\n+    noui.h \\\n+    rpc.h \\\n+    script.h \\\n+    serialize.h \\\n+    strlcpy.h \\\n+    ui.h \\\n+    uibase.h \\\n+    uint256.h \\\n+    util.h \\\n+    wallet.h\n \n ifdef USE_UPNP\n \tINCLUDEPATHS += -I\"$(DEPSDIR)/upnpc-exe-win32-20110215\"\n@@ -49,17 +68,17 @@ endif\n LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l shlwapi\n \n OBJS= \\\n-    obj/util.o \\\n-    obj/script.o \\\n+    obj/crypter.o \\\n     obj/db.o \\\n-    obj/net.o \\\n+    obj/init.o \\\n     obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n-    obj/wallet.o \\\n+    obj/net.o \\\n     obj/rpc.o \\\n-    obj/init.o \\\n-    obj/crypter.o \\\n+    obj/script.o \\\n+    obj/util.o \\\n+    obj/wallet.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "55cb8a7058f345b4ff431d6e37a1bff3373761ee",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=e49b83bb1242b37717e5cfabc344b0ff7157484e",
        "patch": "@@ -32,9 +32,28 @@ LIBS= \\\n DEFS=-DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -DUSE_SSL\n DEBUGFLAGS=-g -D__WXDEBUG__\n CFLAGS=-mthreads -O2 -w -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h \\\n-    init.h crypter.h\n+HEADERS = \\\n+    base58.h \\\n+    bignum.h \\\n+    crypter.h \\\n+    db.h \\\n+    headers.h \\\n+    init.h \\\n+    irc.h \\\n+    key.h \\\n+    keystore.h \\\n+    main.h \\\n+    net.h \\\n+    noui.h \\\n+    rpc.h \\\n+    script.h \\\n+    serialize.h \\\n+    strlcpy.h \\\n+    ui.h \\\n+    uibase.h \\\n+    uint256.h \\\n+    util.h \\\n+    wallet.h\n \n ifdef USE_UPNP\n  INCLUDEPATHS += -I\"C:\\upnpc-exe-win32-20110215\"\n@@ -46,17 +65,17 @@ endif\n LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l shlwapi\n \n OBJS= \\\n-    obj/util.o \\\n-    obj/script.o \\\n+    obj/crypter.o \\\n     obj/db.o \\\n-    obj/net.o \\\n+    obj/init.o \\\n     obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n-    obj/wallet.o \\\n+    obj/net.o \\\n     obj/rpc.o \\\n-    obj/init.o \\\n-    obj/crypter.o \\\n+    obj/script.o \\\n+    obj/util.o \\\n+    obj/wallet.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "7172bcc417e68b485f89154d767c99d2a5a5084c",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=e49b83bb1242b37717e5cfabc344b0ff7157484e",
        "patch": "@@ -32,22 +32,41 @@ DEFS=$(shell $(DEPSDIR)/bin/wx-config --cxxflags) -D__WXMAC_OSX__ -DNOPCH -DMSG_\n DEBUGFLAGS=-g -DwxDEBUG_LEVEL=0\n # ppc doesn't work because we don't support big-endian\n CFLAGS=-mmacosx-version-min=10.5 -arch i386 -arch x86_64 -O3 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h \\\n-    init.h crypter.h\n+HEADERS = \\\n+    base58.h \\\n+    bignum.h \\\n+    crypter.h \\\n+    db.h \\\n+    headers.h \\\n+    init.h \\\n+    irc.h \\\n+    key.h \\\n+    keystore.h \\\n+    main.h \\\n+    net.h \\\n+    noui.h \\\n+    rpc.h \\\n+    script.h \\\n+    serialize.h \\\n+    strlcpy.h \\\n+    ui.h \\\n+    uibase.h \\\n+    uint256.h \\\n+    util.h \\\n+    wallet.h\n \n OBJS= \\\n-    obj/util.o \\\n-    obj/script.o \\\n+    obj/crypter.o \\\n     obj/db.o \\\n-    obj/net.o \\\n+    obj/init.o \\\n     obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n-    obj/wallet.o \\\n+    obj/net.o \\\n     obj/rpc.o \\\n-    obj/init.o \\\n-    obj/crypter.o \\\n+    obj/script.o \\\n+    obj/util.o \\\n+    obj/wallet.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "7cc72e0ea281e6a08702b7bb89845c0f269d0778",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 28,
        "deletions": 9,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=e49b83bb1242b37717e5cfabc344b0ff7157484e",
        "patch": "@@ -38,22 +38,41 @@ LIBS+= \\\n \n DEBUGFLAGS=-g -D__WXDEBUG__\n CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h keystore.h main.h wallet.h rpc.h uibase.h ui.h noui.h \\\n-    init.h crypter.h\n+HEADERS = \\\n+    base58.h \\\n+    bignum.h \\\n+    crypter.h \\\n+    db.h \\\n+    headers.h \\\n+    init.h \\\n+    irc.h \\\n+    key.h \\\n+    keystore.h \\\n+    main.h \\\n+    net.h \\\n+    noui.h \\\n+    rpc.h \\\n+    script.h \\\n+    serialize.h \\\n+    strlcpy.h \\\n+    ui.h \\\n+    uibase.h \\\n+    uint256.h \\\n+    util.h \\\n+    wallet.h\n \n OBJS= \\\n-    obj/util.o \\\n-    obj/script.o \\\n+    obj/crypter.o \\\n     obj/db.o \\\n-    obj/net.o \\\n+    obj/init.o \\\n     obj/irc.o \\\n     obj/keystore.o \\\n     obj/main.o \\\n-    obj/wallet.o \\\n+    obj/net.o \\\n     obj/rpc.o \\\n-    obj/init.o \\\n-    obj/crypter.o \\\n+    obj/script.o \\\n+    obj/util.o \\\n+    obj/wallet.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "edaba80a7bd1e126c27f1db16e0e93b0ae2641e3",
        "filename": "src/makefile.vc",
        "status": "modified",
        "additions": 35,
        "deletions": 13,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.vc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e49b83bb1242b37717e5cfabc344b0ff7157484e/src/makefile.vc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.vc?ref=e49b83bb1242b37717e5cfabc344b0ff7157484e",
        "patch": "@@ -45,21 +45,43 @@ LIBS=$(LIBS) \\\n \n DEBUGFLAGS=/Os\n CFLAGS=/MD /c /nologo /EHsc /GR /Zm300 $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n-HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h wallet.h keystore.h crypter.h\n+HEADERS = \\\n+    base58.h \\\n+    bignum.h \\\n+    crypter.h \\\n+    db.h \\\n+    headers.h \\\n+    init.h \\\n+    irc.h \\\n+    key.h \\\n+    keystore.h \\\n+    main.h \\\n+    net.h \\\n+    noui.h \\\n+    rpc.h \\\n+    script.h \\\n+    serialize.h \\\n+    strlcpy.h \\\n+    ui.h \\\n+    uibase.h \\\n+    uint256.h \\\n+    util.h \\\n+    wallet.h\n \n OBJS= \\\n-    obj\\util.obj \\\n-    obj\\script.obj \\\n-    obj\\db.obj \\\n-    obj\\net.obj \\\n-    obj\\irc.obj \\\n-\tobj\\keystore.obj \\\n-    obj\\main.obj \\\n-\tobj\\wallet.obj \\\n-    obj\\rpc.obj \\\n-    obj\\init.obj \\\n-\tobj\\crypter.obj\n+    obj\\crypter.o \\\n+    obj\\db.o \\\n+    obj\\init.o \\\n+    obj\\irc.o \\\n+    obj\\keystore.o \\\n+    obj\\main.o \\\n+    obj\\net.o \\\n+    obj\\rpc.o \\\n+    obj\\script.o \\\n+    obj\\util.o \\\n+    obj\\wallet.o \\\n+    cryptopp\\obj\\sha.o \\\n+    cryptopp\\obj\\cpu.o\n \n CRYPTOPP_OBJS= \\\n     cryptopp\\obj\\sha.obj \\"
      }
    ]
  },
  {
    "sha": "82dc6426b4cbf769ace7976c2a40d160b8d76f08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmRjNjQyNmI0Y2JmNzY5YWNlNzk3NmMyYTQwZDE2MGI4ZDc2ZjA4",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-11T16:12:14Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-19T05:24:38Z"
      },
      "message": "Move func 'REF' from util.h to serialize.h\n\nutil.h doesn't use REF, serialize.h does, creating a dependency of\nserialize.h on util.h, but util.h already depends on serialize.h.  To\nresolve this circular dependency the function 'REF' has now been moved\ncloser to one of its two points of use.\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "c4ce7ba97dfdc04b169ff87d35de12064928a7b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4ce7ba97dfdc04b169ff87d35de12064928a7b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82dc6426b4cbf769ace7976c2a40d160b8d76f08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc6426b4cbf769ace7976c2a40d160b8d76f08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82dc6426b4cbf769ace7976c2a40d160b8d76f08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc6426b4cbf769ace7976c2a40d160b8d76f08/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e49b83bb1242b37717e5cfabc344b0ff7157484e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e49b83bb1242b37717e5cfabc344b0ff7157484e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e49b83bb1242b37717e5cfabc344b0ff7157484e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 7,
      "deletions": 12
    },
    "files": [
      {
        "sha": "0a31ff557dbfa8abed634c8d9fa32fd2ab4d8cd1",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82dc6426b4cbf769ace7976c2a40d160b8d76f08/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82dc6426b4cbf769ace7976c2a40d160b8d76f08/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=82dc6426b4cbf769ace7976c2a40d160b8d76f08",
        "patch": "@@ -63,10 +63,13 @@ static const int VERSION = 32500;\n static const char* pszSubVer = \"\";\n static const bool VERSION_IS_BETA = true;\n \n-\n-\n-\n-\n+// Used to bypass the rule against non-const reference to temporary\n+// where it makes sense with wrappers such as CFlatData or CTxDB\n+template<typename T>\n+inline T& REF(const T& val)\n+{\n+    return const_cast<T&>(val);\n+}\n \n /////////////////////////////////////////////////////////////////\n //"
      },
      {
        "sha": "3d7ef108b478ee250c09447889b6b6b32b1508be",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82dc6426b4cbf769ace7976c2a40d160b8d76f08/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82dc6426b4cbf769ace7976c2a40d160b8d76f08/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=82dc6426b4cbf769ace7976c2a40d160b8d76f08",
        "patch": "@@ -67,14 +67,6 @@ typedef unsigned long long  uint64;\n // This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n #define PAIRTYPE(t1, t2)    pair<t1, t2>\n \n-// Used to bypass the rule against non-const reference to temporary\n-// where it makes sense with wrappers such as CFlatData or CTxDB\n-template<typename T>\n-inline T& REF(const T& val)\n-{\n-    return (T&)val;\n-}\n-\n // Align by increasing pointer, must have extra space at end of buffer\n template <size_t nBytes, typename T>\n T* alignup(T* p)"
      }
    ]
  },
  {
    "sha": "507fd9d15baac950df494742d67bcbafdaa4752c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDdmZDlkMTViYWFjOTUwZGY0OTQ3NDJkNjdiY2JhZmRhYTQ3NTJj",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-11T16:14:53Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-19T05:24:38Z"
      },
      "message": "Start moving protocol-specific code to protocol.[ch]pp\n\nMove CMessageHeader from net.h to protocol.[ch]pp, with the\nimplementation in the .cpp compilation unit (compiling once is enough).\n\nThis commit does *not* and should not modify *any* code, it only moves\nit from net.h and splits it across protocol.cpp and protocol.hpp.\n\nIndentation changes aside the closest thing to a modification of code is\nthe addition of the 'TODO' comment (the execution of which requires code\nmodifications and thus doesn't belong in this commit).\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "a705b7990df0a9f61f09dce2e4461017f7cbc0d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a705b7990df0a9f61f09dce2e4461017f7cbc0d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/507fd9d15baac950df494742d67bcbafdaa4752c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/507fd9d15baac950df494742d67bcbafdaa4752c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/507fd9d15baac950df494742d67bcbafdaa4752c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/507fd9d15baac950df494742d67bcbafdaa4752c/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82dc6426b4cbf769ace7976c2a40d160b8d76f08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc6426b4cbf769ace7976c2a40d160b8d76f08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82dc6426b4cbf769ace7976c2a40d160b8d76f08"
      }
    ],
    "stats": {
      "total": 222,
      "additions": 125,
      "deletions": 97
    },
    "files": [
      {
        "sha": "427067bc9485e4a59759a27ce4f680da739d8b27",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -21,7 +21,6 @@ class CKeyItem;\n class CReserveKey;\n class CWalletDB;\n \n-class CMessageHeader;\n class CAddress;\n class CInv;\n class CRequestTracker;"
      },
      {
        "sha": "12f6e212f94d5b147d4aba95931b9c56cc5e2686",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -48,6 +48,7 @@ HEADERS = \\\n     main.h \\\n     net.h \\\n     noui.h \\\n+    protocol.h \\\n     rpc.h \\\n     script.h \\\n     serialize.h \\\n@@ -75,6 +76,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n+    obj/protocol.o \\\n     obj/rpc.o \\\n     obj/script.o \\\n     obj/util.o \\"
      },
      {
        "sha": "893700b882bbe8b228c5a12b847a698df16d3f09",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -45,6 +45,7 @@ HEADERS = \\\n     main.h \\\n     net.h \\\n     noui.h \\\n+    protocol.h \\\n     rpc.h \\\n     script.h \\\n     serialize.h \\\n@@ -72,6 +73,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n+    obj/protocol.o \\\n     obj/rpc.o \\\n     obj/script.o \\\n     obj/util.o \\"
      },
      {
        "sha": "48908d9f308e105cb0bd255d751e1393b84ebbe1",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -45,6 +45,7 @@ HEADERS = \\\n     main.h \\\n     net.h \\\n     noui.h \\\n+    protocol.h \\\n     rpc.h \\\n     script.h \\\n     serialize.h \\\n@@ -63,6 +64,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n+    obj/protocol.o \\\n     obj/rpc.o \\\n     obj/script.o \\\n     obj/util.o \\"
      },
      {
        "sha": "a4f13ae2c9a7f6ac084fb8929b690beb9d01b636",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -51,6 +51,7 @@ HEADERS = \\\n     main.h \\\n     net.h \\\n     noui.h \\\n+    protocol.h \\\n     rpc.h \\\n     script.h \\\n     serialize.h \\\n@@ -69,6 +70,7 @@ OBJS= \\\n     obj/keystore.o \\\n     obj/main.o \\\n     obj/net.o \\\n+    obj/protocol.o \\\n     obj/rpc.o \\\n     obj/script.o \\\n     obj/util.o \\"
      },
      {
        "sha": "a5437bcf5cda925eb2b660451402cfa57416a5a7",
        "filename": "src/makefile.vc",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.vc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/makefile.vc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.vc?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -58,6 +58,7 @@ HEADERS = \\\n     main.h \\\n     net.h \\\n     noui.h \\\n+    protocol.h \\\n     rpc.h \\\n     script.h \\\n     serialize.h \\\n@@ -77,6 +78,7 @@ OBJS= \\\n     obj\\main.o \\\n     obj\\net.o \\\n     obj\\rpc.o \\\n+    obj\\protocol.o \\\n     obj\\script.o \\\n     obj\\util.o \\\n     obj\\wallet.o \\"
      },
      {
        "sha": "7a4706d53b4a69cdb0d0264490856f3773c6325a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 96,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -14,7 +14,8 @@\n #include <arpa/inet.h>\n #endif\n \n-class CMessageHeader;\n+#include \"protocol.h\"\n+\n class CAddress;\n class CAddrDB;\n class CInv;\n@@ -54,101 +55,6 @@ bool BindListenPort(std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n bool StopNode();\n \n-\n-\n-\n-\n-\n-\n-\n-//\n-// Message header\n-//  (4) message start\n-//  (12) command\n-//  (4) size\n-//  (4) checksum\n-\n-extern unsigned char pchMessageStart[4];\n-\n-class CMessageHeader\n-{\n-public:\n-    enum { COMMAND_SIZE=12 };\n-    char pchMessageStart[sizeof(::pchMessageStart)];\n-    char pchCommand[COMMAND_SIZE];\n-    unsigned int nMessageSize;\n-    unsigned int nChecksum;\n-\n-    CMessageHeader()\n-    {\n-        memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n-        memset(pchCommand, 0, sizeof(pchCommand));\n-        pchCommand[1] = 1;\n-        nMessageSize = -1;\n-        nChecksum = 0;\n-    }\n-\n-    CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n-    {\n-        memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n-        strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n-        nMessageSize = nMessageSizeIn;\n-        nChecksum = 0;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(FLATDATA(pchMessageStart));\n-        READWRITE(FLATDATA(pchCommand));\n-        READWRITE(nMessageSize);\n-        if (nVersion >= 209)\n-            READWRITE(nChecksum);\n-    )\n-\n-    std::string GetCommand()\n-    {\n-        if (pchCommand[COMMAND_SIZE-1] == 0)\n-            return std::string(pchCommand, pchCommand + strlen(pchCommand));\n-        else\n-            return std::string(pchCommand, pchCommand + COMMAND_SIZE);\n-    }\n-\n-    bool IsValid()\n-    {\n-        // Check start string\n-        if (memcmp(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart)) != 0)\n-            return false;\n-\n-        // Check the command string for errors\n-        for (char* p1 = pchCommand; p1 < pchCommand + COMMAND_SIZE; p1++)\n-        {\n-            if (*p1 == 0)\n-            {\n-                // Must be all zeros after the first zero\n-                for (; p1 < pchCommand + COMMAND_SIZE; p1++)\n-                    if (*p1 != 0)\n-                        return false;\n-            }\n-            else if (*p1 < ' ' || *p1 > 0x7E)\n-                return false;\n-        }\n-\n-        // Message size\n-        if (nMessageSize > MAX_SIZE)\n-        {\n-            printf(\"CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand().c_str(), nMessageSize);\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-};\n-\n-\n-\n-\n-\n-\n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n \n class CAddress"
      },
      {
        "sha": "0bb1da93e057d5aafb5edfb50ec00c75fe5c495c",
        "filename": "src/protocol.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2011 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"protocol.h\"\n+\n+CMessageHeader::CMessageHeader()\n+{\n+    memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n+    memset(pchCommand, 0, sizeof(pchCommand));\n+    pchCommand[1] = 1;\n+    nMessageSize = -1;\n+    nChecksum = 0;\n+}\n+\n+CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n+{\n+    memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n+    strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n+    nMessageSize = nMessageSizeIn;\n+    nChecksum = 0;\n+}\n+\n+std::string CMessageHeader::GetCommand() const\n+{\n+    if (pchCommand[COMMAND_SIZE-1] == 0)\n+        return std::string(pchCommand, pchCommand + strlen(pchCommand));\n+    else\n+        return std::string(pchCommand, pchCommand + COMMAND_SIZE);\n+}\n+\n+bool CMessageHeader::IsValid() const\n+{\n+    // Check start string\n+    if (memcmp(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart)) != 0)\n+        return false;\n+\n+    // Check the command string for errors\n+    for (const char* p1 = pchCommand; p1 < pchCommand + COMMAND_SIZE; p1++)\n+    {\n+        if (*p1 == 0)\n+        {\n+            // Must be all zeros after the first zero\n+            for (; p1 < pchCommand + COMMAND_SIZE; p1++)\n+                if (*p1 != 0)\n+                    return false;\n+        }\n+        else if (*p1 < ' ' || *p1 > 0x7E)\n+            return false;\n+    }\n+\n+    // Message size\n+    if (nMessageSize > MAX_SIZE)\n+    {\n+        printf(\"CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand().c_str(), nMessageSize);\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "b5baeb2a6838357a2b98773c259b5d712768f993",
        "filename": "src/protocol.h",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507fd9d15baac950df494742d67bcbafdaa4752c/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507fd9d15baac950df494742d67bcbafdaa4752c/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=507fd9d15baac950df494742d67bcbafdaa4752c",
        "patch": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2011 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __cplusplus\n+# error This header can only be compiled as C++.\n+#endif\n+\n+#ifndef __INCLUDED_PROTOCOL_H__\n+#define __INCLUDED_PROTOCOL_H__\n+\n+#include \"serialize.h\"\n+#include <string>\n+\n+//\n+// Message header\n+//  (4) message start\n+//  (12) command\n+//  (4) size\n+//  (4) checksum\n+\n+extern unsigned char pchMessageStart[4];\n+\n+class CMessageHeader\n+{\n+    public:\n+        CMessageHeader();\n+        CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n+\n+        std::string GetCommand() const;\n+        bool IsValid() const;\n+\n+        IMPLEMENT_SERIALIZE\n+            (\n+             READWRITE(FLATDATA(pchMessageStart));\n+             READWRITE(FLATDATA(pchCommand));\n+             READWRITE(nMessageSize);\n+             if (nVersion >= 209)\n+             READWRITE(nChecksum);\n+            )\n+\n+    // TODO: make private (improves encapsulation)\n+    public:\n+        enum { COMMAND_SIZE=12 };\n+        char pchMessageStart[sizeof(::pchMessageStart)];\n+        char pchCommand[COMMAND_SIZE];\n+        unsigned int nMessageSize;\n+        unsigned int nChecksum;\n+};\n+\n+#endif // __INCLUDED_PROTOCOL_H__"
      }
    ]
  },
  {
    "sha": "33e28c9948336784324cf5c7248ce608b93dbfde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2UyOGM5OTQ4MzM2Nzg0MzI0Y2Y1YzcyNDhjZTYwOGI5M2RiZmRl",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-11T16:40:12Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-19T05:24:38Z"
      },
      "message": "Move CAddress to protocol.[ch]pp\n\nThis commit does *not* and should not modify *any* code, it only moves\nit from net.h and splits it across protocol.cpp and protocol.hpp.\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "180fc08aaa1594097d835c7874f478a1d6c4e02d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/180fc08aaa1594097d835c7874f478a1d6c4e02d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33e28c9948336784324cf5c7248ce608b93dbfde",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33e28c9948336784324cf5c7248ce608b93dbfde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33e28c9948336784324cf5c7248ce608b93dbfde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33e28c9948336784324cf5c7248ce608b93dbfde/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "507fd9d15baac950df494742d67bcbafdaa4752c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/507fd9d15baac950df494742d67bcbafdaa4752c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/507fd9d15baac950df494742d67bcbafdaa4752c"
      }
    ],
    "stats": {
      "total": 486,
      "additions": 261,
      "deletions": 225
    },
    "files": [
      {
        "sha": "66f3949b86e15d8f597a1cdbf1d7e5a65bb9b923",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 225,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33e28c9948336784324cf5c7248ce608b93dbfde/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33e28c9948336784324cf5c7248ce608b93dbfde/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=33e28c9948336784324cf5c7248ce608b93dbfde",
        "patch": "@@ -16,7 +16,6 @@\n \n #include \"protocol.h\"\n \n-class CAddress;\n class CAddrDB;\n class CInv;\n class CRequestTracker;\n@@ -29,15 +28,7 @@ extern int nConnectTimeout;\n \n inline unsigned int ReceiveBufferSize() { return 1000*GetArg(\"-maxreceivebuffer\", 10*1000); }\n inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 10*1000); }\n-inline unsigned short GetDefaultPort() { return fTestNet ? 18333 : 8333; }\n static const unsigned int PUBLISH_HOPS = 5;\n-enum\n-{\n-    NODE_NETWORK = (1 << 0),\n-};\n-\n-\n-\n \n bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout=nConnectTimeout);\n bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n@@ -55,222 +46,6 @@ bool BindListenPort(std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n bool StopNode();\n \n-static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n-\n-class CAddress\n-{\n-public:\n-    uint64 nServices;\n-    unsigned char pchReserved[12];\n-    unsigned int ip;\n-    unsigned short port;\n-\n-    // disk and network only\n-    unsigned int nTime;\n-\n-    // memory only\n-    unsigned int nLastTry;\n-\n-    CAddress()\n-    {\n-        Init();\n-    }\n-\n-    CAddress(unsigned int ipIn, unsigned short portIn=0, uint64 nServicesIn=NODE_NETWORK)\n-    {\n-        Init();\n-        ip = ipIn;\n-        port = htons(portIn == 0 ? GetDefaultPort() : portIn);\n-        nServices = nServicesIn;\n-    }\n-\n-    explicit CAddress(const struct sockaddr_in& sockaddr, uint64 nServicesIn=NODE_NETWORK)\n-    {\n-        Init();\n-        ip = sockaddr.sin_addr.s_addr;\n-        port = sockaddr.sin_port;\n-        nServices = nServicesIn;\n-    }\n-\n-    explicit CAddress(const char* pszIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n-    {\n-        Init();\n-        Lookup(pszIn, *this, nServicesIn, fNameLookup, portIn);\n-    }\n-\n-    explicit CAddress(const char* pszIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n-    {\n-        Init();\n-        Lookup(pszIn, *this, nServicesIn, fNameLookup, 0, true);\n-    }\n-\n-    explicit CAddress(std::string strIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n-    {\n-        Init();\n-        Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, portIn);\n-    }\n-\n-    explicit CAddress(std::string strIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n-    {\n-        Init();\n-        Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, 0, true);\n-    }\n-\n-    void Init()\n-    {\n-        nServices = NODE_NETWORK;\n-        memcpy(pchReserved, pchIPv4, sizeof(pchReserved));\n-        ip = INADDR_NONE;\n-        port = htons(GetDefaultPort());\n-        nTime = 100000000;\n-        nLastTry = 0;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        if (fRead)\n-            const_cast<CAddress*>(this)->Init();\n-        if (nType & SER_DISK)\n-            READWRITE(nVersion);\n-        if ((nType & SER_DISK) || (nVersion >= 31402 && !(nType & SER_GETHASH)))\n-            READWRITE(nTime);\n-        READWRITE(nServices);\n-        READWRITE(FLATDATA(pchReserved)); // for IPv6\n-        READWRITE(ip);\n-        READWRITE(port);\n-    )\n-\n-    friend inline bool operator==(const CAddress& a, const CAddress& b)\n-    {\n-        return (memcmp(a.pchReserved, b.pchReserved, sizeof(a.pchReserved)) == 0 &&\n-                a.ip   == b.ip &&\n-                a.port == b.port);\n-    }\n-\n-    friend inline bool operator!=(const CAddress& a, const CAddress& b)\n-    {\n-        return (!(a == b));\n-    }\n-\n-    friend inline bool operator<(const CAddress& a, const CAddress& b)\n-    {\n-        int ret = memcmp(a.pchReserved, b.pchReserved, sizeof(a.pchReserved));\n-        if (ret < 0)\n-            return true;\n-        else if (ret == 0)\n-        {\n-            if (ntohl(a.ip) < ntohl(b.ip))\n-                return true;\n-            else if (a.ip == b.ip)\n-                return ntohs(a.port) < ntohs(b.port);\n-        }\n-        return false;\n-    }\n-\n-    std::vector<unsigned char> GetKey() const\n-    {\n-        CDataStream ss;\n-        ss.reserve(18);\n-        ss << FLATDATA(pchReserved) << ip << port;\n-\n-        #if defined(_MSC_VER) && _MSC_VER < 1300\n-        return std::vector<unsigned char>((unsigned char*)&ss.begin()[0], (unsigned char*)&ss.end()[0]);\n-        #else\n-        return std::vector<unsigned char>(ss.begin(), ss.end());\n-        #endif\n-    }\n-\n-    struct sockaddr_in GetSockAddr() const\n-    {\n-        struct sockaddr_in sockaddr;\n-        memset(&sockaddr, 0, sizeof(sockaddr));\n-        sockaddr.sin_family = AF_INET;\n-        sockaddr.sin_addr.s_addr = ip;\n-        sockaddr.sin_port = port;\n-        return sockaddr;\n-    }\n-\n-    bool IsIPv4() const\n-    {\n-        return (memcmp(pchReserved, pchIPv4, sizeof(pchIPv4)) == 0);\n-    }\n-\n-    bool IsRFC1918() const\n-    {\n-      return IsIPv4() && (GetByte(3) == 10 ||\n-        (GetByte(3) == 192 && GetByte(2) == 168) ||\n-        (GetByte(3) == 172 &&\n-          (GetByte(2) >= 16 && GetByte(2) <= 31)));\n-    }\n-\n-    bool IsRFC3927() const\n-    {\n-      return IsIPv4() && (GetByte(3) == 169 && GetByte(2) == 254);\n-    }\n-\n-    bool IsLocal() const\n-    {\n-      return IsIPv4() && (GetByte(3) == 127 ||\n-          GetByte(3) == 0);\n-    }\n-\n-    bool IsRoutable() const\n-    {\n-        return IsValid() &&\n-            !(IsRFC1918() || IsRFC3927() || IsLocal());\n-    }\n-\n-    bool IsValid() const\n-    {\n-        // Clean up 3-byte shifted addresses caused by garbage in size field\n-        // of addr messages from versions before 0.2.9 checksum.\n-        // Two consecutive addr messages look like this:\n-        // header20 vectorlen3 addr26 addr26 addr26 header20 vectorlen3 addr26 addr26 addr26...\n-        // so if the first length field is garbled, it reads the second batch\n-        // of addr misaligned by 3 bytes.\n-        if (memcmp(pchReserved, pchIPv4+3, sizeof(pchIPv4)-3) == 0)\n-            return false;\n-\n-        return (ip != 0 && ip != INADDR_NONE && port != htons(USHRT_MAX));\n-    }\n-\n-    unsigned char GetByte(int n) const\n-    {\n-        return ((unsigned char*)&ip)[3-n];\n-    }\n-\n-    std::string ToStringIPPort() const\n-    {\n-        return strprintf(\"%u.%u.%u.%u:%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0), ntohs(port));\n-    }\n-\n-    std::string ToStringIP() const\n-    {\n-        return strprintf(\"%u.%u.%u.%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0));\n-    }\n-\n-    std::string ToStringPort() const\n-    {\n-        return strprintf(\"%u\", ntohs(port));\n-    }\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"%u.%u.%u.%u:%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0), ntohs(port));\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"CAddress(%s)\\n\", ToString().c_str());\n-    }\n-};\n-\n-\n-\n-\n-\n-\n-\n enum\n {\n     MSG_TX = 1,"
      },
      {
        "sha": "8d2dbfdd2d76b6de1d45a962686b2879614640d4",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 190,
        "deletions": 0,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33e28c9948336784324cf5c7248ce608b93dbfde/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33e28c9948336784324cf5c7248ce608b93dbfde/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=33e28c9948336784324cf5c7248ce608b93dbfde",
        "patch": "@@ -4,6 +4,17 @@\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"protocol.h\"\n+#include \"util.h\"\n+\n+#ifndef __WXMSW__\n+# include <arpa/inet.h>\n+#endif\n+\n+// Prototypes from net.h, but that header (currently) stinks, can't #include it without breaking things\n+bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n+bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n+\n+static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n \n CMessageHeader::CMessageHeader()\n {\n@@ -59,3 +70,182 @@ bool CMessageHeader::IsValid() const\n \n     return true;\n }\n+\n+CAddress::CAddress()\n+{\n+    Init();\n+}\n+\n+CAddress::CAddress(unsigned int ipIn, unsigned short portIn, uint64 nServicesIn)\n+{\n+    Init();\n+    ip = ipIn;\n+    port = htons(portIn == 0 ? GetDefaultPort() : portIn);\n+    nServices = nServicesIn;\n+}\n+\n+CAddress::CAddress(const struct sockaddr_in& sockaddr, uint64 nServicesIn)\n+{\n+    Init();\n+    ip = sockaddr.sin_addr.s_addr;\n+    port = sockaddr.sin_port;\n+    nServices = nServicesIn;\n+}\n+\n+CAddress::CAddress(const char* pszIn, int portIn, bool fNameLookup, uint64 nServicesIn)\n+{\n+    Init();\n+    Lookup(pszIn, *this, nServicesIn, fNameLookup, portIn);\n+}\n+\n+CAddress::CAddress(const char* pszIn, bool fNameLookup, uint64 nServicesIn)\n+{\n+    Init();\n+    Lookup(pszIn, *this, nServicesIn, fNameLookup, 0, true);\n+}\n+\n+CAddress::CAddress(std::string strIn, int portIn, bool fNameLookup, uint64 nServicesIn)\n+{\n+    Init();\n+    Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, portIn);\n+}\n+\n+CAddress::CAddress(std::string strIn, bool fNameLookup, uint64 nServicesIn)\n+{\n+    Init();\n+    Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, 0, true);\n+}\n+\n+void CAddress::Init()\n+{\n+    nServices = NODE_NETWORK;\n+    memcpy(pchReserved, pchIPv4, sizeof(pchReserved));\n+    ip = INADDR_NONE;\n+    port = htons(GetDefaultPort());\n+    nTime = 100000000;\n+    nLastTry = 0;\n+}\n+\n+bool operator==(const CAddress& a, const CAddress& b)\n+{\n+    return (memcmp(a.pchReserved, b.pchReserved, sizeof(a.pchReserved)) == 0 &&\n+            a.ip   == b.ip &&\n+            a.port == b.port);\n+}\n+\n+bool operator!=(const CAddress& a, const CAddress& b)\n+{\n+    return (!(a == b));\n+}\n+\n+bool operator<(const CAddress& a, const CAddress& b)\n+{\n+    int ret = memcmp(a.pchReserved, b.pchReserved, sizeof(a.pchReserved));\n+    if (ret < 0)\n+        return true;\n+    else if (ret == 0)\n+    {\n+        if (ntohl(a.ip) < ntohl(b.ip))\n+            return true;\n+        else if (a.ip == b.ip)\n+            return ntohs(a.port) < ntohs(b.port);\n+    }\n+    return false;\n+}\n+\n+std::vector<unsigned char> CAddress::GetKey() const\n+{\n+    CDataStream ss;\n+    ss.reserve(18);\n+    ss << FLATDATA(pchReserved) << ip << port;\n+\n+    #if defined(_MSC_VER) && _MSC_VER < 1300\n+    return std::vector<unsigned char>((unsigned char*)&ss.begin()[0], (unsigned char*)&ss.end()[0]);\n+    #else\n+    return std::vector<unsigned char>(ss.begin(), ss.end());\n+    #endif\n+}\n+\n+struct sockaddr_in CAddress::GetSockAddr() const\n+{\n+    struct sockaddr_in sockaddr;\n+    memset(&sockaddr, 0, sizeof(sockaddr));\n+    sockaddr.sin_family = AF_INET;\n+    sockaddr.sin_addr.s_addr = ip;\n+    sockaddr.sin_port = port;\n+    return sockaddr;\n+}\n+\n+bool CAddress::IsIPv4() const\n+{\n+    return (memcmp(pchReserved, pchIPv4, sizeof(pchIPv4)) == 0);\n+}\n+\n+bool CAddress::IsRFC1918() const\n+{\n+  return IsIPv4() && (GetByte(3) == 10 ||\n+    (GetByte(3) == 192 && GetByte(2) == 168) ||\n+    (GetByte(3) == 172 &&\n+      (GetByte(2) >= 16 && GetByte(2) <= 31)));\n+}\n+\n+bool CAddress::IsRFC3927() const\n+{\n+  return IsIPv4() && (GetByte(3) == 169 && GetByte(2) == 254);\n+}\n+\n+bool CAddress::IsLocal() const\n+{\n+  return IsIPv4() && (GetByte(3) == 127 ||\n+      GetByte(3) == 0);\n+}\n+\n+bool CAddress::IsRoutable() const\n+{\n+    return IsValid() &&\n+        !(IsRFC1918() || IsRFC3927() || IsLocal());\n+}\n+\n+bool CAddress::IsValid() const\n+{\n+    // Clean up 3-byte shifted addresses caused by garbage in size field\n+    // of addr messages from versions before 0.2.9 checksum.\n+    // Two consecutive addr messages look like this:\n+    // header20 vectorlen3 addr26 addr26 addr26 header20 vectorlen3 addr26 addr26 addr26...\n+    // so if the first length field is garbled, it reads the second batch\n+    // of addr misaligned by 3 bytes.\n+    if (memcmp(pchReserved, pchIPv4+3, sizeof(pchIPv4)-3) == 0)\n+        return false;\n+\n+    return (ip != 0 && ip != INADDR_NONE && port != htons(USHRT_MAX));\n+}\n+\n+unsigned char CAddress::GetByte(int n) const\n+{\n+    return ((unsigned char*)&ip)[3-n];\n+}\n+\n+std::string CAddress::ToStringIPPort() const\n+{\n+    return strprintf(\"%u.%u.%u.%u:%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0), ntohs(port));\n+}\n+\n+std::string CAddress::ToStringIP() const\n+{\n+    return strprintf(\"%u.%u.%u.%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0));\n+}\n+\n+std::string CAddress::ToStringPort() const\n+{\n+    return strprintf(\"%u\", ntohs(port));\n+}\n+\n+std::string CAddress::ToString() const\n+{\n+    return strprintf(\"%u.%u.%u.%u:%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0), ntohs(port));\n+}\n+\n+void CAddress::print() const\n+{\n+    printf(\"CAddress(%s)\\n\", ToString().c_str());\n+}"
      },
      {
        "sha": "009f67dfa148ca912234fbfc7c9752201be1b113",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33e28c9948336784324cf5c7248ce608b93dbfde/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33e28c9948336784324cf5c7248ce608b93dbfde/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=33e28c9948336784324cf5c7248ce608b93dbfde",
        "patch": "@@ -13,6 +13,12 @@\n #include \"serialize.h\"\n #include <string>\n \n+extern bool fTestNet;\n+static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)\n+{\n+    return testnet ? 18333 : 8333;\n+}\n+\n //\n // Message header\n //  (4) message start\n@@ -49,4 +55,69 @@ class CMessageHeader\n         unsigned int nChecksum;\n };\n \n+enum\n+{\n+    NODE_NETWORK = (1 << 0),\n+};\n+\n+class CAddress\n+{\n+    public:\n+        CAddress();\n+        CAddress(unsigned int ipIn, unsigned short portIn=0, uint64 nServicesIn=NODE_NETWORK);\n+        explicit CAddress(const struct sockaddr_in& sockaddr, uint64 nServicesIn=NODE_NETWORK);\n+        explicit CAddress(const char* pszIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n+        explicit CAddress(const char* pszIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n+        explicit CAddress(std::string strIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n+        explicit CAddress(std::string strIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK);\n+\n+        void Init();\n+\n+        IMPLEMENT_SERIALIZE\n+            (\n+             if (fRead)\n+             const_cast<CAddress*>(this)->Init();\n+             if (nType & SER_DISK)\n+             READWRITE(nVersion);\n+             if ((nType & SER_DISK) || (nVersion >= 31402 && !(nType & SER_GETHASH)))\n+             READWRITE(nTime);\n+             READWRITE(nServices);\n+             READWRITE(FLATDATA(pchReserved)); // for IPv6\n+             READWRITE(ip);\n+             READWRITE(port);\n+            )\n+\n+        friend bool operator==(const CAddress& a, const CAddress& b);\n+        friend bool operator!=(const CAddress& a, const CAddress& b);\n+        friend bool operator<(const CAddress& a, const CAddress& b);\n+\n+        std::vector<unsigned char> GetKey() const;\n+        struct sockaddr_in GetSockAddr() const;\n+        bool IsIPv4() const;\n+        bool IsRFC1918() const;\n+        bool IsRFC3927() const;\n+        bool IsLocal() const;\n+        bool IsRoutable() const;\n+        bool IsValid() const;\n+        unsigned char GetByte(int n) const;\n+        std::string ToStringIPPort() const;\n+        std::string ToStringIP() const;\n+        std::string ToStringPort() const;\n+        std::string ToString() const;\n+        void print() const;\n+\n+    // TODO: make private (improves encapsulation)\n+    public:\n+        uint64 nServices;\n+        unsigned char pchReserved[12];\n+        unsigned int ip;\n+        unsigned short port;\n+\n+        // disk and network only\n+        unsigned int nTime;\n+\n+        // memory only\n+        unsigned int nLastTry;\n+};\n+\n #endif // __INCLUDED_PROTOCOL_H__"
      }
    ]
  },
  {
    "sha": "e4dde849ae5544383703ef2d73592677e6c528ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGRkZTg0OWFlNTU0NDM4MzcwM2VmMmQ3MzU5MjY3N2U2YzUyOGFk",
    "commit": {
      "author": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-11T16:49:03Z"
      },
      "committer": {
        "name": "Giel van Schijndel",
        "email": "me@mortis.eu",
        "date": "2011-08-19T05:24:38Z"
      },
      "message": "Move CInv to protocol.[ch]pp\n\nThis commit does *not* and should not modify *any* code, it only moves\nit from net.h and splits it across protocol.cpp and protocol.hpp.\n\nSigned-off-by: Giel van Schijndel <me@mortis.eu>",
      "tree": {
        "sha": "5b50a12a27206ddd5c949d1aaed41382a912f5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b50a12a27206ddd5c949d1aaed41382a912f5e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4dde849ae5544383703ef2d73592677e6c528ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4dde849ae5544383703ef2d73592677e6c528ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4dde849ae5544383703ef2d73592677e6c528ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4dde849ae5544383703ef2d73592677e6c528ad/comments",
    "author": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "muggenhor",
      "id": 484066,
      "node_id": "MDQ6VXNlcjQ4NDA2Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/484066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muggenhor",
      "html_url": "https://github.com/muggenhor",
      "followers_url": "https://api.github.com/users/muggenhor/followers",
      "following_url": "https://api.github.com/users/muggenhor/following{/other_user}",
      "gists_url": "https://api.github.com/users/muggenhor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muggenhor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muggenhor/subscriptions",
      "organizations_url": "https://api.github.com/users/muggenhor/orgs",
      "repos_url": "https://api.github.com/users/muggenhor/repos",
      "events_url": "https://api.github.com/users/muggenhor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muggenhor/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33e28c9948336784324cf5c7248ce608b93dbfde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33e28c9948336784324cf5c7248ce608b93dbfde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33e28c9948336784324cf5c7248ce608b93dbfde"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 88,
      "deletions": 80
    },
    "files": [
      {
        "sha": "efac1f452a8d769fddab71f94b5009447f7dcf43",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 80,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4dde849ae5544383703ef2d73592677e6c528ad/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4dde849ae5544383703ef2d73592677e6c528ad/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e4dde849ae5544383703ef2d73592677e6c528ad",
        "patch": "@@ -17,7 +17,6 @@\n #include \"protocol.h\"\n \n class CAddrDB;\n-class CInv;\n class CRequestTracker;\n class CNode;\n class CBlockIndex;\n@@ -52,85 +51,6 @@ enum\n     MSG_BLOCK,\n };\n \n-static const char* ppszTypeName[] =\n-{\n-    \"ERROR\",\n-    \"tx\",\n-    \"block\",\n-};\n-\n-class CInv\n-{\n-public:\n-    int type;\n-    uint256 hash;\n-\n-    CInv()\n-    {\n-        type = 0;\n-        hash = 0;\n-    }\n-\n-    CInv(int typeIn, const uint256& hashIn)\n-    {\n-        type = typeIn;\n-        hash = hashIn;\n-    }\n-\n-    CInv(const std::string& strType, const uint256& hashIn)\n-    {\n-        int i;\n-        for (i = 1; i < ARRAYLEN(ppszTypeName); i++)\n-        {\n-            if (strType == ppszTypeName[i])\n-            {\n-                type = i;\n-                break;\n-            }\n-        }\n-        if (i == ARRAYLEN(ppszTypeName))\n-            throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType.c_str()));\n-        hash = hashIn;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        READWRITE(type);\n-        READWRITE(hash);\n-    )\n-\n-    friend inline bool operator<(const CInv& a, const CInv& b)\n-    {\n-        return (a.type < b.type || (a.type == b.type && a.hash < b.hash));\n-    }\n-\n-    bool IsKnownType() const\n-    {\n-        return (type >= 1 && type < ARRAYLEN(ppszTypeName));\n-    }\n-\n-    const char* GetCommand() const\n-    {\n-        if (!IsKnownType())\n-            throw std::out_of_range(strprintf(\"CInv::GetCommand() : type=%d unknown type\", type));\n-        return ppszTypeName[type];\n-    }\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n-    }\n-\n-    void print() const\n-    {\n-        printf(\"CInv(%s)\\n\", ToString().c_str());\n-    }\n-};\n-\n-\n-\n-\n-\n class CRequestTracker\n {\n public:"
      },
      {
        "sha": "48784b9cfb2f7a9d9a1c36a74e3aec1bbfda3810",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4dde849ae5544383703ef2d73592677e6c528ad/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4dde849ae5544383703ef2d73592677e6c528ad/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=e4dde849ae5544383703ef2d73592677e6c528ad",
        "patch": "@@ -15,6 +15,12 @@ bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, in\n bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n+static const char* ppszTypeName[] =\n+{\n+    \"ERROR\",\n+    \"tx\",\n+    \"block\",\n+};\n \n CMessageHeader::CMessageHeader()\n {\n@@ -249,3 +255,58 @@ void CAddress::print() const\n {\n     printf(\"CAddress(%s)\\n\", ToString().c_str());\n }\n+\n+CInv::CInv()\n+{\n+    type = 0;\n+    hash = 0;\n+}\n+\n+CInv::CInv(int typeIn, const uint256& hashIn)\n+{\n+    type = typeIn;\n+    hash = hashIn;\n+}\n+\n+CInv::CInv(const std::string& strType, const uint256& hashIn)\n+{\n+    int i;\n+    for (i = 1; i < ARRAYLEN(ppszTypeName); i++)\n+    {\n+        if (strType == ppszTypeName[i])\n+        {\n+            type = i;\n+            break;\n+        }\n+    }\n+    if (i == ARRAYLEN(ppszTypeName))\n+        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType.c_str()));\n+    hash = hashIn;\n+}\n+\n+bool operator<(const CInv& a, const CInv& b)\n+{\n+    return (a.type < b.type || (a.type == b.type && a.hash < b.hash));\n+}\n+\n+bool CInv::IsKnownType() const\n+{\n+    return (type >= 1 && type < ARRAYLEN(ppszTypeName));\n+}\n+\n+const char* CInv::GetCommand() const\n+{\n+    if (!IsKnownType())\n+        throw std::out_of_range(strprintf(\"CInv::GetCommand() : type=%d unknown type\", type));\n+    return ppszTypeName[type];\n+}\n+\n+std::string CInv::ToString() const\n+{\n+    return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n+}\n+\n+void CInv::print() const\n+{\n+    printf(\"CInv(%s)\\n\", ToString().c_str());\n+}"
      },
      {
        "sha": "53d3eef4d57af8dcc12821c91bbe6ba6604bb9ac",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4dde849ae5544383703ef2d73592677e6c528ad/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4dde849ae5544383703ef2d73592677e6c528ad/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=e4dde849ae5544383703ef2d73592677e6c528ad",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"serialize.h\"\n #include <string>\n+#include \"uint256.h\"\n \n extern bool fTestNet;\n static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)\n@@ -120,4 +121,30 @@ class CAddress\n         unsigned int nLastTry;\n };\n \n+class CInv\n+{\n+    public:\n+        CInv();\n+        CInv(int typeIn, const uint256& hashIn);\n+        CInv(const std::string& strType, const uint256& hashIn);\n+\n+        IMPLEMENT_SERIALIZE\n+        (\n+            READWRITE(type);\n+            READWRITE(hash);\n+        )\n+\n+        friend bool operator<(const CInv& a, const CInv& b);\n+\n+        bool IsKnownType() const;\n+        const char* GetCommand() const;\n+        std::string ToString() const;\n+        void print() const;\n+\n+    // TODO: make private (improves encapsulation)\n+    public:\n+        int type;\n+        uint256 hash;\n+};\n+\n #endif // __INCLUDED_PROTOCOL_H__"
      }
    ]
  }
]