MarcoFalke,2016-03-17T16:35:15Z,"@laanwj raised the concern that it should be mentioned in the release notes, but I would be really surprised if anyone was [relying](https://xkcd.com/1172/) on this behavior.\n\nCurrent master fails the unit test (see travis):\n\n``` cpp\ntest/amount_tests.cpp(23): error: check feeRate.GetFee(0) == 0 has failed [1000 != 0]\ntest/amount_tests.cpp(32): error: check feeRate.GetFee(0) == 0 has failed ",https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-197963411,197963411,
laanwj,2016-03-17T16:35:38Z,"I'd like some more details here, you left the opening post empty!\n\nWhat do you mean with ""make GetFee() monotonic"", and what purpose does this have (from a user perspective)?\n",https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-197963625,197963625,
MarcoFalke,2016-03-17T17:02:39Z,"> What do you mean with ""make GetFee() monotonic"",\n\nThe current behavior of the code is `CFeeRate(1000).GetFee(0) == 1000` and `CFeeRate(123).GetFee(8) == 123`, which is obviously wrong. This was introduced in d88af56 (#4465).\n\n> monotonic\n\nPlease have a look at the following sketches:\n\n`master`:\n![screenshot from 2016-03-17 17-53-24](https://cloud.githubusercontent.com/assets/6399679/138",https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-197975106,197975106,
laanwj,2016-03-17T17:15:18Z,"Thanks for the plots, that makes things a lot more clear. That outlier around 0 clearly looks wrong.\nYes, this change makes sense.\n\nutACK\n",https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-197980380,197980380,
jonasschnelli,2016-03-18T07:12:49Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-198234324,198234324,
morcos,2016-03-19T20:14:35Z,@MarcoFalke thanks.\n\nutACK fad13b1\n,https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-198778669,198778669,
jtimon,2016-03-21T16:17:56Z,"Somehow I missed this. Even if it's kind of meaningless now, ""posthumous utACK"".\n\nI'll test this now by rebasing https://github.com/bitcoin/bitcoin/compare/master...jtimon:0.12.99-feerate and repeating the rpc tests locally. I still don't know them all that well, does it make sense for me to run the all the rpc tests with the -extended label for anything that could be affected by changes in CFee",https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-199362441,199362441,
laanwj,2016-03-21T16:44:10Z,"> Somehow I missed this. Even if it's kind of meaningless now, ""posthumous utACK"".\n\nNo, it's not meaningless. Reviewing commits that are merged is also essential.\n",https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-199372022,199372022,
MarcoFalke,2016-03-21T16:46:24Z,> repeating the rpc tests locally\n\nI can't think of any way your results should be different by rebasing onto this pull. This only has an effect if the size and/or fee rate is really small.\n,https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-199372642,199372642,
jtimon,2016-03-21T20:01:31Z,"> I can't think of ...\n\nWell, I can think of them. That doesn't mean they make sense, see #7731\n",https://github.com/bitcoin/bitcoin/pull/7705#issuecomment-199450288,199450288,
MarcoFalke,2016-03-17T17:06:23Z,"Ideally this code should be removed entirely, but I don't see that happening soon taking into account the limited effect and the substantial amount of refactoring in wallet code.\n",https://github.com/bitcoin/bitcoin/pull/7705#discussion_r56540240,56540240,src/amount.cpp
morcos,2016-03-18T20:11:04Z,"I don't understand the `!= 0` here.  Why would you turn a small negative fee rate into a small positive one?\n@sdaftuar can comment on the vagaries of negative CFeeRates, they are already fraught with peril, but they can exist at least via `prioritisetransaction`.  I think it would be much safer to keep this as `> 0`.\n",https://github.com/bitcoin/bitcoin/pull/7705#discussion_r56715214,56715214,src/amount.cpp
MarcoFalke,2016-03-19T11:02:22Z,"Thanks, I didn't know negative rates exist.\n\n~~Added tests for negative rates in another commit.~~\n",https://github.com/bitcoin/bitcoin/pull/7705#discussion_r56747634,56747634,src/amount.cpp
MarcoFalke,2016-03-19T11:41:53Z,"@morcos Actually, I don't think we support negative amounts for `nSatoshisPerK` right now. 64-bit platforms will convert `nSatoshisPerK` to `unsiged` (`size_t`). 32-bit platforms will convert `nSize` to signed `CAmount`.\n",https://github.com/bitcoin/bitcoin/pull/7705#discussion_r56748019,56748019,src/amount.cpp
morcos,2016-03-19T13:12:56Z,"TBH, I'm not sure exactly what happens.  Although I thought nSatoshiPerK was a CAmount which is an int64_t.  I'm not sure it's meant to support negative rates, but at some point we need to either make sure they are supported or prevent against them.  All I'm suggesting is that right now we don't change any edge case behavior around negative amounts, b/c its already fragile.\n",https://github.com/bitcoin/bitcoin/pull/7705#discussion_r56748922,56748922,src/amount.cpp
MarcoFalke,2016-03-19T14:43:16Z,> at some point we need to either make sure they are supported or prevent against them\n\nI think we agree on this but I'd rather not do it as part of this pull. \n,https://github.com/bitcoin/bitcoin/pull/7705#discussion_r56749911,56749911,src/amount.cpp
jtimon,2016-03-21T16:25:25Z,"Now the special case is less special, but, yes, is still a special case, so thank you for documenting it.\n",https://github.com/bitcoin/bitcoin/pull/7705#discussion_r56851706,56851706,src/test/amount_tests.cpp
