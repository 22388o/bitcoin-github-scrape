[
  {
    "sha": "caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWEzZDQyZjA2ODliZDk0NWM1YjU0NGZlMGViZTJjYTI1YWNkMTgw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T19:08:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:42Z"
      },
      "message": "Bugfix: RPC: blockchain: Display correct defaults in help for verifychain method",
      "tree": {
        "sha": "e98cc84329cb652691461d349051139174ecfb0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e98cc84329cb652691461d349051139174ecfb0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da894ab5da222ad317039eb008ec6443fb9113d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da894ab5da222ad317039eb008ec6443fb9113d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da894ab5da222ad317039eb008ec6443fb9113d9"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "68aacf073c1ffb7cea78a15930b29178ddf59625",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "patch": "@@ -307,8 +307,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n-    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n-    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3));\n+    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n+    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -1273,9 +1273,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n-                if (fHavePruned && GetArg(\"-checkblocks\", 288) > MIN_BLOCKS_TO_KEEP) {\n+                if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\",\n-                        MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", 288));\n+                        MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS));\n                 }\n \n                 {\n@@ -1289,8 +1289,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n-                              GetArg(\"-checkblocks\", 288))) {\n+                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                              GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n                 }"
      },
      {
        "sha": "7fe004c3a14baaf3359e6e4bdf7fee7237ca13b3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "patch": "@@ -123,6 +123,9 @@ extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n \n+static const signed int DEFAULT_CHECKBLOCKS = MIN_BLOCKS_TO_KEEP;\n+static const unsigned int DEFAULT_CHECKLEVEL = 3;\n+\n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n // Add 15% for Undo data = 331MB"
      },
      {
        "sha": "58f49f9f562b99db4458692bd0e44fa747d623ff",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "patch": "@@ -539,13 +539,15 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n \n UniValue verifychain(const UniValue& params, bool fHelp)\n {\n+    int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n+    int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.\\n\"\n-            \"2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.\\n\"\n+            \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n+            \"2. numblocks    (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false       (boolean) Verified or not\\n\"\n             \"\\nExamples:\\n\"\n@@ -555,8 +557,6 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    int nCheckLevel = GetArg(\"-checklevel\", 3);\n-    int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n         nCheckLevel = params[0].get_int();\n     if (params.size() > 1)"
      }
    ]
  },
  {
    "sha": "420a82f1ae2f56938ea935fbdbb60e47685684c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjBhODJmMWFlMmY1NjkzOGVhOTM1ZmJkYmI2MGU0NzY4NTY4NGM3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T23:15:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:42Z"
      },
      "message": "Bugfix: Describe dblogsize option correctly (it refers to the wallet database, not memory pool)",
      "tree": {
        "sha": "da4cc0037c4e545cf3720a3ea5933313721d8780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da4cc0037c4e545cf3720a3ea5933313721d8780"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/420a82f1ae2f56938ea935fbdbb60e47685684c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caa3d42f0689bd945c5b544fe0ebe2ca25acd180"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "13a82739cc1f5a2ebaefaf741e352d6995d0ae19",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "patch": "@@ -404,7 +404,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\", 100));\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");"
      },
      {
        "sha": "cf6122813c059a36973eeb8872ac7f45a24ff768",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "patch": "@@ -293,7 +293,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()"
      },
      {
        "sha": "46bc0ac0a9f25992199931a3802ae3749ea1db9c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "patch": "@@ -20,6 +20,8 @@\n \n #include <db_cxx.h>\n \n+static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+\n extern unsigned int nWalletDBUpdated;\n \n class CDBEnv"
      }
    ]
  },
  {
    "sha": "5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjkyNjBmNDU4NDNlNWIwZTFmNDE1NmFmMGY3YjZkNmMyZDkzYTc2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T23:48:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:42Z"
      },
      "message": "Bugfix: If genproclimit is omitted to RPC setgenerate, don't change it; also show correct default in getmininginfo",
      "tree": {
        "sha": "786c434f05ee26a808a7a79783c0c79c6c753ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/786c434f05ee26a808a7a79783c0c79c6c753ab9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/420a82f1ae2f56938ea935fbdbb60e47685684c7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "80af1fbfd25020c3774ea6c60b26e5b04a197552",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "patch": "@@ -422,7 +422,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -1558,7 +1558,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), Params());\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "ad1320481887bbffa050865c40c7e4c3da902189",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "patch": "@@ -17,6 +17,8 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n+static const int DEFAULT_GENERATE_THREADS = 1;\n+\n struct CBlockTemplate\n {\n     CBlock block;"
      },
      {
        "sha": "f42b31627c46f7fe85450070ce1029610e422d8b",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "patch": "@@ -211,7 +211,7 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n     if (params.size() > 0)\n         fGenerate = params[0].get_bool();\n \n-    int nGenProcLimit = -1;\n+    int nGenProcLimit = GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS);\n     if (params.size() > 1)\n     {\n         nGenProcLimit = params[1].get_int();\n@@ -259,7 +259,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n+    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));"
      }
    ]
  },
  {
    "sha": "d93613adeae2cc97c646d2c00d74f547b51b759a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTM2MTNhZGVhZTJjYzk3YzY0NmQyYzAwZDc0ZjU0N2I1MWI3NTlh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T19:21:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:42Z"
      },
      "message": "Constrain constant values to a single location in code",
      "tree": {
        "sha": "7b0653e0864d2f76739faeea1b62148842268fe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b0653e0864d2f76739faeea1b62148842268fe2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d93613adeae2cc97c646d2c00d74f547b51b759a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93613adeae2cc97c646d2c00d74f547b51b759a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d93613adeae2cc97c646d2c00d74f547b51b759a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93613adeae2cc97c646d2c00d74f547b51b759a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 141,
      "deletions": 96
    },
    "files": [
      {
        "sha": "8d91109248e5175d23c8a103967dc0ffdd226675",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -22,20 +22,21 @@\n \n using namespace std;\n \n+static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n \n std::string HelpMessageCli()\n {\n     string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n     strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n                                              \"solved instantly. This is intended for regression testing tools and app development.\"));\n-    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n@@ -141,7 +142,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n \n UniValue CallRPC(const string& strMethod, const UniValue& params)\n {\n-    std::string host = GetArg(\"-rpcconnect\", \"127.0.0.1\");\n+    std::string host = GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT);\n     int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n \n     // Create event base"
      },
      {
        "sha": "d64d54c32e1ccd04cc69dacb9238862565e379df",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -71,24 +71,25 @@ const CBaseChainParams& BaseParams()\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network)\n-{\n+CBaseChainParams &BaseParams(CBaseChainParams::Network network) {\n     switch (network) {\n-    case CBaseChainParams::MAIN:\n-        pCurrentBaseParams = &mainParams;\n-        break;\n-    case CBaseChainParams::TESTNET:\n-        pCurrentBaseParams = &testNetParams;\n-        break;\n-    case CBaseChainParams::REGTEST:\n-        pCurrentBaseParams = &regTestParams;\n-        break;\n-    default:\n-        assert(false && \"Unimplemented network\");\n-        return;\n+        case CBaseChainParams::MAIN:\n+            return mainParams;\n+        case CBaseChainParams::TESTNET:\n+            return testNetParams;\n+        case CBaseChainParams::REGTEST:\n+            return regTestParams;\n+        default:\n+            assert(false && \"Unimplemented network\");\n+            return mainParams;\n     }\n }\n \n+void SelectBaseParams(CBaseChainParams::Network network)\n+{\n+    pCurrentBaseParams = &BaseParams(network);\n+}\n+\n CBaseChainParams::Network NetworkIdFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);"
      },
      {
        "sha": "d65e14e73b81b1cf02b0916466e412553fd76b7b",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -39,6 +39,8 @@ class CBaseChainParams\n  */\n const CBaseChainParams& BaseParams();\n \n+CBaseChainParams &BaseParams(CBaseChainParams::Network);\n+\n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "3e76b18a2b04c8bd5323fed15b4f0d955ecc7063",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 52,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -24,6 +24,7 @@\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n+#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"scheduler.h\"\n #include \"txdb.h\"\n@@ -64,6 +65,10 @@ using namespace std;\n CWallet* pwalletMain = NULL;\n #endif\n bool fFeeEstimatesInitialized = false;\n+static const bool DEFAULT_PROXYRANDOMIZE = true;\n+static const bool DEFAULT_REST_ENABLE = false;\n+static const bool DEFAULT_SAFEMODE = true;\n+static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -291,7 +296,7 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n     string strWarning = GetWarnings(\"rpc\");\n-    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", false) &&\n+    if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", !DEFAULT_SAFEMODE) &&\n         !cmd.okSafeMode)\n         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n }\n@@ -309,7 +314,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n     strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n #ifndef WIN32\n@@ -323,7 +328,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), BITCOIN_PID_FILENAME));\n #endif\n     strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n@@ -332,29 +337,29 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n \n     strUsage += HelpMessageGroup(_(\"Connection options:\"));\n     strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", strprintf(_(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\"), fNameLookup));\n     strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n     strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), fIsBareMultisigStd));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n     strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n #ifdef USE_UPNP\n@@ -371,22 +376,22 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n             CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), fSendFreeTransactions));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), bSpendZeroConfChange));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(maxTxFee)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n-    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -403,14 +408,14 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", fCheckpointsEnabled));\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n-        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", !DEFAULT_SAFEMODE));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n-        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n         strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n@@ -421,24 +426,24 @@ std::string HelpMessage(HelpMessageMode mode)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), DEFAULT_GENERATE));\n     strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), fLogIPs));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), fLogTimestamps));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", 15));\n-        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", DEFAULT_LIMITFREERELAY));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", DEFAULT_RELAYPRIORITY));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", DEFAULT_MAXSIGCACHESIZE));\n     }\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n-        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n             \"This is intended for regression testing tools and app development.\");\n     }\n@@ -448,23 +453,23 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), fAcceptDatacarrier));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), DEFAULT_BLOCK_MIN_SIZE));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", strprintf(\"Override block version to test forking scenarios (default: %d)\", (int)CBlock::CURRENT_VERSION));\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n     strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n     if (showDebug) {\n@@ -476,13 +481,13 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageGroup(_(\"UI Options:\"));\n         if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", \"Allow self signed root certificates (default: 0)\");\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n         }\n-        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(_(\"Choose data directory on startup (default: %u)\"), DEFAULT_CHOOSE_DATADIR));\n         strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n         }\n@@ -619,7 +624,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         }\n     }\n \n-    if (GetBoolArg(\"-stopafterblockimport\", false)) {\n+    if (GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n     }\n@@ -652,7 +657,7 @@ bool AppInitServers(boost::thread_group& threadGroup)\n         return false;\n     if (!StartHTTPRPC())\n         return false;\n-    if (GetBoolArg(\"-rest\", false) && !StartREST())\n+    if (GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n         return false;\n     if (!StartHTTPServer(threadGroup))\n         return false;\n@@ -725,8 +730,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Set this early so that parameter interactions go to console\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n-    fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n-    fLogIPs = GetBoolArg(\"-logips\", false);\n+    fLogTimestamps = GetBoolArg(\"-logtimestamps\", fLogTimestamps);\n+    fLogIPs = GetBoolArg(\"-logips\", fLogIPs);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n@@ -791,7 +796,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n-        if (GetBoolArg(\"-txindex\", false))\n+        if (GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n #ifdef ENABLE_WALLET\n         if (GetBoolArg(\"-rescan\", false)) {\n@@ -839,7 +844,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Checkmempool and checkblockindex default to true in regtest mode\n     mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks()));\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n+    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", fCheckpointsEnabled);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n@@ -931,13 +936,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", bSpendZeroConfChange);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", fSendFreeTransactions);\n \n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n+    fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", fIsBareMultisigStd);\n+    fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", fAcceptDatacarrier);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     fAlerts = GetBoolArg(\"-alerts\", DEFAULT_ALERTS);\n@@ -1082,7 +1088,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", true);\n+    bool proxyRandomize = GetBoolArg(\"-proxyrandomize\", DEFAULT_PROXYRANDOMIZE);\n     // -proxy sets a proxy for all outgoing network traffic\n     // -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default\n     std::string proxyArg = GetArg(\"-proxy\", \"\");\n@@ -1117,7 +1123,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // see Step 2: parameter interactions for more information about these\n     fListen = GetBoolArg(\"-listen\", DEFAULT_LISTEN);\n     fDiscover = GetBoolArg(\"-discover\", true);\n-    fNameLookup = GetBoolArg(\"-dns\", true);\n+    fNameLookup = GetBoolArg(\"-dns\", fNameLookup);\n \n     bool fBound = false;\n     if (fListen) {\n@@ -1204,7 +1210,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greated than nMaxDbcache\n     int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n@@ -1260,7 +1266,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // Check for changed -txindex state\n-                if (fTxIndex != GetBoolArg(\"-txindex\", false)) {\n+                if (fTxIndex != GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n                     strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n                     break;\n                 }\n@@ -1487,7 +1493,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n             }\n         }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n+        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n     } // (!fDisableWallet)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n@@ -1558,7 +1564,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), Params());\n+    GenerateBitcoins(GetBoolArg(\"-gen\", DEFAULT_GENERATE), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), Params());\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "7166e85a5f5338ba200b1c27d931522d015811e7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -889,7 +889,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                 strprintf(\"%d < %d\", nFees, txMinFee));\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n@@ -910,7 +910,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             nLastTime = nNow;\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1207,7 +1207,7 @@ void Misbehaving(NodeId pnode, int howmuch)\n         return;\n \n     state->nMisbehavior += howmuch;\n-    int banscore = GetArg(\"-banscore\", 100);\n+    int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrintf(\"%s: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n@@ -3316,7 +3316,7 @@ bool InitBlockIndex() {\n         return true;\n \n     // Use the provided setting for -txindex in the new database\n-    fTxIndex = GetBoolArg(\"-txindex\", false);\n+    fTxIndex = GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n     pblocktree->WriteFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"Initializing databases...\\n\");\n \n@@ -3651,7 +3651,7 @@ std::string GetWarnings(const std::string& strFor)\n     if (!CLIENT_VERSION_IS_RELEASE)\n         strStatusBar = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n \n-    if (GetBoolArg(\"-testsafemode\", false))\n+    if (GetBoolArg(\"-testsafemode\", DEFAULT_TESTSAFEMODE))\n         strStatusBar = strRPC = \"testsafemode enabled\";\n \n     // Misc warnings like out of disk space and clock is wrong"
      },
      {
        "sha": "ed099255d84beb788bb7ed550b3d34988ad75435",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -79,6 +79,13 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n+static const bool DEFAULT_RELAYPRIORITY = true;\n+\n+static const bool DEFAULT_TXINDEX = false;\n+static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n+\n+static const bool DEFAULT_TESTSAFEMODE = false;\n \n struct BlockHasher\n {"
      },
      {
        "sha": "0c0156521bdf58096c0e671858d2db78d70201d2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -153,7 +153,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n         map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", false);\n+        bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n \n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;"
      },
      {
        "sha": "5ab73e6f374a3ea6b02bf1e2a73a7107c837aa21",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -17,8 +17,11 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n+static const bool DEFAULT_GENERATE = false;\n static const int DEFAULT_GENERATE_THREADS = 1;\n \n+static const bool DEFAULT_PRINTPRIORITY = false;\n+\n struct CBlockTemplate\n {\n     CBlock block;"
      },
      {
        "sha": "47f5983d329df05cde71c31d16d35194c876aeed",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -506,12 +506,11 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n     {\n-        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n+        bantimeoffset = GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME);\n         sinceUnixEpoch = false;\n     }\n     banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n \n-\n     LOCK(cs_setBanned);\n     if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n         setBanned[subNet] = banEntry;\n@@ -1389,7 +1388,7 @@ void ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n     if ((addrman.size() > 0) &&\n-        (!GetBoolArg(\"-forcednsseed\", false))) {\n+        (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         MilliSleep(11 * 1000);\n \n         LOCK(cs_vNodes);\n@@ -2221,8 +2220,8 @@ bool CAddrDB::Read(CAddrMan& addr)\n     return true;\n }\n \n-unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n-unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n+unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n+unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),"
      },
      {
        "sha": "eeed7177f9bbee82ab4e5fade9565da70ee29c04",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -61,6 +61,13 @@ static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n /** The maximum number of peer connections to maintain. */\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n \n+static const bool DEFAULT_FORCEDNSSEED = false;\n+static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n+static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n+\n+// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n+static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+\n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n "
      },
      {
        "sha": "e8b714d868ae3748c5f3f9ece08f4af31251ec47",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -40,7 +40,7 @@ static proxyType proxyInfo[NET_MAX];\n static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n-bool fNameLookup = false;\n+bool fNameLookup = true;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n "
      },
      {
        "sha": "46c7f18942540781e2d3e8d00770385dddff1862",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -50,7 +50,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n         if (m < 1 || m > n)\n             return false;\n     } else if (whichType == TX_NULL_DATA &&\n-               (!GetBoolArg(\"-datacarrier\", true) || scriptPubKey.size() > nMaxDatacarrierBytes))\n+               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n \n     return whichType != TX_NONSTANDARD;"
      },
      {
        "sha": "9836cc75a985d3477818c2afa3b9f8ac5ac28d00",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -648,7 +648,7 @@ int main(int argc, char *argv[])\n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);\n \n-    if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n+    if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n     try"
      },
      {
        "sha": "ab63e98d40970ad8e00323ece9b146d390e8b160",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -162,7 +162,7 @@ void Intro::pickDataDirectory()\n     /* 2) Allow QSettings to override default dir */\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n-    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", false))\n+    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR))\n     {\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;"
      },
      {
        "sha": "1f54c62b6ee454834e858ce18d9c91a22949c05f",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -145,7 +145,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             int error = X509_STORE_CTX_get_error(store_ctx);\n             // For testing payment requests, we allow self signed root certs!\n             // This option is just shown in the UI options, if -help-debug is enabled.\n-            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", false))) {\n+            if (!(error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT && GetBoolArg(\"-allowselfsignedrootcertificates\", DEFAULT_SELFSIGNED_ROOTCERTS))) {\n                 throw SSLVerifyError(X509_verify_cert_error_string(error));\n             } else {\n                qDebug() << \"PaymentRequestPlus::getMerchant: Allowing self signed root certificate, because -allowselfsignedrootcertificates is true.\";"
      },
      {
        "sha": "e9aef64eb150c8c9db335f1ac4b1ca2e8a0a6e92",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -99,7 +99,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getgenerate\\n\"\n             \"\\nReturn if the server is set to generate coins or not. The default is false.\\n\"\n-            \"It is set with the command line argument -gen (or bitcoin.conf setting gen)\\n\"\n+            \"It is set with the command line argument -gen (or \" + std::string(BITCOIN_CONF_FILENAME) + \" setting gen)\\n\"\n             \"It can also be set with the setgenerate call.\\n\"\n             \"\\nResult\\n\"\n             \"true|false      (boolean) If the server is set to generate coins or not\\n\"\n@@ -109,7 +109,7 @@ UniValue getgenerate(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    return GetBoolArg(\"-gen\", false);\n+    return GetBoolArg(\"-gen\", DEFAULT_GENERATE);\n }\n \n UniValue generate(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "8efe8edd8aa5f3b8b23d7a865345e939e9cd8f99",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -47,7 +47,7 @@ class CSignatureCache\n         // (~200 bytes per cache entry times 50,000 entries)\n         // Since there are a maximum of 20,000 signature operations per block\n         // 50,000 is a reasonable default.\n-        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n+        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAXSIGCACHESIZE);\n         if (nMaxCacheSize <= 0) return;\n \n         boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);"
      },
      {
        "sha": "fd4bc9b23ad54211cf02efa11cb77cdc3dca8f84",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -10,6 +10,8 @@\n \n #include <vector>\n \n+static const int64_t DEFAULT_MAXSIGCACHESIZE = 50000;\n+\n class CPubKey;\n \n class CachingTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "60cf7ae49d5754bac34539cd8865617c6c3931c1",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -16,6 +16,7 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n+bool fAcceptDatacarrier = true;\n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}"
      },
      {
        "sha": "140306861affc7998e196021ba2b61502e30378a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -26,6 +26,7 @@ class CScriptID : public uint160\n };\n \n static const unsigned int MAX_OP_RETURN_RELAY = 83; //! bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n+extern bool fAcceptDatacarrier;\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "485f8ba622d459dc09f746f20d8d39f8d7950dea",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -99,6 +99,9 @@ namespace boost {\n \n using namespace std;\n \n+const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n+const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+\n map<string, string> mapArgs;\n map<string, vector<string> > mapMultiArgs;\n bool fDebug = false;\n@@ -107,7 +110,7 @@ bool fPrintToDebugLog = true;\n bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n-bool fLogTimestamps = false;\n+bool fLogTimestamps = true;\n bool fLogIPs = false;\n volatile bool fReopenDebugLog = false;\n CTranslationInterface translationInterface;\n@@ -515,7 +518,7 @@ void ClearDatadirCache()\n \n boost::filesystem::path GetConfigFile()\n {\n-    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n+    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n@@ -549,7 +552,7 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n #ifndef WIN32\n boost::filesystem::path GetPidFile()\n {\n-    boost::filesystem::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n+    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }"
      },
      {
        "sha": "743eec751ea78da05892a3099daad08ecce71a75",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -48,6 +48,13 @@ extern bool fLogIPs;\n extern volatile bool fReopenDebugLog;\n extern CTranslationInterface translationInterface;\n \n+extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_PID_FILENAME;\n+\n+static const bool DEFAULT_SELFSIGNED_ROOTCERTS = false;\n+static const bool DEFAULT_CHOOSE_DATADIR = false;\n+static const bool DEFAULT_SPLASHSCREEN = true;\n+\n /**\n  * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n  * If no translation slot is registered, nothing is returned, and simply return the input."
      },
      {
        "sha": "4b9dbebddd5eac4434bc0dc446699dceab770989",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -85,7 +85,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n-    if (GetBoolArg(\"-privdb\", true))\n+    if (GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n     dbenv->set_lg_dir(pathLogDir.string().c_str());"
      },
      {
        "sha": "7f58d03f08c3a7368aa54ae7c6cb165f1e805a98",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -21,6 +21,7 @@\n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+static const bool DEFAULT_WALLET_PRIVDB = true;\n \n extern unsigned int nWalletDBUpdated;\n "
      },
      {
        "sha": "49b9a193a7e64c27d89ca0bacb3f1de505099465",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -2270,7 +2270,7 @@ bool CWallet::NewKeyPool()\n         if (IsLocked())\n             return false;\n \n-        int64_t nKeys = max(GetArg(\"-keypool\", 100), (int64_t)0);\n+        int64_t nKeys = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n         for (int i = 0; i < nKeys; i++)\n         {\n             int64_t nIndex = i+1;\n@@ -2297,7 +2297,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = max(GetArg(\"-keypool\", 100), (int64_t) 0);\n+            nTargetSize = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         while (setKeyPool.size() < (nTargetSize + 1))\n         {"
      },
      {
        "sha": "acfc435ac9aba0486b0bb19e36b466cd1fd29baa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -37,6 +37,7 @@ extern bool bSpendZeroConfChange;\n extern bool fSendFreeTransactions;\n extern bool fPayAtLeastCustomFee;\n \n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n@@ -49,6 +50,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWarning;\n //! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n+static const bool DEFAULT_WALLETBROADCAST = true;\n \n class CAccountingEntry;\n class CBlockIndex;"
      },
      {
        "sha": "8ece2379d2bb35aa839e7f25e3f8cb11a6e24c2e",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -799,7 +799,7 @@ void ThreadFlushWalletDB(const string& strFile)\n     if (fOneThread)\n         return;\n     fOneThread = true;\n-    if (!GetBoolArg(\"-flushwallet\", true))\n+    if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n         return;\n \n     unsigned int nLastSeen = nWalletDBUpdated;"
      },
      {
        "sha": "c0236e0a5e828df2c55f1ed5119b50a33b9e1f6b",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93613adeae2cc97c646d2c00d74f547b51b759a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d93613adeae2cc97c646d2c00d74f547b51b759a",
        "patch": "@@ -16,6 +16,8 @@\n #include <utility>\n #include <vector>\n \n+static const bool DEFAULT_FLUSHWALLET = true;\n+\n class CAccount;\n class CAccountingEntry;\n struct CBlockLocator;"
      }
    ]
  },
  {
    "sha": "851b6e016fea0e793b5edff22ece1db6b7459658",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTFiNmUwMTZmZWEwZTc5M2I1ZWRmZjIyZWNlMWRiNmI3NDU5NjU4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-07-01T04:29:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:43Z"
      },
      "message": "Bugfix: Omit wallet-related options from -help when wallet is not supported",
      "tree": {
        "sha": "87e9237391265ae5377e537c1f81b35fed8808d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87e9237391265ae5377e537c1f81b35fed8808d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/851b6e016fea0e793b5edff22ece1db6b7459658",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851b6e016fea0e793b5edff22ece1db6b7459658",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/851b6e016fea0e793b5edff22ece1db6b7459658",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851b6e016fea0e793b5edff22ece1db6b7459658/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d93613adeae2cc97c646d2c00d74f547b51b759a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93613adeae2cc97c646d2c00d74f547b51b759a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d93613adeae2cc97c646d2c00d74f547b51b759a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "00d8e08762ccfd772546974bb20630c892435d96",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/851b6e016fea0e793b5edff22ece1db6b7459658/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/851b6e016fea0e793b5edff22ece1db6b7459658/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=851b6e016fea0e793b5edff22ece1db6b7459658",
        "patch": "@@ -409,12 +409,16 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", fCheckpointsEnabled));\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n+#endif\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", !DEFAULT_SAFEMODE));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n+#endif\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n         strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n@@ -443,7 +447,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n+#endif\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n             \"This is intended for regression testing tools and app development.\");\n     }"
      }
    ]
  },
  {
    "sha": "29266b64e8d17baee18d42a93a8f1a790ad858ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTI2NmI2NGU4ZDE3YmFlZTE4ZDQyYTkzYThmMWE3OTBhZDg1OGNh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T22:48:40Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:43Z"
      },
      "message": "Bugfix: Default -uiplatform is not actually the platform this build was compiled on\n\nAlso hides the option for non-GUI builds.",
      "tree": {
        "sha": "98cd78425ce8435a6dfb6b18d47bb74e79fe1764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98cd78425ce8435a6dfb6b18d47bb74e79fe1764"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29266b64e8d17baee18d42a93a8f1a790ad858ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29266b64e8d17baee18d42a93a8f1a790ad858ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29266b64e8d17baee18d42a93a8f1a790ad858ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29266b64e8d17baee18d42a93a8f1a790ad858ca/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "851b6e016fea0e793b5edff22ece1db6b7459658",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851b6e016fea0e793b5edff22ece1db6b7459658",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/851b6e016fea0e793b5edff22ece1db6b7459658"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "adc6d1f1c417dcadcc59952709457de9000bfd91",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29266b64e8d17baee18d42a93a8f1a790ad858ca/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29266b64e8d17baee18d42a93a8f1a790ad858ca/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=29266b64e8d17baee18d42a93a8f1a790ad858ca",
        "patch": "@@ -494,8 +494,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n         strUsage += HelpMessageOpt(\"-splash\", strprintf(_(\"Show splash screen on startup (default: %u)\"), DEFAULT_SPLASHSCREEN));\n-        if (showDebug) {\n-            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+        if (showDebug && !uiInterface.DefaultUIPlatform.empty()) {\n+            strUsage += HelpMessageOpt(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", uiInterface.DefaultUIPlatform));\n         }\n     }\n "
      },
      {
        "sha": "4e4c3a647079409c6cc193060cf56c2b660f089a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29266b64e8d17baee18d42a93a8f1a790ad858ca/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29266b64e8d17baee18d42a93a8f1a790ad858ca/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=29266b64e8d17baee18d42a93a8f1a790ad858ca",
        "patch": "@@ -309,14 +309,8 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     // UI per-platform customization\n     // This must be done inside the BitcoinApplication constructor, or after it, because\n     // PlatformStyle::instantiate requires a QApplication\n-#if defined(Q_OS_MAC)\n-    std::string platformName = \"macosx\";\n-#elif defined(Q_OS_WIN)\n-    std::string platformName = \"windows\";\n-#else\n-    std::string platformName = \"other\";\n-#endif\n-    platformName = GetArg(\"-uiplatform\", platformName);\n+    std::string platformName;\n+    platformName = GetArg(\"-uiplatform\", uiInterface.DefaultUIPlatform);\n     platformStyle = PlatformStyle::instantiate(QString::fromStdString(platformName));\n     if (!platformStyle) // Fall back to \"other\" if specified name not found\n         platformStyle = PlatformStyle::instantiate(\"other\");\n@@ -509,6 +503,16 @@ int main(int argc, char *argv[])\n {\n     SetupEnvironment();\n \n+    uiInterface.DefaultUIPlatform =\n+#if defined(Q_OS_MAC)\n+        \"macosx\"\n+#elif defined(Q_OS_WIN)\n+        \"windows\"\n+#else\n+        \"other\"\n+#endif\n+        ;\n+\n     /// 1. Parse command-line options. These take precedence over anything else.\n     // Command-line options take precedence:\n     ParseParameters(argc, argv);"
      },
      {
        "sha": "a5cf68d11b22f2cd2a3c67e5bf4ea3cb0d64a0a1",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29266b64e8d17baee18d42a93a8f1a790ad858ca/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29266b64e8d17baee18d42a93a8f1a790ad858ca/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=29266b64e8d17baee18d42a93a8f1a790ad858ca",
        "patch": "@@ -98,6 +98,9 @@ class CClientUIInterface\n \n     /** Banlist did change. */\n     boost::signals2::signal<void (void)> BannedListChanged;\n+\n+    /** Default UI interface */\n+    std::string DefaultUIPlatform;\n };\n \n extern CClientUIInterface uiInterface;"
      }
    ]
  }
]