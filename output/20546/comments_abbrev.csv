DrahtBot,2020-12-02 15:58:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21302 (wallet: createwallet examples for descriptor wallets by S3RK)\n* #20892 (tests: Run both descriptor and legacy tes",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-737322770,737322770,
MarcoFalke,2020-12-02 16:19:24,the error message and error code should be the same when an invalid BTC/kb amount is rejected,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-737336814,737336814,
MarcoFalke,2020-12-02 16:22:42,Concept ACK ,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-737338817,737338817,
jonatack,2020-12-02 16:42:43,"> the error message and error code should be the same when an invalid BTC/kb amount is rejected\n\nThe other ""too-low"" fee messages I am aware of are:\n\nAmount out of range\nFee rate (%s) is lower than the minimum fee rate setting\ntxfee cannot be less than min relay tx fee\ntxfee cannot be less than wallet min fee\nInvalid amount\nInvalid amount for -paytxfee=<amount>: '%s' (must be at ",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-737352141,737352141,
MarcoFalke,2020-12-02 16:45:58,It would be confusing if 0.00000001 and 0.000000001 produced different error messages,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-737354096,737354096,
jonatack,2020-12-02 20:52:28,"fee_rate=0.000000001\n```\nerror code: -3\nerror message:\nInvalid amount\n```\n...which is not a great error message, as it indicates neither which argument is invalid, nor why. How about:\n\nfee_rate=0.00000001\n```\nerror code: -3\nerror message:\nInvalid amount for fee_rate (must be at least 0.001 sat/vB)\n```\n\nThis is close to these similar error messages:\n\nInvalid amount",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-737488369,737488369,
jonatack,2020-12-03 17:00:04,"Just found a bug in RPC send. It only allows fee rates to be passed as a number, not as a string. Fixing with a commit here since it fits with the changes. Edit: fixed in #20573 (merged).",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-738139238,738139238,
MarcoFalke,2020-12-03 17:38:15,"> ...which is not a great error message, as it indicates neither which argument is invalid, nor why.\n\nThen the error message should be fixed. But that is an issue that can be solve completely separate. It shouldn't be a reason to make the behaviour inconsistent.",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-738168517,738168517,
jonatack,2020-12-04 12:28:37,"> > ...which is not a great error message, as it indicates neither which argument is invalid, nor why.\n> \n> Then the error message should be fixed. But that is an issue that can be solve completely separate. It shouldn't be a reason to make the behaviour inconsistent.\n\nDone. Fixing the rpc send bug and improving the AmountFromValue error messages in separate pulls.",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-738757772,738757772,
jonatack,2020-12-05 12:10:59,"The bug fix is that the response is consistent, though I agree it somewhat less user friendly. I have a follow-up that improves the error responses here and in AmountFromValue.",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-739242928,739242928,
jonatack,2020-12-05 13:27:57,I wonder if this check shouldn't be in AmountFromValue and apply to fundrawtransaction and walletcreatefundedpsbt as well.ÔøºÔøº,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-739251112,739251112,
jonatack,2020-12-05 13:29:59,E.g. zero is ok for those but between zero and 0.001 sat/vB is invalid.,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-739251362,739251362,
MarcoFalke,2020-12-05 13:49:11,"the check should be in AmountFromValue. My issue is purely about parsing decimals, not about specific rpcs.\n\nTo clarify, I might be misunderstanding what you fix here, but approach NACK if this is a fix for the parsing issue I created.",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-739253473,739253473,
jonatack,2020-12-06 19:59:31,"Pulled in the `CFeeRate::FromSatB` and `CFeeRate::FromBtcKb` named constructors from the setfeerate PR, added a `CFeeRate::IsZero()` class member helper, and used these to build a `FeeRateFromValueInSatB()` utility function. Added unit test coverage for each of these. This should handle the case of parsing decimals for fee rates constructed from sat/vB UniValue values.",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-739554863,739554863,
jonatack,2020-12-07 14:58:23,rebased,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-739970803,739970803,
jonatack,2020-12-10 20:11:05,"Updated now that #20573 has been merged.\n",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-742768770,742768770,
jonatack,2021-01-14 11:12:42,"Re-opening for review club to hopefully get some eyes here.\n",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-760129376,760129376,
jonatack,2021-01-15 12:30:50,"Suggest the following labels be added, please: `TX fees and policy`, `Refactoring`, `Review club`",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-760914983,760914983,
jonatack,2021-01-15 16:41:41,Thanks @fanquake ,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-761050539,761050539,
jonatack,2021-01-20 12:01:59,"> It would seem like we could do with some sort of fee rate specific functional test, as we are getting to the point where basically all wallet RPC related functional tests are having (essentially) the same blocks copied and pasted between all of them. This seems like an awful lot of duplication, where code easily get out of ""sync"", for not much additional coverage.\n\nWell, only six (sendtoaddr",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-763557396,763557396,
theStack,2021-01-20 23:16:58,"Concept ACK!\nUnfortunately I missed the [review club for this PR](https://bitcoincore.reviews/20546) today, but went over the logs and it was a very interesting read.\n\nSome thoughts:\n* agree with [fanquake's suggestion](https://github.com/bitcoin/bitcoin/pull/20546/commits/d2b40010fab5a1ef7f6d946da076d4de6b442e09#r560606792) that commits https://github.com/bitcoin/bitcoin/pull/20546/commit",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-764016917,764016917,
jonatack,2021-01-22 21:00:52,"The first commit now applies the named ctor `CFeeRate::FromBtcKb` to two additional calls in `wallet/wallet.cpp` where it can replace the two-parameter (fee, 1000) ctor. \n\n> do we still need the two-parameter ctor `CFeeRate(const CAmount& nFeePaid, size_t nBytes)` to be public? all instances I see are either in test code or can be replaced by the named constructors now, so I guess there is not",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-765681556,765681556,
jonatack,2021-01-22 21:10:56,Squashed a bunch of commits from 12 down to 7. Hopefully this is more pleasing to reviewers while remaining easy to review.,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-765686085,765686085,
jonatack,2021-01-26 16:33:15,"Thanks for reviewing @fjahr, updated with your feedback per `git diff 1fc25a4 236f556`",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-767665398,767665398,
fjahr,2021-01-26 22:36:20,Code review ACK 236f556708fb619167b72cca451d0048a9274646,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-767872921,767872921,
MarcoFalke,2021-01-27 07:43:40,(changed title because the only behaviour changes are in the wallet and this is not a refactor),https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-768100297,768100297,
jonatack,2021-01-27 11:27:09,"> This PR fixes the behavior shown in #20534\n> \n> **Master:** Not representable, should through `error code: -3`\n> \n> ```\n> ./src/bitcoin-cli -regtest -named sendtoaddress address=<addr> amount=1.23 fee_rate=0.0009\n> \n> error code: -6\n> error message:\n> Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\n> ```\n> \n> **PR:** throws `error code: -",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-768221818,768221818,
jonatack,2021-01-27 11:55:44,"> NACK 236f556\n\nCan you explain why?\n",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-768236137,768236137,
MarcoFalke,2021-01-27 13:24:31,"> > NACK [236f556](https://github.com/bitcoin/bitcoin/commit/236f556708fb619167b72cca451d0048a9274646)\n> \n> Can you explain why?\n\nbecause it doesn't fix the bug. See:\n\n```\n$ ./src/bitcoin-cli -named sendtoaddress address=bcrt1qwkmhqum095zau5rf2velq55cq938vrd7uw8m4r amount=1.23 fee_rate=31.999999999999999999999\nerror code: -3\nerror message:\nInvalid amount\n$ ./src/bitcoin-cli -",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-768282869,768282869,
jonatack,2021-01-27 13:46:06,"Ah, thanks for explaining. I thought that comment was referring to the commit.",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-768295481,768295481,
DrahtBot,2021-04-05 14:50:09,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-813434301,813434301,
jonatack,2021-04-27 15:39:12,"> > Can you explain why?\n> \n> because it doesn't fix the bug. See:\n> ```\n> $ ./src/bitcoin-cli -named sendtoaddress address=bcrt1qwkmhqum095zau5rf2velq55cq938vrd7uw8m4r amount=1.23 fee_rate=31.99999999\n> ac1ee7d06c8a276a148bf2378539c957bba643ba343f102779d618d5c95b9049\n> ```\n\nThis patch fixes the issue described in #20534 ""values smaller than 0.001 sat/B can't be represented by CFee",https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-827707338,827707338,
jonatack,2021-04-27 15:56:11,Closing for now in favor of #21786.,https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-827719646,827719646,
jonatack,2020-12-04 12:33:05,"Am testing CFeeRate errors separately from AmountFromValue errors, as a follow-up PR will improve the messages of both.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r536067105,536067105,test/functional/wallet_basic.py
fjahr,2020-12-05 11:33:23,"In b70a0e1b3bdb3aff4f3b41dc7a0bd6e52d67e6af:\n\nThis is C++ code internals referenced in the functional test comments. IMO that doesn't belong here since it's basically unmaintainable and I don't think we do this anywhere else. Unless there is a really strong reason I am not seeing, please remove it. IMO the test with the log message above is explanatory enough.\n\nSame for all the other place",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r536699356,536699356,test/functional/rpc_fundrawtransaction.py
jonatack,2020-12-05 12:16:29,"We do refer to the implementation sometimes, perhaps most often when defining constants. \n\nThis is to document why these values are tested separately for the same message. I have a follow-up to improve these messages in different ways, e.g. not just ""Invalid amount"" but also provide context to the user about which field and in some cases the valid range or values. Could remove the documentation ",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r536719700,536719700,test/functional/rpc_fundrawtransaction.py
jonatack,2020-12-07 12:05:29,"Note to self: update this line after #20573 is merged and `send` can take string fee rate values\n```suggestion\n        for zero_value in [0, 0.000, 0.00000000, ""0"", ""0.000"", ""0.00000000""]:\n```",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r537455026,537455026,test/functional/wallet_send.py
jonatack,2020-12-07 12:06:37,"Note to self: update this line as well after #20573 is merged\n```suggestion\n        for invalid_value in ["""", 0.000000001, 1.111111111, 11111111111]:\n```",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r537455711,537455711,test/functional/wallet_send.py
jonatack,2020-12-10 19:08:55,updated,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r540426017,540426017,test/functional/wallet_send.py
jonatack,2020-12-10 19:09:04,updated,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r540426078,540426078,test/functional/wallet_send.py
fanquake,2021-01-20 01:02:31,"54dcf5ab2e25f6eacf8955ab18a0cd92ef165a4e: Is there anything special about `11111111111` that wont be caught by one of the existing `AmountFromValue` tests? Looks like it's just a big number. Same for `1e-9`, which is tested above.\n\nNot sure about the value of comments like `values rejected by ParseFixedPoint raise invalid amount`. What's useful about naming the function called internally by `A",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560603365,560603365,src/test/rpc_tests.cpp
fanquake,2021-01-20 01:12:25,"In d2b40010fab5a1ef7f6d946da076d4de6b442e09: This is simple enough that you can combine e4a3bceef3d9483961c1f0a2f70b6a4e9a225acd and ed414f6dd72c103b5ba9e17c6b6bd2bcc8548b5b into it. Otherwise we are starting to get very granular commits.\n\nIt's also inconsistent with other changes in this PR, as in 85e0fe3f783ebaabbf9b27e0b452ba8073905db5 you add the `FromSatB` & `FromBtcKb` constructors and r",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560606792,560606792,src/policy/feerate.h
fanquake,2021-01-20 01:30:47,"3df75585cc2595ff3d1065e6fdaa4e9df8716594:\n\n> [Am testing CFeeRate errors separately from AmountFromValue errors, as a follow-up PR will improve the messages of both.](https://github.com/bitcoin/bitcoin/pull/20546/commits/3df75585cc2595ff3d1065e6fdaa4e9df8716594#r536067105)\n\nI think it'd be better to add the additional tests when the different error messages are added. Otherwise at the mome",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560613154,560613154,test/functional/wallet_basic.py
fanquake,2021-01-20 01:40:46,"d7c2399f3e23ce54d27f8ef26077e58324b991d8: I must be misunderstanding this, otherwise it looks like it just does the same thing twice. i.e:\n```python\nnode.fundrawtransaction(fee_rate: 0.00000001) -> throw(""Invalid amount"")\nnode.fundrawtransaction(fee_rate: 0.00099999) -> throw(""Invalid amount"")\nnode.fundrawtransaction(fee_rate: 0.00000001) -> throw(""Invalid amount"")\nnode.fundrawtransactio",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560616468,560616468,test/functional/rpc_fundrawtransaction.py
fanquake,2021-01-20 02:16:33,"How far do we want to reach with these tests. This is basically ""testing"" that `FeeRateFromValueInSatB()` calls `AmountFromValue()` calls `ParseFixedPoint()` & `throw`s. Which is the same as:\n```cpp\nBOOST_CHECK_THROW(AmountFromValue(ValueFromString(""0.000000001"")), UniValue);\n```\nabove, with an additional function call to get to `throw`.\n\nHowever, because nothing specific is being chec",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560628056,560628056,src/test/rpc_tests.cpp
jonatack,2021-01-20 11:07:40,"Fee rates should be accepted as an amount, e.g. a string or a number, as documented in the sendtoaddress, sendmany, fundrawtransaction, walletcreatefundedpsbt, send, and bumpfee helps. Adding this testing found the bug in #20573.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560876606,560876606,test/functional/rpc_fundrawtransaction.py
fanquake,2021-01-20 11:32:24,"If this is just to test that both amount and string fee rates are accepted, isn't that also tested by either\n```python\nfor param, zero_value in product([""fee_rate"", ""feeRate""], [0, 0.000, 0.00000000, ""0"", ""0.000"", ""0.00000000""]):\n```\nor\n```python\nfor invalid_value in ["""", 0.000000001, 1.111111111, 11111111111]:\n```\n\n(both added above) which use a mix of strings and numbers? Or th",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560891095,560891095,test/functional/rpc_fundrawtransaction.py
jonatack,2021-01-20 11:33:42,"I think all the coverage is relevant? The documentation is helpful to me when coming back to this months later (like now) to regain context. When I'm done with the fee rate work, I'm happy to remove the documentation.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560891825,560891825,test/functional/wallet_basic.py
jonatack,2021-01-20 11:37:52,Relooking at it in light of your thoughts here.,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560894048,560894048,src/test/rpc_tests.cpp
jonatack,2021-01-20 11:47:41,"I think they are testing different cases/codepaths, as documented, reverifying (I'm grateful for the documentation in picking up the context again nearly two months later.)",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560899511,560899511,test/functional/rpc_fundrawtransaction.py
jonatack,2021-01-20 13:37:20,"I reverified that:\n\n- the ""Test fee_rate values non-representable by CFeeRate"" section verifies the exception raised in the new `FeeRateFromValueInSatB()` function (one can test this by changing the error message that function returns)\n- the ""Test fee_rate values rejected by ParseFixedPoint"" section verifies the rejection by `ParseFixedPoint()` in `AmountFromValue()`\n \nI'd like these cas",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r560964468,560964468,test/functional/rpc_fundrawtransaction.py
jonatack,2021-01-22 20:50:20,Dropped these assertions and comments.,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r562903395,562903395,src/test/rpc_tests.cpp
jonatack,2021-01-22 20:51:40,"Combined the `CFeeRate::IsZero()` creation, unit tests, and codebase updates into a single commit.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r562903962,562903962,src/policy/feerate.h
jonatack,2021-01-22 20:53:08,"Idem for the named ctors and for the `FeeRateFromValueInSatB` utility function: creation, unit tests, and codebase updates all in a single commit.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r562904697,562904697,src/policy/feerate.h
jonatack,2021-01-22 20:54:23,"Changed the comments in this commit to not name the specific function: ""Test fee_rate values that don't pass fixed-point parsing checks"".",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r562905300,562905300,test/functional/wallet_basic.py
jonatack,2021-01-22 20:56:16,Dropped these unit tests and comments and combined the tests into the same commit as the function creation and the codebase updates.,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r562906186,562906186,src/test/rpc_tests.cpp
fjahr,2021-01-25 23:57:18,"in afba3e188fcb14236324a0d1355445a99b85d155:\n\nWhy not just have the body of the ctor in the class?",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564123092,564123092,src/policy/feerate.h
fjahr,2021-01-26 00:15:01,"in b427ce178592283b9211b9fbd19874c7349bfd7e:\n\nnit: I would have stuck these `IsZero()` tests in one place below since they are testing the function and not the ctor.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564129105,564129105,src/test/amount_tests.cpp
fjahr,2021-01-26 00:20:50,"in afba3e188fcb14236324a0d1355445a99b85d155:\n\nAren't we already testing somewhere that `CFeeRate(-1) == CFeeRate(-1, 1000)`? Then I think we could save one of those and some other similar lines following.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564131145,564131145,src/test/amount_tests.cpp
jonatack,2021-01-26 15:26:59,"Here is a better explanation than I could provide: https://isocpp.org/wiki/faq/ctors#named-ctor-idiom by Stroustrup, Cline, Sutter and Alexandrescu. This is an implementation of that idiom.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564599507,564599507,src/policy/feerate.h
jonatack,2021-01-26 15:40:13,done,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564610287,564610287,src/test/amount_tests.cpp
jonatack,2021-01-26 16:31:12,Dropped that line and three other ones from this test.,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564652634,564652634,src/test/amount_tests.cpp
fjahr,2021-01-26 22:35:38,"I did understand the idiom, the point I was trying to make that this should be functionally equivalent but just a bit simpler:\n\n```\n@ src/policy/feerate.h:43 @ public:\n         // We've previously had bugs creep in from silent double->int conversion...\n         static_assert(std::is_integral<I>::value, ""CFeeRate should be used without floats"");\n     }\n-    static CFeeRate FromSatB(CA",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564881274,564881274,src/policy/feerate.h
jonatack,2021-01-26 22:52:52,Oh! I'll look into it.,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r564889801,564889801,src/policy/feerate.h
MarcoFalke,2021-01-27 08:00:21,"in commit 83fb6101f0768e8f540e187caa2679c9f0b98c20: CAmount can't represent floats. This would be a compile error, if you didn't use a c-style-narrowing-cast",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565097257,565097257,src/test/amount_tests.cpp
MarcoFalke,2021-01-27 08:03:35,"8885b724eaaba5ce610521d0ee00ce29a16310cc: Whether a feerate is representable or not has nothing to do with 0\n\n9.99999999999999999999999999999 isn't representable and also isn't zero",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565098880,565098880,src/rpc/util.cpp
MarcoFalke,2021-01-27 08:05:14,"You need to fix this in `AmountFromValue`, as I pointed out earlier: https://github.com/bitcoin/bitcoin/pull/20546#issuecomment-739253473",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565099676,565099676,src/rpc/util.cpp
MarcoFalke,2021-01-27 08:07:11,"For reference:\n\n```\ntest/amount_tests.cpp:123:44: error: type 'double' cannot be narrowed to 'CAmount' (aka 'long') in initializer list [-Wc++11-narrowing]\n    BOOST_CHECK(CFeeRate::FromSatB(CAmount{0.000}).IsZero());\n                                           ^~~~~\n```",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565100754,565100754,src/test/amount_tests.cpp
jonatack,2021-01-27 11:30:49,"Can you explain how and why this needs to be in `AmountFromValue`? Do we pass in an `is_sat_b_fee_rate` bool to it, so it has context? Is that an improvement over a dedicated function? I feel like I'm failing to read your mind on this since a couple months now.",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565235588,565235588,src/rpc/util.cpp
jonatack,2021-01-27 12:08:37,changed to 0,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565257521,565257521,src/test/amount_tests.cpp
jonatack,2021-01-27 12:09:11,dropped the comment,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565257893,565257893,src/rpc/util.cpp
MarcoFalke,2021-01-27 12:13:48,"`AmountFromValue` parses the string and fails if the amount is not representable, thus any check about representability should be in `AmountFromValue`.\n\nbtc/kb are representable when there are at most 8 digits. sat/b are representable when there are at most 3 digits. How you pass in the digits shouldn't matter. Can be done as normal argument or template argument (and function alias, if this ma",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565260456,565260456,src/rpc/util.cpp
MarcoFalke,2021-01-27 13:25:53,"I also prefer what @fjahr suggested, assuming it compiles",https://github.com/bitcoin/bitcoin/pull/20546#discussion_r565305128,565305128,src/policy/feerate.h
jonatack,2021-04-27 15:31:17,Thanks @fjahr. Your suggestion works; will use it if named constructors are needed in the future. Currently trying a different approach to this issue.,https://github.com/bitcoin/bitcoin/pull/20546#discussion_r621327293,621327293,src/policy/feerate.h
