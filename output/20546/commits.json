[
  {
    "sha": "6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTgxMTE4YjVlNmMxMmY0M2IyYWM0Zjk3ZjZiZmFkOTdlNmE4MDUz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-06T17:35:51Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-26T16:16:24Z"
      },
      "message": "policy: create CFeeRate::FromSatB/FromBtcKb named ctors",
      "tree": {
        "sha": "395f635adb8169b42263652bf5eb0cccce7a075c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/395f635adb8169b42263652bf5eb0cccce7a075c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmAQQF8ACgkQT1chs9Dj\nkh1J7g//YisuaW3qB3r5vbRorn8TLnYQehsy20iPMjliOQQwtO9NQu0pYAikFEN3\n5l7Ac5/p4FzHyyAiw8hzHWWYYdto1v+HDmh1uzdA/Ib1fR1aUA6/nMslyAMsjuY7\nAc4vHgYPSxb2AFluTBveiiFBrloSgkhCtMSfhhqJ1I3XsR4uXaWT6rvBoAhSOnhM\nb+OsrOCcWRNeNvd3dd1ApX4tg+cZOyjpKNmuezvg4b4/7MY2gNmXTqavecBxGCvm\nhVeCcSKfOEFiwP47tAnLo/hHzDvpGyp7cX0VucfmXSCiWg1to2mKWbPYGRyJjLm6\nSLYG3yvpLE8Jk9ZVOSC3UVjIqJmDRM1nYBJ+dwyX1VTjFb2MN7lDpOLrBnZ6eBQg\n3FJMn8KnOAKYe5B33E8zqF4mgxZvlJCE1VwYTwnGilQX3tS2HiLW79dz+4RtnCZV\nAOJVijS7BuPYiBpTXsCd/Ke02DUkaJUV+6vPTjLHGUiDrDb4Hycwcc8ZFfzY+rlp\nfR0lLZ8+VHJCS1FSiaEIKbyo+M9p5rnWJ7bp1lfWONhtfakpWjfPmCgFSWI/ncyQ\nY/OMivvnshdt/51tYeZwZAGcxylVbaHqQKsaZ1RzxAR680UlTFIoNgBvCbchjeZM\nJjJlFT86903NShUKC3fSFcRmzOezjg4FEnm5xUTDwb62H68T9iY=\n=57oC\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIE0j3ZFrMcQOaDW2YxQfuQDHMAP2udlPhbWOG4Sb5wxUCP/wEACpx7m3e2NI\n/tG5iL+W7uMI8QRgEEBi8AgvL1mgDL5yGgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEGaaMcmgRn/CBSselZw2\ncZgI8QRgEEBh8Ah7pPfPFMPGJQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEKSllEZF17nCU8mcOweHm1oI8SA2ic7S8HiELbTC\nEpZzrY25D9MEZ1Kqntp4IIL0VHFAygjxBGAQQGHwCLFX/Jzgbf/xAIPf4w0u+QyO\nLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nELZKAQCf+J+yJDFTVKHitgcI8QRgEEBh8AhUMV1StmrV9gCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 395f635adb8169b42263652bf5eb0cccce7a075c\nparent 1811e488d53b82825e3523f6f0cdb97f635f03a7\nauthor Jon Atack <jon@atack.com> 1607276151 +0100\ncommitter Jon Atack <jon@atack.com> 1611677784 +0100\n\npolicy: create CFeeRate::FromSatB/FromBtcKb named ctors\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1811e488d53b82825e3523f6f0cdb97f635f03a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1811e488d53b82825e3523f6f0cdb97f635f03a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1811e488d53b82825e3523f6f0cdb97f635f03a7"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 40,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c9ee94a215c57ba76dbef6dbc8e60ff60aa7d77e",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
        "patch": "@@ -39,6 +39,8 @@ class CFeeRate\n         // We've previously had bugs creep in from silent double->int conversion...\n         static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\n     }\n+    static CFeeRate FromSatB(CAmount fee_rate);\n+    static CFeeRate FromBtcKb(CAmount fee_rate);\n     /** Constructor for a fee rate in satoshis per kvB (sat/kvB). The size in bytes must not exceed (2^63 - 1).\n      *\n      *  Passing an nBytes value of COIN (1e8) returns a fee rate in satoshis per vB (sat/vB),\n@@ -70,4 +72,10 @@ class CFeeRate\n     SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.nSatoshisPerK); }\n };\n \n+/** Construct a CFeeRate from a CAmount in sat/vB */\n+inline CFeeRate CFeeRate::FromSatB(CAmount fee_rate) { return CFeeRate(fee_rate, COIN); }\n+\n+/** Construct a CFeeRate from a CAmount in BTC/kvB */\n+inline CFeeRate CFeeRate::FromBtcKb(CAmount fee_rate) { return CFeeRate(fee_rate, 1000); }\n+\n #endif //  BITCOIN_POLICY_FEERATE_H"
      },
      {
        "sha": "21e378c5326fbc3bd1625ebc8de85879eeb838c9",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
        "patch": "@@ -67,8 +67,12 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     feeRate = CFeeRate(1000);\n     altFeeRate = CFeeRate(feeRate);\n     BOOST_CHECK_EQUAL(feeRate.GetFee(100), altFeeRate.GetFee(100));\n+}\n \n-    // Check full constructor\n+BOOST_AUTO_TEST_CASE(CFeeRateConstructorTest)\n+{\n+    // Test CFeeRate(CAmount fee_rate, size_t bytes) constructor\n+    // full constructor\n     BOOST_CHECK(CFeeRate(CAmount(-1), 0) == CFeeRate(0));\n     BOOST_CHECK(CFeeRate(CAmount(0), 0) == CFeeRate(0));\n     BOOST_CHECK(CFeeRate(CAmount(1), 0) == CFeeRate(0));\n@@ -86,6 +90,27 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     CFeeRate(MAX_MONEY, std::numeric_limits<size_t>::max() >> 1).GetFeePerK();\n }\n \n+BOOST_AUTO_TEST_CASE(CFeeRateNamedConstructorsTest)\n+{\n+    // Test CFeerate(CAmount fee_rate, FeeEstimatemode mode) constructor\n+    // with BTC/kvB, returns same values as CFeeRate(amount) or CFeeRate(amount, 1000)\n+    BOOST_CHECK(CFeeRate::FromBtcKb(CAmount(-1)) == CFeeRate(-1));\n+    BOOST_CHECK(CFeeRate::FromBtcKb(CAmount(0)) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate::FromBtcKb(CAmount(1)) == CFeeRate(1, 1000));\n+    BOOST_CHECK(CFeeRate::FromBtcKb(CAmount(26)) == CFeeRate(26));\n+    BOOST_CHECK(CFeeRate::FromBtcKb(CAmount(123)) == CFeeRate(123, 1000));\n+    // with sat/vB, returns values that are 1e5 smaller\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(-100000)) == CFeeRate(-1));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(-99999)) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(0)) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(99999)) == CFeeRate(0));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(100000)) == CFeeRate(1));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(100001)) == CFeeRate(1));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(2690000)) == CFeeRate(26));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(123456789)) == CFeeRate(1234));\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(123456789)) == CFeeRate(1234, 1000));\n+}\n+\n BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\n {\n     CFeeRate a, b;"
      },
      {
        "sha": "447cc5a9c1fb9235fd13aa8c66ad8096105d4e97",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
        "patch": "@@ -216,7 +216,7 @@ static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const Un\n         if (!estimate_mode.isNull() && estimate_mode.get_str() != \"unset\") {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n-        cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n+        cc.m_feerate = CFeeRate::FromSatB(AmountFromValue(fee_rate));\n         if (override_min_fee) cc.fOverrideFeeRate = true;\n         // Default RBF to true for explicit fee_rate, if unset.\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n@@ -2332,8 +2332,8 @@ static RPCHelpMan settxfee()\n     LOCK(pwallet->cs_wallet);\n \n     CAmount nAmount = AmountFromValue(request.params[0]);\n-    CFeeRate tx_fee_rate(nAmount, 1000);\n-    CFeeRate max_tx_fee_rate(pwallet->m_default_max_tx_fee, 1000);\n+    CFeeRate tx_fee_rate{CFeeRate::FromBtcKb(nAmount)};\n+    CFeeRate max_tx_fee_rate{CFeeRate::FromBtcKb(pwallet->m_default_max_tx_fee)};\n     if (tx_fee_rate == CFeeRate(0)) {\n         // automatic selection\n     } else if (tx_fee_rate < pwallet->chain().relayMinFee()) {\n@@ -3147,7 +3147,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"estimate_mode\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n             }\n-            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            coinControl.m_feerate = CFeeRate::FromBtcKb(AmountFromValue(options[\"feeRate\"]));\n             coinControl.fOverrideFeeRate = true;\n         }\n "
      },
      {
        "sha": "7ff6dd8152b8346dbe088ee6df30eede81f63b31",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
        "patch": "@@ -3959,7 +3959,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             warnings.push_back(AmountHighWarn(\"-paytxfee\") + Untranslated(\" \") +\n                                _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n-        walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n+        walletInstance->m_pay_tx_fee = CFeeRate::FromBtcKb(nFeePerK);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n                 gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n@@ -3976,7 +3976,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n             warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         }\n-        if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n+        if (CFeeRate::FromBtcKb(nMaxFee) < chain.relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n                 gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;"
      }
    ]
  },
  {
    "sha": "83fb6101f0768e8f540e187caa2679c9f0b98c20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2ZiNjEwMWYwNzY4ZThmNTQwZTE4N2NhYTI2NzljOWYwYjk4YzIw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-06T19:16:43Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-26T16:21:09Z"
      },
      "message": "policy: create CFeeRate::IsZero() class member helper\n\nand use it instead of constructing CFeeRates in conditionals",
      "tree": {
        "sha": "eac98a93b753e598ff59fa564fdf8bbe5c9aa405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eac98a93b753e598ff59fa564fdf8bbe5c9aa405"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83fb6101f0768e8f540e187caa2679c9f0b98c20",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmAQQX0ACgkQT1chs9Dj\nkh2PsQ/+J2d1relq4y3sn+6/RXySFc5wWYa2UeS6MFrDQGzx16mQk2DUEmDtxHpv\nHzBtIhgug3tF3Sl+T3Pw0YGNk/cVCdguvgO944MZnf5O6M1lpRTAncpuhPf+y6Ct\nM/+7Yj0snhYdKnEbEfgGWD/cBqooRguo7QJYfsbMyHggSSZ7ySMUwltdPn6TtU5v\n3FAgDqAlPxqmasQo0eie45lLvSD92tgpXyMYSwmLV2vSR100QfZB0NuK5bBmBkKN\n6Lnj7JONMICyX7PwoL+vptLSOFNMMotkUlVFNclPsB/0nmzWawQEEBbFpfTvje9k\n2jVoNFnPEPUxKfR3xVYNJXB2eLrtamGCnpBcog263HTfGjDm51zUtlxzWkUF7B5r\njme0QhM90+BevqnjPOw7sg+2TqH4XFkC8U6D7iT2n0AuKtnoV3auOr+CaYJczj0V\nEndXgzy/+MJrNwLBCqC4VTm9Pd8sFNVhFbHuUy9XXgcbNx+QhhxGEytnnh/yDn6o\nUmbcbDY8i3isNlhPLqn8R4l9lDb+zHnY8R4K9tyIpEd2pbbwLD1vuFoe+2xJJFya\nYFHXUFaJO1ouqH07jxeRB2B82qknz3Mv0d2aTocCLqIARQSEqdWnWM6i7cpf7D19\nBEcaoWXZNetPcCNXJOCUJ3IeAosm40pRnmx1X4tmqxU3tf5mzHc=\n=Qffi\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPtBRZnn/u+fngrvecWWFmFoyDL0JD0NySYecPUNJZk+CP/wEA3olF7RFCGQ\nil8dMK7iV2QI8CDgPh84b1hbe8hGgX3UsqF/BfJitICmJUu3y6wYIj27DwjxBGAQ\nQX/wCI5KgixBaxBVAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQf8IFaOoq+M13BrdzBv9+PAjxBGAQQX7wCCDr\n7PuGoVo9AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHku\nY29t//AQw7mEEItHp/zOZ2DVP96lowjwIGX2fvOc2oSC4fRD2PaNvrI7KLnMwOMe\njwu62SnoRdHuCPAgSSfrYvPsJujYVXa0C9TvdnIzQ1nMOtgD3cH3EBp5ZYAI8QRg\nEEF+8Aj0r6ZcHMBPeACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDFr2rnHRJ7aRITU//zKwGdCPEEYBBBfvAI\nczX0chMzfoEAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree eac98a93b753e598ff59fa564fdf8bbe5c9aa405\nparent 6581118b5e6c12f43b2ac4f97f6bfad97e6a8053\nauthor Jon Atack <jon@atack.com> 1607282203 +0100\ncommitter Jon Atack <jon@atack.com> 1611678069 +0100\n\npolicy: create CFeeRate::IsZero() class member helper\n\nand use it instead of constructing CFeeRates in conditionals\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fb6101f0768e8f540e187caa2679c9f0b98c20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83fb6101f0768e8f540e187caa2679c9f0b98c20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fb6101f0768e8f540e187caa2679c9f0b98c20/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6581118b5e6c12f43b2ac4f97f6bfad97e6a8053"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 21,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b7925ae9f1d2cef1ee3db70979ac9e9f1a945919",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=83fb6101f0768e8f540e187caa2679c9f0b98c20",
        "patch": "@@ -34,6 +34,7 @@ class CFeeRate\n public:\n     /** Fee rate of 0 satoshis per kB */\n     CFeeRate() : nSatoshisPerK(0) { }\n+    bool IsZero() const { return nSatoshisPerK == 0; }\n     template<typename I>\n     explicit CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {\n         // We've previously had bugs creep in from silent double->int conversion..."
      },
      {
        "sha": "35a43466e4b0f19a753ed373bb4f21bdc40b8a7d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=83fb6101f0768e8f540e187caa2679c9f0b98c20",
        "patch": "@@ -1075,7 +1075,7 @@ static RPCHelpMan estimatesmartfee()\n     UniValue errors(UniValue::VARR);\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = fee_estimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n-    if (feeRate != CFeeRate(0)) {\n+    if (!feeRate.IsZero()) {\n         result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n@@ -1186,7 +1186,7 @@ static RPCHelpMan estimaterawfee()\n         failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n \n         // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n-        if (feeRate != CFeeRate(0)) {\n+        if (!feeRate.IsZero()) {\n             horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n             horizon_result.pushKV(\"decay\", buckets.decay);\n             horizon_result.pushKV(\"scale\", (int)buckets.scale);"
      },
      {
        "sha": "6862d53e114f49a843353fb83ce9c0f63239a5f9",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=83fb6101f0768e8f540e187caa2679c9f0b98c20",
        "patch": "@@ -111,6 +111,19 @@ BOOST_AUTO_TEST_CASE(CFeeRateNamedConstructorsTest)\n     BOOST_CHECK(CFeeRate::FromSatB(CAmount(123456789)) == CFeeRate(1234, 1000));\n }\n \n+BOOST_AUTO_TEST_CASE(CFeeRateIsZeroTest)\n+{\n+    BOOST_CHECK(CFeeRate(0).IsZero());\n+    BOOST_CHECK(!CFeeRate(1000).IsZero());\n+    BOOST_CHECK(!CFeeRate(-1000).IsZero());\n+    BOOST_CHECK(CFeeRate(CAmount(0), 0).IsZero());\n+    BOOST_CHECK(CFeeRate(CAmount(1), 1001).IsZero());\n+    BOOST_CHECK(CFeeRate::FromBtcKb(CAmount(0)).IsZero());\n+    BOOST_CHECK(!CFeeRate::FromBtcKb(CAmount(1)).IsZero());\n+    BOOST_CHECK(CFeeRate::FromSatB(CAmount(0.000)).IsZero());\n+    BOOST_CHECK(!CFeeRate::FromSatB(CAmount(100001)).IsZero());\n+}\n+\n BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\n {\n     CFeeRate a, b;"
      },
      {
        "sha": "802aa24cb07ebfedc585fa07c33c51b45e9eb803",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=83fb6101f0768e8f540e187caa2679c9f0b98c20",
        "patch": "@@ -41,7 +41,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n         // Allow to override automatic min/max check over coin control instance\n         if (coin_control.fOverrideFeeRate) return feerate_needed;\n     }\n-    else if (!coin_control.m_confirm_target && wallet.m_pay_tx_fee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for wallet member m_pay_tx_fee\n+    else if (!coin_control.m_confirm_target && !wallet.m_pay_tx_fee.IsZero()) { // 3. TODO: remove magic value of 0 for wallet member m_pay_tx_fee\n         feerate_needed = wallet.m_pay_tx_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n     }\n@@ -55,13 +55,13 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n         feerate_needed = wallet.chain().estimateSmartFee(target, conservative_estimate, feeCalc);\n-        if (feerate_needed == CFeeRate(0)) {\n+        if (feerate_needed.IsZero()) {\n             // if we don't have enough data for estimateSmartFee, then use fallback fee\n             feerate_needed = wallet.m_fallback_fee;\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n \n             // directly return if fallback fee is disabled (feerate 0 == disabled)\n-            if (wallet.m_fallback_fee == CFeeRate(0)) return feerate_needed;\n+            if (wallet.m_fallback_fee.IsZero()) return feerate_needed;\n         }\n         // Obey mempool min fee when using smart fee estimation\n         CFeeRate min_mempool_feerate = wallet.chain().mempoolMinFee();\n@@ -85,7 +85,7 @@ CFeeRate GetDiscardRate(const CWallet& wallet)\n     unsigned int highest_target = wallet.chain().estimateMaxBlocks();\n     CFeeRate discard_rate = wallet.chain().estimateSmartFee(highest_target, false /* conservative */);\n     // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n-    discard_rate = (discard_rate == CFeeRate(0)) ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);\n+    discard_rate = discard_rate.IsZero() ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);\n     // Discard rate must be at least dustRelayFee\n     discard_rate = std::max(discard_rate, wallet.chain().relayDustFee());\n     return discard_rate;"
      },
      {
        "sha": "ff2afc70dc1f533429790314c6294f5de71de93b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fb6101f0768e8f540e187caa2679c9f0b98c20/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=83fb6101f0768e8f540e187caa2679c9f0b98c20",
        "patch": "@@ -2334,7 +2334,7 @@ static RPCHelpMan settxfee()\n     CAmount nAmount = AmountFromValue(request.params[0]);\n     CFeeRate tx_fee_rate{CFeeRate::FromBtcKb(nAmount)};\n     CFeeRate max_tx_fee_rate{CFeeRate::FromBtcKb(pwallet->m_default_max_tx_fee)};\n-    if (tx_fee_rate == CFeeRate(0)) {\n+    if (tx_fee_rate.IsZero()) {\n         // automatic selection\n     } else if (tx_fee_rate < pwallet->chain().relayMinFee()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than min relay tx fee (%s)\", pwallet->chain().relayMinFee().ToString()));"
      }
    ]
  },
  {
    "sha": "8885b724eaaba5ce610521d0ee00ce29a16310cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODg1YjcyNGVhYWJhNWNlNjEwNTIxZDBlZTAwY2UyOWExNjMxMGNj",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-05T15:37:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-26T16:28:41Z"
      },
      "message": "wallet: create FeeRateFromValueInSatB() util function\n\nsimilar to AmountFromValue() with an additional check for non-representable\nCFeeRates in the exclusive range of 0 to 0.001 sat/vB as CFeeRate rounds these\nvalues down to CFeeRate(0)",
      "tree": {
        "sha": "8a559ef2c5058e4afebe96acb6ec37bc9e4a8b5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a559ef2c5058e4afebe96acb6ec37bc9e4a8b5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8885b724eaaba5ce610521d0ee00ce29a16310cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmAQQ0IACgkQT1chs9Dj\nkh0hNBAAw2CceB3eKp8vUsUt/UYH4Dgcdw4DVoqXDkuhXxW3S0vJXuBWGBQJcovq\nbtA20RsHdCCcG7Uah/B4fyeoDp8kYZLGpiNdpkk07yREg270/N2fOIdLBpknd7oc\nEV7Gm3S1sTHR5y7x2k/7UoPGT+SnPM4wQHF4cqI27PD+DJkEjITyedX4/oGXb1db\ndZmJvvipzuHplMYmbZ3RC+x+pj0xOGaKb2JANNbkEdfJuEl7id4NS/Xeb7sn42+I\nxz5LdUZWGtyLBJFJkflwSWF+JFTvMHNYhAyKwerDvfj47Vr/e20kAI/JB9Lj356p\nWCKP9/Hp/6ZPhNkQnxUVj1IHG70Q+UAVsasA499rFfoAoNEjxMApjARV5YKsGBVa\nSo1/teT0wZ+uXk6A9oDjm0czgfZfenZjXrp9/rePMHISDbQ0Z/DOiw4RKnCpvF3/\npQ411lwKNI6s57OjTDTtLAwup4h8d2EwOJBz+ck0O5vnjYXIHhFs1y5vgkIo2NPf\ngpNxtPDmuDXPUu85P0pbq663Ri6xscOM55nK91dCA+vuMYegjCRXYxf2AkOkEHlX\nlrR0OfPBloKxrb/rpMNKaN1OsJ4nGTn90+FIW02uSjqUGyWkgPrOXipt1MNk6zsZ\nX1QtOQgmEbDv6tXp7jRRSwhbmLhbF62STfm79fAt6tLwXwQKC6M=\n=Lj5N\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGo39YeIrXi/kYB/1bvwxVjdl9hw+SCT2CuignszNT7VCP/wEBmOmHUs7Hr0\n+7XefPzHUqoI8QRgEENE8AjZeD5CTjNf0wCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEF66odvH1Fgiyw5wVcFYTF8I8QRgEEND\n8AhVSDYZJY/FPgCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEMHLb7Nb4AiyTImBTVHW1hQI8SCychjYhMSZ2gQ+\nQlN2+E8aOUlbMlQy6eRh1gTA3xyKEwjxBGAQQ0PwCFeRkg3npVayAIPf4w0u+QyO\nLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nENQjPS1h/K+uN4gKosmzaqAI8CAoF+gxOyGjr23eEk4hlEMPIwFspdIT22loygsq\nJIvi+wjxBGAQQ0TwCF/IprlnIvyzAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8a559ef2c5058e4afebe96acb6ec37bc9e4a8b5b\nparent 83fb6101f0768e8f540e187caa2679c9f0b98c20\nauthor Jon Atack <jon@atack.com> 1607182637 +0100\ncommitter Jon Atack <jon@atack.com> 1611678521 +0100\n\nwallet: create FeeRateFromValueInSatB() util function\n\nsimilar to AmountFromValue() with an additional check for non-representable\nCFeeRates in the exclusive range of 0 to 0.001 sat/vB as CFeeRate rounds these\nvalues down to CFeeRate(0)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8885b724eaaba5ce610521d0ee00ce29a16310cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8885b724eaaba5ce610521d0ee00ce29a16310cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8885b724eaaba5ce610521d0ee00ce29a16310cc/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83fb6101f0768e8f540e187caa2679c9f0b98c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fb6101f0768e8f540e187caa2679c9f0b98c20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83fb6101f0768e8f540e187caa2679c9f0b98c20"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 34,
      "deletions": 3
    },
    "files": [
      {
        "sha": "782adc3b264805ff2cd63de7a607f7519d85f866",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=8885b724eaaba5ce610521d0ee00ce29a16310cc",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <key_io.h>\n #include <outputtype.h>\n+#include <policy/feerate.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/signingprovider.h>\n@@ -86,6 +87,17 @@ CAmount AmountFromValue(const UniValue& value)\n     return amount;\n }\n \n+CFeeRate FeeRateFromValueInSatB(const UniValue& value)\n+{\n+    const CAmount amount{AmountFromValue(value)};\n+    const CFeeRate fee_rate{CFeeRate::FromSatB(amount)};\n+    if (fee_rate.IsZero() && amount != 0) {\n+        // passed value is an unrepresentable fee rate between 0 and 0.001 sat/vB\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+    }\n+    return fee_rate;\n+}\n+\n uint256 ParseHashV(const UniValue& v, std::string strName)\n {\n     std::string strHex(v.get_str());"
      },
      {
        "sha": "9b8336ba77f391762b15541b0f854f067dbae648",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=8885b724eaaba5ce610521d0ee00ce29a16310cc",
        "patch": "@@ -8,6 +8,7 @@\n #include <node/coinstats.h>\n #include <node/transaction.h>\n #include <outputtype.h>\n+#include <policy/feerate.h>\n #include <protocol.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>\n@@ -81,6 +82,10 @@ extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKe\n CoinStatsHashType ParseHashType(const UniValue& param, const CoinStatsHashType default_type);\n \n extern CAmount AmountFromValue(const UniValue& value);\n+\n+/** Return a fee rate from a UniValue number or string in sat/vB */\n+extern CFeeRate FeeRateFromValueInSatB(const UniValue& value);\n+\n extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n "
      },
      {
        "sha": "7fd113bae402b7fa5a1a1e3420636e54e80f7d01",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=8885b724eaaba5ce610521d0ee00ce29a16310cc",
        "patch": "@@ -6,9 +6,11 @@\n #include <rpc/server.h>\n #include <rpc/util.h>\n \n+#include <amount.h>\n #include <core_io.h>\n #include <interfaces/chain.h>\n #include <node/context.h>\n+#include <policy/feerate.h>\n #include <test/util/setup_common.h>\n #include <util/ref.h>\n #include <util/time.h>\n@@ -185,6 +187,7 @@ static UniValue ValueFromString(const std::string &str)\n \n BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n {\n+    // Test AmountFromValue\n     BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"-0.00000001\")), UniValue);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0\")), 0LL);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000000\")), 0LL);\n@@ -206,6 +209,8 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n \n     BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e-9\")), UniValue); //should fail\n     BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"0.000000019\")), UniValue); //should fail\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"0.000999999\")), UniValue);\n+    BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1.111111111\")), UniValue);\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.00000001000000\")), 1LL); //should pass, cut trailing 0\n     BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"19e-9\")), UniValue); //should fail\n     BOOST_CHECK_EQUAL(AmountFromValue(ValueFromString(\"0.19e-6\")), 19); //should pass, leading 0 is present\n@@ -214,6 +219,15 @@ BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)\n     BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e+11\")), UniValue); //overflow error\n     BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"1e11\")), UniValue); //overflow error signless\n     BOOST_CHECK_THROW(AmountFromValue(ValueFromString(\"93e+9\")), UniValue); //overflow error\n+\n+    // Test FeeRateFromValueInSatB\n+    BOOST_CHECK(FeeRateFromValueInSatB(ValueFromString(\"0\")) == CFeeRate{0});\n+    BOOST_CHECK(FeeRateFromValueInSatB(ValueFromString(\"0.00000000\")) == CFeeRate{0});\n+    BOOST_CHECK(FeeRateFromValueInSatB(ValueFromString(\"0.001\")) == CFeeRate{1});\n+    BOOST_CHECK(FeeRateFromValueInSatB(ValueFromString(\"0.00100000\")) == CFeeRate{1});\n+    BOOST_CHECK(FeeRateFromValueInSatB(ValueFromString(\"1\")) == CFeeRate{1000});\n+    BOOST_CHECK(FeeRateFromValueInSatB(ValueFromString(\"1.000\")) == CFeeRate{1000});\n+    BOOST_CHECK(FeeRateFromValueInSatB(ValueFromString(\"1.2340000\")) == CFeeRate{1234});\n }\n \n BOOST_AUTO_TEST_CASE(json_parse_errors)"
      },
      {
        "sha": "a472d881b982c002eb9bbf18d8b98c8fc95e95a6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8885b724eaaba5ce610521d0ee00ce29a16310cc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8885b724eaaba5ce610521d0ee00ce29a16310cc",
        "patch": "@@ -216,7 +216,7 @@ static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const Un\n         if (!estimate_mode.isNull() && estimate_mode.get_str() != \"unset\") {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n-        cc.m_feerate = CFeeRate::FromSatB(AmountFromValue(fee_rate));\n+        cc.m_feerate = FeeRateFromValueInSatB(fee_rate);\n         if (override_min_fee) cc.fOverrideFeeRate = true;\n         // Default RBF to true for explicit fee_rate, if unset.\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n@@ -3089,7 +3089,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n                 {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n                 {\"locktime\", UniValueType(UniValue::VNUM)},\n-                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                {\"fee_rate\", UniValueType()}, // will be checked by FeeRateFromValueInSatB() in SetFeeEstimateMode()\n                 {\"feeRate\", UniValueType()}, // will be checked by AmountFromValue() below\n                 {\"psbt\", UniValueType(UniValue::VBOOL)},\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n@@ -3470,7 +3470,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n-                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                {\"fee_rate\", UniValueType()}, // will be checked by FeeRateFromValueInSatB() in SetFeeEstimateMode()\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },"
      }
    ]
  },
  {
    "sha": "17b75d61f5c2035ce70f62f439dec0cba834707e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2I3NWQ2MWY1YzIwMzVjZTcwZjYyZjQzOWRlYzBjYmE4MzQ3MDdl",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-04T10:28:47Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-26T16:28:52Z"
      },
      "message": "test: add CFeeRate zero values functional test coverage",
      "tree": {
        "sha": "dc88015430978c2ba013812b70bd2ec1710ab89e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc88015430978c2ba013812b70bd2ec1710ab89e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17b75d61f5c2035ce70f62f439dec0cba834707e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmAQQ0QACgkQT1chs9Dj\nkh1vVA//WAOQlBxF8PRBq9nNJbKUSzSeogpoVn5iAs1cB+R97Pnaq37DuK44b/bE\nx4kRJUySZfcnOVekrcHFHIvBH1GNTbwqFf0NLfX+CnL94wqlE2UFqeolaP5a7D6j\n7SIYevXpP1AJh7HYTkvOKhBGghbz6fzEj1RAxm+NvkhGwt0fOcqHAz5y+Tjlwiqa\nXul82K59zX8lHOXMBpJMT5Kvue1xbm/2KiwzgTj7OBfG5LAWwwVwICt2sCFe1ror\neYVdjEIAuICA/cMQKyh/G153Y0LywLMDktMWnEkxWbGxIgWvranUtxTaqTAAUnjt\n/hI3XFQQ9Yxcbg7L1vtiMTkIYleAmkGYHQ5Mi0kwo7jw3kApTO1gib8c3cDBs9VZ\nu4Rox5ByGaWPrxifSrXln6CYeP1fMrFCv7WJ5A3QqLLUjcACRU54fhwbQtY4u9oP\noDEcD6EGcYBkW9uIYOlpOn+X0AqJbsRTzlyihEqGtB9aCJNUiz/9hReAQxyA4Kqs\nVKUV8uEJYd3Nbhqvih6RsUfDUxes2U/3KpvTytcBrCmHuSuECmEStOWfYOHmnQ3L\nw0sX4Ay067UuAJfDQLiJSJmYngZragL7xjKEDygCKRJSNJoqFjLDoy5kJ+ogyrHh\nDShVMnYSe1I4u3tkHBXV47EhIls4f9TYcr2Whm+BLfy4VJEFzmY=\n=B7dO\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFZ/u7RPFytbiBEebWVq0/Mxipq2vEHqFVHTN2DltPlACP/wEAG9t8YjDjGq\nnLqZs3AtpKwI8QRgEENG8Ag/DKZcfyZ2UACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQRRdw9xYU4aNCFjYr\nNCagGwjxBGAQQ0bwCJ8AbeJByefXAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQWXoDQ48Ak3bJU/WZ4lLckAjxBGAQQ0bwCI95\noLOLDqQIAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BDlR5thZA0rHweUlIOEwUx/CPEgr/4JI2g5t8Ut10VO6F1AUTy5\nNroGzTV+KS/EyynlzOkI8QRgEENF8AgM4DuHLX6W1wCD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree dc88015430978c2ba013812b70bd2ec1710ab89e\nparent 8885b724eaaba5ce610521d0ee00ce29a16310cc\nauthor Jon Atack <jon@atack.com> 1607077727 +0100\ncommitter Jon Atack <jon@atack.com> 1611678532 +0100\n\ntest: add CFeeRate zero values functional test coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b75d61f5c2035ce70f62f439dec0cba834707e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17b75d61f5c2035ce70f62f439dec0cba834707e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b75d61f5c2035ce70f62f439dec0cba834707e/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8885b724eaaba5ce610521d0ee00ce29a16310cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8885b724eaaba5ce610521d0ee00ce29a16310cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8885b724eaaba5ce610521d0ee00ce29a16310cc"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 35,
      "deletions": 22
    },
    "files": [
      {
        "sha": "879099278a3c315f01481cd62e4fa13119cb254f",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=17b75d61f5c2035ce70f62f439dec0cba834707e",
        "patch": "@@ -5,6 +5,8 @@\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n from decimal import Decimal\n+from itertools import product\n+\n from test_framework.descriptors import descsum_create\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -721,17 +723,16 @@ def test_option_feerate(self):\n         result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n         result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 10 * btc_kvb_to_sat_vb * self.min_relay_tx_fee})\n         result4 = node.fundrawtransaction(rawtx, {\"feeRate\": str(10 * self.min_relay_tx_fee)})\n-        # Test that funding non-standard \"zero-fee\" transactions is valid.\n-        result5 = self.nodes[3].fundrawtransaction(rawtx, {\"fee_rate\": 0})\n-        result6 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 0})\n \n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n-        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n+        assert_fee_amount(result1['fee'], count_bytes(result1['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n-        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n-        assert_fee_amount(result5['fee'], count_bytes(result5['hex']), 0)\n-        assert_fee_amount(result6['fee'], count_bytes(result6['hex']), 0)\n+        assert_fee_amount(result4['fee'], count_bytes(result4['hex']), 10 * result_fee_rate)\n+\n+        # Test that funding non-standard \"zero-fee\" transactions is valid.\n+        for param, zero_value in product([\"fee_rate\", \"feeRate\"], [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]):\n+            assert_equal(self.nodes[3].fundrawtransaction(rawtx, {param: zero_value})[\"fee\"], 0)\n \n         # With no arguments passed, expect fee of 141 satoshis.\n         assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)"
      },
      {
        "sha": "8189f09bd67e12d0bca2f2a0586dcef1c10e4372",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=17b75d61f5c2035ce70f62f439dec0cba834707e",
        "patch": "@@ -6,6 +6,8 @@\n \"\"\"\n \n from decimal import Decimal\n+from itertools import product\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_approx,\n@@ -200,8 +202,8 @@ def run_test(self):\n         assert_approx(res4[\"fee\"], 0.00000381, 0.0000001)\n \n         self.log.info(\"Test min fee rate checks with walletcreatefundedpsbt are bypassed and that funding non-standard 'zero-fee' transactions is valid\")\n-        for param in [\"fee_rate\", \"feeRate\"]:\n-            assert_equal(self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {param: 0, \"add_inputs\": True})[\"fee\"], 0)\n+        for param, zero_value in product([\"fee_rate\", \"feeRate\"], [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]):\n+            assert_equal(0, self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {param: zero_value, \"add_inputs\": True})[\"fee\"])\n \n         self.log.info(\"Test invalid fee rate settings\")\n         for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1)}:"
      },
      {
        "sha": "a6535a6f1f28fe9526ed33e5ab173a3ed4d6e2cf",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=17b75d61f5c2035ce70f62f439dec0cba834707e",
        "patch": "@@ -265,8 +265,11 @@ def run_test(self):\n             self.nodes[2].sendmany, amounts={address: 10}, fee_rate=0.99999999)\n \n         self.log.info(\"Test sendmany raises if fee_rate of 0 or -1 is passed\")\n-        assert_raises_rpc_error(-6, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n-            self.nodes[2].sendmany, amounts={address: 10}, fee_rate=0)\n+        # Test fee_rate with zero values\n+        msg = \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n+        for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n+            assert_raises_rpc_error(-6, msg, self.nodes[2].sendmany, amounts={address: 1}, fee_rate=zero_value)\n+        # Test fee_rate out of range (negative number)\n         assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=-1)\n \n         self.log.info(\"Test sendmany raises if an invalid conf_target or estimate_mode is passed\")\n@@ -448,8 +451,11 @@ def run_test(self):\n                 self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=0.99999999)\n \n             self.log.info(\"Test sendtoaddress raises if fee_rate of 0 or -1 is passed\")\n-            assert_raises_rpc_error(-6, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n-                self.nodes[2].sendtoaddress, address=address, amount=10, fee_rate=0)\n+            # Test fee_rate with zero values\n+            msg = \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n+            for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n+                assert_raises_rpc_error(-6, msg, self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=zero_value)\n+            # Test fee_rate out of range (negative number)\n             assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=-1)\n \n             self.log.info(\"Test sendtoaddress raises if an invalid conf_target or estimate_mode is passed\")"
      },
      {
        "sha": "35a3b3e707506709007ca0b450e8f417a0f582da",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=17b75d61f5c2035ce70f62f439dec0cba834707e",
        "patch": "@@ -110,9 +110,13 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00\", rbf_node.bumpfee, rbfid, {\"fee_rate\": 0})\n         assert_raises_rpc_error(-4, \"Specified or calculated fee 0.141 is too high (cannot be higher than -maxtxfee 0.10\",\n             rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+        # Test fee_rate with zero values\n+        msg = \"Insufficient total fee 0.00\"\n+        for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n+            assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {\"fee_rate\": zero_value})\n+        # Test fee_rate out of range (negative number)\n         assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n         for value in [{\"foo\": \"bar\"}, True]:\n             assert_raises_rpc_error(-3, \"Amount is not a number or string\", rbf_node.bumpfee, rbfid, {\"fee_rate\": value})"
      },
      {
        "sha": "41c421a35b57668cc71ab077256faa61111aa4c6",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b75d61f5c2035ce70f62f439dec0cba834707e/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=17b75d61f5c2035ce70f62f439dec0cba834707e",
        "patch": "@@ -304,14 +304,14 @@ def run_test(self):\n \n         # Test setting explicit fee rate just below the minimum and at zero.\n         self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.99999999,\n-            expect_error=(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=0.99999999,\n-            expect_error=(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0,\n-            expect_error=(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n-        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=0,\n-            expect_error=(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n+        msg = \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.99999999, expect_error=(-4, msg))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=0.99999999, expect_error=(-4, msg))\n+        # Test fee_rate with zero values\n+        msg = \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n+        for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=zero_value, expect_error=(-4, msg))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=zero_value, expect_error=(-4, msg))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  },
  {
    "sha": "4743c867effcb9f96de7041a29811c13f27bbf67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzQzYzg2N2VmZmNiOWY5NmRlNzA0MWEyOTgxMWMxM2YyN2JiZjY3",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-02T12:55:26Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-26T16:28:54Z"
      },
      "message": "test: add non-representable CFeeRate test coverage",
      "tree": {
        "sha": "fa75ea853a6c6eeb2ab36413586034f3ff6bb381",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa75ea853a6c6eeb2ab36413586034f3ff6bb381"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4743c867effcb9f96de7041a29811c13f27bbf67",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmAQQ0cACgkQT1chs9Dj\nkh23KQ/+IdoT/IQgum5+mD27WqqAKTV4rzifeSK4hVfoqSg6c4O07jzC7sj9y3vE\noC/wHRLIh3yl19TDnI8niQ4qfxZFkUt+ebzFQ+2FIzBGCk5InMUeVXOI6Z6aQejW\nWXpmrtN5fhtXE1DhQd7GC1P2oOzYAUDZn3RbO4Xd/X46ewHAdTgH81al/ANfQPSv\nXjlj9YCp0yWKAV4D4h3Q+njA3Gid44qR0KuKPs372j40/fcD1zgBD6D2GdHt96wk\nmorN0PKz37+9oej8YFodZ4/ddFEt2tsm5MZK5R80wlw2ZmfuyyzhWtOaGqZOP0fS\nktph2rV0G0DDB39UuB3QBUq0ZP6lMdHvXp/UQSOm+ESpBv14z4J2Qo36Qgyvt0Ad\nGQPyebavLTe6AzrWiU137aWibyLcBEM3kOcYO/5pxdQcKCSQ5M6D6P/KnYsYBfQb\nHE+u1GUmNoXvDRPdDWHQwnLNv8TR+4HKZifr69zTvhklrbjzx9OR2yTweSx3IsDY\nTmkYUxGLzQ7xEwTETEvOoourSnTDZ/RpZBJFGPQn3DzLxF+t4EGKfFngBnWRt33S\n7g8Y/7UuaPhoOFBW6lLUkgz1PXWEl9sHte4YyUkQb55gMA8NLb1hgtQe2pN3X7yH\nq/OeKzsiK9U+4/+8sRdPDoy9qsrcv+5IfsxEE4XAdGquJqVwi04=\n=JrCg\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEuMUQra5SsKgzDL0DaVFikG0PMOQ87+2u0MF+YWwC6MCP/wEBKTeW9tUD8g\nKdw4gX+njdYI8QRgEENJ8AiT0UMk4HzqjQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEDOGzoLj9BrrgSYKeLnnS5YI\n8QRgEENJ8AhJesgZzcjORwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQO/c7MFKPCN1ZgJFrlX+yZQjxBGAQ\nQ0jwCM6WbBwoU5f3AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDR6w2+4H23maX9z7GfgJO6CPEEYBBDSvAINpuV\ndwGIkJQAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fa75ea853a6c6eeb2ab36413586034f3ff6bb381\nparent 17b75d61f5c2035ce70f62f439dec0cba834707e\nauthor Jon Atack <jon@atack.com> 1606913726 +0100\ncommitter Jon Atack <jon@atack.com> 1611678534 +0100\n\ntest: add non-representable CFeeRate test coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4743c867effcb9f96de7041a29811c13f27bbf67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4743c867effcb9f96de7041a29811c13f27bbf67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4743c867effcb9f96de7041a29811c13f27bbf67/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17b75d61f5c2035ce70f62f439dec0cba834707e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b75d61f5c2035ce70f62f439dec0cba834707e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17b75d61f5c2035ce70f62f439dec0cba834707e"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "09b77c2c743625c5133b4c07e149587162448efd",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=4743c867effcb9f96de7041a29811c13f27bbf67",
        "patch": "@@ -768,6 +768,10 @@ def test_option_feerate(self):\n                 node.fundrawtransaction, rawtx, {param: {\"foo\": \"bar\"}, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Invalid amount\",\n                 node.fundrawtransaction, rawtx, {param: \"\", \"add_inputs\": True})\n+        # Test fee_rate values non-representable by CFeeRate\n+        for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n+            assert_raises_rpc_error(-3, \"Invalid amount\",\n+                node.fundrawtransaction, rawtx, {\"fee_rate\": invalid_value, \"add_inputs\": True})\n \n         self.log.info(\"Test min fee rate checks are bypassed with fundrawtxn, e.g. a fee_rate under 1 sat/vB is allowed\")\n         node.fundrawtransaction(rawtx, {\"fee_rate\": 0.99999999, \"add_inputs\": True})"
      },
      {
        "sha": "415d1bcb7e942803a9f66fc4c38e00550426eb57",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=4743c867effcb9f96de7041a29811c13f27bbf67",
        "patch": "@@ -215,6 +215,10 @@ def run_test(self):\n                 self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: {\"foo\": \"bar\"}, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Invalid amount\",\n                 self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: \"\", \"add_inputs\": True})\n+        # Test fee_rate values non-representable by CFeeRate\n+        for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n+            assert_raises_rpc_error(-3, \"Invalid amount\",\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": invalid_value, \"add_inputs\": True})\n \n         self.log.info(\"- raises RPC error if both feeRate and fee_rate are passed\")\n         assert_raises_rpc_error(-8, \"Cannot specify both fee_rate (sat/vB) and feeRate (BTC/kvB)\","
      },
      {
        "sha": "e08b42671379869feed874f08269277ee53aaf04",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=4743c867effcb9f96de7041a29811c13f27bbf67",
        "patch": "@@ -264,11 +264,15 @@ def run_test(self):\n         assert_raises_rpc_error(-6, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n             self.nodes[2].sendmany, amounts={address: 10}, fee_rate=0.99999999)\n \n-        self.log.info(\"Test sendmany raises if fee_rate of 0 or -1 is passed\")\n+        self.log.info(\"Test sendmany raises RPC error when invalid fee rates are passed\")\n         # Test fee_rate with zero values\n         msg = \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n         for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n             assert_raises_rpc_error(-6, msg, self.nodes[2].sendmany, amounts={address: 1}, fee_rate=zero_value)\n+        # Test fee_rate values non-representable by CFeeRate\n+        msg = \"Invalid amount\"\n+        for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n+            assert_raises_rpc_error(-3, msg, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=invalid_value)\n         # Test fee_rate out of range (negative number)\n         assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=-1)\n \n@@ -450,11 +454,15 @@ def run_test(self):\n             assert_raises_rpc_error(-6, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n                 self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=0.99999999)\n \n-            self.log.info(\"Test sendtoaddress raises if fee_rate of 0 or -1 is passed\")\n+            self.log.info(\"Test sendtoaddress raises RPC error when invalid fee rates are passed\")\n             # Test fee_rate with zero values\n             msg = \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n             for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n                 assert_raises_rpc_error(-6, msg, self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=zero_value)\n+            # Test fee_rate values non-representable by CFeeRate\n+            msg = \"Invalid amount\"\n+            for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n+                assert_raises_rpc_error(-3, msg, self.nodes[2].sendtoaddress, address=address, amount=10, fee_rate=invalid_value)\n             # Test fee_rate out of range (negative number)\n             assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=-1)\n "
      },
      {
        "sha": "5a0796b23166cd90415b5dbf47c4893a6512b2d6",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=4743c867effcb9f96de7041a29811c13f27bbf67",
        "patch": "@@ -116,11 +116,16 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         msg = \"Insufficient total fee 0.00\"\n         for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n             assert_raises_rpc_error(-8, msg, rbf_node.bumpfee, rbfid, {\"fee_rate\": zero_value})\n+        # Test fee_rate values non-representable by CFeeRate\n+        msg = \"Invalid amount\"\n+        for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n+            assert_raises_rpc_error(-3, msg, rbf_node.bumpfee, rbfid, {\"fee_rate\": invalid_value})\n+        assert_raises_rpc_error(-3, msg, rbf_node.bumpfee, rbfid, {\"fee_rate\": \"\"})\n         # Test fee_rate out of range (negative number)\n         assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n+        # Test type error\n         for value in [{\"foo\": \"bar\"}, True]:\n             assert_raises_rpc_error(-3, \"Amount is not a number or string\", rbf_node.bumpfee, rbfid, {\"fee_rate\": value})\n-        assert_raises_rpc_error(-3, \"Invalid amount\", rbf_node.bumpfee, rbfid, {\"fee_rate\": \"\"})\n \n         self.log.info(\"Test explicit fee rate raises RPC error if both fee_rate and conf_target are passed\")\n         assert_raises_rpc_error(-8, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \""
      },
      {
        "sha": "7193c05ea0b3dd747c7df201c68327d946087dc1",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4743c867effcb9f96de7041a29811c13f27bbf67/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=4743c867effcb9f96de7041a29811c13f27bbf67",
        "patch": "@@ -302,16 +302,23 @@ def run_test(self):\n                 self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n                     expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n \n-        # Test setting explicit fee rate just below the minimum and at zero.\n+        # Test setting explicit fee rate just below the minimum.\n         self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n         msg = \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.99999999, expect_error=(-4, msg))\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=0.99999999, expect_error=(-4, msg))\n+\n+        self.log.info(\"Explicit fee rate raises RPC error when invalid fee rates are passed\")\n         # Test fee_rate with zero values\n         msg = \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n         for zero_value in [0, 0.000, 0.00000000, \"0\", \"0.000\", \"0.00000000\"]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=zero_value, expect_error=(-4, msg))\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=zero_value, expect_error=(-4, msg))\n+        # Test fee_rate values non-representable by CFeeRate\n+        msg = \"Invalid amount\"\n+        for invalid_value in [0.00000001, 0.0009, 0.00099999]:\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=invalid_value, expect_error=(-3, msg))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=invalid_value, expect_error=(-3, msg))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  },
  {
    "sha": "8ba11be9d7d060058a3c0335b6717411db5f1b86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmExMWJlOWQ3ZDA2MDA1OGEzYzAzMzViNjcxNzQxMWRiNWYxYjg2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-03T09:55:15Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-26T16:28:58Z"
      },
      "message": "test: add ParseFixedPoint fee rate rejection coverage",
      "tree": {
        "sha": "92f828aeb079d42106eef71f920200b7cfba362a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92f828aeb079d42106eef71f920200b7cfba362a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ba11be9d7d060058a3c0335b6717411db5f1b86",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmAQQ0oACgkQT1chs9Dj\nkh0b2Q/9FUXLPEFrzO2YxVXQMYsrHyNpZGzcaYf9hXMgaGTMjVlHk1/i5AJigUcw\njmakVTRfpmLTRQ+0Voay1V5vzvuWoM6ykWU5VM4FMMoSVBB5RZVG8AJYMktGXskD\nrokM+AqZ3aEHe5cdiGMzp1FcBdFrbj7NBVzS9eWc5nrreZFNCj/eCRNlzYSwKIMS\nKiwtHA6dnXx8+QxVBqKyO7pdVJPPW4TbxEMSahDFqi2AnRKtnPcPPLHSom8tsRlo\ncLQklOoJfcTz8Mpb0MkaF4gT2vHxR+UVMqhILJufhHudgzPNSWpfdnn5UNZCbUvG\nm7m6qUeTnz93sD+6WIK6NzukU/QaPMxVNfoFn/65iMD7KO9L7oWPCKggti9ZQrJr\nOVbwiFc0h4T4c2CaCJwDtHQGM3P1raIrTSkhaUAOlCy7oWi8rjlMzfeKqPtIlTsK\nUGGFHxI1R0lLPqWT8NKQOQm/YBro42ngn5N2HE2xiFSQMQ3YL7ilbwWPCS0ztfql\nPHpxvob/uz4WQHaLo0JNzv/JJPp/cNX4kvM3hv/o4+YfnYf85EpK7ulrZSwSeg23\nAnMme51GxUTaBuOh/GFbagyZj66YtK0Gs+4SP8bIBWE3cNTyjl1iRTsoPCfHJlDl\nPe5gF++wR6/pevJHiiasCitIyZPdueLOJ0GuNtII8Vjd+EQFDT8=\n=4HJL\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFJ2RVnX+ioirYXgtIk+0NrUrsA9igiY29r4ARw6GIWYCP/wEDBsmDtNzORC\nZEAur1fMTY4I8QRgEENL8AjEbh8YvS83dQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEEV5Gs+99jA6559M7n4f\n9ccI8QRgEENM8AjqS7Pl6pKltwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEKRfFi0QIYPkHAXQ2JKEigcI8QRgEENL8Ag3tkYK\n12ltRACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDLnCzR6B0ygIhrK8G/Ii5OCPEEYBBDTPAINowj6H5/Z0UA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 92f828aeb079d42106eef71f920200b7cfba362a\nparent 4743c867effcb9f96de7041a29811c13f27bbf67\nauthor Jon Atack <jon@atack.com> 1606989315 +0100\ncommitter Jon Atack <jon@atack.com> 1611678538 +0100\n\ntest: add ParseFixedPoint fee rate rejection coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba11be9d7d060058a3c0335b6717411db5f1b86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ba11be9d7d060058a3c0335b6717411db5f1b86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba11be9d7d060058a3c0335b6717411db5f1b86/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4743c867effcb9f96de7041a29811c13f27bbf67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4743c867effcb9f96de7041a29811c13f27bbf67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4743c867effcb9f96de7041a29811c13f27bbf67"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5a952a240baa52ddd78803fb2bf2a8b11b521e0c",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=8ba11be9d7d060058a3c0335b6717411db5f1b86",
        "patch": "@@ -766,8 +766,9 @@ def test_option_feerate(self):\n                 node.fundrawtransaction, rawtx, {param: -1, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n                 node.fundrawtransaction, rawtx, {param: {\"foo\": \"bar\"}, \"add_inputs\": True})\n-            assert_raises_rpc_error(-3, \"Invalid amount\",\n-                node.fundrawtransaction, rawtx, {param: \"\", \"add_inputs\": True})\n+            # Test fee_rate values that don't pass fixed-point parsing checks\n+            for invalid_value in [\"\", 0.000000001, 1.111111111, 11111111111]:\n+                assert_raises_rpc_error(-3, \"Invalid amount\", node.fundrawtransaction, rawtx, {param: invalid_value, \"add_inputs\": True})\n         # Test fee_rate values non-representable by CFeeRate\n         for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n             assert_raises_rpc_error(-3, \"Invalid amount\","
      },
      {
        "sha": "cea667889018ac27ff3f1a598b1da11b46c6a685",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=8ba11be9d7d060058a3c0335b6717411db5f1b86",
        "patch": "@@ -213,8 +213,10 @@ def run_test(self):\n                 self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: -1, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n                 self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: {\"foo\": \"bar\"}, \"add_inputs\": True})\n-            assert_raises_rpc_error(-3, \"Invalid amount\",\n-                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: \"\", \"add_inputs\": True})\n+            # Test fee_rate values that don't pass fixed-point parsing checks\n+            for invalid_value in [\"\", 0.000000001, 1.111111111, 11111111111]:\n+                assert_raises_rpc_error(-3, \"Invalid amount\",\n+                    self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: invalid_value, \"add_inputs\": True})\n         # Test fee_rate values non-representable by CFeeRate\n         for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n             assert_raises_rpc_error(-3, \"Invalid amount\","
      },
      {
        "sha": "1b41b82ebcdc1291a70882bf669ebd8db76de9ba",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=8ba11be9d7d060058a3c0335b6717411db5f1b86",
        "patch": "@@ -273,6 +273,9 @@ def run_test(self):\n         msg = \"Invalid amount\"\n         for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n             assert_raises_rpc_error(-3, msg, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=invalid_value)\n+        # Test fee_rate values that don't pass fixed-point parsing checks\n+        for invalid_value in [\"\", 0.000000001, 1.111111111, 11111111111]:\n+            assert_raises_rpc_error(-3, msg, self.nodes[2].sendmany, amounts={address: 1.0}, fee_rate=invalid_value)\n         # Test fee_rate out of range (negative number)\n         assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=-1)\n \n@@ -463,6 +466,9 @@ def run_test(self):\n             msg = \"Invalid amount\"\n             for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n                 assert_raises_rpc_error(-3, msg, self.nodes[2].sendtoaddress, address=address, amount=10, fee_rate=invalid_value)\n+            # Test fee_rate values that don't pass fixed-point parsing checks\n+            for invalid_value in [\"\", 0.000000001, 1.111111111, 11111111111]:\n+                assert_raises_rpc_error(-3, msg, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=invalid_value)\n             # Test fee_rate out of range (negative number)\n             assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=-1)\n "
      },
      {
        "sha": "04ad9b1bf150d2116e6134fb246447ebe70e52dc",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=8ba11be9d7d060058a3c0335b6717411db5f1b86",
        "patch": "@@ -121,6 +121,9 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         for invalid_value in [0.00000001, 0.00099999, \"0.00000001\", \"0.00099999\"]:\n             assert_raises_rpc_error(-3, msg, rbf_node.bumpfee, rbfid, {\"fee_rate\": invalid_value})\n         assert_raises_rpc_error(-3, msg, rbf_node.bumpfee, rbfid, {\"fee_rate\": \"\"})\n+        # Test fee_rate values that don't pass fixed-point parsing checks\n+        for invalid_value in [\"\", 0.000000001, 1.111111111, 11111111111]:\n+            assert_raises_rpc_error(-3, msg, rbf_node.bumpfee, rbfid, {\"fee_rate\": invalid_value})\n         # Test fee_rate out of range (negative number)\n         assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n         # Test type error"
      },
      {
        "sha": "1fcb346c750be56babe3085b0a88d4e81b706a90",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ba11be9d7d060058a3c0335b6717411db5f1b86/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=8ba11be9d7d060058a3c0335b6717411db5f1b86",
        "patch": "@@ -319,6 +319,10 @@ def run_test(self):\n         for invalid_value in [0.00000001, 0.0009, 0.00099999]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=invalid_value, expect_error=(-3, msg))\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=invalid_value, expect_error=(-3, msg))\n+        # Test fee_rate values that don't pass fixed-point parsing checks\n+        for invalid_value in [\"\", 0.000000001, 1.111111111, 11111111111]:\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=invalid_value, expect_error=(-3, msg))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=invalid_value, expect_error=(-3, msg))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  },
  {
    "sha": "236f556708fb619167b72cca451d0048a9274646",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzZmNTU2NzA4ZmI2MTkxNjdiNzJjY2E0NTFkMDA0OGE5Mjc0NjQ2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-12-04T11:51:34Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-01-26T16:29:00Z"
      },
      "message": "test: add type error and out of range fee rate coverage",
      "tree": {
        "sha": "079dc24b475152b80c38e17f210bf63077d5e488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/079dc24b475152b80c38e17f210bf63077d5e488"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/236f556708fb619167b72cca451d0048a9274646",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmAQQ0wACgkQT1chs9Dj\nkh1tiw/8CZgqSFXPz5JSNsGo1Om9Za4qMgOJy4QYP0vj49Q2rdMqakKYq0kAcLw5\nWTzZq0YcFfLcaT8SSkZ7CoSXIlWS6onPVthlp0n8sAh8s7b3JkaL/ZDzEcvkjQqe\nuTo2mi1GsuMdy8t1sS8YLvCYZaNqaWb2J9r1E+RkCrlb4iLofEg55TINDYOBVkIz\nIDnkagjQyFEmONh4vh5Ff4bkNIUnvV1YtrGnczyKP9d38Y2/Dyig1HpueyIKZJ3A\nexYTVA+pwUHp4UFyYzpIuGH12e/SKzb/K5dZvo0OORoTkPN5iHCk4xCb0sc6oqZ6\nXZgFegdwBNllbZk9t3WVaf3UizuHGYbwVj5H0sIPAFzRGeUu/wdWaO096PRsqKwr\nfZQlci32uxSj5Ib8Um4LE/InOirC7MjZ/kI1Vcp7xmMKwiXscgxkdCICfGW6hH3/\nZKyH4xHSDOwOsxWRc65xNQ68movbbPaWrbi97YiVsWKQdgsm5B/erdim/geTf5Vw\ndkAu5UqpehW0GMMV6OIUAa7cNmMLOwXGsia1zbv43paqlhzPPduMiN5e7qabkL/r\n/fCKLG4ND0yppkfcF79kY9AU8U0cb8yFimCKhtAliQ0kkQAQBF3A1QS/1SVfD7Q4\njZkhbMJli2L79HQ9uqDLfOw4OOnAsLplvMNJ9WI3ZygFHdUNhXM=\n=3TvX\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIExhwvsviXcsrU1AP+GpjywBGI81FJP2kbnvTBVF4eBACP/wECdvHGjtCqqB\n+mdpYaLCUesI8QRgEENO8AgJzSQln71ogwCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wENyJ7/4+gCTFsDVAJuTz5KII\n8QRgEENO8AgbDEZw2xNq5gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ4yWxIPpegtboQgPQzLMN7AjxBGAQ\nQ07wCLF0BAQeU/f+AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t8BDl/dMoTbP1z1Skgsts/xyqCPEEYBBDTfAIUoB+ao7yGlEAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 079dc24b475152b80c38e17f210bf63077d5e488\nparent 8ba11be9d7d060058a3c0335b6717411db5f1b86\nauthor Jon Atack <jon@atack.com> 1607082694 +0100\ncommitter Jon Atack <jon@atack.com> 1611678540 +0100\n\ntest: add type error and out of range fee rate coverage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236f556708fb619167b72cca451d0048a9274646",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/236f556708fb619167b72cca451d0048a9274646",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236f556708fb619167b72cca451d0048a9274646/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ba11be9d7d060058a3c0335b6717411db5f1b86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ba11be9d7d060058a3c0335b6717411db5f1b86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ba11be9d7d060058a3c0335b6717411db5f1b86"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b62ce9175dd7634416559c12a527280fcf014844",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236f556708fb619167b72cca451d0048a9274646/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236f556708fb619167b72cca451d0048a9274646/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=236f556708fb619167b72cca451d0048a9274646",
        "patch": "@@ -15,6 +15,7 @@\n )\n from test_framework.wallet_util import test_address\n \n+NOT_A_NUMBER_OR_STRING = \"Amount is not a number or string\"\n OUT_OF_RANGE = \"Amount out of range\"\n \n \n@@ -278,6 +279,9 @@ def run_test(self):\n             assert_raises_rpc_error(-3, msg, self.nodes[2].sendmany, amounts={address: 1.0}, fee_rate=invalid_value)\n         # Test fee_rate out of range (negative number)\n         assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=-1)\n+        # Test type error\n+        for invalid_value in [True, {\"foo\": \"bar\"}]:\n+            assert_raises_rpc_error(-3, NOT_A_NUMBER_OR_STRING, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=invalid_value)\n \n         self.log.info(\"Test sendmany raises if an invalid conf_target or estimate_mode is passed\")\n         for target, mode in product([-1, 0, 1009], [\"economical\", \"conservative\"]):\n@@ -471,6 +475,9 @@ def run_test(self):\n                 assert_raises_rpc_error(-3, msg, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=invalid_value)\n             # Test fee_rate out of range (negative number)\n             assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=-1)\n+            # Test type error\n+            for invalid_value in [True, {\"foo\": \"bar\"}]:\n+                assert_raises_rpc_error(-3, NOT_A_NUMBER_OR_STRING, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=invalid_value)\n \n             self.log.info(\"Test sendtoaddress raises if an invalid conf_target or estimate_mode is passed\")\n             for target, mode in product([-1, 0, 1009], [\"economical\", \"conservative\"]):"
      },
      {
        "sha": "088be98863ea84c8d911e748cb4c8991cfe9f528",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/236f556708fb619167b72cca451d0048a9274646/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/236f556708fb619167b72cca451d0048a9274646/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=236f556708fb619167b72cca451d0048a9274646",
        "patch": "@@ -296,11 +296,10 @@ def run_test(self):\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.1, arg_estimate_mode=mode, expect_error=(-8, msg))\n             assert_raises_rpc_error(-8, msg, w0.send, {w1.getnewaddress(): 1}, 0.1, mode)\n \n-        for mode in [\"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n-            self.log.debug(\"{}\".format(mode))\n-            for k, v in {\"string\": \"true\", \"object\": {\"foo\": \"bar\"}}.items():\n+        for mode in [\"economical\", \"conservative\"]:\n+            for k, v in {\"string\": \"true\", \"bool\": True, \"object\": {\"foo\": \"bar\"}}.items():\n                 self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n-                    expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n+                    expect_error=(-3, f\"Expected type number for conf_target, got {k}\"))\n \n         # Test setting explicit fee rate just below the minimum.\n         self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n@@ -323,6 +322,15 @@ def run_test(self):\n         for invalid_value in [\"\", 0.000000001, 1.111111111, 11111111111]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=invalid_value, expect_error=(-3, msg))\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=invalid_value, expect_error=(-3, msg))\n+        # Test fee_rate out of range (negative number)\n+        msg = \"Amount out of range\"\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=-1, expect_error=(-3, msg))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=-1, expect_error=(-3, msg))\n+        # Test type error\n+        msg = \"Amount is not a number or string\"\n+        for invalid_value in [True, {\"foo\": \"bar\"}]:\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=invalid_value, expect_error=(-3, msg))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=invalid_value, expect_error=(-3, msg))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  }
]