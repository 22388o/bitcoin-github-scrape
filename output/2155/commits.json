[
  {
    "sha": "72bb8e1b3498a79702e47c2e64895f3b29f9ee45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmJiOGUxYjM0OThhNzk3MDJlNDdjMmU2NDg5NWYzYjI5ZjllZTQ1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-05T01:05:56Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-07T14:41:39Z"
      },
      "message": "spendfrom.py sends coins from a particular address or addresses\n\nShould be both useful and also a pretty good demonstration of\nusing the raw transactions API.",
      "tree": {
        "sha": "558fcd0060477d538a0911b7ec181b3d7cabfbc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/558fcd0060477d538a0911b7ec181b3d7cabfbc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72bb8e1b3498a79702e47c2e64895f3b29f9ee45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72bb8e1b3498a79702e47c2e64895f3b29f9ee45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72bb8e1b3498a79702e47c2e64895f3b29f9ee45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72bb8e1b3498a79702e47c2e64895f3b29f9ee45/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea9788517bfa3e53e192c5af9e64e73625f9db74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea9788517bfa3e53e192c5af9e64e73625f9db74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea9788517bfa3e53e192c5af9e64e73625f9db74"
      }
    ],
    "stats": {
      "total": 254,
      "additions": 254,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a087a0c1e597d90bc135d43805307781fe8fcce",
        "filename": "contrib/spendfrom/README",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72bb8e1b3498a79702e47c2e64895f3b29f9ee45/contrib/spendfrom/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72bb8e1b3498a79702e47c2e64895f3b29f9ee45/contrib/spendfrom/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/README?ref=72bb8e1b3498a79702e47c2e64895f3b29f9ee45",
        "patch": "@@ -0,0 +1,32 @@\n+Use the raw transactions API to send coins received on a particular\n+address (or addresses).\n+\n+Depends on jsonrpc\n+\n+Usage:\n+\n+spendfrom.py --from=FROMADDRESS1[,FROMADDRESS2] --to=TOADDRESS --amount=amount \\\n+             --fee=fee --datadir=/path/to/.bitcoin --testnet --dry_run\n+\n+With no arguments, outputs a list of amounts associated with addresses.\n+\n+With arguments, sends coins received by the FROMADDRESS addresses to the TOADDRESS.\n+\n+You may explictly specify how much fee to pay (a fee more than 1% of the amount\n+will fail,  though, to prevent bitcoin-losing accidents). Spendfrom may fail if\n+it thinks the transaction would never be confirmed (if the amount being sent is\n+too small, or if the transaction is too many bytes for the fee).\n+\n+If a change output needs to be created, the change will be sent to the last\n+FROMADDRESS (if you specify just one FROMADDRESS, change will go back to it).\n+\n+If --datadir is not specified, the default datadir is used.\n+\n+The --dry_run option will just create and sign the the transaction and print\n+the transaction data (as hexadecimal), instead of broadcasting it.\n+\n+If the transaction is created and broadcast successfully, a transaction id\n+is printed.\n+\n+If this was a tool for end-users and not programmers, it would have much friendlier\n+error-handling."
      },
      {
        "sha": "01b9768a5b06a459808af61efca624239b301f1d",
        "filename": "contrib/spendfrom/setup.py",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72bb8e1b3498a79702e47c2e64895f3b29f9ee45/contrib/spendfrom/setup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72bb8e1b3498a79702e47c2e64895f3b29f9ee45/contrib/spendfrom/setup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/setup.py?ref=72bb8e1b3498a79702e47c2e64895f3b29f9ee45",
        "patch": "@@ -0,0 +1,9 @@\n+from distutils.core import setup\n+setup(name='btcspendfrom',\n+      version='1.0',\n+      description='Command-line utility for bitcoin \"coin control\"',\n+      author='Gavin Andresen',\n+      author_email='gavin@bitcoinfoundation.org',\n+      requires=['jsonrpc'],\n+      scripts=['spendfrom.py'],\n+      )"
      },
      {
        "sha": "ebef7d148eda44117e4800bb3fc841971af65130",
        "filename": "contrib/spendfrom/spendfrom.py",
        "status": "added",
        "additions": 213,
        "deletions": 0,
        "changes": 213,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72bb8e1b3498a79702e47c2e64895f3b29f9ee45/contrib/spendfrom/spendfrom.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72bb8e1b3498a79702e47c2e64895f3b29f9ee45/contrib/spendfrom/spendfrom.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/spendfrom.py?ref=72bb8e1b3498a79702e47c2e64895f3b29f9ee45",
        "patch": "@@ -0,0 +1,213 @@\n+#!/usr/bin/env python\n+#\n+# Use the raw transactions API to spend bitcoins received on particular addresses,\n+# and send any change back to that same address.\n+#\n+# Example usage:\n+#  spendfrom.py  # Lists available funds\n+#  spendfrom.py --from=ADDRESS --to=ADDRESS --amount=11.00\n+#\n+# Assumes it will talk to a bitcoind or Bitcoin-Qt running\n+# on localhost.\n+#\n+# Depends on jsonrpc\n+#\n+\n+from decimal import *\n+import math\n+import os\n+import os.path\n+import platform\n+import sys\n+import time\n+from jsonrpc import ServiceProxy\n+\n+BASE_FEE=Decimal(\"0.001\")\n+\n+def determine_db_dir():\n+    if platform.system() == \"Darwin\":\n+        return os.path.expanduser(\"~/Library/Application Support/Bitcoin/\")\n+    elif platform.system() == \"Windows\":\n+        return os.path.join(os.environ['APPDATA'], \"Bitcoin\")\n+    return os.path.expanduser(\"~/.bitcoin\")\n+\n+def read_bitcoinconfig(dbdir):\n+    from ConfigParser import SafeConfigParser\n+\n+    class FakeSecHead(object):\n+        def __init__(self, fp):\n+            self.fp = fp\n+            self.sechead = '[all]\\n'\n+        def readline(self):\n+            if self.sechead:\n+                try: return self.sechead\n+                finally: self.sechead = None\n+            else:\n+                s = self.fp.readline()\n+                if s.find('#') != -1:\n+                    s = s[0:s.find('#')].strip() +\"\\n\"\n+                return s\n+\n+    config_parser = SafeConfigParser()\n+    config_parser.readfp(FakeSecHead(open(os.path.join(dbdir, \"bitcoin.conf\"))))\n+    return dict(config_parser.items(\"all\"))\n+\n+def connect_JSON(datadir, testnet):\n+    conf = read_bitcoinconfig(datadir)\n+    if not 'rpcport' in conf:\n+        if 'testnet' in conf or testnet:\n+            conf['rpcport'] = 18332\n+        else:\n+            conf['rpcport'] = 8332\n+\n+    connect = \"http://%s:%s@127.0.0.1:%s\"%(conf['rpcuser'], conf['rpcpassword'], conf['rpcport'])\n+    return ServiceProxy(connect)\n+\n+def unlock_wallet(bitcoind):\n+    info = bitcoind.getinfo()\n+    if 'unlocked_until' not in info:\n+        return  # wallet is not encrypted\n+    t = int(info['unlocked_until'])\n+    if t <= time.time():\n+        print(\"wallet locked: passphrase?\")\n+        passphrase = input()\n+        bitcoind.walletpassphrase(passphrase, 5)\n+\n+def list_available(bitcoind):\n+    address_summary = dict()\n+\n+    address_to_account = dict()\n+    for info in bitcoind.listreceivedbyaddress(0):\n+        address_to_account[info[\"address\"]] = info[\"account\"]\n+\n+    unspent = bitcoind.listunspent(0)\n+    for output in unspent:\n+        # listunspent doesn't give addresses, so:\n+        rawtx = bitcoind.getrawtransaction(output['txid'], 1)\n+        vout = rawtx[\"vout\"][output['vout']]\n+        pk = vout[\"scriptPubKey\"]\n+\n+        # This code only deals with ordinary pay-to-bitcoin-address\n+        # outputs right now; anything exotic is ignored.\n+        if pk[\"type\"] != \"pubkeyhash\":\n+            continue\n+        \n+        address = pk[\"addresses\"][0]\n+        if address in address_summary:\n+            address_summary[address][\"total\"] += vout[\"value\"]\n+            address_summary[address][\"outputs\"].append(output)\n+        else:\n+            address_summary[address] = {\n+                \"total\" : vout[\"value\"],\n+                \"outputs\" : [output],\n+                \"account\" : address_to_account.get(address, \"\")\n+                }\n+\n+    return address_summary\n+\n+def select_coins(needed, inputs):\n+    # Feel free to improve this, this is good enough for my simple needs:\n+    outputs = []\n+    have = Decimal(\"0.0\")\n+    n = 0\n+    while have < needed and n < len(inputs):\n+        outputs.append({ \"txid\":inputs[n][\"txid\"], \"vout\":inputs[n][\"vout\"]})\n+        have += inputs[n][\"amount\"]\n+        n += 1\n+    return (outputs, have-needed)\n+\n+def create_tx(bitcoind, fromaddresses, toaddress, amount, fee):\n+    all_coins = list_available(bitcoind)\n+\n+    total_available = Decimal(\"0.0\")\n+    needed = amount+fee\n+    potential_inputs = []\n+    for addr in fromaddresses:\n+        if addr not in all_coins:\n+            continue\n+        potential_inputs.extend(all_coins[addr][\"outputs\"])\n+        total_available += all_coins[addr][\"total\"]\n+\n+    if total_available < needed:\n+        print(\"Error, only %f BTC available, need %f\"%(total_available, needed));\n+        sys.exit(1)\n+\n+    #\n+    # Note:\n+    # Python's json/jsonrpc modules have inconsistent support for Decimal numbers.\n+    # Instead of wrestling with getting json.dumps() (used by jsonrpc) to encode\n+    # Decimals, I'm casting amounts to float before sending them to bitcoind.\n+    #  \n+    outputs = { toaddress : float(amount) }\n+    (inputs, change_amount) = select_coins(needed, potential_inputs)\n+    if change_amount > BASE_FEE:  # don't bother with zero or tiny change\n+        outputs[fromaddresses[-1]] = float(change_amount)\n+\n+    rawtx = bitcoind.createrawtransaction(inputs, outputs)\n+    signed_rawtx = bitcoind.signrawtransaction(rawtx)\n+    if not signed_rawtx[\"complete\"]:\n+        print(\"signrawtransaction failed\")\n+        sys.exit(1)\n+    txdata = signed_rawtx[\"hex\"]\n+\n+    # This code could be a lot smarter, too:\n+    kb = len(signed_rawtx)/1000  # integer division rounds down\n+    if kb > 1 and fee < 0.001:\n+        print(\"Rejecting no-fee transaction, larger than 1000 bytes\")\n+        print(\"Suggested fee: %f\"%(BASE_FEE * kb))\n+        sys.exit(1)\n+    if amount < 0.01 and fee < 0.001:\n+        print(\"Rejecting no-fee, tiny-amount transaction\")\n+        print(\"Suggested fee: %f\"%(BASE_FEE * kb))\n+        sys.exit(1)\n+\n+    return txdata\n+\n+def main():\n+    import optparse\n+\n+    parser = optparse.OptionParser(usage=\"%prog [options]\")\n+    parser.add_option(\"--from\", dest=\"fromaddresses\", default=None,\n+                      help=\"addresses to get bitcoins from\")\n+    parser.add_option(\"--to\", dest=\"to\", default=None,\n+                      help=\"address to get send bitcoins to\")\n+    parser.add_option(\"--amount\", dest=\"amount\", default=None,\n+                      help=\"amount to send\")\n+    parser.add_option(\"--fee\", dest=\"fee\", default=\"0.0\",\n+                      help=\"fee to include\")\n+    parser.add_option(\"--datadir\", dest=\"datadir\", default=determine_db_dir(),\n+                      help=\"location of bitcoin.conf file with RPC username/password (default: %default)\")\n+    parser.add_option(\"--testnet\", dest=\"testnet\", default=False, action=\"store_true\",\n+                      help=\"Use the test network\")\n+    parser.add_option(\"--dry_run\", dest=\"dry_run\", default=False, action=\"store_true\",\n+                      help=\"Don't broadcast the transaction, just create and print the transaction data\")\n+\n+    (options, args) = parser.parse_args()\n+\n+    bitcoind = connect_JSON(options.datadir, options.testnet)\n+\n+    if options.amount is None:\n+        address_summary = list_available(bitcoind)\n+        for address,info in address_summary.iteritems():\n+            n_transactions = len(info['outputs'])\n+            if n_transactions > 1:\n+                print(\"%s %.4f %s (%d transactions)\"%(address, info['total'], info['account'], n_transactions))\n+            else:\n+                print(\"%s %.4f %s\"%(address, info['total'], info['account']))\n+    else:\n+        # Sanity check fee (paying more than 1% of amount):\n+        fee = Decimal(options.fee)\n+        amount = Decimal(options.amount)\n+        if fee > amount*Decimal(\"0.01\"):\n+            print(\"Rejecting excessively large fee\")\n+            sys.exit(1);\n+        unlock_wallet(bitcoind)\n+        txdata = create_tx(bitcoind, options.fromaddresses.split(\",\"), options.to, amount, fee)\n+        if options.dry_run:\n+            print(txdata)\n+        else:\n+            txid = bitcoind.sendrawtransaction(txdata)\n+            print(txid)\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  }
]