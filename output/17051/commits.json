[
  {
    "sha": "16f0a186dcee563bb1000e1ffc51da87e7623bc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmYwYTE4NmRjZWU1NjNiYjEwMDBlMWZmYzUxZGE4N2U3NjIzYmM2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-02T08:01:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-11-21T17:52:35Z"
      },
      "message": "tests: Add corpora suppression (FUZZERS_MISSING_CORPORA) for fuzzers missing in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus",
      "tree": {
        "sha": "0ca7a0f74674aadf5c6eab75ab122e297370ff8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ca7a0f74674aadf5c6eab75ab122e297370ff8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16f0a186dcee563bb1000e1ffc51da87e7623bc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f0a186dcee563bb1000e1ffc51da87e7623bc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16f0a186dcee563bb1000e1ffc51da87e7623bc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f0a186dcee563bb1000e1ffc51da87e7623bc6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae6943620ab369e8e0865c3ec2d2848ba9389325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae6943620ab369e8e0865c3ec2d2848ba9389325"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "21dc1047afed870c7e49ca3866caca92cfa35fa1",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f0a186dcee563bb1000e1ffc51da87e7623bc6/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f0a186dcee563bb1000e1ffc51da87e7623bc6/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=16f0a186dcee563bb1000e1ffc51da87e7623bc6",
        "patch": "@@ -12,6 +12,28 @@\n import subprocess\n import logging\n \n+# Fuzzers known to lack a seed corpus in https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus\n+FUZZERS_MISSING_CORPORA = [\n+    \"addr_info_deserialize\",\n+    \"block_file_info_deserialize\",\n+    \"block_filter_deserialize\",\n+    \"block_header_and_short_txids_deserialize\",\n+    \"fee_rate_deserialize\",\n+    \"flat_file_pos_deserialize\",\n+    \"key_origin_info_deserialize\",\n+    \"merkle_block_deserialize\",\n+    \"mutable_transaction_deserialize\",\n+    \"out_point_deserialize\",\n+    \"partial_merkle_tree_deserialize\",\n+    \"partially_signed_transaction_deserialize\",\n+    \"prefilled_transaction_deserialize\",\n+    \"psbt_input_deserialize\",\n+    \"psbt_output_deserialize\",\n+    \"pub_key_deserialize\",\n+    \"script_deserialize\",\n+    \"sub_net_deserialize\",\n+    \"tx_in_deserialize\",\n+]\n \n def main():\n     parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n@@ -100,10 +122,14 @@ def main():\n \n def run_once(*, corpus, test_list, build_dir, export_coverage):\n     for t in test_list:\n+        corpus_path = os.path.join(corpus, t)\n+        if t in FUZZERS_MISSING_CORPORA:\n+            os.makedirs(corpus_path, exist_ok=True)\n         args = [\n             os.path.join(build_dir, 'src', 'test', 'fuzz', t),\n             '-runs=1',\n-            os.path.join(corpus, t),\n+            '-detect_leaks=0',\n+            corpus_path,\n         ]\n         logging.debug('Run {} with args {}'.format(t, args))\n         result = subprocess.run(args, stderr=subprocess.PIPE, universal_newlines=True)"
      }
    ]
  },
  {
    "sha": "897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTc4NDlkOGMyMjUwNDVmMGRkM2EyZmU5OWI1ZDY5YmRmODRiNGUy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-10-03T14:18:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-11-21T17:53:06Z"
      },
      "message": "tests: Add deserialization fuzzing harnesses",
      "tree": {
        "sha": "ffa08860acf6adb50699991166315cc23623eab2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffa08860acf6adb50699991166315cc23623eab2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f0a186dcee563bb1000e1ffc51da87e7623bc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f0a186dcee563bb1000e1ffc51da87e7623bc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f0a186dcee563bb1000e1ffc51da87e7623bc6"
      }
    ],
    "stats": {
      "total": 467,
      "additions": 359,
      "deletions": 108
    },
    "files": [
      {
        "sha": "f287d23024e7c139431b7e5cf0ea714ae066cbff",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
        "patch": "@@ -4,11 +4,15 @@\n \n \n FUZZ_TARGETS = \\\n+  test/fuzz/addr_info_deserialize \\\n   test/fuzz/address_deserialize \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/banentry_deserialize \\\n   test/fuzz/bech32 \\\n   test/fuzz/block_deserialize \\\n+  test/fuzz/block_file_info_deserialize \\\n+  test/fuzz/block_filter_deserialize \\\n+  test/fuzz/block_header_and_short_txids_deserialize \\\n   test/fuzz/blockheader_deserialize \\\n   test/fuzz/blocklocator_deserialize \\\n   test/fuzz/blockmerkleroot \\\n@@ -20,16 +24,30 @@ FUZZ_TARGETS = \\\n   test/fuzz/descriptor_parse \\\n   test/fuzz/diskblockindex_deserialize \\\n   test/fuzz/eval_script \\\n+  test/fuzz/fee_rate_deserialize \\\n+  test/fuzz/flat_file_pos_deserialize \\\n   test/fuzz/inv_deserialize \\\n+  test/fuzz/key_origin_info_deserialize \\\n+  test/fuzz/merkle_block_deserialize \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/netaddr_deserialize \\\n+  test/fuzz/out_point_deserialize \\\n   test/fuzz/parse_iso8601 \\\n+  test/fuzz/partial_merkle_tree_deserialize \\\n+  test/fuzz/partially_signed_transaction_deserialize \\\n+  test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/psbt \\\n+  test/fuzz/psbt_input_deserialize \\\n+  test/fuzz/psbt_output_deserialize \\\n+  test/fuzz/pub_key_deserialize \\\n   test/fuzz/script \\\n+  test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/spanparsing \\\n+  test/fuzz/sub_net_deserialize \\\n   test/fuzz/transaction \\\n+  test/fuzz/tx_in_deserialize \\\n   test/fuzz/txoutcompressor_deserialize \\\n   test/fuzz/txundo_deserialize\n \n@@ -383,6 +401,114 @@ test_fuzz_transaction_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_transaction_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_transaction_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n+test_fuzz_addr_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_addr_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDR_INFO_DESERIALIZE=1\n+test_fuzz_addr_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addr_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addr_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_block_file_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_file_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILE_INFO_DESERIALIZE=1\n+test_fuzz_block_file_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_file_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_file_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_block_filter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_filter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILTER_DESERIALIZE=1\n+test_fuzz_block_filter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_filter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_filter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_block_header_and_short_txids_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_header_and_short_txids_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE=1\n+test_fuzz_block_header_and_short_txids_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_header_and_short_txids_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_header_and_short_txids_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_fee_rate_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_fee_rate_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFEE_RATE_DESERIALIZE=1\n+test_fuzz_fee_rate_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_fee_rate_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_fee_rate_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_flat_file_pos_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_flat_file_pos_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFLAT_FILE_POS_DESERIALIZE=1\n+test_fuzz_flat_file_pos_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_flat_file_pos_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_flat_file_pos_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_key_origin_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_key_origin_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DKEY_ORIGIN_INFO_DESERIALIZE=1\n+test_fuzz_key_origin_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_key_origin_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_key_origin_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_merkle_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_merkle_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMERKLE_BLOCK_DESERIALIZE=1\n+test_fuzz_merkle_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_merkle_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_merkle_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_out_point_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DOUT_POINT_DESERIALIZE=1\n+test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_out_point_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_partially_signed_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_partially_signed_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIALLY_SIGNED_TRANSACTION_DESERIALIZE=1\n+test_fuzz_partially_signed_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_partially_signed_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_partially_signed_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_partial_merkle_tree_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_partial_merkle_tree_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIAL_MERKLE_TREE_DESERIALIZE=1\n+test_fuzz_partial_merkle_tree_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_partial_merkle_tree_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_partial_merkle_tree_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_prefilled_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_prefilled_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPREFILLED_TRANSACTION_DESERIALIZE=1\n+test_fuzz_prefilled_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_prefilled_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_prefilled_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_psbt_input_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_psbt_input_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_INPUT_DESERIALIZE=1\n+test_fuzz_psbt_input_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_psbt_input_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_psbt_input_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_psbt_output_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_psbt_output_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_OUTPUT_DESERIALIZE=1\n+test_fuzz_psbt_output_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_psbt_output_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_psbt_output_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_pub_key_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_pub_key_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPUB_KEY_DESERIALIZE=1\n+test_fuzz_pub_key_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_pub_key_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_pub_key_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_script_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_script_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSCRIPT_DESERIALIZE=1\n+test_fuzz_script_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_sub_net_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_sub_net_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSUB_NET_DESERIALIZE=1\n+test_fuzz_sub_net_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_sub_net_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_sub_net_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n+test_fuzz_tx_in_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_tx_in_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTX_IN_DESERIALIZE=1\n+test_fuzz_tx_in_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_tx_in_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_in_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+\n endif # ENABLE_FUZZ\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "46bc38fdabac579152096261a6381ed51767f901",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 216,
        "deletions": 102,
        "changes": 318,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
        "patch": "@@ -5,18 +5,24 @@\n #include <addrdb.h>\n #include <addrman.h>\n #include <blockencodings.h>\n+#include <blockfilter.h>\n #include <chain.h>\n #include <coins.h>\n #include <compressor.h>\n #include <consensus/merkle.h>\n+#include <key.h>\n+#include <merkleblock.h>\n #include <net.h>\n #include <primitives/block.h>\n #include <protocol.h>\n+#include <psbt.h>\n #include <pubkey.h>\n+#include <script/keyorigin.h>\n #include <streams.h>\n #include <undo.h>\n #include <version.h>\n \n+#include <stdexcept>\n #include <stdint.h>\n #include <unistd.h>\n \n@@ -37,129 +43,237 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         int nVersion;\n         ds >> nVersion;\n         ds.SetVersion(nVersion);\n-    } catch (const std::ios_base::failure& e) {\n+    } catch (const std::ios_base::failure&) {\n         return;\n     }\n \n-#if BLOCK_DESERIALIZE\n-            try\n-            {\n-                CBlock block;\n-                ds >> block;\n-            } catch (const std::ios_base::failure& e) {return;}\n+#if BLOCK_FILTER_DESERIALIZE\n+    try {\n+        BlockFilter block_filter;\n+        ds >> block_filter;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif ADDR_INFO_DESERIALIZE\n+    try {\n+        CAddrInfo addr_info;\n+        ds >> addr_info;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif BLOCK_FILE_INFO_DESERIALIZE\n+    try {\n+        CBlockFileInfo block_file_info;\n+        ds >> block_file_info;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif BLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE\n+    try {\n+        CBlockHeaderAndShortTxIDs block_header_and_short_txids;\n+        ds >> block_header_and_short_txids;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif FEE_RATE_DESERIALIZE\n+    try {\n+        CFeeRate fee_rate;\n+        ds >> fee_rate;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif MERKLE_BLOCK_DESERIALIZE\n+    try {\n+        CMerkleBlock merkle_block;\n+        ds >> merkle_block;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif OUT_POINT_DESERIALIZE\n+    try {\n+        COutPoint out_point;\n+        ds >> out_point;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PARTIAL_MERKLE_TREE_DESERIALIZE\n+    try {\n+        CPartialMerkleTree partial_merkle_tree;\n+        ds >> partial_merkle_tree;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PUB_KEY_DESERIALIZE\n+    try {\n+        CPubKey pub_key;\n+        ds >> pub_key;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif SCRIPT_DESERIALIZE\n+    try {\n+        CScript script;\n+        ds >> script;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif SUB_NET_DESERIALIZE\n+    try {\n+        CSubNet sub_net;\n+        ds >> sub_net;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif TX_IN_DESERIALIZE\n+    try {\n+        CTxIn tx_in;\n+        ds >> tx_in;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif FLAT_FILE_POS_DESERIALIZE\n+    try {\n+        FlatFilePos flat_file_pos;\n+        ds >> flat_file_pos;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif KEY_ORIGIN_INFO_DESERIALIZE\n+    try {\n+        KeyOriginInfo key_origin_info;\n+        ds >> key_origin_info;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PARTIALLY_SIGNED_TRANSACTION_DESERIALIZE\n+    try {\n+        PartiallySignedTransaction partially_signed_transaction;\n+        ds >> partially_signed_transaction;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PREFILLED_TRANSACTION_DESERIALIZE\n+    try {\n+        PrefilledTransaction prefilled_transaction;\n+        ds >> prefilled_transaction;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PSBT_INPUT_DESERIALIZE\n+    try {\n+        PSBTInput psbt_input;\n+        ds >> psbt_input;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif PSBT_OUTPUT_DESERIALIZE\n+    try {\n+        PSBTOutput psbt_output;\n+        ds >> psbt_output;\n+    } catch (const std::ios_base::failure&) {\n+    }\n+#elif BLOCK_DESERIALIZE\n+    try {\n+        CBlock block;\n+        ds >> block;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKLOCATOR_DESERIALIZE\n-            try\n-            {\n-                CBlockLocator bl;\n-                ds >> bl;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlockLocator bl;\n+        ds >> bl;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKMERKLEROOT\n-            try\n-            {\n-                CBlock block;\n-                ds >> block;\n-                bool mutated;\n-                BlockMerkleRoot(block, &mutated);\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlock block;\n+        ds >> block;\n+        bool mutated;\n+        BlockMerkleRoot(block, &mutated);\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif ADDRMAN_DESERIALIZE\n-            try\n-            {\n-                CAddrMan am;\n-                ds >> am;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CAddrMan am;\n+        ds >> am;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKHEADER_DESERIALIZE\n-            try\n-            {\n-                CBlockHeader bh;\n-                ds >> bh;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlockHeader bh;\n+        ds >> bh;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BANENTRY_DESERIALIZE\n-            try\n-            {\n-                CBanEntry be;\n-                ds >> be;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBanEntry be;\n+        ds >> be;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif TXUNDO_DESERIALIZE\n-            try\n-            {\n-                CTxUndo tu;\n-                ds >> tu;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CTxUndo tu;\n+        ds >> tu;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKUNDO_DESERIALIZE\n-            try\n-            {\n-                CBlockUndo bu;\n-                ds >> bu;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBlockUndo bu;\n+        ds >> bu;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif COINS_DESERIALIZE\n-            try\n-            {\n-                Coin coin;\n-                ds >> coin;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        Coin coin;\n+        ds >> coin;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif NETADDR_DESERIALIZE\n-            try\n-            {\n-                CNetAddr na;\n-                ds >> na;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CNetAddr na;\n+        ds >> na;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif SERVICE_DESERIALIZE\n-            try\n-            {\n-                CService s;\n-                ds >> s;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CService s;\n+        ds >> s;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif MESSAGEHEADER_DESERIALIZE\n-            CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n-            try\n-            {\n-                CMessageHeader mh(pchMessageStart);\n-                ds >> mh;\n-                if (!mh.IsValid(pchMessageStart)) {return;}\n-            } catch (const std::ios_base::failure& e) {return;}\n+    CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n+    try {\n+        CMessageHeader mh(pchMessageStart);\n+        ds >> mh;\n+        (void)mh.IsValid(pchMessageStart);\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif ADDRESS_DESERIALIZE\n-            try\n-            {\n-                CAddress a;\n-                ds >> a;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CAddress a;\n+        ds >> a;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif INV_DESERIALIZE\n-            try\n-            {\n-                CInv i;\n-                ds >> i;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CInv i;\n+        ds >> i;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOOMFILTER_DESERIALIZE\n-            try\n-            {\n-                CBloomFilter bf;\n-                ds >> bf;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CBloomFilter bf;\n+        ds >> bf;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif DISKBLOCKINDEX_DESERIALIZE\n-            try\n-            {\n-                CDiskBlockIndex dbi;\n-                ds >> dbi;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        CDiskBlockIndex dbi;\n+        ds >> dbi;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif TXOUTCOMPRESSOR_DESERIALIZE\n-            CTxOut to;\n-            CTxOutCompressor toc(to);\n-            try\n-            {\n-                ds >> toc;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    CTxOut to;\n+    CTxOutCompressor toc(to);\n+    try {\n+        ds >> toc;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKTRANSACTIONS_DESERIALIZE\n-            try\n-            {\n-                BlockTransactions bt;\n-                ds >> bt;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        BlockTransactions bt;\n+        ds >> bt;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #elif BLOCKTRANSACTIONSREQUEST_DESERIALIZE\n-            try\n-            {\n-                BlockTransactionsRequest btr;\n-                ds >> btr;\n-            } catch (const std::ios_base::failure& e) {return;}\n+    try {\n+        BlockTransactionsRequest btr;\n+        ds >> btr;\n+    } catch (const std::ios_base::failure&) {\n+    }\n #else\n #error Need at least one fuzz target to compile\n #endif"
      },
      {
        "sha": "fefafda36bd78b66b9863397d009b0d2321f760f",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
        "patch": "@@ -26,19 +26,31 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         int nVersion;\n         ds >> nVersion;\n         ds.SetVersion(nVersion);\n-    } catch (const std::ios_base::failure& e) {\n+    } catch (const std::ios_base::failure&) {\n         return;\n     }\n-    bool valid = true;\n+    bool valid_tx = true;\n     const CTransaction tx = [&] {\n         try {\n             return CTransaction(deserialize, ds);\n-        } catch (const std::ios_base::failure& e) {\n-            valid = false;\n+        } catch (const std::ios_base::failure&) {\n+            valid_tx = false;\n             return CTransaction();\n         }\n     }();\n-    if (!valid) {\n+    bool valid_mutable_tx = true;\n+    CDataStream ds_mtx(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    CMutableTransaction mutable_tx;\n+    try {\n+        int nVersion;\n+        ds_mtx >> nVersion;\n+        ds_mtx.SetVersion(nVersion);\n+        ds_mtx >> mutable_tx;\n+    } catch (const std::ios_base::failure&) {\n+        valid_mutable_tx = false;\n+    }\n+    assert(valid_tx == valid_mutable_tx);\n+    if (!valid_tx) {\n         return;\n     }\n "
      },
      {
        "sha": "ffebb579e7fee6947260b4b728b7f753fd20c94d",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/897849d8c225045f0dd3a2fe99b5d69bdf84b4e2/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=897849d8c225045f0dd3a2fe99b5d69bdf84b4e2",
        "patch": "@@ -22,7 +22,6 @@\n     \"flat_file_pos_deserialize\",\n     \"key_origin_info_deserialize\",\n     \"merkle_block_deserialize\",\n-    \"mutable_transaction_deserialize\",\n     \"out_point_deserialize\",\n     \"partial_merkle_tree_deserialize\",\n     \"partially_signed_transaction_deserialize\","
      }
    ]
  }
]