practicalswift,2021-04-07 09:29:43,"Concept ACK\n\nThanks for making `src/test/fuzz/` an even better place!",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814764430,814764430,
MarcoFalke,2021-04-07 09:31:41,"Can the uninitialized read also happen in i2p? (The `Wait` return code is ignored here):\n\n```\nsrc/i2p.cpp=bool Session::Accept(Connection& conn)\nsrc/i2p.cpp-{\nsrc/i2p.cpp-    try {\nsrc/i2p.cpp-        while (!*m_interrupt) {\nsrc/i2p.cpp-            Sock::Event occurred;\nsrc/i2p.cpp:            conn.sock->Wait(MAX_WAIT_FOR_IO, Sock::RECV, &occurred);\nsrc/i2p.cpp-\nsrc/i2p.cpp-   ",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814765659,814765659,
MarcoFalke,2021-04-07 09:32:17,"review-only ACK d2e8d121eff98f9bbc3f15977bfb1dda9a27245a üìß\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview-only ACK d2e8d121eff98f9bbc3f15977bfb1dda9a27245a üìß\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg1aQv/aeRus5hrRnP5M5V3tAv4J17uP4",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814766021,814766021,
vasild,2021-04-07 12:20:50,"> Can the uninitialized read also happen in i2p? (The `Wait` return code is ignored here):\n\nRight! Addressed in https://github.com/bitcoin/bitcoin/pull/21631.\n\n",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814869328,814869328,
practicalswift,2021-04-07 21:00:33,"Consider adding `[[nodiscard]]` to `Wait`: such an annotation would likely have saved us from the uninitialized read reported in #21617.\n\n`[[nodiscard]]` is great for functions where an ignored return value is likely to be unintentional (like in this case!). I think we underuse `[[nodiscard]]` :)",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-815259976,815259976,
MarcoFalke,2021-04-08 07:18:22,"review ACK 841905bb61e34faa97b34f4f0c97f7581092a988 üç∞\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 841905bb61e34faa97b34f4f0c97f7581092a988 üç∞\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhL0Av/boScIgVINXDYMJ262ndgfw3HxUyP9JYZLZ/L",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-815515930,815515930,
vasild,2021-04-09 12:17:41,"@practicalswift, I will do `[[nodiscard]]` in a separate PR, once #21631 is merged.",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-816641699,816641699,
vasild,2021-04-12 13:53:40,`Sock` methods flagged with `[[nodiscard]]` in https://github.com/bitcoin/bitcoin/pull/21659.,https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-817831550,817831550,
DrahtBot,2021-04-14 11:59:16,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-819462801,819462801,
vasild,2021-04-15 06:53:23,`841905bb6...549c82ad3`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-820166117,820166117,
practicalswift,2021-04-15 07:12:22,cr ACK 549c82ad3a34a885ecca37a5f04c36dfbaa95d17: patch looks correct and touches only `src/test/fuzz/`,https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-820177233,820177233,
MarcoFalke,2021-04-15 08:46:28,"re-ACK 549c82ad3a34a885ecca37a5f04c36dfbaa95d17 only change is rebase üé¨\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 549c82ad3a34a885ecca37a5f04c36dfbaa95d17 only change is rebase üé¨\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjNUwv5",https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-820242333,820242333,
MarcoFalke,2021-04-07 09:32:48,"If you want you can remove the `!`, now that you are breaking the input format anyway",https://github.com/bitcoin/bitcoin/pull/21630#discussion_r608495069,608495069,src/test/fuzz/util.cpp
vasild,2021-04-07 09:43:05,Done.,https://github.com/bitcoin/bitcoin/pull/21630#discussion_r608502130,608502130,src/test/fuzz/util.cpp
practicalswift,2021-04-09 14:56:18,"Not changed in this PR, but is there any scenario where we want `m_socket !=  INVALID_SOCKET` here?\n\nOtherwise I'd prefer going with `INVALID_SOCKET`. Perhaps `Sock::m_socket` could be default initialized to `INVALID_SOCKET`. That should be a safe default.",https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610694541,610694541,src/test/fuzz/util.cpp
vasild,2021-04-09 15:23:53,"Normally we want the fuzzed socket's `m_socket` to be `!= INVALID_SOCKET`, otherwise a code that does `if (sock.Get() == INVALID_SOCKET)` will ""misbehave"" when mocked.",https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610715093,610715093,src/test/fuzz/util.cpp
practicalswift,2021-04-09 15:50:07,"@vasild Oh, I didn't think about the possibility to peek at `m_socket` via `Get()`. But then I guess we want two cases: 1.)  `m_socket == INVALID_SOCKET`, and 2.) `m_socket != INVALID_SOCKET` where `m_socket` is a very high number which is unlikely to coincide with a real opened file descriptor?\n\nThe current code allows `m_socket ` to be set to low numbers such as `0`, `1`, `2`, `3`, etc which",https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610733459,610733459,src/test/fuzz/util.cpp
practicalswift,2021-04-09 15:56:20,"Perhaps `m_socket = fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET)`?",https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610737620,610737620,src/test/fuzz/util.cpp
vasild,2021-04-12 08:09:01,"Right! And we can do even better:\n\n* add a method to check if the `Sock` object ""owns"" a socket, similar to [`std::unique_ptr::operator bool()`](https://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool) so that callers don't do `Get() == INVALID_SOCKET`.\n* Add wrapper methods for `getsockname()`, `setsockopt()`, `bind()` and `listen()`. That way more code will be mockable, but more ",https://github.com/bitcoin/bitcoin/pull/21630#discussion_r611413951,611413951,src/test/fuzz/util.cpp
practicalswift,2021-04-12 09:09:03,@vasild Sounds good! Until we have that in place I think it makes sense to set `m_socket` to very high numbers here to avoid nasty surprises :)  The thought of random reads/writes to existing open file descriptors is a bit scary even if only from fuzzing code.,https://github.com/bitcoin/bitcoin/pull/21630#discussion_r611456364,611456364,src/test/fuzz/util.cpp
vasild,2021-04-15 06:10:45,Low fd values avoided in https://github.com/bitcoin/bitcoin/pull/21677.,https://github.com/bitcoin/bitcoin/pull/21630#discussion_r613781614,613781614,src/test/fuzz/util.cpp
vasild,2021-04-15 15:19:45,"> Add wrapper methods for ...\n\nDone in https://github.com/bitcoin/bitcoin/pull/21700",https://github.com/bitcoin/bitcoin/pull/21630#discussion_r614164737,614164737,src/test/fuzz/util.cpp
