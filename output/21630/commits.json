[
  {
    "sha": "5198a02de4e7a1b0efe28c6095745ce59f7f98c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTk4YTAyZGU0ZTdhMWIwZWZlMjhjNjA5NTc0NWNlNTlmN2Y5OGM0",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-07T08:58:48Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T06:19:44Z"
      },
      "message": "style: remove extra white space",
      "tree": {
        "sha": "b9585912a28586b8108db18b70c08fd24be30042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9585912a28586b8108db18b70c08fd24be30042"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5198a02de4e7a1b0efe28c6095745ce59f7f98c4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB32wEACgkQVN8G9ktV\ny7+LmB/6AnDSJRwUqQJ7zPUu4nWQP8tvDbYH2haFUtDam8xIbir3wICTyybkBNC0\neUKPWtUM0ILeMs830uBAq71diFTck/+tU8Jzd0Vg/FEC7/ho2714ZHDG8yEnW44m\njqAMvlf+L3dvdicu2sLZOi+31cQeuDlm8ivME3BDRPUTJ84PREhIWW28av5cmqsw\nivp+5on5SyyXK16+4F2EkWH6NosKsG45H6QBcwYLcmkmlOhpJBq22eIM1kgNabCY\nDDu87qvq8Im0BVySluujiwewoUF1sJssFYvecPbcwM8WoEhr4YU/p886cB2hK56N\nL4kATdS5ZAEidZIPKnBor0rZg/ORTIWgCaqbrO8vMuwwzjQ09ETPD9aJENsr9xTw\nacCjm2dxly9ga57eR6Qpwu1t4QmmJxoMDfGZhC7pI8xTSNZ/M6/OerKG4tf+CXho\nCu+skpGqoX9y/YzHl6bo6/qZ1PFO3AhdJBqZO7NnvB+scn5hixUw+YhsPu46W4LJ\nAHL+ghLzcxgXzhivYbhYXkMAk/ckS8CXtIfpWh2PFGX9bR3P9Usen91KOaGpch7S\nWywdsXrI6PlYRznor7uXjzZ/29hUdB7pnNj8Zq8QPzeCc6RyBzUShXBYl0NC82ZP\nJsnLoBZo760VFBCDv8Yv7dpa/inyZz5gC0FTWLNrphvkedXYnK2C/AtrQxRqjQFQ\n/PIuTlAIQnwoxUfZWWFeQNKqZC7H/jRmtmy6ehtZP6GKeQ8qCBry//M4QA56V6a6\nAngVpUUN7fSWzCLynEAORaDjSqaIGDx7D63adovdfbkHFFidRs+hVYK9xpspqBYq\nQC/5xblfpf5Xb0qmspb6lgYXw7SowzfuL8ixXjMpSHirNR5REFp8EqtFdwHwq6Us\nO5Gn+gEduoXruLncMpw/WlWmnS6gX4MJHMhzGeTOsOzouJ1RRnnXcR1ElfiZZrqm\nt1y8Z+rK1weHvF2AmrNlSY4hHGvioAPdMu3KDKZs3bOdt1v9L7w4NmY46AHI200H\n2P6DXTt2joje2UHqz3w8r5Z6X3uPbyF6p3OxC8f0fnOzWq6LZ8vTIc1yz93hlCpM\n4xWDK0KdT2/6H6kSrgp/CGEhmMgEnbsCYqTNwOX4ltEa7lrSdcyC+px5nLhYB2se\naTDnkdEeys19/hns5WsWzjbWkp7yXkRgoHr4P5E+lsY9QxhdqslD1AqvtJp8ybFX\nmlmk9nM8yjebDpeOuxFdUQUriWjoC5lekheFFXzcdClr6koybEjJXCi6ztPBM0hd\n0/OymOn4lfcWegNjQgoJH7+pxBkxaY7zjROK9RMZUINR+TsrJVRPFGx78uEx5cpY\naMwze7/jvJKXfVb0pe3DMELxeohWzQ==\n=qcyf\n-----END PGP SIGNATURE-----",
        "payload": "tree b9585912a28586b8108db18b70c08fd24be30042\nparent 9712f75746e3da73471da2e23a4bfc1382c69308\nauthor Vasil Dimov <vd@FreeBSD.org> 1617785928 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618467584 +0200\n\nstyle: remove extra white space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5198a02de4e7a1b0efe28c6095745ce59f7f98c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5198a02de4e7a1b0efe28c6095745ce59f7f98c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5198a02de4e7a1b0efe28c6095745ce59f7f98c4/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9712f75746e3da73471da2e23a4bfc1382c69308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9712f75746e3da73471da2e23a4bfc1382c69308",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9712f75746e3da73471da2e23a4bfc1382c69308"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2da0e841162c73d516b45dad258377fc88c55468",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5198a02de4e7a1b0efe28c6095745ce59f7f98c4/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5198a02de4e7a1b0efe28c6095745ce59f7f98c4/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=5198a02de4e7a1b0efe28c6095745ce59f7f98c4",
        "patch": "@@ -7,7 +7,7 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     if (!m_fuzzed_data_provider.ConsumeBool()) {\n         return false;"
      }
    ]
  },
  {
    "sha": "0c90ff1429deaa556c0509c13cdd5aef5df9c0d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzkwZmYxNDI5ZGVhYTU1NmMwNTA5YzEzY2RkNWFlZjVkZjljMGQ0",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-07T09:02:25Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T06:19:48Z"
      },
      "message": "fuzz: set errno from FuzzedSock::Wait() if it simulates a failure",
      "tree": {
        "sha": "60aaabffdc4c394eb5421c3bfe1d3ab1e4cfcf92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60aaabffdc4c394eb5421c3bfe1d3ab1e4cfcf92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB32wUACgkQVN8G9ktV\ny7+VCSAAqGA/P94IOVoouYKDaFglMxFBwJMetTOOrCdX2ojfu4cnse8ynyOwBPzi\nNJgmlhSKILdLv/VA8kUDqaTKr7uf03rUs8nTSAzM19dN2WLkotQ9KwhWKBF4vMnw\nI+nusGiq75+pQUuWdbVMXt0N5Qei2NM9i5w/JICatWdREJURJLiMvO+WmCiH698p\nGbQxYcoRSluGau20+8FCeIcf6BcWGRB9pvU0a7RTTVqfpWyJnebZXTE2rFrCdqOu\nP7a634RAgtmyCLoSflMU1JZBWm0ZU1aErr3S/MmaKSRHaLL6PcHK/Uq0Q9YieaaQ\nUdWcX5kUXiRg/iNYmthIcH9QWcaisrjNqe0sbHKZb/poCtlXgKtOW0aCYvl8fYmG\npZG+YM+nyOkhvv5tawkHn8e3UqY2nPbf9/vY11c7+JCy6/Hm5LYdE2Xgm+vnunf6\nNNqVsfB3N5vovhFUMys4WAC6ksc0nGs5Zlah9gr4w/D+oIogb4oguO+yKhuL81GL\n5bcZfiwIJAncmy6VGBr2EoR3eqdJyx87K5dtO3kz/UuVkAIFcseERR3vxbPVYamU\nesDcmUWhznEoNdSeQqPLRZtJou51/87XbUCiq8HE87+nAMbS8ztsZOfJS7biiHbw\n/0GcGykXbO36dH7RFEE6H+QboPuT2M5e+kzT2co5uKGcqAA4pNz2MN56W9OTYmBR\nRPr4ehWQrR2nV3zlSFxeL0HZZajY7dPJTZnkTocgpSNQer2aMdObbUKrtaskVe3T\nzCQd3xVYQq+iRT4atgWhQz4SjsoJRXBTYoPqZcH1ewuXDi8raHr1kkqD9usUVihZ\nBfe/5IFr7w/HGNGU5Y4NocHYdHq17UK2PWrv6e0SF6xgQd+Q3F4wV69JJlz/V6mv\nOc1YxD3djWR3MZh0sqxyK9Rh8FOA6Ibsc5tWy3ALiieKfDvq50Ccw6szf1Cdx74X\nhY2aWimBvA4wFJhSM+L/vYTIYOc/fat/TW4VGR37dp4thcVCIZRZni18yAAy2B+r\nWh49BnrPWLOJZpRKc1GmM5JxSugBMf9RtEFdBjtC3Ay3SXf2769chWh8JPNCGgRd\nHyJZ/DKbYlW/urcw15QQ5SV4hjvuYjXxcqhxFGfasvhauaMnTBdTFZfwo+qQQoIu\nSTyoEP5KhBCacMiqyFAxqnBUbvEfmGG3dRphw/o2f8JjLTbhN2dHrl1Dy9vqWviO\nCES0RE2ZDLv0VsHQOfmdKvdiNiW3gXtYjmx495pdUso35R2fToEkJ6LS311MrYXS\n3E3ct5oK0B0c7SnvOfbVQHXvUz0D99qqIYhoTtYSfYDGDlS3KUT+zeAb0EmIV2MV\nF7s3+ONMhEAFUUX0mnwGVeXrViC9og==\n=4RwM\n-----END PGP SIGNATURE-----",
        "payload": "tree 60aaabffdc4c394eb5421c3bfe1d3ab1e4cfcf92\nparent 5198a02de4e7a1b0efe28c6095745ce59f7f98c4\nauthor Vasil Dimov <vd@FreeBSD.org> 1617786145 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618467588 +0200\n\nfuzz: set errno from FuzzedSock::Wait() if it simulates a failure\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5198a02de4e7a1b0efe28c6095745ce59f7f98c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5198a02de4e7a1b0efe28c6095745ce59f7f98c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5198a02de4e7a1b0efe28c6095745ce59f7f98c4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9ab7145b8a0ae1b0beb5df83235c8fc640af87f9",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=0c90ff1429deaa556c0509c13cdd5aef5df9c0d4",
        "patch": "@@ -9,7 +9,13 @@\n \n bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n+    constexpr std::array wait_errnos{\n+        EBADF,\n+        EINTR,\n+        EINVAL,\n+    };\n     if (!m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, wait_errnos);\n         return false;\n     }\n     if (occurred) *occurred = 0;"
      }
    ]
  },
  {
    "sha": "9668e43d8e757c0185b900eb6ee6891a0ba41666",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjY4ZTQzZDhlNzU3YzAxODViOTAwZWI2ZWU2ODkxYTBiYTQxNjY2",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-07T09:03:26Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T06:19:49Z"
      },
      "message": "fuzz: make FuzzedSock::Wait() sometimes simulate an occurred event",
      "tree": {
        "sha": "ec0b4dc23d942d61103a7fc1b8351a4304daf700",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec0b4dc23d942d61103a7fc1b8351a4304daf700"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9668e43d8e757c0185b900eb6ee6891a0ba41666",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB32wUACgkQVN8G9ktV\ny786bh/+I+usi2+uVvKUDNx7iBgfaqs2wNWlqxfuJJHb5pD8fLqKPoBrM4gUETTr\niF4uFrJHf3H3Z91yCgfTUYueADxdauGyIxCDvJqP+eapWdm4UegAt6fSGPc47vr6\n8ZlMfwRSzYywJHTUqo7Ba5Fs8deOj/XYwNmrDFAFDvCxq4AjPfxbcV5n2hE42eow\nnEwWawrs0l/cYuYSO8WCQgCMl4O9j92cc+hU7lHcc7LGj22DBIB3b6+s350YxJAX\nsLL7Lkr7IwfI5uLVH+q2VuPZzNubf5olXPxF10lhJ6PuiwanmxlJ+XwZc/xics5y\nOznFc2uXjOcyHwLuLSEcVCGgtISJykl+0LlY3iiLffsdVu7vzZtTT6x+CeP+QyBW\nZlVn8H9HanoGiwL7ObUKKvv2E7dprFEaIfIjQqej+pPfO9G+y5K6+Ca89Uii5rtn\noVxdi9pphYX457lXTNcTIFHWWQ/VGXilwqOEmMbz1fXjKGHWnSmeCKerWVqO0Bk0\nq4vVIwaQyOmTcpJe+5PDUz8ECKIrEwnqtI4H/8VYWwrymMvLs/iVIVm09e/BHN3F\nuQV/BvF9JlQZE7kDRqR4NvuxAgHqopuKF6UFAvGVwW2wGvzJC7cWPHDkwYKrs/g0\nyU/b9+wXV7dyy58XzDQ91GHSokRzLrVcXLXL1tzR2u8+CNoeQzpXKvnUgmP5lECl\n6/gqpe12X80sMzKsWM5OlIPl3NLHRDhyUxvZfQtuNy+xTyw9p4B3Hmr3ZfJ7cxpz\n6PlgAVW3aTTIq4Hf0taHP/9FhLHNaO/bQHP/ErgPRxrSw6+/2/ZSqNE/zO4usi1f\nf6AbuyAwNECaQoUWx0AzppmZImUTuOYijfmig11slHId4GyDD7Ec75HZ8yfaQ1zv\neHs4PRoI94b93lnWlHl8mwKanePK2Q8xhWT32Yq6b2SF0gNZLlUJgKoIBOo1GIPk\nM2Q/1VAy51luPgKkwk3wwx0UJZNixA5arFv6iHIj7+YxLgjx4/G8uE6IxMOKTFPl\n0D5dxyKjkHXsloLMcFS6VfZRz6jhkpx+M0S7cOAph3Z81Nz3bQVh/Bkd3D7S1AM/\nAM2E1EVpEFbrcY/yls2pA/nHFNhz7xeTZLgoif/hcO4Ss0ZDlzTyKPZYcvPRF1te\nfwFiSxm/uzIId59qyXwftY6oSNeW2x23Dpy738ZxccZx4xF7t5+c+b99JE0LY6fB\nRZmQtMdQ52Nkz/SPxq0ZmCWj5QRmBtABym2Ij/jROfMQdqVHzX0SLIQ07d/wiIbi\nvbCUV7V2Q81Dcppva6e+m5ZXfJD8hvvJW3EQImhJcALU2JtCAciGy6OB2rcUniir\nqJfCJ8K9mKUs7jxVSESj//OXuL2fTg==\n=GHPL\n-----END PGP SIGNATURE-----",
        "payload": "tree ec0b4dc23d942d61103a7fc1b8351a4304daf700\nparent 0c90ff1429deaa556c0509c13cdd5aef5df9c0d4\nauthor Vasil Dimov <vd@FreeBSD.org> 1617786206 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618467589 +0200\n\nfuzz: make FuzzedSock::Wait() sometimes simulate an occurred event\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9668e43d8e757c0185b900eb6ee6891a0ba41666",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9668e43d8e757c0185b900eb6ee6891a0ba41666",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9668e43d8e757c0185b900eb6ee6891a0ba41666/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c90ff1429deaa556c0509c13cdd5aef5df9c0d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c90ff1429deaa556c0509c13cdd5aef5df9c0d4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d16c5afac78d51c6ccbc1a520e5b4c13cdc426a9",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9668e43d8e757c0185b900eb6ee6891a0ba41666/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9668e43d8e757c0185b900eb6ee6891a0ba41666/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=9668e43d8e757c0185b900eb6ee6891a0ba41666",
        "patch": "@@ -18,7 +18,9 @@ bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event*\n         SetFuzzedErrNo(m_fuzzed_data_provider, wait_errnos);\n         return false;\n     }\n-    if (occurred) *occurred = 0;\n+    if (occurred != nullptr) {\n+        *occurred = m_fuzzed_data_provider.ConsumeBool() ? requested : 0;\n+    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "29ae1c13a59187119f5b2a38b54dbbec936d8f87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWFlMWMxM2E1OTE4NzExOWY1YjJhMzhiNTRkYmJlYzkzNmQ4Zjg3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-07T08:18:39Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T06:51:36Z"
      },
      "message": "fuzz: split FuzzedSock interface and implementation\n\nMove the `FuzzedSock`'s implementation from `src/test/fuzz/util.h` to\n`src/test/fuzz/util.cpp`.\n\nA separate interface and implementation make the code more readable for\nconsumers who don't need to (better not) know the implementation\ndetails.",
      "tree": {
        "sha": "26f94e0b274e4fd060f7c54e5b7178ba363ce3d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26f94e0b274e4fd060f7c54e5b7178ba363ce3d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29ae1c13a59187119f5b2a38b54dbbec936d8f87",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB34noACgkQVN8G9ktV\ny7+0xh//ZIKzyMayAKa1i0XMl+J2T7FULn2SRvIDEoSrJ/nOehset9Q6u5WOS8Fk\nJO1q+wi8TOrhR76rX8TJyLYdO/mrqsCCs10kQlmRPrkAH9jH4sDxTDNcqhDFFjSM\nA5XrFJxD7cRk4/412gUI53rvXtxYzbhdwLteEkUNvn6lGB4YQedvde3+gfdhayA7\nNkoRLvWFz/9WwHUwe4/wrns1LOiPhQTRbx3JJHXZxEoOfusEt6tooGqA+3AL+SUG\nSmdRZW2557uDhqhdqROHVso2EtI9Q1liCAc/DFcH981kJsyHRyDSLxYBZfeybhT0\n9+2B7ctuTJf8YdceKLxXwuLAVRhpudb0Zix2AuxArJ91hA+ZhBevKHIjfITZgh14\ndY+bkuqH3MgywwYgLVgePCrLLz07rSYb6ihm8Z7/OIed51pi+cesStEF6wqDdfyG\n9N9/EOwy22ol4i5u7kNzHDl+VO8C0NGXtk3lEdu0FAfd2FKvWycQWYv6V6+AVjPd\nUSaClP+1o8BRwwz6v5bbHJQU0sBMLXP6j2PkWLTSIZ+Df9M/8XTf+DONIyV/jB3O\naxfInbmSNUn58W872eUdry0DyXHKw7N3+jMUHGW4UcOWRzottmtxtivhuq9H3npr\ng7FYBKIei6zzBtRGHhLxwUyqZkeN8NQO+dzH8EZIQdvPgDyJi9OKNvmGwcxfa8h2\nIxY/eXlKzG1qBpZIzzy+7iupHdEDi4z8QZGfUiC8ictirWw6W3nu1c3xM6pBpMUi\nebQHNghzIpCN66663G7VMOWDozeygosjXYHRQGptExg3k/Bk7h6CWOuj9nL5eiLZ\n8RTY1NcdaizraarD/rurN7FwieW8AM7tge8ZqbKEskXsNbzdH9tjhV3ldwPlDCO2\nwH7DMT+0HxVm/nzxJtBHeUWpI7+THml09sT4p28jaa0vfsZn/Uku7K/ZQgw9CSTW\nx2bTNK8jG0LOKrciWNoTsBuAhN8pqT+svjAy5W55Dqh3pptJrhXCwLdqJ9rsR/5r\nBNBz+U1doiYk8+LowmtJc3tHg2Q8/EjT1DqgHWrf2S+3yRDipXfNC540W2FtvEfj\nMVbHPln094rY6NZ1uo37i28Ur2gpQwHhIVgxM1sJgwoacKjIqpDwCLrLnnp90d74\nucWAZQm2R2Si+nSEl3SZUX4z6x1DXMlr6zuv84SVdNcdh2fgbeI85rd/S9OCpk5Z\nvhJgbwtFxFT2EZYeDM7/f85TYrmWstbiwlaRBrkLxJwjmrobXYE6wputnHTOU7Oa\nzy22V69VtkBwn99Hq8RX1jYmUGK/QDo/yBAl9fcnPH6btjIq3dGmGHC0goxRRCJr\nmXGddw1D0+aXtPfwntfiZdMdy9yv/A==\n=IXi+\n-----END PGP SIGNATURE-----",
        "payload": "tree 26f94e0b274e4fd060f7c54e5b7178ba363ce3d5\nparent 9668e43d8e757c0185b900eb6ee6891a0ba41666\nauthor Vasil Dimov <vd@FreeBSD.org> 1617783519 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618469496 +0200\n\nfuzz: split FuzzedSock interface and implementation\n\nMove the `FuzzedSock`'s implementation from `src/test/fuzz/util.h` to\n`src/test/fuzz/util.cpp`.\n\nA separate interface and implementation make the code more readable for\nconsumers who don't need to (better not) know the implementation\ndetails.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ae1c13a59187119f5b2a38b54dbbec936d8f87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29ae1c13a59187119f5b2a38b54dbbec936d8f87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ae1c13a59187119f5b2a38b54dbbec936d8f87/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9668e43d8e757c0185b900eb6ee6891a0ba41666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9668e43d8e757c0185b900eb6ee6891a0ba41666",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9668e43d8e757c0185b900eb6ee6891a0ba41666"
      }
    ],
    "stats": {
      "total": 345,
      "additions": 182,
      "deletions": 163
    },
    "files": [
      {
        "sha": "f772bc01d8d083443867952b222b2294096f02b6",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 173,
        "deletions": 0,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29ae1c13a59187119f5b2a38b54dbbec936d8f87/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29ae1c13a59187119f5b2a38b54dbbec936d8f87/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=29ae1c13a59187119f5b2a38b54dbbec936d8f87",
        "patch": "@@ -7,6 +7,170 @@\n #include <util/rbf.h>\n #include <version.h>\n \n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n+{\n+    m_socket = fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET);\n+}\n+\n+FuzzedSock::~FuzzedSock()\n+{\n+    // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\n+    // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\n+    // Avoid closing an arbitrary file descriptor (m_socket is just a random very high number which\n+    // theoretically may concide with a real opened file descriptor).\n+    Reset();\n+}\n+\n+FuzzedSock& FuzzedSock::operator=(Sock&& other)\n+{\n+    assert(false && \"Move of Sock into FuzzedSock not allowed.\");\n+    return *this;\n+}\n+\n+void FuzzedSock::Reset()\n+{\n+    m_socket = INVALID_SOCKET;\n+}\n+\n+ssize_t FuzzedSock::Send(const void* data, size_t len, int flags) const\n+{\n+    constexpr std::array send_errnos{\n+        EACCES,\n+        EAGAIN,\n+        EALREADY,\n+        EBADF,\n+        ECONNRESET,\n+        EDESTADDRREQ,\n+        EFAULT,\n+        EINTR,\n+        EINVAL,\n+        EISCONN,\n+        EMSGSIZE,\n+        ENOBUFS,\n+        ENOMEM,\n+        ENOTCONN,\n+        ENOTSOCK,\n+        EOPNOTSUPP,\n+        EPIPE,\n+        EWOULDBLOCK,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        return len;\n+    }\n+    const ssize_t r = m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(-1, len);\n+    if (r == -1) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, send_errnos);\n+    }\n+    return r;\n+}\n+\n+ssize_t FuzzedSock::Recv(void* buf, size_t len, int flags) const\n+{\n+    // Have a permanent error at recv_errnos[0] because when the fuzzed data is exhausted\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Recv()\n+    // returning -1 and setting errno to EAGAIN repeatedly.\n+    constexpr std::array recv_errnos{\n+        ECONNREFUSED,\n+        EAGAIN,\n+        EBADF,\n+        EFAULT,\n+        EINTR,\n+        EINVAL,\n+        ENOMEM,\n+        ENOTCONN,\n+        ENOTSOCK,\n+        EWOULDBLOCK,\n+    };\n+    assert(buf != nullptr || len == 0);\n+    if (len == 0 || m_fuzzed_data_provider.ConsumeBool()) {\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        if (r == -1) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+        }\n+        return r;\n+    }\n+    std::vector<uint8_t> random_bytes;\n+    bool pad_to_len_bytes{m_fuzzed_data_provider.ConsumeBool()};\n+    if (m_peek_data.has_value()) {\n+        // `MSG_PEEK` was used in the preceding `Recv()` call, return `m_peek_data`.\n+        random_bytes.assign({m_peek_data.value()});\n+        if ((flags & MSG_PEEK) == 0) {\n+            m_peek_data.reset();\n+        }\n+        pad_to_len_bytes = false;\n+    } else if ((flags & MSG_PEEK) != 0) {\n+        // New call with `MSG_PEEK`.\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(1);\n+        if (!random_bytes.empty()) {\n+            m_peek_data = random_bytes[0];\n+            pad_to_len_bytes = false;\n+        }\n+    } else {\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\n+            m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\n+    }\n+    if (random_bytes.empty()) {\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        if (r == -1) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+        }\n+        return r;\n+    }\n+    std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+    if (pad_to_len_bytes) {\n+        if (len > random_bytes.size()) {\n+            std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\n+        }\n+        return len;\n+    }\n+    if (m_fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) {\n+        std::this_thread::sleep_for(std::chrono::milliseconds{2});\n+    }\n+    return random_bytes.size();\n+}\n+\n+int FuzzedSock::Connect(const sockaddr*, socklen_t) const\n+{\n+    // Have a permanent error at connect_errnos[0] because when the fuzzed data is exhausted\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Connect()\n+    // returning -1 and setting errno to EAGAIN repeatedly.\n+    constexpr std::array connect_errnos{\n+        ECONNREFUSED,\n+        EAGAIN,\n+        ECONNRESET,\n+        EHOSTUNREACH,\n+        EINPROGRESS,\n+        EINTR,\n+        ENETUNREACH,\n+        ETIMEDOUT,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, connect_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n+{\n+    constexpr std::array getsockopt_errnos{\n+        ENOMEM,\n+        ENOBUFS,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, getsockopt_errnos);\n+        return -1;\n+    }\n+    if (opt_val == nullptr) {\n+        return 0;\n+    }\n+    std::memcpy(opt_val,\n+                ConsumeFixedLengthByteVector(m_fuzzed_data_provider, *opt_len).data(),\n+                *opt_len);\n+    return 0;\n+}\n+\n bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     constexpr std::array wait_errnos{\n@@ -24,6 +188,15 @@ bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event*\n     return true;\n }\n \n+bool FuzzedSock::IsConnected(std::string& errmsg) const\n+{\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        return true;\n+    }\n+    errmsg = \"disconnected at random by the fuzzer\";\n+    return false;\n+}\n+\n void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_version) noexcept\n {\n     const ServiceFlags remote_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);"
      },
      {
        "sha": "8f4f87fbdcf86eac8eacd0a75a931e9106e33b6d",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 163,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29ae1c13a59187119f5b2a38b54dbbec936d8f87/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29ae1c13a59187119f5b2a38b54dbbec936d8f87/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=29ae1c13a59187119f5b2a38b54dbbec936d8f87",
        "patch": "@@ -575,179 +575,25 @@ class FuzzedSock : public Sock\n     mutable std::optional<uint8_t> m_peek_data;\n \n public:\n-    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\n-    {\n-          m_socket = fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET);\n-    }\n+    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\n \n-    ~FuzzedSock() override\n-    {\n-        // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\n-        // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\n-        // Avoid closing an arbitrary file descriptor (m_socket is just a random very high number which\n-        // theoretically may concide with a real opened file descriptor).\n-        Reset();\n-    }\n+    ~FuzzedSock() override;\n \n-    FuzzedSock& operator=(Sock&& other) override\n-    {\n-        assert(false && \"Move of Sock into FuzzedSock not allowed.\");\n-        return *this;\n-    }\n+    FuzzedSock& operator=(Sock&& other) override;\n \n-    void Reset() override\n-    {\n-        m_socket = INVALID_SOCKET;\n-    }\n+    void Reset() override;\n \n-    ssize_t Send(const void* data, size_t len, int flags) const override\n-    {\n-        constexpr std::array send_errnos{\n-            EACCES,\n-            EAGAIN,\n-            EALREADY,\n-            EBADF,\n-            ECONNRESET,\n-            EDESTADDRREQ,\n-            EFAULT,\n-            EINTR,\n-            EINVAL,\n-            EISCONN,\n-            EMSGSIZE,\n-            ENOBUFS,\n-            ENOMEM,\n-            ENOTCONN,\n-            ENOTSOCK,\n-            EOPNOTSUPP,\n-            EPIPE,\n-            EWOULDBLOCK,\n-        };\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n-            return len;\n-        }\n-        const ssize_t r = m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(-1, len);\n-        if (r == -1) {\n-            SetFuzzedErrNo(m_fuzzed_data_provider, send_errnos);\n-        }\n-        return r;\n-    }\n+    ssize_t Send(const void* data, size_t len, int flags) const override;\n \n-    ssize_t Recv(void* buf, size_t len, int flags) const override\n-    {\n-        // Have a permanent error at recv_errnos[0] because when the fuzzed data is exhausted\n-        // SetFuzzedErrNo() will always return the first element and we want to avoid Recv()\n-        // returning -1 and setting errno to EAGAIN repeatedly.\n-        constexpr std::array recv_errnos{\n-            ECONNREFUSED,\n-            EAGAIN,\n-            EBADF,\n-            EFAULT,\n-            EINTR,\n-            EINVAL,\n-            ENOMEM,\n-            ENOTCONN,\n-            ENOTSOCK,\n-            EWOULDBLOCK,\n-        };\n-        assert(buf != nullptr || len == 0);\n-        if (len == 0 || m_fuzzed_data_provider.ConsumeBool()) {\n-            const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-            if (r == -1) {\n-                SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n-            }\n-            return r;\n-        }\n-        std::vector<uint8_t> random_bytes;\n-        bool pad_to_len_bytes{m_fuzzed_data_provider.ConsumeBool()};\n-        if (m_peek_data.has_value()) {\n-            // `MSG_PEEK` was used in the preceding `Recv()` call, return `m_peek_data`.\n-            random_bytes.assign({m_peek_data.value()});\n-            if ((flags & MSG_PEEK) == 0) {\n-                m_peek_data.reset();\n-            }\n-            pad_to_len_bytes = false;\n-        } else if ((flags & MSG_PEEK) != 0) {\n-            // New call with `MSG_PEEK`.\n-            random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(1);\n-            if (!random_bytes.empty()) {\n-                m_peek_data = random_bytes[0];\n-                pad_to_len_bytes = false;\n-            }\n-        } else {\n-            random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\n-                m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\n-        }\n-        if (random_bytes.empty()) {\n-            const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n-            if (r == -1) {\n-                SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n-            }\n-            return r;\n-        }\n-        std::memcpy(buf, random_bytes.data(), random_bytes.size());\n-        if (pad_to_len_bytes) {\n-            if (len > random_bytes.size()) {\n-                std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\n-            }\n-            return len;\n-        }\n-        if (m_fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) {\n-            std::this_thread::sleep_for(std::chrono::milliseconds{2});\n-        }\n-        return random_bytes.size();\n-    }\n+    ssize_t Recv(void* buf, size_t len, int flags) const override;\n \n-    int Connect(const sockaddr*, socklen_t) const override\n-    {\n-        // Have a permanent error at connect_errnos[0] because when the fuzzed data is exhausted\n-        // SetFuzzedErrNo() will always return the first element and we want to avoid Connect()\n-        // returning -1 and setting errno to EAGAIN repeatedly.\n-        constexpr std::array connect_errnos{\n-            ECONNREFUSED,\n-            EAGAIN,\n-            ECONNRESET,\n-            EHOSTUNREACH,\n-            EINPROGRESS,\n-            EINTR,\n-            ENETUNREACH,\n-            ETIMEDOUT,\n-        };\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n-            SetFuzzedErrNo(m_fuzzed_data_provider, connect_errnos);\n-            return -1;\n-        }\n-        return 0;\n-    }\n+    int Connect(const sockaddr*, socklen_t) const override;\n \n-    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n-    {\n-        constexpr std::array getsockopt_errnos{\n-            ENOMEM,\n-            ENOBUFS,\n-        };\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n-            SetFuzzedErrNo(m_fuzzed_data_provider, getsockopt_errnos);\n-            return -1;\n-        }\n-        if (opt_val == nullptr) {\n-            return 0;\n-        }\n-        std::memcpy(opt_val,\n-                    ConsumeFixedLengthByteVector(m_fuzzed_data_provider, *opt_len).data(),\n-                    *opt_len);\n-        return 0;\n-    }\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n \n-    bool IsConnected(std::string& errmsg) const override\n-    {\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\n-            return true;\n-        }\n-        errmsg = \"disconnected at random by the fuzzer\";\n-        return false;\n-    }\n+    bool IsConnected(std::string& errmsg) const override;\n };\n \n [[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)"
      }
    ]
  },
  {
    "sha": "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDljODJhZDNhMzRhODg1ZWNjYTM3YTVmMDRjMzZkZmJhYTk1ZDE3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-07T09:40:59Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T06:51:39Z"
      },
      "message": "fuzz: use ConsumeBool() instead of !ConsumeBool()\n\nThe former is shorter and ends up with a \"random\" bool anyway.",
      "tree": {
        "sha": "86a546ab760102a8309497134c287978e9e44ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86a546ab760102a8309497134c287978e9e44ad8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB34nsACgkQVN8G9ktV\ny7+PBR//TWDVg/i553ZUqE+/G3VanG0seE5BjuJgQibjtvWq0vmnnWmRsLvk1mwu\n0A1Ux9+JFKNlam91J9eC3MUS4ZkF2A+stOQkkiEiR4R1EL7a9IBhRF7N5N3mTZmG\nFtyjs1r50Q/K5ew8Jqil8q9dkATPZXvvrlOjeELLtSR6w4f3WlO7HRJT6+YvLeVU\n7aN7jdngJj7Z3b0HbAv4k40tRU8gu07TgQWeK2oxOcw9VpibIAjpiGqKJH30Y4kS\n4CDUhw06d0syhRqMuOcIBugA6tNL7HLxSH1s1FDJ+aGtPwlCHzzRJSVHFB/DOSL7\n6D1cjaSPlyh9Az3B0Yb+eTUmt4uvcw39XXkKV2szIc9FbhfVcKgXyEe+gMk1LphN\n0C1JqBk3bBu2kdXfqK1O+bMfYlXFeUIPV8iIuq/50bwLQ7psVb/HBadS1VsThNd9\nBLRXAo1rcCfqnzYWwegViffRexZhkcYqKWzChLisk859NKJpYb7hDQpB4vIM/r7K\nyxq/Y0CpsnB+7dVbyk5Fmj1ZtVATvS/FcKZIteM63AL6zFKiz/JLuAXsj+UshOLD\nDwXXYvjo2z4ZbvGgsLIYRXW6UiW+FhRU79CuQ9ZeZ8hQfBafBwiHd3bjjDLLfVet\nZurDp23mWfShc+lkxqUFzOMVPNQ3qSkExuNf7Xpw48Il/aZYZ6uAPMXrE0juR3lR\nf+vinPiNnZ5/rB0mnlHNzVF4OZxHgU8ntqDwYmZ3btbk0ge0fo5OPZcoRub98Qu8\nfpA07cPiJ2DgfrFf7TCmlCq773wnFT/Tm5l0BUvuWB3jbb2HBjn3jc1SV0lAzfjX\n+7k3FPlEDi1kOj/19xc4fZL4Tj8gGEvPpiPltV7lC/cfNtx5VsK9T2lVpGaunZ1n\nyJVOaXScLn/v+bW6wRfRAej5JJIUbMJ8tO8tTdPTImzCvajIfkt+Z304cVVZr7vz\nvtbEXUHL+PbvAG9GSdR7B5cbTplJA722+/gcIBjwb62dHVkf5V7aR1TlestHBdUn\n2FiuO4JU6Xwbjf2V36JewyYEJrVbUd3fsuiP67Cy1NeK1ijEf15xo33AbQPCt/ef\n9rb2cfESP0NJ5xMCcdJJD7rh0O2U/5YeXpyqM2zPf96+BnYG7ccl5m4lzDWVOHfd\n1UsBNIfBtuv8OzH43SjNE3MPP8vtVah1nCbpkFG2+iWyuYEu9Og5EqAXLashJyyW\n3rY3KS5HueUSAtTIL+pg9npKmfaD+/rHTf1edXYY3DSRqr5G/3nDksDOH8JAqnGw\nSQbgLW8Sk7m8FyOeW0aWTf62Yps+zPBHvGj8AgsneRbEL3QaV9Bm9FabxhtOJvN2\nbssyjuTjf0SJJmsbPtZ2D85qRwra3g==\n=LPFi\n-----END PGP SIGNATURE-----",
        "payload": "tree 86a546ab760102a8309497134c287978e9e44ad8\nparent 29ae1c13a59187119f5b2a38b54dbbec936d8f87\nauthor Vasil Dimov <vd@FreeBSD.org> 1617788459 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618469499 +0200\n\nfuzz: use ConsumeBool() instead of !ConsumeBool()\n\nThe former is shorter and ends up with a \"random\" bool anyway.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/549c82ad3a34a885ecca37a5f04c36dfbaa95d17/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29ae1c13a59187119f5b2a38b54dbbec936d8f87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29ae1c13a59187119f5b2a38b54dbbec936d8f87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29ae1c13a59187119f5b2a38b54dbbec936d8f87"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b8d846a995865356b41a8a4ab19a1ac9911adaf4",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/549c82ad3a34a885ecca37a5f04c36dfbaa95d17/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/549c82ad3a34a885ecca37a5f04c36dfbaa95d17/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
        "patch": "@@ -178,7 +178,7 @@ bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event*\n         EINTR,\n         EINVAL,\n     };\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n         SetFuzzedErrNo(m_fuzzed_data_provider, wait_errnos);\n         return false;\n     }"
      }
    ]
  }
]