[
  {
    "sha": "d419fdedbe34c7ea19c0473660cc1b486b4e70d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDE5ZmRlZGJlMzRjN2VhMTljMDQ3MzY2MGNjMWI0ODZiNGU3MGQ4",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-08-12T15:04:29Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-10-27T10:07:41Z"
      },
      "message": "[net processing] Don't add AlreadyHave txs to recentRejects\n\nNow, we only add a transaction to our recentRejects filter if we didn't\nalready have it, meaning that it is added at most once, as intended.",
      "tree": {
        "sha": "18fe9004205217b5abb80415631e639aff3eace6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18fe9004205217b5abb80415631e639aff3eace6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d419fdedbe34c7ea19c0473660cc1b486b4e70d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d419fdedbe34c7ea19c0473660cc1b486b4e70d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d419fdedbe34c7ea19c0473660cc1b486b4e70d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d419fdedbe34c7ea19c0473660cc1b486b4e70d8/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55b1ffcd259cc64139dad646a52fab5c597c95c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b1ffcd259cc64139dad646a52fab5c597c95c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b1ffcd259cc64139dad646a52fab5c597c95c2"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 29,
      "deletions": 20
    },
    "files": [
      {
        "sha": "464e3de80a5ad8c5fcb47f7952a43f86ed972c80",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d419fdedbe34c7ea19c0473660cc1b486b4e70d8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d419fdedbe34c7ea19c0473660cc1b486b4e70d8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d419fdedbe34c7ea19c0473660cc1b486b4e70d8",
        "patch": "@@ -2946,13 +2946,9 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             pfrom.AddKnownTx(txid);\n         }\n \n-        TxValidationState state;\n-\n         m_txrequest.ReceivedResponse(pfrom.GetId(), txid);\n         if (tx.HasWitness()) m_txrequest.ReceivedResponse(pfrom.GetId(), wtxid);\n \n-        std::list<CTransactionRef> lRemovedTxn;\n-\n         // We do the AlreadyHaveTx() check using wtxid, rather than txid - in the\n         // absence of witness malleation, this is strictly better, because the\n         // recent rejects filter may contain the wtxid but rarely contains\n@@ -2965,8 +2961,25 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         // already; and an adversary can already relay us old transactions\n         // (older than our recency filter) if trying to DoS us, without any need\n         // for witness malleation.\n-        if (!AlreadyHaveTx(GenTxid(/* is_wtxid=*/true, wtxid), m_mempool) &&\n-            AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n+        if (AlreadyHaveTx(GenTxid(/* is_wtxid=*/true, wtxid), m_mempool)) {\n+            if (pfrom.HasPermission(PF_FORCERELAY)) {\n+                // Always relay transactions received from peers with forcerelay\n+                // permission, even if they were already in the mempool, allowing\n+                // the node to function as a gateway for nodes hidden behind it.\n+                if (!m_mempool.exists(tx.GetHash())) {\n+                    LogPrintf(\"Not relaying non-mempool transaction %s from forcerelay peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n+                } else {\n+                    LogPrintf(\"Force relaying tx %s from peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n+                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+                }\n+            }\n+            return;\n+        }\n+\n+        TxValidationState state;\n+        std::list<CTransactionRef> lRemovedTxn;\n+\n+        if (AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             // As this version of the transaction was acceptable, we can forget about any\n             // requests for it.\n@@ -3088,19 +3101,6 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                     AddToCompactExtraTransactions(ptx);\n                 }\n             }\n-\n-            if (pfrom.HasPermission(PF_FORCERELAY)) {\n-                // Always relay transactions received from peers with forcerelay permission, even\n-                // if they were already in the mempool,\n-                // allowing the node to function as a gateway for\n-                // nodes hidden behind it.\n-                if (!m_mempool.exists(tx.GetHash())) {\n-                    LogPrintf(\"Not relaying non-mempool transaction %s from forcerelay peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n-                } else {\n-                    LogPrintf(\"Force relaying tx %s from peer=%d\\n\", tx.GetHash().ToString(), pfrom.GetId());\n-                    RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n-                }\n-            }\n         }\n \n         // If a tx has been detected by recentRejects, we will have reached"
      },
      {
        "sha": "ed82e6a2e24bedfd0ccfefa36c23b446d25ad96e",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d419fdedbe34c7ea19c0473660cc1b486b4e70d8/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d419fdedbe34c7ea19c0473660cc1b486b4e70d8/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=d419fdedbe34c7ea19c0473660cc1b486b4e70d8",
        "patch": "@@ -153,11 +153,20 @@ def check_tx_relay(self):\n         self.log.debug(\"Check that node[1] will not send an invalid tx to node[0]\")\n         tx.vout[0].nValue += 1\n         txid = tx.rehash()\n+        # Send the transaction twice. The first time, it'll be rejected by ATMP because it conflicts\n+        # with a mempool transaction. The second time, it'll be in the recentRejects filter.\n         p2p_rebroadcast_wallet.send_txs_and_test(\n             [tx],\n             self.nodes[1],\n             success=False,\n-            reject_reason='Not relaying non-mempool transaction {} from forcerelay peer=0'.format(txid),\n+            reject_reason='{} from peer=0 was not accepted: txn-mempool-conflict'.format(txid)\n+        )\n+\n+        p2p_rebroadcast_wallet.send_txs_and_test(\n+            [tx],\n+            self.nodes[1],\n+            success=False,\n+            reject_reason='Not relaying non-mempool transaction {} from forcerelay peer=0'.format(txid)\n         )\n \n     def checkpermission(self, args, expectedPermissions, whitelisted):"
      }
    ]
  }
]