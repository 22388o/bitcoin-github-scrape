Empact,2018-05-17T07:17:36Z,How about also including the range-for changes from #12158?,https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-389768974,389768974,
practicalswift,2018-05-17T07:37:42Z,"@Empact I think it better to do (a subset of) the #12158 changes in follow-up PRs to keep this PR as mechanical and easy-to-review as possible. Basically what @laanwj suggested in https://github.com/bitcoin/bitcoin/pull/12158#issuecomment-377374858 :-)\n\nThis PR should hopefully be trivial to review :-)",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-389773872,389773872,
Empact,2018-05-17T07:51:24Z,"Yeah, I like it as-is, just suggesting since the `&` additions wouldn't add much if anything to the line count, so it could be viewed as a form of compression.\n\nAnyway, you have my Tested ACK 3299ed7.\n`make`, `make check` and `test/test_bitcoin` ran green locally.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-389777454,389777454,
practicalswift,2018-05-24T20:03:38Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-391841482,391841482,
ken2812221,2018-06-07T05:21:34Z,utACK 0143466,https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-395296527,395296527,
Empact,2018-06-10T23:35:21Z,utACK 0143466,https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-396090765,396090765,
practicalswift,2018-06-14T21:05:22Z,@promag Thanks for reviewing! Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397438122,397438122,
Empact,2018-06-14T21:23:42Z,"All nits, just calling out handling where inconsistent.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397442800,397442800,
sipa,2018-06-14T23:16:59Z,"utACK 9a4655fd15e632d95651e4681936f8ea13457ae1\n\nThese changes should be obviously safe. Adding `const` to variable declarations should never introduce problems (as long as the result compiles). The same is true for converting `const` variables to references.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397466450,397466450,
practicalswift,2018-06-15T20:53:08Z,"@Empact Updated version with nits addressed.\n\n@Empact @sipa @promag @ken2812221 Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397739159,397739159,
Empact,2018-06-15T21:14:19Z,"~~utACK 21ea0e9, though you may get important info by running with the warning from #13480~~\n\nEdit: See performance regression noted by @theuni",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397744033,397744033,
theuni,2018-06-15T21:37:09Z,"@sipa I disagree. std::move is still allowed on const references, they just... don't move. One such instance of this is here: https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195865586\n\nIt's unlikely to cause issues, only performance reductions, but code that relies on refcounts/lifetimes would potentially be affected. So I'm a bit more nervous about such a sweeping change.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397748835,397748835,
sipa,2018-06-15T21:46:27Z,"@theuni Of course, I was only commenting on correctness.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397750643,397750643,
practicalswift,2018-06-17T22:27:06Z,@theuni Thanks for reviewing. Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397910727,397910727,
practicalswift,2018-06-18T06:27:28Z,@MarcoFalke Thanks for reviewing. Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-397954028,397954028,
MarcoFalke,2018-06-18T11:01:02Z,"Again, I am not sure if it makes sense to take a const reference of a iterator...\n",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398018117,398018117,
promag,2018-06-18T11:46:37Z,"After some reading I agree with @MarcoFalke, sorry for the suggestion.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398027734,398027734,
practicalswift,2018-06-18T14:35:35Z,"@MarcoFalke @promag The remaining `txiter` `const` ref changes along the line of ...\n\n```diff\n-    for (const CTxMemPool::txiter it : …) {\n+    for (const CTxMemPool::txiter& it : …) {\n```\n\n... are required to make `-Wrange-loop-analysis` pass.\n\nDrop `const` or keep `&`?\n\n",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398075881,398075881,
MarcoFalke,2018-06-18T14:42:03Z,"Drop `const`, since `CTxMemPool::txiter` is already a const iterator and the `const` does nothing useful, as far as I can see.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398078116,398078116,
practicalswift,2018-06-18T14:56:06Z,@MarcoFalke Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398083147,398083147,
sipa,2018-06-18T15:36:06Z,"@MarcoFalke I expect it to not matter at all, as in most cases the compiler will optimize things far enough to result in nearly identical code for reference or not.\n\nI believe the clang warning code suggests references in case a copy can be avoided. I think we should follow those suggestions, as it has the best performance guarantees ignoring optimizations.\n\nIn practice, most iterators are jus",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398097053,398097053,
MarcoFalke,2018-06-18T15:51:00Z,"@sipa I have no strong opinion on takeing a reference to an iterator, but I believe that using a `const` iterator instead of a `const_iterator` is just misleading and could lead to dangerous bugs.",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398102095,398102095,
practicalswift,2018-06-18T16:02:18Z,"Rebased!\n\n@MarcoFalke Just to clarify - are you OK with the changes after the latest round of updates? Any outstanding issues? :-)",https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-398105989,398105989,
practicalswift,2018-06-24T18:38:02Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-399777686,399777686,
practicalswift,2018-06-29T06:10:42Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-401257661,401257661,
practicalswift,2018-07-12T14:03:38Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-404523299,404523299,
practicalswift,2018-07-12T16:55:14Z,@promag Thanks for reviewing. Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-404579205,404579205,
practicalswift,2018-08-27T16:20:52Z,Rebased! Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-416282204,416282204,
ken2812221,2018-09-04T04:24:46Z,utACK f34c8c4,https://github.com/bitcoin/bitcoin/pull/13249#issuecomment-418237306,418237306,
promag,2018-06-10T23:40:19Z,`const CTxMemPool::txiter&`?,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r194274157,194274157,src/miner.cpp
promag,2018-06-10T23:40:49Z,"nit, s/auto/CNode*?",https://github.com/bitcoin/bitcoin/pull/13249#discussion_r194274169,194274169,src/net.cpp
promag,2018-06-10T23:41:07Z,`const uint256&`?,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r194274175,194274175,src/net_processing.cpp
promag,2018-06-10T23:41:13Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r194274176,194274176,src/net_processing.cpp
Empact,2018-06-14T21:19:33Z,nit: Could be a reference too for consistency with `src/miner.cpp`.,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195574767,195574767,src/policy/rbf.cpp
Empact,2018-06-14T21:19:39Z,nit: Whitespace,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195574800,195574800,src/qt/bitcoin.cpp
Empact,2018-06-14T21:20:26Z,nit: Same for this file,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195575001,195575001,src/rpc/blockchain.cpp
Empact,2018-06-14T21:21:01Z,nit: Same,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195575148,195575148,src/txmempool.cpp
Empact,2018-06-14T21:21:42Z,nit: Reference?,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195575307,195575307,src/wallet/wallet.cpp
Empact,2018-06-14T21:22:10Z,nit: References?,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195575427,195575427,src/wallet/walletdb.cpp
practicalswift,2018-06-14T22:38:26Z,I'm not sure I understand what whitespace change you're suggesting? :-),https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195592200,195592200,src/qt/bitcoin.cpp
Empact,2018-06-15T00:46:36Z,Just that the developer-notes prefer `WalletModel*`. Fine to ignore.,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195610452,195610452,src/qt/bitcoin.cpp
theuni,2018-06-15T21:25:30Z,This would be a performance regression.,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195865586,195865586,src/interfaces/node.cpp
Empact,2018-06-15T21:36:52Z,"Can you explain? If `stats_temp` is a `std::vector<CNodeStats>`, and you can loop over with `CNodeStats&`, shouldn't you also be able to take a `const CNodeStats&` without performance implication?",https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195867562,195867562,src/interfaces/node.cpp
theuni,2018-06-15T21:46:21Z,"See below:\n```c++\nstd::move(node_stats_temp)\n```\n\nThis is a non-const reference so that the elements can be moved rather than copied.\n",https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195869297,195869297,src/interfaces/node.cpp
Empact,2018-06-15T21:53:14Z,"Gotcha, thanks.",https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195870516,195870516,src/interfaces/node.cpp
MarcoFalke,2018-06-17T23:46:28Z,Not sure if it makes sense to take a const reference of a iterator...,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r195945486,195945486,src/policy/rbf.cpp
promag,2018-07-12T14:42:55Z,Could use `const COutput& coin`?,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r202061031,202061031,src/wallet/wallet.cpp
promag,2018-07-12T14:44:40Z,"Most common usage when iterating `mapBlockIndex` is\n```cpp\nfor (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n```\nAnd there is also the above:\n```cpp\nfor (const BlockMap::value_type& entry : mapBlockIndex)\n```\n(I prefer the 1st).",https://github.com/bitcoin/bitcoin/pull/13249#discussion_r202061657,202061657,src/validation.cpp
promag,2018-07-12T14:48:44Z,Could use `const CTxIn& input` (most common usage).,https://github.com/bitcoin/bitcoin/pull/13249#discussion_r202063209,202063209,src/wallet/wallet.cpp
