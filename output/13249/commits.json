[
  {
    "sha": "f34c8c466a0e514edac2e8683127b4176ad5d321",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzRjOGM0NjZhMGU1MTRlZGFjMmU4NjgzMTI3YjQxNzZhZDVkMzIx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-18T05:58:28Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-27T16:19:33Z"
      },
      "message": "Make objects in range declarations immutable by default. Avoid unnecessary copying of objects in range declarations.",
      "tree": {
        "sha": "587ba001d5d6eaae71d234009098710dd30354c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/587ba001d5d6eaae71d234009098710dd30354c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f34c8c466a0e514edac2e8683127b4176ad5d321",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f34c8c466a0e514edac2e8683127b4176ad5d321",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f34c8c466a0e514edac2e8683127b4176ad5d321",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f34c8c466a0e514edac2e8683127b4176ad5d321/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f180e81d5780805a28bcc71c2bb6b16076336c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f180e81d5780805a28bcc71c2bb6b16076336c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f180e81d5780805a28bcc71c2bb6b16076336c3c"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 77,
      "deletions": 77
    },
    "files": [
      {
        "sha": "d6b29391a98eef1983f5a12c74882688b27ed356",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -62,7 +62,7 @@ uint32_t PolyMod(const data& v)\n     // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n     // for `c`.\n     uint32_t c = 1;\n-    for (auto v_i : v) {\n+    for (const auto v_i : v) {\n         // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n         // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n         // correspond to c'(x) = (f(x) * x + v_i) mod g(x), where v_i is the next input to\n@@ -149,7 +149,7 @@ std::string Encode(const std::string& hrp, const data& values) {\n     data combined = Cat(values, checksum);\n     std::string ret = hrp + '1';\n     ret.reserve(ret.size() + combined.size());\n-    for (auto c : combined) {\n+    for (const auto c : combined) {\n         ret += CHARSET[c];\n     }\n     return ret;"
      },
      {
        "sha": "9ee3e8eee7874287a784f02d588d04fabb380ad2",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -385,7 +385,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n     CScript scriptPubKey = GetScriptForMultisig(required, pubkeys);\n \n     if (bSegWit) {\n-        for (CPubKey& pubkey : pubkeys) {\n+        for (const CPubKey& pubkey : pubkeys) {\n             if (!pubkey.IsCompressed()) {\n                 throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n             }"
      },
      {
        "sha": "4d0b094fa2fa6889ff1a78f02d8a0e82bd004604",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -397,15 +397,15 @@ class cache\n         std::array<uint32_t, 8> locs = compute_hashes(e);\n         // Make sure we have not already inserted this element\n         // If we have, make sure that it does not get deleted\n-        for (uint32_t loc : locs)\n+        for (const uint32_t loc : locs)\n             if (table[loc] == e) {\n                 please_keep(loc);\n                 epoch_flags[loc] = last_epoch;\n                 return;\n             }\n         for (uint8_t depth = 0; depth < depth_limit; ++depth) {\n             // First try to insert to an empty slot, if one exists\n-            for (uint32_t loc : locs) {\n+            for (const uint32_t loc : locs) {\n                 if (!collection_flags.bit_is_set(loc))\n                     continue;\n                 table[loc] = std::move(e);\n@@ -467,7 +467,7 @@ class cache\n     inline bool contains(const Element& e, const bool erase) const\n     {\n         std::array<uint32_t, 8> locs = compute_hashes(e);\n-        for (uint32_t loc : locs)\n+        for (const uint32_t loc : locs)\n             if (table[loc] == e) {\n                 if (erase)\n                     allow_erase(loc);"
      },
      {
        "sha": "84294a65ad2479b3af2bd29416083c2f8f1241b3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -344,7 +344,7 @@ CNode* CConnman::FindNode(const CService& addr)\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes) {\n+    for (const CNode* pnode : vNodes) {\n         if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n             return false;\n     }\n@@ -1614,7 +1614,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n-        for (auto pnode : vNodes) {\n+        for (const CNode* pnode : vNodes) {\n             nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n         }\n         if (nRelevant >= 2) {\n@@ -1733,7 +1733,7 @@ int CConnman::GetExtraOutboundCount()\n     int nOutbound = 0;\n     {\n         LOCK(cs_vNodes);\n-        for (CNode* pnode : vNodes) {\n+        for (const CNode* pnode : vNodes) {\n             if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n                 ++nOutbound;\n             }\n@@ -1803,7 +1803,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodes) {\n+            for (const CNode* pnode : vNodes) {\n                 if (!pnode->fInbound && !pnode->m_manual_connection) {\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup"
      },
      {
        "sha": "acef179a4f335a040e6f0e78e0a918d4caaac26f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -882,7 +882,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (uint256 &orphanHash : vOrphanErase) {\n+        for (const uint256& orphanHash : vOrphanErase) {\n             nErased += EraseOrphanTx(orphanHash);\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n@@ -2288,7 +2288,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n \n-            for (uint256 hash : vEraseQueue)\n+            for (const uint256& hash : vEraseQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)"
      },
      {
        "sha": "f1d3074c2f4dd41d64719e3ca2db6888edb3c65c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -416,7 +416,7 @@ void BitcoinApplication::requestShutdown()\n \n #ifdef ENABLE_WALLET\n     window->removeAllWallets();\n-    for (WalletModel *walletModel : m_wallet_models) {\n+    for (const WalletModel* walletModel : m_wallet_models) {\n         delete walletModel;\n     }\n     m_wallet_models.clear();"
      },
      {
        "sha": "d87882ea7d76253b95e8476fc5bb94657627a791",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -1273,7 +1273,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu(this);\n-    for (BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+    for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::longName(u)), this);\n         menuAction->setData(QVariant(u));"
      },
      {
        "sha": "8cfedca57fc7df927f93986dff86703e4398374e",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -65,7 +65,7 @@ class PeerTablePriv\n             interfaces::Node::NodesStats nodes_stats;\n             node.getNodesStats(nodes_stats);\n             cachedNodeStats.reserve(nodes_stats.size());\n-            for (auto& node_stats : nodes_stats)\n+            for (const auto& node_stats : nodes_stats)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStats = std::get<0>(node_stats);"
      },
      {
        "sha": "6f66bc19e100283bfe893b15714c11ce713bdee9",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -348,7 +348,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    for (BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n+    for (const BitcoinUnits::Unit u : BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));"
      },
      {
        "sha": "1eff4f6b6556052c0fe413c00f3b2000de18cef4",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -200,7 +200,7 @@ void SplashScreen::unsubscribeFromCoreSignals()\n     // Disconnect signals from client\n     m_handler_init_message->disconnect();\n     m_handler_show_progress->disconnect();\n-    for (auto& handler : m_connected_wallet_handlers) {\n+    for (const auto& handler : m_connected_wallet_handlers) {\n         handler->disconnect();\n     }\n     m_connected_wallet_handlers.clear();"
      },
      {
        "sha": "3aed3f2b978844754cc6bb86ce3e53f57fc1db27",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -141,10 +141,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    for (float f : vSamplesIn) {\n+    for (const float f : vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    for (float f : vSamplesOut) {\n+    for (const float f : vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "59332be7547f00d466c146ee60946892567215a9",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -152,13 +152,13 @@ QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wall\n     else\n     {\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        for (isminetype mine : wtx.txin_is_mine)\n+        for (const isminetype mine : wtx.txin_is_mine)\n         {\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        for (isminetype mine : wtx.txout_is_mine)\n+        for (const isminetype mine : wtx.txout_is_mine)\n         {\n             if(fAllToMe > mine) fAllToMe = mine;\n         }"
      },
      {
        "sha": "d1a7527ac77cd5a813700cfc5ac8757913abc72e",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -77,14 +77,14 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const interface\n     {\n         bool involvesWatchAddress = false;\n         isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        for (isminetype mine : wtx.txin_is_mine)\n+        for (const isminetype mine : wtx.txin_is_mine)\n         {\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n-        for (isminetype mine : wtx.txout_is_mine)\n+        for (const isminetype mine : wtx.txout_is_mine)\n         {\n             if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;"
      },
      {
        "sha": "ee895bdbe8c0cfa83f4f73cb5cf890d2858e95cf",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -426,7 +426,7 @@ static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCK\n     UniValue spent(UniValue::VARR);\n     const CTxMemPool::txiter &it = mempool.mapTx.find(tx.GetHash());\n     const CTxMemPool::setEntries &setChildren = mempool.GetMemPoolChildren(it);\n-    for (const CTxMemPool::txiter &childiter : setChildren) {\n+    for (CTxMemPool::txiter childiter : setChildren) {\n         spent.push_back(childiter->GetTx().GetHash().ToString());\n     }\n "
      },
      {
        "sha": "e7de25607876819337eabf7b4a4ad2c3f53f3aa1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -922,7 +922,7 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n \n-    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+    for (const FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n         CFeeRate feeRate;\n         EstimationResult buckets;\n "
      },
      {
        "sha": "169a4526594db6a04d1aa4f5e324ca94af4eebd2",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -164,7 +164,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n             obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n+            for (const int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n             obj.pushKV(\"inflight\", heights);"
      },
      {
        "sha": "2732598b4f434b68a993cfc948fba2dbae1b14c4",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -155,7 +155,7 @@ static void Correct_Queue_range(std::vector<size_t> range)\n     }\n     // Make vChecks here to save on malloc (this test can be slow...)\n     std::vector<FakeCheckCheckCompletion> vChecks;\n-    for (auto i : range) {\n+    for (const size_t i : range) {\n         size_t total = i;\n         FakeCheckCheckCompletion::n_calls = 0;\n         CCheckQueueControl<FakeCheckCheckCompletion> control(small_queue.get());\n@@ -253,7 +253,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n     }\n \n     for (auto times = 0; times < 10; ++times) {\n-        for (bool end_fails : {true, false}) {\n+        for (const bool end_fails : {true, false}) {\n             CCheckQueueControl<FailingCheck> control(fail_queue.get());\n             {\n                 std::vector<FailingCheck> vChecks;"
      },
      {
        "sha": "56b50c9bdb7418817efdbc1c1649063751fef284",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -736,7 +736,7 @@ static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount mo\n template <typename... Args>\n static void CheckAddCoin(Args&&... args)\n {\n-    for (CAmount base_value : {ABSENT, PRUNED, VALUE1})\n+    for (const CAmount base_value : {ABSENT, PRUNED, VALUE1})\n         CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n@@ -848,10 +848,10 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n     // they would be too repetitive (the parent cache is never updated in these\n     // cases). The loop below covers these cases and makes sure the parent cache\n     // is always left unchanged.\n-    for (CAmount parent_value : {ABSENT, PRUNED, VALUE1})\n-        for (CAmount child_value : {ABSENT, PRUNED, VALUE2})\n-            for (char parent_flags : parent_value == ABSENT ? ABSENT_FLAGS : FLAGS)\n-                for (char child_flags : child_value == ABSENT ? ABSENT_FLAGS : CLEAN_FLAGS)\n+    for (const CAmount parent_value : {ABSENT, PRUNED, VALUE1})\n+        for (const CAmount child_value : {ABSENT, PRUNED, VALUE2})\n+            for (const char parent_flags : parent_value == ABSENT ? ABSENT_FLAGS : FLAGS)\n+                for (const char child_flags : child_value == ABSENT ? ABSENT_FLAGS : CLEAN_FLAGS)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);\n }\n "
      },
      {
        "sha": "dbceb9d2e00b45ce915a1f8e8d5ca11ae3dfcde3",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -82,11 +82,11 @@ static double test_cache(size_t megabytes, double load)\n      */\n     std::vector<uint256> hashes_insert_copy = hashes;\n     /** Do the insert */\n-    for (uint256& h : hashes_insert_copy)\n+    for (const uint256& h : hashes_insert_copy)\n         set.insert(h);\n     /** Count the hits */\n     uint32_t count = 0;\n-    for (uint256& h : hashes)\n+    for (const uint256& h : hashes)\n         count += set.contains(h, false);\n     double hit_rate = ((double)count) / ((double)n_insert);\n     return hit_rate;\n@@ -323,7 +323,7 @@ static void test_cache_generations()\n                 reads.push_back(inserts[i]);\n             for (uint32_t i = n_insert - (n_insert / 4); i < n_insert; ++i)\n                 reads.push_back(inserts[i]);\n-            for (auto h : inserts)\n+            for (const auto& h : inserts)\n                 c.insert(h);\n         }\n     };"
      },
      {
        "sha": "fd0a4fda4b5853f7face7679ebc8a9056d1211a8",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -26,7 +26,7 @@ BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (bool obfuscate : {false, true}) {\n+    for (const bool obfuscate : {false, true}) {\n         fs::path ph = SetDataDir(std::string(\"dbwrapper\").append(obfuscate ? \"_true\" : \"_false\"));\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (bool obfuscate : {false, true}) {\n+    for (const bool obfuscate : {false, true}) {\n         fs::path ph = SetDataDir(std::string(\"dbwrapper_batch\").append(obfuscate ? \"_true\" : \"_false\"));\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n@@ -82,7 +82,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n-    for (bool obfuscate : {false, true}) {\n+    for (const bool obfuscate : {false, true}) {\n         fs::path ph = SetDataDir(std::string(\"dbwrapper_iterator\").append(obfuscate ? \"_true\" : \"_false\"));\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n         if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n-    for (int seek_start : {0x00, 0x80}) {\n+    for (const int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n         for (unsigned int x=seek_start; x<255; ++x) {\n             uint8_t key;\n@@ -291,7 +291,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n     }\n \n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n-    for (int seek_start : {0, 5}) {\n+    for (const int seek_start : {0, 5}) {\n         snprintf(buf, sizeof(buf), \"%d\", seek_start);\n         StringContentsSerializer seek_key(buf);\n         it->Seek(seek_key);"
      },
      {
        "sha": "7592330b10aab6779c7fcd4fdb6a350a99af211e",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -24,7 +24,7 @@ static void ResetArgs(const std::string& strArg)\n \n     // Convert to char*:\n     std::vector<const char*> vecChar;\n-    for (std::string& s : vecArg)\n+    for (const std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;"
      },
      {
        "sha": "a0c10d8ddd30c01f04750c94a4213495a81b44db",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(key_io_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+        for (const auto& chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n             SelectParams(chain);\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);"
      },
      {
        "sha": "c0754618fb23112dcb61203e35d51ab5547635af",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -146,7 +146,7 @@ BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n BOOST_AUTO_TEST_CASE(findearliestatleast_edge_test)\n {\n     std::list<CBlockIndex> blocks;\n-    for (unsigned int timeMax : {100, 100, 100, 200, 200, 200, 300, 300, 300}) {\n+    for (const unsigned int timeMax : {100, 100, 100, 200, 200, 200, 300, 300, 300}) {\n         CBlockIndex* prev = blocks.empty() ? nullptr : &blocks.back();\n         blocks.emplace_back();\n         blocks.back().nHeight = prev ? prev->nHeight + 1 : 0;"
      },
      {
        "sha": "0d7c9f0abffefcf203230ccfa4418e71cc5a58ac",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -29,7 +29,7 @@ void CConnmanTest::AddNode(CNode& node)\n void CConnmanTest::ClearNodes()\n {\n     LOCK(g_connman->cs_vNodes);\n-    for (CNode* node : g_connman->vNodes) {\n+    for (const CNode* node : g_connman->vNodes) {\n         delete node;\n     }\n     g_connman->vNodes.clear();"
      },
      {
        "sha": "c527ad448c64e90b6537cce5167f483ff3bb0ba6",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -65,7 +65,7 @@ unsigned int ParseScriptFlags(std::string strFlags)\n     std::vector<std::string> words;\n     boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n \n-    for (std::string word : words)\n+    for (const std::string& word : words)\n     {\n         if (!mapFlagNames.count(word))\n             BOOST_ERROR(\"Bad test: unknown verification flag '\" << word << \"'\");"
      },
      {
        "sha": "14810c3f6bdd48e390418c2dade83e7ab0efc543",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -245,7 +245,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n     testArgs.ParseParameters(7, (char**)argv_test, error);\n \n     // Each letter should be set.\n-    for (char opt : \"abcdef\")\n+    for (const char opt : \"abcdef\")\n         BOOST_CHECK(testArgs.IsArgSet({'-', opt}) || !opt);\n \n     // Nothing else should be in the map\n@@ -394,7 +394,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                 && test_args.GetArg(\"-iii\", \"xxx\") == \"xxx\"\n                );\n \n-    for (bool def : {false, true}) {\n+    for (const bool def : {false, true}) {\n         BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n                      && test_args.GetBoolArg(\"-b\", def)\n                      && !test_args.GetBoolArg(\"-ccc\", def)"
      },
      {
        "sha": "291111feb29da01edab961f1a4dc5e87c828de5e",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -94,7 +94,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                for (int64_t nOffset : vSorted)\n+                for (const int64_t nOffset : vSorted)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -109,7 +109,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         }\n \n         if (LogAcceptCategory(BCLog::NET)) {\n-            for (int64_t n : vSorted) {\n+            for (const int64_t n : vSorted) {\n                 LogPrint(BCLog::NET, \"%+d  \", n); /* Continued */\n             }\n             LogPrint(BCLog::NET, \"|  \"); /* Continued */"
      },
      {
        "sha": "33ef9b101253863a78fd1e7402bb804245198afb",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -196,7 +196,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         }\n \n         const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n-        for (const txiter &phash : setMemPoolParents) {\n+        for (txiter phash : setMemPoolParents) {\n             // If this is a new ancestor, add it.\n             if (setAncestors.count(phash) == 0) {\n                 parentHashes.insert(phash);\n@@ -457,7 +457,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants\n         stage.erase(it);\n \n         const setEntries &setChildren = GetMemPoolChildren(it);\n-        for (const txiter &childiter : setChildren) {\n+        for (txiter childiter : setChildren) {\n             if (!setDescendants.count(childiter)) {\n                 stage.insert(childiter);\n             }\n@@ -907,7 +907,7 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n-    for (const txiter& it : stage) {\n+    for (txiter it : stage) {\n         removeUnchecked(it, reason);\n     }\n }"
      },
      {
        "sha": "20ea2d1a531a659f4ba0d7c403b9f3a653baf5ad",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -71,7 +71,7 @@ bool IsHexNumber(const std::string& str)\n     if (str.size() > 2 && *str.begin() == '0' && *(str.begin()+1) == 'x') {\n         starting_location = 2;\n     }\n-    for (auto c : str.substr(starting_location)) {\n+    for (const char c : str.substr(starting_location)) {\n         if (HexDigit(c) < 0) return false;\n     }\n     // Return false for empty string or \"0x\"."
      },
      {
        "sha": "2f966d2f561d1e6f3e0b61c0e2b7020518ba12ac",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -421,7 +421,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n             // lock on a mempool input, so we can use the return value of\n             // CheckSequenceLocks to indicate the LockPoints validity\n             int maxInputHeight = 0;\n-            for (int height : prevheights) {\n+            for (const int height : prevheights) {\n                 // Can ignore mempool inputs since we'll fail if they had non-zero locks\n                 if (height != tip->nHeight+1) {\n                     maxInputHeight = std::max(maxInputHeight, height);\n@@ -4291,7 +4291,7 @@ void UnloadBlockIndex()\n         warningcache[b].clear();\n     }\n \n-    for (BlockMap::value_type& entry : mapBlockIndex) {\n+    for (const BlockMap::value_type& entry : mapBlockIndex) {\n         delete entry.second;\n     }\n     mapBlockIndex.clear();\n@@ -4492,7 +4492,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n \n     // Build forward-pointing map of the entire block tree.\n     std::multimap<CBlockIndex*,CBlockIndex*> forward;\n-    for (auto& entry : mapBlockIndex) {\n+    for (const std::pair<const uint256, CBlockIndex*>& entry : mapBlockIndex) {\n         forward.insert(std::make_pair(entry.second->pprev, entry.second));\n     }\n "
      },
      {
        "sha": "729e4e39b0c5045a3c7021e37a80a07d2ac248e1",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -311,7 +311,7 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n         return false;\n \n     fUseCrypto = true;\n-    for (KeyMap::value_type& mKey : mapKeys)\n+    for (const KeyMap::value_type& mKey : mapKeys)\n     {\n         const CKey &key = mKey.second;\n         CPubKey vchPubKey = key.GetPubKey();"
      },
      {
        "sha": "0e56c85ee3beadf6eaedd5cbde4e6505652b7721",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -503,7 +503,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // be implemented, so no equality checks are needed at all. (Newer\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n-            for (auto& env : g_dbenvs) {\n+            for (const auto& env : g_dbenvs) {\n                 CheckUniqueFileid(env.second, strFilename, *pdb_temp);\n             }\n "
      },
      {
        "sha": "af36d321d58a318a0e5bbc63d495099ba1d9bf32",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -41,7 +41,7 @@ int64_t static DecodeDumpTime(const std::string &str) {\n \n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n-    for (unsigned char c : str) {\n+    for (const unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n             ret << '%' << HexStr(&c, &c + 1);\n         } else {"
      },
      {
        "sha": "5059568cc14661242f52dd4abcf3e74607fc5946",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -2365,7 +2365,7 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    for (COutPoint &outpt : vOutpts) {\n+    for (const COutPoint& outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n         o.pushKV(\"txid\", outpt.hash.GetHex());"
      },
      {
        "sha": "9d33940840effac0ff119ef3dac60959c47cdfc7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -1579,7 +1579,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n     // Look up the inputs.  We should have already checked that this transaction\n     // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n     // wallet, with a valid index into the vout array, and the ability to sign.\n-    for (auto& input : tx.vin) {\n+    for (const CTxIn& input : tx.vin) {\n         const auto mi = wallet->mapWallet.find(input.prevout.hash);\n         if (mi == wallet->mapWallet.end()) {\n             return -1;\n@@ -1819,7 +1819,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    for (std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n+    for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         CValidationState state;\n         wtx.AcceptToMemoryPool(maxTxFee, state);\n@@ -2065,7 +2065,7 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n             continue;\n         mapSorted.insert(std::make_pair(wtx.nTimeReceived, &wtx));\n     }\n-    for (std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n+    for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n         if (wtx.RelayWalletTransaction(connman))\n@@ -2368,7 +2368,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n     LOCK2(cs_main, cs_wallet);\n     AvailableCoins(availableCoins);\n \n-    for (auto& coin : availableCoins) {\n+    for (const COutput& coin : availableCoins) {\n         CTxDestination address;\n         if (coin.fSpendable &&\n             ExtractDestination(FindNonChangeParentOutput(*coin.tx->tx, coin.i).scriptPubKey, address)) {\n@@ -2378,7 +2378,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n \n     std::vector<COutPoint> lockedCoins;\n     ListLockedCoins(lockedCoins);\n-    for (const auto& output : lockedCoins) {\n+    for (const COutPoint& output : lockedCoins) {\n         auto it = mapWallet.find(output.hash);\n         if (it != mapWallet.end()) {\n             int depth = it->second.GetDepthInMainChain();\n@@ -3280,17 +3280,17 @@ bool CWallet::NewKeyPool()\n         LOCK(cs_wallet);\n         WalletBatch batch(*database);\n \n-        for (int64_t nIndex : setInternalKeyPool) {\n+        for (const int64_t nIndex : setInternalKeyPool) {\n             batch.ErasePool(nIndex);\n         }\n         setInternalKeyPool.clear();\n \n-        for (int64_t nIndex : setExternalKeyPool) {\n+        for (const int64_t nIndex : setExternalKeyPool) {\n             batch.ErasePool(nIndex);\n         }\n         setExternalKeyPool.clear();\n \n-        for (int64_t nIndex : set_pre_split_keypool) {\n+        for (const int64_t nIndex : set_pre_split_keypool) {\n             batch.ErasePool(nIndex);\n         }\n         set_pre_split_keypool.clear();\n@@ -3567,7 +3567,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            for (CTxIn txin : pcoin->tx->vin)\n+            for (const CTxIn& txin : pcoin->tx->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -3581,7 +3581,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               for (CTxOut txout : pcoin->tx->vout)\n+               for (const CTxOut& txout : pcoin->tx->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -3617,7 +3617,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         // make a set of all the groups hit by this new group\n         std::set< std::set<CTxDestination>* > hits;\n         std::map< CTxDestination, std::set<CTxDestination>* >::iterator it;\n-        for (CTxDestination address : _grouping)\n+        for (const CTxDestination& address : _grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n \n@@ -3632,12 +3632,12 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         uniqueGroupings.insert(merged);\n \n         // update setmap\n-        for (CTxDestination element : *merged)\n+        for (const CTxDestination& element : *merged)\n             setmap[element] = merged;\n     }\n \n     std::set< std::set<CTxDestination> > ret;\n-    for (std::set<CTxDestination>* uniqueGrouping : uniqueGroupings)\n+    for (const std::set<CTxDestination>* uniqueGrouping : uniqueGroupings)\n     {\n         ret.insert(*uniqueGrouping);\n         delete uniqueGrouping;"
      },
      {
        "sha": "aa125f02922891dc658abc4d86b7b7bc71f639e9",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f34c8c466a0e514edac2e8683127b4176ad5d321/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f34c8c466a0e514edac2e8683127b4176ad5d321",
        "patch": "@@ -612,7 +612,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n         pwallet->UpdateTimeFirstKey(1);\n \n-    for (uint256 hash : wss.vWalletUpgrade)\n+    for (const uint256& hash : wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet.at(hash));\n \n     // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n@@ -709,7 +709,7 @@ DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<u\n     // erase each matching wallet TX\n     bool delerror = false;\n     std::vector<uint256>::iterator it = vTxHashIn.begin();\n-    for (uint256 hash : vTxHash) {\n+    for (const uint256& hash : vTxHash) {\n         while (it < vTxHashIn.end() && (*it) < hash) {\n             it++;\n         }\n@@ -740,7 +740,7 @@ DBErrors WalletBatch::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n         return err;\n \n     // erase each wallet TX\n-    for (uint256& hash : vTxHash) {\n+    for (const uint256& hash : vTxHash) {\n         if (!EraseTx(hash))\n             return DBErrors::CORRUPT;\n     }"
      }
    ]
  }
]