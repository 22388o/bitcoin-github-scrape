[
  {
    "sha": "ebec7317ca1acbc65afa7fb08fc219c315fc4527",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmVjNzMxN2NhMWFjYmM2NWFmYTdmYjA4ZmMyMTljMzE1ZmM0NTI3",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-20T21:04:15Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-21T05:19:42Z"
      },
      "message": "Drop the chain argument to GetDifficulty\n\nThis removes the need to include rpc/blockchain.cpp in order to put\nGetDifficulty under test. GetDifficulty was called in two ways:\n* with a guaranteed non-null blockindex\n* with no argument\n\nChange the latter case to be provided chainActive.Tip() explicitly.",
      "tree": {
        "sha": "7cce4ca196629a3bf18637f2adfee7fc7bfc717b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cce4ca196629a3bf18637f2adfee7fc7bfc717b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebec7317ca1acbc65afa7fb08fc219c315fc4527",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlsCVvAACgkQTYykuhgE\nCQY38Q//Rf3DhlqTb3GrFeZLzJBzrFDy5sBh7JPcM+9kG9gpqyyClEGK4WJr+svS\ncPWOz55Eo+r/z6h9JSHrxrw9XYMrbFIZGPaHBEQJa8I3iVzUE4tMrENF7YI4wdB4\nQX7igzzLoUkcKJ6zzfuZE04MOnZXXsUsNNrmGL5932iM1TFaGdmECLoueLZZQ2bM\ny/yFN3NXioGFZ6U60cTkpcA6iYRHTrQ5B0yKcBCPhy9aG5HutUz61/w4t+0DkmHm\nW4IpsdK6uEPjqS+1AUrnAfWjn2iePU9QscyldEdlQkgJ4rM8dWc7/G2FOPcKyYu7\nLAFrO5H5Yju0iXJvuWjvVwaew9s6tPJoY3vEI/J8OZ50dTl65Y7EAApUXsTKz4ND\nhfd6GuP9tDhtEqnsdhHnLDHziTPinXDVt4fSb3mvMzXn93MVZpJ/0hTbZRZqJs0t\nsGGlfmG+THrWG3WEizx78SpOL7pyn4LYPDcs7hzW6m0xeUcfhrONz1njqNHiMoOh\nztmBczf+b2JqoVg5DsJ1iqtSyx3BXJsM8QO7nXPu9HsigMYpSi5UtPPGGrpQO6KG\nqpay7EU//hdBYaIC4JY8oGID69lIiljVlPwGTOTK5rKuQEfLR6+C76gZSEWRjvyF\n9yiGMQCxlO0yEMO4RIxfJpEhNjl6SoVjF1EmgTGWLc+88JdoUgo=\n=ORu+\n-----END PGP SIGNATURE-----",
        "payload": "tree 7cce4ca196629a3bf18637f2adfee7fc7bfc717b\nparent d792e47421fcb9ce3b381c1e6d8902777ae3f9f3\nauthor Ben Woosley <ben.woosley@gmail.com> 1526850255 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1526879982 -0700\n\nDrop the chain argument to GetDifficulty\n\nThis removes the need to include rpc/blockchain.cpp in order to put\nGetDifficulty under test. GetDifficulty was called in two ways:\n* with a guaranteed non-null blockindex\n* with no argument\n\nChange the latter case to be provided chainActive.Tip() explicitly.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebec7317ca1acbc65afa7fb08fc219c315fc4527",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebec7317ca1acbc65afa7fb08fc219c315fc4527",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebec7317ca1acbc65afa7fb08fc219c315fc4527/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d792e47421fcb9ce3b381c1e6d8902777ae3f9f3"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 10,
      "deletions": 69
    },
    "files": [
      {
        "sha": "5cfc14e89d8fef8c6964cc6f2d759cadc2cdd815",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ebec7317ca1acbc65afa7fb08fc219c315fc4527",
        "patch": "@@ -6,7 +6,6 @@\n #include <rpc/blockchain.h>\n \n #include <amount.h>\n-#include <chain.h>\n #include <chainparams.h>\n #include <checkpoints.h>\n #include <coins.h>\n@@ -47,17 +46,13 @@ static std::mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n \n-/* Calculate the difficulty for a given block index,\n- * or the block index of the given chain.\n+/* Calculate the difficulty for a given block index.\n  */\n-double GetDifficulty(const CChain& chain, const CBlockIndex* blockindex)\n+double GetDifficulty(const CBlockIndex* blockindex)\n {\n     if (blockindex == nullptr)\n     {\n-        if (chain.Tip() == nullptr)\n-            return 1.0;\n-        else\n-            blockindex = chain.Tip();\n+        return 1.0;\n     }\n \n     int nShift = (blockindex->nBits >> 24) & 0xff;\n@@ -78,11 +73,6 @@ double GetDifficulty(const CChain& chain, const CBlockIndex* blockindex)\n     return dDiff;\n }\n \n-double GetDifficulty(const CBlockIndex* blockindex)\n-{\n-    return GetDifficulty(chainActive, blockindex);\n-}\n-\n UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n {\n     AssertLockHeld(cs_main);\n@@ -352,7 +342,7 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n         );\n \n     LOCK(cs_main);\n-    return GetDifficulty();\n+    return GetDifficulty(chainActive.Tip());\n }\n \n static std::string EntryDescriptionString()\n@@ -1229,7 +1219,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.pushKV(\"blocks\",                (int)chainActive.Height());\n     obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n     obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n-    obj.pushKV(\"difficulty\",            (double)GetDifficulty());\n+    obj.pushKV(\"difficulty\",            (double)GetDifficulty(chainActive.Tip()));\n     obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());\n     obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip()));\n     obj.pushKV(\"initialblockdownload\",  IsInitialBlockDownload());"
      },
      {
        "sha": "3aa8de2d2b899faa0a82b7c5a5780a463e5f0395",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=ebec7317ca1acbc65afa7fb08fc219c315fc4527",
        "patch": "@@ -16,7 +16,7 @@ class UniValue;\n  * @return A floating point number that is a multiple of the main net minimum\n  * difficulty (4295032833 hashes).\n  */\n-double GetDifficulty(const CBlockIndex* blockindex = nullptr);\n+double GetDifficulty(const CBlockIndex* blockindex);\n \n /** Callback for when block tip changed. */\n void RPCNotifyBlockChange(bool ibd, const CBlockIndex *);\n@@ -34,4 +34,3 @@ UniValue mempoolToJSON(bool fVerbose = false);\n UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n #endif\n-"
      },
      {
        "sha": "85b864e6b9da2aaa81185bb57069a0b2fc5232b9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ebec7317ca1acbc65afa7fb08fc219c315fc4527",
        "patch": "@@ -214,7 +214,7 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.pushKV(\"blocks\",           (int)chainActive.Height());\n     obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n     obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n-    obj.pushKV(\"difficulty\",       (double)GetDifficulty());\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty(chainActive.Tip()));\n     obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n     obj.pushKV(\"chain\",            Params().NetworkIDString());"
      },
      {
        "sha": "d2d0008122cf915eeb883c51187a7f97d181efc5",
        "filename": "src/test/blockchain_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 51,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/test/blockchain_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebec7317ca1acbc65afa7fb08fc219c315fc4527/src/test/blockchain_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockchain_tests.cpp?ref=ebec7317ca1acbc65afa7fb08fc219c315fc4527",
        "patch": "@@ -2,7 +2,7 @@\n \n #include \"stdlib.h\"\n \n-#include \"rpc/blockchain.cpp\"\n+#include \"rpc/blockchain.h\"\n #include \"test/test_bitcoin.h\"\n \n /* Equality between doubles is imprecise. Comparison should be done\n@@ -22,14 +22,6 @@ static CBlockIndex* CreateBlockIndexWithNbits(uint32_t nbits)\n     return block_index;\n }\n \n-static CChain CreateChainWithNbits(uint32_t nbits)\n-{\n-    CBlockIndex* block_index = CreateBlockIndexWithNbits(nbits);\n-    CChain chain;\n-    chain.SetTip(block_index);\n-    return chain;\n-}\n-\n static void RejectDifficultyMismatch(double difficulty, double expected_difficulty) {\n      BOOST_CHECK_MESSAGE(\n         DoubleEquals(difficulty, expected_difficulty, 0.00001),\n@@ -43,12 +35,7 @@ static void RejectDifficultyMismatch(double difficulty, double expected_difficul\n static void TestDifficulty(uint32_t nbits, double expected_difficulty)\n {\n     CBlockIndex* block_index = CreateBlockIndexWithNbits(nbits);\n-    /* Since we are passing in block index explicitly,\n-     * there is no need to set up anything within the chain itself.\n-     */\n-    CChain chain;\n-\n-    double difficulty = GetDifficulty(chain, block_index);\n+    double difficulty = GetDifficulty(block_index);\n     delete block_index;\n \n     RejectDifficultyMismatch(difficulty, expected_difficulty);\n@@ -84,43 +71,8 @@ BOOST_AUTO_TEST_CASE(get_difficulty_for_very_high_target)\n // Verify that difficulty is 1.0 for an empty chain.\n BOOST_AUTO_TEST_CASE(get_difficulty_for_null_tip)\n {\n-    CChain chain;\n-    double difficulty = GetDifficulty(chain, nullptr);\n+    double difficulty = GetDifficulty(nullptr);\n     RejectDifficultyMismatch(difficulty, 1.0);\n }\n \n-/* Verify that if difficulty is based upon the block index\n- * in the chain, if no block index is explicitly specified.\n- */\n-BOOST_AUTO_TEST_CASE(get_difficulty_for_null_block_index)\n-{\n-    CChain chain = CreateChainWithNbits(0x1df88f6f);\n-\n-    double difficulty = GetDifficulty(chain, nullptr);\n-    delete chain.Tip();\n-\n-    double expected_difficulty = 0.004023;\n-\n-    RejectDifficultyMismatch(difficulty, expected_difficulty);\n-}\n-\n-/* Verify that difficulty is based upon the explicitly specified\n- * block index rather than being taken from the provided chain,\n- * when both are present.\n- */\n-BOOST_AUTO_TEST_CASE(get_difficulty_for_block_index_overrides_tip)\n-{\n-    CChain chain = CreateChainWithNbits(0x1df88f6f);\n-    /* This block index's nbits should be used\n-     * instead of the chain's when calculating difficulty.\n-     */\n-    CBlockIndex* override_block_index = CreateBlockIndexWithNbits(0x12345678);\n-\n-    double difficulty = GetDifficulty(chain, override_block_index);\n-    delete chain.Tip();\n-    delete override_block_index;\n-\n-    RejectDifficultyMismatch(difficulty, 5913134931067755359633408.0);\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]