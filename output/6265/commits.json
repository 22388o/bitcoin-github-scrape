[
  {
    "sha": "b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmVhNjQyZDhjMTBkNGRkZTA3MWMxYmUzZmI5MzFhMWI3NGEzNzg1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-01T14:35:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:23Z"
      },
      "message": "add bip32 pubkey serialization\n\nCExtPubKey should be serializable like CPubKey",
      "tree": {
        "sha": "7a0b25b769704401212644dd26de4ae40a6cb4fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a0b25b769704401212644dd26de4ae40a6cb4fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemajAAoJECnUvLZBb1Ps1uwP/1czlnEp/iebuSeijXoaK6vC\ncVRFEbOo1AUPYXlf5uJfBqyFvEzH5hieAJmaWu83z2dKVubwhYVeBB89DShyE5aY\nCh4ZzaVuYrA6CKuzQouE1oWjv2If7eL9LnjCEdOvzonkFuldjfubfxLE2Rk1/hTk\nsdtrd8N0e/O//z35vV9nKHpGkdqQlV1wm/9ROKKg8tELsLiTWLHhT84WJSSA3Nr/\nnHRpIO3d/+XAsYUDWsJyQAxr2nR32zD5NUmBXrW/BJj55MzOVHbmzhKSaSDBYBk6\nuIZrs2qAVgINO7ggD+/Je7v4OkfsnbjCqvy1cx0GRAsk1ii2AAfGOw5wu+WWVDvx\ny2H6Clq449LTeIYp7Fm5q4Lbb73F2c/bJOlZjgiLJqBDInYxYqcK5qVwVP1oj4Vu\nU+W2nzX8Nr11/nr6C0QJNIpLbQojNeVg2lQoQoWlnBIWYBv99FeBMA0FYzWSe1IB\ncjaU5OgY/eCZtDt52NTGNn0UQMMy3UHq9bMfNyWZbU7BxiRj+dOEPzaJdJO+QXSg\n8fGTTocB4zMwt8bgmvy7MHO0ugg514cTHt6u2QDsUFVvP8O/uHdw+2TxYGIpLP/S\npcLuSuDOeaTIEgLadPRcFmAjFFI5DMvRSkCpbgKNY/UMAx4SOklCuuLYaTubLrWZ\nqV1eL56QcFOduynNyTjJ\n=TqpD\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a0b25b769704401212644dd26de4ae40a6cb4fa\nparent be9a9a3d2253ceccf123572b97a890c489a5a9be\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433169319 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862243 +0100\n\nadd bip32 pubkey serialization\n\nCExtPubKey should be serializable like CPubKey\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ea642d8c10d4dde071c1be3fb931a1b74a3785/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be9a9a3d2253ceccf123572b97a890c489a5a9be"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "66fa2fd7a37cc5c58b8adfcfdc4142dfcc03418c",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ea642d8c10d4dde071c1be3fb931a1b74a3785/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ea642d8c10d4dde071c1be3fb931a1b74a3785/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
        "patch": "@@ -208,6 +208,28 @@ struct CExtPubKey {\n     void Encode(unsigned char code[74]) const;\n     void Decode(const unsigned char code[74]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n+\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n+        return 75;\n+    }\n+    template <typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n+        unsigned int len = 74;\n+        ::WriteCompactSize(s, len);\n+        unsigned char code[74];\n+        Encode(code);\n+        s.write((const char *)&code[0], len);\n+    }\n+    template <typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n+        unsigned int len = ::ReadCompactSize(s);\n+        unsigned char code[74];\n+        s.read((char *)&code[0], len);\n+        Decode(code);\n+    }\n };\n \n /** Users of this module must hold an ECCVerifyHandle. The constructor and"
      },
      {
        "sha": "0e912b9eaf7f5f160b878911c5c95c5f4d1874ae",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ea642d8c10d4dde071c1be3fb931a1b74a3785/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ea642d8c10d4dde071c1be3fb931a1b74a3785/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
        "patch": "@@ -117,6 +117,10 @@ void RunTest(const TestVector &test) {\n         }\n         key = keyNew;\n         pubkey = pubkeyNew;\n+\n+        CDataStream ss(SER_DISK, CLIENT_VERSION);\n+        ss << pubkeyNew;\n+        BOOST_CHECK(ss.size() == 75);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "812a39517409634047b31f695ca891876e0cc205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTJhMzk1MTc0MDk2MzQwNDdiMzFmNjk1Y2E4OTE4NzZlMGNjMjA1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-07T07:29:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:23Z"
      },
      "message": "add constant for bip32 extkey size",
      "tree": {
        "sha": "18b2d7868360b5c9b036bdff1d62ca4b964c75a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18b2d7868360b5c9b036bdff1d62ca4b964c75a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/812a39517409634047b31f695ca891876e0cc205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemajAAoJECnUvLZBb1Psl3sP/10r/04hgvPa/5r7l2UKuMlP\nVKni6UtFih2Dinuf42EPy+SDd+QmNDE3tRXQQuob20kx800VYYqY2DXmLdPI3WHJ\n/Oyc/CiYrosX0OnlZkgvBpltWn8qs1Y0oZROEFFZQps/LIvs7/Ocyl0ZSbcsEivv\nYCyztiM3oQNLQ4ra1n297WN/dmInkRP/hLnSDAVlYVT05bNomHRyBLCxgQ80ydEL\nD8oks2myA425lkVY2cZaIJ02NCgGGovNGHmUdMQzoE6WNFjPr1tvhfs3WD70jCOI\nEqkbHK//K3B1euobXoBQ2Du1OLewgvjyRjGpymvOPkiwq37axcRsDIUZUdFAV2Xi\nLKpNr//LgAcHP/rf4IDhYHMpxbwk7S+61+wF9h5On8W/x3ehmLeLNmDhMShfqb4K\nluduN/n6o1yiG7vzsGwRVOSv6XkLwI8UY3H6F0lLBRqBBwI0S26QpevtnatqEjim\nrOGy+T1hqVtn5Pc5g8BCVn4l2vKlqqmiV43pD/FvolWAyj0RpyT1VvZay1l+iOj+\nEvAVTQOqmSizZd2o/45bQAv465aEqmPU2EfrXw1QcLZuL39d2hC1/gaWUjyuevLP\nJ1RFl8W5N0jIY2M/HTFUPJzZ9utLzE4GabJ2c0xgz3fmnqNJKZl/K9mFyUrv4+2B\nUuXtnGMdUs3LRTTRCRT+\n=ziMd\n-----END PGP SIGNATURE-----",
        "payload": "tree 18b2d7868360b5c9b036bdff1d62ca4b964c75a9\nparent b2ea642d8c10d4dde071c1be3fb931a1b74a3785\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433662176 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862243 +0100\n\nadd constant for bip32 extkey size\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812a39517409634047b31f695ca891876e0cc205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/812a39517409634047b31f695ca891876e0cc205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812a39517409634047b31f695ca891876e0cc205/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ea642d8c10d4dde071c1be3fb931a1b74a3785",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2ea642d8c10d4dde071c1be3fb931a1b74a3785"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e37376ebda5ebd12530b5ca4f082b8944f7e094e",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812a39517409634047b31f695ca891876e0cc205/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812a39517409634047b31f695ca891876e0cc205/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=812a39517409634047b31f695ca891876e0cc205",
        "patch": "@@ -275,7 +275,7 @@ CExtPubKey CExtKey::Neuter() const {\n     return ret;\n }\n \n-void CExtKey::Encode(unsigned char code[74]) const {\n+void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[0] = nDepth;\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n@@ -286,12 +286,12 @@ void CExtKey::Encode(unsigned char code[74]) const {\n     memcpy(code+42, key.begin(), 32);\n }\n \n-void CExtKey::Decode(const unsigned char code[74]) {\n+void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n     memcpy(chaincode.begin(), code+9, 32);\n-    key.Set(code+42, code+74, true);\n+    key.Set(code+42, code+BIP32_EXTKEY_SIZE, true);\n }\n \n bool ECC_InitSanityCheck() {"
      },
      {
        "sha": "2b93835d79ba7cc5854e44774ef57196167ac09e",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812a39517409634047b31f695ca891876e0cc205/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812a39517409634047b31f695ca891876e0cc205/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=812a39517409634047b31f695ca891876e0cc205",
        "patch": "@@ -164,8 +164,8 @@ struct CExtKey {\n                a.chaincode == b.chaincode && a.key == b.key;\n     }\n \n-    void Encode(unsigned char code[74]) const;\n-    void Decode(const unsigned char code[74]);\n+    void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n+    void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtKey& out, unsigned int nChild) const;\n     CExtPubKey Neuter() const;\n     void SetMaster(const unsigned char* seed, unsigned int nSeedLen);"
      },
      {
        "sha": "a2cd7d7a19c8de29ce1f66171ed9e2d178261e81",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812a39517409634047b31f695ca891876e0cc205/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812a39517409634047b31f695ca891876e0cc205/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=812a39517409634047b31f695ca891876e0cc205",
        "patch": "@@ -246,7 +246,7 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChi\n     return true;\n }\n \n-void CExtPubKey::Encode(unsigned char code[74]) const {\n+void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[0] = nDepth;\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n@@ -256,12 +256,12 @@ void CExtPubKey::Encode(unsigned char code[74]) const {\n     memcpy(code+41, pubkey.begin(), 33);\n }\n \n-void CExtPubKey::Decode(const unsigned char code[74]) {\n+void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n     memcpy(chaincode.begin(), code+9, 32);\n-    pubkey.Set(code+41, code+74);\n+    pubkey.Set(code+41, code+BIP32_EXTKEY_SIZE);\n }\n \n bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {"
      },
      {
        "sha": "5001e874812b3b3097ccfd0ac23bf446948591b5",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812a39517409634047b31f695ca891876e0cc205/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812a39517409634047b31f695ca891876e0cc205/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=812a39517409634047b31f695ca891876e0cc205",
        "patch": "@@ -23,6 +23,8 @@\n  * script supports up to 75 for single byte push\n  */\n \n+const unsigned int BIP32_EXTKEY_SIZE = 74;\n+\n /** A reference to a CKey: the Hash160 of its serialized public key */\n class CKeyID : public uint160\n {\n@@ -205,28 +207,28 @@ struct CExtPubKey {\n                a.chaincode == b.chaincode && a.pubkey == b.pubkey;\n     }\n \n-    void Encode(unsigned char code[74]) const;\n-    void Decode(const unsigned char code[74]);\n+    void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n+    void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n \n     unsigned int GetSerializeSize(int nType, int nVersion) const\n     {\n-        return 75;\n+        return BIP32_EXTKEY_SIZE+1; //add one byte for the size (compact int)\n     }\n     template <typename Stream>\n     void Serialize(Stream& s, int nType, int nVersion) const\n     {\n-        unsigned int len = 74;\n+        unsigned int len = BIP32_EXTKEY_SIZE;\n         ::WriteCompactSize(s, len);\n-        unsigned char code[74];\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n         Encode(code);\n         s.write((const char *)&code[0], len);\n     }\n     template <typename Stream>\n     void Unserialize(Stream& s, int nType, int nVersion)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n-        unsigned char code[74];\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n         s.read((char *)&code[0], len);\n         Decode(code);\n     }"
      }
    ]
  },
  {
    "sha": "9ddff30a26702778a95845662ad1642717c46996",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGRmZjMwYTI2NzAyNzc4YTk1ODQ1NjYyYWQxNjQyNzE3YzQ2OTk2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-07T10:21:48Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:23Z"
      },
      "message": "CKeyMetadata: support for bip32",
      "tree": {
        "sha": "a85a272bdb9f9079bead1efd587dc84a9eefacdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85a272bdb9f9079bead1efd587dc84a9eefacdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ddff30a26702778a95845662ad1642717c46996",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemajAAoJECnUvLZBb1Ps6lAQAKUgZr0BQFznxpseRx28i9px\nkdLnCs2E9wTN2pFOYQEPm1DQ2w27CPPUVyBjZgslYI5E+u2cq3SWthxG30RKwGIz\nJIvvKT+05oOM0sZ2tNIdcVplvxJOa3HnPj/pUO5xPw6YzbACR1lPL8qbDRI32SwP\nXpezj6xA2XiRz/Z6toECmBtykK1sArWXZVzO1YlysDBtIg9zGbPZeJx++44wG66S\nwVI+MTABc5IIoPZmlu2Za0g1HBN2XxoWagUKHYgkQVw/5TrWnmDE7qehIViNjNK1\nmSREEEhwiYnZBz4fIRCZ1CGp3lrQ1i0bu+zl3e2Zml2OloPgXniqRm7bRAcpEjq4\n9Sd1LKCUY8stch2IGyL345E/c4WDA4J6r2/6AjV5ZdNgGzq+WtODX0INPmfyeaGV\nzq/lny/PpBgknuu1a02gBcYdcAqn4VRbxv8yI9JKi7X2n8ptZ0cWzqTasUVbec6k\nUdnb5cZZkj5/oo/IKG6rXcibgBsEC2Dnl+8m2XXMZHP06tDCSyesBeM8/8z8eA0O\nYls1gex6+R8pCgvILWVA3gzEeggZlx6oxiO0Bubs/f9Jrhwuxw+FNxsipWvXPRcW\nt6p4LSbu2tRuNA6wAX3E73MHEKQ+9T2xh3gNcJEgZPo2xHWFEspUnnZTVVvkHKjg\nkQZvL0Bt2O51CaEXl1jn\n=57bU\n-----END PGP SIGNATURE-----",
        "payload": "tree a85a272bdb9f9079bead1efd587dc84a9eefacdd\nparent 812a39517409634047b31f695ca891876e0cc205\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433672508 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862243 +0100\n\nCKeyMetadata: support for bip32\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ddff30a26702778a95845662ad1642717c46996",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ddff30a26702778a95845662ad1642717c46996",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ddff30a26702778a95845662ad1642717c46996/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "812a39517409634047b31f695ca891876e0cc205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812a39517409634047b31f695ca891876e0cc205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/812a39517409634047b31f695ca891876e0cc205"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c4e69564ba1e7a0b7f76be68aa9373306c62c76e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ddff30a26702778a95845662ad1642717c46996/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ddff30a26702778a95845662ad1642717c46996/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=9ddff30a26702778a95845662ad1642717c46996",
        "patch": "@@ -43,17 +43,20 @@ enum DBErrors\n class CKeyMetadata\n {\n public:\n-    static const int CURRENT_VERSION=1;\n+    static const int CURRENT_VERSION=2;\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n \n+    unsigned int nChild;\n+    CKeyID parentKeyID;\n+\n     CKeyMetadata()\n     {\n         SetNull();\n     }\n     CKeyMetadata(int64_t nCreateTime_)\n     {\n-        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        SetNull();\n         nCreateTime = nCreateTime_;\n     }\n \n@@ -64,12 +67,20 @@ class CKeyMetadata\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(nCreateTime);\n+        if(nVersion >= 2)\n+        {\n+            READWRITE(nChild);\n+            READWRITE(parentKeyID);\n+        }\n+\n     }\n \n     void SetNull()\n     {\n         nVersion = CKeyMetadata::CURRENT_VERSION;\n         nCreateTime = 0;\n+        nChild = 0;\n+        parentKeyID = CKeyID();\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "b6e30bb97c471030a7a333b38c481291530c0ee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmUzMGJiOTdjNDcxMDMwYTdhMzMzYjM4YzQ4MTI5MTUzMGMwZWU1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-07T10:22:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:24Z"
      },
      "message": "walletdb: basic bip32 support",
      "tree": {
        "sha": "ef1be06b4fad0aff97627a96d7d53b1e89ca6aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef1be06b4fad0aff97627a96d7d53b1e89ca6aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6e30bb97c471030a7a333b38c481291530c0ee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemakAAoJECnUvLZBb1Ps3XwP/2trQ9FftbwNpUhofPuO3Wy1\nZBGTEPJFBdHEp+F7CNGe7+iLlfMdGFkrkn8vUHOk/8Ob5bJDLXvLfXGZtcqrdkMB\nm6EgWgTMfWvuRhGPI2e+6ZLkgM9gpybTYdm+PLF+O5Dcw2MQ9V8BsKd+e7K6HER4\nOpSxlT++m9HbZvuYJtsKAFof6DkotLxt17AoHpcZ/FToSAsL7rRcVdYayL4djbKf\ne3+eRfcEJ8Fj164isfKOBLBeTPx8QyypQpzPgAI8e9BS8Z34a42jqbK8snYtrEVM\nXodyhJ5iQDpkEbVogD4CvcVthwXJbeOsg/7UWsTYhH6Ksi7Cv4TnDg31bZG68X6B\nzrVVTm4TxMgO5kAW3YlO95nfeJFwLyXcQjw7PZZoEuQjV3CImE0Or8JZ2XS38S8O\nJ1DDCdFYpNzRuyMSNklpTQQiOHHYHguJsnzywRKrao8yq8Ce/2i03LLjBBqfK91f\n3O+xjQ09y8iG96jAuYAO6/aL/Jp+gnfXnahUu66uldvod/N/3SPAMbN46PlxODGa\ndYaz9R/t1B9JLuiCTvBrKTJOSUK7Qr+jQbIeYeXHN9sKI6X2Gz4m2muPEx790h8K\nGbiiELEnHayVfrtKPKsZT5dV7Fv6M/0XbNShlQUWGlzUvBC5QpS5wiFyfXqcBsZx\nQ3v6YIXvxeCq1bXzOuo5\n=nVJT\n-----END PGP SIGNATURE-----",
        "payload": "tree ef1be06b4fad0aff97627a96d7d53b1e89ca6aa4\nparent 9ddff30a26702778a95845662ad1642717c46996\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433672527 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862244 +0100\n\nwalletdb: basic bip32 support\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6e30bb97c471030a7a333b38c481291530c0ee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6e30bb97c471030a7a333b38c481291530c0ee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6e30bb97c471030a7a333b38c481291530c0ee5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ddff30a26702778a95845662ad1642717c46996",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ddff30a26702778a95845662ad1642717c46996",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ddff30a26702778a95845662ad1642717c46996"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 74,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3a28c569d50577e3c7c04c953bd0b342426f53bf",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6e30bb97c471030a7a333b38c481291530c0ee5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6e30bb97c471030a7a333b38c481291530c0ee5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b6e30bb97c471030a7a333b38c481291530c0ee5",
        "patch": "@@ -128,6 +128,49 @@ bool CWalletDB::EraseWatchOnly(const CScript &dest)\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n+/* BIP32 STACK */\n+bool CWalletDB::WriteHDMasterSeed(const std::string &masterSeedHex)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"hdmasterseed\"), masterSeedHex);\n+}\n+\n+bool CWalletDB::EraseHDMasterSeed(const CScript &dest)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(std::string(\"hdmasterseed\"));\n+}\n+\n+bool CWalletDB::WriteHDExternalPubKey(const CExtPubKey &externalPubKey)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"hdexternalpubkey\"), externalPubKey);\n+}\n+\n+bool CWalletDB::WriteHDInternalPubKey(const CExtPubKey &internalPubKey)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"hdinternalpubkey\"), internalPubKey);\n+}\n+\n+bool CWalletDB::WriteHDChainPath(const std::string &chainPath)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"hdchainpath\"), chainPath);\n+}\n+\n+bool CWalletDB::WriteHDPubKey(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta)\n+{\n+    nWalletDBUpdated++;\n+\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+               keyMeta))\n+        return false;\n+\n+    return Write(std::make_pair(std::string(\"hdpubkey\"), vchPubKey), '1');\n+}\n+/* END: BIP32 STACK */\n+\n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdated++;\n@@ -495,6 +538,16 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n         }\n+        else if (strType == \"hdpubkey\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+            if (!pwallet->LoadKey(CKey(), vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadKey failed\";\n+                return false;\n+            }\n+        }\n         else if (strType == \"mkey\")\n         {\n             unsigned int nID;\n@@ -598,6 +651,18 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n         }\n+        else if (strType == \"hdexternalpubkey\")\n+        {\n+            ssValue >> pwallet->HDexternalPubKey;\n+        }\n+        else if (strType == \"hdinternalpubkey\")\n+        {\n+            ssValue >> pwallet->HDinternalPubKey;\n+        }\n+        else if (strType == \"hdchainpath\")\n+        {\n+            ssValue >> pwallet->HDchainPath;\n+        }\n     } catch (...)\n     {\n         return false;"
      },
      {
        "sha": "434a11b39384416652e689faa43e3c2031c3e502",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6e30bb97c471030a7a333b38c481291530c0ee5/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6e30bb97c471030a7a333b38c481291530c0ee5/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b6e30bb97c471030a7a333b38c481291530c0ee5",
        "patch": "@@ -110,6 +110,15 @@ class CWalletDB : public CDB\n     bool WriteWatchOnly(const CScript &script);\n     bool EraseWatchOnly(const CScript &script);\n \n+    bool WriteHDMasterSeed(const std::string &masterSeedHex);\n+    bool EraseHDMasterSeed(const CScript &dest);\n+\n+    bool WriteHDExternalPubKey(const CExtPubKey &externalPubKey);\n+    bool WriteHDInternalPubKey(const CExtPubKey &internalPubKey);\n+\n+    bool WriteHDChainPath(const std::string &chainPath);\n+    bool WriteHDPubKey(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta);\n+\n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);\n "
      }
    ]
  },
  {
    "sha": "f814de07cfa9fac0c4016740386463c242d1459a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODE0ZGUwN2NmYTlmYWMwYzQwMTY3NDAzODY0NjNjMjQyZDE0NTlh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-07T10:22:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:24Z"
      },
      "message": "basic bip32 support",
      "tree": {
        "sha": "76d6fbeff9ec7b496060be53bc12a814aa51369f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76d6fbeff9ec7b496060be53bc12a814aa51369f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f814de07cfa9fac0c4016740386463c242d1459a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemakAAoJECnUvLZBb1Ps8ZQQALLBbi3M+RQo3/VcVlW9PLPc\nBSGj+OMr1ayy9cx8X03AGUnQRcHmM9+LmpB+rwnHbcANDeAAI8p89kK8GlgFRkSo\niF36yRVNq8MHmQF5MIpNcHqdxQif9WWY9wuPCSPF8iHbH6Y1roUrSbsyYGThFERC\nwCKE4GIhrMNaBktnakPmMSKS2gXD1pv2w2R5eDj4NCLItMwOzVr74i3rbago4N4P\np6I670A4T2unPuwHnLk2LjNGzwRIOsHbhSEXvPMEvrxi/n7aOFg1xYLmByQ5hXAb\nRMUtw8VFnh9w56PS5fqkaANKqRQ8hQ3eim5fkDalE48oROfjPBAAnw8DkpZw7k5Y\n5Yo2aMA/0WSAdlDS8eLSnR1LM47ZlW2MIAbgZhhvtOsBOjJE1p8ujCE27ScXvmfg\nrWu2XJZswZN0q00cl6Wz0wn9E3lcsqKs+DmHzqJcMuJoU44iyIL6WgU4By2IwYge\nujPPzg9EoWeREjNSTf9EHlptMZL/SIORYY7RnC1o2CYgALvqazFy3ZUxD/2OSvny\nFxOquh++MDFbMCV90Rnhq6xSIU9aZ4JKwlnVtabywtT5jhLweOrzhvqgZA6Ane+n\nej1eShJ9rUuZfzQKAieuAwMhoFeqs0y0DVl2pKA6DRtsdDIBMyXSCYgVJYwhWV9p\nmfgYmMxhx4TroxPtV5lL\n=KYIJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 76d6fbeff9ec7b496060be53bc12a814aa51369f\nparent b6e30bb97c471030a7a333b38c481291530c0ee5\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433672553 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862244 +0100\n\nbasic bip32 support\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f814de07cfa9fac0c4016740386463c242d1459a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f814de07cfa9fac0c4016740386463c242d1459a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f814de07cfa9fac0c4016740386463c242d1459a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6e30bb97c471030a7a333b38c481291530c0ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6e30bb97c471030a7a333b38c481291530c0ee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6e30bb97c471030a7a333b38c481291530c0ee5"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 354,
      "deletions": 7
    },
    "files": [
      {
        "sha": "dbcd5d0cedb02a6aee9f09ae51533fa46c756eb2",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f814de07cfa9fac0c4016740386463c242d1459a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f814de07cfa9fac0c4016740386463c242d1459a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=f814de07cfa9fac0c4016740386463c242d1459a",
        "patch": "@@ -372,6 +372,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"walletlock\",             &walletlock,             true  },\n     { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true  },\n     { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true  },\n+    { \"wallet\",             \"hdchainpath\",            &hdchainpath,            true  },\n+    { \"wallet\",             \"hdgetaddress\",           &hdgetaddress,           true  },\n #endif // ENABLE_WALLET\n };\n "
      },
      {
        "sha": "5b77d06ae851f32ca0584d13b75f382571aeff07",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f814de07cfa9fac0c4016740386463c242d1459a/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f814de07cfa9fac0c4016740386463c242d1459a/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=f814de07cfa9fac0c4016740386463c242d1459a",
        "patch": "@@ -234,6 +234,8 @@ extern UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n extern UniValue getnetworkinfo(const UniValue& params, bool fHelp);\n extern UniValue setmocktime(const UniValue& params, bool fHelp);\n extern UniValue resendwallettransactions(const UniValue& params, bool fHelp);\n+extern UniValue hdchainpath(const UniValue& params, bool fHelp);\n+extern UniValue hdgetaddress(const UniValue& params, bool fHelp);\n \n extern UniValue getrawtransaction(const UniValue& params, bool fHelp); // in rcprawtransaction.cpp\n extern UniValue listunspent(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "3c9d8e064fab0c21d2b8f522f1c767036b3354ad",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 1,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f814de07cfa9fac0c4016740386463c242d1459a",
        "patch": "@@ -15,11 +15,13 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"wallet.h\"\n #include \"walletdb.h\"\n \n #include <stdint.h>\n \n+#include <boost/algorithm/string/replace.hpp>\n #include <boost/assign/list_of.hpp>\n \n #include <univalue.h>\n@@ -129,7 +131,6 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(keyID).ToString();\n }\n \n-\n CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n@@ -2442,3 +2443,116 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     return result;\n }\n+\n+/* BIP32 stack */\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c/k\";\n+\n+UniValue hdchainpath(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdchainpath set|get (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nEnables/sets HD option for this wallet\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdchainpath\", \"get\")\n+                            + HelpExampleCli(\"hdchainpath\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdchainpath\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    if(params[0].get_str() == \"set\")\n+    {\n+        assert(pwalletMain != NULL);\n+        const unsigned int bip32MasterSeedLength = 32;\n+\n+        CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n+        bool fGenerateMasterSeed = true;\n+        CExtPubKey masterPubKey;\n+        std::string chainPath = hd_default_chainpath;\n+        if (params.size() > 1 && params[1].isStr() && params[1].get_str() != \"default\")\n+            chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n+\n+        if (params.size() > 2 && params[2].isStr())\n+        {\n+            if (!IsHex(params[2].get_str()))\n+                throw runtime_error(\"HD master seed must encoded in hex\");\n+\n+            std::vector<unsigned char> seed = ParseHex(params[2].get_str());\n+            if (seed.size() != bip32MasterSeedLength)\n+                throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n+\n+            memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n+            memory_cleanse(&seed[0], bip32MasterSeedLength);\n+            fGenerateMasterSeed = false;\n+        }\n+\n+        pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, masterPubKey);\n+        if (fGenerateMasterSeed)\n+            result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+    }\n+\n+\n+\n+    return result;\n+}\n+\n+UniValue hdgetaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+                            \"hdgetaddress (<childindex>)\\n\"\n+                            \"\\nReturns a Bitcoin address for receiving payments.\\n\"\n+                            \"\\nautomatically uses the next available childindex if no index is given\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"childindex\\\"        (numeric, optional) child key index. ATTENTION: automatic index counting will start at the highes available child key index\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"address\\\" : \\\"<address>\\\",  string) The new bitcoin address\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The used chainpath\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetaddress\", \"\")\n+                            + HelpExampleCli(\"hdgetaddress\", \"100\")\n+                            + HelpExampleRpc(\"hdgetaddress\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CPubKey newKey;\n+    if (params.size() == 1 && params[0].isNum())\n+    {\n+        if (!pwalletMain->HDGetChildPubKeyAtIndex(newKey, params[0].get_int()))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    else\n+    {\n+        if (!pwalletMain->HDGetNextChildPubKey(newKey))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    CKeyID keyID = newKey.GetID();\n+    \n+    pwalletMain->SetAddressBook(keyID, \"\", \"receive\");\n+\n+    std::string keysChainPath = pwalletMain->HDGetChainPath();\n+    std::stringstream ss; ss << pwalletMain->mapKeyMetadata[keyID].nChild;\n+    boost::replace_all(keysChainPath, \"c\", \"0\");\n+    boost::replace_all(keysChainPath, \"k\", ss.str());\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", CBitcoinAddress(keyID).ToString()));\n+    result.push_back(Pair(\"chainpath\", keysChainPath));\n+    return result;\n+}\n+/* end BIP32 stack */"
      },
      {
        "sha": "04226d499bd6bbad2a380657b7f1af642b731e4a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 1,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f814de07cfa9fac0c4016740386463c242d1459a",
        "patch": "@@ -13,6 +13,7 @@\n #include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"eccryptoverify.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n@@ -27,7 +28,7 @@\n \n #include <assert.h>\n \n-#include <boost/algorithm/string/replace.hpp>\n+#include <boost/algorithm/string.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n@@ -2871,6 +2872,209 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n     return false;\n }\n \n+/* BIP32 stack */\n+bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, const CExtPubKey& pubMasterKey, bool overwrite)\n+{\n+    //only allow setting a new chainpath (and generat int/ext keys) if no chain has set (or has been deleted)\n+    if (!overwrite && !HDchainPath.empty())\n+        throw std::runtime_error(\"CWallet::SetHDChainPath(): chainpath already set!\");\n+\n+    HDchainPath = chainPathIn;\n+    boost::to_lower(HDchainPath);\n+    boost::erase_all(HDchainPath, \" \");\n+    if (HDchainPath.size() > 0 && HDchainPath.back() == '/')\n+        HDchainPath.resize(HDchainPath.size() - 1);\n+\n+    if (!CWalletDB(strWalletFile).WriteHDChainPath(HDchainPath))\n+        throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing chainpath failed!\");\n+\n+    std::vector<std::string> pathFragments;\n+    boost::split(pathFragments, HDchainPath, boost::is_any_of(\"/\"));\n+\n+    CExtKey parentKey;\n+    BOOST_FOREACH(std::string fragment, pathFragments)\n+    {\n+        bool harden = false;\n+        if (fragment.back() == '\\'')\n+            harden = true;\n+\n+        if (fragment == \"m\")\n+        {\n+            //generate a master key seed\n+            //currently seed size is fixed to 256bit\n+            assert(vSeed.size() == 32);\n+            if (generateMaster)\n+            {\n+                RandAddSeedPerfmon();\n+                do {\n+                    GetRandBytes(&vSeed[0], vSeed.size());\n+                } while (!eccrypto::Check(&vSeed[0]));\n+            }\n+\n+            CExtKey bip32MasterKey;\n+            bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n+\n+            CBitcoinExtKey b58key;\n+            b58key.SetKey(bip32MasterKey);\n+            LogPrintf(\"key: %s\", b58key.ToString());\n+\n+            vMasterSeed = vSeed;\n+            uint32_t seedNum = 0;\n+            if (!CWalletDB(strWalletFile).WriteHDMasterSeed(vSeed)) //for easy serialization store the unsigned char[32] as hex string. //TODO: use 32byte binary ser.\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing hdmasterseed failed!\");\n+\n+            parentKey = bip32MasterKey;\n+        }\n+        else if (fragment == \"k\")\n+        {\n+            harden = false;\n+        }\n+        else if (fragment == \"c\")\n+        {\n+            harden = false;\n+            CExtPubKey parentExtPubKey = parentKey.Neuter();\n+            parentExtPubKey.Derive(HDexternalPubKey, 0);\n+            parentExtPubKey.Derive(HDinternalPubKey, 1);\n+\n+            uint32_t keyRingNum = 0;\n+            if (!CWalletDB(strWalletFile).WriteHDExternalPubKey(HDexternalPubKey))\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing external pubkey failed!\");\n+\n+            if (!CWalletDB(strWalletFile).WriteHDInternalPubKey(HDinternalPubKey))\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing internal pubkey failed!\");\n+        }\n+        else\n+        {\n+            CExtKey childKey;\n+            int nIndex = atoi(fragment.c_str());\n+            parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n+            parentKey = childKey;\n+        }\n+    }\n+}\n+\n+bool CWallet::HDGetChildPubKeyAtIndex(CPubKey &pubKeyOut, unsigned int nIndex, bool internal)\n+{\n+    if ( (internal && !HDinternalPubKey.pubkey.IsValid()) || !HDexternalPubKey.pubkey.IsValid())\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Missing HD extended pubkey!\");\n+\n+    if (nIndex >= 0x80000000)\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): no more available keys!\");\n+\n+    CExtPubKey useExtKey = internal ? HDinternalPubKey : HDexternalPubKey;\n+    CExtPubKey childKey;\n+    useExtKey.Derive(childKey, nIndex);\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    mapKeyMetadata[childKey.pubkey.GetID()] = CKeyMetadata(nCreationTime);\n+    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n+        nTimeFirstKey = nCreationTime;\n+\n+    mapKeyMetadata[childKey.pubkey.GetID()].parentKeyID = useExtKey.pubkey.GetID();\n+    mapKeyMetadata[childKey.pubkey.GetID()].nChild = nIndex;\n+\n+    if (!CCryptoKeyStore::AddKeyPubKey(CKey(), childKey.pubkey))\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): add key to keystore failed!\");\n+\n+    if (!CWalletDB(strWalletFile).WriteHDPubKey(childKey.pubkey, mapKeyMetadata[childKey.pubkey.GetID()]))\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Writing pubkey failed!\");\n+    \n+    pubKeyOut = childKey.pubkey;\n+    return true;\n+}\n+\n+bool CWallet::HDGetNextChildPubKey(CPubKey &pubKeyOut, bool internal)\n+{\n+    if (!HDchainPath.empty())\n+    {\n+        //try to get a HD key\n+        unsigned int nNextChildIndex = 0;\n+        for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n+            if (!it->second.parentKeyID.IsNull() && it->second.nChild >= nNextChildIndex)\n+                nNextChildIndex = it->second.nChild+1;\n+\n+        return HDGetChildPubKeyAtIndex(pubKeyOut, nNextChildIndex, internal);\n+    }\n+    return false;\n+}\n+\n+bool CWallet::HDDeriveKeyFromKeyID(CKey& keyOut, CKeyID keyId) const\n+{\n+    std::map<CKeyID, CKeyMetadata>::const_iterator it=mapKeyMetadata.find(keyId);\n+    if (it == mapKeyMetadata.end())\n+        return false;\n+\n+    CKeyMetadata meta = it->second;\n+    if(meta.parentKeyID == HDexternalPubKey.pubkey.GetID() || meta.parentKeyID == HDinternalPubKey.pubkey.GetID())\n+    {\n+        std::vector<std::string> pathFragments;\n+        boost::split(pathFragments, HDchainPath, boost::is_any_of(\"/\"));\n+\n+        CExtKey extKey;\n+        CExtKey parentKey;\n+        BOOST_FOREACH(std::string fragment, pathFragments)\n+        {\n+            bool harden = false;\n+            if (fragment.back() == '\\'')\n+                harden = true;\n+\n+            if (fragment == \"m\")\n+            {\n+                CExtKey bip32MasterKey;\n+                bip32MasterKey.SetMaster(&vMasterSeed[0], vMasterSeed.size());\n+                parentKey = bip32MasterKey;\n+            }\n+            else if (fragment == \"k\")\n+            {\n+                harden = false;\n+            }\n+            else if (fragment == \"c\")\n+            {\n+                harden = false;\n+                parentKey.Derive(extKey, (meta.parentKeyID == HDexternalPubKey.pubkey.GetID()) ? 0 : 1);\n+                CExtPubKey extPubKey = extKey.Neuter();\n+                assert(extPubKey.pubkey.GetID() == ( (meta.parentKeyID == HDexternalPubKey.pubkey.GetID()) ? HDexternalPubKey.pubkey.GetID() : HDinternalPubKey.pubkey.GetID()) );\n+            }\n+            else\n+            {\n+                CExtKey childKey;\n+                int nIndex = atoi(fragment.c_str());\n+                parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n+                parentKey = childKey;\n+            }\n+        }\n+\n+        CExtKey newKey;\n+        extKey.Derive(newKey,meta.nChild);\n+        keyOut = newKey.key;\n+        return true;\n+    }\n+}\n+\n+std::string CWallet::HDGetChainPath()\n+{\n+    return HDchainPath;\n+}\n+\n+bool CWallet::GetKey(const CKeyID &address, CKey &keyOut) const\n+{\n+    std::map<CKeyID, CKeyMetadata>::const_iterator it=mapKeyMetadata.find(address);\n+    if (it != mapKeyMetadata.end())\n+    {\n+        CKeyMetadata meta = it->second;\n+        if (!meta.parentKeyID.IsNull())\n+        {\n+            //deterministic generation of privkey,\n+            return HDDeriveKeyFromKeyID(keyOut, address);\n+        }\n+    }\n+    return CCryptoKeyStore::GetKey(address, keyOut);\n+}\n+\n+/* END BIP32 Stack */\n+\n+\n CKeyPool::CKeyPool()\n {\n     nTime = GetTime();"
      },
      {
        "sha": "6faee6d6b11fc98eb60dc809b6c37a67b752872b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f814de07cfa9fac0c4016740386463c242d1459a",
        "patch": "@@ -783,6 +783,21 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetBroadcastTransactions() const { return fBroadcastTransactions; }\n     /** Set whether this wallet broadcasts transactions. */\n     void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }\n+\n+\n+    std::string HDchainPath;\n+    CExtPubKey HDexternalPubKey;\n+    CExtPubKey HDinternalPubKey;\n+    unsigned char HDmasterSeed[32];\n+    CKeyID HDmasterKeyID;\n+    CKeyingMaterial vMasterSeed;\n+\n+    bool HDSetChainPath(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, const CExtPubKey& pubMasterKey, bool overwrite = false);\n+    bool HDGetChildPubKeyAtIndex(CPubKey &pubKeyOut, unsigned int index, bool internal = false);\n+    bool HDGetNextChildPubKey(CPubKey &pubKeyOut, bool internal = false);\n+    bool HDDeriveKeyFromKeyID(CKey& keyOut, CKeyID keyId) const;\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const;\n+    std::string HDGetChainPath();\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "d6f851d8f3c06f208d48cee6d1587114c5924d4d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f814de07cfa9fac0c4016740386463c242d1459a",
        "patch": "@@ -129,13 +129,13 @@ bool CWalletDB::EraseWatchOnly(const CScript &dest)\n }\n \n /* BIP32 STACK */\n-bool CWalletDB::WriteHDMasterSeed(const std::string &masterSeedHex)\n+bool CWalletDB::WriteHDMasterSeed(const CKeyingMaterial& masterSeed)\n {\n     nWalletDBUpdated++;\n-    return Write(std::string(\"hdmasterseed\"), masterSeedHex);\n+    return Write(std::string(\"hdmasterseed\"), masterSeed);\n }\n \n-bool CWalletDB::EraseHDMasterSeed(const CScript &dest)\n+bool CWalletDB::EraseHDMasterSeed()\n {\n     nWalletDBUpdated++;\n     return Erase(std::string(\"hdmasterseed\"));\n@@ -542,6 +542,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n             if (!pwallet->LoadKey(CKey(), vchPubKey))\n             {\n                 strErr = \"Error reading wallet database: LoadKey failed\";\n@@ -663,6 +668,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             ssValue >> pwallet->HDchainPath;\n         }\n+        else if (strType == \"hdmasterseed\")\n+        {\n+            ssValue >> pwallet->vMasterSeed;\n+        }\n+\n     } catch (...)\n     {\n         return false;"
      },
      {
        "sha": "50ae21b47e0d133cd0854a78a749943c2988bff4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f814de07cfa9fac0c4016740386463c242d1459a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=f814de07cfa9fac0c4016740386463c242d1459a",
        "patch": "@@ -110,8 +110,8 @@ class CWalletDB : public CDB\n     bool WriteWatchOnly(const CScript &script);\n     bool EraseWatchOnly(const CScript &script);\n \n-    bool WriteHDMasterSeed(const std::string &masterSeedHex);\n-    bool EraseHDMasterSeed(const CScript &dest);\n+    bool WriteHDMasterSeed(const CKeyingMaterial& masterSeed);\n+    bool EraseHDMasterSeed();\n \n     bool WriteHDExternalPubKey(const CExtPubKey &externalPubKey);\n     bool WriteHDInternalPubKey(const CExtPubKey &internalPubKey);"
      }
    ]
  },
  {
    "sha": "856fc928a34c1745bd5c386fca54f4d8bab0de63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTZmYzkyOGEzNGMxNzQ1YmQ1YzM4NmZjYTU0ZjRkOGJhYjBkZTYz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-08T13:19:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:24Z"
      },
      "message": "add bip32/hd keystore with support for crypted masterseeds",
      "tree": {
        "sha": "25671c5c908ddef7cacc063fba96e9cac6d355c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25671c5c908ddef7cacc063fba96e9cac6d355c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/856fc928a34c1745bd5c386fca54f4d8bab0de63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemakAAoJECnUvLZBb1Ps8RMQAIph9m2Ek8quY+H50psu7r4n\nW4cyM5qCP/CEYn2JYTa/xkPx0VTJs3U1eOiv8Y16KXmu4ngCB/G02o6Z8ej8ltY4\nY9THHDJ/cOQsw8M531M83DsyjSk5PVKbyG51Wzv7Xhhg+KAiFZFWDp75iBRzIudg\nEgeJ+iralIbnvZsFDMGhS1mxyS8vLmd37WJCxf1RgIUfse3iGqUfFh8UMUYr9OMp\nlPS7Zy1+vqx6FMYwTUA1Oq2PV2fVZTTVrxIH5AUowFc1y+Y1sqPK6yhpUaONNNmM\nGKOFPZxux1Epk9rUOlOAqd3IR6eetnIsjd1Dcdh9AbaM8eX0br3qGkJ3SfcLNo9e\nLeJA6YgySYNI76d22EY/hTEZNtjKkT21JVmT+sCgHD8xyc40CQMFxy4tFhrLGUu8\nYG9nXq6dc0gmlcXP6soQCD21R2lTAKv+JU+2CEH2FFDieGTNLYg9/qFIX4lsSzmQ\nYz7C6AC+p1MdrAeKXjLtXIcx8JRLvlazLY7C5wxcoowR8Aj6z9vya0ZLckEqNhAG\n8i9KApKYC1auctxVD0S9oxtBa1B9KikU0MFolt68wmxPZO0DjI4rfzUEvi+AVdjE\n9wGePgav2n6eGIQ5CoPzi0xntuwAguHdBn7ByRf9vPmdAkPmVJopDfo/MwX7VrmO\nW9zaJaZKAEYu65KNausI\n=j4j8\n-----END PGP SIGNATURE-----",
        "payload": "tree 25671c5c908ddef7cacc063fba96e9cac6d355c4\nparent f814de07cfa9fac0c4016740386463c242d1459a\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433769572 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862244 +0100\n\nadd bip32/hd keystore with support for crypted masterseeds\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856fc928a34c1745bd5c386fca54f4d8bab0de63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/856fc928a34c1745bd5c386fca54f4d8bab0de63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856fc928a34c1745bd5c386fca54f4d8bab0de63/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f814de07cfa9fac0c4016740386463c242d1459a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f814de07cfa9fac0c4016740386463c242d1459a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f814de07cfa9fac0c4016740386463c242d1459a"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 144,
      "deletions": 0
    },
    "files": [
      {
        "sha": "08f0ba76e7efb4b37fea80b759f58deab3f14e05",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=856fc928a34c1745bd5c386fca54f4d8bab0de63",
        "patch": "@@ -164,6 +164,7 @@ BITCOIN_CORE_H = \\\n   version.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+\twallet/hdkeystore.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n   wallet/walletdb.h \\\n@@ -234,6 +235,7 @@ libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+\twallet/hdkeystore.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "ee754e389642f37eaeb9b30c53177904ab95fa70",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=856fc928a34c1745bd5c386fca54f4d8bab0de63",
        "patch": "@@ -292,3 +292,23 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     }\n     return true;\n }\n+\n+bool CCryptoKeyStore::EncryptSeed(const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (!EncryptSecret(vMasterKey, seedIn, seedPubHash, vchCiphertext))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::DecryptSeed(const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if(!DecryptSecret(vMasterKey, vchCiphertextIn, seedPubHash, seedOut))\n+        return false;\n+\n+    return true;\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "187935c622dfafc6284f2df0b4c910f603fd7354",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=856fc928a34c1745bd5c386fca54f4d8bab0de63",
        "patch": "@@ -191,6 +191,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n      * Note: Called without locks held.\n      */\n     boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n+\n+    bool EncryptSeed(const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const;\n+    bool DecryptSeed(const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const;\n };\n \n #endif // BITCOIN_WALLET_CRYPTER_H"
      },
      {
        "sha": "df0ace6914885fe1a05844453c15da7ba8aee9a8",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=856fc928a34c1745bd5c386fca54f4d8bab0de63",
        "patch": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/hdkeystore.h\"\n+\n+bool CHDKeyStore::AddMasterSeed(const HDChainID& hash, const CKeyingMaterial& masterSeed)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSeed(masterSeed, hash, vchCryptedSecret))\n+            return false;\n+\n+        mapHDCryptedMasterSeeds[hash] = vchCryptedSecret;\n+        return true;\n+    }\n+    mapHDMasterSeeds[hash] = masterSeed;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetMasterSeed(const HDChainID& hash, CKeyingMaterial& seedOut) const\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!IsCrypted())\n+        {\n+            std::map<HDChainID, CKeyingMaterial >::const_iterator it=mapHDMasterSeeds.find(hash);\n+            if (it == mapHDMasterSeeds.end())\n+                return false;\n+\n+            seedOut = it->second;\n+            return true;\n+        }\n+        else\n+        {\n+            std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(hash);\n+            if (it == mapHDCryptedMasterSeeds.end())\n+                return false;\n+\n+            std::vector<unsigned char> vchCryptedSecret = it->second;\n+            if (!DecryptSeed(vchCryptedSecret, hash, seedOut))\n+                return false;\n+\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "509dea58116de2cf987c01443684e1ba580e5c8c",
        "filename": "src/wallet/hdkeystore.h",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/hdkeystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/856fc928a34c1745bd5c386fca54f4d8bab0de63/src/wallet/hdkeystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.h?ref=856fc928a34c1745bd5c386fca54f4d8bab0de63",
        "patch": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+class CHDChain\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+\n+    HDChainID chainHash; //hash() of the masterpubkey\n+    std::string chainPath; //something like \"m'/44'/0'/0'/c\"\n+    CExtPubKey externalPubKey;\n+    CExtPubKey internalPubKey;\n+\n+    CHDChain()\n+    {\n+        SetNull();\n+    }\n+    CHDChain(int64_t nCreateTime_)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(nCreateTime);\n+        READWRITE(chainHash);\n+        READWRITE(chainPath);\n+        READWRITE(externalPubKey);\n+        READWRITE(internalPubKey);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDChain::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        chainHash.SetNull();\n+    }\n+};\n+\n+class CHDKeyStore : public CCryptoKeyStore\n+{\n+protected:\n+    std::map<HDChainID, std::vector<unsigned char> > mapHDCryptedMasterSeeds;\n+    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds;\n+\n+public:\n+    virtual bool AddMasterSeed(const HDChainID& pubkeyhash, const CKeyingMaterial& masterSeed);\n+    virtual bool GetMasterSeed(const HDChainID& hash, CKeyingMaterial& seedOut) const;\n+};\n+#endif // BITCOIN_WALLET_HDKEYSTORE_H\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "6aeda34e359561949d9ca979ae677ce02d6d805c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWVkYTM0ZTM1OTU2MTk0OWQ5Y2E5NzlhZTY3N2NlMDJkNmQ4MDVj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-08T14:43:08Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:24Z"
      },
      "message": "allow multiple hd chains (keyrotation basics)",
      "tree": {
        "sha": "df1b7ad09fc7587462c785ffb79651d81007dce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df1b7ad09fc7587462c785ffb79651d81007dce1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6aeda34e359561949d9ca979ae677ce02d6d805c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemakAAoJECnUvLZBb1PsfHsQAJOAeLxFF7CCxBbWyBW1SQoP\noljIjv91Frks1WxzF0455NJKJzkN7eaSz1YjtvdsutAb/t0HlY3YvFegTefer7nb\nnnNQZzwJbDAD82vE3lVpG1skEuzYggBeJucMga7zIpL6BvWGu6AbDyjgQFJnn4x7\nLdP+2yuPQUcJhzsTp0cSE3wVp/nfHGsS+a+evgD2kCy3xadtm3v8ewN0Lld1nNYy\ny8ZSBXMKAGFnhNFDgViNXtiXeDg2WTBR2L9G5k86bZkGHG0bMIXUzxSUupN9k4zR\nYwPvSx6klO/qMUUM9np3dhrOTRdgdZlj6wJZnvAZFBvSPoJ1w7E9/cAF9RlSETky\nFmYU/VlIj2Xump09VAaBs675dG1bNffZ0sLjGp+NKaEKBZ0zg7OECo8Crk/7SInT\n9kg+4BcwtgkX/Ve/TPmXLClOjxKY1VVRRQ7SZrcKlWlSLY6WRBUc80rj9p6HlcLY\nBWpYziu4hrMxWt/bRsm92c5lXZ+kB7RNgnNRfq39/qYsAmxxHqaatnnMFGX+CgZ2\ntSDDtJ+oDMZbM73dAJJfdGHF1xusgqiXnsINFFYfJ2dVLYvHlSHSR4DHEbnkx6uO\nC77sNOkomOVRiKf+P6xjaJPmVWoJblFTPazR/wDOwhjuo0VeUCNtG3XwkVyjNi8+\nT0AzPv92Fyb1wd7CrHXz\n=csUE\n-----END PGP SIGNATURE-----",
        "payload": "tree df1b7ad09fc7587462c785ffb79651d81007dce1\nparent 856fc928a34c1745bd5c386fca54f4d8bab0de63\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433774588 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862244 +0100\n\nallow multiple hd chains (keyrotation basics)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aeda34e359561949d9ca979ae677ce02d6d805c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6aeda34e359561949d9ca979ae677ce02d6d805c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aeda34e359561949d9ca979ae677ce02d6d805c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "856fc928a34c1745bd5c386fca54f4d8bab0de63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/856fc928a34c1745bd5c386fca54f4d8bab0de63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/856fc928a34c1745bd5c386fca54f4d8bab0de63"
      }
    ],
    "stats": {
      "total": 363,
      "additions": 244,
      "deletions": 119
    },
    "files": [
      {
        "sha": "67c4bc99c5635dfcfc209543294d00dd49fcd9e1",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -372,7 +372,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"walletlock\",             &walletlock,             true  },\n     { \"wallet\",             \"walletpassphrasechange\", &walletpassphrasechange, true  },\n     { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true  },\n-    { \"wallet\",             \"hdchainpath\",            &hdchainpath,            true  },\n+    { \"wallet\",             \"hdaddchain\",             &hdaddchain,             true  },\n     { \"wallet\",             \"hdgetaddress\",           &hdgetaddress,           true  },\n #endif // ENABLE_WALLET\n };"
      },
      {
        "sha": "65390a7e188d4e086c872bd413d4a5737b25a1a2",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -234,7 +234,7 @@ extern UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n extern UniValue getnetworkinfo(const UniValue& params, bool fHelp);\n extern UniValue setmocktime(const UniValue& params, bool fHelp);\n extern UniValue resendwallettransactions(const UniValue& params, bool fHelp);\n-extern UniValue hdchainpath(const UniValue& params, bool fHelp);\n+extern UniValue hdaddchain(const UniValue& params, bool fHelp);\n extern UniValue hdgetaddress(const UniValue& params, bool fHelp);\n \n extern UniValue getrawtransaction(const UniValue& params, bool fHelp); // in rcprawtransaction.cpp"
      },
      {
        "sha": "77fd2139ad68c8b84c37b548558431788cdaa925",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -7,7 +7,7 @@\n bool CHDKeyStore::AddMasterSeed(const HDChainID& hash, const CKeyingMaterial& masterSeed)\n {\n     LOCK(cs_KeyStore);\n-    if (!IsCrypted())\n+    if (IsCrypted())\n     {\n         std::vector<unsigned char> vchCryptedSecret;\n         if (!EncryptSeed(masterSeed, hash, vchCryptedSecret))"
      },
      {
        "sha": "8c9bc0900bcaa73365602e992c01da2a1d86373f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 39,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -2444,18 +2444,34 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-/* BIP32 stack */\n-const std::string hd_default_chainpath = \"m/44'/0'/0'/c/k\";\n-\n-UniValue hdchainpath(const UniValue& params, bool fHelp)\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n     if (fHelp)\n         throw runtime_error(\n-                            \"hdchainpath set|get (<chainpath>|default) (<masterseed_hex>)\\n\"\n-                            \"\\nEnables/sets HD option for this wallet\\n\"\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n                             \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n@@ -2466,46 +2482,40 @@ UniValue hdchainpath(const UniValue& params, bool fHelp)\n                             \"}\\n\"\n \n                             \"\\nExamples\\n\"\n-                            + HelpExampleCli(\"hdchainpath\", \"get\")\n-                            + HelpExampleCli(\"hdchainpath\", \"set m/44'/0'/0'/c/k\")\n-                            + HelpExampleRpc(\"hdchainpath\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n                             );\n \n     UniValue result(UniValue::VOBJ);\n \n-    if(params[0].get_str() == \"set\")\n-    {\n-        assert(pwalletMain != NULL);\n-        const unsigned int bip32MasterSeedLength = 32;\n-\n-        CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n-        bool fGenerateMasterSeed = true;\n-        CExtPubKey masterPubKey;\n-        std::string chainPath = hd_default_chainpath;\n-        if (params.size() > 1 && params[1].isStr() && params[1].get_str() != \"default\")\n-            chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n+    assert(pwalletMain != NULL);\n+    const unsigned int bip32MasterSeedLength = 32;\n \n-        if (params.size() > 2 && params[2].isStr())\n-        {\n-            if (!IsHex(params[2].get_str()))\n-                throw runtime_error(\"HD master seed must encoded in hex\");\n+    CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n+    bool fGenerateMasterSeed = true;\n+    CExtPubKey masterPubKey;\n+    std::string chainPath = hd_default_chainpath;\n+    if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n+        chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n \n-            std::vector<unsigned char> seed = ParseHex(params[2].get_str());\n-            if (seed.size() != bip32MasterSeedLength)\n-                throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n+    if (params.size() > 1 && params[1].isStr())\n+    {\n+        if (!IsHex(params[1].get_str()))\n+            throw runtime_error(\"HD master seed must encoded in hex\");\n \n-            memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n-            memory_cleanse(&seed[0], bip32MasterSeedLength);\n-            fGenerateMasterSeed = false;\n-        }\n+        std::vector<unsigned char> seed = ParseHex(params[1].get_str());\n+        if (seed.size() != bip32MasterSeedLength)\n+            throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n \n-        pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, masterPubKey);\n-        if (fGenerateMasterSeed)\n-            result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+        memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n+        memory_cleanse(&seed[0], bip32MasterSeedLength);\n+        fGenerateMasterSeed = false;\n     }\n \n-\n-\n+    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, masterPubKey);\n+    if (fGenerateMasterSeed)\n+        result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n     return result;\n }\n \n@@ -2515,7 +2525,7 @@ UniValue hdgetaddress(const UniValue& params, bool fHelp)\n         throw runtime_error(\n                             \"hdgetaddress (<childindex>)\\n\"\n                             \"\\nReturns a Bitcoin address for receiving payments.\\n\"\n-                            \"\\nautomatically uses the next available childindex if no index is given\"\n+                            \"\\nAutomatically uses the next available childindex if no index is given\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"childindex\\\"        (numeric, optional) child key index. ATTENTION: automatic index counting will start at the highes available child key index\\n\"\n                             \"{\\n\"\n@@ -2533,12 +2543,14 @@ UniValue hdgetaddress(const UniValue& params, bool fHelp)\n     CPubKey newKey;\n     if (params.size() == 1 && params[0].isNum())\n     {\n-        if (!pwalletMain->HDGetChildPubKeyAtIndex(newKey, params[0].get_int()))\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetChildPubKeyAtIndex(emptyId, newKey, params[0].get_int()))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n     }\n     else\n     {\n-        if (!pwalletMain->HDGetNextChildPubKey(newKey))\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetNextChildPubKey(emptyId, newKey))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n     }\n     CKeyID keyID = newKey.GetID();"
      },
      {
        "sha": "7adbd69a769c59be743bb7a4577d3c8509722f62",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 126,
        "deletions": 47,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -25,6 +25,7 @@\n #include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n \n #include <assert.h>\n \n@@ -2873,30 +2874,53 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n }\n \n /* BIP32 stack */\n+\n+const unsigned int HD_MAX_DEPTH = 20;\n+\n bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, const CExtPubKey& pubMasterKey, bool overwrite)\n {\n+    LOCK(cs_wallet);\n+\n+    if (IsLocked())\n+        return false;\n+\n     //only allow setting a new chainpath (and generat int/ext keys) if no chain has set (or has been deleted)\n-    if (!overwrite && !HDchainPath.empty())\n-        throw std::runtime_error(\"CWallet::SetHDChainPath(): chainpath already set!\");\n+    if (!overwrite && (!HDactiveChain.IsNull() && !hdChains[HDactiveChain].chainPath.empty()))\n+        throw std::runtime_error(\"CWallet::SetHDChainPath(): Chainpath already set.\");\n+\n+    if (chainPathIn[0] != 'm')\n+        throw std::runtime_error(\"CWallet::SetHDChainPath(): Non masterkey chainpaths are not allowed.\");\n \n-    HDchainPath = chainPathIn;\n-    boost::to_lower(HDchainPath);\n-    boost::erase_all(HDchainPath, \" \");\n-    if (HDchainPath.size() > 0 && HDchainPath.back() == '/')\n-        HDchainPath.resize(HDchainPath.size() - 1);\n+    if (chainPathIn.find_first_of(\"c\", 1) == std::string::npos)\n+        throw std::runtime_error(\"CWallet::SetHDChainPath(): 'c' (internal/external chain selection) is requires in the given chainpath.\");\n \n-    if (!CWalletDB(strWalletFile).WriteHDChainPath(HDchainPath))\n-        throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing chainpath failed!\");\n+    if (chainPathIn.find_first_not_of(\"0123456789'/mch\", 0) != std::string::npos)\n+        throw std::runtime_error(\"CWallet::SetHDChainPath(): Invalid chainpath.\");\n+\n+    std::string newChainPath = chainPathIn;\n+    boost::to_lower(newChainPath);\n+    boost::erase_all(newChainPath, \" \");\n+    boost::replace_all(newChainPath, \"h\", \"'\"); //support h insted of ' to allow easy JSON input over cmd line\n+    if (newChainPath.size() > 0 && newChainPath.back() == '/')\n+        newChainPath.resize(newChainPath.size() - 1);\n \n     std::vector<std::string> pathFragments;\n-    boost::split(pathFragments, HDchainPath, boost::is_any_of(\"/\"));\n+    boost::split(pathFragments, newChainPath, boost::is_any_of(\"/\"));\n+\n+    if (pathFragments.size() > HD_MAX_DEPTH)\n+        throw std::runtime_error(\"CWallet::SetHDChainPath(): Max chain depth (\"+itostr(HD_MAX_DEPTH)+\") exceeded!\");\n \n+    int64_t nCreationTime = GetTime();\n+    CHDChain newChain(nCreationTime);\n     CExtKey parentKey;\n     BOOST_FOREACH(std::string fragment, pathFragments)\n     {\n         bool harden = false;\n         if (fragment.back() == '\\'')\n+        {\n             harden = true;\n+            fragment = fragment.substr(0,fragment.size()-1);\n+        }\n \n         if (fragment == \"m\")\n         {\n@@ -2917,53 +2941,79 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n             CBitcoinExtKey b58key;\n             b58key.SetKey(bip32MasterKey);\n             LogPrintf(\"key: %s\", b58key.ToString());\n+            uint256 masterPubkKeyHash = bip32MasterKey.key.GetPubKey().GetHash();\n+            AddMasterSeed(masterPubkKeyHash, vSeed);\n+\n+            newChain.chainPath = newChainPath;\n+            newChain.chainHash = masterPubkKeyHash;\n+            hdChains[newChain.chainHash] = newChain;\n \n-            vMasterSeed = vSeed;\n-            uint32_t seedNum = 0;\n-            if (!CWalletDB(strWalletFile).WriteHDMasterSeed(vSeed)) //for easy serialization store the unsigned char[32] as hex string. //TODO: use 32byte binary ser.\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing hdmasterseed failed!\");\n+            if (!CWalletDB(strWalletFile).WriteHDChainPath(masterPubkKeyHash, newChainPath))\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing chainpath failed.\");\n+\n+            if (IsCrypted())\n+            {\n+                if (!CWalletDB(strWalletFile).WriteHDMasterSeed(masterPubkKeyHash, vSeed))\n+                    throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing hdmasterseed failed!\");\n+            }\n+            else\n+            {\n+                if (!CWalletDB(strWalletFile).WriteHDMasterSeed(masterPubkKeyHash, vSeed))\n+                    throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing cryted hdmasterseed failed!\");\n+            }\n+\n+            //set active hd chain\n+            HDactiveChain = masterPubkKeyHash;\n+            if (!CWalletDB(strWalletFile).WriteHDAchiveChain(masterPubkKeyHash))\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing active hd chain failed!\");\n \n             parentKey = bip32MasterKey;\n         }\n-        else if (fragment == \"k\")\n-        {\n-            harden = false;\n-        }\n         else if (fragment == \"c\")\n         {\n             harden = false;\n             CExtPubKey parentExtPubKey = parentKey.Neuter();\n-            parentExtPubKey.Derive(HDexternalPubKey, 0);\n-            parentExtPubKey.Derive(HDinternalPubKey, 1);\n+            parentExtPubKey.Derive(newChain.externalPubKey, 0);\n+            parentExtPubKey.Derive(newChain.internalPubKey, 1);\n+\n+            hdChains[newChain.chainHash] = newChain;\n \n-            uint32_t keyRingNum = 0;\n-            if (!CWalletDB(strWalletFile).WriteHDExternalPubKey(HDexternalPubKey))\n+            if (!CWalletDB(strWalletFile).WriteHDExternalPubKey(newChain.chainHash, newChain.externalPubKey))\n                 throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing external pubkey failed!\");\n \n-            if (!CWalletDB(strWalletFile).WriteHDInternalPubKey(HDinternalPubKey))\n+            if (!CWalletDB(strWalletFile).WriteHDInternalPubKey(newChain.chainHash, newChain.internalPubKey))\n                 throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing internal pubkey failed!\");\n         }\n         else\n         {\n             CExtKey childKey;\n-            int nIndex = atoi(fragment.c_str());\n+            int32_t nIndex;\n+            if (!ParseInt32(fragment,&nIndex))\n+                return false;\n             parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n             parentKey = childKey;\n         }\n     }\n+\n+    return true;\n }\n \n-bool CWallet::HDGetChildPubKeyAtIndex(CPubKey &pubKeyOut, unsigned int nIndex, bool internal)\n+bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal)\n {\n-    if ( (internal && !HDinternalPubKey.pubkey.IsValid()) || !HDexternalPubKey.pubkey.IsValid())\n+    AssertLockHeld(cs_wallet);\n+\n+    CHDChain hdChain = hdChains[chainID];\n+    if ( (internal && !hdChain.internalPubKey.pubkey.IsValid()) || !hdChain.externalPubKey.pubkey.IsValid())\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Missing HD extended pubkey!\");\n \n     if (nIndex >= 0x80000000)\n-        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): no more available keys!\");\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): No more available keys!\");\n+\n \n-    CExtPubKey useExtKey = internal ? HDinternalPubKey : HDexternalPubKey;\n+    CExtPubKey useExtKey = internal ? hdChain.internalPubKey : hdChain.externalPubKey;\n     CExtPubKey childKey;\n-    useExtKey.Derive(childKey, nIndex);\n+    if (!useExtKey.Derive(childKey, nIndex))\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Key deriving failed!\");\n \n     // Create new metadata\n     int64_t nCreationTime = GetTime();\n@@ -2973,9 +3023,11 @@ bool CWallet::HDGetChildPubKeyAtIndex(CPubKey &pubKeyOut, unsigned int nIndex, b\n \n     mapKeyMetadata[childKey.pubkey.GetID()].parentKeyID = useExtKey.pubkey.GetID();\n     mapKeyMetadata[childKey.pubkey.GetID()].nChild = nIndex;\n+    mapKeyMetadata[childKey.pubkey.GetID()].chainHash = chainID;\n+\n \n     if (!CCryptoKeyStore::AddKeyPubKey(CKey(), childKey.pubkey))\n-        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): add key to keystore failed!\");\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Add key to keystore failed!\");\n \n     if (!CWalletDB(strWalletFile).WriteHDPubKey(childKey.pubkey, mapKeyMetadata[childKey.pubkey.GetID()]))\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Writing pubkey failed!\");\n@@ -2984,62 +3036,87 @@ bool CWallet::HDGetChildPubKeyAtIndex(CPubKey &pubKeyOut, unsigned int nIndex, b\n     return true;\n }\n \n-bool CWallet::HDGetNextChildPubKey(CPubKey &pubKeyOut, bool internal)\n+bool CWallet::HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOut, bool internal)\n {\n-    if (!HDchainPath.empty())\n+    LOCK(cs_wallet);\n+\n+    HDChainID chainHash = chainIDIn;\n+\n+    if (chainHash.IsNull())\n+        chainHash = HDactiveChain;\n+\n+    std::string chainPath = hdChains[HDactiveChain].chainPath;\n+    if (!chainPath.empty())\n     {\n         //try to get a HD key\n         unsigned int nNextChildIndex = 0;\n         for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n             if (!it->second.parentKeyID.IsNull() && it->second.nChild >= nNextChildIndex)\n                 nNextChildIndex = it->second.nChild+1;\n \n-        return HDGetChildPubKeyAtIndex(pubKeyOut, nNextChildIndex, internal);\n+        return HDGetChildPubKeyAtIndex(chainHash, pubKeyOut, nNextChildIndex, internal);\n     }\n     return false;\n }\n \n bool CWallet::HDDeriveKeyFromKeyID(CKey& keyOut, CKeyID keyId) const\n {\n-    std::map<CKeyID, CKeyMetadata>::const_iterator it=mapKeyMetadata.find(keyId);\n-    if (it == mapKeyMetadata.end())\n+    AssertLockHeld(cs_wallet);\n+    //get key metadata, use iterator because we are in a const function\n+    std::map<CKeyID, CKeyMetadata>::const_iterator itMetadata=mapKeyMetadata.find(keyId);\n+    if (itMetadata == mapKeyMetadata.end())\n+        return false;\n+    CKeyMetadata meta = itMetadata->second;\n+\n+    //get current chainpath, use iterator because we are in a const function\n+    std::map<uint256, CHDChain>::const_iterator itChainPath=hdChains.find(meta.chainHash);\n+    if (itChainPath == hdChains.end())\n         return false;\n+    CHDChain hdChain = itChainPath->second;\n+    std::string chainPath = hdChain.chainPath;\n \n-    CKeyMetadata meta = it->second;\n-    if(meta.parentKeyID == HDexternalPubKey.pubkey.GetID() || meta.parentKeyID == HDinternalPubKey.pubkey.GetID())\n+    if(meta.parentKeyID == hdChain.externalPubKey.pubkey.GetID() || meta.parentKeyID == hdChain.internalPubKey.pubkey.GetID())\n     {\n         std::vector<std::string> pathFragments;\n-        boost::split(pathFragments, HDchainPath, boost::is_any_of(\"/\"));\n+        boost::split(pathFragments, chainPath, boost::is_any_of(\"/\"));\n \n         CExtKey extKey;\n         CExtKey parentKey;\n         BOOST_FOREACH(std::string fragment, pathFragments)\n         {\n             bool harden = false;\n             if (fragment.back() == '\\'')\n+            {\n                 harden = true;\n+                fragment = fragment.substr(0,fragment.size()-1);\n+            }\n \n             if (fragment == \"m\")\n             {\n                 CExtKey bip32MasterKey;\n-                bip32MasterKey.SetMaster(&vMasterSeed[0], vMasterSeed.size());\n+                CKeyingMaterial masterSeed;\n+\n+                // get master seed\n+                if (!GetMasterSeed(HDactiveChain, masterSeed))\n+                    return false;\n+\n+                bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n                 parentKey = bip32MasterKey;\n             }\n-            else if (fragment == \"k\")\n-            {\n-                harden = false;\n-            }\n             else if (fragment == \"c\")\n             {\n                 harden = false;\n-                parentKey.Derive(extKey, (meta.parentKeyID == HDexternalPubKey.pubkey.GetID()) ? 0 : 1);\n+                //TODO add caching of extended chain private key to allow faster signing\n+                parentKey.Derive(extKey, (meta.parentKeyID == hdChain.externalPubKey.pubkey.GetID()) ? 0 : 1);\n                 CExtPubKey extPubKey = extKey.Neuter();\n-                assert(extPubKey.pubkey.GetID() == ( (meta.parentKeyID == HDexternalPubKey.pubkey.GetID()) ? HDexternalPubKey.pubkey.GetID() : HDinternalPubKey.pubkey.GetID()) );\n+                assert(extPubKey.pubkey.GetID() == ( (meta.parentKeyID == hdChain.externalPubKey.pubkey.GetID()) ? hdChain.externalPubKey.pubkey.GetID() : hdChain.internalPubKey.pubkey.GetID()) );\n             }\n             else\n             {\n                 CExtKey childKey;\n-                int nIndex = atoi(fragment.c_str());\n+                int32_t nIndex;\n+                if (!ParseInt32(fragment,&nIndex))\n+                    return false;\n                 parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n                 parentKey = childKey;\n             }\n@@ -3050,11 +3127,13 @@ bool CWallet::HDDeriveKeyFromKeyID(CKey& keyOut, CKeyID keyId) const\n         keyOut = newKey.key;\n         return true;\n     }\n+    return false;\n }\n \n std::string CWallet::HDGetChainPath()\n {\n-    return HDchainPath;\n+    AssertLockHeld(cs_wallet);\n+    return hdChains[HDactiveChain].chainPath;\n }\n \n bool CWallet::GetKey(const CKeyID &address, CKey &keyOut) const"
      },
      {
        "sha": "aac3894fd786aa2e2519c9cefc494a635f485b44",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -13,6 +13,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"wallet/crypter.h\"\n+#include \"wallet/hdkeystore.h\"\n #include \"wallet/wallet_ismine.h\"\n #include \"wallet/walletdb.h\"\n \n@@ -451,7 +452,7 @@ class CWalletKey\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet : public CCryptoKeyStore, public CValidationInterface\n+class CWallet : public CHDKeyStore, public CValidationInterface\n {\n private:\n     /**\n@@ -784,17 +785,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /** Set whether this wallet broadcasts transactions. */\n     void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }\n \n-\n-    std::string HDchainPath;\n-    CExtPubKey HDexternalPubKey;\n-    CExtPubKey HDinternalPubKey;\n-    unsigned char HDmasterSeed[32];\n-    CKeyID HDmasterKeyID;\n-    CKeyingMaterial vMasterSeed;\n+    std::map<uint256, CHDChain> hdChains;\n+    uint256 HDactiveChain;\n \n     bool HDSetChainPath(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, const CExtPubKey& pubMasterKey, bool overwrite = false);\n-    bool HDGetChildPubKeyAtIndex(CPubKey &pubKeyOut, unsigned int index, bool internal = false);\n-    bool HDGetNextChildPubKey(CPubKey &pubKeyOut, bool internal = false);\n+    bool HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal = false);\n+    bool HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOut, bool internal = false);\n     bool HDDeriveKeyFromKeyID(CKey& keyOut, CKeyID keyId) const;\n     bool GetKey(const CKeyID &address, CKey &keyOut) const;\n     std::string HDGetChainPath();"
      },
      {
        "sha": "4d5ab3f37e1029a5c3865978218f288f86752041",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 15,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -129,34 +129,40 @@ bool CWalletDB::EraseWatchOnly(const CScript &dest)\n }\n \n /* BIP32 STACK */\n-bool CWalletDB::WriteHDMasterSeed(const CKeyingMaterial& masterSeed)\n+bool CWalletDB::WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed)\n {\n     nWalletDBUpdated++;\n-    return Write(std::string(\"hdmasterseed\"), masterSeed);\n+    return Write(std::make_pair(std::string(\"hdmasterseed\"), hash), masterSeed);\n }\n \n-bool CWalletDB::EraseHDMasterSeed()\n+bool CWalletDB::WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret)\n {\n     nWalletDBUpdated++;\n-    return Erase(std::string(\"hdmasterseed\"));\n+    return Write(std::make_pair(std::string(\"hdcryptedmasterseed\"), hash), vchCryptedSecret);\n }\n \n-bool CWalletDB::WriteHDExternalPubKey(const CExtPubKey &externalPubKey)\n+bool CWalletDB::EraseHDMasterSeed(const uint256& hash)\n {\n     nWalletDBUpdated++;\n-    return Write(std::string(\"hdexternalpubkey\"), externalPubKey);\n+    return Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n }\n \n-bool CWalletDB::WriteHDInternalPubKey(const CExtPubKey &internalPubKey)\n+bool CWalletDB::WriteHDExternalPubKey(const uint256& hash, const CExtPubKey &externalPubKey)\n {\n     nWalletDBUpdated++;\n-    return Write(std::string(\"hdinternalpubkey\"), internalPubKey);\n+    return Write(std::make_pair(std::string(\"hdexternalpubkey\"), hash), externalPubKey);\n }\n \n-bool CWalletDB::WriteHDChainPath(const std::string &chainPath)\n+bool CWalletDB::WriteHDInternalPubKey(const uint256& hash, const CExtPubKey &internalPubKey)\n {\n     nWalletDBUpdated++;\n-    return Write(std::string(\"hdchainpath\"), chainPath);\n+    return Write(std::make_pair(std::string(\"hdinternalpubkey\"), hash), internalPubKey);\n+}\n+\n+bool CWalletDB::WriteHDChainPath(const uint256& hash, const std::string &chainPath)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"hdchainpath\"), hash), chainPath);\n }\n \n bool CWalletDB::WriteHDPubKey(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta)\n@@ -169,6 +175,12 @@ bool CWalletDB::WriteHDPubKey(const CPubKey& vchPubKey, const CKeyMetadata& keyM\n \n     return Write(std::make_pair(std::string(\"hdpubkey\"), vchPubKey), '1');\n }\n+\n+bool CWalletDB::WriteHDAchiveChain(const uint256& hash)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"hdactivechain\"), hash);\n+}\n /* END: BIP32 STACK */\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n@@ -658,21 +670,42 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"hdexternalpubkey\")\n         {\n-            ssValue >> pwallet->HDexternalPubKey;\n+            uint256 chainHash;\n+            CExtPubKey extPubKey;\n+            ssKey >> chainHash;\n+            ssValue >> extPubKey;\n+\n+            pwallet->hdChains[chainHash].externalPubKey = extPubKey;\n         }\n         else if (strType == \"hdinternalpubkey\")\n         {\n-            ssValue >> pwallet->HDinternalPubKey;\n+            uint256 chainHash;\n+            CExtPubKey extPubKey;\n+            ssKey >> chainHash;\n+            ssValue >> extPubKey;\n+\n+            pwallet->hdChains[chainHash].internalPubKey = extPubKey;\n         }\n         else if (strType == \"hdchainpath\")\n         {\n-            ssValue >> pwallet->HDchainPath;\n+            uint256 chainHash;\n+            std::string chainPath;\n+            ssKey >> chainHash;\n+            ssValue >> chainPath;\n+            pwallet->hdChains[chainHash].chainPath = chainPath;\n         }\n         else if (strType == \"hdmasterseed\")\n         {\n-            ssValue >> pwallet->vMasterSeed;\n+            uint256 masterPubKeyHash;\n+            CKeyingMaterial masterSeed;\n+            ssKey >> masterPubKeyHash;\n+            ssValue >> masterSeed;\n+            pwallet->AddMasterSeed(masterPubKeyHash, masterSeed);\n+        }\n+        else if (strType == \"hdactivechain\")\n+        {\n+            ssValue >> pwallet->HDactiveChain;\n         }\n-\n     } catch (...)\n     {\n         return false;"
      },
      {
        "sha": "93e90166c6d0a56de892c861750386280c664b39",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aeda34e359561949d9ca979ae677ce02d6d805c/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=6aeda34e359561949d9ca979ae677ce02d6d805c",
        "patch": "@@ -49,6 +49,7 @@ class CKeyMetadata\n \n     unsigned int nChild;\n     CKeyID parentKeyID;\n+    uint256 chainHash;\n \n     CKeyMetadata()\n     {\n@@ -71,6 +72,7 @@ class CKeyMetadata\n         {\n             READWRITE(nChild);\n             READWRITE(parentKeyID);\n+            READWRITE(chainHash);\n         }\n \n     }\n@@ -110,15 +112,18 @@ class CWalletDB : public CDB\n     bool WriteWatchOnly(const CScript &script);\n     bool EraseWatchOnly(const CScript &script);\n \n-    bool WriteHDMasterSeed(const CKeyingMaterial& masterSeed);\n-    bool EraseHDMasterSeed();\n+    bool WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed);\n+    bool WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret);\n+    bool EraseHDMasterSeed(const uint256& hash);\n \n-    bool WriteHDExternalPubKey(const CExtPubKey &externalPubKey);\n-    bool WriteHDInternalPubKey(const CExtPubKey &internalPubKey);\n+    bool WriteHDExternalPubKey(const uint256& hash, const CExtPubKey &externalPubKey);\n+    bool WriteHDInternalPubKey(const uint256& hash, const CExtPubKey &internalPubKey);\n \n-    bool WriteHDChainPath(const std::string &chainPath);\n+    bool WriteHDChainPath(const uint256& hash, const std::string &chainPath);\n     bool WriteHDPubKey(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta);\n \n+    bool WriteHDAchiveChain(const uint256& hash);\n+\n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);\n "
      }
    ]
  },
  {
    "sha": "5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDBmMDgxNGEyYzY4ZDA3MzkzNDJmNTg4NWUxN2NkODZjMmNiYTNi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-09T15:37:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:25Z"
      },
      "message": "hdwallet: refactor hdkeystore.cpp, support encryption\n\n- master seed can now be stored encrypted\n- refactor hdkeystore.cpp/wallet.cpp\n- add CHDPubKey which represents a deriven child key with some metdata for adding to a persistant store",
      "tree": {
        "sha": "ab4c3193375ec33d2c8d346d9d7d11be94397424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab4c3193375ec33d2c8d346d9d7d11be94397424"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemalAAoJECnUvLZBb1PsGbAP+QHJaTWTr/TZpq2npzT2IDsS\nQBgcIz2z+R6vFOa1J2aL2Y3keT2c5NiYt3tTpIXplGfpLkpgqXs+ZlVqHKLS19pJ\nDxd9kIV7uYirwnvgkMD4y/HPXd5EWq0lBbqORBJ2EZkDw9T5s0QMof+Hbm907TSh\nu18c94wChFL3X3Rtr/Q5hxSu1noIPalB2NzGx+Vb4VjFw55PH40J0UhRxXEclymL\n7j/xHcvbNw41HNDhYNao2OgguiY5DAKD7vAp5MhnXKghVtnGfOZJKUFo0Vpx8dYI\nJIdkNUUBUQ1lwG614HLNSwlkz+jY30osIGdX82mpC6wgDkyx+gyfrh0yIKJd45C/\nxoTRrd9SSjjSF43fj5xy/mkCFiIISrZO/d50rh2cynBSgylfBZjgiy0RW6KglcEd\nibLsktp/GtCevWFHewRifdp0p3Kmon85Uhc272vDHZlsDN0WHxOIX/17uqN4qzdY\nfo2E0gtrCZvV6ccZoiAufKcYInkyODQh5fz0agSnFKJQ/SN8bbKUX9UystLWZZKX\nZRmMm5lURSTmt1nE7plOUC/Eu460YarUduuPURW/59Vlhmle5LSjDkpv26SAgxni\nHrs2jbnaQgnmJLbWgr8aVY26iVXmvcvjnPBYJYlhQNXrqoQMJvXPMcjedJw5oZoJ\nnyBsjmXI3XGPHO6F0lcL\n=9kTb\n-----END PGP SIGNATURE-----",
        "payload": "tree ab4c3193375ec33d2c8d346d9d7d11be94397424\nparent 6aeda34e359561949d9ca979ae677ce02d6d805c\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433864225 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862245 +0100\n\nhdwallet: refactor hdkeystore.cpp, support encryption\n\n- master seed can now be stored encrypted\n- refactor hdkeystore.cpp/wallet.cpp\n- add CHDPubKey which represents a deriven child key with some metdata for adding to a persistant store\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6aeda34e359561949d9ca979ae677ce02d6d805c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aeda34e359561949d9ca979ae677ce02d6d805c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6aeda34e359561949d9ca979ae677ce02d6d805c"
      }
    ],
    "stats": {
      "total": 623,
      "additions": 429,
      "deletions": 194
    },
    "files": [
      {
        "sha": "d64cafa332dc9e070e7e9b4d08a6c0c621b629b0",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 220,
        "deletions": 14,
        "changes": 234,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "patch": "@@ -4,6 +4,13 @@\n \n #include \"wallet/hdkeystore.h\"\n \n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/foreach.hpp>\n+\n bool CHDKeyStore::AddMasterSeed(const HDChainID& hash, const CKeyingMaterial& masterSeed)\n {\n     LOCK(cs_KeyStore);\n@@ -20,31 +27,230 @@ bool CHDKeyStore::AddMasterSeed(const HDChainID& hash, const CKeyingMaterial& ma\n     return true;\n }\n \n+bool CHDKeyStore::AddCryptedMasterSeed(const HDChainID& hash, const std::vector<unsigned char>& vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    mapHDCryptedMasterSeeds[hash] = vchCryptedSecret;\n+    return true;\n+}\n+\n bool CHDKeyStore::GetMasterSeed(const HDChainID& hash, CKeyingMaterial& seedOut) const\n {\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n     {\n-        LOCK(cs_KeyStore);\n-        if (!IsCrypted())\n+        std::map<HDChainID, CKeyingMaterial >::const_iterator it=mapHDMasterSeeds.find(hash);\n+        if (it == mapHDMasterSeeds.end())\n+            return false;\n+\n+        seedOut = it->second;\n+        return true;\n+    }\n+    else\n+    {\n+        std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(hash);\n+        if (it == mapHDCryptedMasterSeeds.end())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret = it->second;\n+        if (!DecryptSeed(vchCryptedSecret, hash, seedOut))\n+            return false;\n+\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CHDKeyStore::EncryptSeeds()\n+{\n+    LOCK(cs_KeyStore);\n+    for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it)\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSeed(it->second, it->first, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(it->first, vchCryptedSecret);\n+    }\n+    mapHDMasterSeeds.clear();\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetCryptedMasterSeed(const HDChainID& hash, std::vector<unsigned char>& vchCryptedSecret) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+        return false;\n+\n+    std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(hash);\n+    if (it == mapHDCryptedMasterSeeds.end())\n+        return false;\n+\n+    vchCryptedSecret = it->second;\n+    return true;\n+}\n+\n+bool CHDKeyStore::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (mapHDPubKeys.count(address) > 0)\n+        return true;\n+\n+    return CCryptoKeyStore::HaveKey(address);\n+}\n+\n+bool CHDKeyStore::LoadHDPubKey(const CHDPubKey &pubkey)\n+{\n+    LOCK(cs_KeyStore);\n+    mapHDPubKeys[pubkey.pubkey.GetID()] = pubkey;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n+{\n+    LOCK(cs_KeyStore);\n+    chainIDs.clear();\n+\n+    if (IsCrypted())\n+    {\n+        for(std::map<HDChainID, std::vector<unsigned char> >::iterator it = mapHDCryptedMasterSeeds.begin(); it != mapHDCryptedMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+    else\n+    {\n+        for(std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+    \n+    return true;\n+}\n+\n+bool CHDKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+\n+    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHDPubKeys.find(address);\n+    if (mi != mapHDPubKeys.end())\n+    {\n+        if (!DeriveKey(mi->second, keyOut))\n+            return false;\n+\n+        return true;\n+    }\n+\n+    return CCryptoKeyStore::GetKey(address, keyOut);\n+}\n+\n+bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n+{\n+    //this methode required no locking\n+    \n+    std::string chainPath = hdPubKey.chainPath;\n+    std::vector<std::string> pathFragments;\n+    boost::split(pathFragments, chainPath, boost::is_any_of(\"/\"));\n+\n+    CExtKey extKey;\n+    CExtKey parentKey;\n+    BOOST_FOREACH(std::string fragment, pathFragments)\n+    {\n+        bool harden = false;\n+        if (fragment.back() == '\\'')\n+        {\n+            harden = true;\n+            fragment = fragment.substr(0,fragment.size()-1);\n+        }\n+\n+        if (fragment == \"m\")\n         {\n-            std::map<HDChainID, CKeyingMaterial >::const_iterator it=mapHDMasterSeeds.find(hash);\n-            if (it == mapHDMasterSeeds.end())\n+            CExtKey bip32MasterKey;\n+            CKeyingMaterial masterSeed;\n+\n+            // get master seed\n+            if (!GetMasterSeed(hdPubKey.chainHash, masterSeed))\n                 return false;\n \n-            seedOut = it->second;\n-            return true;\n+            bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n+            parentKey = bip32MasterKey;\n+        }\n+        else if (fragment == \"c\")\n+        {\n+            return false;\n         }\n         else\n         {\n-            std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(hash);\n-            if (it == mapHDCryptedMasterSeeds.end())\n+            CExtKey childKey;\n+            int32_t nIndex;\n+            if (!ParseInt32(fragment,&nIndex))\n                 return false;\n+            parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n+            parentKey = childKey;\n+        }\n+    }\n+    keyOut = parentKey.key;\n+    return true;\n+}\n \n-            std::vector<unsigned char> vchCryptedSecret = it->second;\n-            if (!DecryptSeed(vchCryptedSecret, hash, seedOut))\n-                return false;\n+bool CHDKeyStore::DeriveHDPubKeyAtIndex(const HDChainID chainId, CHDPubKey& hdPubKeyOut, unsigned int nIndex, bool internal) const\n+{\n+    CHDChain hdChain;\n+    if (!GetChain(chainId, hdChain))\n+        return false;\n \n-            return true;\n-        }\n+    if ( (internal && !hdChain.internalPubKey.pubkey.IsValid()) || !hdChain.externalPubKey.pubkey.IsValid())\n+        throw std::runtime_error(\"CHDKeyStore::HDGetChildPubKeyAtIndex(): Missing HD extended pubkey!\");\n+\n+    if (nIndex >= 0x80000000)\n+        throw std::runtime_error(\"CHDKeyStore::HDGetChildPubKeyAtIndex(): No more available keys!\");\n+\n+    CExtPubKey useExtKey = internal ? hdChain.internalPubKey : hdChain.externalPubKey;\n+    CExtPubKey childKey;\n+    if (!useExtKey.Derive(childKey, nIndex))\n+        throw std::runtime_error(\"CHDKeyStore::HDGetChildPubKeyAtIndex(): Key deriving failed!\");\n+\n+    hdPubKeyOut.pubkey = childKey.pubkey;\n+    hdPubKeyOut.chainHash = chainId;\n+    hdPubKeyOut.nChild = nIndex;\n+    hdPubKeyOut.chainPath = hdChain.chainPath;\n+    boost::replace_all(hdPubKeyOut.chainPath, \"c\", itostr(internal)); //replace the chain switch index\n+    hdPubKeyOut.chainPath += \"/\"+itostr(nIndex);\n+\n+    return true;\n+}\n+\n+unsigned int CHDKeyStore::GetNextChildIndex(const HDChainID& chainId, bool internal)\n+{\n+    std::vector<unsigned int> vIndices;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        //get next unused child index\n+        for(std::map<CKeyID, CHDPubKey>::iterator it = mapHDPubKeys.begin(); it != mapHDPubKeys.end(); ++it)\n+            if (it->second.chainHash == chainId)\n+                vIndices.push_back(it->second.nChild);\n     }\n-    return false;\n+\n+    for(unsigned int i=0;i<0x80000000;i++)\n+        if (std::find(vIndices.begin(), vIndices.end(), i) == vIndices.end())\n+            return i;\n+\n+    return 0;\n+}\n+\n+bool CHDKeyStore::AddChain(const CHDChain& chain)\n+{\n+    LOCK(cs_KeyStore);\n+    mapChains[chain.chainHash] = chain;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetChain(const HDChainID chainId, CHDChain& chainOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    std::map<HDChainID, CHDChain>::const_iterator it=mapChains.find(hash);\n+    if (it == mapChains.end())\n+        return false;\n+\n+    chainOut = it->second;\n+    return true;\n }\n\\ No newline at end of file"
      },
      {
        "sha": "1e757d6c683c25aea588299d499112508bfa62f0",
        "filename": "src/wallet/hdkeystore.h",
        "status": "modified",
        "additions": 97,
        "deletions": 2,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/hdkeystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/hdkeystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.h?ref=5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "patch": "@@ -12,6 +12,49 @@\n \n typedef uint256 HDChainID;\n \n+/** hdpublic key for a persistant store. */\n+class CHDPubKey\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    CPubKey pubkey; //the acctual pubkey\n+    unsigned int nChild; //child index\n+    HDChainID chainHash; //hash of the chains master pubkey\n+    std::string chainPath; //individual key chainpath like m/44'/0'/0'/0/1\n+\n+    CHDPubKey()\n+    {\n+        SetNull();\n+    }\n+\n+    bool IsValid()\n+    {\n+        return pubkey.IsValid();\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDPubKey::CURRENT_VERSION;\n+        chainHash.SetNull();\n+        chainPath.clear();\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(pubkey);\n+        READWRITE(chainHash);\n+        READWRITE(chainPath);\n+        READWRITE(nChild);\n+    }\n+};\n+\n+/** class for representing a hd chain of keys. */\n class CHDChain\n {\n public:\n@@ -22,18 +65,24 @@ class CHDChain\n     HDChainID chainHash; //hash() of the masterpubkey\n     std::string chainPath; //something like \"m'/44'/0'/0'/c\"\n     CExtPubKey externalPubKey;\n-    CExtPubKey internalPubKey;\n+    CExtPubKey internalPubKey; // pubkey.IsValid() == false means only use external chain\n \n     CHDChain()\n     {\n         SetNull();\n     }\n+\n     CHDChain(int64_t nCreateTime_)\n     {\n         SetNull();\n         nCreateTime = nCreateTime_;\n     }\n \n+    bool IsValid()\n+    {\n+        return externalPubKey.pubkey.IsValid();\n+    }\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n@@ -59,11 +108,57 @@ class CHDChain\n class CHDKeyStore : public CCryptoKeyStore\n {\n protected:\n+    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; //master seeds are stored outside of CHDChain (crypto)\n     std::map<HDChainID, std::vector<unsigned char> > mapHDCryptedMasterSeeds;\n-    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds;\n+    std::map<CKeyID, CHDPubKey> mapHDPubKeys; //all hd pubkeys of all chains\n+    std::map<HDChainID, CHDChain> mapChains; //all available chains\n+\n+    //!derive key from a CHDPubKey object\n+    bool DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const;\n \n public:\n+    //!add a master seed with a given pubkeyhash (memory only)\n     virtual bool AddMasterSeed(const HDChainID& pubkeyhash, const CKeyingMaterial& masterSeed);\n+\n+    //!add a crypted master seed with a given pubkeyhash (memory only)\n+    virtual bool AddCryptedMasterSeed(const HDChainID& hash, const std::vector<unsigned char>& vchCryptedSecret);\n+\n+    //!encrypt existing uncrypted seeds and remove unencrypted data\n+    virtual bool EncryptSeeds();\n+\n+    //!export the master seed from a given chain id (hash of the master pub key)\n     virtual bool GetMasterSeed(const HDChainID& hash, CKeyingMaterial& seedOut) const;\n+\n+    //!get the encrypted master seed of a giveb chain id\n+    virtual bool GetCryptedMasterSeed(const HDChainID& hash, std::vector<unsigned char>& vchCryptedSecret) const;\n+\n+    //!writes all available chain ids to a vector\n+    virtual bool GetAvailableChainIDs(std::vector<HDChainID>& chainIDs);\n+\n+    //!add a CHDPubKey object to the keystore (memory only)\n+    bool LoadHDPubKey(const CHDPubKey &pubkey);\n+\n+\n+    //!add a new chain to the keystore (memory only)\n+    bool AddChain(const CHDChain& chain);\n+\n+    //!writes a chain defined by given chainId to chainOut, returns false if not found\n+    bool GetChain(const HDChainID chainId, CHDChain& chainOut) const;\n+\n+    //!Derives a hdpubkey object in a given chain defined by chainId from the existing external oder internal chain root pub key\n+    bool DeriveHDPubKeyAtIndex(const HDChainID chainId, CHDPubKey& hdPubKeyOut, unsigned int nIndex, bool internal) const;\n+\n+    /**\n+     * Get next available index for a child key in chain defined by given chain id\n+     * @return next available index\n+     * @warning This will \"fill gaps\". If you have m/0/0, m/0/1, m/0/2, m/0/100 it will return 3 (m/0/3)\n+     */\n+    unsigned int GetNextChildIndex(const HDChainID& chainId, bool internal);\n+\n+    //!check if a wallet has a certain key\n+    bool HaveKey(const CKeyID &address) const;\n+\n+    //!get a key with given keyid for signing, etc. (private key operation)\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const;\n };\n #endif // BITCOIN_WALLET_HDKEYSTORE_H\n\\ No newline at end of file"
      },
      {
        "sha": "41ac5e47ba3a9e11fd4ee951d7077c99cac433ba",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "patch": "@@ -2490,8 +2490,9 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n     UniValue result(UniValue::VOBJ);\n \n     assert(pwalletMain != NULL);\n-    const unsigned int bip32MasterSeedLength = 32;\n+    EnsureWalletIsUnlocked();\n \n+    const unsigned int bip32MasterSeedLength = 32;\n     CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n     bool fGenerateMasterSeed = true;\n     CExtPubKey masterPubKey;\n@@ -2558,9 +2559,7 @@ UniValue hdgetaddress(const UniValue& params, bool fHelp)\n     pwalletMain->SetAddressBook(keyID, \"\", \"receive\");\n \n     std::string keysChainPath = pwalletMain->HDGetChainPath();\n-    std::stringstream ss; ss << pwalletMain->mapKeyMetadata[keyID].nChild;\n     boost::replace_all(keysChainPath, \"c\", \"0\");\n-    boost::replace_all(keysChainPath, \"k\", ss.str());\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"address\", CBitcoinAddress(keyID).ToString()));"
      },
      {
        "sha": "3aecbf26696f9f86e4ca8faf2cdd1db52f762650",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 135,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "patch": "@@ -162,6 +162,8 @@ bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n \n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n+    std::string btcAdr = CBitcoinAddress(vchPubKey.GetID()).ToString();\n+    LogPrintf(\"load crypted key: %s\\n\", btcAdr);\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n@@ -535,7 +537,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n             pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n         }\n \n-        if (!EncryptKeys(vMasterKey))\n+        if (!EncryptKeys(vMasterKey) || !EncryptHDSeeds(vMasterKey))\n         {\n             if (fFileBacked) {\n                 pwalletdbEncryption->TxnAbort();\n@@ -2884,10 +2886,6 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n     if (IsLocked())\n         return false;\n \n-    //only allow setting a new chainpath (and generat int/ext keys) if no chain has set (or has been deleted)\n-    if (!overwrite && (!HDactiveChain.IsNull() && !hdChains[HDactiveChain].chainPath.empty()))\n-        throw std::runtime_error(\"CWallet::SetHDChainPath(): Chainpath already set.\");\n-\n     if (chainPathIn[0] != 'm')\n         throw std::runtime_error(\"CWallet::SetHDChainPath(): Non masterkey chainpaths are not allowed.\");\n \n@@ -2942,7 +2940,13 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n             b58key.SetKey(bip32MasterKey);\n             LogPrintf(\"key: %s\", b58key.ToString());\n             uint256 masterPubkKeyHash = bip32MasterKey.key.GetPubKey().GetHash();\n-            AddMasterSeed(masterPubkKeyHash, vSeed);\n+\n+            //only one chain per master seed is allowed\n+            if (hdChains.find(masterPubkKeyHash) != hdChains.end() )\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Only one chain per masterseed is allowed.\");\n+\n+            if (!AddMasterSeed(masterPubkKeyHash, vSeed))\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Could not store master seed.\");\n \n             newChain.chainPath = newChainPath;\n             newChain.chainHash = masterPubkKeyHash;\n@@ -2953,7 +2957,10 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n \n             if (IsCrypted())\n             {\n-                if (!CWalletDB(strWalletFile).WriteHDMasterSeed(masterPubkKeyHash, vSeed))\n+                std::vector<unsigned char> vchCryptedSecret;\n+                GetCryptedMasterSeed(masterPubkKeyHash, vchCryptedSecret);\n+\n+                if (!CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(masterPubkKeyHash, vchCryptedSecret))\n                     throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing hdmasterseed failed!\");\n             }\n             else\n@@ -2963,26 +2970,23 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n             }\n \n             //set active hd chain\n-            HDactiveChain = masterPubkKeyHash;\n+            activeHDChain = masterPubkKeyHash;\n             if (!CWalletDB(strWalletFile).WriteHDAchiveChain(masterPubkKeyHash))\n                 throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing active hd chain failed!\");\n \n             parentKey = bip32MasterKey;\n         }\n         else if (fragment == \"c\")\n         {\n-            harden = false;\n+            harden = false; //external / internal chain root keys can not be hardened\n             CExtPubKey parentExtPubKey = parentKey.Neuter();\n             parentExtPubKey.Derive(newChain.externalPubKey, 0);\n             parentExtPubKey.Derive(newChain.internalPubKey, 1);\n \n-            hdChains[newChain.chainHash] = newChain;\n-\n-            if (!CWalletDB(strWalletFile).WriteHDExternalPubKey(newChain.chainHash, newChain.externalPubKey))\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing external pubkey failed!\");\n+            AddChain(newChain);\n \n-            if (!CWalletDB(strWalletFile).WriteHDInternalPubKey(newChain.chainHash, newChain.internalPubKey))\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing internal pubkey failed!\");\n+            if (!CWalletDB(strWalletFile).WriteHDChain(newChain))\n+                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing new chain failed!\");\n         }\n         else\n         {\n@@ -3002,153 +3006,65 @@ bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyO\n {\n     AssertLockHeld(cs_wallet);\n \n-    CHDChain hdChain = hdChains[chainID];\n-    if ( (internal && !hdChain.internalPubKey.pubkey.IsValid()) || !hdChain.externalPubKey.pubkey.IsValid())\n-        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Missing HD extended pubkey!\");\n-\n-    if (nIndex >= 0x80000000)\n-        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): No more available keys!\");\n-\n-\n-    CExtPubKey useExtKey = internal ? hdChain.internalPubKey : hdChain.externalPubKey;\n-    CExtPubKey childKey;\n-    if (!useExtKey.Derive(childKey, nIndex))\n-        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Key deriving failed!\");\n+    CHDPubKey newHdPubKey;\n+    if (!DeriveHDPubKeyAtIndex(chainId, newHdPubKey, index, internal))\n+        throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Deriving child key faild!\");\n \n     // Create new metadata\n     int64_t nCreationTime = GetTime();\n-    mapKeyMetadata[childKey.pubkey.GetID()] = CKeyMetadata(nCreationTime);\n+    mapKeyMetadata[newHdPubKey.pubkey.GetID()] = CKeyMetadata(nCreationTime);\n     if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n         nTimeFirstKey = nCreationTime;\n \n-    mapKeyMetadata[childKey.pubkey.GetID()].parentKeyID = useExtKey.pubkey.GetID();\n-    mapKeyMetadata[childKey.pubkey.GetID()].nChild = nIndex;\n-    mapKeyMetadata[childKey.pubkey.GetID()].chainHash = chainID;\n-\n-\n-    if (!CCryptoKeyStore::AddKeyPubKey(CKey(), childKey.pubkey))\n+    if (!LoadHDPubKey(newHdPubKey))\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Add key to keystore failed!\");\n \n-    if (!CWalletDB(strWalletFile).WriteHDPubKey(childKey.pubkey, mapKeyMetadata[childKey.pubkey.GetID()]))\n+    if (!CWalletDB(strWalletFile).WriteHDPubKey(newPubKey, mapKeyMetadata[newHdPubKey.pubkey.GetID()]))\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Writing pubkey failed!\");\n     \n-    pubKeyOut = childKey.pubkey;\n+    pubKeyOut = newHdPubKey.pubkey;\n     return true;\n }\n \n-bool CWallet::HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOut, bool internal)\n+bool CWallet::HDGetNextChildPubKey(const HDChainID& chainId, CPubKey &pubKeyOut, std::string& newKeysChainpath, bool internal)\n {\n-    LOCK(cs_wallet);\n-\n-    HDChainID chainHash = chainIDIn;\n+    CHDChain chain;\n+    if (!GetChain(chainId, chain) || !chain.IsValid())\n+        throw std::runtime_error(\"CWallet::HDGetNextChildPubKey(): Selected chain is not vailid!\");\n \n-    if (chainHash.IsNull())\n-        chainHash = HDactiveChain;\n-\n-    std::string chainPath = hdChains[HDactiveChain].chainPath;\n-    if (!chainPath.empty())\n-    {\n-        //try to get a HD key\n-        unsigned int nNextChildIndex = 0;\n-        for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n-            if (!it->second.parentKeyID.IsNull() && it->second.nChild >= nNextChildIndex)\n-                nNextChildIndex = it->second.nChild+1;\n-\n-        return HDGetChildPubKeyAtIndex(chainHash, pubKeyOut, nNextChildIndex, internal);\n-    }\n-    return false;\n-}\n-\n-bool CWallet::HDDeriveKeyFromKeyID(CKey& keyOut, CKeyID keyId) const\n-{\n-    AssertLockHeld(cs_wallet);\n-    //get key metadata, use iterator because we are in a const function\n-    std::map<CKeyID, CKeyMetadata>::const_iterator itMetadata=mapKeyMetadata.find(keyId);\n-    if (itMetadata == mapKeyMetadata.end())\n-        return false;\n-    CKeyMetadata meta = itMetadata->second;\n-\n-    //get current chainpath, use iterator because we are in a const function\n-    std::map<uint256, CHDChain>::const_iterator itChainPath=hdChains.find(meta.chainHash);\n-    if (itChainPath == hdChains.end())\n+    unsigned int nextIndex = GetNextChildIndex(chainHash, internal);\n+    if (!HDGetChildPubKeyAtIndex(chainHash, pubKeyOut, nextIndex, internal))\n         return false;\n-    CHDChain hdChain = itChainPath->second;\n-    std::string chainPath = hdChain.chainPath;\n-\n-    if(meta.parentKeyID == hdChain.externalPubKey.pubkey.GetID() || meta.parentKeyID == hdChain.internalPubKey.pubkey.GetID())\n-    {\n-        std::vector<std::string> pathFragments;\n-        boost::split(pathFragments, chainPath, boost::is_any_of(\"/\"));\n \n-        CExtKey extKey;\n-        CExtKey parentKey;\n-        BOOST_FOREACH(std::string fragment, pathFragments)\n-        {\n-            bool harden = false;\n-            if (fragment.back() == '\\'')\n-            {\n-                harden = true;\n-                fragment = fragment.substr(0,fragment.size()-1);\n-            }\n-\n-            if (fragment == \"m\")\n-            {\n-                CExtKey bip32MasterKey;\n-                CKeyingMaterial masterSeed;\n-\n-                // get master seed\n-                if (!GetMasterSeed(HDactiveChain, masterSeed))\n-                    return false;\n-\n-                bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n-                parentKey = bip32MasterKey;\n-            }\n-            else if (fragment == \"c\")\n-            {\n-                harden = false;\n-                //TODO add caching of extended chain private key to allow faster signing\n-                parentKey.Derive(extKey, (meta.parentKeyID == hdChain.externalPubKey.pubkey.GetID()) ? 0 : 1);\n-                CExtPubKey extPubKey = extKey.Neuter();\n-                assert(extPubKey.pubkey.GetID() == ( (meta.parentKeyID == hdChain.externalPubKey.pubkey.GetID()) ? hdChain.externalPubKey.pubkey.GetID() : hdChain.internalPubKey.pubkey.GetID()) );\n-            }\n-            else\n-            {\n-                CExtKey childKey;\n-                int32_t nIndex;\n-                if (!ParseInt32(fragment,&nIndex))\n-                    return false;\n-                parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n-                parentKey = childKey;\n-            }\n-        }\n-\n-        CExtKey newKey;\n-        extKey.Derive(newKey,meta.nChild);\n-        keyOut = newKey.key;\n-        return true;\n-    }\n-    return false;\n+    newKeysChainpath = chain.chainPath;\n+    boost::replace_all(newKeysChainpath, \"c\", itostr(internal)); //replace the chain switch index\n+    hdPubKeyOut.chainPath += \"/\"+itostr(nextIndex);\n }\n \n std::string CWallet::HDGetChainPath()\n {\n     AssertLockHeld(cs_wallet);\n-    return hdChains[HDactiveChain].chainPath;\n+    return hdChains[activeHDChain].chainPath;\n }\n \n-bool CWallet::GetKey(const CKeyID &address, CKey &keyOut) const\n+bool CWallet::EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn)\n {\n-    std::map<CKeyID, CKeyMetadata>::const_iterator it=mapKeyMetadata.find(address);\n-    if (it != mapKeyMetadata.end())\n+    EncryptSeeds();\n+\n+    std::vector<HDChainID> chainIds;\n+    GetAvailableChainIDs(chainIds);\n+\n+    BOOST_FOREACH(HDChainID& chainId, chainIds)\n     {\n-        CKeyMetadata meta = it->second;\n-        if (!meta.parentKeyID.IsNull())\n-        {\n-            //deterministic generation of privkey,\n-            return HDDeriveKeyFromKeyID(keyOut, address);\n-        }\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!GetCryptedMasterSeed(chainId, vchCryptedSecret))\n+            throw std::runtime_error(\"CWallet::EncryptHDSeeds(): Encrypting seeds failed!\");\n+\n+        if (!CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(chainId, vchCryptedSecret))\n+            throw std::runtime_error(\"CWallet::EncryptHDSeeds(): Writing hdmasterseed failed!\");\n     }\n-    return CCryptoKeyStore::GetKey(address, keyOut);\n+\n+    return true;\n }\n \n /* END BIP32 Stack */"
      },
      {
        "sha": "1897a9f34b7fe1b75b5bc4dc5182fd44bfa77107",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "patch": "@@ -596,6 +596,7 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n+\n     //! Load metadata (used by LoadWallet)\n     bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n@@ -785,14 +786,12 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n     /** Set whether this wallet broadcasts transactions. */\n     void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }\n \n-    std::map<uint256, CHDChain> hdChains;\n-    uint256 HDactiveChain;\n+    uint256 activeHDChain;\n \n     bool HDSetChainPath(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, const CExtPubKey& pubMasterKey, bool overwrite = false);\n     bool HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal = false);\n-    bool HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOut, bool internal = false);\n-    bool HDDeriveKeyFromKeyID(CKey& keyOut, CKeyID keyId) const;\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const;\n+    bool HDGetNextChildPubKey(const HDChainID& chainId, CPubKey &pubKeyOut, std::string& newKeysChainpathOut, bool internal = false);\n+    bool EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn);\n     std::string HDGetChainPath();\n };\n "
      },
      {
        "sha": "d611009decaf4b5391da9e1c5c1d54e9e9e5d221",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 20,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "patch": "@@ -138,7 +138,13 @@ bool CWalletDB::WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& ma\n bool CWalletDB::WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret)\n {\n     nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"hdcryptedmasterseed\"), hash), vchCryptedSecret);\n+    if (!Write(std::make_pair(std::string(\"hdcryptedmasterseed\"), hash), vchCryptedSecret))\n+        return false;\n+\n+    Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n+    Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n+\n+    return true;\n }\n \n bool CWalletDB::EraseHDMasterSeed(const uint256& hash)\n@@ -165,15 +171,21 @@ bool CWalletDB::WriteHDChainPath(const uint256& hash, const std::string &chainPa\n     return Write(std::make_pair(std::string(\"hdchainpath\"), hash), chainPath);\n }\n \n-bool CWalletDB::WriteHDPubKey(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta)\n+bool CWalletDB::WriteHDChainPath(const CHDChain &chain)\n {\n     nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"hdchain\"), chain.chainHash), chain);\n+}\n \n-    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+bool CWalletDB::WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta)\n+{\n+    nWalletDBUpdated++;\n+\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), hdPubKey.pubkey),\n                keyMeta))\n         return false;\n \n-    return Write(std::make_pair(std::string(\"hdpubkey\"), vchPubKey), '1');\n+    return Write(std::make_pair(std::string(\"hdpubkey\"), hdPubKey.pubkey), hdPubKey);\n }\n \n bool CWalletDB::WriteHDAchiveChain(const uint256& hash)\n@@ -550,21 +562,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n         }\n-        else if (strType == \"hdpubkey\")\n-        {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->LoadKey(CKey(), vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadKey failed\";\n-                return false;\n-            }\n-        }\n         else if (strType == \"mkey\")\n         {\n             unsigned int nID;\n@@ -702,9 +699,42 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> masterSeed;\n             pwallet->AddMasterSeed(masterPubKeyHash, masterSeed);\n         }\n+        else if (strType == \"hdcryptedmasterseed\")\n+        {\n+            uint256 masterPubKeyHash;\n+            std::vector<unsigned char> vchCryptedSecret;\n+            ssKey >> masterPubKeyHash;\n+            ssValue >> vchCryptedSecret;\n+            pwallet->AddCryptedMasterSeed(masterPubKeyHash, vchCryptedSecret);\n+        }\n         else if (strType == \"hdactivechain\")\n         {\n-            ssValue >> pwallet->HDactiveChain;\n+            ssValue >> pwallet->activeHDChain;\n+        }\n+        else if (strType == \"hdpubkey\")\n+        {\n+            CHDPubKey hdPubKey;\n+            ssValue >> hdPubKey;\n+            if (!hdPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CHDPubKey corrupt\";\n+                return false;\n+            }\n+            if (!pwallet->LoadHDPubKey(hdPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadHDPubKey failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"hdchain\")\n+        {\n+            CHDChain chain;\n+            ssValue >> chain;\n+            if (!pwallet->AddChain(chain))\n+            {\n+                strErr = \"Error reading wallet database: AddChain failed\";\n+                return false;\n+            }\n         }\n     } catch (...)\n     {"
      },
      {
        "sha": "aebc1b3149167e229320e419a9fb1338f1d15599",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d0f0814a2c68d0739342f5885e17cd86c2cba3b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "patch": "@@ -9,6 +9,8 @@\n #include \"amount.h\"\n #include \"wallet/db.h\"\n #include \"key.h\"\n+#include \"keystore.h\"\n+#include \"hdkeystore.h\"\n \n #include <list>\n #include <stdint.h>\n@@ -43,14 +45,10 @@ enum DBErrors\n class CKeyMetadata\n {\n public:\n-    static const int CURRENT_VERSION=2;\n+    static const int CURRENT_VERSION=1;\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n \n-    unsigned int nChild;\n-    CKeyID parentKeyID;\n-    uint256 chainHash;\n-\n     CKeyMetadata()\n     {\n         SetNull();\n@@ -68,21 +66,12 @@ class CKeyMetadata\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(nCreateTime);\n-        if(nVersion >= 2)\n-        {\n-            READWRITE(nChild);\n-            READWRITE(parentKeyID);\n-            READWRITE(chainHash);\n-        }\n-\n     }\n \n     void SetNull()\n     {\n         nVersion = CKeyMetadata::CURRENT_VERSION;\n         nCreateTime = 0;\n-        nChild = 0;\n-        parentKeyID = CKeyID();\n     }\n };\n \n@@ -120,7 +109,8 @@ class CWalletDB : public CDB\n     bool WriteHDInternalPubKey(const uint256& hash, const CExtPubKey &internalPubKey);\n \n     bool WriteHDChainPath(const uint256& hash, const std::string &chainPath);\n-    bool WriteHDPubKey(const CPubKey& vchPubKey, const CKeyMetadata& keyMeta);\n+    bool WriteHDChain(const CHDChain& chain);\n+    bool WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta);\n \n     bool WriteHDAchiveChain(const uint256& hash);\n "
      }
    ]
  },
  {
    "sha": "b5bf17c9b402b5b1bd83cfd79056045956c0700a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWJmMTdjOWI0MDJiNWIxYmQ4M2NmZDc5MDU2MDQ1OTU2YzA3MDBh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-10T07:47:08Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:25Z"
      },
      "message": "hdwallet: add 'hdsetchain' and 'hdgetinfo'",
      "tree": {
        "sha": "fcc5b76be1e236d28987ca7b036ca589c2ded820",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcc5b76be1e236d28987ca7b036ca589c2ded820"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5bf17c9b402b5b1bd83cfd79056045956c0700a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemalAAoJECnUvLZBb1Ps4mEP/3HAEJqbT6lc+C1uRJ4yZYen\nsaIyH2AyyJrpmvPBDWj5p7Y9cgnQvsW+luBGYg3s4XtNTyUsz+w23VbASkWspLiy\n2E+crPmgyGLFYiEtCXa2Wu23Ez4pHTWXSIA3tgvkT9buQExqYUpGFQ2jQW2och9R\nbxLbnfnvCtuOvLgAp18A0Vzd8MWVsp+vcaLHtwUqeG4dBLf687z1PlfBYezCCnte\n3pjV4k5vo4BIRW9I2Ho7ci57Gc3zYnCFVC64iGzNoxap/bZEaeYp7AxD6k8RESp+\nlVfJORQUE1K4KsQPJbGOxEJitqz8xxTAVOqXePmHDNdvE3vqpv0/cl6AEcWN9xtL\nsMLtEfHJQru88+UKhX4cShXboGSeIzwMg77AQlGlV4fao25UVTtT4Wp9qXS02AQw\nJEq1tp0m2S5i3R+paxf0b1jscokpexC6lYM1k+EoueF0REjg7tRybRXPokVo/7ST\nJajqDooUpAe4NLOvaeC2plPkVOhhqoCVewiVgIYP59s5UT48kulXMS8zagvV5IvK\nlKJzt51q5rz7BK+nVA0OCS0aMuWsB2AQZEnbSpPqfN5l7ebOYV3kj00WpN1a1R4x\n9H+aB8/7UOKq+QZ78LznVS33M6HLqHlW9EDvK0RXjOHVZRGkQ1ECgx+W9hi54ky+\n7m/kepbGg3QOb3kU0haC\n=qkXi\n-----END PGP SIGNATURE-----",
        "payload": "tree fcc5b76be1e236d28987ca7b036ca589c2ded820\nparent 5d0f0814a2c68d0739342f5885e17cd86c2cba3b\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433922428 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862245 +0100\n\nhdwallet: add 'hdsetchain' and 'hdgetinfo'\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5bf17c9b402b5b1bd83cfd79056045956c0700a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5bf17c9b402b5b1bd83cfd79056045956c0700a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5bf17c9b402b5b1bd83cfd79056045956c0700a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d0f0814a2c68d0739342f5885e17cd86c2cba3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d0f0814a2c68d0739342f5885e17cd86c2cba3b"
      }
    ],
    "stats": {
      "total": 428,
      "additions": 322,
      "deletions": 106
    },
    "files": [
      {
        "sha": "4db107735718cfdc2c9ad6771e523595913bd331",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -164,7 +164,7 @@ BITCOIN_CORE_H = \\\n   version.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n-\twallet/hdkeystore.h \\\n+  wallet/hdkeystore.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n   wallet/walletdb.h \\\n@@ -235,7 +235,7 @@ libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n-\twallet/hdkeystore.cpp \\\n+  wallet/hdkeystore.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "d9bdc71881f26aa51264c7c9129ace2269991aad",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -102,6 +102,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },\n     { \"setban\", 3 },\n+    { \"hdsendtoaddress\", 1 },\n+    { \"hdsendtoaddress\", 4 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "762b1785b68f7e2eaa74a85f896819ade4d33b35",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -374,6 +374,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"walletpassphrase\",       &walletpassphrase,       true  },\n     { \"wallet\",             \"hdaddchain\",             &hdaddchain,             true  },\n     { \"wallet\",             \"hdgetaddress\",           &hdgetaddress,           true  },\n+    { \"wallet\",             \"hdsendtoaddress\",        &hdsendtoaddress,        false },\n+    { \"wallet\",             \"hdsetchain\",             &hdsetchain,             false },\n+    { \"wallet\",             \"hdgetinfo\",              &hdgetinfo,              false },\n #endif // ENABLE_WALLET\n };\n "
      },
      {
        "sha": "dd6145289e3d491b1b01f41d0be3b398b521088a",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -236,6 +236,9 @@ extern UniValue setmocktime(const UniValue& params, bool fHelp);\n extern UniValue resendwallettransactions(const UniValue& params, bool fHelp);\n extern UniValue hdaddchain(const UniValue& params, bool fHelp);\n extern UniValue hdgetaddress(const UniValue& params, bool fHelp);\n+extern UniValue hdsendtoaddress(const UniValue& params, bool fHelp);\n+extern UniValue hdsetchain(const UniValue& params, bool fHelp);\n+extern UniValue hdgetinfo(const UniValue& params, bool fHelp);\n \n extern UniValue getrawtransaction(const UniValue& params, bool fHelp); // in rcprawtransaction.cpp\n extern UniValue listunspent(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "a11b54fe349c398a0bc62e96a6d84cb3977b0429",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -307,7 +307,7 @@ bool CCryptoKeyStore::DecryptSeed(const std::vector<unsigned char>& vchCiphertex\n {\n     LOCK(cs_KeyStore);\n \n-    if(!DecryptSecret(vMasterKey, vchCiphertextIn, seedPubHash, seedOut))\n+    if (!DecryptSecret(vMasterKey, vchCiphertextIn, seedPubHash, seedOut))\n         return false;\n \n     return true;"
      },
      {
        "sha": "374e2f9f8b2813186cb19d3deecfbc21ecec8aac",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 6,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -112,13 +112,13 @@ bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n \n     if (IsCrypted())\n     {\n-        for(std::map<HDChainID, std::vector<unsigned char> >::iterator it = mapHDCryptedMasterSeeds.begin(); it != mapHDCryptedMasterSeeds.end(); ++it) {\n+        for (std::map<HDChainID, std::vector<unsigned char> >::iterator it = mapHDCryptedMasterSeeds.begin(); it != mapHDCryptedMasterSeeds.end(); ++it) {\n             chainIDs.push_back(it->first);\n         }\n     }\n     else\n     {\n-        for(std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it) {\n+        for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it) {\n             chainIDs.push_back(it->first);\n         }\n     }\n@@ -142,6 +142,20 @@ bool CHDKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n     return CCryptoKeyStore::GetKey(address, keyOut);\n }\n \n+bool CHDKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+\n+    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHDPubKeys.find(address);\n+    if (mi != mapHDPubKeys.end())\n+    {\n+        vchPubKeyOut = mi->second.pubkey;\n+        return true;\n+    }\n+\n+    return CCryptoKeyStore::GetPubKey(address, vchPubKeyOut);\n+}\n+\n bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n {\n     //this methode required no locking\n@@ -150,6 +164,7 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n     std::vector<std::string> pathFragments;\n     boost::split(pathFragments, chainPath, boost::is_any_of(\"/\"));\n \n+    LogPrintf(\"hdwallet\", \"derive key %s\\n\", chainPath);\n     CExtKey extKey;\n     CExtKey parentKey;\n     BOOST_FOREACH(std::string fragment, pathFragments)\n@@ -188,6 +203,7 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n         }\n     }\n     keyOut = parentKey.key;\n+    LogPrintf(\"hdwallet\", \"derived key with adr: %s\\n\", CBitcoinAddress(keyOut.GetPubKey().GetID()).ToString());\n     return true;\n }\n \n@@ -212,6 +228,7 @@ bool CHDKeyStore::DeriveHDPubKeyAtIndex(const HDChainID chainId, CHDPubKey& hdPu\n     hdPubKeyOut.chainHash = chainId;\n     hdPubKeyOut.nChild = nIndex;\n     hdPubKeyOut.chainPath = hdChain.chainPath;\n+    hdPubKeyOut.internal = internal;\n     boost::replace_all(hdPubKeyOut.chainPath, \"c\", itostr(internal)); //replace the chain switch index\n     hdPubKeyOut.chainPath += \"/\"+itostr(nIndex);\n \n@@ -225,12 +242,12 @@ unsigned int CHDKeyStore::GetNextChildIndex(const HDChainID& chainId, bool inter\n     {\n         LOCK(cs_KeyStore);\n         //get next unused child index\n-        for(std::map<CKeyID, CHDPubKey>::iterator it = mapHDPubKeys.begin(); it != mapHDPubKeys.end(); ++it)\n-            if (it->second.chainHash == chainId)\n+        for (std::map<CKeyID, CHDPubKey>::iterator it = mapHDPubKeys.begin(); it != mapHDPubKeys.end(); ++it)\n+            if (it->second.chainHash == chainId && it->second.internal == internal)\n                 vIndices.push_back(it->second.nChild);\n     }\n \n-    for(unsigned int i=0;i<0x80000000;i++)\n+    for (unsigned int i=0;i<0x80000000;i++)\n         if (std::find(vIndices.begin(), vIndices.end(), i) == vIndices.end())\n             return i;\n \n@@ -247,7 +264,7 @@ bool CHDKeyStore::AddChain(const CHDChain& chain)\n bool CHDKeyStore::GetChain(const HDChainID chainId, CHDChain& chainOut) const\n {\n     LOCK(cs_KeyStore);\n-    std::map<HDChainID, CHDChain>::const_iterator it=mapChains.find(hash);\n+    std::map<HDChainID, CHDChain>::const_iterator it=mapChains.find(chainId);\n     if (it == mapChains.end())\n         return false;\n "
      },
      {
        "sha": "80ca760ec8d6d8f123eaf285a0a2aa5a8693f64e",
        "filename": "src/wallet/hdkeystore.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/hdkeystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/hdkeystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.h?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -22,6 +22,7 @@ class CHDPubKey\n     unsigned int nChild; //child index\n     HDChainID chainHash; //hash of the chains master pubkey\n     std::string chainPath; //individual key chainpath like m/44'/0'/0'/0/1\n+    bool internal;\n \n     CHDPubKey()\n     {\n@@ -48,9 +49,10 @@ class CHDPubKey\n         nVersion = this->nVersion;\n \n         READWRITE(pubkey);\n+        READWRITE(nChild);\n         READWRITE(chainHash);\n         READWRITE(chainPath);\n-        READWRITE(nChild);\n+        READWRITE(internal);\n     }\n };\n \n@@ -160,5 +162,8 @@ class CHDKeyStore : public CCryptoKeyStore\n \n     //!get a key with given keyid for signing, etc. (private key operation)\n     bool GetKey(const CKeyID &address, CKey &keyOut) const;\n+\n+    //!get a pubkey with given keyid for verifiying, etc.\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n };\n #endif // BITCOIN_WALLET_HDKEYSTORE_H\n\\ No newline at end of file"
      },
      {
        "sha": "4f1d67078f27d9f22885576b41bdb3e5bac407fd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 172,
        "deletions": 8,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -131,6 +131,7 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(keyID).ToString();\n }\n \n+\n CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n@@ -2463,6 +2464,37 @@ example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal k\n */\n const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n \n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n UniValue hdaddchain(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n@@ -2495,7 +2527,7 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n     const unsigned int bip32MasterSeedLength = 32;\n     CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n     bool fGenerateMasterSeed = true;\n-    CExtPubKey masterPubKey;\n+    HDChainID chainId;\n     std::string chainPath = hd_default_chainpath;\n     if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n         chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n@@ -2514,9 +2546,86 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n         fGenerateMasterSeed = false;\n     }\n \n-    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, masterPubKey);\n+    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, chainId);\n     if (fGenerateMasterSeed)\n         result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+    result.push_back(Pair(\"chainid\", chainId.GetHex()));\n+    return result;\n+}\n+\n+UniValue hdsetchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"hdsetchain <chainid>\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"chainid\\\"        (string|hex, required) chainid is a bitcoin hash of the master public key of the corresponding chain.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdsetchain\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    HDChainID chainId;\n+    if (!IsHex(params[0].get_str()))\n+        throw runtime_error(\"Chain id format is invalid\");\n+\n+    chainId.SetHex(params[0].get_str());\n+\n+    if (!pwalletMain->HDSetActiveChainID(chainId))\n+        throw runtime_error(\"Could not set active chain\");\n+\n+    return NullUniValue;\n+}\n+\n+UniValue hdgetinfo(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"hdgetinfo\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"chainid\\\" : \\\"<chainid>\\\",  string) A bitcoinhash of the master public key\\n\"\n+                            \"  \\\"creationtime\\\" : The creation time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The chainpath (like m/44'/0'/0'/c)\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetinfo\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::vector<HDChainID> chainIDs;\n+    if (!pwalletMain->GetAvailableChainIDs(chainIDs))\n+        throw runtime_error(\"Could not load chain ids\");\n+\n+    UniValue result(UniValue::VARR);\n+    BOOST_FOREACH(const HDChainID& chainId, chainIDs)\n+    {\n+        CHDChain chain;\n+        if (!pwalletMain->GetChain(chainId, chain))\n+            throw runtime_error(\"Could not load chain\");\n+\n+        UniValue chainObject(UniValue::VOBJ);\n+        chainObject.push_back(Pair(\"chainid\", chainId.GetHex()));\n+        chainObject.push_back(Pair(\"creationtime\", chain.nCreateTime));\n+        chainObject.push_back(Pair(\"chainpath\", chain.chainPath));\n+\n+        result.push_back(chainObject);\n+    }\n+\n     return result;\n }\n \n@@ -2542,6 +2651,7 @@ UniValue hdgetaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CPubKey newKey;\n+    std::string keyChainPath;\n     if (params.size() == 1 && params[0].isNum())\n     {\n         HDChainID emptyId;\n@@ -2551,19 +2661,73 @@ UniValue hdgetaddress(const UniValue& params, bool fHelp)\n     else\n     {\n         HDChainID emptyId;\n-        if (!pwalletMain->HDGetNextChildPubKey(emptyId, newKey))\n+        if (!pwalletMain->HDGetNextChildPubKey(emptyId, newKey, keyChainPath))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n     }\n     CKeyID keyID = newKey.GetID();\n     \n     pwalletMain->SetAddressBook(keyID, \"\", \"receive\");\n \n-    std::string keysChainPath = pwalletMain->HDGetChainPath();\n-    boost::replace_all(keysChainPath, \"c\", \"0\");\n-\n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"address\", CBitcoinAddress(keyID).ToString()));\n-    result.push_back(Pair(\"chainpath\", keysChainPath));\n+    result.push_back(Pair(\"chainpath\", keyChainPath));\n     return result;\n }\n-/* end BIP32 stack */\n+\n+UniValue hdsendtoaddress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 5)\n+        throw runtime_error(\n+                            \"hdsendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n+                            \"\\nSend an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001\\n\"\n+                            + HelpRequiringPassphrase() +\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n+                            \"2. \\\"amount\\\"      (numeric, required) The amount in btc to send. eg 0.1\\n\"\n+                            \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n+                            \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n+                            \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n+                            \"                             to which you're sending the transaction. This is not part of the \\n\"\n+                            \"                             transaction, just kept in your wallet.\\n\"\n+                            \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n+                            \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"\\\"transactionid\\\"  (string) The transaction id.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdsendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n+                            + HelpExampleCli(\"hdsendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n+                            + HelpExampleCli(\"hdsendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n+                            + HelpExampleRpc(\"hdsendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    // Amount\n+    CAmount nAmount = AmountFromValue(params[1]);\n+\n+    // Wallet comments\n+    CWalletTx wtx;\n+    if (params.size() > 2 && !params[2].isNull() && !params[2].get_str().empty())\n+        wtx.mapValue[\"comment\"] = params[2].get_str();\n+    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n+        wtx.mapValue[\"to\"]      = params[3].get_str();\n+    \n+    bool fSubtractFeeFromAmount = false;\n+    if (params.size() > 4)\n+        fSubtractFeeFromAmount = params[4].get_bool();\n+    \n+    EnsureWalletIsUnlocked();\n+    \n+    SendMoneyHD(address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n+    \n+    return wtx.GetHash().GetHex();\n+}\n+\n+/* end BIP32 stack */\n\\ No newline at end of file"
      },
      {
        "sha": "878213babd762f1fb5d592dbd7e39cf584ec98c4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 31,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -162,8 +162,6 @@ bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n \n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    std::string btcAdr = CBitcoinAddress(vchPubKey.GetID()).ToString();\n-    LogPrintf(\"load crypted key: %s\\n\", btcAdr);\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n@@ -2669,6 +2667,23 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+bool CHDReserveKey::GetReservedKey(CPubKey& pubkey)\n+{\n+    std::string newKeysChainpath;\n+    return pwallet->HDGetNextChildPubKey(chainID, pubkey, newKeysChainpath, true);\n+}\n+\n+void CHDReserveKey::KeepKey()\n+{\n+\n+}\n+\n+void CHDReserveKey::ReturnKey()\n+{\n+    //TODO: implement a way of release the nChild index of a returned HDReserveKey\n+    //at the moment there is no way of returning HD change keys\n+}\n+\n void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n {\n     setAddress.clear();\n@@ -2879,7 +2894,7 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n \n const unsigned int HD_MAX_DEPTH = 20;\n \n-bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, const CExtPubKey& pubMasterKey, bool overwrite)\n+bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, bool overwrite)\n {\n     LOCK(cs_wallet);\n \n@@ -2898,7 +2913,7 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n     std::string newChainPath = chainPathIn;\n     boost::to_lower(newChainPath);\n     boost::erase_all(newChainPath, \" \");\n-    boost::replace_all(newChainPath, \"h\", \"'\"); //support h insted of ' to allow easy JSON input over cmd line\n+    boost::replace_all(newChainPath, \"h\", \"'\"); //support h instead of ' to allow easy JSON input over cmd line\n     if (newChainPath.size() > 0 && newChainPath.back() == '/')\n         newChainPath.resize(newChainPath.size() - 1);\n \n@@ -2910,6 +2925,7 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n \n     int64_t nCreationTime = GetTime();\n     CHDChain newChain(nCreationTime);\n+    newChain.chainPath = newChainPath;\n     CExtKey parentKey;\n     BOOST_FOREACH(std::string fragment, pathFragments)\n     {\n@@ -2938,40 +2954,36 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n \n             CBitcoinExtKey b58key;\n             b58key.SetKey(bip32MasterKey);\n-            LogPrintf(\"key: %s\", b58key.ToString());\n-            uint256 masterPubkKeyHash = bip32MasterKey.key.GetPubKey().GetHash();\n+            chainId = bip32MasterKey.key.GetPubKey().GetHash();\n \n             //only one chain per master seed is allowed\n-            if (hdChains.find(masterPubkKeyHash) != hdChains.end() )\n+            CHDChain possibleChain;\n+            if (GetChain(chainId, possibleChain) && possibleChain.IsValid())\n                 throw std::runtime_error(\"CWallet::SetHDChainPath(): Only one chain per masterseed is allowed.\");\n \n-            if (!AddMasterSeed(masterPubkKeyHash, vSeed))\n+            if (!AddMasterSeed(chainId, vSeed))\n                 throw std::runtime_error(\"CWallet::SetHDChainPath(): Could not store master seed.\");\n \n-            newChain.chainPath = newChainPath;\n-            newChain.chainHash = masterPubkKeyHash;\n-            hdChains[newChain.chainHash] = newChain;\n-\n-            if (!CWalletDB(strWalletFile).WriteHDChainPath(masterPubkKeyHash, newChainPath))\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing chainpath failed.\");\n+            //keep the master pubkeyhash for chain identifying\n+            newChain.chainHash = chainId;\n \n             if (IsCrypted())\n             {\n                 std::vector<unsigned char> vchCryptedSecret;\n-                GetCryptedMasterSeed(masterPubkKeyHash, vchCryptedSecret);\n+                GetCryptedMasterSeed(chainId, vchCryptedSecret);\n \n-                if (!CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(masterPubkKeyHash, vchCryptedSecret))\n+                if (!CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(chainId, vchCryptedSecret))\n                     throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing hdmasterseed failed!\");\n             }\n             else\n             {\n-                if (!CWalletDB(strWalletFile).WriteHDMasterSeed(masterPubkKeyHash, vSeed))\n+                if (!CWalletDB(strWalletFile).WriteHDMasterSeed(chainId, vSeed))\n                     throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing cryted hdmasterseed failed!\");\n             }\n \n             //set active hd chain\n-            activeHDChain = masterPubkKeyHash;\n-            if (!CWalletDB(strWalletFile).WriteHDAchiveChain(masterPubkKeyHash))\n+            activeHDChain = chainId;\n+            if (!CWalletDB(strWalletFile).WriteHDAchiveChain(chainId))\n                 throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing active hd chain failed!\");\n \n             parentKey = bip32MasterKey;\n@@ -3007,7 +3019,7 @@ bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyO\n     AssertLockHeld(cs_wallet);\n \n     CHDPubKey newHdPubKey;\n-    if (!DeriveHDPubKeyAtIndex(chainId, newHdPubKey, index, internal))\n+    if (!DeriveHDPubKeyAtIndex(chainID, newHdPubKey, nIndex, internal))\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Deriving child key faild!\");\n \n     // Create new metadata\n@@ -3019,32 +3031,35 @@ bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyO\n     if (!LoadHDPubKey(newHdPubKey))\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Add key to keystore failed!\");\n \n-    if (!CWalletDB(strWalletFile).WriteHDPubKey(newPubKey, mapKeyMetadata[newHdPubKey.pubkey.GetID()]))\n+    if (!CWalletDB(strWalletFile).WriteHDPubKey(newHdPubKey, mapKeyMetadata[newHdPubKey.pubkey.GetID()]))\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Writing pubkey failed!\");\n     \n     pubKeyOut = newHdPubKey.pubkey;\n     return true;\n }\n \n-bool CWallet::HDGetNextChildPubKey(const HDChainID& chainId, CPubKey &pubKeyOut, std::string& newKeysChainpath, bool internal)\n+bool CWallet::HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOut, std::string& newKeysChainpath, bool internal)\n {\n+    AssertLockHeld(cs_wallet);\n+\n     CHDChain chain;\n-    if (!GetChain(chainId, chain) || !chain.IsValid())\n+    HDChainID chainID = chainIDIn;\n+    if (chainID.IsNull())\n+        chainID = activeHDChain;\n+\n+    if (!GetChain(chainID, chain) || !chain.IsValid())\n         throw std::runtime_error(\"CWallet::HDGetNextChildPubKey(): Selected chain is not vailid!\");\n \n-    unsigned int nextIndex = GetNextChildIndex(chainHash, internal);\n-    if (!HDGetChildPubKeyAtIndex(chainHash, pubKeyOut, nextIndex, internal))\n+    unsigned int nextIndex = GetNextChildIndex(chainID, internal);\n+    if (!HDGetChildPubKeyAtIndex(chainID, pubKeyOut, nextIndex, internal))\n         return false;\n \n     newKeysChainpath = chain.chainPath;\n     boost::replace_all(newKeysChainpath, \"c\", itostr(internal)); //replace the chain switch index\n-    hdPubKeyOut.chainPath += \"/\"+itostr(nextIndex);\n-}\n+    newKeysChainpath += \"/\"+itostr(nextIndex);\n \n-std::string CWallet::HDGetChainPath()\n-{\n-    AssertLockHeld(cs_wallet);\n-    return hdChains[activeHDChain].chainPath;\n+    LogPrintf(\"hdwallet\", \"new key %s\\n\", CBitcoinAddress(pubKeyOut.GetID()).ToString());\n+    return true;\n }\n \n bool CWallet::EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn)\n@@ -3067,6 +3082,27 @@ bool CWallet::EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn)\n     return true;\n }\n \n+bool CWallet::HDSetActiveChainID(const HDChainID& chainID, bool check)\n+{\n+    LOCK(cs_wallet);\n+    CHDChain chainOut;\n+\n+    //do the chainID check optional because we need a way of setting the chainID before the acctual chain is loaded into the memory\n+    //this is becuase of the way we load the chains from the wallet.dat\n+    if (check && !GetChain(chainID, chainOut)) //TODO: implement FindChain() to avoild copy of CHDChain\n+        return false;\n+\n+    activeHDChain = chainID;\n+    return true;\n+}\n+\n+bool CWallet::HDGetActiveChainID(HDChainID& chainID)\n+{\n+    LOCK(cs_wallet);\n+    chainID = activeHDChain;\n+    return true;\n+}\n+\n /* END BIP32 Stack */\n \n "
      },
      {
        "sha": "51732c2b76a98cdaa47cddf412d298ab2948a9f4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 38,
        "deletions": 4,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -490,6 +490,9 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n \n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n+    //! state: current active hd chain\n+    HDChainID activeHDChain;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -596,7 +599,6 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n-\n     //! Load metadata (used by LoadWallet)\n     bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n@@ -786,13 +788,24 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n     /** Set whether this wallet broadcasts transactions. */\n     void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }\n \n-    uint256 activeHDChain;\n \n-    bool HDSetChainPath(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, const CExtPubKey& pubMasterKey, bool overwrite = false);\n+    //!adds a hd chain of keys to the wallet\n+    bool HDSetChainPath(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, bool overwrite = false);\n+\n+    //!gets a child key from the internal or external chain at given index\n     bool HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal = false);\n+\n+    //!get next free child key\n     bool HDGetNextChildPubKey(const HDChainID& chainId, CPubKey &pubKeyOut, std::string& newKeysChainpathOut, bool internal = false);\n+\n+    //!encrypt your master seeds\n     bool EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn);\n-    std::string HDGetChainPath();\n+\n+    //!set the active chain of keys\n+    bool HDSetActiveChainID(const HDChainID& chainID, bool check = true);\n+\n+    //!set the active chain of keys\n+    bool HDGetActiveChainID(HDChainID& chainID);\n };\n \n /** A key allocated from the key pool. */\n@@ -814,6 +827,27 @@ class CReserveKey : public CReserveScript\n         ReturnKey();\n     }\n \n+    void ReturnKey();\n+    virtual bool GetReservedKey(CPubKey &pubkey);\n+    void KeepKey();\n+};\n+\n+class CHDReserveKey : public CReserveKey\n+{\n+protected:\n+    CPubKey vchPubKey;\n+    HDChainID chainID;\n+public:\n+    CHDReserveKey(CWallet* pwalletIn) : CReserveKey(pwalletIn)\n+    {\n+        pwalletIn->HDGetActiveChainID(chainID);\n+    }\n+\n+    ~CHDReserveKey()\n+    {\n+        ReturnKey();\n+    }\n+\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey);\n     void KeepKey();"
      },
      {
        "sha": "3f84c67206601c26d098c5f213c07fbbd140f92b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 46,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -153,25 +153,7 @@ bool CWalletDB::EraseHDMasterSeed(const uint256& hash)\n     return Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n }\n \n-bool CWalletDB::WriteHDExternalPubKey(const uint256& hash, const CExtPubKey &externalPubKey)\n-{\n-    nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"hdexternalpubkey\"), hash), externalPubKey);\n-}\n-\n-bool CWalletDB::WriteHDInternalPubKey(const uint256& hash, const CExtPubKey &internalPubKey)\n-{\n-    nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"hdinternalpubkey\"), hash), internalPubKey);\n-}\n-\n-bool CWalletDB::WriteHDChainPath(const uint256& hash, const std::string &chainPath)\n-{\n-    nWalletDBUpdated++;\n-    return Write(std::make_pair(std::string(\"hdchainpath\"), hash), chainPath);\n-}\n-\n-bool CWalletDB::WriteHDChainPath(const CHDChain &chain)\n+bool CWalletDB::WriteHDChain(const CHDChain &chain)\n {\n     nWalletDBUpdated++;\n     return Write(std::make_pair(std::string(\"hdchain\"), chain.chainHash), chain);\n@@ -665,32 +647,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n         }\n-        else if (strType == \"hdexternalpubkey\")\n-        {\n-            uint256 chainHash;\n-            CExtPubKey extPubKey;\n-            ssKey >> chainHash;\n-            ssValue >> extPubKey;\n-\n-            pwallet->hdChains[chainHash].externalPubKey = extPubKey;\n-        }\n-        else if (strType == \"hdinternalpubkey\")\n-        {\n-            uint256 chainHash;\n-            CExtPubKey extPubKey;\n-            ssKey >> chainHash;\n-            ssValue >> extPubKey;\n-\n-            pwallet->hdChains[chainHash].internalPubKey = extPubKey;\n-        }\n-        else if (strType == \"hdchainpath\")\n-        {\n-            uint256 chainHash;\n-            std::string chainPath;\n-            ssKey >> chainHash;\n-            ssValue >> chainPath;\n-            pwallet->hdChains[chainHash].chainPath = chainPath;\n-        }\n         else if (strType == \"hdmasterseed\")\n         {\n             uint256 masterPubKeyHash;\n@@ -709,7 +665,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"hdactivechain\")\n         {\n-            ssValue >> pwallet->activeHDChain;\n+            HDChainID chainID;\n+            ssValue >> chainID;\n+            pwallet->HDSetActiveChainID(chainID, false); //don't check if the chain exists because this record could come in before the CHDChain object itself\n         }\n         else if (strType == \"hdpubkey\")\n         {"
      },
      {
        "sha": "375fde1b3bbd7e75f7e22f181c17499c614a32d2",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5bf17c9b402b5b1bd83cfd79056045956c0700a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "patch": "@@ -55,7 +55,7 @@ class CKeyMetadata\n     }\n     CKeyMetadata(int64_t nCreateTime_)\n     {\n-        SetNull();\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n         nCreateTime = nCreateTime_;\n     }\n \n@@ -104,14 +104,8 @@ class CWalletDB : public CDB\n     bool WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed);\n     bool WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret);\n     bool EraseHDMasterSeed(const uint256& hash);\n-\n-    bool WriteHDExternalPubKey(const uint256& hash, const CExtPubKey &externalPubKey);\n-    bool WriteHDInternalPubKey(const uint256& hash, const CExtPubKey &internalPubKey);\n-\n-    bool WriteHDChainPath(const uint256& hash, const std::string &chainPath);\n     bool WriteHDChain(const CHDChain& chain);\n     bool WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta);\n-\n     bool WriteHDAchiveChain(const uint256& hash);\n \n     bool WriteBestBlock(const CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "ca19680907d17fa5fdf667df1f33fd34b36c352e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTE5NjgwOTA3ZDE3ZmE1ZmRmNjY3ZGYxZjMzZmQzNGIzNmMzNTJl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-10T12:38:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:25Z"
      },
      "message": "hdwallet: remove std::string back() and replace it with *rbegin()\n\navoid c++11",
      "tree": {
        "sha": "5e1e47a72160fcb54a08c7eb4484e8076695c57f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e1e47a72160fcb54a08c7eb4484e8076695c57f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca19680907d17fa5fdf667df1f33fd34b36c352e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemalAAoJECnUvLZBb1PsPpQP/jz2dUj/KjJUMM1Tk3sUdDqQ\nqsd6LXCv7Yy4JuWMSumK9inBAhznAoGR8zkmJcIrNRbcTZy2vYhEQQoBXQajsx+t\npqlYpemY9CvzERNbcejMi5BXuGTiGrb1nepMBj3PbsrlhI4fXaQbC+Q287o3FPkG\nhFTOvJ/WZ9eFpc5ZHK/mVFtBE/DX54G1eJ5J2ID+qnKsyKPntKtU1C0nLTjamPxA\n67x3jcg+eRrrdh2iqOocMtJJuVYo5sFYK0McHh5JLwfWAKfKxyVH9H/D05mOJvXw\nn5J8WZY7K43RueFT8Iyd56ucLGp8Df1Hx7tsfcAs2A3RHmgmfocyUdOgZf7ULDU3\niAWjba0v6W279xLQYRBfSn3DA5/l6hz8Ygb4It5SHPg3IuXmUAAuUvrjsyDCjN0N\n8yLy2rzUjtYuiRemYb0bSik+Ri7ntqw+FEtcQIkvLPMSbnlFptRWvD6R79L3+PBJ\nKGvY13XgldGE7YlU/OXmcrvXf7mwZQLLiOkEa/JFFNfAcOhDjQZxb7NJudYv2mBK\nZsrE/+p2yu7nNhT7HEQnJ0j0ZmdsqroiSqFE1bDE8tZYnuOscRfa/hSEcg5g+Kqs\nMkJcDfv6F3MXKD4TAXEDRMjvkmYd3B2eaE8d2J3oAfSWJrLBZkv4eWA1qo/DoTei\n45uDBARygIwBVUYjwc8t\n=mxNJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e1e47a72160fcb54a08c7eb4484e8076695c57f\nparent b5bf17c9b402b5b1bd83cfd79056045956c0700a\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1433939932 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862245 +0100\n\nhdwallet: remove std::string back() and replace it with *rbegin()\n\navoid c++11\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca19680907d17fa5fdf667df1f33fd34b36c352e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca19680907d17fa5fdf667df1f33fd34b36c352e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca19680907d17fa5fdf667df1f33fd34b36c352e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5bf17c9b402b5b1bd83cfd79056045956c0700a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5bf17c9b402b5b1bd83cfd79056045956c0700a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0a355f62b077f8aad48b35b4f1fde083478b99c9",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca19680907d17fa5fdf667df1f33fd34b36c352e/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca19680907d17fa5fdf667df1f33fd34b36c352e/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=ca19680907d17fa5fdf667df1f33fd34b36c352e",
        "patch": "@@ -170,7 +170,7 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n     BOOST_FOREACH(std::string fragment, pathFragments)\n     {\n         bool harden = false;\n-        if (fragment.back() == '\\'')\n+        if (*fragment.rbegin() == '\\'')\n         {\n             harden = true;\n             fragment = fragment.substr(0,fragment.size()-1);"
      },
      {
        "sha": "3472ed9de6b1283e7603a53466e50c1801117a2a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca19680907d17fa5fdf667df1f33fd34b36c352e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca19680907d17fa5fdf667df1f33fd34b36c352e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ca19680907d17fa5fdf667df1f33fd34b36c352e",
        "patch": "@@ -2914,7 +2914,7 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n     boost::to_lower(newChainPath);\n     boost::erase_all(newChainPath, \" \");\n     boost::replace_all(newChainPath, \"h\", \"'\"); //support h instead of ' to allow easy JSON input over cmd line\n-    if (newChainPath.size() > 0 && newChainPath.back() == '/')\n+    if (newChainPath.size() > 0 && *newChainPath.rbegin() == '/')\n         newChainPath.resize(newChainPath.size() - 1);\n \n     std::vector<std::string> pathFragments;\n@@ -2930,7 +2930,7 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n     BOOST_FOREACH(std::string fragment, pathFragments)\n     {\n         bool harden = false;\n-        if (fragment.back() == '\\'')\n+        if (*fragment.rbegin() == '\\'')\n         {\n             harden = true;\n             fragment = fragment.substr(0,fragment.size()-1);"
      }
    ]
  },
  {
    "sha": "c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGM5OGVkOWM4MzI1YmI5YzgxZjcwMjMwZGNkYTU4YTVjOWY3ZjJi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T10:43:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:17:25Z"
      },
      "message": "RPC hdaddchain: add ext master pub/priv key to JSON output",
      "tree": {
        "sha": "e10726fe780cec27ede4c1bf2cc839aa98e73ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e10726fe780cec27ede4c1bf2cc839aa98e73ee5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemalAAoJECnUvLZBb1PsIWsP/A3rG2Fo7N2GHmZn0k0wKwRN\nGTo2v7h2fL7+XZFMZ9n697fuuoWSBC2fhgyJnD+iTsHbXdqhLkfcvRxk4SnJUzjU\nDVtPCnnGLul0q95a6O1y24o/1chBC7yor7PVcbMmtnWURoMHJre0O4KHIGxa4+pr\nr4OOHjoKu0QnWc5aqcSDM7qCqxzZG3STCfgucLw3QwS2J9t5p9ISLYNDLy7G4AtP\ndhC0KPEyJbq3f5maTHGneWlnWjkShQViouKqw6EGAwca/gE26A/MtFxTd7QOnYiS\neeub+8Hcdjpvsr/BsAvb69eWJY+me+apU4JJqJCkwFTIhh5gewZuEb3sF8khEDJ8\nU1MRUzn4FTtakvcEZC+YN7MKv5uF2xTf4QduGro+mI2N4iDD3vvmyP7QKSW+hyGv\nBOD+IZw6k3Jf4YvOrN5rhUqPL/JD0g1D0jwlcN2dCVk4b2px4LTvq4PrXn0WPuG/\nYvNEeCIyFA06NmXjbPczfjaPKOD8+FXiBl8oKhC6yufy6iNDp42yzI+70Yy/CRCP\nYtXZn1uPq1vdm7VfcIm2bgj2BKdOCMBec62FkgsmlAUghjqqK16htG1gqqos7Qwh\nStX9O7ta6rcjXXHEbKPjkVTp43Fe+HJg5hjJhLcXVOV0VPWekdr+3+XU0usyvVEi\ni4WTWQggN3EU2tCtVsf4\n=oeKs\n-----END PGP SIGNATURE-----",
        "payload": "tree e10726fe780cec27ede4c1bf2cc839aa98e73ee5\nparent ca19680907d17fa5fdf667df1f33fd34b36c352e\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1437648187 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862245 +0100\n\nRPC hdaddchain: add ext master pub/priv key to JSON output\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca19680907d17fa5fdf667df1f33fd34b36c352e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca19680907d17fa5fdf667df1f33fd34b36c352e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca19680907d17fa5fdf667df1f33fd34b36c352e"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 30,
      "deletions": 18
    },
    "files": [
      {
        "sha": "ed36806ede150b942de87ad31ccf7c98a0b3a44e",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
        "patch": "@@ -164,7 +164,6 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n     std::vector<std::string> pathFragments;\n     boost::split(pathFragments, chainPath, boost::is_any_of(\"/\"));\n \n-    LogPrintf(\"hdwallet\", \"derive key %s\\n\", chainPath);\n     CExtKey extKey;\n     CExtKey parentKey;\n     BOOST_FOREACH(std::string fragment, pathFragments)\n@@ -203,7 +202,6 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n         }\n     }\n     keyOut = parentKey.key;\n-    LogPrintf(\"hdwallet\", \"derived key with adr: %s\\n\", CBitcoinAddress(keyOut.GetPubKey().GetID()).ToString());\n     return true;\n }\n "
      },
      {
        "sha": "d8b2171ea302e096af9607193602aea6fbdf7538",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
        "patch": "@@ -2546,10 +2546,21 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n         fGenerateMasterSeed = false;\n     }\n \n-    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, chainId);\n+    std::string xpubOut;\n+    std::string xprivOut;\n+\n+    pwalletMain->HDAddHDChain(chainPath, fGenerateMasterSeed, vSeed, chainId, xprivOut, xpubOut);\n     if (fGenerateMasterSeed)\n         result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+\n+    result.push_back(Pair(\"extended_master_pubkey\", xpubOut));\n+    result.push_back(Pair(\"extended_master_privkey\", xprivOut));\n     result.push_back(Pair(\"chainid\", chainId.GetHex()));\n+\n+    memory_cleanse(&vSeed[0], bip32MasterSeedLength);\n+    memory_cleanse(&xprivOut[0], xpubOut.size());\n+    memory_cleanse(&xpubOut[0], xpubOut.size());\n+\n     return result;\n }\n "
      },
      {
        "sha": "80db891f6c8a21c462b36d301b6fde5ca02abfb1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
        "patch": "@@ -2894,21 +2894,21 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n \n const unsigned int HD_MAX_DEPTH = 20;\n \n-bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, bool overwrite)\n+bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &xprivOut, std::string &xpubOut, bool overwrite)\n {\n     LOCK(cs_wallet);\n \n     if (IsLocked())\n         return false;\n \n     if (chainPathIn[0] != 'm')\n-        throw std::runtime_error(\"CWallet::SetHDChainPath(): Non masterkey chainpaths are not allowed.\");\n+        throw std::runtime_error(\"CWallet::HDAddHDChain(): Non masterkey chainpaths are not allowed.\");\n \n     if (chainPathIn.find_first_of(\"c\", 1) == std::string::npos)\n-        throw std::runtime_error(\"CWallet::SetHDChainPath(): 'c' (internal/external chain selection) is requires in the given chainpath.\");\n+        throw std::runtime_error(\"CWallet::HDAddHDChain(): 'c' (internal/external chain selection) is requires in the given chainpath.\");\n \n     if (chainPathIn.find_first_not_of(\"0123456789'/mch\", 0) != std::string::npos)\n-        throw std::runtime_error(\"CWallet::SetHDChainPath(): Invalid chainpath.\");\n+        throw std::runtime_error(\"CWallet::HDAddHDChain(): Invalid chainpath.\");\n \n     std::string newChainPath = chainPathIn;\n     boost::to_lower(newChainPath);\n@@ -2921,7 +2921,7 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n     boost::split(pathFragments, newChainPath, boost::is_any_of(\"/\"));\n \n     if (pathFragments.size() > HD_MAX_DEPTH)\n-        throw std::runtime_error(\"CWallet::SetHDChainPath(): Max chain depth (\"+itostr(HD_MAX_DEPTH)+\") exceeded!\");\n+        throw std::runtime_error(\"CWallet::HDAddHDChain(): Max chain depth (\"+itostr(HD_MAX_DEPTH)+\") exceeded!\");\n \n     int64_t nCreationTime = GetTime();\n     CHDChain newChain(nCreationTime);\n@@ -2952,17 +2952,22 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n             CExtKey bip32MasterKey;\n             bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n \n+            CExtPubKey masterPubKey = bip32MasterKey.Neuter();\n             CBitcoinExtKey b58key;\n+            CBitcoinExtPubKey b58pubkey;\n             b58key.SetKey(bip32MasterKey);\n-            chainId = bip32MasterKey.key.GetPubKey().GetHash();\n+            b58pubkey.SetKey(masterPubKey);\n+            xprivOut = b58key.ToString();\n+            xpubOut = b58pubkey.ToString();\n+            chainId = masterPubKey.pubkey.GetHash();\n \n             //only one chain per master seed is allowed\n             CHDChain possibleChain;\n             if (GetChain(chainId, possibleChain) && possibleChain.IsValid())\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Only one chain per masterseed is allowed.\");\n+                throw std::runtime_error(\"CWallet::HDAddHDChain(): Only one chain per masterseed is allowed.\");\n \n             if (!AddMasterSeed(chainId, vSeed))\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Could not store master seed.\");\n+                throw std::runtime_error(\"CWallet::HDAddHDChain(): Could not store master seed.\");\n \n             //keep the master pubkeyhash for chain identifying\n             newChain.chainHash = chainId;\n@@ -2973,18 +2978,18 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n                 GetCryptedMasterSeed(chainId, vchCryptedSecret);\n \n                 if (!CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(chainId, vchCryptedSecret))\n-                    throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing hdmasterseed failed!\");\n+                    throw std::runtime_error(\"CWallet::HDAddHDChain(): Writing hdmasterseed failed!\");\n             }\n             else\n             {\n                 if (!CWalletDB(strWalletFile).WriteHDMasterSeed(chainId, vSeed))\n-                    throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing cryted hdmasterseed failed!\");\n+                    throw std::runtime_error(\"CWallet::HDAddHDChain(): Writing cryted hdmasterseed failed!\");\n             }\n \n             //set active hd chain\n             activeHDChain = chainId;\n             if (!CWalletDB(strWalletFile).WriteHDAchiveChain(chainId))\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing active hd chain failed!\");\n+                throw std::runtime_error(\"CWallet::HDAddHDChain(): Writing active hd chain failed!\");\n \n             parentKey = bip32MasterKey;\n         }\n@@ -2998,7 +3003,7 @@ bool CWallet::HDSetChainPath(const std::string& chainPathIn, bool generateMaster\n             AddChain(newChain);\n \n             if (!CWalletDB(strWalletFile).WriteHDChain(newChain))\n-                throw std::runtime_error(\"CWallet::SetHDChainPath(): Writing new chain failed!\");\n+                throw std::runtime_error(\"CWallet::HDAddHDChain(): Writing new chain failed!\");\n         }\n         else\n         {\n@@ -3057,8 +3062,6 @@ bool CWallet::HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOu\n     newKeysChainpath = chain.chainPath;\n     boost::replace_all(newKeysChainpath, \"c\", itostr(internal)); //replace the chain switch index\n     newKeysChainpath += \"/\"+itostr(nextIndex);\n-\n-    LogPrintf(\"hdwallet\", \"new key %s\\n\", CBitcoinAddress(pubKeyOut.GetID()).ToString());\n     return true;\n }\n "
      },
      {
        "sha": "18386f2d357749cea433af8251e9a890722d9a73",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
        "patch": "@@ -790,7 +790,7 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n \n \n     //!adds a hd chain of keys to the wallet\n-    bool HDSetChainPath(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, bool overwrite = false);\n+    bool HDAddHDChain(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &xprivOut, std::string &xpubOut, bool overwrite = false);\n \n     //!gets a child key from the internal or external chain at given index\n     bool HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal = false);"
      }
    ]
  },
  {
    "sha": "4ada7d6add583e4fd4d37e701dbb5270356a5107",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWRhN2Q2YWRkNTgzZTRmZDRkMzdlNzAxZGJiNTI3MDM1NmE1MTA3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T10:43:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:18:29Z"
      },
      "message": "add hdwallet rpc test",
      "tree": {
        "sha": "da1d1b7f3ae7bcfbe745a7d2a7852b4b0cc5ecd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1d1b7f3ae7bcfbe745a7d2a7852b4b0cc5ecd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ada7d6add583e4fd4d37e701dbb5270356a5107",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemblAAoJECnUvLZBb1PsZjMQAKL/Cnod9LjxLDmDC6SNViSw\nCfqw9VsUMU9DePPTCMkY2tSE74YJlYR7p5JiqwpDQOsl7DFEAGrMg9FMQpmGBGfS\noHAmRAQziPYKjY4y7aoSOq630wAsoKrF9fFujGEaKMDH2zj+yXCt3UOYshEN1n0j\nB64kADV3hdf0FLpk4297aaHDFD14Sl2JVbuz4WzudzlgyjrCuwTkoeRLJL1RnWdX\nhlFng1v7zWHQBv08VBZ3zBJ/hzl7BdhJELHiQMtSmChfAM0lFJryjcT2C4gnokbp\nGDTkpaWt3rm2PKlhGhjNt7ABztl0CwDsRuP0CoGxfe6AtFx0gQNnrzuRTbdOngjg\nQ5sQJR24YQ+6uZGDNm956wi37npCjo93GO8wbQInyfYbyD6KJw6z5EQfXzx7r2Hb\nitDCsQnGjoHEGcMvfuenxAYA+sdnbxVbAmYUmMWj3yoEp3jbAgrG7TIn714hrr+G\nnJEtfOFkf40eO778OpEXi1Gs3EMyhHAxI5F3VMQDiAlWNKfxY4UXHnwedeSnvbZJ\nUcRcedok4pI/y/iNcsNveybVI5ARQpZM8rtmmK+GIwxfHAXeUHpIkuzkpDJ3YM5w\na8ecUL3Sitm5NSPkyH5O6SwGB6S9qq0D0IhxfsSpiw8OuH/i/V6guSzE1cTOHPkz\nzqZmCqsX9RT1aiuRlC+c\n=i1Mk\n-----END PGP SIGNATURE-----",
        "payload": "tree da1d1b7f3ae7bcfbe745a7d2a7852b4b0cc5ecd8\nparent c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1437648224 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862309 +0100\n\nadd hdwallet rpc test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ada7d6add583e4fd4d37e701dbb5270356a5107",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ada7d6add583e4fd4d37e701dbb5270356a5107",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ada7d6add583e4fd4d37e701dbb5270356a5107/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0c98ed9c8325bb9c81f70230dcda58a5c9f7f2b"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 126,
      "deletions": 0
    },
    "files": [
      {
        "sha": "774a8c6491c5d1839cb54ee609a44fc25d708eeb",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ada7d6add583e4fd4d37e701dbb5270356a5107/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ada7d6add583e4fd4d37e701dbb5270356a5107/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=4ada7d6add583e4fd4d37e701dbb5270356a5107",
        "patch": "@@ -75,6 +75,7 @@\n #Tests\n testScripts = [\n     'wallet.py',\n+    'hdwallet.py',\n     'listtransactions.py',\n     'receivedby.py',\n     'mempool_resurrect_test.py',"
      },
      {
        "sha": "d3d956b39477ccec846f2e81ec8379e4807395d2",
        "filename": "qa/rpc-tests/hdwallet.py",
        "status": "added",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ada7d6add583e4fd4d37e701dbb5270356a5107/qa/rpc-tests/hdwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ada7d6add583e4fd4d37e701dbb5270356a5107/qa/rpc-tests/hdwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/hdwallet.py?ref=4ada7d6add583e4fd4d37e701dbb5270356a5107",
        "patch": "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Exercise the wallet.  Ported from wallet.sh.  \n+# Does the following:\n+#   a) creates 3 nodes, with an empty chain (no blocks).\n+#   b) node0 mines a block\n+#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none. \n+#   d) node0 sends 21 btc to node2, in two transactions (11 btc, then 10 btc).\n+#   e) node0 mines a block, collects the fee on the second transaction\n+#   f) node1 mines 100 blocks, to mature node0's just-mined block\n+#   g) check that node0 has 100-21, node2 has 21\n+#   h) node0 should now have 2 unspent outputs;  send these to node2 via raw tx broadcast by node1\n+#   i) have node1 mine a block\n+#   j) check balances - node0 should have 0, node2 should have 100\n+#   k) test ResendWalletTransactions - create transactions, startup fourth node, make sure it syncs\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class WalletTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        \n+\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        \n+        #connect to a local machine for debugging\n+        # url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n+        # proxy = AuthServiceProxy(url)\n+        # proxy.url = url # store URL on proxy for info\n+        # self.nodes.append(proxy)\n+        \n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+\n+        encrypt = True\n+        self.nodes[0].generate(1)\n+\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+        assert_equal(walletinfo['balance'], 0)\n+        self.nodes[0].generate(100)\n+        self.sync_all()\n+\n+        self.nodes[2].hdaddchain('default', 'f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a')\n+        adr = self.nodes[2].hdgetaddress()\n+        assert_equal(adr['address'], \"n1hBoYyGjqkbC8kdKNAejuaNR19eoYCSoi\");\n+        assert_equal(adr['chainpath'], \"m/44'/0'/0'/0/0\");\n+        \n+        adr2 = self.nodes[2].hdgetaddress()\n+        assert_equal(adr2['address'], \"mvFePVSFGELgCDyLYrTJJ3tijnyeB9UF6p\");\n+        assert_equal(adr2['chainpath'], \"m/44'/0'/0'/0/1\");\n+\n+        self.nodes[0].sendtoaddress(adr['address'], 11);\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        walletinfo = self.nodes[2].getwalletinfo()\n+        assert_equal(walletinfo['balance'], 11)\n+            \n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 1)\n+        stop_node(self.nodes[2], 2)\n+\n+        #try to cover over master seed\n+        os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n+        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        \n+        if encrypt:\n+            print \"encrypt wallet\"\n+            self.nodes[2].encryptwallet(\"test\")\n+            bitcoind_processes[2].wait()\n+            del bitcoind_processes[2]\n+            \n+            self.nodes[2] = start_node(2, self.options.tmpdir)\n+            self.nodes[2].walletpassphrase(\"test\", 100)\n+            \n+        self.nodes[2].hdaddchain('default', 'f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a')\n+        #generate address\n+        adr = self.nodes[2].hdgetaddress()\n+        assert_equal(adr['address'], \"n1hBoYyGjqkbC8kdKNAejuaNR19eoYCSoi\"); #must be deterministic\n+        walletinfo = self.nodes[2].getwalletinfo()\n+        assert_equal(walletinfo['balance'], 0) #balance should be o beause we need to rescan first\n+\n+        stop_node(self.nodes[2], 2)\n+        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[1] = start_node(1, self.options.tmpdir)\n+        self.nodes[2] = start_node(2, self.options.tmpdir, ['-rescan=1'])\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        \n+        walletinfo = self.nodes[2].getwalletinfo()\n+        assert_equal(walletinfo['balance'], 11) #after rescan we should have detected the spendable coins\n+\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        balanceOld = walletinfo['balance'];\n+        \n+        if encrypt:\n+            self.nodes[2].walletpassphrase(\"test\", 100)\n+            \n+        self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 2.0); #try to send (sign) with HD keymaterial\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_equal(walletinfo['balance'], balanceOld+Decimal('52.00000000'))\n+\n+if __name__ == '__main__':\n+    WalletTest ().main ()"
      }
    ]
  },
  {
    "sha": "f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2RjNGJkYmYzMDFkYjcxMmE5YTI1YTY0N2FmZWM1ZGE2YmQ5ZDMw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T10:46:29Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:18:29Z"
      },
      "message": "fix comment and help typos",
      "tree": {
        "sha": "136f986458d4ac39bafe4586ac6e3eb9f033c945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/136f986458d4ac39bafe4586ac6e3eb9f033c945"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemblAAoJECnUvLZBb1PskHUQAIQQADm5hB2wFn3QC2zbXQe+\nlJxPWmeypUkR0WjGPfcs8xyLkDRv6gKjEQP3xONBJmWUEUGmTL/KWjFU+F7pT825\nKCpSAscTdR0Y4WkwJmDmT39EDgk68VDfZheKqzMSK3glw2BlkFRrYHIJstGdZiVH\nPxl2ycxzJOWr0D+Kl5l/TPDj7IiHtv57pX89CD5C0snXX5lXBpMDBb5HbNQtiWbE\nt0McMHRjSFagoPZsnw8Sp9QUGp61Kpxcd8RQenxNcqKJ1orIKU3UQWKNwXTd99Xn\nN6Y+sSWE7nZPhtLWBva59PCU2Z+QL8FXd9uvPVDkIHdn+TZ2FArKejzbbqLfIlyh\nqWX265YSs55yjU23X384/KbfQ9wJziLNkvLXgPx0zGSRbR86m24RCVO3NnEA363G\nzRReA4UmIjjY1JT4KzqDH6VaeyvouJDKWqBckzT5Qosuat8wBcUEu+mAqTxY/Rsx\nLU0QMVhvPZFTeNBemlwHnHm5YeLegUy5TF0l6ypkPNkRwNSnYNiV/gqHW2RQE011\n07+AMObrEBNuety0lmAWbuHi4HFQFn++9GX89KqXlFaNNAv5sTU9g1Xn9/uXwLIX\ne6Ght1QXPMOC6s8IJ2hYU+Aaa7b/xwqqHAOaCyqu41voV3o9EAXbHmqZbsfktMoF\nzLPWgaC4PeKwfcv7drmM\n=S8Ek\n-----END PGP SIGNATURE-----",
        "payload": "tree 136f986458d4ac39bafe4586ac6e3eb9f033c945\nparent 4ada7d6add583e4fd4d37e701dbb5270356a5107\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1437648389 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862309 +0100\n\nfix comment and help typos\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dc4bdbf301db712a9a25a647afec5da6bd9d30/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ada7d6add583e4fd4d37e701dbb5270356a5107",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ada7d6add583e4fd4d37e701dbb5270356a5107",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ada7d6add583e4fd4d37e701dbb5270356a5107"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "173736668cbc8f3d8ac1952ac5926a2d38974258",
        "filename": "src/wallet/hdkeystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7dc4bdbf301db712a9a25a647afec5da6bd9d30/src/wallet/hdkeystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7dc4bdbf301db712a9a25a647afec5da6bd9d30/src/wallet/hdkeystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.h?ref=f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
        "patch": "@@ -18,7 +18,7 @@ class CHDPubKey\n public:\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n-    CPubKey pubkey; //the acctual pubkey\n+    CPubKey pubkey; //the actual pubkey\n     unsigned int nChild; //child index\n     HDChainID chainHash; //hash of the chains master pubkey\n     std::string chainPath; //individual key chainpath like m/44'/0'/0'/0/1\n@@ -147,7 +147,7 @@ class CHDKeyStore : public CCryptoKeyStore\n     //!writes a chain defined by given chainId to chainOut, returns false if not found\n     bool GetChain(const HDChainID chainId, CHDChain& chainOut) const;\n \n-    //!Derives a hdpubkey object in a given chain defined by chainId from the existing external oder internal chain root pub key\n+    //!Derives a hdpubkey object in a given chain defined by chainId from the existing external or internal chain root pub key\n     bool DeriveHDPubKeyAtIndex(const HDChainID chainId, CHDPubKey& hdPubKeyOut, unsigned int nIndex, bool internal) const;\n \n     /**"
      },
      {
        "sha": "b7929f84d87b9252f05482e3beae458770a16471",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7dc4bdbf301db712a9a25a647afec5da6bd9d30/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7dc4bdbf301db712a9a25a647afec5da6bd9d30/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
        "patch": "@@ -2514,9 +2514,9 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n                             \"}\\n\"\n \n                             \"\\nExamples\\n\"\n-                            + HelpExampleCli(\"hdaddchain\", \"set\")\n-                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n-                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleCli(\"hdaddchain\", \"\")\n+                            + HelpExampleCli(\"hdaddchain\", \"m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"m/44'/0'/0'/c/k\")\n                             );\n \n     UniValue result(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "d0eebc011c543b99273ab7807211270dc5dbc213",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGVlYmMwMTFjNTQzYjk5MjczYWI3ODA3MjExMjcwZGM1ZGJjMjEz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T19:03:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:18:29Z"
      },
      "message": "hdaddchain: support for creating a chain of key with an existing master private key",
      "tree": {
        "sha": "6e65773e42a26d24a9fb95efd56678ea93573d4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e65773e42a26d24a9fb95efd56678ea93573d4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0eebc011c543b99273ab7807211270dc5dbc213",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemblAAoJECnUvLZBb1Ps3mEP/3L9/N6Xm53VoBzD4ZJySCAt\n2BG9/nAM975HyUdDnuG+GJwOhFDdS5UjIz+DmbVK+9LTQa8YG0k7V21Cn5AFIEbV\nZ9Jl7eOS6f+7YTyGcLwp4ZCXWmg+Ccn3cwwj7y7EeLwPkk5FrUblTwdMsSiPAXrs\n9IFenJyxw13xBfpRVwLROHWDczOcMtNx/YWWLGTcHdqRB9rzVMFww8v+dRBbd2vC\nwf0VnGS7/gtr9D9YDn5kWbQ6Xc5yumKtZ29JuLi5ZGB+1djM2zP8AvoDTV1TMxT5\nVbn1CfPFFp3KNoPPJbdMOzUOn474y6WwOtT57moiNwzhnTuaJPRfWf/NJ+KwWVaX\nPjc98NF5LwhpUKG2Wd3vv3BRjtzoWb4OwkjSb286leGngMBGk321PoS11vyB0tA/\nu7JfbdIX8mQdTMuJyajnSRHomU5KnjtSzOY146NyLvvKxrUvDsVkekM0xn/oTRyb\nH11QyQNqeuCx8X3iOgZXnDNd7q2wsawDpkF8xw4Lx2uDBIScGcpOndA9vMsPVPwI\n9IHIh9iTjFVMvnOg+qel6iBWEf9XXOKN8q3/S4cxxZWzKALRE4IVnBfZrn4idN5b\nJNesechQbtS+cyZQg3xryUmSFH65hXVXufQvL9VpQ2iPLY9JS61L5yZilClERm3o\n6dAwy88FwoF6IvL25flk\n=R1LM\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e65773e42a26d24a9fb95efd56678ea93573d4a\nparent f7dc4bdbf301db712a9a25a647afec5da6bd9d30\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1437678180 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862309 +0100\n\nhdaddchain: support for creating a chain of key with an existing master private key\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0eebc011c543b99273ab7807211270dc5dbc213",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0eebc011c543b99273ab7807211270dc5dbc213",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0eebc011c543b99273ab7807211270dc5dbc213/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dc4bdbf301db712a9a25a647afec5da6bd9d30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dc4bdbf301db712a9a25a647afec5da6bd9d30"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 66,
      "deletions": 28
    },
    "files": [
      {
        "sha": "31f187624cb7809186cc8f1248fa6d1c3949b9f3",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0eebc011c543b99273ab7807211270dc5dbc213/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0eebc011c543b99273ab7807211270dc5dbc213/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=d0eebc011c543b99273ab7807211270dc5dbc213",
        "patch": "@@ -164,7 +164,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n     CBitcoinExtKeyBase() {}\n };\n \n-typedef CBitcoinExtKeyBase<CExtKey, 74, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n-typedef CBitcoinExtKeyBase<CExtPubKey, 74, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n+typedef CBitcoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n+typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "5253cdf2cc33c2ab635557562e321348ebab89e4",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0eebc011c543b99273ab7807211270dc5dbc213/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0eebc011c543b99273ab7807211270dc5dbc213/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=d0eebc011c543b99273ab7807211270dc5dbc213",
        "patch": "@@ -291,7 +291,7 @@ void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n     memcpy(chaincode.begin(), code+9, 32);\n-    key.Set(code+42, code+BIP32_EXTKEY_SIZE, true);\n+    key.Set(code+42, code+74, true);\n }\n \n bool ECC_InitSanityCheck() {"
      },
      {
        "sha": "6d699d03479fd20ee619e6ea4f64ab7d162eeab6",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0eebc011c543b99273ab7807211270dc5dbc213/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0eebc011c543b99273ab7807211270dc5dbc213/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=d0eebc011c543b99273ab7807211270dc5dbc213",
        "patch": "@@ -88,7 +88,6 @@ void RunTest(const TestVector &test) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);\n-\n         // Test private key\n         CBitcoinExtKey b58key; b58key.SetKey(key);\n         BOOST_CHECK(b58key.ToString() == derive.prv);"
      },
      {
        "sha": "4dbc6468907a9aa9d9087c0eca1909862003c96d",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=d0eebc011c543b99273ab7807211270dc5dbc213",
        "patch": "@@ -184,7 +184,14 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n             if (!GetMasterSeed(hdPubKey.chainHash, masterSeed))\n                 return false;\n \n-            bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n+            if (masterSeed.size() == BIP32_EXTKEY_SIZE)\n+            {\n+                //if the seed size matches the BIP32_EXTKEY_SIZE, we assume its a encoded ext priv key\n+                bip32MasterKey.Decode(&masterSeed[0]);\n+            }\n+            else\n+                bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n+\n             parentKey = bip32MasterKey;\n         }\n         else if (fragment == \"c\")"
      },
      {
        "sha": "08635741140c04e9f8b9752aed6242caec15179f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 11,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d0eebc011c543b99273ab7807211270dc5dbc213",
        "patch": "@@ -2502,12 +2502,13 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n \n     if (fHelp)\n         throw runtime_error(\n-                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex | master_priv_key>)\\n\"\n                             \"\\nAdds a HD/Bip32 chain \\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n                             \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n                             \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"2. master_priv_key  (string/base58check, optional) will import the given extended master private key for this chain of keys\\n\"\n                             \"\\nResult\\n\"\n                             \"{\\n\"\n                             \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n@@ -2532,22 +2533,32 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n     if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n         chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n \n+    std::string xpubOut;\n+    std::string xprivOut;\n+\n     if (params.size() > 1 && params[1].isStr())\n     {\n-        if (!IsHex(params[1].get_str()))\n-            throw runtime_error(\"HD master seed must encoded in hex\");\n+        if (params[1].get_str().size() > 32)\n+        {\n+            //assume it's a base58check encoded key\n+            xprivOut = params[1].get_str();\n+        }\n+        else\n+        {\n+            if (!IsHex(params[1].get_str()))\n+                throw runtime_error(\"HD master seed must be encoded in hex\");\n \n-        std::vector<unsigned char> seed = ParseHex(params[1].get_str());\n-        if (seed.size() != bip32MasterSeedLength)\n-            throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n+            std::vector<unsigned char> seed = ParseHex(params[1].get_str());\n+            if (seed.size() != bip32MasterSeedLength)\n+                throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n \n-        memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n-        memory_cleanse(&seed[0], bip32MasterSeedLength);\n-        fGenerateMasterSeed = false;\n+            memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n+            memory_cleanse(&seed[0], bip32MasterSeedLength);\n+            fGenerateMasterSeed = false;\n+        }\n     }\n \n-    std::string xpubOut;\n-    std::string xprivOut;\n+\n \n     pwalletMain->HDAddHDChain(chainPath, fGenerateMasterSeed, vSeed, chainId, xprivOut, xpubOut);\n     if (fGenerateMasterSeed)"
      },
      {
        "sha": "c3b3b8a08b3e924af718ad065b64100f67b47487",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 11,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d0eebc011c543b99273ab7807211270dc5dbc213",
        "patch": "@@ -2894,7 +2894,7 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n \n const unsigned int HD_MAX_DEPTH = 20;\n \n-bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &xprivOut, std::string &xpubOut, bool overwrite)\n+bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &strBase58ExtPrivKey, std::string &strBase58ExtPubKey, bool overwrite)\n {\n     LOCK(cs_wallet);\n \n@@ -2938,27 +2938,47 @@ bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster,\n \n         if (fragment == \"m\")\n         {\n+            CExtKey bip32MasterKey;\n+\n             //generate a master key seed\n             //currently seed size is fixed to 256bit\n-            assert(vSeed.size() == 32);\n-            if (generateMaster)\n+            if (!strBase58ExtPrivKey.empty())\n             {\n-                RandAddSeedPerfmon();\n-                do {\n-                    GetRandBytes(&vSeed[0], vSeed.size());\n-                } while (!eccrypto::Check(&vSeed[0]));\n+                //user has provided a master private key\n+                std::vector<unsigned char> vchTemp;\n+                CBitcoinExtKey b58key(strBase58ExtPrivKey);\n+                bip32MasterKey = b58key.GetKey();\n+                if (!bip32MasterKey.key.IsValid())\n+                    throw std::runtime_error(\"CWallet::HDAddHDChain(): Given extended master private key is invalid (base58check decode failed).\");\n+                vSeed.resize(BIP32_EXTKEY_SIZE);\n+\n+                 //fill the seed, and re/missuse it for the 74byte CExtKey\n+                bip32MasterKey.Encode(&vSeed[0]);\n             }\n+            else\n+            {\n+                assert(vSeed.size() == 32);\n+                if (generateMaster)\n+                {\n+                    RandAddSeedPerfmon();\n+                    do {\n+                        GetRandBytes(&vSeed[0], vSeed.size());\n+                    } while (!eccrypto::Check(&vSeed[0]));\n+                }\n \n-            CExtKey bip32MasterKey;\n-            bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n+                bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n+            }\n \n             CExtPubKey masterPubKey = bip32MasterKey.Neuter();\n             CBitcoinExtKey b58key;\n             CBitcoinExtPubKey b58pubkey;\n             b58key.SetKey(bip32MasterKey);\n             b58pubkey.SetKey(masterPubKey);\n-            xprivOut = b58key.ToString();\n-            xpubOut = b58pubkey.ToString();\n+\n+            if (strBase58ExtPrivKey.empty()) //only set the priv key (pass by ref) if no string has passed\n+                strBase58ExtPrivKey = b58key.ToString();\n+\n+            strBase58ExtPubKey = b58pubkey.ToString();\n             chainId = masterPubKey.pubkey.GetHash();\n \n             //only one chain per master seed is allowed\n@@ -2969,6 +2989,7 @@ bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster,\n             if (!AddMasterSeed(chainId, vSeed))\n                 throw std::runtime_error(\"CWallet::HDAddHDChain(): Could not store master seed.\");\n \n+\n             //keep the master pubkeyhash for chain identifying\n             newChain.chainHash = chainId;\n "
      },
      {
        "sha": "f674985579462607ccac5c531fd82b4b92b26d57",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0eebc011c543b99273ab7807211270dc5dbc213/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d0eebc011c543b99273ab7807211270dc5dbc213",
        "patch": "@@ -790,7 +790,7 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n \n \n     //!adds a hd chain of keys to the wallet\n-    bool HDAddHDChain(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &xprivOut, std::string &xpubOut, bool overwrite = false);\n+    bool HDAddHDChain(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &strBase58ExtPrivKey, std::string &strBase58ExtPubKey, bool overwrite = false);\n \n     //!gets a child key from the internal or external chain at given index\n     bool HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal = false);"
      }
    ]
  },
  {
    "sha": "0a2b71d8e01f75be2091014752ee5a173bddc8e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTJiNzFkOGUwMWY3NWJlMjA5MTAxNDc1MmVlNWExNzNiZGRjOGU3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T19:24:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:18:29Z"
      },
      "message": "fix index error in hdaddchain chain path parameter, fix hex size of >256bit entropy",
      "tree": {
        "sha": "2d061f54893df2c0cc892d6d39562f2251cf5d20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d061f54893df2c0cc892d6d39562f2251cf5d20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a2b71d8e01f75be2091014752ee5a173bddc8e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWemblAAoJECnUvLZBb1PsPu4P/12r747iw92OWdVbKMHlNV63\npbrqDH1ucrPa9hKZCyqA1+ztCPwiCYTDshuZXYqBrLNUNLXbXTjmP3ieX/b7ZsHM\nj5tFKBmm6u0IknHk8SRU1FLOtrg4Rij8OLoHFDUAC67A/EccRbhxo/CB5w70Ykqc\nfnqWvPQIlexgYTAVLksJDJXPPVaWedHAmnbd5C7Qq2PseNZ6GowgsTRPWqv4cb/8\nuxynwUZTZeOkiU22SNtZJmKsKk50qDJKgk0BQx0p5z7QY7/1ja0csuX1CNFCLfz9\n6BdvMjYjAVvb+2Z9akS58JX7OmlVSoHIq9DYgPzqp0k4qBlpuRCj4pSv48WCB7Nn\nmZ2AG8BanxzambF5eOXzqASBma890G1F3LbzbqGx7QWOR9mKHngufYv/DNvqsWP1\nTqVWAodHZcs71ArFjzqBcQKDfctc5R7//wjFEnhEGsZK3x7bCGk0Pbw0XpzImVTI\nN/GLBVYegCJ7g3WAFXrp2Sil/LZI7/4PggR59rjaPRtGMCLOhCjWSjvhlcBOBOC9\n76IluKWiXOTq5H+LJGBeQSBpsf58CdMYNnLAIjvcUEI7yBH5VBOpHKkrHoqP0Usu\nuAw5PhwaEqBS34jV9L+PmS2vMJzdX0Uq3PtA3zYPWO7DmZK3s0evy66mr9OIkIK7\n0fa2KYQi9Wbv14YjI5/i\n=weRd\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d061f54893df2c0cc892d6d39562f2251cf5d20\nparent d0eebc011c543b99273ab7807211270dc5dbc213\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1437679491 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862309 +0100\n\nfix index error in hdaddchain chain path parameter, fix hex size of >256bit entropy\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a2b71d8e01f75be2091014752ee5a173bddc8e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a2b71d8e01f75be2091014752ee5a173bddc8e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a2b71d8e01f75be2091014752ee5a173bddc8e7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0eebc011c543b99273ab7807211270dc5dbc213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0eebc011c543b99273ab7807211270dc5dbc213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0eebc011c543b99273ab7807211270dc5dbc213"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5bafbd158baefed1fe26b9cdd5d0d02696b97a6f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a2b71d8e01f75be2091014752ee5a173bddc8e7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a2b71d8e01f75be2091014752ee5a173bddc8e7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0a2b71d8e01f75be2091014752ee5a173bddc8e7",
        "patch": "@@ -2531,14 +2531,14 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n     HDChainID chainId;\n     std::string chainPath = hd_default_chainpath;\n     if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n-        chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n+        chainPath = params[0].get_str(); //todo bip32 chainpath sanity\n \n     std::string xpubOut;\n     std::string xprivOut;\n \n     if (params.size() > 1 && params[1].isStr())\n     {\n-        if (params[1].get_str().size() > 32)\n+        if (params[1].get_str().size() > 32*2) //hex\n         {\n             //assume it's a base58check encoded key\n             xprivOut = params[1].get_str();"
      }
    ]
  },
  {
    "sha": "3327d299d48f2de5a87df01ea2ea06828223744d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzI3ZDI5OWQ0OGYyZGU1YTg3ZGYwMWVhMmVhMDY4MjgyMjM3NDRk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T19:26:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:18:30Z"
      },
      "message": "extend hdwallet.py PRC to cover flexible bip32 chain path and initial creation with base58c encoded ext priv key",
      "tree": {
        "sha": "ef3fc341d4ed008259dcf355c2c2257e51ba34e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef3fc341d4ed008259dcf355c2c2257e51ba34e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3327d299d48f2de5a87df01ea2ea06828223744d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWembmAAoJECnUvLZBb1PsPtgP/0+WNVxX+MbvcMwMepq4IOS+\neU+FL3VA7netqTAqIeA4lDfmT1YnKYXkih8tTv6s1mduOyxGrS5qm5IkgoZJhav9\nxF2u+pyHpPk0VpxxAp6+aefCcnhvR5buAPG/Enfa+4zo88zAB9vNRFBBEwvYEh1T\nyPD4SanByiewwymVKFckL+4wl/k/5M4zVAd3h4Bcy5gnLU82It4TI3NSfyBaMAAt\nRrzuTDMXw1w9jGNirLQjPGeb8tRqhsJkIaHq9Lj0ZwOPy8B3iPe6qMQsMhNk0cI0\nyBICkbi/IwyPFekwmW1l+luuKRwvgbdZ8l/OELhmjNt9aC+RJiqjzrr5rklBdQbQ\nx0mPMaW04CfpgWgt9NM5qX2tbjaGA1uDxl566w/zzUhQ8SqSNMnEuXpt2PSMOH8P\nAEH8dGbEtaFMgknkj7GG0ERKRhhF4Zbt9Ct6QBJGPN8qgmlcAvDOMRT7tCktc7zs\n0RKa/aPu5yyhlz531LGW5ePmWS522JV21vQI+ArTi8TQAy3KTlcKUvK0dIcpMUtm\nqnxbebeGQ44+8dcqwTfuwWW8zH3cEsTeAVS82Rg08ku0/Jcz/deKnkXBnpaneVG9\nLSaPmCU9N2CZWSmV2zyFC4Fy1TPdC+000FdqMr+Bj1R1EFFEmCIzicKJeSKSWRnZ\nZ41MKgAJ0Vtw2m/oysZO\n=9Cgs\n-----END PGP SIGNATURE-----",
        "payload": "tree ef3fc341d4ed008259dcf355c2c2257e51ba34e2\nparent 0a2b71d8e01f75be2091014752ee5a173bddc8e7\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1437679611 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450862310 +0100\n\nextend hdwallet.py PRC to cover flexible bip32 chain path and initial creation with base58c encoded ext priv key\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3327d299d48f2de5a87df01ea2ea06828223744d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3327d299d48f2de5a87df01ea2ea06828223744d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3327d299d48f2de5a87df01ea2ea06828223744d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a2b71d8e01f75be2091014752ee5a173bddc8e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a2b71d8e01f75be2091014752ee5a173bddc8e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a2b71d8e01f75be2091014752ee5a173bddc8e7"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 30,
      "deletions": 35
    },
    "files": [
      {
        "sha": "d6025fbe80ad3dddbea8ee7e4c57384a2a428f7d",
        "filename": "qa/rpc-tests/hdwallet.py",
        "status": "modified",
        "additions": 23,
        "deletions": 28,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3327d299d48f2de5a87df01ea2ea06828223744d/qa/rpc-tests/hdwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3327d299d48f2de5a87df01ea2ea06828223744d/qa/rpc-tests/hdwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/hdwallet.py?ref=3327d299d48f2de5a87df01ea2ea06828223744d",
        "patch": "@@ -3,42 +3,27 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#\n-# Exercise the wallet.  Ported from wallet.sh.  \n-# Does the following:\n-#   a) creates 3 nodes, with an empty chain (no blocks).\n-#   b) node0 mines a block\n-#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none. \n-#   d) node0 sends 21 btc to node2, in two transactions (11 btc, then 10 btc).\n-#   e) node0 mines a block, collects the fee on the second transaction\n-#   f) node1 mines 100 blocks, to mature node0's just-mined block\n-#   g) check that node0 has 100-21, node2 has 21\n-#   h) node0 should now have 2 unspent outputs;  send these to node2 via raw tx broadcast by node1\n-#   i) have node1 mine a block\n-#   j) check balances - node0 should have 0, node2 should have 100\n-#   k) test ResendWalletTransactions - create transactions, startup fourth node, make sure it syncs\n-#\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class WalletTest (BitcoinTestFramework):\n+class HDWalletTest (BitcoinTestFramework):\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n \n     def setup_network(self, split=False):\n-        \n+\n \n         self.nodes = start_nodes(3, self.options.tmpdir)\n-        \n+\n         #connect to a local machine for debugging\n         # url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n         # proxy = AuthServiceProxy(url)\n         # proxy.url = url # store URL on proxy for info\n         # self.nodes.append(proxy)\n-        \n+\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -57,11 +42,21 @@ def run_test (self):\n         self.nodes[0].generate(100)\n         self.sync_all()\n \n+        self.nodes[2].hdaddchain('default', 'tprv8ZgxMBicQKsPePWBxbX4F1arnkRyTvM3kVWgGJV2oNJ3abnwgWRhW1q9ruAaW2Y5Ffgak1PRemKd9LgJCrV2vWKeixAvrAAUtyktAMLv4YE');\n+        adr = self.nodes[2].hdgetaddress()\n+        assert_equal(adr['address'], \"msXnguyqxBFdd7Y2zrsZTU3pKL6fpPCpzX\");\n+        assert_equal(adr['chainpath'], \"m/44'/0'/0'/0/0\");\n+\n+        self.nodes[2].hdaddchain(\"m/101/10'/c\", 'tprv8ZgxMBicQKsPfJt4aGm5uB6STj5nCjLCH24rxgnpfusp38cHmcFNoTUan37ndbHCYcQMj544jjNJekSZcET4NoaVGA8s6atuzUHPQBG6mAp');\n+        adr = self.nodes[2].hdgetaddress()\n+        assert_equal(adr['address'], \"mnvAsVFCiUXh9Sm86JV4EVLfwP9TRz6Yqf\");\n+        assert_equal(adr['chainpath'], \"m/101/10'/0/0\");\n+\n         self.nodes[2].hdaddchain('default', 'f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a')\n         adr = self.nodes[2].hdgetaddress()\n         assert_equal(adr['address'], \"n1hBoYyGjqkbC8kdKNAejuaNR19eoYCSoi\");\n         assert_equal(adr['chainpath'], \"m/44'/0'/0'/0/0\");\n-        \n+\n         adr2 = self.nodes[2].hdgetaddress()\n         assert_equal(adr2['address'], \"mvFePVSFGELgCDyLYrTJJ3tijnyeB9UF6p\");\n         assert_equal(adr2['chainpath'], \"m/44'/0'/0'/0/1\");\n@@ -72,24 +67,24 @@ def run_test (self):\n         self.sync_all()\n         walletinfo = self.nodes[2].getwalletinfo()\n         assert_equal(walletinfo['balance'], 11)\n-            \n+\n         stop_node(self.nodes[0], 0)\n         stop_node(self.nodes[1], 1)\n         stop_node(self.nodes[2], 2)\n \n         #try to cover over master seed\n         os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n         self.nodes[2] = start_node(2, self.options.tmpdir)\n-        \n+\n         if encrypt:\n             print \"encrypt wallet\"\n             self.nodes[2].encryptwallet(\"test\")\n             bitcoind_processes[2].wait()\n             del bitcoind_processes[2]\n-            \n+\n             self.nodes[2] = start_node(2, self.options.tmpdir)\n             self.nodes[2].walletpassphrase(\"test\", 100)\n-            \n+\n         self.nodes[2].hdaddchain('default', 'f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a')\n         #generate address\n         adr = self.nodes[2].hdgetaddress()\n@@ -104,16 +99,16 @@ def run_test (self):\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        \n+\n         walletinfo = self.nodes[2].getwalletinfo()\n         assert_equal(walletinfo['balance'], 11) #after rescan we should have detected the spendable coins\n \n         walletinfo = self.nodes[0].getwalletinfo()\n         balanceOld = walletinfo['balance'];\n-        \n+\n         if encrypt:\n             self.nodes[2].walletpassphrase(\"test\", 100)\n-            \n+\n         self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 2.0); #try to send (sign) with HD keymaterial\n         self.sync_all()\n         self.nodes[1].generate(1)\n@@ -122,4 +117,4 @@ def run_test (self):\n         assert_equal(walletinfo['balance'], balanceOld+Decimal('52.00000000'))\n \n if __name__ == '__main__':\n-    WalletTest ().main ()\n+    HDWalletTest ().main ()"
      },
      {
        "sha": "ad82322797b14a1497f3b66dd188406691e20e5e",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3327d299d48f2de5a87df01ea2ea06828223744d/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3327d299d48f2de5a87df01ea2ea06828223744d/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=3327d299d48f2de5a87df01ea2ea06828223744d",
        "patch": "@@ -122,7 +122,7 @@ bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n             chainIDs.push_back(it->first);\n         }\n     }\n-    \n+\n     return true;\n }\n \n@@ -159,7 +159,7 @@ bool CHDKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n {\n     //this methode required no locking\n-    \n+\n     std::string chainPath = hdPubKey.chainPath;\n     std::vector<std::string> pathFragments;\n     boost::split(pathFragments, chainPath, boost::is_any_of(\"/\"));"
      },
      {
        "sha": "074852c7a5ae5fa9dbdd0f3e4b0ea3062cda6e3c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3327d299d48f2de5a87df01ea2ea06828223744d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3327d299d48f2de5a87df01ea2ea06828223744d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3327d299d48f2de5a87df01ea2ea06828223744d",
        "patch": "@@ -2456,7 +2456,7 @@ m = master key\n c stands for internal/external chain switch\n   c=0 for external addresses\n   c=1 for internal addresses\n-  \n+\n example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n@@ -2740,15 +2740,15 @@ UniValue hdsendtoaddress(const UniValue& params, bool fHelp)\n         wtx.mapValue[\"comment\"] = params[2].get_str();\n     if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n-    \n+\n     bool fSubtractFeeFromAmount = false;\n     if (params.size() > 4)\n         fSubtractFeeFromAmount = params[4].get_bool();\n-    \n+\n     EnsureWalletIsUnlocked();\n-    \n+\n     SendMoneyHD(address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n-    \n+\n     return wtx.GetHash().GetHex();\n }\n "
      }
    ]
  },
  {
    "sha": "476761d8d26b29c1dc3580a312bfa0324c48ff23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzY3NjFkOGQyNmIyOWMxZGMzNTgwYTMxMmJmYTAzMjRjNDhmZjIz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:59:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T09:59:54Z"
      },
      "message": "Use CKey instead of pure `GetRandBytes` for master seed",
      "tree": {
        "sha": "e4f9ff670e6dc766e27bdadc66ed66df78a79ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4f9ff670e6dc766e27bdadc66ed66df78a79ecd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/476761d8d26b29c1dc3580a312bfa0324c48ff23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWenDDAAoJECnUvLZBb1PsaWkP/1ucAQf6OuyfM1HhbBpOch2h\nRA15WDzD/uHJuiLVtlAYFq9+07noMdPACUQ7NLGjQ1htLLUcSTZe7n1whPVqYrAG\nHmz5w5OaIpa/ZE/fgFbqORncu1UN25IiedCb2kKpkcv2LQDBhJITAv4g4+gEthOO\n5bySWXXoB26s87bxI6xxtMv8W5OG3fUvdIMs//YJu3r0e2gvqylWfg47m8gX6GW0\nLcQ21ROYPnUUWCFK7NLsSl7IINW5C7P+AisfrJl/zjVt2OJUiLlymUPlnH8BaaCL\nETRyoGybPlb2Vdq9gvxo0vH6zlMEX4vUY7HuTkByoDQodYPhfL97JjvYzWPic2I2\ng+OG86PJQIObqkMLOG/eohIQBFnczM9b6ek/w+NrE8yPaNiixw/DOGM9eHaJ3W46\n5JHeaL1PWmG/tSMHoSdp16vsCALToLfUKKI8WzTfYgy9kLuved6NbWF/Iy1qOHk6\n4+FmPgQHsJmkCl69d399hrupFWlov2H8Yzgj2z8KgjhM9HlBsW+mfAnjXRHTsc0/\nl4vawWOwERDh9gpQFYRAhxZ7dzGoI2lSEt9tWzPkDQPL6pAt7RrA35+UbZKm55b7\nF2H/s/hxsPtNAwyTrsIp2v+p+C6nTf21EBKYPqXpgYUqIXAzz6PyKkkKtnHNKl/v\nQFa1yCGg3R7ilIr/XG1v\n=geOV\n-----END PGP SIGNATURE-----",
        "payload": "tree e4f9ff670e6dc766e27bdadc66ed66df78a79ecd\nparent 3327d299d48f2de5a87df01ea2ea06828223744d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1450864794 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450864794 +0100\n\nUse CKey instead of pure `GetRandBytes` for master seed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476761d8d26b29c1dc3580a312bfa0324c48ff23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/476761d8d26b29c1dc3580a312bfa0324c48ff23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476761d8d26b29c1dc3580a312bfa0324c48ff23/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3327d299d48f2de5a87df01ea2ea06828223744d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3327d299d48f2de5a87df01ea2ea06828223744d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3327d299d48f2de5a87df01ea2ea06828223744d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "861d06493cf6402c2f0ebb941586f23960656831",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476761d8d26b29c1dc3580a312bfa0324c48ff23/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476761d8d26b29c1dc3580a312bfa0324c48ff23/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=476761d8d26b29c1dc3580a312bfa0324c48ff23",
        "patch": "@@ -13,7 +13,6 @@\n #include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"eccryptoverify.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n@@ -2960,13 +2959,12 @@ bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster,\n                 assert(vSeed.size() == 32);\n                 if (generateMaster)\n                 {\n-                    RandAddSeedPerfmon();\n-                    do {\n-                        GetRandBytes(&vSeed[0], vSeed.size());\n-                    } while (!eccrypto::Check(&vSeed[0]));\n+                    CKey masterKey;\n+                    masterKey.MakeNewKey(true);\n+                    bip32MasterKey.SetMaster(masterKey.begin(),masterKey.size());\n                 }\n-\n-                bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n+                else\n+                    bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n             }\n \n             CExtPubKey masterPubKey = bip32MasterKey.Neuter();"
      }
    ]
  },
  {
    "sha": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWQ5MDJjMTRkODZmMmFlZDY2NjlkZmZjNzE5NDBiZGY2MWUxOWJh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T15:03:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T15:03:38Z"
      },
      "message": "Add support for private key derivation, use m/c' as default keypath",
      "tree": {
        "sha": "668b0938f1f9bb6ca45ac9fcf3ab093a89b46d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/668b0938f1f9bb6ca45ac9fcf3ab093a89b46d22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ed902c14d86f2aed6669dffc71940bdf61e19ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWerfwAAoJECnUvLZBb1PsIBcP/iMYoqVQDqzIvpBS8hL3Lwuj\nP8LAea6p0QIRPVRZ11uXd4dMzpG9++xUsNyJiMhSbCDeK8xYqZPwQbWyfpm0DXXz\ng+dEjc9aldOVZ2yveYam971rWpHemAy1QZ89aj30j8Xizq97KMsUH6m3D7i2BDGR\n10nr6hUqiOagnGgkUSfJr7zdRqkFsYvk3MU91Y20e8AEoVBOMOSNHoTdxhzGq0+E\nMla1fXFIfAGxHqGgO0NJN3w7xmwdq2nuMrrmfQEu4Kz+gmHWz/NeXS+1ac3av0AE\n8deTagbIKLdu3iZQzVpOfPMROkPb6ZDh2p3f2L7p5t7b+iEbuPTvOcJcBVP/ol8/\n0v+HPUG2dV9VvmF3L0Nwxp9EWQ34XUcK3FLOJjC+M/8WEl/7Rx7eo9yodocmnGxs\ncwy7AitXUOk0ydI5+fN5b/GsUiQ/vt4npKPTNcSZSvApxFfNf3wIWBKhSzmyov4X\nXmqET3aBiT5zq7pv+4FMob4lIDPysx8v88BkB0Si26l4lS+Wndn6ffnW6fHA4TiU\nH5YVDRZiZAeklhtxr0ZA4ebmiClOpzNHP/HLyUQuikjE7IZO0fwOemkEULhu1E3D\n3lHJUpx6XqfptxIF8xY8XtssIS+Jc8Jrn3Ix4qxXSKZ5MpdXEbVjoT6ez5z/F5iN\n4DkdXW5m46azE5SRm38M\n=/13H\n-----END PGP SIGNATURE-----",
        "payload": "tree 668b0938f1f9bb6ca45ac9fcf3ab093a89b46d22\nparent 476761d8d26b29c1dc3580a312bfa0324c48ff23\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1450883018 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1450883018 +0100\n\nAdd support for private key derivation, use m/c' as default keypath\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ed902c14d86f2aed6669dffc71940bdf61e19ba/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "476761d8d26b29c1dc3580a312bfa0324c48ff23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476761d8d26b29c1dc3580a312bfa0324c48ff23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/476761d8d26b29c1dc3580a312bfa0324c48ff23"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 80,
      "deletions": 41
    },
    "files": [
      {
        "sha": "a6c2833c98c473c5964dddc29b166347866625e6",
        "filename": "qa/rpc-tests/hdwallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed902c14d86f2aed6669dffc71940bdf61e19ba/qa/rpc-tests/hdwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed902c14d86f2aed6669dffc71940bdf61e19ba/qa/rpc-tests/hdwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/hdwallet.py?ref=4ed902c14d86f2aed6669dffc71940bdf61e19ba",
        "patch": "@@ -72,7 +72,7 @@ def run_test (self):\n         stop_node(self.nodes[1], 1)\n         stop_node(self.nodes[2], 2)\n \n-        #try to cover over master seed\n+        #try to recover over master seed\n         os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n         self.nodes[2] = start_node(2, self.options.tmpdir)\n \n@@ -115,6 +115,15 @@ def run_test (self):\n         self.sync_all()\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['balance'], balanceOld+Decimal('52.00000000'))\n+        \n+        self.nodes[2].hdaddchain('m/ch', '9886e45b8435b488a4cb753121db41a07f66a6a73e0a705ce24cee3a3bce87db')\n+        adr0 = self.nodes[2].hdgetaddress()\n+        assert_equal(adr0['address'], \"mhr4GkkutTAVQ2RQvqSYdrFyt7vtmrgJ6S\");\n+        assert_equal(adr0['chainpath'], \"m/0'/0'\");\n+\n+        adr1 = self.nodes[2].hdgetaddress()\n+        assert_equal(adr1['address'], \"mzSuRQocScfhoYufYE5Uc1E5JW8BJtnZFr\");\n+        assert_equal(adr1['chainpath'], \"m/0'/1'\");\n \n if __name__ == '__main__':\n     HDWalletTest ().main ()"
      },
      {
        "sha": "d1909ae16a48844390b67705f8096c28e3333633",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 15,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=4ed902c14d86f2aed6669dffc71940bdf61e19ba",
        "patch": "@@ -156,11 +156,9 @@ bool CHDKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n     return CCryptoKeyStore::GetPubKey(address, vchPubKeyOut);\n }\n \n-bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n+bool CHDKeyStore::PrivKeyDer(const std::string chainPath, const HDChainID& chainId, CExtKey& extKeyOut) const\n {\n     //this methode required no locking\n-\n-    std::string chainPath = hdPubKey.chainPath;\n     std::vector<std::string> pathFragments;\n     boost::split(pathFragments, chainPath, boost::is_any_of(\"/\"));\n \n@@ -181,7 +179,7 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n             CKeyingMaterial masterSeed;\n \n             // get master seed\n-            if (!GetMasterSeed(hdPubKey.chainHash, masterSeed))\n+            if (!GetMasterSeed(chainId, masterSeed))\n                 return false;\n \n             if (masterSeed.size() == BIP32_EXTKEY_SIZE)\n@@ -208,7 +206,19 @@ bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n             parentKey = childKey;\n         }\n     }\n-    keyOut = parentKey.key;\n+    extKeyOut = parentKey;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const\n+{\n+    //this methode required no locking\n+    std::string chainPath = hdPubKey.chainPath;\n+    CExtKey extKeyOut;\n+    if (!PrivKeyDer(chainPath, hdPubKey.chainHash, extKeyOut))\n+        return false;\n+\n+    keyOut = extKeyOut.key;\n     return true;\n }\n \n@@ -218,24 +228,36 @@ bool CHDKeyStore::DeriveHDPubKeyAtIndex(const HDChainID chainId, CHDPubKey& hdPu\n     if (!GetChain(chainId, hdChain))\n         return false;\n \n-    if ( (internal && !hdChain.internalPubKey.pubkey.IsValid()) || !hdChain.externalPubKey.pubkey.IsValid())\n-        throw std::runtime_error(\"CHDKeyStore::HDGetChildPubKeyAtIndex(): Missing HD extended pubkey!\");\n-\n     if (nIndex >= 0x80000000)\n-        throw std::runtime_error(\"CHDKeyStore::HDGetChildPubKeyAtIndex(): No more available keys!\");\n+        throw std::runtime_error(\"CHDKeyStore::DeriveHDPubKeyAtIndex(): No more available keys!\");\n \n-    CExtPubKey useExtKey = internal ? hdChain.internalPubKey : hdChain.externalPubKey;\n     CExtPubKey childKey;\n-    if (!useExtKey.Derive(childKey, nIndex))\n-        throw std::runtime_error(\"CHDKeyStore::HDGetChildPubKeyAtIndex(): Key deriving failed!\");\n+    hdPubKeyOut.chainPath = hdChain.chainPath; //base chain path\n+    boost::replace_all(hdPubKeyOut.chainPath, \"c\", itostr(internal)); //replace the chain switch index\n+\n+    if ( (internal && !hdChain.internalPubKey.pubkey.IsValid()) || !hdChain.externalPubKey.pubkey.IsValid())\n+    {\n+        hdPubKeyOut.chainPath += \"/\"+itostr(nIndex)+\"'\"; //add hardened flag\n+\n+        CExtKey extKeyOut;\n+        if (!PrivKeyDer(hdPubKeyOut.chainPath, chainId, extKeyOut))\n+            throw std::runtime_error(\"CHDKeyStore::DeriveHDPubKeyAtIndex(): Private Key Derivation failed!\");\n+        childKey = extKeyOut.Neuter();\n+    }\n+    else\n+    {\n+\n+        hdPubKeyOut.chainPath += \"/\"+itostr(nIndex);\n+\n+        CExtPubKey useExtKey = internal ? hdChain.internalPubKey : hdChain.externalPubKey;\n+        if (!useExtKey.Derive(childKey, nIndex))\n+            throw std::runtime_error(\"CHDKeyStore::DeriveHDPubKeyAtIndex(): Key deriving failed!\");\n+    }\n \n     hdPubKeyOut.pubkey = childKey.pubkey;\n     hdPubKeyOut.chainHash = chainId;\n     hdPubKeyOut.nChild = nIndex;\n-    hdPubKeyOut.chainPath = hdChain.chainPath;\n     hdPubKeyOut.internal = internal;\n-    boost::replace_all(hdPubKeyOut.chainPath, \"c\", itostr(internal)); //replace the chain switch index\n-    hdPubKeyOut.chainPath += \"/\"+itostr(nIndex);\n \n     return true;\n }"
      },
      {
        "sha": "1b6152213ef9dc5352da933693b4ce225249e652",
        "filename": "src/wallet/hdkeystore.h",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/hdkeystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/hdkeystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.h?ref=4ed902c14d86f2aed6669dffc71940bdf61e19ba",
        "patch": "@@ -62,6 +62,7 @@ class CHDChain\n public:\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n+    bool usePubCKD;\n     int64_t nCreateTime; // 0 means unknown\n \n     HDChainID chainHash; //hash() of the masterpubkey\n@@ -82,7 +83,9 @@ class CHDChain\n \n     bool IsValid()\n     {\n-        return externalPubKey.pubkey.IsValid();\n+        if (usePubCKD && !externalPubKey.pubkey.IsValid())\n+            return false;\n+        return (chainPath.size() > 0);\n     }\n \n     ADD_SERIALIZE_METHODS;\n@@ -95,15 +98,20 @@ class CHDChain\n         READWRITE(nCreateTime);\n         READWRITE(chainHash);\n         READWRITE(chainPath);\n-        READWRITE(externalPubKey);\n-        READWRITE(internalPubKey);\n+        READWRITE(usePubCKD);\n+        if (usePubCKD)\n+        {\n+            READWRITE(externalPubKey);\n+            READWRITE(internalPubKey);\n+        }\n     }\n \n     void SetNull()\n     {\n         nVersion = CHDChain::CURRENT_VERSION;\n         nCreateTime = 0;\n         chainHash.SetNull();\n+        usePubCKD = false;\n     }\n };\n \n@@ -115,6 +123,9 @@ class CHDKeyStore : public CCryptoKeyStore\n     std::map<CKeyID, CHDPubKey> mapHDPubKeys; //all hd pubkeys of all chains\n     std::map<HDChainID, CHDChain> mapChains; //all available chains\n \n+    //!private key derivition of a ext priv key\n+    bool PrivKeyDer(const std::string chainPath, const HDChainID& chainId, CExtKey& extKeyOut) const;\n+\n     //!derive key from a CHDPubKey object\n     bool DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const;\n "
      },
      {
        "sha": "99c314ac2cb61d9d828873927478da74b38d75ed",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4ed902c14d86f2aed6669dffc71940bdf61e19ba",
        "patch": "@@ -2462,7 +2462,7 @@ example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal ke\n example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n */\n-const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+const std::string hd_default_chainpath = \"m/c'\";\n \n static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n {\n@@ -2558,15 +2558,14 @@ UniValue hdaddchain(const UniValue& params, bool fHelp)\n         }\n     }\n \n-\n-\n     pwalletMain->HDAddHDChain(chainPath, fGenerateMasterSeed, vSeed, chainId, xprivOut, xpubOut);\n     if (fGenerateMasterSeed)\n         result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n \n     result.push_back(Pair(\"extended_master_pubkey\", xpubOut));\n     result.push_back(Pair(\"extended_master_privkey\", xprivOut));\n     result.push_back(Pair(\"chainid\", chainId.GetHex()));\n+    result.push_back(Pair(\"keypath\", chainPath));\n \n     memory_cleanse(&vSeed[0], bip32MasterSeedLength);\n     memory_cleanse(&xprivOut[0], xpubOut.size());\n@@ -2677,7 +2676,7 @@ UniValue hdgetaddress(const UniValue& params, bool fHelp)\n     if (params.size() == 1 && params[0].isNum())\n     {\n         HDChainID emptyId;\n-        if (!pwalletMain->HDGetChildPubKeyAtIndex(emptyId, newKey, params[0].get_int()))\n+        if (!pwalletMain->HDGetChildPubKeyAtIndex(emptyId, newKey, keyChainPath, params[0].get_int()))\n             throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n     }\n     else"
      },
      {
        "sha": "07c797c2dfe7f007a6f05f40af2176e089536d28",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4ed902c14d86f2aed6669dffc71940bdf61e19ba",
        "patch": "@@ -2903,9 +2903,6 @@ bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster,\n     if (chainPathIn[0] != 'm')\n         throw std::runtime_error(\"CWallet::HDAddHDChain(): Non masterkey chainpaths are not allowed.\");\n \n-    if (chainPathIn.find_first_of(\"c\", 1) == std::string::npos)\n-        throw std::runtime_error(\"CWallet::HDAddHDChain(): 'c' (internal/external chain selection) is requires in the given chainpath.\");\n-\n     if (chainPathIn.find_first_not_of(\"0123456789'/mch\", 0) != std::string::npos)\n         throw std::runtime_error(\"CWallet::HDAddHDChain(): Invalid chainpath.\");\n \n@@ -2961,10 +2958,10 @@ bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster,\n                 {\n                     CKey masterKey;\n                     masterKey.MakeNewKey(true);\n-                    bip32MasterKey.SetMaster(masterKey.begin(),masterKey.size());\n+                    vSeed.assign(masterKey.begin(),masterKey.end());\n                 }\n-                else\n-                    bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n+\n+                bip32MasterKey.SetMaster(&vSeed[0], vSeed.size());\n             }\n \n             CExtPubKey masterPubKey = bip32MasterKey.Neuter();\n@@ -3012,20 +3009,18 @@ bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster,\n \n             parentKey = bip32MasterKey;\n         }\n-        else if (fragment == \"c\")\n+        else if (fragment == \"c\" && !harden)\n         {\n             harden = false; //external / internal chain root keys can not be hardened\n             CExtPubKey parentExtPubKey = parentKey.Neuter();\n             parentExtPubKey.Derive(newChain.externalPubKey, 0);\n             parentExtPubKey.Derive(newChain.internalPubKey, 1);\n-\n-            AddChain(newChain);\n-\n-            if (!CWalletDB(strWalletFile).WriteHDChain(newChain))\n-                throw std::runtime_error(\"CWallet::HDAddHDChain(): Writing new chain failed!\");\n+            newChain.usePubCKD = true;\n         }\n         else\n         {\n+            if (fragment == \"c\")\n+                break;\n             CExtKey childKey;\n             int32_t nIndex;\n             if (!ParseInt32(fragment,&nIndex))\n@@ -3035,10 +3030,15 @@ bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster,\n         }\n     }\n \n+    AddChain(newChain);\n+\n+    if (!CWalletDB(strWalletFile).WriteHDChain(newChain))\n+        throw std::runtime_error(\"CWallet::HDAddHDChain(): Writing new chain failed!\");\n+\n     return true;\n }\n \n-bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal)\n+bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, std::string& newKeysChainpath, unsigned int nIndex, bool internal)\n {\n     AssertLockHeld(cs_wallet);\n \n@@ -3059,6 +3059,7 @@ bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyO\n         throw std::runtime_error(\"CWallet::HDGetChildPubKeyAtIndex(): Writing pubkey failed!\");\n     \n     pubKeyOut = newHdPubKey.pubkey;\n+    newKeysChainpath = newHdPubKey.chainPath;\n     return true;\n }\n \n@@ -3075,12 +3076,9 @@ bool CWallet::HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOu\n         throw std::runtime_error(\"CWallet::HDGetNextChildPubKey(): Selected chain is not vailid!\");\n \n     unsigned int nextIndex = GetNextChildIndex(chainID, internal);\n-    if (!HDGetChildPubKeyAtIndex(chainID, pubKeyOut, nextIndex, internal))\n+    if (!HDGetChildPubKeyAtIndex(chainID, pubKeyOut, newKeysChainpath, nextIndex, internal))\n         return false;\n \n-    newKeysChainpath = chain.chainPath;\n-    boost::replace_all(newKeysChainpath, \"c\", itostr(internal)); //replace the chain switch index\n-    newKeysChainpath += \"/\"+itostr(nextIndex);\n     return true;\n }\n "
      },
      {
        "sha": "4467c4ed826d89e3db5e5e68a185692ebc3a85bc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ed902c14d86f2aed6669dffc71940bdf61e19ba/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4ed902c14d86f2aed6669dffc71940bdf61e19ba",
        "patch": "@@ -793,7 +793,7 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n     bool HDAddHDChain(const std::string& chainPath, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &strBase58ExtPrivKey, std::string &strBase58ExtPubKey, bool overwrite = false);\n \n     //!gets a child key from the internal or external chain at given index\n-    bool HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal = false);\n+    bool HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, std::string& newKeysChainpath, unsigned int nIndex, bool internal = false);\n \n     //!get next free child key\n     bool HDGetNextChildPubKey(const HDChainID& chainId, CPubKey &pubKeyOut, std::string& newKeysChainpathOut, bool internal = false);"
      }
    ]
  }
]