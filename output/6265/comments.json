[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112596561",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-112596561",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 112596561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjU5NjU2MQ==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-16T22:55:24Z",
    "updated_at": "2015-06-16T22:55:24Z",
    "author_association": "MEMBER",
    "body": "One warning while compiling \n\n```\n  CXX      qt/qt_libbitcoinqt_a-walletmodeltransaction.o\nqt/walletmodeltransaction.cpp:20:5: warning: delete called on 'CReserveKey' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]\n    delete keyChange;\n    ^\n1 warning generated.\n```\n\nhdgetaddress doesn't seem to work?\n\n```\ntinyformat: Not enough conversion specifiers in format string (code -1)\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112596561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112670705",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-112670705",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 112670705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjY3MDcwNQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-17T06:26:55Z",
    "updated_at": "2015-06-17T06:26:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@fanquake: thanks for the tests. Will have a look at it. Before calling `hdgetaddress` did you call `hdaddchain`?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112670705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113164322",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-113164322",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 113164322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzE2NDMyMg==",
    "user": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?u=6a4a31aaddbc438e053c52d084a698a5f622f1ea&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T13:56:03Z",
    "updated_at": "2015-06-18T13:56:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "can this be used to import master seeds? If not, would this require much additional work?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113164322/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113485620",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-113485620",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 113485620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzQ4NTYyMA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T11:41:15Z",
    "updated_at": "2015-07-23T20:27:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rebroad: right. This PR would enabled HD features in the main bitcoin-core wallet. It won't affect the current ways of generating keys and sending coins. It's totally independent form the rest of the wallet features. So it is relatively save to use/test this.\n\nYou can import hd seeds, but only in raw hex. There is no support for Bip39 word lists. I'm pretty sure you'll find a tool to convert bip39 wordlists into 32byte master seed represented in hex.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113485620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115075308",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-115075308",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 115075308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTA3NTMwOA==",
    "user": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?u=d80eead1afbb70ddce35053cfb1db7502d9ca3c9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-25T02:32:55Z",
    "updated_at": "2015-06-25T02:32:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I haven't gotten to testing this yet, but why did you not decide to accept a base58 encoded key?\n\nThe first reason against accepting raw hex is there's no way to validate the key without visually comparing. And extended keys can often look similar at the start. xpub/xprv's include a checksum, so the user can be sure they entered the right thing.\n\nThe other reason is extensibility, since adding watch-only chains implies there won't be any master hex around to use. \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115075308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115125281",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-115125281",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 115125281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNTEyNTI4MQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-25T06:41:40Z",
    "updated_at": "2015-06-25T06:41:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@afk11: The lack of base58check encoded master keys is only because it's not implemented yet (didn't find time to do it). But it's very trivial to add. I decided to export the master seed hex to potentially allow to create a bip39 mnemonic (there could be a tool hex-seed->bip39mnemonic). IIRC, you can't create a bip39 mnemonic from the master private key (not sure). Somehow i feel to store a hd chains of keys in the very root, the seed and not in the first derivation, the master private key.\nIndeed, you can't visually verify a hex master seed. At the moment i'm not sure what's best practice here. I'd like to avoid Bip39 for security reasons and so im stuck now with hex encoding for the 256bit entropy.\n\nBut right. Especially for watch-only and HDM wallets, base58check encoded public key importing and usage as external chain root is extremely helpful. I also wrote that in the PR description (see \"whats next\").\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115125281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124054687",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124054687",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 124054687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDA1NDY4Nw==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-23T10:44:37Z",
    "updated_at": "2015-07-23T10:44:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and added the base58check encoded master pub/priv key to the `hdaddchain` RPC output.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124054687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124224002",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124224002",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 124224002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDIyNDAwMg==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-23T19:58:20Z",
    "updated_at": "2015-07-23T19:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added some commits on top to address nits and add a feature for creating a hd chain of keys with a existing base58check encoded extended master private key (`xpriv...`).\nSupporting watch only wallets with a given base58check encoded pub key of the external key chain will follow.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124224002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124225309",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124225309",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 124225309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDIyNTMwOQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-23T20:04:59Z",
    "updated_at": "2015-07-23T20:04:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Most of the bip32 work is also included in CoreWallet (https://github.com/jonasschnelli/bitcoin/tree/2015/05/corewallet), which aims to be a replacement/twin for the current wallet with the option of completely split it of, of the bitcoin-core repository.\n\nThe PR is an option for quicker adding bip32 supporting to bitcoin-core (for the ones who can compile bitcoin-core by them self) or for the case where CoreWallet could fail to reach a stable level.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124225309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124227433",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124227433",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 124227433,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNDIyNzQzMw==",
    "user": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?u=0b02049ec38b6bb7d55c5c66d9bbeb0d4b822129&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-23T20:14:46Z",
    "updated_at": "2015-07-23T20:14:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "concept ACK\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124227433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125282575",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-125282575",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 125282575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTI4MjU3NQ==",
    "user": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?u=d80eead1afbb70ddce35053cfb1db7502d9ca3c9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-27T17:36:54Z",
    "updated_at": "2015-07-27T17:42:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonasschnelli oops, missed the notification on this.. You're right you can't go from hex to bip39 mnemonic, as mnemonics have pbkdf2 applied to them.  +1 on base58 also.\n\nI noticed you have a hard limit of 32 bytes of hex for the provided seed. This isn't correct as BIP32 doesn't specify a size, but rather states the binary seed may be short, or as long as 512 bits (128-256 recommended), since it's hashed with HMAC.\n\nSmall PR against your branch for this: https://github.com/jonasschnelli/bitcoin/pull/8\n\nAlso, chalk it up to not reading the docs carefully, but I didn't expect hdaddchain to create a random key when I started testing. Maybe explicitly mention this will happen if no hex seed / master private key is provided? \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125282575/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125284564",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-125284564",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 125284564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTI4NDU2NA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-27T17:46:05Z",
    "updated_at": "2015-07-27T17:46:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@afk11: Meh. Right. I see your point. So you are saying once you have created a bip32 chain with a entropy over `GetRandBytes()` you can't build a bip39 wordlist (sorry, not familiar with bip39)?\n\nThis would definitively mean using base58c for the seed output, or even better, just the master private key in base58c. Or do you see any reason to keep the seed?\n\nMaybe it should also support importing a bip39 wordlist to create a bip32 chain.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125284564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125299329",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-125299329",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 125299329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTI5OTMyOQ==",
    "user": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?u=d80eead1afbb70ddce35053cfb1db7502d9ca3c9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-27T18:34:38Z",
    "updated_at": "2015-07-27T18:35:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, that is correct - the entropy used to produce the bip39 mnemonic is different to the seed that is produced.\n\nI would suggest only displaying the base58 master key. It would keep the API consistent, since in certain situations the initial seed used to yield the master key won't be available, and in all other `dumphd...` cases it'll probably just be the xprv/xpub. \n\nThere isn't much reason to keep the hex seed - the same can be said for BIP39 mnemonics (and their passphrases) I guess. You could have separate RPC methods to create a new master via both methods.\n\nI'm not sure if anything is lost in doing this. If someone dumps their master xprv, they can import it using `hdaddchain` just the same as if they had the mnemonic / hex.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125299329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128327535",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128327535",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128327535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODMyNzUzNQ==",
    "user": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?u=9c3a568854478a46b14965facf375e926f0532e3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T11:01:11Z",
    "updated_at": "2015-08-06T11:01:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could you point me at some background on the concerns about BIP 39 and security please?\n\nSeed interoperability with other wallets would seem like one of the major advantages to HD wallet support, although being about to import is IMHO the most important part of that use case, so reference client can be used to recover where another wallet fails.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128327535/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128349008",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128349008",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128349008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM0OTAwOA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T12:27:43Z",
    "updated_at": "2015-08-06T12:27:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rnicoll: Mostly because Bip39 can harm your security:\n- https://bitcointalk.org/index.php?topic=812894.msg10907427#msg10907427\n- https://bitcointalk.org/index.php?topic=1138063.msg12013904#msg12013904\n\nThe 2048 kdf rounds might be okay for embedded USB hardware wallet. But IMO nothing that i'd like to have on my full-node wallet.\n\nBut i'm pretty sure you can export/convert a bip39 memonic into a master xpriv key (maybe on bip32.org)?\nAlso feel free to patch the RPC `hdaddchain` with import support for bip39.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128349008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128364002",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128364002",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128364002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM2NDAwMg==",
    "user": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?u=9c3a568854478a46b14965facf375e926f0532e3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T13:27:49Z",
    "updated_at": "2015-08-06T13:27:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonasschnelli Thanks for the links, interesting reading. Will definitely take a look at patching hdaddchain for imports\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128364002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128367566",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128367566",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128367566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM2NzU2Ng==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T13:35:37Z",
    "updated_at": "2015-08-06T13:35:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rnicoll: this PR is out of sync with the corewallet branch (which is more stable and has more features).\nIf you add a patch, i think it makes much more sense there: https://github.com/jonasschnelli/bitcoin/\n\nI will try to update this PR after stabilizing the corewallet hd features. \nThe reason for the parallelism: https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124225309\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128367566/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128375169",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128375169",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128375169,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM3NTE2OQ==",
    "user": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?u=9c3a568854478a46b14965facf375e926f0532e3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T13:59:07Z",
    "updated_at": "2015-08-06T13:59:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jonasschnelli Noted, thanks for letting me know. Mind if I pull this into an altcoin reference client? Would mean it goes out to general users Oct/Nov this year, and might be a good way of getting further testing? If it's not helpful will pick the change up after merge into Bitcoin Core instead.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128375169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128381032",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128381032",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128381032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODM4MTAzMg==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T14:11:53Z",
    "updated_at": "2015-08-06T14:12:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rnicoll: Feel free to play, share, copy this PR. But mind, it's pretty untested. I opened this PR for people who likes to use HD features _now_ together with the current bitcoin-core wallet. Long term i think the corewallet branch (https://github.com/jonasschnelli/bitcoin/) makes more sense. People can start testing the new features in parallel to the existing wallet... if it reaches a stable level, it might get merged back into the bitcoin-core master.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128381032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128687938",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128687938",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128687938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODY4NzkzOA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T12:29:35Z",
    "updated_at": "2015-08-07T12:29:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Today there was a discussion about the Bip32 support on IRC (http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/08/07#l1438905927.0).\nThis PR uses public key derivation which has significant security weakness, but allows xpubkey only wallets.\nBut by default the wallet should use privatekey derivation together with keypools.\n\nThe multiple bip32 chains per wallet can also be dangerous because one needs to be very careful about master key backups and funds might end up in multiple chains which would require multiple master keys to recover.\n\nI try to simplify the PR by removing serval features (like multichain support) and try to add the minimal by bip32 derivation during keypool refill.\nMore feature rich version aims for the corewallet branch.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128687938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128691915",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128691915",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128691915,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODY5MTkxNQ==",
    "user": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?u=9c3a568854478a46b14965facf375e926f0532e3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T12:49:37Z",
    "updated_at": "2015-08-07T12:51:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "It sounds like my use-case of importing BIP 39 seeds as a recovery might be better implemented as a sweep (i.e. it scans for any transactions to keys from the seed, and then puts the relevant non-master public/private keys pairs into the wallet, rather than keeping the master keys). Alternative would be to sweep the funds to wallet addresses, but that introduces privacy concerns (clearly identifies the funds as related). Thoughts?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128691915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128797542",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128797542",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 128797542,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODc5NzU0Mg==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T19:08:41Z",
    "updated_at": "2015-08-07T19:08:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Importing a master seed (over bip39 phrase or over master extended private key) should certainly remind the user (some warnings and confirmations) that it is possible that the seed is already compromised (because of the seed transfer or because of leaks in the other wallet software).\n\n> [...] i.e. it scans for any transactions to keys from the seed [...]\n\nThis is very hard to achieve in a stable way IMO. If you don't have a clear lookup window this process could be very time consuming. I also think people might not know what chainpath they used before.\n\nSweep to a fresh seeded chain would make most sense IMO, but as @rnicoll points out: it could be a privacy leak.\n\nMaybe the user should decide between privacy import keys/seed or security with a complete sweep.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/128797542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143088392",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143088392",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 143088392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzA4ODM5Mg==",
    "user": {
      "login": "slush0",
      "id": 565341,
      "node_id": "MDQ6VXNlcjU2NTM0MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slush0",
      "html_url": "https://github.com/slush0",
      "followers_url": "https://api.github.com/users/slush0/followers",
      "following_url": "https://api.github.com/users/slush0/following{/other_user}",
      "gists_url": "https://api.github.com/users/slush0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slush0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
      "organizations_url": "https://api.github.com/users/slush0/orgs",
      "repos_url": "https://api.github.com/users/slush0/repos",
      "events_url": "https://api.github.com/users/slush0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slush0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-25T00:23:57Z",
    "updated_at": "2015-09-25T00:23:57Z",
    "author_association": "NONE",
    "body": "Slightly offtopic, but: Uh, I don't understand that neverending discussions about BIP39 \"security\". The fact that PBKDF iterations may not be \"slow enough\" does not mean the concept is insecure. Such hashing is just additional security protection against bruteforcing, but BIP39 produced seeds are completely safe, they use at least 256 bits of entropy (24 words) and they're NOT \"brain wallets\" despite the fact that encoding is human readable!!\n\nBIP44+BIP39 is currently the most used solution across various wallets and I don't see real reasons to use anything else in Core. Attitude \"let's use some other encoding and recommend users to use external tools like bip32.org to convert seed\" has huge practical impacts to real security.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143088392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143137987",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143137987",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 143137987,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzEzNzk4Nw==",
    "user": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?u=034ef1433a0704d9c91b57b993009b0383d6b7c0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-25T06:08:21Z",
    "updated_at": "2015-09-25T06:08:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Recommend users to use external tools like bip32.org to convert seed\" has huge practical impacts to real security.\n\nIMHO, all other points aside,  this would be my biggest concern.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143137987/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143377469",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143377469",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 143377469,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzM3NzQ2OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-25T23:40:07Z",
    "updated_at": "2015-09-25T23:41:46Z",
    "author_association": "MEMBER",
    "body": "@slush0 I know that BIP39 has been around for a while and is supported by multiple applications. However, what exactly do you think should be implemented? As I read it, BIP39 can be interpreted in two ways:\n- Either on import you decode the mnemonic and verify the checksum. This means BIP39 requires a normative dictionary (or set thereof), and results in a simple scheme that discourages brainwallets (but does not have the plausible deniability it aims to have).\n- Or you interpret the wordlist to be purely generator side, in which case the checksum is a pointless complication, and it becomes possible to use it as a weak brainwallet system (with plausible deniability which disappears as soon as an attacker has seen your wallet).\n\nI think Bitcoin Core has a responsability to adopt standards that are in general secure by default, so I don't think we can use the second interpretation. Then the question arises with which other application's dictionaries we should be compatible? New ones seem to get added over time, and that changes the standard. The BIP even encourages applications to choose their own.\n\nIn addition to that, 2048 iterations is very low these days, and will continue to deteriorate over time, as BIP39 has no variable strengthening or version number to improve in the future.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143377469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143403310",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143403310",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 143403310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MzQwMzMxMA==",
    "user": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?u=034ef1433a0704d9c91b57b993009b0383d6b7c0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-26T06:27:25Z",
    "updated_at": "2015-09-26T06:28:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> but does not have the plausible deniability it aims to have\n\nMy understanding was that that was only a claim if you used a `passphrase`?\nIn any case, the primary benefit of BIP39 is human-readable cross-compatible BIP32 seeds,  I don't think its potential use as a brain wallet is why it has seen widespread adoption.\n\n> In addition to that, 2048 iterations is very low these days, and will continue to deteriorate over time, as BIP39 has no variable strengthening or version number to improve in the future.\n\nThat step is basically useless.  It should be ignored for the sake of argument and is simply just an annoying implementation detail. \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/143403310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/146912063",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-146912063",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 146912063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0NjkxMjA2Mw==",
    "user": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?u=578995010af9e1872285cb8e67bcb4f6052d52dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-09T16:04:39Z",
    "updated_at": "2015-10-09T16:04:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "needs rebase\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/146912063/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150279242",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-150279242",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 150279242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDI3OTI0Mg==",
    "user": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?u=d80eead1afbb70ddce35053cfb1db7502d9ca3c9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-22T16:23:26Z",
    "updated_at": "2015-10-22T16:23:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think BIP39 should be packaged into this feature. \n\nI suspect for a reasonable integration, it's would not be ideal having different passwords protecting different parts of the wallet. Similarly, conditionally storing mnemonics and perhaps their passwords adds a lot of complexity to work around. \n\nA stateless mnemonic to xprv RPC command could be offered to help people using BIP39, but that opens the door to supporting every single KDF function out there.. Why not just accept extended pub/priv keys, and leave human readable entropy for humans? \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150279242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150534616",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-150534616",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 150534616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDUzNDYxNg==",
    "user": {
      "login": "rubensayshi",
      "id": 649160,
      "node_id": "MDQ6VXNlcjY0OTE2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649160?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rubensayshi",
      "html_url": "https://github.com/rubensayshi",
      "followers_url": "https://api.github.com/users/rubensayshi/followers",
      "following_url": "https://api.github.com/users/rubensayshi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rubensayshi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rubensayshi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rubensayshi/subscriptions",
      "organizations_url": "https://api.github.com/users/rubensayshi/orgs",
      "repos_url": "https://api.github.com/users/rubensayshi/repos",
      "events_url": "https://api.github.com/users/rubensayshi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rubensayshi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-23T10:08:41Z",
    "updated_at": "2015-10-23T10:08:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "something to keep in mind with BIP39 is that because `seed = hash(mnemonic, pass)` it doesn't allow for changing passwords :/\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150534616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150535206",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-150535206",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 150535206,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDUzNTIwNg==",
    "user": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?u=034ef1433a0704d9c91b57b993009b0383d6b7c0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-23T10:11:13Z",
    "updated_at": "2015-10-23T10:11:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@rubensayshi, at least,  not without transferring all the BTC. \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150535206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/161155983",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-161155983",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 161155983,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTE1NTk4Mw==",
    "user": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?u=034ef1433a0704d9c91b57b993009b0383d6b7c0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-02T02:04:07Z",
    "updated_at": "2015-12-02T02:04:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Needs rebase\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/161155983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/166920098",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-166920098",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 166920098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjkyMDA5OA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T15:10:13Z",
    "updated_at": "2015-12-23T15:10:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and updated.\n- Not the default keypath is `m/c'` = (`m/0'/0'` for first external key and `m/1'/0'` for first internal/change key).\n- Support for private child key derivation (default).\n\nThis PR is relatively complex and are meant for user who are seeking full control over their hd structure. I have plans to also open a smaller, simpler HD patch.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/166920098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218105124",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-218105124",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
    "id": 218105124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxODEwNTEyNA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-10T09:26:18Z",
    "updated_at": "2016-05-10T09:26:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing in favor of #8035.\nSome parts of this PR could be used to extend HD functionality if and once #8035 has been merged.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/218105124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32107917",
    "pull_request_review_id": null,
    "id": 32107917,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTA3OTE3",
    "diff_hunk": "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+\n+    const unsigned int bip32MasterSeedLength = 32;\n+    CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n+    bool fGenerateMasterSeed = true;\n+    HDChainID chainId;\n+    std::string chainPath = hd_default_chainpath;\n+    if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n+        chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n+\n+    if (params.size() > 1 && params[1].isStr())\n+    {\n+        if (!IsHex(params[1].get_str()))\n+            throw runtime_error(\"HD master seed must encoded in hex\");\n+\n+        std::vector<unsigned char> seed = ParseHex(params[1].get_str());\n+        if (seed.size() != bip32MasterSeedLength)\n+            throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n+\n+        memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n+        memory_cleanse(&seed[0], bip32MasterSeedLength);\n+        fGenerateMasterSeed = false;\n+    }\n+\n+    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, chainId);\n+    if (fGenerateMasterSeed)\n+        result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+    result.push_back(Pair(\"chainid\", chainId.GetHex()));\n+    return result;\n+}\n+\n+UniValue hdsetchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"hdsetchain <chainid>\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"chainid\\\"        (string|hex, required) chainid is a bitcoin hash of the master public key of the corresponding chain.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdsetchain\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    HDChainID chainId;\n+    if (!IsHex(params[0].get_str()))\n+        throw runtime_error(\"Chain id format is invalid\");\n+\n+    chainId.SetHex(params[0].get_str());\n+\n+    if (!pwalletMain->HDSetActiveChainID(chainId))\n+        throw runtime_error(\"Could not set active chain\");\n+\n+    return NullUniValue;\n+}\n+\n+UniValue hdgetinfo(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"hdgetinfo\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"chainid\\\" : \\\"<chainid>\\\",  string) A bitcoinhash of the master public key\\n\"\n+                            \"  \\\"creationtime\\\" : The creation time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The chainpath (like m/44'/0'/0'/c)\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetinfo\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::vector<HDChainID> chainIDs;\n+    if (!pwalletMain->GetAvailableChainIDs(chainIDs))\n+        throw runtime_error(\"Could not load chain ids\");\n+\n+    UniValue result(UniValue::VARR);\n+    BOOST_FOREACH(const HDChainID& chainId, chainIDs)\n+    {\n+        CHDChain chain;\n+        if (!pwalletMain->GetChain(chainId, chain))\n+            throw runtime_error(\"Could not load chain\");\n+\n+        UniValue chainObject(UniValue::VOBJ);\n+        chainObject.push_back(Pair(\"chainid\", chainId.GetHex()));\n+        chainObject.push_back(Pair(\"creationtime\", chain.nCreateTime));\n+        chainObject.push_back(Pair(\"chainpath\", chain.chainPath));\n+\n+        result.push_back(chainObject);\n+    }\n+\n+    return result;\n+}\n+\n+UniValue hdgetaddress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+                            \"hdgetaddress (<childindex>)\\n\"\n+                            \"\\nReturns a Bitcoin address for receiving payments.\\n\"\n+                            \"\\nAutomatically uses the next available childindex if no index is given\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"childindex\\\"        (numeric, optional) child key index. ATTENTION: automatic index counting will start at the highes available child key index\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"address\\\" : \\\"<address>\\\",  string) The new bitcoin address\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The used chainpath\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetaddress\", \"\")\n+                            + HelpExampleCli(\"hdgetaddress\", \"100\")\n+                            + HelpExampleRpc(\"hdgetaddress\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CPubKey newKey;\n+    std::string keyChainPath;\n+    if (params.size() == 1 && params[0].isNum())\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetChildPubKeyAtIndex(emptyId, newKey, params[0].get_int()))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    else\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetNextChildPubKey(emptyId, newKey, keyChainPath))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    CKeyID keyID = newKey.GetID();\n+    \n+    pwalletMain->SetAddressBook(keyID, \"\", \"receive\");\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", CBitcoinAddress(keyID).ToString()));\n+    result.push_back(Pair(\"chainpath\", keyChainPath));\n+    return result;\n+}\n+\n+UniValue hdsendtoaddress(const UniValue& params, bool fHelp)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 269,
    "original_position": 251,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "c85a0b62455750098280bbb8fa5977596ca6cc81",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should be based on sendmany (not sendtoaddress) and take the chain to use for change as a parameter. The _existing_ RPCs and GUI should use the hdsetchain-configured default - no need for random keys.\n",
    "created_at": "2015-06-10T11:23:34Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32107917",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32107917"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32107917"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32107917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2698,
    "original_line": 2597,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108023",
    "pull_request_review_id": null,
    "id": 32108023,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTA4MDIz",
    "diff_hunk": "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 98,
    "original_position": 97,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "c85a0b62455750098280bbb8fa5977596ca6cc81",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Needs a check that the wallet format has been upgraded to support HD keys. The new format can be the default, but shouldn't upgrade unless -upgradewallet is used.\n",
    "created_at": "2015-06-10T11:25:43Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108023",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108023"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108023"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108023/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2527,
    "original_line": 2443,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108486",
    "pull_request_review_id": null,
    "id": 32108486,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTA4NDg2",
    "diff_hunk": "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 98,
    "original_position": 97,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "c85a0b62455750098280bbb8fa5977596ca6cc81",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think (didn't test) that the hd wallet format is backward compatible. No existing database key/values records got changed. Only new ones added.\n",
    "created_at": "2015-06-10T11:33:01Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108486",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108486"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108486"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2527,
    "original_line": 2443,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580541",
    "pull_request_review_id": null,
    "id": 32580541,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgwNTQx",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+/** hdpublic key for a persistant store. */\n+class CHDPubKey\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    CPubKey pubkey; //the acctual pubkey",
    "path": "src/wallet/hdkeystore.h",
    "position": null,
    "original_position": 21,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "3555883a506a415818eb240902fb46ebfbdf5c99",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/acctual/actual\n",
    "created_at": "2015-06-16T22:55:43Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580541",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580541"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580541"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 21,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580607",
    "pull_request_review_id": null,
    "id": 32580607,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgwNjA3",
    "diff_hunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+/** hdpublic key for a persistant store. */\n+class CHDPubKey\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    CPubKey pubkey; //the acctual pubkey\n+    unsigned int nChild; //child index\n+    HDChainID chainHash; //hash of the chains master pubkey\n+    std::string chainPath; //individual key chainpath like m/44'/0'/0'/0/1\n+    bool internal;\n+\n+    CHDPubKey()\n+    {\n+        SetNull();\n+    }\n+\n+    bool IsValid()\n+    {\n+        return pubkey.IsValid();\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDPubKey::CURRENT_VERSION;\n+        chainHash.SetNull();\n+        chainPath.clear();\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(pubkey);\n+        READWRITE(nChild);\n+        READWRITE(chainHash);\n+        READWRITE(chainPath);\n+        READWRITE(internal);\n+    }\n+};\n+\n+/** class for representing a hd chain of keys. */\n+class CHDChain\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+\n+    HDChainID chainHash; //hash() of the masterpubkey\n+    std::string chainPath; //something like \"m'/44'/0'/0'/c\"\n+    CExtPubKey externalPubKey;\n+    CExtPubKey internalPubKey; // pubkey.IsValid() == false means only use external chain\n+\n+    CHDChain()\n+    {\n+        SetNull();\n+    }\n+\n+    CHDChain(int64_t nCreateTime_)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    bool IsValid()\n+    {\n+        return externalPubKey.pubkey.IsValid();\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(nCreateTime);\n+        READWRITE(chainHash);\n+        READWRITE(chainPath);\n+        READWRITE(externalPubKey);\n+        READWRITE(internalPubKey);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDChain::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        chainHash.SetNull();\n+    }\n+};\n+\n+class CHDKeyStore : public CCryptoKeyStore\n+{\n+protected:\n+    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; //master seeds are stored outside of CHDChain (crypto)\n+    std::map<HDChainID, std::vector<unsigned char> > mapHDCryptedMasterSeeds;\n+    std::map<CKeyID, CHDPubKey> mapHDPubKeys; //all hd pubkeys of all chains\n+    std::map<HDChainID, CHDChain> mapChains; //all available chains\n+\n+    //!derive key from a CHDPubKey object\n+    bool DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const;\n+\n+public:\n+    //!add a master seed with a given pubkeyhash (memory only)\n+    virtual bool AddMasterSeed(const HDChainID& pubkeyhash, const CKeyingMaterial& masterSeed);\n+\n+    //!add a crypted master seed with a given pubkeyhash (memory only)\n+    virtual bool AddCryptedMasterSeed(const HDChainID& hash, const std::vector<unsigned char>& vchCryptedSecret);\n+\n+    //!encrypt existing uncrypted seeds and remove unencrypted data\n+    virtual bool EncryptSeeds();\n+\n+    //!export the master seed from a given chain id (hash of the master pub key)\n+    virtual bool GetMasterSeed(const HDChainID& hash, CKeyingMaterial& seedOut) const;\n+\n+    //!get the encrypted master seed of a giveb chain id\n+    virtual bool GetCryptedMasterSeed(const HDChainID& hash, std::vector<unsigned char>& vchCryptedSecret) const;\n+\n+    //!writes all available chain ids to a vector\n+    virtual bool GetAvailableChainIDs(std::vector<HDChainID>& chainIDs);\n+\n+    //!add a CHDPubKey object to the keystore (memory only)\n+    bool LoadHDPubKey(const CHDPubKey &pubkey);\n+\n+\n+    //!add a new chain to the keystore (memory only)\n+    bool AddChain(const CHDChain& chain);\n+\n+    //!writes a chain defined by given chainId to chainOut, returns false if not found\n+    bool GetChain(const HDChainID chainId, CHDChain& chainOut) const;\n+\n+    //!Derives a hdpubkey object in a given chain defined by chainId from the existing external oder internal chain root pub key",
    "path": "src/wallet/hdkeystore.h",
    "position": null,
    "original_position": 150,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "3555883a506a415818eb240902fb46ebfbdf5c99",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/oder\n",
    "created_at": "2015-06-16T22:56:57Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580607",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580607"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580607"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 150,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32764654",
    "pull_request_review_id": null,
    "id": 32764654,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzY0NjU0",
    "diff_hunk": "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 88,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "3555883a506a415818eb240902fb46ebfbdf5c99",
    "user": null,
    "body": "Should this not read `HelpExampleCli(\"hdaddchain\", \"\")` ? Since by providing \"set\" as an argument, you must also provide a seed ... I believe the intention was to provide a example run without providing a seed, which should just run as `hdaddchain` without arguments\n",
    "created_at": "2015-06-18T18:48:39Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32764654",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32764654"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32764654"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32764654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2434,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32821421",
    "pull_request_review_id": null,
    "id": 32821421,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODIxNDIx",
    "diff_hunk": "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 88,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "3555883a506a415818eb240902fb46ebfbdf5c99",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right. Will fix this.\n",
    "created_at": "2015-06-19T11:37:07Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32821421",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32821421"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32821421"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32821421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2434,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35359931",
    "pull_request_review_id": null,
    "id": 35359931,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzU5OTMx",
    "diff_hunk": "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+\n+    const unsigned int bip32MasterSeedLength = 32;\n+    CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n+    bool fGenerateMasterSeed = true;\n+    HDChainID chainId;\n+    std::string chainPath = hd_default_chainpath;\n+    if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n+        chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n+\n+    if (params.size() > 1 && params[1].isStr())\n+    {\n+        if (!IsHex(params[1].get_str()))\n+            throw runtime_error(\"HD master seed must encoded in hex\");\n+\n+        std::vector<unsigned char> seed = ParseHex(params[1].get_str());\n+        if (seed.size() != bip32MasterSeedLength)\n+            throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n+\n+        memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n+        memory_cleanse(&seed[0], bip32MasterSeedLength);\n+        fGenerateMasterSeed = false;\n+    }\n+\n+    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, chainId);\n+    if (fGenerateMasterSeed)\n+        result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+    result.push_back(Pair(\"chainid\", chainId.GetHex()));\n+    return result;\n+}\n+\n+UniValue hdsetchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"hdsetchain <chainid>\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"chainid\\\"        (string|hex, required) chainid is a bitcoin hash of the master public key of the corresponding chain.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdsetchain\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    HDChainID chainId;\n+    if (!IsHex(params[0].get_str()))\n+        throw runtime_error(\"Chain id format is invalid\");\n+\n+    chainId.SetHex(params[0].get_str());\n+\n+    if (!pwalletMain->HDSetActiveChainID(chainId))\n+        throw runtime_error(\"Could not set active chain\");\n+\n+    return NullUniValue;\n+}\n+\n+UniValue hdgetinfo(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"hdgetinfo\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"chainid\\\" : \\\"<chainid>\\\",  string) A bitcoinhash of the master public key\\n\"\n+                            \"  \\\"creationtime\\\" : The creation time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The chainpath (like m/44'/0'/0'/c)\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetinfo\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::vector<HDChainID> chainIDs;\n+    if (!pwalletMain->GetAvailableChainIDs(chainIDs))\n+        throw runtime_error(\"Could not load chain ids\");\n+\n+    UniValue result(UniValue::VARR);\n+    BOOST_FOREACH(const HDChainID& chainId, chainIDs)\n+    {\n+        CHDChain chain;\n+        if (!pwalletMain->GetChain(chainId, chain))\n+            throw runtime_error(\"Could not load chain\");\n+\n+        UniValue chainObject(UniValue::VOBJ);\n+        chainObject.push_back(Pair(\"chainid\", chainId.GetHex()));\n+        chainObject.push_back(Pair(\"creationtime\", chain.nCreateTime));\n+        chainObject.push_back(Pair(\"chainpath\", chain.chainPath));\n+\n+        result.push_back(chainObject);\n+    }\n+\n+    return result;\n+}\n+\n+UniValue hdgetaddress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+                            \"hdgetaddress (<childindex>)\\n\"\n+                            \"\\nReturns a Bitcoin address for receiving payments.\\n\"\n+                            \"\\nAutomatically uses the next available childindex if no index is given\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"childindex\\\"        (numeric, optional) child key index. ATTENTION: automatic index counting will start at the highes available child key index\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"address\\\" : \\\"<address>\\\",  string) The new bitcoin address\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The used chainpath\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetaddress\", \"\")\n+                            + HelpExampleCli(\"hdgetaddress\", \"100\")\n+                            + HelpExampleRpc(\"hdgetaddress\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CPubKey newKey;\n+    std::string keyChainPath;\n+    if (params.size() == 1 && params[0].isNum())\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetChildPubKeyAtIndex(emptyId, newKey, params[0].get_int()))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    else\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetNextChildPubKey(emptyId, newKey, keyChainPath))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    CKeyID keyID = newKey.GetID();\n+    \n+    pwalletMain->SetAddressBook(keyID, \"\", \"receive\");\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", CBitcoinAddress(keyID).ToString()));\n+    result.push_back(Pair(\"chainpath\", keyChainPath));\n+    return result;\n+}\n+\n+UniValue hdsendtoaddress(const UniValue& params, bool fHelp)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 269,
    "original_position": 251,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "c85a0b62455750098280bbb8fa5977596ca6cc81",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree with @luke-jr. The hd'ness should be used by default in future. But maybe to give a save transition, a first version would keep the hd functions separated. Users could decide where they want to use hd and where not. Maybe not everyone likes to use hd change keys for current non-hd inputs.\n\nBut right, this PR would slightly mix hd and non-hdness anyway. Unspents and balance would be shared.\n",
    "created_at": "2015-07-23T19:14:12Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r35359931",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35359931"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r35359931"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/35359931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2698,
    "original_line": 2597,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46354321",
    "pull_request_review_id": null,
    "id": 46354321,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MzIx",
    "diff_hunk": "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 98,
    "original_position": 97,
    "commit_id": "4ed902c14d86f2aed6669dffc71940bdf61e19ba",
    "original_commit_id": "c85a0b62455750098280bbb8fa5977596ca6cc81",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If private keys are not stored, then old software won't be able to use the wallet...\n",
    "created_at": "2015-12-01T23:10:20Z",
    "updated_at": "2015-12-23T15:05:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r46354321",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46354321"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r46354321"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/46354321/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2527,
    "original_line": 2443,
    "side": "RIGHT"
  }
]