fanquake,2015-06-16T22:55:24Z,One warning while compiling \n\n```\n  CXX      qt/qt_libbitcoinqt_a-walletmodeltransaction.o\nqt/walletmodeltransaction.cpp:20:5: warning: delete called on 'CReserveKey' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]\n    delete keyChange;\n    ^\n1 warning generated.\n```\n\nhdgetaddress doesn't seem to work?\n\n```\ntinyformat: Not enough conversion specifiers,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-112596561,112596561,
jonasschnelli,2015-06-17T06:26:55Z,@fanquake: thanks for the tests. Will have a look at it. Before calling `hdgetaddress` did you call `hdaddchain`?\n,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-112670705,112670705,
rebroad,2015-06-18T13:56:03Z,"can this be used to import master seeds? If not, would this require much additional work?\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-113164322,113164322,
jonasschnelli,2015-06-19T11:41:15Z,"@rebroad: right. This PR would enabled HD features in the main bitcoin-core wallet. It won't affect the current ways of generating keys and sending coins. It's totally independent form the rest of the wallet features. So it is relatively save to use/test this.\n\nYou can import hd seeds, but only in raw hex. There is no support for Bip39 word lists. I'm pretty sure you'll find a tool to convert bi",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-113485620,113485620,
afk11,2015-06-25T02:32:55Z,"I haven't gotten to testing this yet, but why did you not decide to accept a base58 encoded key?\n\nThe first reason against accepting raw hex is there's no way to validate the key without visually comparing. And extended keys can often look similar at the start. xpub/xprv's include a checksum, so the user can be sure they entered the right thing.\n\nThe other reason is extensibility, since adding",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-115075308,115075308,
jonasschnelli,2015-06-25T06:41:40Z,"@afk11: The lack of base58check encoded master keys is only because it's not implemented yet (didn't find time to do it). But it's very trivial to add. I decided to export the master seed hex to potentially allow to create a bip39 mnemonic (there could be a tool hex-seed->bip39mnemonic). IIRC, you can't create a bip39 mnemonic from the master private key (not sure). Somehow i feel to store a hd ch",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-115125281,115125281,
jonasschnelli,2015-07-23T10:44:37Z,Rebased and added the base58check encoded master pub/priv key to the `hdaddchain` RPC output.\n,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124054687,124054687,
jonasschnelli,2015-07-23T19:58:20Z,Added some commits on top to address nits and add a feature for creating a hd chain of keys with a existing base58check encoded extended master private key (`xpriv...`).\nSupporting watch only wallets with a given base58check encoded pub key of the external key chain will follow.\n,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124224002,124224002,
jonasschnelli,2015-07-23T20:04:59Z,"Most of the bip32 work is also included in CoreWallet (https://github.com/jonasschnelli/bitcoin/tree/2015/05/corewallet), which aims to be a replacement/twin for the current wallet with the option of completely split it of, of the bitcoin-core repository.\n\nThe PR is an option for quicker adding bip32 supporting to bitcoin-core (for the ones who can compile bitcoin-core by them self) or for the c",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124225309,124225309,
jgarzik,2015-07-23T20:14:46Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124227433,124227433,
afk11,2015-07-27T17:36:54Z,"@jonasschnelli oops, missed the notification on this.. You're right you can't go from hex to bip39 mnemonic, as mnemonics have pbkdf2 applied to them.  +1 on base58 also.\n\nI noticed you have a hard limit of 32 bytes of hex for the provided seed. This isn't correct as BIP32 doesn't specify a size, but rather states the binary seed may be short, or as long as 512 bits (128-256 recommended), since ",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-125282575,125282575,
jonasschnelli,2015-07-27T17:46:05Z,"@afk11: Meh. Right. I see your point. So you are saying once you have created a bip32 chain with a entropy over `GetRandBytes()` you can't build a bip39 wordlist (sorry, not familiar with bip39)?\n\nThis would definitively mean using base58c for the seed output, or even better, just the master private key in base58c. Or do you see any reason to keep the seed?\n\nMaybe it should also support import",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-125284564,125284564,
afk11,2015-07-27T18:34:38Z,"Yes, that is correct - the entropy used to produce the bip39 mnemonic is different to the seed that is produced.\n\nI would suggest only displaying the base58 master key. It would keep the API consistent, since in certain situations the initial seed used to yield the master key won't be available, and in all other `dumphd...` cases it'll probably just be the xprv/xpub. \n\nThere isn't much reason ",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-125299329,125299329,
rnicoll,2015-08-06T11:01:11Z,"Could you point me at some background on the concerns about BIP 39 and security please?\n\nSeed interoperability with other wallets would seem like one of the major advantages to HD wallet support, although being about to import is IMHO the most important part of that use case, so reference client can be used to recover where another wallet fails.\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128327535,128327535,
jonasschnelli,2015-08-06T12:27:43Z,@rnicoll: Mostly because Bip39 can harm your security:\n- https://bitcointalk.org/index.php?topic=812894.msg10907427#msg10907427\n- https://bitcointalk.org/index.php?topic=1138063.msg12013904#msg12013904\n\nThe 2048 kdf rounds might be okay for embedded USB hardware wallet. But IMO nothing that i'd like to have on my full-node wallet.\n\nBut i'm pretty sure you can export/convert a bip39 memonic i,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128349008,128349008,
rnicoll,2015-08-06T13:27:49Z,"@jonasschnelli Thanks for the links, interesting reading. Will definitely take a look at patching hdaddchain for imports\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128364002,128364002,
jonasschnelli,2015-08-06T13:35:37Z,"@rnicoll: this PR is out of sync with the corewallet branch (which is more stable and has more features).\nIf you add a patch, i think it makes much more sense there: https://github.com/jonasschnelli/bitcoin/\n\nI will try to update this PR after stabilizing the corewallet hd features. \nThe reason for the parallelism: https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-124225309\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128367566,128367566,
rnicoll,2015-08-06T13:59:07Z,"@jonasschnelli Noted, thanks for letting me know. Mind if I pull this into an altcoin reference client? Would mean it goes out to general users Oct/Nov this year, and might be a good way of getting further testing? If it's not helpful will pick the change up after merge into Bitcoin Core instead.\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128375169,128375169,
jonasschnelli,2015-08-06T14:11:53Z,"@rnicoll: Feel free to play, share, copy this PR. But mind, it's pretty untested. I opened this PR for people who likes to use HD features _now_ together with the current bitcoin-core wallet. Long term i think the corewallet branch (https://github.com/jonasschnelli/bitcoin/) makes more sense. People can start testing the new features in parallel to the existing wallet... if it reaches a stable lev",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128381032,128381032,
jonasschnelli,2015-08-07T12:29:35Z,"Today there was a discussion about the Bip32 support on IRC (http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/08/07#l1438905927.0).\nThis PR uses public key derivation which has significant security weakness, but allows xpubkey only wallets.\nBut by default the wallet should use privatekey derivation together with keypools.\n\nThe multiple bip32 chains per wallet can also be dangerous because one",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128687938,128687938,
rnicoll,2015-08-07T12:49:37Z,"It sounds like my use-case of importing BIP 39 seeds as a recovery might be better implemented as a sweep (i.e. it scans for any transactions to keys from the seed, and then puts the relevant non-master public/private keys pairs into the wallet, rather than keeping the master keys). Alternative would be to sweep the funds to wallet addresses, but that introduces privacy concerns (clearly identifie",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128691915,128691915,
jonasschnelli,2015-08-07T19:08:41Z,Importing a master seed (over bip39 phrase or over master extended private key) should certainly remind the user (some warnings and confirmations) that it is possible that the seed is already compromised (because of the seed transfer or because of leaks in the other wallet software).\n\n> [...] i.e. it scans for any transactions to keys from the seed [...]\n\nThis is very hard to achieve in a stab,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-128797542,128797542,
slush0,2015-09-25T00:23:57Z,"Slightly offtopic, but: Uh, I don't understand that neverending discussions about BIP39 ""security"". The fact that PBKDF iterations may not be ""slow enough"" does not mean the concept is insecure. Such hashing is just additional security protection against bruteforcing, but BIP39 produced seeds are completely safe, they use at least 256 bits of entropy (24 words) and they're NOT ""brain wallets"" desp",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143088392,143088392,
dcousens,2015-09-25T06:08:21Z,"> Recommend users to use external tools like bip32.org to convert seed"" has huge practical impacts to real security.\n\nIMHO, all other points aside,  this would be my biggest concern.\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143137987,143137987,
sipa,2015-09-25T23:40:07Z,"@slush0 I know that BIP39 has been around for a while and is supported by multiple applications. However, what exactly do you think should be implemented? As I read it, BIP39 can be interpreted in two ways:\n- Either on import you decode the mnemonic and verify the checksum. This means BIP39 requires a normative dictionary (or set thereof), and results in a simple scheme that discourages brainwall",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143377469,143377469,
dcousens,2015-09-26T06:27:25Z,"> but does not have the plausible deniability it aims to have\n\nMy understanding was that that was only a claim if you used a `passphrase`?\nIn any case, the primary benefit of BIP39 is human-readable cross-compatible BIP32 seeds,  I don't think its potential use as a brain wallet is why it has seen widespread adoption.\n\n> In addition to that, 2048 iterations is very low these days, and will co",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-143403310,143403310,
btcdrak,2015-10-09T16:04:39Z,needs rebase\n,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-146912063,146912063,
afk11,2015-10-22T16:23:26Z,"I don't think BIP39 should be packaged into this feature. \n\nI suspect for a reasonable integration, it's would not be ideal having different passwords protecting different parts of the wallet. Similarly, conditionally storing mnemonics and perhaps their passwords adds a lot of complexity to work around. \n\nA stateless mnemonic to xprv RPC command could be offered to help people using BIP39, but",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-150279242,150279242,
rubensayshi,2015-10-23T10:08:41Z,"something to keep in mind with BIP39 is that because `seed = hash(mnemonic, pass)` it doesn't allow for changing passwords :/\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-150534616,150534616,
dcousens,2015-10-23T10:11:13Z,"@rubensayshi, at least,  not without transferring all the BTC. \n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-150535206,150535206,
dcousens,2015-12-02T02:04:07Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-161155983,161155983,
jonasschnelli,2015-12-23T15:10:13Z,"Rebased and updated.\n- Not the default keypath is `m/c'` = (`m/0'/0'` for first external key and `m/1'/0'` for first internal/change key).\n- Support for private child key derivation (default).\n\nThis PR is relatively complex and are meant for user who are seeking full control over their hd structure. I have plans to also open a smaller, simpler HD patch.\n",https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-166920098,166920098,
jonasschnelli,2016-05-10T09:26:18Z,Closing in favor of #8035.\nSome parts of this PR could be used to extend HD functionality if and once #8035 has been merged.\n,https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-218105124,218105124,
luke-jr,2015-06-10T11:23:34Z,This should be based on sendmany (not sendtoaddress) and take the chain to use for change as a parameter. The _existing_ RPCs and GUI should use the hdsetchain-configured default - no need for random keys.\n,https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32107917,32107917,src/wallet/rpcwallet.cpp
luke-jr,2015-06-10T11:25:43Z,"Needs a check that the wallet format has been upgraded to support HD keys. The new format can be the default, but shouldn't upgrade unless -upgradewallet is used.\n",https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108023,32108023,src/wallet/rpcwallet.cpp
jonasschnelli,2015-06-10T11:33:01Z,I think (didn't test) that the hd wallet format is backward compatible. No existing database key/values records got changed. Only new ones added.\n,https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108486,32108486,src/wallet/rpcwallet.cpp
fanquake,2015-06-16T22:55:43Z,s/acctual/actual\n,https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580541,32580541,src/wallet/hdkeystore.h
fanquake,2015-06-16T22:56:57Z,s/oder\n,https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580607,32580607,src/wallet/hdkeystore.h
,2015-06-18T18:48:39Z,"Should this not read `HelpExampleCli(""hdaddchain"", """")` ? Since by providing ""set"" as an argument, you must also provide a seed ... I believe the intention was to provide a example run without providing a seed, which should just run as `hdaddchain` without arguments\n",https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32764654,32764654,src/wallet/rpcwallet.cpp
jonasschnelli,2015-06-19T11:37:07Z,Right. Will fix this.\n,https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32821421,32821421,src/wallet/rpcwallet.cpp
jonasschnelli,2015-07-23T19:14:12Z,"I agree with @luke-jr. The hd'ness should be used by default in future. But maybe to give a save transition, a first version would keep the hd functions separated. Users could decide where they want to use hd and where not. Maybe not everyone likes to use hd change keys for current non-hd inputs.\n\nBut right, this PR would slightly mix hd and non-hdness anyway. Unspents and balance would be share",https://github.com/bitcoin/bitcoin/pull/6265#discussion_r35359931,35359931,src/wallet/rpcwallet.cpp
luke-jr,2015-12-01T23:10:20Z,"If private keys are not stored, then old software won't be able to use the wallet...\n",https://github.com/bitcoin/bitcoin/pull/6265#discussion_r46354321,46354321,src/wallet/rpcwallet.cpp
