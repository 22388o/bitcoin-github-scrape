[
  {
    "sha": "1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTYwN2U3YThkOTFkZDllNDBlZDI1M2ZhMDc0NzgzNmQ1NTZiNWE2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-01-15T01:44:32Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-07-22T17:09:03Z"
      },
      "message": "Change CheckInputs() to only validate scripts once\n\nPreviously CheckInputs() could invoke a script twice to determine if a script\nfailure was due to standardness rules. However, it only performed this in\nsingle-threaded validation mode, and it directly accessed policy variables to\nmake this determination (even though the caller was passing in the desired\nscript flags to use).\n\nThe policy vs consensus script flags comparison seems out of touch with current\nnetwork deployments; the only MANDATORY script flag is P2SH, even though many\nother consensus changes have been deployed since. However, adding further flags\nto the MANDATORY set risks making the p2p behavior overly restrictive by\ndisconnecting unupgraded peers unnecessarily.\n\nMoreover, AcceptToMemoryPoolWorker() already invokes CheckInputs multiple\ntimes, with different script flags, to detect certain kinds of segwit\nvalidation errors. Given that the caller is responsible for passing in the\ncorrect validation flags, it feels like a layer violation for CheckInputs() to\nbe re-running checks with different script flags by itself.\n\nThis patch moves all responsibility for determining which script flags are\nmandatory to the caller, so CheckInputs() will now always return CONSENSUS for\nany script failures. The caller can rewrite the error code itself, eg if\npolicy-flags were included.\n\nThis patch also changes the ban behavior for peers sending transactions with\ninvalid scripts; we will no longer disconnect such peers. It was already\ntrivial for an adversary to mutate a transaction to violate a policy rule,\npreviously, in order to relay a transaction and avoid a ban, so we were not\nrelying on the ban behavior previously.\n\nAs this results in changes to the reject reasons and codes we can return, many\nof the tests have been updated as well.",
      "tree": {
        "sha": "11ddfe2bbb11701906b94e8784493461ce836fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11ddfe2bbb11701906b94e8784493461ce836fd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51a6e2c4192913c9c18507d8dfb3302500b26cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51a6e2c4192913c9c18507d8dfb3302500b26cc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51a6e2c4192913c9c18507d8dfb3302500b26cc3"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 53,
      "deletions": 63
    },
    "files": [
      {
        "sha": "e503f49d6429b0936c6dab9a6ff992cd064be8aa",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -70,9 +70,6 @@ static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VE\n                                                              SCRIPT_VERIFY_WITNESS_PUBKEYTYPE |\n                                                              SCRIPT_VERIFY_CONST_SCRIPTCODE;\n \n-/** For convenience, standard but not mandatory verify flags. */\n-static constexpr unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n-\n /** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n static constexpr unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                                LOCKTIME_MEDIAN_TIME_PAST;"
      },
      {
        "sha": "e464c068d19841eef84aefea772213a8b12f6ebe",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 34,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -767,6 +767,21 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         PrecomputedTransactionData txdata(tx);\n         if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, false, txdata)) {\n+            // Assume that this is due to a policy violation, rather than\n+            // re-checking with the consensus flags. Separating policy rules\n+            // from consensus rules is tricky, because we want to be able to\n+            // support old peers who may not be aware of recent consensus\n+            // changes; returning NOT_STANDARD here is maximally permissive.\n+            // Anyway re-checking the scripts with a different set of flags\n+            // wastes CPU as well (particularly if an attacker is constructing\n+            // transactions designed to waste our CPU).\n+            // Note that CheckInputs now always returns CONSENSUS on failure.\n+            state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, state.GetRejectReason(), state.GetDebugMessage());\n+\n+            // TODO: We only do these script checks to determine when we cannot\n+            // add a txid to our reject filter; an improvement at the p2p layer\n+            // could allow us to drop these checks and further speed up\n+            // validation.\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n@@ -1304,30 +1319,18 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n                 } else if (!check()) {\n-                    if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {\n-                        // Check whether the failure was caused by a\n-                        // non-mandatory script verification check, such as\n-                        // non-standard DER encodings or non-null dummy\n-                        // arguments; if so, ensure we return NOT_STANDARD\n-                        // instead of CONSENSUS to avoid downstream users\n-                        // splitting the network between upgraded and\n-                        // non-upgraded nodes by banning CONSENSUS-failing\n-                        // data providers.\n-                        CScriptCheck check2(coin.out, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n-                        if (check2())\n-                            return state.Invalid(ValidationInvalidReason::TX_NOT_STANDARD, false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n-                    }\n-                    // MANDATORY flag failures correspond to\n-                    // ValidationInvalidReason::CONSENSUS. Because CONSENSUS\n-                    // failures are the most serious case of validation\n-                    // failures, we may need to consider using\n-                    // RECENT_CONSENSUS_CHANGE for any script failure that\n-                    // could be due to non-upgraded nodes which we may want to\n-                    // support, to avoid splitting the network (but this\n-                    // depends on the details of how net_processing handles\n-                    // such errors).\n-                    return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n+                    // NOTE: We return CONSENSUS as the reason here, even\n+                    // though it's possible that the script flags that were\n+                    // passed in do not match the actual consensus rules in\n+                    // effect, for instance some of the script flags may\n+                    // reflect standard-ness rules that we apply during mempool\n+                    // acceptance. We leave it to the caller of this function\n+                    // to pass in the correct consensus flags anyway, so the\n+                    // caller can differentiate between a standardness failure\n+                    // and a consensus failure with respect to whatever\n+                    // consensus rules are in effect by calling this function\n+                    // again.\n+                    return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, strprintf(\"script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n \n@@ -1909,16 +1912,6 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : nullptr)) {\n-                if (state.GetReason() == ValidationInvalidReason::TX_NOT_STANDARD) {\n-                    // CheckInputs may return NOT_STANDARD for extra flags we passed,\n-                    // but we can't return that, as it's not defined for a block, so\n-                    // we reset the reason flag to CONSENSUS here.\n-                    // In the event of a future soft-fork, we may need to\n-                    // consider whether rewriting to CONSENSUS or\n-                    // RECENT_CONSENSUS_CHANGE would be more appropriate.\n-                    state.Invalid(ValidationInvalidReason::CONSENSUS, false,\n-                              state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\n-                }\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n                     tx.GetHash().ToString(), FormatStateMessage(state));\n             }"
      },
      {
        "sha": "896d47624e8cf68f40bec477bde9ac3bf4639043",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -156,8 +156,8 @@ def get_tx(self):\n \n \n class InvalidOPIFConstruction(BadTxTemplate):\n-    reject_reason = \"mandatory-script-verify-flag-failed (Invalid OP_IF construction)\"\n-    expect_disconnect = True\n+    reject_reason = \"script-verify-flag-failed (Invalid OP_IF construction)\"\n+    expect_disconnect = False\n     valid_in_block = True\n \n     def get_tx(self):"
      },
      {
        "sha": "b41376bfea80f46ded50cfa79e6a2247ea8d3f3d",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -132,7 +132,7 @@ def run_test(self):\n         # First we show that this tx is valid except for CLTV by getting it\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n-            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Negative locktime)'}],\n+            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: script-verify-flag-failed (Negative locktime)'}],\n             self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0)\n         )\n \n@@ -141,7 +141,7 @@ def run_test(self):\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()\n \n-        with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputs on {} failed with non-mandatory-script-verify-flag (Negative locktime)'.format(block.vtx[-1].hash)]):\n+        with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputs on {} failed with script-verify-flag-failed (Negative locktime)'.format(block.vtx[-1].hash)]):\n             self.nodes[0].p2p.send_and_ping(msg_block(block))\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             self.nodes[0].p2p.sync_with_ping()"
      },
      {
        "sha": "6636354f73195ee9b85feb6631b58e62f8a75e99",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -117,7 +117,7 @@ def run_test(self):\n         # First we show that this tx is valid except for DERSIG by getting it\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n-            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Non-canonical DER signature)'}],\n+            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: script-verify-flag-failed (Non-canonical DER signature)'}],\n             self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0)\n         )\n \n@@ -127,7 +127,7 @@ def run_test(self):\n         block.rehash()\n         block.solve()\n \n-        with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputs on {} failed with non-mandatory-script-verify-flag (Non-canonical DER signature)'.format(block.vtx[-1].hash)]):\n+        with self.nodes[0].assert_debug_log(expected_msgs=['CheckInputs on {} failed with script-verify-flag-failed (Non-canonical DER signature)'.format(block.vtx[-1].hash)]):\n             self.nodes[0].p2p.send_and_ping(msg_block(block))\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             self.nodes[0].p2p.sync_with_ping()"
      },
      {
        "sha": "1f7300302eb4a7bdd6f6d8d9bac2de7a2299a60e",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -20,7 +20,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n-NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n+NULLDUMMY_ERROR = \"script-verify-flag-failed (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n \n def trueDummy(tx):\n     scriptSig = CScript(tx.vin[0].scriptSig)"
      },
      {
        "sha": "9dec11e5e976c9353cbab8ec8730dff4c6d06f8f",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -157,8 +157,8 @@ def run_test(self):\n         self.skip_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][0], True)  # block 427\n \n         self.log.info(\"Verify unsigned p2sh witness txs without a redeem script are invalid\")\n-        self.fail_accept(self.nodes[2], \"mandatory-script-verify-flag\", p2sh_ids[NODE_2][WIT_V0][1], False)\n-        self.fail_accept(self.nodes[2], \"mandatory-script-verify-flag\", p2sh_ids[NODE_2][WIT_V1][1], False)\n+        self.fail_accept(self.nodes[2], \"script-verify-flag\", p2sh_ids[NODE_2][WIT_V0][1], False)\n+        self.fail_accept(self.nodes[2], \"script-verify-flag\", p2sh_ids[NODE_2][WIT_V1][1], False)\n \n         self.nodes[2].generate(4)  # blocks 428-431\n \n@@ -172,13 +172,13 @@ def run_test(self):\n \n         self.log.info(\"Verify default node can't accept txs with missing witness\")\n         # unsigned, no scriptsig\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V0][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", wit_ids[NODE_0][WIT_V1][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False)\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False)\n+        self.fail_accept(self.nodes[0], \"script-verify-flag\", wit_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], \"script-verify-flag\", wit_ids[NODE_0][WIT_V1][0], False)\n+        self.fail_accept(self.nodes[0], \"script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False)\n+        self.fail_accept(self.nodes[0], \"script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False)\n         # unsigned with redeem script\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False, witness_script(False, self.pubkey[0]))\n-        self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n+        self.fail_accept(self.nodes[0], \"script-verify-flag\", p2sh_ids[NODE_0][WIT_V0][0], False, witness_script(False, self.pubkey[0]))\n+        self.fail_accept(self.nodes[0], \"script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n \n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n         assert self.nodes[2].getblock(blockhash, False) != self.nodes[0].getblock(blockhash, False)\n@@ -193,10 +193,10 @@ def run_test(self):\n             assert self.nodes[0].getrawtransaction(tx_id, False, blockhash) == tx.serialize_without_witness().hex()\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)', wit_ids[NODE_2][WIT_V1][2], sign=False)\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', p2sh_ids[NODE_2][WIT_V0][2], sign=False, redeem_script=witness_script(False, self.pubkey[2]))\n-        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)', p2sh_ids[NODE_2][WIT_V1][2], sign=False, redeem_script=witness_script(True, self.pubkey[2]))\n+        self.fail_accept(self.nodes[2], 'script-verify-flag-failed (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n+        self.fail_accept(self.nodes[2], 'script-verify-flag-failed (Witness program was passed an empty witness) (code 64)', wit_ids[NODE_2][WIT_V1][2], sign=False)\n+        self.fail_accept(self.nodes[2], 'script-verify-flag-failed (Witness program hash mismatch) (code 64)', p2sh_ids[NODE_2][WIT_V0][2], sign=False, redeem_script=witness_script(False, self.pubkey[2]))\n+        self.fail_accept(self.nodes[2], 'script-verify-flag-failed (Witness program was passed an empty witness) (code 64)', p2sh_ids[NODE_2][WIT_V1][2], sign=False, redeem_script=witness_script(True, self.pubkey[2]))\n \n         self.log.info(\"Verify default node can now use witness txs\")\n         self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True)  # block 432"
      },
      {
        "sha": "f1fd2c0318a25679a4347a5025725ba39d97959b",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a607e7a8d91dd9e40ed253fa0747836d556b5a6/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "patch": "@@ -525,7 +525,7 @@ def test_v0_outputs_arent_spendable(self):\n             # without a witness is invalid).\n             # Note: The reject reason for this failure could be\n             # 'block-validation-failed' (if script check threads > 1) or\n-            # 'non-mandatory-script-verify-flag (Witness program was passed an\n+            # 'script-verify-flag-failed (Witness program was passed an\n             # empty witness)' (otherwise).\n             # TODO: support multiple acceptable reject reasons.\n             test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=False)\n@@ -751,14 +751,14 @@ def test_p2sh_witness(self):\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n         with self.nodes[0].assert_debug_log(\n-                expected_msgs=(spend_tx.hash, 'was not accepted: non-mandatory-script-verify-flag (Witness program was passed an empty witness)')):\n+                expected_msgs=(spend_tx.hash, 'was not accepted: script-verify-flag-failed (Witness program was passed an empty witness)')):\n             test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the scriptSig, should also fail.\n         spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n         with self.nodes[0].assert_debug_log(\n-                expected_msgs=(spend_tx.hash, 'was not accepted: mandatory-script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element)')):\n+                expected_msgs=(spend_tx.hash, 'was not accepted: script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element)')):\n             test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n@@ -1431,7 +1431,7 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=\"reserved for soft-fork upgrades\")\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=\"script-verify-flag-failed\")\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n@@ -1524,7 +1524,7 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, 'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, 'script-verify-flag-failed (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n@@ -1544,7 +1544,7 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, 'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, 'script-verify-flag-failed (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n@@ -1561,7 +1561,7 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, 'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, 'script-verify-flag-failed (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)"
      }
    ]
  },
  {
    "sha": "37652b0b621a0825785bfe2af47ad473265d85bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzY1MmIwYjYyMWEwODI1Nzg1YmZlMmFmNDdhZDQ3MzI2NWQ4NWJi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-05-15T15:34:48Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-07-22T17:14:30Z"
      },
      "message": "[refactor] Eliminate default argument to ATMP\n\nDefault arguments make review easier when adding a single new argument to a\nwidely called function, but then are harder to keep track of (and ensure\ncorrectness of callers) when adding new arguments in the future.",
      "tree": {
        "sha": "f69509c51d14ab3ba999289125b4176592187e6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f69509c51d14ab3ba999289125b4176592187e6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37652b0b621a0825785bfe2af47ad473265d85bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37652b0b621a0825785bfe2af47ad473265d85bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37652b0b621a0825785bfe2af47ad473265d85bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37652b0b621a0825785bfe2af47ad473265d85bb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a607e7a8d91dd9e40ed253fa0747836d556b5a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a607e7a8d91dd9e40ed253fa0747836d556b5a6"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8efa2b0d3ca87cc1ac7cfe2eddc9e0f37a470d72",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -40,7 +40,7 @@ static void AssembleBlock(benchmark::State& state)\n \n         for (const auto& txr : txs) {\n             CValidationState state;\n-            bool ret{::AcceptToMemoryPool(::mempool, state, txr, nullptr /* pfMissingInputs */, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n+            bool ret{::AcceptToMemoryPool(::mempool, state, txr, nullptr /* pfMissingInputs */, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0, /* test_accept */ false)};\n             assert(ret);\n         }\n     }"
      },
      {
        "sha": "2741107755b076f9930eb2661f39a62b28567265",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -153,7 +153,7 @@ class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n     {\n         LockAssertion lock(::cs_main);\n         return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n-            false /* bypass limits */, absurd_fee);\n+            false /* bypass limits */, absurd_fee, /* test_accept */ false);\n     }\n \n     using UniqueLock::UniqueLock;"
      },
      {
        "sha": "44c8fd7da0db204d39db6364e8844e71ccd70e4f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -1809,7 +1809,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n         CValidationState orphan_state;\n \n         if (setMisbehaving.count(fromPeer)) continue;\n-        if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &fMissingInputs2, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+        if (AcceptToMemoryPool(mempool, orphan_state, porphanTx, &fMissingInputs2, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */, false /* test_accept */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanTx, connman);\n             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n@@ -2496,7 +2496,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         std::list<CTransactionRef> lRemovedTxn;\n \n         if (!AlreadyHave(inv) &&\n-            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+            AcceptToMemoryPool(mempool, state, ptx, &fMissingInputs, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */, false /* test_accept */)) {\n             mempool.check(pcoinsTip.get());\n             RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {"
      },
      {
        "sha": "a1fd70a9f03a7c7ffeb494b2d7bdce3f15c9b7b7",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -32,7 +32,7 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx,\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee)) {\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee, false /* test_accept */)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_REJECTED;"
      },
      {
        "sha": "7918a3d23e4ff086ffcbeeca645ba30beed98b6d",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -42,7 +42,8 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n                 nullptr /* pfMissingInputs */,\n                 nullptr /* plTxnReplaced */,\n                 true /* bypass_limits */,\n-                0 /* nAbsurdFee */));\n+                0 /* nAbsurdFee */,\n+                false /* test_accept */));\n \n     // Check that the transaction hasn't been added to mempool.\n     BOOST_CHECK_EQUAL(mempool.size(), initialPoolSize);"
      },
      {
        "sha": "699c410d55b0118717267a35790952ba04c1de2e",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -24,7 +24,7 @@ ToMemPool(const CMutableTransaction& tx)\n \n     CValidationState state;\n     return AcceptToMemoryPool(mempool, state, MakeTransactionRef(tx), nullptr /* pfMissingInputs */,\n-                              nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */);\n+                              nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */, false /* test_accept */);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "f214d98a7ad5accfbb972cfd32b4581ef12d8a4c",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -288,7 +288,8 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n                     /* pfMissingInputs */ &ignored,\n                     &plTxnReplaced,\n                     /* bypass_limits */ false,\n-                    /* nAbsurdFee */ 0));\n+                    /* nAbsurdFee */ 0,\n+                    /* test_accept */ false));\n             }\n         }\n "
      },
      {
        "sha": "f1d35bfdf67835911fa193da39336c8079fb1a3b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -363,7 +363,7 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool,\n         CValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n             !AcceptToMemoryPool(mempool, stateDummy, *it, nullptr /* pfMissingInputs */,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */)) {\n+                                nullptr /* plTxnReplaced */, true /* bypass_limits */, 0 /* nAbsurdFee */, false /* test_accept */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);"
      },
      {
        "sha": "0d4676a39574cb8a4b2781405bb9d3b9ca7cbca8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37652b0b621a0825785bfe2af47ad473265d85bb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37652b0b621a0825785bfe2af47ad473265d85bb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=37652b0b621a0825785bfe2af47ad473265d85bb",
        "patch": "@@ -284,7 +284,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      }
    ]
  },
  {
    "sha": "bae3f0f8eac2818bc00edddae709105dc68fbcab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWUzZjBmOGVhYzI4MThiYzAwZWRkZGFlNzA5MTA1ZGM2OGZiY2Fi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-01-15T01:53:10Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-08-01T16:47:32Z"
      },
      "message": "Parallelize script validation in AcceptToMemoryPool()\n\nWhen receiving transactions over the network, use script check threads (if\navailable) to reduce worst-case message handling time.\n\nContinue to use single-threaded validation for rpc invocations (which results\nin more descriptive error messages, on failure), where DoS is not a significant\nconcern.",
      "tree": {
        "sha": "762291831c64cfc0b4360dd11315ed2215521d80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/762291831c64cfc0b4360dd11315ed2215521d80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bae3f0f8eac2818bc00edddae709105dc68fbcab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae3f0f8eac2818bc00edddae709105dc68fbcab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bae3f0f8eac2818bc00edddae709105dc68fbcab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae3f0f8eac2818bc00edddae709105dc68fbcab/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37652b0b621a0825785bfe2af47ad473265d85bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37652b0b621a0825785bfe2af47ad473265d85bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37652b0b621a0825785bfe2af47ad473265d85bb"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 71,
      "deletions": 46
    },
    "files": [
      {
        "sha": "9caef6e1dc7d5b42710bc58e91284a515be15a73",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "patch": "@@ -32,7 +32,7 @@ TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx,\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee, false /* test_accept */)) {\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee, false /* test_accept */, true /* single_threaded_validation */)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n                 return TransactionError::MEMPOOL_REJECTED;"
      },
      {
        "sha": "20176daae3c8bae436d11fab149281ffb368ccee",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "patch": "@@ -893,7 +893,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx), &missing_inputs,\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, /* single_threaded_validation */ true);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n     if (!test_accept_res) {"
      },
      {
        "sha": "f5b6b54c411046d7fbe3f2be8a48ce88022cccce",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "patch": "@@ -13,7 +13,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks, uint256* hash_cache_entry=nullptr);\n+\n+bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool, unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata);\n \n BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n \n@@ -125,7 +127,9 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n             // WITNESS requires P2SH\n             test_flags |= SCRIPT_VERIFY_P2SH;\n         }\n-        bool ret = CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, nullptr);\n+        bool ret;\n+        if (add_to_cache) ret = CheckInputsFromMempoolAndCache(tx, state, pcoinsTip.get(), mempool, test_flags, true, txdata);\n+        else ret = CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, nullptr);\n         // CheckInputs should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n@@ -135,13 +139,13 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n         if (ret && add_to_cache) {\n             // Check that we get a cache hit if the tx was valid\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks, nullptr));\n             BOOST_CHECK(scriptchecks.empty());\n         } else {\n             // Check that we get script executions to check, if the transaction\n             // was invalid, or we didn't add to cache.\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, test_flags, true, add_to_cache, txdata, &scriptchecks, nullptr));\n             BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n         }\n     }"
      },
      {
        "sha": "84d61fade17b84bb71ea55fda78c57863ebfd620",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 33,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "patch": "@@ -179,10 +179,11 @@ std::unique_ptr<CBlockTreeDB> pblocktree;\n // See definition for documentation\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr, uint256* hash_cache_entry = nullptr);\n static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n+bool RunCheckInputsMaybeParallel(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, bool single_threaded_validation=false, uint256* hash_cache_entry = nullptr);\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n@@ -386,9 +387,22 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool,\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n }\n \n+static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;\n+static uint256 scriptExecutionCacheNonce(GetRandHash());\n+\n+void InitScriptExecutionCache() {\n+    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n+    // setup_bytes creates the minimum possible cache (2 elements).\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n+    LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n+            (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n+}\n+\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n+// Note: this function is not static so that it can be used in our unit tests.\n+bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n                  unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n@@ -419,7 +433,13 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n         }\n     }\n \n-    return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n+    uint256 hash_cache_entry;\n+    if (RunCheckInputsMaybeParallel(tx, state, view, flags, cacheSigStore, true, txdata, false, &hash_cache_entry)) {\n+        // Cache success in the script cache\n+        scriptExecutionCache.insert(hash_cache_entry);\n+        return true;\n+    }\n+    return false;\n }\n \n /**\n@@ -431,7 +451,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n  */\n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept, bool single_threaded_validation) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -766,7 +786,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         PrecomputedTransactionData txdata(tx);\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, false, txdata)) {\n+        if (!RunCheckInputsMaybeParallel(tx, state, view, scriptVerifyFlags, true, false, txdata, single_threaded_validation)) {\n             // Assume that this is due to a policy violation, rather than\n             // re-checking with the consensus flags. Separating policy rules\n             // from consensus rules is tricky, because we want to be able to\n@@ -786,8 +806,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n             CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n-            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n-                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n+            if (!tx.HasWitness() && RunCheckInputsMaybeParallel(tx, stateDummy, view, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, false, txdata) &&\n+                !RunCheckInputsMaybeParallel(tx, stateDummy, view, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, false, txdata)) {\n                 // Only the witness is missing, so the transaction itself may be fine.\n                 state.Invalid(ValidationInvalidReason::TX_WITNESS_MUTATED, false,\n                         state.GetRejectCode(), state.GetRejectReason(), state.GetDebugMessage());\n@@ -861,10 +881,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, bool single_threaded_validation) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept, single_threaded_validation);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of\n@@ -882,10 +902,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, bool single_threaded_validation)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, single_threaded_validation);\n }\n \n /**\n@@ -1241,18 +1261,6 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n }\n \n \n-static CuckooCache::cache<uint256, SignatureCacheHasher> scriptExecutionCache;\n-static uint256 scriptExecutionCacheNonce(GetRandHash());\n-\n-void InitScriptExecutionCache() {\n-    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n-    // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-    size_t nElems = scriptExecutionCache.setup_bytes(nMaxCacheSize);\n-    LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n-            (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n-}\n-\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set.\n@@ -1265,12 +1273,16 @@ void InitScriptExecutionCache() {\n  * which are matched. This is useful for checking blocks where we will likely never need the cache\n  * entry again.\n  *\n+ * Note that script caching must be done by the caller (as setting cacheFullScriptStore is only used to\n+ * instruct CheckInputs() that a found entry may be removed). Callers wanting to add to the script cache\n+ * should pass in a pointer to hash_cache_entry, which CheckInputs() will fill in.\n+ *\n  * Note that we may set state.reason to NOT_STANDARD for extra soft-fork flags in flags, block-checking\n  * callers should probably reset it to CONSENSUS in such cases.\n  *\n  * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks, uint256* hash_cache_entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1293,12 +1305,13 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             // properly commits to the scriptPubKey in the inputs view of that\n             // transaction).\n             uint256 hashCacheEntry;\n+            if (hash_cache_entry == nullptr) hash_cache_entry = &hashCacheEntry;\n             // We only use the first 19 bytes of nonce to avoid a second SHA\n             // round - giving us 19 + 32 + 4 = 55 bytes (+ 8 + 1 = 64)\n             static_assert(55 - sizeof(flags) - 32 >= 128/8, \"Want at least 128 bits of nonce for script execution cache\");\n-            CSHA256().Write(scriptExecutionCacheNonce.begin(), 55 - sizeof(flags) - 32).Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hashCacheEntry.begin());\n+            CSHA256().Write(scriptExecutionCacheNonce.begin(), 55 - sizeof(flags) - 32).Write(tx.GetWitnessHash().begin(), 32).Write((unsigned char*)&flags, sizeof(flags)).Finalize(hash_cache_entry->begin());\n             AssertLockHeld(cs_main); //TODO: Remove this requirement by making CuckooCache not require external locks\n-            if (scriptExecutionCache.contains(hashCacheEntry, !cacheFullScriptStore)) {\n+            if (scriptExecutionCache.contains(*hash_cache_entry, !cacheFullScriptStore)) {\n                 return true;\n             }\n \n@@ -1333,12 +1346,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, strprintf(\"script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n-\n-            if (cacheFullScriptStore && !pvChecks) {\n-                // We executed all of the provided scripts, and were told to\n-                // cache the result. Do so now.\n-                scriptExecutionCache.insert(hashCacheEntry);\n-            }\n         }\n     }\n \n@@ -1559,6 +1566,20 @@ void ThreadScriptCheck(int worker_num) {\n     scriptcheckqueue.Thread();\n }\n \n+bool RunCheckInputsMaybeParallel(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, bool single_threaded_validation, uint256* hash_cache_entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    bool use_parallel = nScriptCheckThreads && !single_threaded_validation;\n+    CCheckQueueControl<CScriptCheck> control(use_parallel ? &scriptcheckqueue : nullptr);\n+    std::vector<CScriptCheck> vChecks;\n+    if (!CheckInputs(tx, state, inputs, true, flags, cacheSigStore, cacheFullScriptStore, txdata, use_parallel ? &vChecks : nullptr, hash_cache_entry)) {\n+        return false;\n+    }\n+    control.Add(vChecks);\n+    if (!control.Wait()) {\n+        return state.Invalid(ValidationInvalidReason::CONSENSUS, false, REJECT_INVALID, \"script-verify-flag-failed\");\n+    }\n+    return true;\n+}\n VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n \n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n@@ -4677,7 +4698,7 @@ bool LoadMempool(CTxMemPool& pool)\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nullptr /* pfMissingInputs */, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n-                                           false /* test_accept */);\n+                                           false /* test_accept */, false /* single_threaded_validation */);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "3d4429e54e72514e0f928fc6e827bc021fd2477a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae3f0f8eac2818bc00edddae709105dc68fbcab/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "patch": "@@ -284,7 +284,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, bool single_threaded_validation=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      },
      {
        "sha": "710fddddd03dc3ac9171b4d90bb37b7a348f0d0e",
        "filename": "test/functional/data/invalid_txs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae3f0f8eac2818bc00edddae709105dc68fbcab/test/functional/data/invalid_txs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae3f0f8eac2818bc00edddae709105dc68fbcab/test/functional/data/invalid_txs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/invalid_txs.py?ref=bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "patch": "@@ -156,7 +156,7 @@ def get_tx(self):\n \n \n class InvalidOPIFConstruction(BadTxTemplate):\n-    reject_reason = \"script-verify-flag-failed (Invalid OP_IF construction)\"\n+    reject_reason = \"script-verify-flag-failed\"\n     expect_disconnect = False\n     valid_in_block = True\n "
      },
      {
        "sha": "af08a2eeec472ef171bbdf39a2e3c5c2e53e8be1",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae3f0f8eac2818bc00edddae709105dc68fbcab/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae3f0f8eac2818bc00edddae709105dc68fbcab/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "patch": "@@ -751,14 +751,14 @@ def test_p2sh_witness(self):\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n         with self.nodes[0].assert_debug_log(\n-                expected_msgs=(spend_tx.hash, 'was not accepted: script-verify-flag-failed (Witness program was passed an empty witness)')):\n+                expected_msgs=(spend_tx.hash, 'was not accepted: script-verify-flag-failed')):\n             test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the scriptSig, should also fail.\n         spend_tx.vin[0].scriptSig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n         with self.nodes[0].assert_debug_log(\n-                expected_msgs=(spend_tx.hash, 'was not accepted: script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element)')):\n+                expected_msgs=(spend_tx.hash, 'was not accepted: script-verify-flag-failed')):\n             test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n@@ -1524,7 +1524,7 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, 'script-verify-flag-failed (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, 'script-verify-flag-failed')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n@@ -1544,7 +1544,7 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, 'script-verify-flag-failed (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, 'script-verify-flag-failed')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n@@ -1561,7 +1561,7 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, 'script-verify-flag-failed (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, 'script-verify-flag-failed')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)"
      }
    ]
  },
  {
    "sha": "8b8148dbb3816efb185a457c1f87ada095a52490",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjgxNDhkYmIzODE2ZWZiMTg1YTQ1N2MxZjg3YWRhMDk1YTUyNDkw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-07-16T18:45:29Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2019-08-01T16:47:32Z"
      },
      "message": "Remove unused MANDATORY_SCRIPT_VERIFY_FLAGS\n\nThis variable is no longer used, so remove it.\n\nPreviously, this was used by validation logic to determine whether a\ntransaction with invalid scripts was violating a policy rule or a consensus\nrule -- the idea being that we might ban a peer that relays an\ninvalid-according-to-consensus rule, but not an invalid-according-to-policy\none.\n\nHowever, consensus rule changes are designed so that nodes need not all upgrade\nat once. Consequently, banning a peer for relaying a transaction that is newly\ninvalid as a result of a recent soft-fork would risk partitioning old nodes\nfrom the network needlessly. Because of this type of concern, the only consensus\nflag every added to the MANDATORY set was P2SH.",
      "tree": {
        "sha": "707e26b8c4018e918d65922a19ed37d5a60f1c30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/707e26b8c4018e918d65922a19ed37d5a60f1c30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b8148dbb3816efb185a457c1f87ada095a52490",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8148dbb3816efb185a457c1f87ada095a52490",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8148dbb3816efb185a457c1f87ada095a52490",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8148dbb3816efb185a457c1f87ada095a52490/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae3f0f8eac2818bc00edddae709105dc68fbcab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bae3f0f8eac2818bc00edddae709105dc68fbcab"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 1,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ba860e27c375a8a5185fbd78348d8ede003dc630",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8148dbb3816efb185a457c1f87ada095a52490/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8148dbb3816efb185a457c1f87ada095a52490/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=8b8148dbb3816efb185a457c1f87ada095a52490",
        "patch": "@@ -53,7 +53,7 @@ static const unsigned int DUST_RELAY_TX_FEE = 3000;\n  * with. However scripts violating these flags may still be present in valid\n  * blocks and we must accept those blocks.\n  */\n-static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH |\n                                                              SCRIPT_VERIFY_DERSIG |\n                                                              SCRIPT_VERIFY_STRICTENC |\n                                                              SCRIPT_VERIFY_MINIMALDATA |"
      },
      {
        "sha": "d8c20c070be840dfc8123f730f21d43392c7307e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8148dbb3816efb185a457c1f87ada095a52490/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8148dbb3816efb185a457c1f87ada095a52490/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=8b8148dbb3816efb185a457c1f87ada095a52490",
        "patch": "@@ -42,17 +42,6 @@ extern bool fAcceptDatacarrier;\n /** Maximum size of TX_NULL_DATA scripts that this node considers standard. */\n extern unsigned nMaxDatacarrierBytes;\n \n-/**\n- * Mandatory script verification flags that all new blocks must comply with for\n- * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n- * but in the future other flags may be added, such as a soft-fork to enforce\n- * strict DER encoding.\n- *\n- * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n- * details.\n- */\n-static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n-\n enum txnouttype\n {\n     TX_NONSTANDARD,"
      }
    ]
  }
]