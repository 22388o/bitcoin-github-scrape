DrahtBot,2019-01-15T07:00:50Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16486](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16486.html) ([consensus] skip bip30 checks when assumeva",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-454287296,454287296,
gmaxwell,2019-01-15T20:34:16Z,"> we could relay transactions from a whitelisted peer that would cause us to be banned by an older peer\n\nThis seems bad.  The original motivation for making whitelist relay is long long long since dead (*).  Can we just eliminate this behaviour, as it makes whitelisting less useful and isn't useful itself?\n\nIf there is still any need for forced-relay transactions it could be accomplished b",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-454540989,454540989,
gmaxwell,2019-01-15T20:35:18Z,"On the overall change, sounds interesting but without benchmarks I dunno how exciting it is.  I guess I'm kinda surprised that there is a speedup at all considering that IBD doesn't seem to scale past 15/16 cores... which I'd assumed was due to synchronization overheads in the script validation thread dispatch.",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-454541281,454541281,
sdaftuar,2019-01-15T22:13:26Z,"I would love to get rid of the whitelist relay behavior.  Any opinions about whether I should open a new PR for that, or just do it here?\n\nMy initial benchmark is on a very large transaction that has 640 P2PKH inputs, 2 outputs, and is policy-valid.  I compared this PR with master, and I tried this on two computers, a Power9 workstation (which doesn't have the SHA optimizations) and my laptop ",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-454572075,454572075,
MarcoFalke,2019-01-15T22:29:49Z,It would be nice to have the benchmark in master before the changes are made here so that it is easier to see how much each of the two commits change the performance.,https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-454576869,454576869,
gmaxwell,2019-01-16T01:38:59Z,"@sdaftuar on forced relay, I think a PR that defaulted it to off could just be open separately and make it in faster than this work... and this would could continue assuming that issue is resolved elsewhere.",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-454618309,454618309,
sdaftuar,2019-05-14T13:14:36Z,"Updated to always use parallel validation for mempool transactions if scriptcheck threads are available, and also updated the OP to describe the current behavior.\n\nOne remaining open question in my mind is around the new behavior where a peer sending an invalid-according-to-consensus rules transaction would no longer be disconnected.  The motivation for this  is to mitigate adversarial behavio",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-492232216,492232216,
JeremyRubin,2019-05-14T16:27:45Z,"The check queue approach is IMO a bad idea because we may fail for different reasons on different executions.\n\nIf you want a reason, I would re-run validation in single core and reproduce the first failure.\n\nOtherwise maybe you can produce all failure tuples (index, failure) and then take the sorted first one?",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-492310750,492310750,
JeremyRubin,2019-05-14T16:32:04Z,You can even track the min txn that any worker has attempted and then just restart from there -- that might save you some work against blocks which have their last txn fail. ,https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-492312364,492312364,
sdaftuar,2019-05-15T13:28:24Z,"@JeremyRubin For a transaction containing multiple failing script inputs, I don't think it should matter whether the failure we associate with it is deterministic, since trying to find the reason for validation failure is only something we're trying to do for a non-adversarial case anyway. Do you have a scenario in mind where it would be an issue? ",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-492654340,492654340,
sdaftuar,2019-06-07T08:02:54Z,"I added a commit (to be squashed) which uses single-threaded validation for transactions submitted over RPC, since we're not worried about DoS there and users can get more detailed error information for invalid transactions when we scripts are evaluated serially.  @jnewbery -- thanks for the suggestion.",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-499795478,499795478,
sdaftuar,2019-07-12T15:40:19Z,Thanks for the review @TheBlueMatt.  I'll hold off on the comment nit unless I end up updating this PR for something else.,https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-510933710,510933710,
sdaftuar,2019-07-16T14:26:30Z,"Addressed all but one of @jnewbery's comments, and included the comment change that @TheBlueMatt previously suggested.\n\nPrior version of this PR can be compared here: [15169.1](https://github.com/sdaftuar/bitcoin/commits/15169.1)",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-511839762,511839762,
sdaftuar,2019-07-16T18:59:40Z,"@jnewbery Good catch on the caching bug.  I've pushed up a quick fix for now, but probably I should do something better here when I have a chance to revisit.",https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-511943502,511943502,
sdaftuar,2019-07-22T17:29:38Z,There was a silent merge conflict in the prior version of this PR ([15169.2](https://github.com/sdaftuar/bitcoin/commits/15169.2)) so I've rebased -- still intend to revisit the fix for the scriptcache and outstanding nits.,https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-513878514,513878514,
sdaftuar,2019-07-22T18:42:49Z,Updated with an improved fix to the script caching issue; @jnewbery @TheBlueMatt care to take a look?,https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-513905416,513905416,
DrahtBot,2019-08-02T13:21:24Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/15169#issuecomment-517698368,517698368,
JeremyRubin,2019-01-15T22:49:23Z,"Perhaps marginally less clear, but as follows, we skip the legacy input count if we don't have parallel threads & we abort the check as soon as we trigger the legacy count condition. \n\n```c++\n    bool parallel_verify = nScriptCheckThreads > 0;\n    size_t legacy_inputs_threshold = parallel_verify ? 15 : 0;\n    for (size_t i = 0; i < tx.vin.size() && legacy_input_threshold; i++) {\n      ",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r248093418,248093418,src/validation.cpp
sdaftuar,2019-05-13T22:19:26Z,"I think you're right that it's not worth the complexity of gating the logic on the number of legacy inputs.  I did some microbenchmarking on a couple of my computers to see how long it takes to validate small transactions at various thresholds, and the effect seems very small.",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r283560268,283560268,src/validation.cpp
TheBlueMatt,2019-07-10T19:01:54Z,"Hmm, one thing this potentially protects us from is inbound peers on fork chains where the chain doesn't (yet) have any blocks to relay us (so that we ban them for invalid headers). We may want to broaden the ConsiderEviction logic to apply some similar (but relaxed - don't want to disconnect peers which are in IBD and making progress) rules to inbound peers. No need to do it in this PR, though - ",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r302224265,302224265,src/validation.cpp
TheBlueMatt,2019-07-10T19:04:51Z,nit: maybe include in the comment why we have to call this function anyway (that CheckInputs always returns CONSENSUS so we have to overwrite it).,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r302225458,302225458,src/validation.cpp
jnewbery,2019-07-15T21:43:50Z,"`maxfeerate` -> `allowhighfees` seems like a bad rebase. The new argument is `maxfeerate`, but `allowhighfees` is retained for backwards compatibility and may be removed in a future version.",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303650100,303650100,test/functional/feature_dersig.py
jnewbery,2019-07-15T21:43:55Z,"`maxfeerate` -> `allowhighfees` seems like a bad rebase. The new argument is `maxfeerate`, but `allowhighfees` is retained for backwards compatibility and may be removed in a future version.",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303650126,303650126,test/functional/feature_cltv.py
jnewbery,2019-07-15T21:46:35Z,This change is not necessary now that #15193 has been merged.,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303651045,303651045,test/functional/p2p_segwit.py
jnewbery,2019-07-15T23:12:54Z,"The failure string can be ""script-verify-flag-failed"" here. Even better, with the specific error string ""script-verify-flag-failed (Operation not valid with the current stack size)""",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303673472,303673472,test/functional/feature_segwit.py
sdaftuar,2019-07-16T14:24:49Z,Fixed,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303938913,303938913,test/functional/feature_dersig.py
sdaftuar,2019-07-16T14:24:53Z,Fixed,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303938941,303938941,test/functional/feature_cltv.py
sdaftuar,2019-07-16T14:24:59Z,Removed,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303939015,303939015,test/functional/p2p_segwit.py
sdaftuar,2019-07-16T14:25:18Z,Leaving this one alone -- someone interested in improving this test can take it on in a separate PR.,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303939181,303939181,test/functional/feature_segwit.py
jnewbery,2019-07-16T16:06:31Z,Unnecessary whitespace change,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r303995652,303995652,test/functional/p2p_segwit.py
jnewbery,2019-07-16T17:42:56Z,"Note for reviewers that there's a change in behaviour here where previously state would be set to NOT_STANDARD and now it's set to CONSENSUS. I think that's correct behaviour, since this check is against consensus rules.\n\nAlso note that this should never fail. If `CheckInputsFromMempoolAndCache()` fails script checking it's because a policy change has been deployed which is a hard fork against",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r304037434,304037434,src/validation.cpp
jnewbery,2019-07-16T17:58:05Z,I believe this breaks script caching - `CheckInputs()` will only cache script success if running non-parallel.,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r304044230,304044230,src/validation.cpp
jnewbery,2019-07-16T17:59:55Z,"It seems slightly weird (and scary) to return that this was a consensus failure, when this is a dumb utility function which is just checking whichever rules it gets passed. Perhaps a future PR should remove the `CValidationState` argument and force the caller to set the validation failure reason:\n\n- The initial call to `CheckInputs()` in ATMP should always set the state to `TX_NOT_STANDARD` on",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r304045068,304045068,src/validation.cpp
fjahr,2019-07-17T16:02:49Z,Style-Nit: Would be a bit nicer to have consistency in the ordering of argument and comment.,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r304495604,304495604,src/rpc/rawtransaction.cpp
MarcoFalke,2019-07-17T17:29:13Z,"The arguments might be wrapped into a struct before they are passed at some point in the future, so I guess this style inconsistency will be solved at that point",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r304554016,304554016,src/rpc/rawtransaction.cpp
fjahr,2019-07-17T20:07:48Z,"Question on code structure: I would like to understand the reasoning for wrapping CheckInputs() in RunCheckInputsMaybeParalell(). Rather than that I would probably have put that logic into CheckInputs() itself and then have it delegate to CheckInputsParalell() or so. Are there other factors at play that I am not seeing, like keeping the changes in CheckInputs() as minimal as possible for example?",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r304618876,304618876,src/validation.cpp
hugohn,2019-07-18T14:14:35Z,"nit: since `(nScriptCheckThreads && !single_threaded_validation)` is used several times throughout this function, maybe declare it at the beginning of the function? (e.g. `bool use_multiple_threads = (nScriptCheckThreads && !single_threaded_validation)`.",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r304940181,304940181,src/validation.cpp
sdaftuar,2019-07-22T14:25:32Z,"CheckInputs() is also invoked directly from ConnectBlock(), which handles the parallel scriptcheck threads itself.",https://github.com/bitcoin/bitcoin/pull/15169#discussion_r305873419,305873419,src/validation.cpp
sdaftuar,2019-07-22T18:43:00Z,Done,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r305976540,305976540,src/validation.cpp
sdaftuar,2019-07-22T18:43:48Z,Done,https://github.com/bitcoin/bitcoin/pull/15169#discussion_r305976856,305976856,src/validation.cpp
