[
  {
    "sha": "3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGVlMDI1M2I5ZmMwYzBhNzJiNGMyNDFiYWU3NTVmZTljYWZjZTFi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T11:05:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:37:35Z"
      },
      "message": "Consensus: Consensus version of pow functions",
      "tree": {
        "sha": "d6ccfa41cf3d890390116345b0ab44b90784984e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6ccfa41cf3d890390116345b0ab44b90784984e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6ea3bcede1cbbf89486b9d67329e0110c4624ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ea3bcede1cbbf89486b9d67329e0110c4624ae"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 77,
      "deletions": 61
    },
    "files": [
      {
        "sha": "72d79619b246da4df43a52c31849336f7c17bd04",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/consensus.h \\\n   consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "ecbdcecfbfcebf94285b4edd19d2b7deebec4e15",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -8,7 +8,6 @@\n \n #include \"arith_uint256.h\"\n #include \"primitives/block.h\"\n-#include \"pow.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "c2b172e0cb685202d90855609cd8e24dff3293d1",
        "filename": "src/consensus/consensus.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_H\n+\n+#include <stdint.h>\n+\n+class CBlockHeader;\n+class CBlockIndex;\n+class uint256;\n+\n+namespace Consensus {\n+\n+class Params;\n+\n+} // namespace Consensus\n+\n+/** Block header validation utility functions */\n+\n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "8be349d3c9c180636a7a611c5a8b0665c381597a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -11,6 +11,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/consensus.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\""
      },
      {
        "sha": "4d09469193486e52c057bb883a755ccbc69f26b3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -7,10 +7,10 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n@@ -79,17 +79,32 @@ class TxPriorityCompare\n     }\n };\n \n+uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& consensusParams)\n+{\n+    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, consensusParams);\n+    /// debug print\n+    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n+    LogPrintf(\"pindexLast->nTime = %d\\n\", (int64_t)pindexLast->nTime);\n+    arith_uint256 bnNew, bnOld;\n+    bnNew.SetCompact(nextChallenge);\n+    bnOld.SetCompact(pindexLast->nBits);    \n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", nextChallenge, bnNew.ToString());\n+    return nextChallenge;\n+}\n+\n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+        pblock->nBits = GetNextWorkRequiredLog(pindexPrev, pblock, consensusParams);\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n+    const CChainParams& chainparams = Params();\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -98,7 +113,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n-    if (Params().MineBlocksOnDemand())\n+    if (chainparams.MineBlocksOnDemand())\n         pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n     // Create coinbase tx\n@@ -326,8 +341,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+        pblock->nBits          = GetNextWorkRequiredLog(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "de0d3d0219cc4cb75fc8b400af3d4d6439ac01b6",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -7,13 +7,14 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"uint256.h\"\n-#include \"util.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n-    unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n+    uint32_t nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n@@ -27,7 +28,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing*2)\n+            if ((int64_t)pblock->nTime > (int64_t)pindexLast->nTime + params.nPowTargetSpacing*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n@@ -42,19 +43,18 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n-    int nHeightFirst = pindexLast->nHeight - (params.DifficultyAdjustmentInterval()-1);\n-    assert(nHeightFirst >= 0);\n-    const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n+    const CBlockIndex* pindexFirst = pindexLast;\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n+        pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n-    return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n+    return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n }\n \n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n-    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n+    int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n     if (nActualTimespan < params.nPowTargetTimespan/4)\n         nActualTimespan = params.nPowTargetTimespan/4;\n     if (nActualTimespan > params.nPowTargetTimespan*4)\n@@ -72,12 +72,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n     if (bnNew > bnPowLimit)\n         bnNew = bnPowLimit;\n \n-    /// debug print\n-    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"params.nPowTargetTimespan = %d    nActualTimespan = %d\\n\", params.nPowTargetTimespan, nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n-\n     return bnNew.GetCompact();\n }\n \n@@ -91,11 +85,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return error(\"CheckProofOfWork(): nBits below minimum work\");\n+        return false; // nBits below minimum work\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n+        return false; // hash doesn't match nBits\n \n     return true;\n }"
      },
      {
        "sha": "a501a3dcebe09fa7e815a46f2a901a32a44142be",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -6,20 +6,9 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n-#include \"consensus/params.h\"\n-\n-#include <stdint.h>\n-\n-class CBlockHeader;\n class CBlockIndex;\n-class uint256;\n class arith_uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n-\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n arith_uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "0f20c2466cbbe046ccb55d4908a8ba782e133ff2",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -5,12 +5,12 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n-#include \"pow.h\"\n+#include \"net.h\"\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\""
      },
      {
        "sha": "1c184ce3cdaae5abe2b023c4e4419f65b12160e8",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -6,12 +6,11 @@\n // Unit tests for denial-of-service detection/prevention code\n //\n \n-\n-\n+#include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script/sign.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "271914c48d58ff0035effdc094d109f2f17cdf90",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n-#include \"pow.h\"\n-#include \"util.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -13,60 +13,50 @@ using namespace std;\n \n BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n \n+static const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, consensusParams), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "215ab5581ba22e908e75350a834ff293536eaaf9",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "patch": "@@ -6,9 +6,9 @@\n #include \"txdb.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"hash.h\"\n #include \"main.h\"\n-#include \"pow.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "504cae163e1edee1b3425312753b6705ad0f4666",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDRjYWUxNjNlMWVkZWUxYjM0MjUzMTI3NTNiNjcwNWFkMGY0NjY2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T11:05:23Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:37:35Z"
      },
      "message": "Consensus: Refactor: Consensus version of CheckBlockHeader()",
      "tree": {
        "sha": "2988b0c4721023e4e7991037f5537528ba34c99e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2988b0c4721023e4e7991037f5537528ba34c99e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/504cae163e1edee1b3425312753b6705ad0f4666",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504cae163e1edee1b3425312753b6705ad0f4666",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/504cae163e1edee1b3425312753b6705ad0f4666",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504cae163e1edee1b3425312753b6705ad0f4666/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dee0253b9fc0c0a72b4c241bae755fe9cafce1b"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 20,
      "deletions": 14
    },
    "files": [
      {
        "sha": "57028c38d3e93351d3805cd8fdce37fa861c24bf",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/504cae163e1edee1b3425312753b6705ad0f4666/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/504cae163e1edee1b3425312753b6705ad0f4666/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=504cae163e1edee1b3425312753b6705ad0f4666",
        "patch": "@@ -10,12 +10,22 @@\n \n class CBlockHeader;\n class CBlockIndex;\n+class CValidationState;\n class uint256;\n \n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n namespace Consensus {\n \n class Params;\n \n+/** Block header validation functions */\n+\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, bool fCheckPOW = true);\n+\n } // namespace Consensus\n \n /** Block header validation utility functions */"
      },
      {
        "sha": "eb15d5b97629055410cc91e012c65b945d4bd720",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/504cae163e1edee1b3425312753b6705ad0f4666/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/504cae163e1edee1b3425312753b6705ad0f4666/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=504cae163e1edee1b3425312753b6705ad0f4666",
        "patch": "@@ -2466,29 +2466,26 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n-        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n-                         REJECT_INVALID, \"high-hash\");\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n-    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n-                             REJECT_INVALID, \"time-too-new\");\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n \n     return true;\n }\n \n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n-    // These are checks that are independent of context.\n-\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, fCheckPOW))\n-        return false;\n+    if (!Consensus::CheckBlockHeader(block, state, consensusParams, GetAdjustedTime(), fCheckPOW))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n@@ -2631,8 +2628,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         return true;\n     }\n \n-    if (!CheckBlockHeader(block, state))\n-        return false;\n+    if (!Consensus::CheckBlockHeader(block, state, chainparams.GetConsensus(), GetAdjustedTime()))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;"
      },
      {
        "sha": "3294bf9fdd77f35024d89bf5fd7cc453ad7c4e29",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/504cae163e1edee1b3425312753b6705ad0f4666/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/504cae163e1edee1b3425312753b6705ad0f4666/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=504cae163e1edee1b3425312753b6705ad0f4666",
        "patch": "@@ -348,7 +348,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */"
      }
    ]
  },
  {
    "sha": "4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGM3ZjNjNDJmMTk0ZjVhYTA2YmQ4NzUwMzRjZDdhNTYzZDkxNWFl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T14:10:37Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:37:35Z"
      },
      "message": "Chainparams: Refactor: Decouple IsSuperMajority from Params()",
      "tree": {
        "sha": "b4b37f222e3ea0354adb841e730c34b072541452",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4b37f222e3ea0354adb841e730c34b072541452"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc7f3c42f194f5aa06bd875034cd7a563d915ae/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "504cae163e1edee1b3425312753b6705ad0f4666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504cae163e1edee1b3425312753b6705ad0f4666",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/504cae163e1edee1b3425312753b6705ad0f4666"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 13,
      "deletions": 25
    },
    "files": [
      {
        "sha": "c3baf30389c5396850f727f422f6c0c0a0a135dd",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc7f3c42f194f5aa06bd875034cd7a563d915ae/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc7f3c42f194f5aa06bd875034cd7a563d915ae/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
        "patch": "@@ -44,9 +44,6 @@ class CChainParams\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n     int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n-    int EnforceBlockUpgradeMajority() const { return consensus.nMajorityEnforceBlockUpgrade; }\n-    int RejectBlockOutdatedMajority() const { return consensus.nMajorityRejectBlockOutdated; }\n-    int ToCheckBlockUpgradeMajority() const { return consensus.nMajorityWindow; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }"
      },
      {
        "sha": "ff7efcfc4742f14d030640dc9c60e6c67d7406d4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 22,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc7f3c42f194f5aa06bd875034cd7a563d915ae/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc7f3c42f194f5aa06bd875034cd7a563d915ae/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
        "patch": "@@ -72,10 +72,9 @@ void EraseOrphansFor(NodeId peer);\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n- * and going backwards.\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n  */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired);\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -1732,7 +1731,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n@@ -2550,7 +2549,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n@@ -2569,26 +2568,19 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n         return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n-    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n-    {\n-        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-    }\n-\n-    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n-    {\n-        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-    }\n+    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n+    for (int i = 2; i <= 3; i++)\n+        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+            return state.Invalid(error(\"%s: rejected nVersion=%d block\", __func__, i-1), \n+                                 REJECT_OBSOLETE, \"bad-version\");\n \n     return true;\n }\n \n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2598,7 +2590,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -2699,11 +2691,10 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n {\n-    unsigned int nToCheck = Params().ToCheckBlockUpgradeMajority();\n     unsigned int nFound = 0;\n-    for (unsigned int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n+    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n     {\n         if (pstart->nVersion >= minVersion)\n             ++nFound;"
      }
    ]
  },
  {
    "sha": "5fab51f568d607870381798ada993868df1f779b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmFiNTFmNTY4ZDYwNzg3MDM4MTc5OGFkYTk5Mzg2OGRmMWY3Nzli",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-30T11:48:04Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:37:35Z"
      },
      "message": "Consensus: Separate CheckIndexAgainstCheckpoint() from ContextualCheckBlockHeader",
      "tree": {
        "sha": "e12ea9453e013a9ee516c32670fc851f6c25b711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e12ea9453e013a9ee516c32670fc851f6c25b711"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fab51f568d607870381798ada993868df1f779b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fab51f568d607870381798ada993868df1f779b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fab51f568d607870381798ada993868df1f779b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fab51f568d607870381798ada993868df1f779b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc7f3c42f194f5aa06bd875034cd7a563d915ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dc7f3c42f194f5aa06bd875034cd7a563d915ae"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 22,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e3b2c2eb89fa57e1d5397a112d050bb1dac59919",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fab51f568d607870381798ada993868df1f779b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fab51f568d607870381798ada993868df1f779b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5fab51f568d607870381798ada993868df1f779b",
        "patch": "@@ -2537,17 +2537,28 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const CChainParams& chainparams, const BlockMap& mapBlockIndex)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-    uint256 hash = block.GetHash();\n-    if (hash == consensusParams.hashGenesisBlock)\n-        return true;\n-\n     assert(pindexPrev);\n+    if (*pindexPrev->phashBlock == chainparams.GetConsensus().hashGenesisBlock)\n+        return true;\n \n     int nHeight = pindexPrev->nHeight+1;\n+    // Check that the block chain matches the known block chain up to a checkpoint\n+    if (!Checkpoints::CheckBlock(nHeight, *pindexPrev->phashBlock))\n+        return state.DoS(100, false, REJECT_CHECKPOINT, strprintf(\"checkpoint mismatch (height %d)\", nHeight));\n+\n+    // Don't accept any forks from the main chain prior to last checkpoint\n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n+        return state.DoS(100, false, REJECT_INVALID, strprintf(\"forked-chain-older-checkpoint (height %d)\", nHeight));\n+\n+    return true;\n+}\n \n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n@@ -2558,16 +2569,6 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n-    // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n-                         REJECT_CHECKPOINT, \"checkpoint mismatch\");\n-\n-    // Don't accept any forks from the main chain prior to last checkpoint\n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n-\n     // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n     for (int i = 2; i <= 3; i++)\n         if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n@@ -2633,6 +2634,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n+    if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n+        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n         return false;\n@@ -2735,8 +2738,11 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n \n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n+    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     assert(pindexPrev == chainActive.Tip());\n+    if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n+        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n     CCoinsViewCache viewNew(pcoinsTip);\n     CBlockIndex indexDummy(block);"
      }
    ]
  },
  {
    "sha": "7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZThhYTJlZTUyMDRiYmEzNTYxN2IzMGE1NDUwYmRjYWQ0YzgzNjFj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T14:29:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:10Z"
      },
      "message": "Consensus: Create consensus/consensus.h with some constants",
      "tree": {
        "sha": "13aa2debcb109d85af7b7bb08ebed87a8093a0fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13aa2debcb109d85af7b7bb08ebed87a8093a0fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fab51f568d607870381798ada993868df1f779b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fab51f568d607870381798ada993868df1f779b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fab51f568d607870381798ada993868df1f779b"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 21,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f1c1c0ff8bffea7af2a5f44f70d0faf1d8892d85",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -4,18 +4,18 @@\n \n #include \"base58.h\"\n #include \"clientversion.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n-#include \"primitives/transaction.h\"\n-#include \"core_io.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"ui_interface.h\" // for _(...)\n #include \"univalue/univalue.h\"\n #include \"util.h\"\n-#include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdio.h>\n "
      },
      {
        "sha": "823154eafcd4823dd8587a5dea91fc5061397e6f",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -13,6 +13,15 @@ class CBlockIndex;\n class CValidationState;\n class uint256;\n \n+/** The maximum allowed size for a serialized block, in bytes (network rule) */\n+static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed number of signature check operations in a block (network rule) */\n+static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n+static const int COINBASE_MATURITY = 100;\n+/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n /**\n  * Consensus validations:\n  * Check_ means checking everything possible with the data provided."
      },
      {
        "sha": "b06c8f306262c753223e728a045dbb75b53af653",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -14,9 +14,10 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n@@ -53,8 +54,6 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n@@ -67,10 +66,6 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n-/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n-static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */"
      },
      {
        "sha": "c48d8cd508db4bbe928c9ca68d5d0b99bf8e7bbc",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -6,7 +6,7 @@\n #include \"merkleblock.h\"\n \n #include \"hash.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n+#include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n using namespace std;"
      },
      {
        "sha": "59f46deb1c420d8aef28a85a0d144a06259d3a18",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -10,9 +10,6 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n-\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "721424943551880acc9c9764af65ed605b0e7535",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -10,11 +10,13 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "7f1db58e5d815e77f517e2bb1399ac7061461a10",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -5,6 +5,7 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"timedata.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "d05e3c6eecc7353f95405b7d4c4bb8d9c9ea9433",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "88e6610decbcc5b6da49a5c04b56c09798d5208c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e8aa2ee5204bba35617b30a5450bdcad4c8361c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "patch": "@@ -8,6 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      }
    ]
  },
  {
    "sha": "71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWU2Zjk4NWE2ZmU5ODhjNmY4YWEwNzRlZGUzNmUwYmIwMWUzODlm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T23:57:14Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:11Z"
      },
      "message": "Consensus: Refactor: Decouple CValidationState from main::AbortNode()",
      "tree": {
        "sha": "4821583567301be561df62fe6c75468b84181fd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4821583567301be561df62fe6c75468b84181fd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e6f985a6fe988c6f8aa074ede36e0bb01e389f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e8aa2ee5204bba35617b30a5450bdcad4c8361c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e8aa2ee5204bba35617b30a5450bdcad4c8361c"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 27,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f22f3c48454e942862719a5a7961edb67fef7ed7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e6f985a6fe988c6f8aa074ede36e0bb01e389f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e6f985a6fe988c6f8aa074ede36e0bb01e389f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
        "patch": "@@ -1537,6 +1537,24 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     return true;\n }\n \n+/** Abort with a message */\n+bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    strMiscWarning = strMessage;\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+    return false;\n+}\n+\n+bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    AbortNode(strMessage, userMessage);\n+    return state.Error(strMessage);\n+}\n+\n } // anon namespace\n \n /**\n@@ -1816,7 +1834,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n-                return state.Abort(\"Failed to write undo data\");\n+                return AbortNode(state, \"Failed to write undo data\");\n \n             // update nUndoPos in block index\n             pindex->nUndoPos = pos.nPos;\n@@ -1829,7 +1847,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (fTxIndex)\n         if (!pblocktree->WriteTxIndex(vPos))\n-            return state.Abort(\"Failed to write transaction index\");\n+            return AbortNode(state, \"Failed to write transaction index\");\n \n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n@@ -1890,20 +1908,20 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n                 setDirtyBlockIndex.erase(it++);\n             }\n             if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n-                return state.Abort(\"Files to write to block index database\");\n+                return AbortNode(state, \"Files to write to block index database\");\n             }\n         }\n         // Finally flush the chainstate (which may refer to block index entries).\n         if (!pcoinsTip->Flush())\n-            return state.Abort(\"Failed to write to coin database\");\n+            return AbortNode(state, \"Failed to write to coin database\");\n         // Update best block in wallet (so we can detect restored wallets).\n         if (mode != FLUSH_STATE_IF_NEEDED) {\n             GetMainSignals().SetBestChain(chainActive.GetLocator());\n         }\n         nLastWrite = GetTimeMicros();\n     }\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error while flushing: \") + e.what());\n+        return AbortNode(state, std::string(\"System error while flushing: \") + e.what());\n     }\n     return true;\n }\n@@ -1960,7 +1978,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n-        return state.Abort(\"Failed to read block\");\n+        return AbortNode(state, \"Failed to read block\");\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -2011,7 +2029,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     CBlock block;\n     if (!pblock) {\n         if (!ReadBlockFromDisk(block, pindexNew))\n-            return state.Abort(\"Failed to read block\");\n+            return AbortNode(state, \"Failed to read block\");\n         pblock = &block;\n     }\n     // Apply the block atomically to the chain state.\n@@ -2684,11 +2702,11 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n             return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n-                return state.Abort(\"Failed to write block\");\n+                AbortNode(state, \"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error: \") + e.what());\n+        return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n     return true;\n@@ -2763,23 +2781,6 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     return true;\n }\n \n-\n-\n-\n-\n-\n-\n-\n-bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n-    strMiscWarning = strMessage;\n-    LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(\n-        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n-        \"\", CClientUIInterface::MSG_ERROR);\n-    StartShutdown();\n-    return false;\n-}\n-\n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n     uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;"
      },
      {
        "sha": "3af070716dffb5358b12f69f72b6a896151c019b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e6f985a6fe988c6f8aa074ede36e0bb01e389f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e6f985a6fe988c6f8aa074ede36e0bb01e389f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
        "patch": "@@ -183,8 +183,6 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Abort with a message */\n-bool AbortNode(const std::string &msg, const std::string &userMessage=\"\");\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n@@ -448,10 +446,6 @@ class CValidationState {\n         mode = MODE_ERROR;\n         return false;\n     }\n-    bool Abort(const std::string &msg) {\n-        AbortNode(msg);\n-        return Error(msg);\n-    }\n     bool IsValid() const {\n         return mode == MODE_VALID;\n     }"
      }
    ]
  },
  {
    "sha": "d407ced0d0c80a404b6153338504dcdbaea6f112",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDA3Y2VkMGQwYzgwYTQwNGI2MTUzMzM4NTA0ZGNkYmFlYTZmMTEy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T10:36:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:11Z"
      },
      "message": "Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast into independent function",
      "tree": {
        "sha": "a0c673f22a3595b177d75671e7e5fc09d8a5e890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0c673f22a3595b177d75671e7e5fc09d8a5e890"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d407ced0d0c80a404b6153338504dcdbaea6f112",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d407ced0d0c80a404b6153338504dcdbaea6f112",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d407ced0d0c80a404b6153338504dcdbaea6f112",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d407ced0d0c80a404b6153338504dcdbaea6f112/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e6f985a6fe988c6f8aa074ede36e0bb01e389f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71e6f985a6fe988c6f8aa074ede36e0bb01e389f"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 35,
      "deletions": 23
    },
    "files": [
      {
        "sha": "136f8ee2d07cf8b105a2ce180816f72dbb4ba994",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -175,6 +175,7 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/blockverify.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "04e7e0d1f162cdc16d20f9033130d26fa72ee7ee",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -226,22 +226,6 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n-    enum { nMedianTimeSpan=11 };\n-\n-    int64_t GetMedianTimePast() const\n-    {\n-        int64_t pmedian[nMedianTimeSpan];\n-        int64_t* pbegin = &pmedian[nMedianTimeSpan];\n-        int64_t* pend = &pmedian[nMedianTimeSpan];\n-\n-        const CBlockIndex* pindex = this;\n-        for (int i = 0; i < nMedianTimeSpan && pindex; i++, pindex = pindex->pprev)\n-            *(--pbegin) = pindex->GetBlockTime();\n-\n-        std::sort(pbegin, pend);\n-        return pbegin[(pend - pbegin)/2];\n-    }\n-\n     std::string ToString() const\n     {\n         return strprintf(\"CBlockIndex(pprev=%p, nHeight=%d, merkle=%s, hashBlock=%s)\","
      },
      {
        "sha": "947411dd29f38450df8f8cc30a19cbf7c104762f",
        "filename": "src/consensus/blockverify.cpp",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"chain.h\"\n+\n+#include <algorithm>  \n+\n+static const unsigned int MEDIAN_TIME_SPAN = 11;\n+\n+int64_t GetMedianTimePast(const CBlockIndex* pindex)\n+{\n+    int64_t pmedian[MEDIAN_TIME_SPAN];\n+    int64_t* pbegin = &pmedian[MEDIAN_TIME_SPAN];\n+    int64_t* pend = &pmedian[MEDIAN_TIME_SPAN];\n+\n+    for (unsigned int i = 0; i < MEDIAN_TIME_SPAN && pindex; i++, pindex = pindex->pprev)\n+        *(--pbegin) = (int64_t)pindex->nTime;\n+\n+    std::sort(pbegin, pend);\n+    return pbegin[(pend - pbegin)/2];\n+}"
      },
      {
        "sha": "c054933fd0bbc32c62c6867c113c2f963185a874",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -39,6 +39,7 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const\n \n /** Block header validation utility functions */\n \n+int64_t GetMedianTimePast(const CBlockIndex* pindex);\n uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */"
      },
      {
        "sha": "f0914a8819247d01e4d4871ad67ad671a1d10e55",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -2583,7 +2583,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                          REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n-    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n "
      },
      {
        "sha": "8a3f1b575138d0af88e5feb8ef2b746a228a5e9d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -95,7 +95,7 @@ uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeade\n \n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    pblock->nTime = std::max(GetMedianTimePast(pindexPrev)+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)"
      },
      {
        "sha": "ade746bfd81b2a8efb35e71a86f7548ff6f91d99",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -573,7 +573,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n     result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n+    result.push_back(Pair(\"mintime\", (int64_t)GetMedianTimePast(pindexPrev)+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));"
      },
      {
        "sha": "ca86ef1ca48d20888510044b4a591e7e9ac5fd9f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d407ced0d0c80a404b6153338504dcdbaea6f112/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d407ced0d0c80a404b6153338504dcdbaea6f112/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d407ced0d0c80a404b6153338504dcdbaea6f112",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\"\n@@ -71,7 +72,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n-        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nTime = GetMedianTimePast(chainActive.Tip())+1;\n         CMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n@@ -211,7 +212,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight = nHeight;\n \n     // non-final txs in mempool\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip())+1);\n \n     // height locked\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -233,7 +234,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout.resize(1);\n     tx2.vout[0].nValue = 4900000000LL;\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    tx2.nLockTime = GetMedianTimePast(chainActive.Tip())+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n@@ -246,7 +247,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // However if we advance height and time by one, both will.\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip())+2);\n \n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));"
      }
    ]
  },
  {
    "sha": "392d2710a67bde72c1a8b09caad10365223959c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTJkMjcxMGE2N2JkZTcyYzFhOGIwOWNhYWQxMDM2NTIyMzk1OWM3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-11T10:44:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:12Z"
      },
      "message": "Consensus: Refactor: Consensus version of ContextualCheckBlockHeader()",
      "tree": {
        "sha": "15f552d2e968405f3f798d4680fa8b08b392189e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15f552d2e968405f3f798d4680fa8b08b392189e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/392d2710a67bde72c1a8b09caad10365223959c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392d2710a67bde72c1a8b09caad10365223959c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/392d2710a67bde72c1a8b09caad10365223959c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392d2710a67bde72c1a8b09caad10365223959c7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d407ced0d0c80a404b6153338504dcdbaea6f112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d407ced0d0c80a404b6153338504dcdbaea6f112",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d407ced0d0c80a404b6153338504dcdbaea6f112"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 9,
      "deletions": 13
    },
    "files": [
      {
        "sha": "180e1f4258a9a5d216133402c31d235ae2a8c044",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392d2710a67bde72c1a8b09caad10365223959c7/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392d2710a67bde72c1a8b09caad10365223959c7/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=392d2710a67bde72c1a8b09caad10365223959c7",
        "patch": "@@ -34,6 +34,7 @@ class Params;\n /** Block header validation functions */\n \n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, bool fCheckPOW = true);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, const CBlockIndex* pindexPrev);\n \n } // namespace Consensus\n "
      },
      {
        "sha": "b7a0e2656bffcb27fdfc873bc854da8d827c1116",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392d2710a67bde72c1a8b09caad10365223959c7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392d2710a67bde72c1a8b09caad10365223959c7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=392d2710a67bde72c1a8b09caad10365223959c7",
        "patch": "@@ -2574,24 +2574,20 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n-                         REJECT_INVALID, \"bad-diffbits\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n-        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n-                             REJECT_INVALID, \"time-too-old\");\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n     // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n     for (int i = 2; i <= 3; i++)\n         if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(error(\"%s: rejected nVersion=%d block\", __func__, i-1), \n-                                 REJECT_OBSOLETE, \"bad-version\");\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n \n     return true;\n }\n@@ -2655,8 +2651,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n         return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n@@ -2768,8 +2764,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n     if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n         return false;\n     if (!ContextualCheckBlock(block, state, pindexPrev))"
      },
      {
        "sha": "7e39f702df72e3c42375ad679335fbb406ef04f8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392d2710a67bde72c1a8b09caad10365223959c7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392d2710a67bde72c1a8b09caad10365223959c7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=392d2710a67bde72c1a8b09caad10365223959c7",
        "patch": "@@ -344,7 +344,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */"
      }
    ]
  },
  {
    "sha": "7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTdhNzk1NjFmNGJhYTJiZjVjMGE5ZjAxNTM3MDA2Yjg2NGJjMmQ5",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T14:57:12Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:12Z"
      },
      "message": "Consensus: MOVEONLY: Move CValidationState from main consensus/validation",
      "tree": {
        "sha": "40a5583ed687ac2b2685ed6447ccfe782fcd214b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40a5583ed687ac2b2685ed6447ccfe782fcd214b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "392d2710a67bde72c1a8b09caad10365223959c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392d2710a67bde72c1a8b09caad10365223959c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/392d2710a67bde72c1a8b09caad10365223959c7"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 101,
      "deletions": 81
    },
    "files": [
      {
        "sha": "44fd584b8d2815e72d06fb1352958e66acebabde",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -89,6 +89,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   consensus/consensus.h \\\n   consensus/params.h \\\n+  consensus/validation.h \\\n   core_io.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\"
      },
      {
        "sha": "c92bec4fae5a8db11e3a0fc3adbf406ad1ed061f",
        "filename": "src/consensus/validation.h",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VALIDATION_H\n+#define BITCOIN_CONSENSUS_VALIDATION_H\n+\n+#include <string>\n+\n+/** \"reject\" message codes */\n+static const unsigned char REJECT_MALFORMED = 0x01;\n+static const unsigned char REJECT_INVALID = 0x10;\n+static const unsigned char REJECT_OBSOLETE = 0x11;\n+static const unsigned char REJECT_DUPLICATE = 0x12;\n+static const unsigned char REJECT_NONSTANDARD = 0x40;\n+static const unsigned char REJECT_DUST = 0x41;\n+static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n+static const unsigned char REJECT_CHECKPOINT = 0x43;\n+\n+/** Capture information about block/transaction validation */\n+class CValidationState {\n+private:\n+    enum mode_state {\n+        MODE_VALID,   //! everything ok\n+        MODE_INVALID, //! network rule violation (DoS value may be set)\n+        MODE_ERROR,   //! run-time error\n+    } mode;\n+    int nDoS;\n+    std::string strRejectReason;\n+    unsigned char chRejectCode;\n+    bool corruptionPossible;\n+public:\n+    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n+    bool DoS(int level, bool ret = false,\n+             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n+             bool corruptionIn=false) {\n+        chRejectCode = chRejectCodeIn;\n+        strRejectReason = strRejectReasonIn;\n+        corruptionPossible = corruptionIn;\n+        if (mode == MODE_ERROR)\n+            return ret;\n+        nDoS += level;\n+        mode = MODE_INVALID;\n+        return ret;\n+    }\n+    bool Invalid(bool ret = false,\n+                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+    }\n+    bool Error(std::string strRejectReasonIn=\"\") {\n+        if (mode == MODE_VALID)\n+            strRejectReason = strRejectReasonIn;\n+        mode = MODE_ERROR;\n+        return false;\n+    }\n+    bool IsValid() const {\n+        return mode == MODE_VALID;\n+    }\n+    bool IsInvalid() const {\n+        return mode == MODE_INVALID;\n+    }\n+    bool IsError() const {\n+        return mode == MODE_ERROR;\n+    }\n+    bool IsInvalid(int &nDoSOut) const {\n+        if (IsInvalid()) {\n+            nDoSOut = nDoS;\n+            return true;\n+        }\n+        return false;\n+    }\n+    bool CorruptionPossible() const {\n+        return corruptionPossible;\n+    }\n+    unsigned char GetRejectCode() const { return chRejectCode; }\n+    std::string GetRejectReason() const { return strRejectReason; }\n+};\n+\n+#endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "a9c80b1bd61ad15be7e5bd50d293c8ebbd4dd457",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\""
      },
      {
        "sha": "a06819a3f913e67b6d2c621d0141ecab2c904876",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -12,6 +12,7 @@\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\""
      },
      {
        "sha": "e55975d3d954b49392088a3208b43f5ac74c5fcf",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 69,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -87,16 +87,6 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n \n-/** \"reject\" message codes */\n-static const unsigned char REJECT_MALFORMED = 0x01;\n-static const unsigned char REJECT_INVALID = 0x10;\n-static const unsigned char REJECT_OBSOLETE = 0x11;\n-static const unsigned char REJECT_DUPLICATE = 0x12;\n-static const unsigned char REJECT_NONSTANDARD = 0x40;\n-static const unsigned char REJECT_DUST = 0x41;\n-static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n-static const unsigned char REJECT_CHECKPOINT = 0x43;\n-\n struct BlockHasher\n {\n     size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n@@ -409,65 +399,6 @@ class CBlockFileInfo\n      }\n };\n \n-/** Capture information about block/transaction validation */\n-class CValidationState {\n-private:\n-    enum mode_state {\n-        MODE_VALID,   //! everything ok\n-        MODE_INVALID, //! network rule violation (DoS value may be set)\n-        MODE_ERROR,   //! run-time error\n-    } mode;\n-    int nDoS;\n-    std::string strRejectReason;\n-    unsigned char chRejectCode;\n-    bool corruptionPossible;\n-public:\n-    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n-    bool DoS(int level, bool ret = false,\n-             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n-        chRejectCode = chRejectCodeIn;\n-        strRejectReason = strRejectReasonIn;\n-        corruptionPossible = corruptionIn;\n-        if (mode == MODE_ERROR)\n-            return ret;\n-        nDoS += level;\n-        mode = MODE_INVALID;\n-        return ret;\n-    }\n-    bool Invalid(bool ret = false,\n-                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n-    }\n-    bool Error(std::string strRejectReasonIn=\"\") {\n-        if (mode == MODE_VALID)\n-            strRejectReason = strRejectReasonIn;\n-        mode = MODE_ERROR;\n-        return false;\n-    }\n-    bool IsValid() const {\n-        return mode == MODE_VALID;\n-    }\n-    bool IsInvalid() const {\n-        return mode == MODE_INVALID;\n-    }\n-    bool IsError() const {\n-        return mode == MODE_ERROR;\n-    }\n-    bool IsInvalid(int &nDoSOut) const {\n-        if (IsInvalid()) {\n-            nDoSOut = nDoS;\n-            return true;\n-        }\n-        return false;\n-    }\n-    bool CorruptionPossible() const {\n-        return corruptionPossible;\n-    }\n-    unsigned char GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-};\n-\n /** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n class CVerifyDB {\n public:"
      },
      {
        "sha": "c2cf79fae8c7063fccb2bc1807359e526a66ec3b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -8,6 +8,7 @@\n #include \"amount.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "148409c1f65bcf1ac3adc8e6bb18fe36ed1263a7",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -4,7 +4,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"checkpoints.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\"\n #include \"util.h\""
      },
      {
        "sha": "6abafc3357b2e3a78a3c2c7e2fc4a6705f4a7635",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\""
      },
      {
        "sha": "8816b7e8defb111068aee6946a7bdc507b2fe592",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -4,12 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "51530c4de5a02873c1df19cff4c35d927f76a9d4",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -2,16 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n-// Unit tests for block.CheckBlock()\n-//\n-\n-\n-\n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n-#include \"utiltime.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"utiltime.h\"\n \n #include <cstdio>\n "
      },
      {
        "sha": "981d3e623d98846ab7f5d74f8206eb9fb5faf024",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\""
      },
      {
        "sha": "87be2217c456fd2916724a5ab6a9636c985e37f4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -2,15 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"main.h\"\n #include \"random.h\"\n-#include \"serialize.h\"\n-#include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/script.h\"\n+#include \"serialize.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"util.h\"\n #include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n \n #include <iostream>\n "
      },
      {
        "sha": "d12535e43854bbafa1342878689ee60e4f63247c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -7,12 +7,13 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"core_io.h\"\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "d7c555a8c197816d2bb1f62045f3231997dd85ca",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "9e218f5293c716e95c92bb8034960725dfd1eef3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -9,6 +9,7 @@\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "d16e7825d60b2796f2e0280b880a42e586d06f8c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "patch": "@@ -6,6 +6,7 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"protocol.h\"\n #include \"serialize.h\""
      }
    ]
  },
  {
    "sha": "928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjhhYWUxN2UyYzIxZDRkY2MzZmVkY2FkYzcyYjczNTZiZDAzNzZj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-31T22:45:27Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:12Z"
      },
      "message": "Consensus: MOVEONLY: Move to blockverify.cpp:\n\nfrom main.cpp:\n-CheckBlockHeader\n-ContextualCheckBlockHeader\n-IsSuperMajority\n\nfrom pow.cpp:\n-CalculateNextWorkRequired\n-CheckProofOfWork\n-GetNextWorkRequired",
      "tree": {
        "sha": "2d58d2bbdae88c898f8d87d8bdf984872cd13a32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d58d2bbdae88c898f8d87d8bdf984872cd13a32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e7a79561f4baa2bf5c0a9f01537006b864bc2d9"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 135,
      "deletions": 135
    },
    "files": [
      {
        "sha": "b2f54ac3819ee91a8ca323f9c54cb28c147d467d",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
        "patch": "@@ -5,12 +5,99 @@\n \n #include \"consensus/consensus.h\"\n \n+#include \"arith_uint256.h\"\n #include \"chain.h\"\n+#include \"consensus/params.h\"\n+#include \"consensus/validation.h\"\n+#include \"primitives/block.h\"\n+#include \"tinyformat.h\"\n \n #include <algorithm>  \n \n static const unsigned int MEDIAN_TIME_SPAN = 11;\n \n+uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+{\n+    uint32_t nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n+\n+    // Genesis block\n+    if (pindexLast == NULL)\n+        return nProofOfWorkLimit;\n+\n+    // Only change once per difficulty adjustment interval\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n+    {\n+        if (params.fPowAllowMinDifficultyBlocks)\n+        {\n+            // Special difficulty rule for testnet:\n+            // If the new block's timestamp is more than 2* 10 minutes\n+            // then allow mining of a min-difficulty block.\n+            if ((int64_t)pblock->nTime > (int64_t)pindexLast->nTime + params.nPowTargetSpacing*2)\n+                return nProofOfWorkLimit;\n+            else\n+            {\n+                // Return the last non-special-min-difficulty-rules-block\n+                const CBlockIndex* pindex = pindexLast;\n+                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                    pindex = pindex->pprev;\n+                return pindex->nBits;\n+            }\n+        }\n+        return pindexLast->nBits;\n+    }\n+\n+    // Go back by what we want to be 14 days worth of blocks\n+    const CBlockIndex* pindexFirst = pindexLast;\n+    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n+        pindexFirst = pindexFirst->pprev;\n+    assert(pindexFirst);\n+\n+    return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n+}\n+\n+uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+{\n+    // Limit adjustment step\n+    int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n+    if (nActualTimespan < params.nPowTargetTimespan/4)\n+        nActualTimespan = params.nPowTargetTimespan/4;\n+    if (nActualTimespan > params.nPowTargetTimespan*4)\n+        nActualTimespan = params.nPowTargetTimespan*4;\n+\n+    // Retarget\n+    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n+    arith_uint256 bnNew;\n+    arith_uint256 bnOld;\n+    bnNew.SetCompact(pindexLast->nBits);\n+    bnOld = bnNew;\n+    bnNew *= nActualTimespan;\n+    bnNew /= params.nPowTargetTimespan;\n+\n+    if (bnNew > bnPowLimit)\n+        bnNew = bnPowLimit;\n+\n+    return bnNew.GetCompact();\n+}\n+\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n+{\n+    bool fNegative;\n+    bool fOverflow;\n+    arith_uint256 bnTarget;\n+\n+    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+\n+    // Check range\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n+        return false; // nBits below minimum work\n+\n+    // Check proof of work matches claimed amount\n+    if (UintToArith256(hash) > bnTarget)\n+        return false; // hash doesn't match nBits\n+\n+    return true;\n+}\n+\n int64_t GetMedianTimePast(const CBlockIndex* pindex)\n {\n     int64_t pmedian[MEDIAN_TIME_SPAN];\n@@ -23,3 +110,46 @@ int64_t GetMedianTimePast(const CBlockIndex* pindex)\n     std::sort(pbegin, pend);\n     return pbegin[(pend - pbegin)/2];\n }\n+\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n+{\n+    unsigned int nFound = 0;\n+    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n+bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n+{\n+    // Check proof of work matches claimed amount\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n+\n+    // Check timestamp\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n+\n+    return true;\n+}\n+\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+{\n+    // Check proof of work\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n+\n+    // Check timestamp against prev\n+    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n+\n+    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n+    for (int i = 2; i <= 3; i++)\n+        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n+\n+    return true;\n+}"
      },
      {
        "sha": "08f5e0c8ec61af2c087955681e56a1d070062801",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
        "patch": "@@ -45,5 +45,10 @@ uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *\n uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n+ */\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "79821a0f765ed77fcaab2d739a6f83e423ee0cca",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 49,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
        "patch": "@@ -71,11 +71,6 @@ map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -2484,19 +2479,6 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, int64_t nTime, bool fCheckPOW)\n-{\n-    // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n-\n-    // Check timestamp\n-    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n-\n-    return true;\n-}\n-\n bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n@@ -2575,24 +2557,6 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n-{\n-    // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n-\n-    // Check timestamp against prev\n-    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n-\n-    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n-    for (int i = 2; i <= 3; i++)\n-        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n-\n-    return true;\n-}\n-\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n@@ -2709,19 +2673,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n-{\n-    unsigned int nFound = 0;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Preliminary checks"
      },
      {
        "sha": "e9cbb157ae2a397e107629629057f7bb3f6fff10",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 86,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928aae17e2c21d4dcc3fedcadc72b7356bd0376c/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
        "patch": "@@ -7,92 +7,6 @@\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/params.h\"\n-#include \"primitives/block.h\"\n-#include \"uint256.h\"\n-\n-uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n-{\n-    uint32_t nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n-\n-    // Genesis block\n-    if (pindexLast == NULL)\n-        return nProofOfWorkLimit;\n-\n-    // Only change once per difficulty adjustment interval\n-    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() != 0)\n-    {\n-        if (params.fPowAllowMinDifficultyBlocks)\n-        {\n-            // Special difficulty rule for testnet:\n-            // If the new block's timestamp is more than 2* 10 minutes\n-            // then allow mining of a min-difficulty block.\n-            if ((int64_t)pblock->nTime > (int64_t)pindexLast->nTime + params.nPowTargetSpacing*2)\n-                return nProofOfWorkLimit;\n-            else\n-            {\n-                // Return the last non-special-min-difficulty-rules-block\n-                const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n-                    pindex = pindex->pprev;\n-                return pindex->nBits;\n-            }\n-        }\n-        return pindexLast->nBits;\n-    }\n-\n-    // Go back by what we want to be 14 days worth of blocks\n-    const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n-        pindexFirst = pindexFirst->pprev;\n-    assert(pindexFirst);\n-\n-    return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n-}\n-\n-uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n-{\n-    // Limit adjustment step\n-    int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n-    if (nActualTimespan < params.nPowTargetTimespan/4)\n-        nActualTimespan = params.nPowTargetTimespan/4;\n-    if (nActualTimespan > params.nPowTargetTimespan*4)\n-        nActualTimespan = params.nPowTargetTimespan*4;\n-\n-    // Retarget\n-    const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n-    arith_uint256 bnNew;\n-    arith_uint256 bnOld;\n-    bnNew.SetCompact(pindexLast->nBits);\n-    bnOld = bnNew;\n-    bnNew *= nActualTimespan;\n-    bnNew /= params.nPowTargetTimespan;\n-\n-    if (bnNew > bnPowLimit)\n-        bnNew = bnPowLimit;\n-\n-    return bnNew.GetCompact();\n-}\n-\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n-{\n-    bool fNegative;\n-    bool fOverflow;\n-    arith_uint256 bnTarget;\n-\n-    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n-\n-    // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-        return false; // nBits below minimum work\n-\n-    // Check proof of work matches claimed amount\n-    if (UintToArith256(hash) > bnTarget)\n-        return false; // hash doesn't match nBits\n-\n-    return true;\n-}\n \n arith_uint256 GetBlockProof(const CBlockIndex& block)\n {"
      }
    ]
  },
  {
    "sha": "11ede96f59f611ede596a1335e896b1fef4fb5b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWVkZTk2ZjU5ZjYxMWVkZTU5NmExMzM1ZTg5NmIxZmVmNGZiNWIy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T12:53:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:12Z"
      },
      "message": "Consensus: Introduce Consensus::VerifyBlockHeader()",
      "tree": {
        "sha": "ae5de75fd863adf141fd743930c0f3efcdb6afe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae5de75fd863adf141fd743930c0f3efcdb6afe7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11ede96f59f611ede596a1335e896b1fef4fb5b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ede96f59f611ede596a1335e896b1fef4fb5b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11ede96f59f611ede596a1335e896b1fef4fb5b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ede96f59f611ede596a1335e896b1fef4fb5b2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928aae17e2c21d4dcc3fedcadc72b7356bd0376c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/928aae17e2c21d4dcc3fedcadc72b7356bd0376c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "96fb8f32769c8ff1737274d111a45a28e1d73faf",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=11ede96f59f611ede596a1335e896b1fef4fb5b2",
        "patch": "@@ -153,3 +153,12 @@ bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidatio\n \n     return true;\n }\n+\n+bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev)\n+{\n+    if (!Consensus::CheckBlockHeader(block, state, params, nTime, true))\n+        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, params, pindexPrev))\n+        return false;\n+    return true;\n+}"
      },
      {
        "sha": "59d246a47336bd2a9ae23d34d8be93d1251917b3",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=11ede96f59f611ede596a1335e896b1fef4fb5b2",
        "patch": "@@ -33,6 +33,7 @@ class Params;\n \n /** Block header validation functions */\n \n+bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, const CBlockIndex* pindexPrev);\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, bool fCheckPOW = true);\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, const CBlockIndex* pindexPrev);\n "
      }
    ]
  },
  {
    "sha": "22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmUzN2JjMDc5ZjBhYjY0NmEzOGFhNmI2MmUwOWQwNGJjYjRmODgz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T17:59:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:12Z"
      },
      "message": "Consensus: Cleanup: Destroy pow.o and move GetBlockProof(CBlockIndex) to chain.o",
      "tree": {
        "sha": "b9744999e5f2f8693c8b863759e30062ad41288d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9744999e5f2f8693c8b863759e30062ad41288d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11ede96f59f611ede596a1335e896b1fef4fb5b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ede96f59f611ede596a1335e896b1fef4fb5b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11ede96f59f611ede596a1335e896b1fef4fb5b2"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 17,
      "deletions": 41
    },
    "files": [
      {
        "sha": "a1c34da05fbea214e1dbcdb403dec61dc67c442a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
        "patch": "@@ -107,7 +107,6 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n-  pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n   protocol.h \\\n@@ -184,7 +183,6 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n-  pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\"
      },
      {
        "sha": "5778745483883fc6d2961dda808d7dbabfeaf293",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
        "patch": "@@ -106,3 +106,18 @@ void CBlockIndex::BuildSkip()\n     if (pprev)\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n+\n+arith_uint256 GetBlockProof(const CBlockIndex& block)\n+{\n+    arith_uint256 bnTarget;\n+    bool fNegative;\n+    bool fOverflow;\n+    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n+    if (fNegative || fOverflow || bnTarget == 0)\n+        return 0;\n+    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n+    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n+    // or ~bnTarget / (nTarget+1) + 1.\n+    return (~bnTarget / (bnTarget + 1)) + 1;\n+}"
      },
      {
        "sha": "e2275b2e6d73d6f991cfd205144dfff23ca2e080",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
        "patch": "@@ -265,6 +265,8 @@ class CBlockIndex\n     const CBlockIndex* GetAncestor(int height) const;\n };\n \n+arith_uint256 GetBlockProof(const CBlockIndex& block);\n+\n /** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex\n {"
      },
      {
        "sha": "2fc14f94450b1871b04146b9fb057da4a355478d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e37bc079f0ab646a38aa6b62e09d04bcb4f883/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
        "patch": "@@ -16,7 +16,6 @@\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "e9cbb157ae2a397e107629629057f7bb3f6fff10",
        "filename": "src/pow.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=11ede96f59f611ede596a1335e896b1fef4fb5b2",
        "patch": "@@ -1,24 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"pow.h\"\n-\n-#include \"arith_uint256.h\"\n-#include \"chain.h\"\n-\n-arith_uint256 GetBlockProof(const CBlockIndex& block)\n-{\n-    arith_uint256 bnTarget;\n-    bool fNegative;\n-    bool fOverflow;\n-    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n-    if (fNegative || fOverflow || bnTarget == 0)\n-        return 0;\n-    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n-    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n-    // or ~bnTarget / (nTarget+1) + 1.\n-    return (~bnTarget / (bnTarget + 1)) + 1;\n-}"
      },
      {
        "sha": "a501a3dcebe09fa7e815a46f2a901a32a44142be",
        "filename": "src/pow.h",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ede96f59f611ede596a1335e896b1fef4fb5b2/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=11ede96f59f611ede596a1335e896b1fef4fb5b2",
        "patch": "@@ -1,14 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_POW_H\n-#define BITCOIN_POW_H\n-\n-class CBlockIndex;\n-class arith_uint256;\n-\n-arith_uint256 GetBlockProof(const CBlockIndex& block);\n-\n-#endif // BITCOIN_POW_H"
      }
    ]
  },
  {
    "sha": "4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTI4ZWM2OTYxN2YxYjZkNmM4ZjBkNzNkYzQwOTFjZGVkN2MyMTZj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-06T11:21:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:12Z"
      },
      "message": "Consensus: API proposal for Consensus::VerifyBlockHeader()",
      "tree": {
        "sha": "d0ec1c15c15e672805cb4fab0d747ff8fd711f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0ec1c15c15e672805cb4fab0d747ff8fd711f5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e37bc079f0ab646a38aa6b62e09d04bcb4f883",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22e37bc079f0ab646a38aa6b62e09d04bcb4f883"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 82,
      "deletions": 55
    },
    "files": [
      {
        "sha": "b78cb2d3ad27be2f4cf1e57b8b49fc10d2ccc114",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -89,6 +89,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   consensus/consensus.h \\\n   consensus/params.h \\\n+  consensus/types.h \\\n   consensus/validation.h \\\n   core_io.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "ca48649c684a1470f1163d460ffc0ea016a1562f",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -121,3 +121,8 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     // or ~bnTarget / (nTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;\n }\n+\n+const CBlockIndexBase* GetPrevIndex(const CBlockIndexBase* pindex)\n+{\n+    return ((CBlockIndex*)pindex)->pprev;\n+}"
      },
      {
        "sha": "f79ff2bf898bf3d267e87bcc8e04ee6109519837",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_CHAIN_H\n \n #include \"arith_uint256.h\"\n+#include \"consensus/types.h\"\n #include \"primitives/block.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\"\n@@ -93,26 +94,26 @@ enum BlockStatus {\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n };\n \n+/**\n+ * This getter is used by in bitcoin core when a PrevIndexGetter\n+ * function pointer is needed in consensus checks. \n+ */\n+const CBlockIndexBase* GetPrevIndex(const CBlockIndexBase* pindex);\n+\n /** The block chain is a tree shaped structure starting with the\n  * genesis block at the root, with each block potentially having multiple\n  * candidates to be the next block. A blockindex may have multiple pprev pointing\n  * to it, but at most one of them can be part of the currently active branch.\n  */\n-class CBlockIndex\n+class CBlockIndex : public CBlockIndexBase\n {\n public:\n-    //! pointer to the hash of the block, if any. Memory is owned by this CBlockIndex\n-    const uint256* phashBlock;\n-\n     //! pointer to the index of the predecessor of this block\n     CBlockIndex* pprev;\n \n     //! pointer to the index of some further predecessor of this block\n     CBlockIndex* pskip;\n \n-    //! height of the entry in the chain. The genesis block has height 0\n-    int nHeight;\n-\n     //! Which # file this block is stored in (blk?????.dat)\n     int nFile;\n \n@@ -137,13 +138,6 @@ class CBlockIndex\n     //! Verification status of this block. See enum BlockStatus\n     unsigned int nStatus;\n \n-    //! block header\n-    int nVersion;\n-    uint256 hashMerkleRoot;\n-    unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n-\n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n     uint32_t nSequenceId;\n "
      },
      {
        "sha": "346504ad22c97a63f68f5d28ef5fc8eb9a8604e0",
        "filename": "src/consensus/blockverify.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/consensus/blockverify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/consensus/blockverify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/blockverify.cpp?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -6,7 +6,6 @@\n #include \"consensus/consensus.h\"\n \n #include \"arith_uint256.h\"\n-#include \"chain.h\"\n #include \"consensus/params.h\"\n #include \"consensus/validation.h\"\n #include \"primitives/block.h\"\n@@ -16,7 +15,7 @@\n \n static const unsigned int MEDIAN_TIME_SPAN = 11;\n \n-uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n+uint32_t GetNextWorkRequired(const CBlockIndexBase* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params, PrevIndexGetter indexGetter)\n {\n     uint32_t nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();\n \n@@ -37,25 +36,25 @@ uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n-                const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n-                    pindex = pindex->pprev;\n+                const CBlockIndexBase* pindex = pindexLast;\n+                while (indexGetter(pindex) && pindex->nHeight % params.DifficultyAdjustmentInterval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                    pindex = indexGetter(pindex);\n                 return pindex->nBits;\n             }\n         }\n         return pindexLast->nBits;\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n-    const CBlockIndex* pindexFirst = pindexLast;\n+    const CBlockIndexBase* pindexFirst = pindexLast;\n     for (int i = 0; pindexFirst && i < params.DifficultyAdjustmentInterval()-1; i++)\n-        pindexFirst = pindexFirst->pprev;\n+        pindexFirst = indexGetter(pindexFirst);\n     assert(pindexFirst);\n \n     return CalculateNextWorkRequired(pindexLast, (int64_t)pindexFirst->nTime, params);\n }\n \n-uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n+uint32_t CalculateNextWorkRequired(const CBlockIndexBase* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     // Limit adjustment step\n     int64_t nActualTimespan = (int64_t)pindexLast->nTime - nFirstBlockTime;\n@@ -98,27 +97,27 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     return true;\n }\n \n-int64_t GetMedianTimePast(const CBlockIndex* pindex)\n+int64_t GetMedianTimePast(const CBlockIndexBase* pindex, PrevIndexGetter indexGetter)\n {\n     int64_t pmedian[MEDIAN_TIME_SPAN];\n     int64_t* pbegin = &pmedian[MEDIAN_TIME_SPAN];\n     int64_t* pend = &pmedian[MEDIAN_TIME_SPAN];\n \n-    for (unsigned int i = 0; i < MEDIAN_TIME_SPAN && pindex; i++, pindex = pindex->pprev)\n+    for (unsigned int i = 0; i < MEDIAN_TIME_SPAN && pindex; i++, pindex = indexGetter(pindex))\n         *(--pbegin) = (int64_t)pindex->nTime;\n \n     std::sort(pbegin, pend);\n     return pbegin[(pend - pbegin)/2];\n }\n \n-bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n+bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter indexGetter)\n {\n     unsigned int nFound = 0;\n     for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n     {\n         if (pstart->nVersion >= minVersion)\n             ++nFound;\n-        pstart = pstart->pprev;\n+        pstart = indexGetter(pstart);\n     }\n     return (nFound >= nRequired);\n }\n@@ -136,29 +135,29 @@ bool Consensus::CheckBlockHeader(const CBlockHeader& block, CValidationState& st\n     return true;\n }\n \n-bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n {\n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams, indexGetter))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n-    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev))\n+    if (block.GetBlockTime() <= GetMedianTimePast(pindexPrev, indexGetter))\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n     // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded (last version=3):\n     for (int i = 2; i <= 3; i++)\n-        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        if (block.nVersion < i && IsSuperMajority(i, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams, indexGetter))\n             return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n \n     return true;\n }\n \n-bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev)\n+bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter)\n {\n     if (!Consensus::CheckBlockHeader(block, state, params, nTime, true))\n         return false;\n-    if (!Consensus::ContextualCheckBlockHeader(block, state, params, pindexPrev))\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, params, pindexPrev, indexGetter))\n         return false;\n     return true;\n }"
      },
      {
        "sha": "936f1f92114e6758f8b48e4da5ed69409ad31c7d",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -6,10 +6,11 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"consensus/types.h\"\n+\n #include <stdint.h>\n \n class CBlockHeader;\n-class CBlockIndex;\n class CValidationState;\n class uint256;\n \n@@ -33,23 +34,23 @@ class Params;\n \n /** Block header validation functions */\n \n-bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, const CBlockIndex* pindexPrev);\n+bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, const CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter);\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, int64_t nTime, bool fCheckPOW = true);\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, const CBlockIndex* pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Params& consensusParams, const CBlockIndexBase* pindexPrev, PrevIndexGetter);\n \n } // namespace Consensus\n \n /** Block header validation utility functions */\n \n-int64_t GetMedianTimePast(const CBlockIndex* pindex);\n-uint32_t GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n-uint32_t CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n+int64_t GetMedianTimePast(const CBlockIndexBase* pindex, PrevIndexGetter);\n+uint32_t GetNextWorkRequired(const CBlockIndexBase* pindexLast, const CBlockHeader *pblock, const Consensus::Params&, PrevIndexGetter);\n+uint32_t CalculateNextWorkRequired(const CBlockIndexBase* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n  * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n  */\n-bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n+bool IsSuperMajority(int minVersion, const CBlockIndexBase* pstart, unsigned nRequired, const Consensus::Params& consensusParams, PrevIndexGetter);\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "0ed78456c1d87bebbcf94b4ad008ed79612dd0fa",
        "filename": "src/consensus/types.h",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/consensus/types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/consensus/types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/types.h?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_TYPES_H\n+#define BITCOIN_CONSENSUS_TYPES_H\n+\n+#include \"uint256.h\"\n+\n+struct CBlockIndexBase\n+{\n+    //! pointer to the hash of the block, if any. Memory is owned by this CBlockIndexBase\n+    const uint256* phashBlock;\n+    //! block header\n+    int32_t nVersion;\n+    uint256 hashMerkleRoot;\n+    uint32_t nTime;\n+    uint32_t nBits;\n+    uint32_t nNonce;\n+    //! height of the entry in the chain. The genesis block has height 0\n+    int nHeight;\n+};\n+\n+typedef const CBlockIndexBase* (*PrevIndexGetter)(const CBlockIndexBase*);\n+\n+#endif // BITCOIN_CONSENSUS_TYPES_H"
      },
      {
        "sha": "e3bc2ac89780bf50d61ed93b3843216bdc103c9d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -1744,7 +1744,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus(), GetPrevIndex)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n@@ -2569,7 +2569,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams, GetPrevIndex))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -2615,7 +2615,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (!CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, mapBlockIndex))\n         return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n-    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetPrevIndex))\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     if (pindex == NULL)\n@@ -2715,7 +2715,7 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetPrevIndex))\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n     if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n         return false;"
      },
      {
        "sha": "4a4bd215c6e88533576a726cb2ca1e7713b28bcc",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -6,6 +6,7 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -82,7 +83,7 @@ class TxPriorityCompare\n \n uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& consensusParams)\n {\n-    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, consensusParams);\n+    uint32_t nextChallenge = GetNextWorkRequired(pindexLast, pblock, consensusParams, GetPrevIndex);\n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n     LogPrintf(\"pindexLast->nTime = %d\\n\", (int64_t)pindexLast->nTime);\n@@ -96,7 +97,7 @@ uint32_t GetNextWorkRequiredLog(const CBlockIndex* pindexLast, const CBlockHeade\n \n void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    pblock->nTime = std::max(GetMedianTimePast(pindexPrev)+1, GetAdjustedTime());\n+    pblock->nTime = std::max(GetMedianTimePast(pindexPrev, GetPrevIndex)+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)"
      },
      {
        "sha": "e9f5626a5e6ff1a7017d5c2a1ad647856210479c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -574,7 +574,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n     result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n     result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)GetMedianTimePast(pindexPrev)+1));\n+    result.push_back(Pair(\"mintime\", (int64_t)GetMedianTimePast(pindexPrev, GetPrevIndex)+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));"
      },
      {
        "sha": "788e0e9e59c8a9e5d1971b5bffba8828062212a6",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -73,7 +73,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n-        pblock->nTime = GetMedianTimePast(chainActive.Tip())+1;\n+        pblock->nTime = GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+1;\n         CMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n@@ -213,7 +213,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight = nHeight;\n \n     // non-final txs in mempool\n-    SetMockTime(GetMedianTimePast(chainActive.Tip())+1);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+1);\n \n     // height locked\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout.resize(1);\n     tx2.vout[0].nValue = 4900000000LL;\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = GetMedianTimePast(chainActive.Tip())+1;\n+    tx2.nLockTime = GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n@@ -248,7 +248,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // However if we advance height and time by one, both will.\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(GetMedianTimePast(chainActive.Tip())+2);\n+    SetMockTime(GetMedianTimePast(chainActive.Tip(), GetPrevIndex)+2);\n \n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));"
      },
      {
        "sha": "43e694256de81c65e37f585594ea3d2488b7557f",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528ec69617f1b6d6c8f0d73dc4091cded7c216c/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"test/test_bitcoin.h\"\n@@ -19,7 +18,7 @@ static const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN)\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n@@ -30,7 +29,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n@@ -41,7 +40,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n@@ -52,7 +51,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n-    CBlockIndex pindexLast;\n+    CBlockIndexBase pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;"
      }
    ]
  },
  {
    "sha": "00b9b227afc8669a877984561329dde75d3d8942",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGI5YjIyN2FmYzg2NjlhODc3OTg0NTYxMzI5ZGRlNzVkM2Q4OTQy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-13T19:25:55Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-20T19:38:12Z"
      },
      "message": "Consensus: API: Expose bitcoinconsensus_verify_header() in libconsensus",
      "tree": {
        "sha": "d06ace2f349136f52df9aa67d44802e4d68cdd70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d06ace2f349136f52df9aa67d44802e4d68cdd70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00b9b227afc8669a877984561329dde75d3d8942",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00b9b227afc8669a877984561329dde75d3d8942",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00b9b227afc8669a877984561329dde75d3d8942",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00b9b227afc8669a877984561329dde75d3d8942/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528ec69617f1b6d6c8f0d73dc4091cded7c216c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4528ec69617f1b6d6c8f0d73dc4091cded7c216c"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 37,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5b07cc1bc3d74aa198f047f6002197a1b7dc07c2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00b9b227afc8669a877984561329dde75d3d8942/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00b9b227afc8669a877984561329dde75d3d8942/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=00b9b227afc8669a877984561329dde75d3d8942",
        "patch": "@@ -362,6 +362,8 @@ bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n+  arith_uint256.cpp \\\n+  consensus/blockverify.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/sha1.cpp \\\n@@ -370,6 +372,7 @@ libbitcoinconsensus_la_SOURCES = \\\n   eccryptoverify.cpp \\\n   ecwrapper.cpp \\\n   hash.cpp \\\n+  primitives/block.cpp \\\n   primitives/transaction.cpp \\\n   pubkey.cpp \\\n   script/bitcoinconsensus.cpp \\"
      },
      {
        "sha": "92cc7608595b9c0e6d4d85866946dad5bd8740e8",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00b9b227afc8669a877984561329dde75d3d8942/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00b9b227afc8669a877984561329dde75d3d8942/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=00b9b227afc8669a877984561329dde75d3d8942",
        "patch": "@@ -5,24 +5,27 @@\n \n #include \"bitcoinconsensus.h\"\n \n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n+#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/interpreter.h\"\n #include \"version.h\"\n \n namespace {\n \n-/** A class that deserializes a single CTransaction one time. */\n-class TxInputStream\n+/** A class that deserializes a single object implementing ::Unserialize() one time. */\n+class ObjectInputStream\n {\n public:\n-    TxInputStream(int nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :\n+    ObjectInputStream(int nTypeIn, int nVersionIn, const unsigned char *object, size_t objectLen) :\n     m_type(nTypeIn),\n     m_version(nVersionIn),\n-    m_data(txTo),\n-    m_remaining(txToLen)\n+    m_data(object),\n+    m_remaining(objectLen)\n     {}\n \n-    TxInputStream& read(char* pch, size_t nSize)\n+    ObjectInputStream& read(char* pch, size_t nSize)\n     {\n         if (nSize > m_remaining)\n             throw std::ios_base::failure(std::string(__func__) + \": end of data\");\n@@ -40,7 +43,7 @@ class TxInputStream\n     }\n \n     template<typename T>\n-    TxInputStream& operator>>(T& obj)\n+    ObjectInputStream& operator>>(T& obj)\n     {\n         ::Unserialize(*this, obj, m_type, m_version);\n         return *this;\n@@ -63,11 +66,11 @@ inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)\n } // anon namespace\n \n int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n-                                    const unsigned char *txTo        , unsigned int txToLen,\n-                                    unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n+                                   const unsigned char *txTo        , unsigned int txToLen,\n+                                   unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n     try {\n-        TxInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n+        ObjectInputStream stream(SER_NETWORK, PROTOCOL_VERSION, txTo, txToLen);\n         CTransaction tx;\n         stream >> tx;\n         if (nIn >= tx.vin.size())\n@@ -84,6 +87,27 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n     }\n }\n \n+int bitcoinconsensus_verify_header(const unsigned char* blockHeader, unsigned int blockHeaderLen,\n+                                   const Consensus::Params& params, int64_t nTime, CBlockIndexBase* pindexPrev, PrevIndexGetter indexGetter, \n+                                   bitcoinconsensus_error* err)\n+{\n+    try {\n+        ObjectInputStream stream(SER_NETWORK, PROTOCOL_VERSION, blockHeader, blockHeaderLen);\n+        CBlockHeader header;\n+        stream >> header;\n+        if (header.GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION) != blockHeaderLen)\n+            return set_error(err, bitcoinconsensus_ERR_TX_SIZE_MISMATCH);\n+\n+         // Regardless of the verification result, the tx did not error.\n+         set_error(err, bitcoinconsensus_ERR_OK);\n+\n+         CValidationState state;\n+         return Consensus::VerifyBlockHeader(header, state, params, nTime, pindexPrev, indexGetter);\n+    } catch (const std::exception&) {\n+        return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n+    }\n+}\n+\n unsigned int bitcoinconsensus_version()\n {\n     // Just use the API version for now"
      }
    ]
  }
]