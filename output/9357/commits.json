[
  {
    "sha": "4ced31325699dc308571010ce004376d2915cd7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2VkMzEzMjU2OTlkYzMwODU3MTAxMGNlMDA0Mzc2ZDI5MTVjZDdl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-14T22:00:06Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-14T22:00:06Z"
      },
      "message": "Allow compactblock reconstruction when block is in flight",
      "tree": {
        "sha": "75f3191e794c5e9deb1e94ea933a112af40fd113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75f3191e794c5e9deb1e94ea933a112af40fd113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ced31325699dc308571010ce004376d2915cd7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ced31325699dc308571010ce004376d2915cd7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ced31325699dc308571010ce004376d2915cd7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ced31325699dc308571010ce004376d2915cd7e/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a4aa876230c602427aa40b47a84698a3fd28e85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a4aa876230c602427aa40b47a84698a3fd28e85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a4aa876230c602427aa40b47a84698a3fd28e85"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "976e130f1a2628c68fb697a15ededcd38cf3060c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ced31325699dc308571010ce004376d2915cd7e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ced31325699dc308571010ce004376d2915cd7e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4ced31325699dc308571010ce004376d2915cd7e",
        "patch": "@@ -5657,6 +5657,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBlockHeaderAndShortTxIDs cmpctblock;\n         vRecv >> cmpctblock;\n \n+        // Keep a CBlock for \"optimistic\" compactblock reconstructions (see\n+        // below)\n+        CBlock block;\n+        bool fBlockReconstructed = false;\n+\n         LOCK(cs_main);\n \n         if (mapBlockIndex.find(cmpctblock.header.hashPrevBlock) == mapBlockIndex.end()) {\n@@ -5765,6 +5770,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     req.blockhash = pindex->GetBlockHash();\n                     pfrom->PushMessage(NetMsgType::GETBLOCKTXN, req);\n                 }\n+            } else {\n+                // This block is either already in flight from a different\n+                // peer, or this peer has too many blocks outstanding to\n+                // download from.\n+                // Optimistically try to reconstruct anyway since we might be\n+                // able to without any round trips.\n+                PartiallyDownloadedBlock tempBlock(&mempool);\n+                ReadStatus status = tempBlock.InitData(cmpctblock);\n+                if (status != READ_STATUS_OK) {\n+                    // TODO: don't ignore failures\n+                    return true;\n+                }\n+                std::vector<CTransaction> dummy;\n+                status = tempBlock.FillBlock(block, dummy);\n+                if (status == READ_STATUS_OK) {\n+                    fBlockReconstructed = true;\n+                }\n             }\n         } else {\n             if (fAlreadyInFlight) {\n@@ -5785,6 +5807,33 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n         }\n \n+        if (fBlockReconstructed) {\n+            // If we got here, we were able to optimistically reconstruct a\n+            // block that is in flight from some other peer.  However, this\n+            // cmpctblock may be invalid.  In particular, while we've checked\n+            // that the block merkle root commits to the transaction ids, we\n+            // haven't yet checked that tx witnesses are properly committed to\n+            // in the coinbase witness commitment.\n+            //\n+            // ProcessNewBlock will call MarkBlockAsReceived(), which will\n+            // clear any in-flight compact block state that might be present\n+            // from some other peer.  We don't want a malleated compact block\n+            // request to interfere with block relay, so we don't want to call\n+            // ProcessNewBlock until we've already checked that the witness\n+            // commitment is correct.\n+            {\n+                LOCK(cs_main);\n+                CValidationState dummy;\n+                if (!ContextualCheckBlock(block, dummy, pindex->pprev)) {\n+                    // TODO: could send reject message to peer?\n+                    return true;\n+                }\n+            }\n+            CValidationState state;\n+            ProcessNewBlock(state, chainparams, pfrom, &block, true, NULL, false);\n+            // TODO: could send reject message if block is invalid?\n+        }\n+\n         CheckBlockIndex(chainparams.GetConsensus());\n     }\n "
      }
    ]
  },
  {
    "sha": "53b656f3558fe960d9328079ca18eb53418f2652",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2I2NTZmMzU1OGZlOTYwZDkzMjgwNzljYTE4ZWI1MzQxOGYyNjUy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-01T17:59:10Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-14T22:00:26Z"
      },
      "message": "[qa] Update compactblocks test for multi-peer reconstruction",
      "tree": {
        "sha": "21e3eced1a795d7a7474c52701d62281fb3d7629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21e3eced1a795d7a7474c52701d62281fb3d7629"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b656f3558fe960d9328079ca18eb53418f2652",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b656f3558fe960d9328079ca18eb53418f2652",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b656f3558fe960d9328079ca18eb53418f2652",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b656f3558fe960d9328079ca18eb53418f2652/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ced31325699dc308571010ce004376d2915cd7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ced31325699dc308571010ce004376d2915cd7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ced31325699dc308571010ce004376d2915cd7e"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "156a559b10a532e144bf484707a89f3414153430",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b656f3558fe960d9328079ca18eb53418f2652/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b656f3558fe960d9328079ca18eb53418f2652/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=53b656f3558fe960d9328079ca18eb53418f2652",
        "patch": "@@ -757,6 +757,54 @@ def request_cb_announcements(self, peer, node, version):\n         msg.announce = True\n         peer.send_and_ping(msg)\n \n+    def test_compactblock_reconstruction_multiple_peers(self, node, stalling_peer, delivery_peer):\n+        assert(len(self.utxos))\n+\n+        def announce_cmpct_block(node, peer):\n+            utxo = self.utxos.pop(0)\n+            block = self.build_block_with_transactions(node, utxo, 5)\n+\n+            cmpct_block = HeaderAndShortIDs()\n+            cmpct_block.initialize_from_block(block)\n+            msg = msg_cmpctblock(cmpct_block.to_p2p())\n+            peer.send_and_ping(msg)\n+            with mininode_lock:\n+                assert(peer.last_getblocktxn is not None)\n+            return block, cmpct_block\n+\n+        block, cmpct_block = announce_cmpct_block(node, stalling_peer)\n+\n+        for tx in block.vtx[1:]:\n+            delivery_peer.send_message(msg_tx(tx))\n+        delivery_peer.sync_with_ping()\n+        mempool = node.getrawmempool()\n+        for tx in block.vtx[1:]:\n+            assert(tx.hash in mempool)\n+\n+        delivery_peer.send_and_ping(msg_cmpctblock(cmpct_block.to_p2p()))\n+        assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n+\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+\n+        # Now test that delivering an invalid compact block won't break relay\n+\n+        block, cmpct_block = announce_cmpct_block(node, stalling_peer)\n+        for tx in block.vtx[1:]:\n+            delivery_peer.send_message(msg_tx(tx))\n+        delivery_peer.sync_with_ping()\n+\n+        cmpct_block.prefilled_txn[0].tx.wit.vtxinwit = [ CTxInWitness() ]\n+        cmpct_block.prefilled_txn[0].tx.wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n+\n+        cmpct_block.use_witness = True\n+        delivery_peer.send_and_ping(msg_cmpctblock(cmpct_block.to_p2p()))\n+        assert(int(node.getbestblockhash(), 16) != block.sha256)\n+\n+        msg = msg_blocktxn()\n+        msg.block_transactions.blockhash = block.sha256\n+        msg.block_transactions.transactions = block.vtx[1:]\n+        stalling_peer.send_and_ping(msg)\n+        assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n@@ -841,6 +889,10 @@ def run_test(self):\n         self.test_invalid_tx_in_compactblock(self.nodes[1], self.segwit_node, False)\n         self.test_invalid_tx_in_compactblock(self.nodes[1], self.old_node, False)\n \n+        print(\"\\tTesting reconstructing compact blocks from all peers...\")\n+        self.test_compactblock_reconstruction_multiple_peers(self.nodes[1], self.segwit_node, self.old_node)\n+        sync_blocks(self.nodes)\n+\n         # Advance to segwit activation\n         print (\"\\nAdvancing to segwit activation\\n\")\n         self.activate_segwit(self.nodes[1])"
      }
    ]
  }
]