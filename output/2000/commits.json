[
  {
    "sha": "b56585d0676a61aec427514aeb8405092ef80835",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTY1ODVkMDY3NmE2MWFlYzQyNzUxNGFlYjg0MDUwOTJlZjgwODM1",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-11-10T13:26:34Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-11-10T13:26:34Z"
      },
      "message": "fix some missing indentations in main.cpp for better readability",
      "tree": {
        "sha": "7641fde678f02eaa83e8073ede5e0e990aad54c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7641fde678f02eaa83e8073ede5e0e990aad54c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b56585d0676a61aec427514aeb8405092ef80835",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b56585d0676a61aec427514aeb8405092ef80835",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b56585d0676a61aec427514aeb8405092ef80835",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b56585d0676a61aec427514aeb8405092ef80835/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e88f8887b6a68d8e2cf698122a97426a12dceee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e88f8887b6a68d8e2cf698122a97426a12dceee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e88f8887b6a68d8e2cf698122a97426a12dceee0"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 40,
      "deletions": 41
    },
    "files": [
      {
        "sha": "f0bf4755b71a0d8a8f4b3027be0e092051f14961",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 41,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b56585d0676a61aec427514aeb8405092ef80835/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b56585d0676a61aec427514aeb8405092ef80835/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b56585d0676a61aec427514aeb8405092ef80835",
        "patch": "@@ -2018,52 +2018,51 @@ bool CBlock::AcceptBlock(CDiskBlockPos *dbp)\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n     if (hash != hashGenesisBlock) {\n-\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n-    if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n-    pindexPrev = (*mi).second;\n-    nHeight = pindexPrev->nHeight+1;\n-\n-    // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n-\n-    // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return error(\"AcceptBlock() : block's timestamp is too early\");\n-\n-    // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n-\n-    // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\n-\n-    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (nVersion < 2)\n-    {\n-        if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n-            (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n+        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+        if (mi == mapBlockIndex.end())\n+            return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        pindexPrev = (*mi).second;\n+        nHeight = pindexPrev->nHeight+1;\n+\n+        // Check proof of work\n+        if (nBits != GetNextWorkRequired(pindexPrev, this))\n+            return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+\n+        // Check timestamp against prev\n+        if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+            return error(\"AcceptBlock() : block's timestamp is too early\");\n+\n+        // Check that all transactions are finalized\n+        BOOST_FOREACH(const CTransaction& tx, vtx)\n+            if (!tx.IsFinal(nHeight, GetBlockTime()))\n+                return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+\n+        // Check that the block chain matches the known block chain up to a checkpoint\n+        if (!Checkpoints::CheckBlock(nHeight, hash))\n+            return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\n+\n+        // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n+        if (nVersion < 2)\n         {\n-            return error(\"AcceptBlock() : rejected nVersion=1 block\");\n+            if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n+                (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n+            {\n+                return error(\"AcceptBlock() : rejected nVersion=1 block\");\n+            }\n         }\n-    }\n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    if (nVersion >= 2)\n-    {\n-        // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-        if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n-            (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n+        // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+        if (nVersion >= 2)\n         {\n-            CScript expect = CScript() << nHeight;\n-            if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n-                return DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n+            // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+            if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n+                (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n+            {\n+                CScript expect = CScript() << nHeight;\n+                if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n+                    return DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n+            }\n         }\n     }\n-    }\n \n     // Write block to history file\n     unsigned int nBlockSize = ::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION);"
      }
    ]
  }
]