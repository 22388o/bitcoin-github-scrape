[
  {
    "sha": "4aabadbf44ad8f14cfa3f8921caf3135515b9ecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWFiYWRiZjQ0YWQ4ZjE0Y2ZhM2Y4OTIxY2FmMzEzNTUxNWI5ZWNm",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-11-07T17:07:25Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-11-29T22:41:12Z"
      },
      "message": "tests: have combine_logs default to most recent test dir",
      "tree": {
        "sha": "684a2741a41e9a12565a5c8db0bd5ac5c135cdb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/684a2741a41e9a12565a5c8db0bd5ac5c135cdb3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4eaaa6ac53606a1533b56050af77961d8c27dc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4eaaa6ac53606a1533b56050af77961d8c27dc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4eaaa6ac53606a1533b56050af77961d8c27dc7"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 51,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5bb3b5c094ddf5ba51ce2cde871ff31f975c84ca",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 48,
        "deletions": 8,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=4aabadbf44ad8f14cfa3f8921caf3135515b9ecf",
        "patch": "@@ -2,7 +2,9 @@\n \"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n \n This streams the combined log output to stdout. Use combine_logs.py > outputfile\n-to write to an outputfile.\"\"\"\n+to write to an outputfile.\n+\n+If no argument is provided, the most recent test directory will be used.\"\"\"\n \n import argparse\n from collections import defaultdict, namedtuple\n@@ -11,6 +13,13 @@\n import os\n import re\n import sys\n+import tempfile\n+\n+# N.B.: don't import any local modules here - this script must remain executable\n+# without the parent module installed.\n+\n+# Should match same symbol in `test_framework.test_framework`.\n+TMPDIR_PREFIX = \"bitcoin_func_test_\"\n \n # Matches on the date format at the start of the log event\n TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{6})?Z\")\n@@ -19,22 +28,30 @@\n \n def main():\n     \"\"\"Main function. Parses args, reads the log files and renders them as text or html.\"\"\"\n-\n-    parser = argparse.ArgumentParser(usage='%(prog)s [options] <test temporary directory>', description=__doc__)\n+    parser = argparse.ArgumentParser(\n+        description=__doc__, formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        'testdir', nargs='?', default='',\n+        help=('temporary test directory to combine logs from. '\n+              'Defaults to the most recent'))\n     parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n     parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n-    args, unknown_args = parser.parse_known_args()\n+    args = parser.parse_args()\n \n     if args.html and args.color:\n         print(\"Only one out of --color or --html should be specified\")\n         sys.exit(1)\n \n-    # There should only be one unknown argument - the path of the temporary test directory\n-    if len(unknown_args) != 1:\n-        print(\"Unexpected arguments\" + str(unknown_args))\n+    testdir = args.testdir or find_latest_test_dir()\n+\n+    if not testdir:\n+        print(\"No test directories found\")\n         sys.exit(1)\n \n-    log_events = read_logs(unknown_args[0])\n+    if not args.testdir:\n+        print(\"Opening latest test directory: {}\".format(testdir), file=sys.stderr)\n+\n+    log_events = read_logs(testdir)\n \n     print_logs(log_events, color=args.color, html=args.html)\n \n@@ -53,6 +70,29 @@ def read_logs(tmp_dir):\n \n     return heapq.merge(*[get_log_events(source, f) for source, f in files])\n \n+\n+def find_latest_test_dir():\n+    \"\"\"Returns the latest tmpfile test directory prefix.\"\"\"\n+    tmpdir = tempfile.gettempdir()\n+\n+    def join_tmp(basename):\n+        return os.path.join(tmpdir, basename)\n+\n+    def is_valid_test_tmpdir(basename):\n+        fullpath = join_tmp(basename)\n+        return (\n+            os.path.isdir(fullpath)\n+            and basename.startswith(TMPDIR_PREFIX)\n+            and os.access(fullpath, os.R_OK)\n+        )\n+\n+    testdir_paths = [\n+        join_tmp(name) for name in os.listdir(tmpdir) if is_valid_test_tmpdir(name)\n+    ]\n+\n+    return max(testdir_paths, key=os.path.getmtime) if testdir_paths else None\n+\n+\n def get_log_events(source, logfile):\n     \"\"\"Generator function that returns individual log events.\n "
      },
      {
        "sha": "0dfa9e0d2474d4baad3f2355447812372c08d79a",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4aabadbf44ad8f14cfa3f8921caf3135515b9ecf/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4aabadbf44ad8f14cfa3f8921caf3135515b9ecf",
        "patch": "@@ -43,6 +43,8 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n+TMPDIR_PREFIX = \"bitcoin_func_test_\"\n+\n \n class SkipTest(Exception):\n     \"\"\"This exception is raised to skip a test\"\"\"\n@@ -151,7 +153,7 @@ def main(self):\n             self.options.tmpdir = os.path.abspath(self.options.tmpdir)\n             os.makedirs(self.options.tmpdir, exist_ok=False)\n         else:\n-            self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")\n+            self.options.tmpdir = tempfile.mkdtemp(prefix=TMPDIR_PREFIX)\n         self._start_logging()\n \n         self.log.debug('Setting up network thread')"
      }
    ]
  }
]