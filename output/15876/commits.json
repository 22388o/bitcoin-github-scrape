[
  {
    "sha": "f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGJmNWIxNGUyZThjZDc2NWU0NmRjYzk5ZTcyM2EwMzFjMTQwMjJj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-16T14:52:51Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T17:10:22Z"
      },
      "message": "configure: Clone ax_boost_chrono to ax_boost_process",
      "tree": {
        "sha": "6b7a9a890b7fa69c8f2302c931097e22e624c102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b7a9a890b7fa69c8f2302c931097e22e624c102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1Ebn4ACgkQV/+b28ww\nEAlYgg/9FCuQ5/43c1OAJDKoE+GGZCtlDMxCJMKl/xNhN6zCIQRcFXXcD24C/7j7\nKdm8LgoOQ9RbKogZbVUZr3nuHe62s1aYeWVlFNT92zIrOU+mJAGtLDkiXuRhYfsb\nOAkbXzF/u8vDnP0nJRkdhaxWuFCTir86j2SPUOKJzyVGF6Y3MxifRgFBlkTBURZl\nE47ME9OMb8ZHRFmt2ucx7M6X24fEZfP8NcBU6Amf55ifeT90CE3F062gsDuHDYVM\n0LXeiwfSNGssU/JmYUIsgF11W3exDbkFW61bAWT9e/lgWujzxWF/Bvsk3B/Yk86q\nBHnDv2ezK55+hUQM4MWvRf9Xt5b0GEyf270ZiXNCGbhNZPbXw2NAfTZ7eVjCinql\nSpxyN4DdevlW5Um/Zk18+eSoMgDY5tKnyjDwujmUznALB+mhuBNQHmZELesNagX1\nL8ZEubdBHbawlNUCKHdDhJ90uKnmRY1K3SxiS8sI1zl1v7AZiqCce5u9MMrS73zC\nfDrr9sVn/pkPIfZqJ41Lts+X0TOh/+LkEQlH7qzmUQiDZoF9Ldf0qYVAVP5Zxv/b\ngfPzdMoHpuV6bV6IUKeERAVatsm5Eu+gCA5DeAPcL60SkZu5m5UFCmrB1Qkwk2z0\nfoHAJH40s9GQPU3/QOBJp6wn69yRiZrhpL4x5pYcBuC7jJN2SC8=\n=fZxM\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b7a9a890b7fa69c8f2302c931097e22e624c102\nparent 3a3d8b83571205b8329d4ee25537e3cc4397c3b8\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1550328771 +0000\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564765822 +0200\n\nconfigure: Clone ax_boost_chrono to ax_boost_process\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bf5b14e2e8cd765e46dcc99e723a031c14022c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a3d8b83571205b8329d4ee25537e3cc4397c3b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a3d8b83571205b8329d4ee25537e3cc4397c3b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a3d8b83571205b8329d4ee25537e3cc4397c3b8"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 115,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0479fe6648e4c231dc0c35f4407323e002307e0b",
        "filename": "build-aux/m4/ax_boost_process.m4",
        "status": "added",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bf5b14e2e8cd765e46dcc99e723a031c14022c/build-aux/m4/ax_boost_process.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bf5b14e2e8cd765e46dcc99e723a031c14022c/build-aux/m4/ax_boost_process.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_process.m4?ref=f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
        "patch": "@@ -0,0 +1,114 @@\n+# SYNOPSIS\n+#\n+#   AX_BOOST_PROCESS\n+#\n+# DESCRIPTION\n+#\n+#   Test for Process library from the Boost C++ libraries. The macro requires\n+#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_PROCESS_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_PROCESS\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2012 Xiyue Deng <manphiz@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 4\n+\n+AC_DEFUN([AX_BOOST_PROCESS],\n+[\n+\tAC_ARG_WITH([boost-process],\n+\tAS_HELP_STRING([--with-boost-process@<:@=special-lib@:>@],\n+                   [use the Process library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-process=boost_process-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_process_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_process_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Process library is available,\n+\t\t\t\t\t   ax_cv_boost_process,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\n+\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n+                                   [[boost::process::child* child = new boost::process::child; delete child;]])],\n+                   ax_cv_boost_process=yes, ax_cv_boost_process=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_process\" = \"xyes\"; then\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_PROCESS,,[define if the Boost::Process library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+            if test \"x$ax_boost_user_process_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_process*.so* $BOOSTLIBDIR/libboost_process*.dylib* $BOOSTLIBDIR/libboost_process*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_process.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_process.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_process.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_process\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_process*.dll* $BOOSTLIBDIR/boost_process*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_process.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_process.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_process_lib boost_process-$ax_boost_user_process_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                   [link_process=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\tif test \"x$link_process\" = \"xno\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "e54f1d05ae4cfcb43f9fe438b704842379bde905",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bf5b14e2e8cd765e46dcc99e723a031c14022c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bf5b14e2e8cd765e46dcc99e723a031c14022c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
        "patch": "@@ -1036,6 +1036,7 @@ AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_THREAD\n AX_BOOST_CHRONO\n+AX_BOOST_PROCESS\n \n dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n dnl counter implementations. In 1.63 and later the std::atomic approach is default."
      }
    ]
  },
  {
    "sha": "9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGZiMDFiNGE3ZmU0ZWNiZmI4M2ExMjlmMWFjYzk0OWMxMDczZDMy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:17:32Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T17:10:22Z"
      },
      "message": "Add boost::process\n\n* AppVeyor boost-process vcpkg package.\n* Add HAVE_BOOST_PROCESS for MSVC build (bitcoin_config.h)\n* Tell Boost linter to ignore it",
      "tree": {
        "sha": "40c760f9e717d63fd8c0d5485e52bc42621e9fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40c760f9e717d63fd8c0d5485e52bc42621e9fad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1Ebn4ACgkQV/+b28ww\nEAlctBAAuhtWt9rPhTS4g2jihiR/e9N7XBmW/R72v+n7MW2hy2lcMhsxAFJuJgPd\njwx7QkWPAhtlS8AM66ppLBFwC/b4V1m2pUZV57SpibzBNPVEh+LvgMtzuuME3Ydk\nmekXOt6W+1ZJT5mU0TlUPhmGzN2i2oicZ+umULxtpWi1pseJ6uTXMdY+BmSGNRZg\nQPwao5zFxD5bnTUPlCneAxnmUGHX0QtS6d3wdX3bCGL0KTf8++VREahNBKNZBfvm\n79O8PwMvd8WqWkRqfhadE3RWnHCKFadU4qT2/DDgnCiWF3caDvWhayq6vEDpgCO9\nPRbZNedTgr6w9VRrjC6A9OwCz6XoUfRbrNe58rmnb0orqEBXNmyd3ZBKGlMjMqrV\nCj7FGSWjNAjWe4h/hCfqQM7Kfo/NPe6256Bz46YLKm3y9OfCspaOftyh734u4Hf/\nmJRbiDcSbKzlC93voHRKjjpstEdT6XSQmhQCWLoysDQuz8/ObfcaisriHyYVfSa0\nfOJD9lyWdJvoaSfW2kfak44rM4mSlQstBxcBCKhX8az8AfnAzWPt01Ll8mcb6KIF\nYAIeo4XrZmDDPmiC0IuA3kQIIU7bWvH+cvWCFt8F0n+SL6Qrw1vIo7e/8X/JstDf\nhXeJAxrCaQe76flR7rz8jjbfYb22y5SK/4LWVUJvo2TtarpMRFg=\n=kFqm\n-----END PGP SIGNATURE-----",
        "payload": "tree 40c760f9e717d63fd8c0d5485e52bc42621e9fad\nparent f8bf5b14e2e8cd765e46dcc99e723a031c14022c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550078252 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564765822 +0200\n\nAdd boost::process\n\n* AppVeyor boost-process vcpkg package.\n* Add HAVE_BOOST_PROCESS for MSVC build (bitcoin_config.h)\n* Tell Boost linter to ignore it\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bf5b14e2e8cd765e46dcc99e723a031c14022c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bf5b14e2e8cd765e46dcc99e723a031c14022c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a7b35fb23e5466d611a9d4550070b676299a8a83",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
        "patch": "@@ -7,7 +7,7 @@ clone_depth: 5\n environment:\n   APPVEYOR_SAVE_CACHE_ON_ERROR: true\n   CLCACHE_SERVER: 1\n-  PACKAGES: berkeleydb boost-filesystem boost-signals2 boost-test libevent openssl rapidcheck zeromq\n+  PACKAGES: berkeleydb boost-filesystem boost-process boost-signals2 boost-test libevent openssl rapidcheck zeromq\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n cache:"
      },
      {
        "sha": "b2991b58a53e7610e7fbfbaff9dc9c6232d2de9d",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
        "patch": "@@ -38,7 +38,7 @@ The instructions below use `vcpkg` to install the dependencies.\n - Install the required packages (replace x64 with x86 as required):\n \n ```\n-    PS >.\\vcpkg install --triplet x64-windows-static boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb rapidcheck\n+    PS >.\\vcpkg install --triplet x64-windows-static boost-filesystem boost-process boost-signals2 boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb rapidcheck\n ```\n \n - Use Python to generate *.vcxproj from Makefile"
      },
      {
        "sha": "27746c039688074447c51209f1488399ec654ba2",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
        "patch": "@@ -49,6 +49,9 @@\n /* define if the Boost::Filesystem library is available */\n #define HAVE_BOOST_FILESYSTEM /**/\n \n+/* define if the Boost::Process library is available */\n+#define HAVE_BOOST_PROCESS /**/\n+\n /* define if the Boost::PROGRAM_OPTIONS library is available */\n #define HAVE_BOOST_PROGRAM_OPTIONS /**/\n "
      },
      {
        "sha": "4b0fff1669bb48f4d3dc3fca76759cddec1794d4",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
        "patch": "@@ -61,6 +61,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/optional.hpp\n     boost/preprocessor/cat.hpp\n     boost/preprocessor/stringize.hpp\n+    boost/process.hpp\n     boost/signals2/connection.hpp\n     boost/signals2/last_value.hpp\n     boost/signals2/signal.hpp"
      }
    ]
  },
  {
    "sha": "9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWRkM2EyM2I1OTVlZWRkZmY1ZjFmMGUzMzZjMmI0YzQ4ZWM5M2E3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-16T16:26:06Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:12:01Z"
      },
      "message": "[doc] include Doxygen comments for HAVE_BOOST_PROCESS",
      "tree": {
        "sha": "ed5058e9d805b08b8b6b47c9b79bfcc3a3b80b74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed5058e9d805b08b8b6b47c9b79bfcc3a3b80b74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfPEACgkQV/+b28ww\nEAlupg/+KTM74eyaGXVz3n6nV2xkAnjccbEF5P6LVw/028hCoKHaK941dY8rWk6n\nmY301/z87lHjGLe4Lq9jO9wc0nzN26Lm92pMKsb2smCBz0ui3xjhRZbHXSwVnW8H\noFOaG3GhQ+FkBMWShTvfa/stfaryCCQ1bcw5bWvc+ro5nbVMe0lWhfoB06ftI8ow\nd4qtUxokZB6lt6RD/N3oK41QSxtC4kvbp1bXjyaQbGiDavTdgvIQOYKxMqSg4LFB\nuHrRkITXlxZWeDmlcmWyGjysgT4yYGFGRenszYkvNUiPhsuMjSOefxA6/rlfcqof\n15QrPPMtl5eldG5EGPwO2JF673tunCIWgKXpSBsbMXQHZM7Iq1unEj5C61xvFPni\nzXdOvFLbkFaw9Q01RrB/7zAp9/wWvj94wOxw0GR/AcUZc8g6wRueMpq96s0wrjA0\nmuDAD0Ezo/fkoaGGF/p97dVT91Nth5ImKDZXlG+ZW9IblzrjQ68FPfjKSo+R2s8u\nhmPOJoMTtk5KR/7WzsxxkVwZ8TumlvVOO057Ilp2m440WxQzO9Otc7sGqqW3Ttzy\nwKsNCNxDuD307BBfjZv37WY+0NRKg9TynhRnQnJnebpTcqNfEtRspesYHguAGZmQ\n76ob66+r9BfQ/JSJKcyw6bIj+zXXjx9xMbiFBVioraDMTzjSJ3g=\n=tW5h\n-----END PGP SIGNATURE-----",
        "payload": "tree ed5058e9d805b08b8b6b47c9b79bfcc3a3b80b74\nparent 9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32\nauthor Sjors Provoost <sjors@sprovoost.nl> 1555431966 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769521 +0200\n\n[doc] include Doxygen comments for HAVE_BOOST_PROCESS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dfb01b4a7fe4ecbfb83a129f1acc949c1073d32"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "41a68b92b1e30b1ee28b0c0b33af583c0b435804",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
        "patch": "@@ -2072,7 +2072,7 @@ INCLUDE_FILE_PATTERNS  =\n # recursively expanded use the := operator instead of the = operator.\n # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n \n-PREDEFINED             =\n+PREDEFINED             = HAVE_BOOST_PROCESS\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"
      }
    ]
  },
  {
    "sha": "c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2UzZDcwOTRjYjBlMGI5Njk3NTdkYzZlMmJiMTRmMTlhNjk0NjMx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:59:16Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:12:01Z"
      },
      "message": "[test] framework: add skip_if_no_runcommand",
      "tree": {
        "sha": "2c5e8c9c4e288dacf6a748834797a74c366451d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c5e8c9c4e288dacf6a748834797a74c366451d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfPEACgkQV/+b28ww\nEAluVw//bmFJ4L2nCdCqfsWLCQr6kkIhdQcnez+s7o6tZuxf8QSNHiZ7CP1Y15ex\nyzOnH9QuWPY6CJI7udHwB9gyCF9vxt+//D3+MUtuaG3nvo6jh7UziUtRctGS2Z4V\nKj77xqOIFIfMBL8e+yjIXDEqHmEAm2wE+Ll/VFDNZpQUWbld4FdaAfo0G06iccdV\naOdaBryvRbGrN1QVbnViTnw4lmObGZJIZExTQhE/KvdhISpCGd8+Dqr1kwytUDkf\nSjTzfMEDbDJcLa8iAbxTKPqnG8ThDoWSt5dkHDAbEoBY8F3jjb1mnbcZoAt/4ldb\nQKXoROXkkvgklwsuij/rHvIsrATHLkr4D20UUfGMZzC36SkQ8vtoEWNq0RvximVS\nwlOc+z9cFl+Ty28cI6EG/LXvnqOr2fzNiahp04jJ7fvfxnxuupMozknZVEPNwnTj\nfEI6u0ZL8PgnNfqFhEOFNG2ItPNi7GU+NSnOD5eSVAuZknm88EtO2Cb+VMX/DkYR\nKzWuRBAhIWHsrVF63YrBJQfb/OPUMbH5Ix4aZgZNwXZ4NASHHqhza7E583M6ucSA\nJ5iwtaU/Rrt26nTfUB9ix0PXefZuuf98LW/FILYEQSlWsSBSSn8Dk6eCfXngF8hM\nJziXggyjh86njnK7gBZ19tVpwN2S8eM5g+ynp19YqyPjgzYv2UQ=\n=L6Ya\n-----END PGP SIGNATURE-----",
        "payload": "tree 2c5e8c9c4e288dacf6a748834797a74c366451d0\nparent 9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550080756 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769521 +0200\n\n[test] framework: add skip_if_no_runcommand\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e3d7094cb0e0b969757dc6e2bb14f19a694631/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9edd3a23b595eeddff5f1f0e336c2b4c48ec93a7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1bf38e7083d3118fe86f72ceb61cc94ed63a2e1b",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7e3d7094cb0e0b969757dc6e2bb14f19a694631/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7e3d7094cb0e0b969757dc6e2bb14f19a694631/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
        "patch": "@@ -558,10 +558,19 @@ def skip_if_no_cli(self):\n         if not self.is_cli_compiled():\n             raise SkipTest(\"bitcoin-cli has not been compiled.\")\n \n+    def skip_if_no_runcommand(self, node):\n+        \"\"\"Skip the running test if runcommand has not been compiled.\"\"\"\n+        if not self.is_runcommand_compiled(node):\n+            raise SkipTest(\"runcommand has not been compiled.\")\n+\n     def is_cli_compiled(self):\n         \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_CLI\")\n \n+    def is_runcommand_compiled(self, node):\n+        \"\"\"Checks whether runcommand was compiled.\"\"\"\n+        return node.help(\"runcommand\") != \"help: unknown command: runcommand\"\n+\n     def is_wallet_compiled(self):\n         \"\"\"Checks whether the wallet module was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_WALLET\")"
      }
    ]
  },
  {
    "sha": "fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjRhNDI0MjlkZWE0ZTMwYjUxZmIyZTM1ZjQ0ODdjN2JiNjcwMjhk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:59:43Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:12:01Z"
      },
      "message": "[util] add runCommandParseJSON",
      "tree": {
        "sha": "2944a1af01b4a81cdedfda0f9dd76a4e8e9ddbc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2944a1af01b4a81cdedfda0f9dd76a4e8e9ddbc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfPEACgkQV/+b28ww\nEAn/ag//ZihkbZ9AFSQQqHVEbnEShr1hweMe/9Lr9SYorce+4jEYiz0mTPCuJY9l\nQ2U0IWGh2VNgAmEAvuhPnkSnqstS+c7TEV2h9C2QPqy9hzOxGt9yF9jAosH26EAL\noIoE9dynqH0V3Vffi0ye7i2tlo6WECDkSFnqmDIO2NbzYAoM8qDMRIUr9wFQN7RX\nQuQnqMEjA7aj7cyGvBKtCg9D5T8s14ASIT6I4alXTG9XQA6B0+jr2IBnF3Q0yQZZ\nJEJHQS0Vv/qUB64HYgHeCpDGzGBnlANkTj3phw97WSvnmCCHSMcSZP146WApGcAo\nkQxDg1rs8xdGwCNsTXvOLbERUTYSd93G50mLMf4x5uYFKZpS0xX7gBJPza99+b6a\n8KxdmYBnOpD3hzesml+D9YIZT1gaSIzLeTPp/ozx5Lv5vrPJdbEPhZJYdQrx5CdQ\nblBD98ajtoN3rA93v3B2UTotP05ZnQmHwgcOpwlwNlzmtFyyTdTshAT4XgxAlxG0\nBuVA2m+pfN3I7Fdfq+ne0/KbLs3pYrhW//fn7qMUIGPXoQi1USRFjdy+CfNy1X/v\n3YINvo4O+5hMIrEp3KiBVnqDMjBT5jM5HMyZ5BAtpKm37swYWh9cyKy9mc7ejU0U\nyud6UNHRSZSumifBbs/io6z7iL73NMsmcYjAHRkhD9EsOeos4io=\n=k+rS\n-----END PGP SIGNATURE-----",
        "payload": "tree 2944a1af01b4a81cdedfda0f9dd76a4e8e9ddbc5\nparent c7e3d7094cb0e0b969757dc6e2bb14f19a694631\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550080783 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769521 +0200\n\n[util] add runCommandParseJSON\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e3d7094cb0e0b969757dc6e2bb14f19a694631",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e3d7094cb0e0b969757dc6e2bb14f19a694631"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 170,
      "deletions": 0
    },
    "files": [
      {
        "sha": "14f30c9ab935cd963b5d89f115acb1c1d5699004",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "patch": "@@ -362,6 +362,40 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+#ifdef HAVE_BOOST_PROCESS\n+static UniValue runcommand(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"runcommand\",\n+                \"\\nRun command and parse JSON from stdout (-regtest only)\\n\",\n+                {\n+                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Command must return JSON\"},\n+                    {\"stdin\", RPCArg::Type::STR,  /* default */ \"\", \"Pass via stdin\"},\n+                },\n+                RPCResults{},\n+                RPCExamples{\"\"},\n+            }.ToString()\n+        );\n+\n+    if (!Params().MineBlocksOnDemand())\n+        throw std::runtime_error(\"runcommand for regression testing (-regtest mode) only\");\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    std::string command = request.params[0].get_str();\n+\n+    std::string stdinStr = \"\";\n+    if (request.params.size() > 1 && request.params[1].isStr()) {\n+        stdinStr = request.params[1].get_str();\n+    }\n+\n+    UniValue result = runCommandParseJSON(command, stdinStr);\n+\n+    return result;\n+}\n+#endif\n+\n static UniValue RPCLockedMemoryInfo()\n {\n     LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n@@ -565,6 +599,9 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            {\"timestamp\"}},\n     { \"hidden\",             \"echo\",                   &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n     { \"hidden\",             \"echojson\",               &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n+#ifdef HAVE_BOOST_PROCESS\n+    { \"hidden\",             \"runcommand\",             &runcommand,            { \"command\", \"stdin\"}},\n+#endif\n };\n // clang-format on\n "
      },
      {
        "sha": "35158bbe7e84f3f262b1871cab5edeb85f7909d0",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "patch": "@@ -5,7 +5,12 @@\n \n #include <util/system.h>\n \n+#ifdef HAVE_BOOST_PROCESS\n+#include <boost/process.hpp>\n+#endif\n+\n #include <chainparamsbase.h>\n+#include <univalue.h>\n #include <util/strencodings.h>\n #include <util/translation.h>\n \n@@ -1131,6 +1136,38 @@ void runCommand(const std::string& strCommand)\n }\n #endif\n \n+#ifdef HAVE_BOOST_PROCESS\n+UniValue runCommandParseJSON(const std::string& strCommand, const std::string& strStdIn)\n+{\n+    UniValue resultJSON;\n+\n+    if (strCommand.empty()) return UniValue::VNULL;\n+\n+    namespace bp = boost::process;\n+\n+    bp::opstream stdinStream;\n+    bp::ipstream stdoutStream;\n+\n+    bp::child c(\n+        strCommand,\n+        bp::std_out > stdoutStream,\n+        bp::std_in < stdinStream\n+    );\n+\n+    stdinStream << strStdIn << std::endl;\n+    stdinStream.pipe().close();\n+\n+    std::string result;\n+    std::getline(stdoutStream, result);\n+\n+    c.wait();\n+\n+    if (!resultJSON.read(result)) throw std::runtime_error(\"Unable to parse JSON: \" + result);\n+\n+    return resultJSON;\n+}\n+#endif\n+\n void SetupEnvironment()\n {\n #ifdef HAVE_MALLOPT_ARENA_MAX"
      },
      {
        "sha": "fc61b5a78f40db896a5f41147ba47234204579e7",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "patch": "@@ -35,6 +35,8 @@\n \n #include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n \n+class UniValue;\n+\n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();\n \n@@ -80,6 +82,16 @@ fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #if HAVE_SYSTEM\n void runCommand(const std::string& strCommand);\n #endif\n+#ifdef HAVE_BOOST_PROCESS\n+/**\n+ * Execute a command with returns JSON, and parse the result.\n+ *\n+ * @param strCommand The command to execute, including any arguments\n+ * @param strStdIn string to pass to stdin\n+ * @return parsed JSON\n+ */\n+UniValue runCommandParseJSON(const std::string& strCommand, const std::string& strStdIn=\"\");\n+#endif\n \n /**\n  * Most paths passed as configuration arguments are treated as relative to"
      },
      {
        "sha": "6572f9b7580695467fc623817b3b5534ab145be9",
        "filename": "test/functional/interface_runcommand.py",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/test/functional/interface_runcommand.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/test/functional/interface_runcommand.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_runcommand.py?ref=fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "patch": "@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests runCommandParseJSON via the runcommand regtest RPC.\"\"\"\n+\n+import os\n+import platform\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class RunCommandInterfaceTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def test_runcommand(self):\n+        self.skip_if_no_runcommand(self.nodes[0])\n+\n+        self.log.info(\"Testing runcommand...\")\n+        command_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'mocks/command.py')\n+        if platform.system() == \"Windows\":\n+            command_path = \"python \" + command_path\n+\n+        self.log.info('bitcoin-cli runcommand %s ...' % command_path)\n+\n+        res = self.nodes[0].runcommand(command_path + \" go --success\")\n+        assert_equal(res, {\"success\": True})\n+\n+        res = self.nodes[0].runcommand(command_path + \" go --fail\")\n+        assert_equal(res, {\"success\": False, \"error\": \"reason\"})\n+\n+        assert_raises_rpc_error(-1, \"a\", self.nodes[0].runcommand, command_path + \" go --invalid\")\n+\n+        res = self.nodes[0].runcommand(command_path + \" go --success\", \"hello\")\n+        assert_equal(res, {\"success\": True, \"stdin\": \"hello\"})\n+\n+    def run_test(self):\n+        self.test_runcommand()\n+\n+if __name__ == '__main__':\n+    RunCommandInterfaceTest().main()"
      },
      {
        "sha": "e484139df7224b07287c7ac2ab7a036ff142be1c",
        "filename": "test/functional/mocks/command.py",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/test/functional/mocks/command.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/test/functional/mocks/command.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/command.py?ref=fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "patch": "@@ -0,0 +1,40 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import json\n+import sys\n+\n+def command(args):\n+    if args.invalid:\n+        sys.stdout.write(\"{\")\n+    elif args.success:\n+        result = {\"success\": True}\n+        if not sys.stdin.isatty():\n+            buffer = sys.stdin.read()\n+            if buffer and buffer.rstrip() != \"\":\n+                result[\"stdin\"] = buffer.rstrip()\n+        sys.stdout.write(json.dumps(result))\n+    elif args.fail:\n+        sys.stdout.write(json.dumps({\"success\": False, \"error\": \"reason\"}))\n+    else:\n+        raise RuntimeError(\"Missing arguments\")\n+\n+\n+parser = argparse.ArgumentParser(prog='./mock_command.py', description='Test runCommandParseJSON() via runcommand RPC')\n+\n+subparsers = parser.add_subparsers()\n+parser_go = subparsers.add_parser('go')\n+parser_go.add_argument('--success', action='store_true', help='Respond with {success: true}')\n+parser_go.add_argument('--fail', action='store_true', help='Respond with {success: false, error: \"reason\"}')\n+parser_go.add_argument('--invalid', action='store_true', help='Return malformed JSON')\n+parser_go.set_defaults(func=command)\n+\n+if len(sys.argv) == 1:\n+    args = parser.parse_args(['-h'])\n+    exit()\n+\n+args_parser = parser.parse_args()\n+args_parser.func(args_parser)"
      },
      {
        "sha": "2bf86a465c0c522e1a0f7b83a421b6f474a14f9e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb4a42429dea4e30b51fb2e35f4487c7bb67028d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "patch": "@@ -130,6 +130,7 @@\n     'wallet_createwallet.py --usecli',\n     'interface_http.py',\n     'interface_rpc.py',\n+    'interface_runcommand.py',\n     'rpc_psbt.py',\n     'rpc_users.py',\n     'feature_proxy.py',"
      }
    ]
  },
  {
    "sha": "2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2NiM2I1YzU3NTJlZTgzZDBlYTJlY2UyMjFkMWVkOGRlOWNmNDM1",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:25:09Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "message": "[build] add IO support for Boost::Optional",
      "tree": {
        "sha": "20b790adb6ff66c4c52aa3263129288b9924675d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20b790adb6ff66c4c52aa3263129288b9924675d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAll8Q//cB7rCpJA50ez8Mk2jURAcGLvkFy5D3N9MR1FDF7zglH73dvzYHHd01OO\nbehG16TpBCM7yZ6Ded1hh3dXSVol6bBv/GoV1SRQYX2IDRhuRpw5OLFlpETaOEWD\nOwpUGBxoeUg8QIHWha9afpB/mEux9vdofO/Ytv534P4rsRoQSDhVZj+7JDG+lU9c\n/BHdeNx+M13jdzF1wixKOVtCWByEVzmRiJp1WwZpbnKFikVQkwCelg2BgpoJ/5ED\ncujBZKZwgkYI9ot068kCdMDkRHx1J1vuTFno1b5fGB9lrjcaDBkTaGoeOeOSLSLC\nVc6egdFOdEtRW0jUjKkjXc5OrqDnQsscaRPk4in3KfOgnKh9ft2wcrXxFm2qp0dW\njR1kRvu9FuMDzpltgbaRTEgy17EqSiehhgJKvVX5WYJypHiroAkQSG845mfrQB/k\nfS/9vp38reix5+rL9BEg94/a/0ykajo4odDBrrE9RBCWAf5wVWtzolBqJbEezEp4\nP/9Fl3OBdFRQk8Y9kF6OM4F4PdOEzLH0PHK4o+08z8xItr1BsarcUJNsCd4vZpnS\nmjC3VximUu+UjtkctBP+7APJbcqktNBJPRCajz4/+oIZ/DB9y80DJPl1bR8Jb57a\nmT1Y0ig9eC+i5sUvbZunZ9e1m0bgch37BhXMVGp+lpgV8IMEnTI=\n=dGoB\n-----END PGP SIGNATURE-----",
        "payload": "tree 20b790adb6ff66c4c52aa3263129288b9924675d\nparent fb4a42429dea4e30b51fb2e35f4487c7bb67028d\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479909 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\n[build] add IO support for Boost::Optional\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb4a42429dea4e30b51fb2e35f4487c7bb67028d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb4a42429dea4e30b51fb2e35f4487c7bb67028d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a9fe397e9224d7bcb6428760de4b302f4ed68e36",
        "filename": "src/optional.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435/src/optional.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435/src/optional.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/optional.h?ref=2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
        "patch": "@@ -8,6 +8,7 @@\n #include <utility>\n \n #include <boost/optional.hpp>\n+#include <boost/optional/optional_io.hpp>\n \n //! Substitute for C++17 std::optional\n template <typename T>"
      },
      {
        "sha": "f61f0fa538fd35f2d41b7ceaa7523e6fe202e056",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
        "patch": "@@ -59,6 +59,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp\n     boost/optional.hpp\n+    boost/optional/optional_io.hpp\n     boost/preprocessor/cat.hpp\n     boost/preprocessor/stringize.hpp\n     boost/process.hpp"
      }
    ]
  },
  {
    "sha": "f721b78272db8ac64dfea483c38c7eb30d73db31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzIxYjc4MjcyZGI4YWM2NGRmZWE0ODNjMzhjN2ViMzBkNzNkYjMx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:25:59Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "message": "Add AddressType (base58, bech32)",
      "tree": {
        "sha": "28e2eca92b3b9dbdfaa06e187f88134dc69b5a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28e2eca92b3b9dbdfaa06e187f88134dc69b5a23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f721b78272db8ac64dfea483c38c7eb30d73db31",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAnq9A//S7C4AwvRh5nc3zyDedolh8pfRwwYfyjPKeDH3FUr+dXlA/qZpodb7sTu\nJmYplGqdgCUmI+BRcvLPyq0p1rM9/m0vCqcUMhveRDSSX7pLq2jQYqhFdzvcixrk\nMGfA3Bt0ekWIXxNKJm4uJvbPY8w4SrPWgSl09I41LGMl/OL+NaljsfjHGrJjscE/\n4tQRJQIUKqdbrz/sicX3d6gdjTNLq4RYcdlb7nbZLyCWTIQm5+MSPL0Q/8BqebnY\nsQ1KeiUhr4UeAYFFkv9Qsp9a6P/pN3X0zJmrvYjoskPAyGJVjEbrmldOWIR49t6f\nLL8dys59dGP37gTOzDjgASEKpgJMvTwIS/RtXeTNm/zTmIhCLlMYJtujsBvEI5bQ\ni5E51pdAe00EWwcnW/40bNf5fHWbQfsolyyhvNuq74lvxGTQAw7c5I7gPD/ASQeh\nsxDTcBCofn1nFBMGIK2Vm7YjsnTpyKS8du/u6MdIuP4Kcd0vXLLGj46ZpfmaGFdf\nheYImkj9sfEgQmX2aDXMW3Fu8seellbh4r2kybaxT6FixLEwb6d3URkRhC2wR8pX\nxkxuBmMvNo1DhsV/mMWj60I4NN+q8lAwbh/s26BGPVr4lKWpwvxi0lc6cFqu6voR\nTPF9StvQDRolXsJC5JkCQxX6djKJrY5QCUcFJQC8Cc2ibUHHJsg=\n=Bo0a\n-----END PGP SIGNATURE-----",
        "payload": "tree 28e2eca92b3b9dbdfaa06e187f88134dc69b5a23\nparent 2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479959 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\nAdd AddressType (base58, bech32)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f721b78272db8ac64dfea483c38c7eb30d73db31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f721b78272db8ac64dfea483c38c7eb30d73db31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f721b78272db8ac64dfea483c38c7eb30d73db31/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccb3b5c5752ee83d0ea2ece221d1ed8de9cf435"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "899ebc02374331051b4a48fe7d832bfe8f98e5bb",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f721b78272db8ac64dfea483c38c7eb30d73db31/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f721b78272db8ac64dfea483c38c7eb30d73db31/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f721b78272db8ac64dfea483c38c7eb30d73db31",
        "patch": "@@ -100,6 +100,7 @@ endif\n .PHONY: FORCE check-symbols check-security\n # bitcoin core #\n BITCOIN_CORE_H = \\\n+  addresstype.h \\\n   addrdb.h \\\n   addrman.h \\\n   attributes.h \\\n@@ -255,6 +256,7 @@ libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n+  addresstype.cpp \\\n   addrdb.cpp \\\n   addrman.cpp \\\n   banman.cpp \\"
      },
      {
        "sha": "723b89cd0e84e72aee729837f16bf7f79b922360",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f721b78272db8ac64dfea483c38c7eb30d73db31/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f721b78272db8ac64dfea483c38c7eb30d73db31/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f721b78272db8ac64dfea483c38c7eb30d73db31",
        "patch": "@@ -81,6 +81,7 @@ FUZZ_SUITE_LD_COMMON = \\\n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/scriptnum10.h \\\n+  test/addresstype_tests.cpp \\\n   test/addrman_tests.cpp \\\n   test/amount_tests.cpp \\\n   test/allocator_tests.cpp \\"
      },
      {
        "sha": "231f2f9d1901f6ce5d9b5ff845027e393faba0c2",
        "filename": "src/addresstype.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f721b78272db8ac64dfea483c38c7eb30d73db31/src/addresstype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f721b78272db8ac64dfea483c38c7eb30d73db31/src/addresstype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addresstype.cpp?ref=f721b78272db8ac64dfea483c38c7eb30d73db31",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+\n+static const std::string ADDRESS_TYPE_STRING_BASE58 = \"legacy\";\n+static const std::string ADDRESS_TYPE_STRING_BECH32 = \"bech32\";\n+\n+Optional<AddressType> ParseAddressType(const std::string& type)\n+{\n+    if (type == ADDRESS_TYPE_STRING_BASE58) {\n+        return AddressType::BASE58;\n+    } else if (type == ADDRESS_TYPE_STRING_BECH32) {\n+        return AddressType::BECH32;\n+    }\n+    return nullopt;\n+}\n+\n+const std::string& FormatAddressType(AddressType type)\n+{\n+    switch (type) {\n+    case AddressType::BASE58: return ADDRESS_TYPE_STRING_BASE58;\n+    case AddressType::BECH32: return ADDRESS_TYPE_STRING_BECH32;\n+    }\n+}"
      },
      {
        "sha": "9b0382c02115a2299f7ffd6c83e1f891019f5c81",
        "filename": "src/addresstype.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f721b78272db8ac64dfea483c38c7eb30d73db31/src/addresstype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f721b78272db8ac64dfea483c38c7eb30d73db31/src/addresstype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addresstype.h?ref=f721b78272db8ac64dfea483c38c7eb30d73db31",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRESSTYPE_H\n+#define BITCOIN_ADDRESSTYPE_H\n+\n+#include <optional.h>\n+\n+#include <string>\n+\n+enum class AddressType {\n+    BASE58,\n+    BECH32\n+};\n+\n+Optional<AddressType> ParseAddressType(const std::string& type);\n+const std::string& FormatAddressType(AddressType type);\n+\n+#endif // BITCOIN_ADDRESSTYPE_H"
      },
      {
        "sha": "2a17c93b0796ef166ad9435ae7c59cae6e07e6ec",
        "filename": "src/test/addresstype_tests.cpp",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f721b78272db8ac64dfea483c38c7eb30d73db31/src/test/addresstype_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f721b78272db8ac64dfea483c38c7eb30d73db31/src/test/addresstype_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addresstype_tests.cpp?ref=f721b78272db8ac64dfea483c38c7eb30d73db31",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addresstype.h>\n+\n+#include <test/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <optional.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(addresstype_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(addresstype_test)\n+{\n+    // Check parsing\n+    BOOST_CHECK_EQUAL(ParseAddressType(\"invalid\"), nullopt);\n+    BOOST_CHECK_EQUAL(ParseAddressType(\"legacy\"), AddressType::BASE58);\n+    BOOST_CHECK_EQUAL(ParseAddressType(\"bech32\"), AddressType::BECH32);\n+\n+    // Check formatting\n+    BOOST_CHECK_EQUAL(FormatAddressType(AddressType::BASE58), \"legacy\");\n+    BOOST_CHECK_EQUAL(FormatAddressType(AddressType::BECH32), \"bech32\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "614cdee32dbdac59bf32b22f6a60d36f93219ee9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTRjZGVlMzJkYmRhYzU5YmYzMmIyMmY2YTYwZDM2ZjkzMjE5ZWU5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-13T12:26:09Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "message": "Descriptor: add GetAddressType()",
      "tree": {
        "sha": "56992d58e179873e2215495a854f348ff860589d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56992d58e179873e2215495a854f348ff860589d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614cdee32dbdac59bf32b22f6a60d36f93219ee9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAkfew/9HBGRrRuvlJvUPHSbxMZodIiBQrxhws3DM4mBX0oelUC2y63TTLJoaVnh\nYuM+JRkTRDSMUFNqde4lbZFEes1XFDgHXtV2ypbj5dmx0gwBY9DcNxMnq/aYnZR6\nmPKFPSiSBveG5g5+fCCwHYs3U/47xvkFMZndWjAhmDK0gVzTKFeQiPLPMBgED+kw\nW/RmhqhVA23SzHmISraixEAqgdtvR3xuc3gEmrVVt7wNYKXo7J2HjTsbQzh+rZIr\naP3tJ7YNMVq6y2Wr7wSRjE84qH/mArO0tuS/03mWbccPQGrvF6ro/y3ujhde+aGS\nbnPZK9bXKW/nvR+ii8NsRvpUKoKrNuCxqooJhbqqMQG3hSalg6rLTfEwdug2x6zQ\n4SnNO2he+zpMnhkqntEJ3V3yosFvpwkskQZJehtAdgvyh4S2MjjC+Lejcsw9UK9d\nWZi7NrzpsNdxUS3lMU1RhzZLlKhUcCIjktDDAflwPtjxyfIOGcojILN0NMCvP2Lw\np1rNyQYum6lgv7WoMlcWhQ2KA1jg9zWumo1jKWYo+cCI2CCZA9fzXo6lBB4nJCW5\n/LE9hYB8Qvh4jUbq2RI4T76OsBtLFtp4GZOpAP9UCti1sH8vHfTEZtkmkepqHw3V\ndrpEV5IimitoFw7JwoM7RTljfmzWLUaH1tDkxSSMu3J1jN16caY=\n=E7C3\n-----END PGP SIGNATURE-----",
        "payload": "tree 56992d58e179873e2215495a854f348ff860589d\nparent f721b78272db8ac64dfea483c38c7eb30d73db31\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552479969 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\nDescriptor: add GetAddressType()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614cdee32dbdac59bf32b22f6a60d36f93219ee9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/614cdee32dbdac59bf32b22f6a60d36f93219ee9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614cdee32dbdac59bf32b22f6a60d36f93219ee9/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f721b78272db8ac64dfea483c38c7eb30d73db31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f721b78272db8ac64dfea483c38c7eb30d73db31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f721b78272db8ac64dfea483c38c7eb30d73db31"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 61,
      "deletions": 20
    },
    "files": [
      {
        "sha": "59746c2abda7f6ccf3d254ea7eb5f0a9a2f0a486",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614cdee32dbdac59bf32b22f6a60d36f93219ee9/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614cdee32dbdac59bf32b22f6a60d36f93219ee9/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=614cdee32dbdac59bf32b22f6a60d36f93219ee9",
        "patch": "@@ -420,6 +420,10 @@ class DescriptorImpl : public Descriptor\n         return ret;\n     }\n \n+    Optional<AddressType> GetAddressType() const override {\n+        return nullopt;\n+    }\n+\n     bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const\n     {\n         std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n@@ -550,6 +554,11 @@ class PKHDescriptor final : public DescriptorImpl\n     }\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, \"pkh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BASE58;\n+    }\n };\n \n /** A parsed wpkh(P) descriptor. */\n@@ -564,6 +573,11 @@ class WPKHDescriptor final : public DescriptorImpl\n     }\n public:\n     WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Singleton(std::move(prov)), {}, \"wpkh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BECH32;\n+    }\n };\n \n /** A parsed combo(P) descriptor. */\n@@ -607,6 +621,11 @@ class SHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Singleton(GetScriptForDestination(ScriptHash(*script))); }\n public:\n     SHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"sh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BASE58;\n+    }\n };\n \n /** A parsed wsh(...) descriptor. */\n@@ -616,6 +635,11 @@ class WSHDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>&, const CScript* script, FlatSigningProvider&) const override { return Singleton(GetScriptForDestination(WitnessV0ScriptHash(*script))); }\n public:\n     WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"wsh\") {}\n+\n+    Optional<AddressType> GetAddressType() const override final\n+    {\n+        return AddressType::BECH32;\n+    }\n };\n \n ////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "8fe6999a429b4e273a887878c391d5b02fee7548",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614cdee32dbdac59bf32b22f6a60d36f93219ee9/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614cdee32dbdac59bf32b22f6a60d36f93219ee9/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=614cdee32dbdac59bf32b22f6a60d36f93219ee9",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_SCRIPT_DESCRIPTOR_H\n #define BITCOIN_SCRIPT_DESCRIPTOR_H\n \n+#include <addresstype.h>\n+#include <optional.h>\n #include <script/script.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n@@ -43,6 +45,9 @@ struct Descriptor {\n     /** Convert the descriptor to a private string. This fails if the provided provider does not have the relevant private keys. */\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n \n+    /** What address type this descriptor produces when converted to a string. */\n+    virtual Optional<AddressType> GetAddressType() const = 0;\n+\n     /** Expand a descriptor at a specified position.\n      *\n      * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored."
      },
      {
        "sha": "44b535eba0dbe5b498c6b8f01560ea32cd65e850",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 20,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614cdee32dbdac59bf32b22f6a60d36f93219ee9/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614cdee32dbdac59bf32b22f6a60d36f93219ee9/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=614cdee32dbdac59bf32b22f6a60d36f93219ee9",
        "patch": "@@ -27,6 +27,9 @@ constexpr int RANGE = 1; // Expected to be ranged descriptor\n constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n+constexpr int ADDRESS_TYPE_NONE = 16; // This descriptor should not have an AddressType\n+constexpr int ADDRESS_TYPE_BASE58  = 32; // This descriptor should have AddressType::BASE58\n+constexpr int ADDRESS_TYPE_BECH32  = 64; // This descriptor should have AddressType::BECH32\n \n /** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n bool EqualDescriptor(std::string a, std::string b)\n@@ -88,6 +91,15 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n     BOOST_CHECK(EqualDescriptor(prv, prv1));\n     BOOST_CHECK(!parse_pub->ToPrivateString(keys_pub, prv1));\n \n+    // Check if the address type is correct:\n+    if (flags & ADDRESS_TYPE_NONE) {\n+        BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), nullopt);\n+    } else if (flags & ADDRESS_TYPE_BASE58) {\n+        BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), AddressType::BASE58);\n+    } else if (flags & ADDRESS_TYPE_BECH32) {\n+        BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), AddressType::BECH32);\n+    }\n+\n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);\n     BOOST_CHECK_EQUAL(parse_priv->IsRange(), (flags & RANGE) != 0);\n@@ -172,42 +184,42 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n {\n     // Basic single-key compressed\n     Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n-    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n-    Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n-    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n-    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n+    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_NONE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n+    Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE|ADDRESS_TYPE_BASE58, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n+    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n+    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n \n     // Basic single-key uncompressed\n     Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n-    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}});\n-    Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n+    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE | ADDRESS_TYPE_NONE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}});\n+    Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n     CheckUnparsable(\"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\"); // No uncompressed keys in witness\n     CheckUnparsable(\"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\"); // No uncompressed keys in witness\n     CheckUnparsable(\"sh(wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"sh(wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\"); // No uncompressed keys in witness\n \n     // Some unconventional single-key constructions\n-    Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n-    Check(\"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587\"}});\n-    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n-    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n-    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n-    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n+    Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n+    Check(\"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587\"}});\n+    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n+    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n+    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n+    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n \n     // Versions with BIP32 derivations\n     Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}});\n     Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, {{0}});\n-    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, {{0xFFFFFFFFUL,0}});\n-    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n-    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED | ADDRESS_TYPE_BASE58, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, {{0xFFFFFFFFUL,0}});\n+    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE | ADDRESS_TYPE_BECH32, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n+    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | ADDRESS_TYPE_BASE58, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, {{0}, {1}});\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\"); // BIP 32 path element overflow\n \n     // Multisig constructions\n     Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n-    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n-    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n-    Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE | ADDRESS_TYPE_BECH32, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n     CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Double key origin descriptor\n     CheckUnparsable(\"wsh(multi(2,[aaaagaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaagaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Non hex fingerprint\n@@ -225,8 +237,8 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2WSH inside P2WSH\n \n     // Checksums\n-    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n-    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n     CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#\"); // Empty checksum\n     CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfyq\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5tq\"); // Too long checksum\n     CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxf\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5\"); // Too short checksum"
      }
    ]
  },
  {
    "sha": "3a9d515b21d8ceea3e55b3277f63c331b2482a27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTlkNTE1YjIxZDhjZWVhM2U1NWIzMjc3ZjYzYzMzMWIyNDgyYTI3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-14T10:18:02Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "message": "Add IsSegWit() to Descriptor",
      "tree": {
        "sha": "c0acfb472260343096fdd84b31999e304c09192c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0acfb472260343096fdd84b31999e304c09192c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a9d515b21d8ceea3e55b3277f63c331b2482a27",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAm3PA/+NpT26jQcuuapr/9vCUNDjvh/gtXR50V5e/6PfDIqcjpRMrgcdiu6Zsar\nppWc+xmPtevHxZmb1oi1Jt/ExUkoi4IsJIjlUBPBlMCqmOIGKrDoVcLsXTS71KnU\nEvZX8N3eVqyVJlVomOrgu7+7XlSNFksdMltoBu7LtTKnXVZNHFVNoFLjkhSXfVdA\n8c4ycbszN/Ao8KOBlTRPqTnAJyI06PlPdkeYC9gqfXqpsFRSubCJlVXFptNPipD4\n1HUbIfY+wj54nHXA7m8ln7yUqIB9Db8TVgQxZ7gUuUqmcbzWqlq2OlJuX4s/IpVS\nPLditAnoFXX5Da9G3GsvVnrthi52+qLImv7juYsESb2BxsW85QZRL3jRiUm7+X+S\n7ucwRx7ycyP9Dehl3kbpcS+9khVRPLnuu4WKs9f6QTJyiiN1dYOUYrXDVANsCHj6\nfRvwZFHqF2lnY7ZkL+MPSRRlCTFf0a9CCPk/JxaECNoNvxXIUf6K4cenVQjCf+uj\n2q0whPZvTqeZvAKmKNqrVNlZYttA+NADA2fosuDgV2CR1uDO0QQKmKHvMYGPLzvV\nMRdoCxBFAHzdMutJybW/+9+B46YAOGFBOSvixEWb7iUQEPLvgxV48+AOx6FeFpUz\nw1o8UndiWOWVfoe73ecQ1oTw4xYMQ6gsdxLPf1VYVtCTNTbpXws=\n=W9A8\n-----END PGP SIGNATURE-----",
        "payload": "tree c0acfb472260343096fdd84b31999e304c09192c\nparent 614cdee32dbdac59bf32b22f6a60d36f93219ee9\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552558682 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\nAdd IsSegWit() to Descriptor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a9d515b21d8ceea3e55b3277f63c331b2482a27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a9d515b21d8ceea3e55b3277f63c331b2482a27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a9d515b21d8ceea3e55b3277f63c331b2482a27/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "614cdee32dbdac59bf32b22f6a60d36f93219ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614cdee32dbdac59bf32b22f6a60d36f93219ee9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/614cdee32dbdac59bf32b22f6a60d36f93219ee9"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 33,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4bbc6c0bdd98bbf5ac9f24decf378bd7b9213a01",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a9d515b21d8ceea3e55b3277f63c331b2482a27/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a9d515b21d8ceea3e55b3277f63c331b2482a27/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=3a9d515b21d8ceea3e55b3277f63c331b2482a27",
        "patch": "@@ -424,6 +424,14 @@ class DescriptorImpl : public Descriptor\n         return nullopt;\n     }\n \n+    bool IsSegWit() const override\n+    {\n+        if (m_script_arg) {\n+            if (m_script_arg->IsSegWit()) return true;\n+        }\n+        return false;\n+    }\n+\n     bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const\n     {\n         std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n@@ -578,6 +586,8 @@ class WPKHDescriptor final : public DescriptorImpl\n     {\n         return AddressType::BECH32;\n     }\n+\n+    bool IsSegWit() const final { return true; }\n };\n \n /** A parsed combo(P) descriptor. */\n@@ -640,6 +650,8 @@ class WSHDescriptor final : public DescriptorImpl\n     {\n         return AddressType::BECH32;\n     }\n+\n+    bool IsSegWit() const final { return true; }\n };\n \n ////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "0ebb88ea1f6214cce1ded8cea67ce98e9df9eb95",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a9d515b21d8ceea3e55b3277f63c331b2482a27/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a9d515b21d8ceea3e55b3277f63c331b2482a27/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=3a9d515b21d8ceea3e55b3277f63c331b2482a27",
        "patch": "@@ -48,6 +48,9 @@ struct Descriptor {\n     /** What address type this descriptor produces when converted to a string. */\n     virtual Optional<AddressType> GetAddressType() const = 0;\n \n+    /** Whether this descriptor or its sub-descriptors use SegWit. */\n+    virtual bool IsSegWit() const = 0;\n+\n     /** Expand a descriptor at a specified position.\n      *\n      * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored."
      },
      {
        "sha": "78f8280db1ed0a6b3a8cd86837a24b4f2390ba00",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a9d515b21d8ceea3e55b3277f63c331b2482a27/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a9d515b21d8ceea3e55b3277f63c331b2482a27/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=3a9d515b21d8ceea3e55b3277f63c331b2482a27",
        "patch": "@@ -30,6 +30,7 @@ constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not tru\n constexpr int ADDRESS_TYPE_NONE = 16; // This descriptor should not have an AddressType\n constexpr int ADDRESS_TYPE_BASE58  = 32; // This descriptor should have AddressType::BASE58\n constexpr int ADDRESS_TYPE_BECH32  = 64; // This descriptor should have AddressType::BECH32\n+constexpr int SEGWIT = 128; // This descriptor uses SegWit\n \n /** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n bool EqualDescriptor(std::string a, std::string b)\n@@ -100,6 +101,13 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n         BOOST_CHECK_EQUAL(parse_pub->GetAddressType(), AddressType::BECH32);\n     }\n \n+    // Check IsSegWit():\n+    if (flags & SEGWIT) {\n+        BOOST_CHECK(parse_pub->IsSegWit());\n+    } else {\n+        BOOST_CHECK(!parse_pub->IsSegWit());\n+    }\n+\n     // Check whether IsRange on both returns the expected result\n     BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);\n     BOOST_CHECK_EQUAL(parse_priv->IsRange(), (flags & RANGE) != 0);\n@@ -186,8 +194,8 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n     Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_NONE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n     Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE|ADDRESS_TYPE_BASE58, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n-    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n-    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n+    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n+    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n \n     // Basic single-key uncompressed\n     Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n@@ -200,26 +208,26 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     // Some unconventional single-key constructions\n     Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n     Check(\"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587\"}});\n-    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n-    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n-    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n-    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n+    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n+    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n+    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n+    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n \n     // Versions with BIP32 derivations\n     Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}});\n     Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, {{0}});\n     Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED | ADDRESS_TYPE_BASE58, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, {{0xFFFFFFFFUL,0}});\n-    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE | ADDRESS_TYPE_BECH32, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n-    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | ADDRESS_TYPE_BASE58, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n+    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, {{0}, {1}});\n     CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\"); // BIP 32 path element overflow\n \n     // Multisig constructions\n     Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n     Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT | ADDRESS_TYPE_BASE58, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n-    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE | ADDRESS_TYPE_BECH32, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n-    Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE | ADDRESS_TYPE_BASE58, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n+    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE | ADDRESS_TYPE_BECH32 | SEGWIT, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE | ADDRESS_TYPE_BASE58 | SEGWIT, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n     CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Double key origin descriptor\n     CheckUnparsable(\"wsh(multi(2,[aaaagaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaagaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Non hex fingerprint"
      }
    ]
  },
  {
    "sha": "f0db4ea44232ff80ad64b50ce5f4553edb65c335",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGRiNGVhNDQyMzJmZjgwYWQ2NGI1MGNlNWY0NTUzZWRiNjVjMzM1",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:10:35Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T18:13:38Z"
      },
      "message": "[wallet] add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.",
      "tree": {
        "sha": "40600f0e56d2395852b94ef8781950b104422bf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40600f0e56d2395852b94ef8781950b104422bf7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0db4ea44232ff80ad64b50ce5f4553edb65c335",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1EfVIACgkQV/+b28ww\nEAmeqQ/+NEURFGN+A9Fp7KNR5R21U6O5w80zdxKlhE1j4sDt6nN4OldfwFC2j+D8\ntnmjFVLgI3FWgl1twNBc/Rg7FARChIWvAGUzkqGJZqQnXkG9LEb+ye4aXhphXetg\nnMWn4Z7xnJSkOAI3pGVyN3372d6RGvN6jgP0byhReaGxhH02+/Rbfc9dsPcCplYB\n0djj4eEVL+QL7cIXIWa51Svy2RHNLefNDLRVa6iQ+OhUgMbBc9+fR4WvDOqj7uUn\nV7HjBLbDzGa8t75t86fCmE/fDBeLkGiTzaST48AOiClxiE66wLcHSac1Loi//M1f\noZWvqZa6GsPreWXylEZhucLCZsl81UAaxYE6RxcMtPbYkLFw6MNTd6TbkOR74vVp\n/UmARxh8SuV7+sBQzlVZ0vYEV9bXRLulRlswgdl4NxVh5Q3fjHhOBCcEH2hNMEEX\nmKbl9MzAT1gXkBuq+xHsLcI399t7o3WKYanba8HoDhgGm7jRksukpYr1r9IOoEn5\np1rEzNlD2abT/Sno1wx4KzR0TQhJ6ijYoMzOmht7wwuDCcmiOMYeVnaqZfY49B6i\npkYFVBJAhd4WaUA38FdoEWcoulFKfUO70hfusiPmdkXJuO1aEDZnqeXNOUX8pFgv\n9Hs4DpWvd4+qT3HVaVNiYNMTXWZ31Q72/NQ5RStFI6ezHVHR2K8=\n=SmwX\n-----END PGP SIGNATURE-----",
        "payload": "tree 40600f0e56d2395852b94ef8781950b104422bf7\nparent 3a9d515b21d8ceea3e55b3277f63c331b2482a27\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385035 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564769618 +0200\n\n[wallet] add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0db4ea44232ff80ad64b50ce5f4553edb65c335",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0db4ea44232ff80ad64b50ce5f4553edb65c335",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0db4ea44232ff80ad64b50ce5f4553edb65c335/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a9d515b21d8ceea3e55b3277f63c331b2482a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a9d515b21d8ceea3e55b3277f63c331b2482a27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a9d515b21d8ceea3e55b3277f63c331b2482a27"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 56,
      "deletions": 1
    },
    "files": [
      {
        "sha": "adfd1f357ab6d44d9893d4a561958cd3585bedad",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "patch": "@@ -224,6 +224,7 @@ BITCOIN_CORE_H = \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/externalsigner.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n@@ -331,6 +332,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/coincontrol.cpp \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/externalsigner.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/ismine.cpp \\"
      },
      {
        "sha": "42e5a88f4966fecb77839305f67ebed67445746d",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "patch": "@@ -36,6 +36,9 @@ void DummyWalletInit::AddWalletOptions() const\n         \"-paytxfee=<amt>\",\n         \"-rescan\",\n         \"-salvagewallet\",\n+#ifdef HAVE_BOOST_PROCESS\n+        \"-signer=<cmd>\",\n+#endif\n         \"-spendzeroconfchange\",\n         \"-txconfirmtarget=<n>\",\n         \"-upgradewallet\","
      },
      {
        "sha": "2f3c8eae96ba6e44e7c2c27bfa4ce7d6a49d1a28",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "patch": "@@ -0,0 +1,8 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/externalsigner.h>\n+#include <util/system.h>\n+\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint): m_command(command), m_fingerprint(fingerprint) {}"
      },
      {
        "sha": "1fe533ec694cff95742f14a5715667d4149b8578",
        "filename": "src/wallet/externalsigner.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_EXTERNALSIGNER_H\n+#define BITCOIN_WALLET_EXTERNALSIGNER_H\n+\n+#include <stdexcept>\n+#include <string>\n+#include <univalue.h>\n+\n+class ExternalSignerException : public std::runtime_error {\n+public:\n+    using std::runtime_error::runtime_error;\n+};\n+\n+//! Enables interaction with an external signing device or service, such as a\n+//! a hardware wallet. See doc/external-signer.md\n+class ExternalSigner\n+{\n+private:\n+    //! The command which handles interaction with the external signer.\n+    std::string m_command;\n+\n+public:\n+    //! @param[in] command      the command which handles interaction with the external signer\n+    //! @param[in] fingerprint  master key fingerprint of the signer\n+    ExternalSigner(const std::string& command, const std::string& fingerprint);\n+\n+    //! Master key fingerprint of the signer\n+    std::string m_fingerprint;\n+};\n+\n+#endif // BITCOIN_WALLET_EXTERNALSIGNER_H"
      },
      {
        "sha": "4f28e67af9399be98dddccf4e1b57afbfeb0f1bf",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "patch": "@@ -52,6 +52,9 @@ void WalletInit::AddWalletOptions() const\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+#ifdef HAVE_BOOST_PROCESS\n+    gArgs.AddArg(\"-signer=<cmd>\", \"External signing tool, see docs/external-signer.md\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+#endif\n     gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);"
      },
      {
        "sha": "865ddf5591ff0876bbd98ee3dd37f91f6ed8103b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0db4ea44232ff80ad64b50ce5f4553edb65c335/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "patch": "@@ -19,6 +19,7 @@\n #include <validationinterface.h>\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n+#include <wallet/externalsigner.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -88,7 +89,8 @@ constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n constexpr CAmount HIGH_TX_FEE_PER_KB{COIN / 100};\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEE_PER_KB};\n-\n+//! -signer default\n+static const std::string DEFAULT_EXTERNAL_SIGNER = \"\";\n //! Pre-calculated constants for input size estimation in *virtual size*\n static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n \n@@ -1129,6 +1131,9 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     /** Absolute maximum transaction fee (in satoshis) used by default for the wallet */\n     CAmount m_default_max_tx_fee{DEFAULT_TRANSACTION_MAXFEE};\n \n+    // See docs/external-signer.md\n+    std::vector<ExternalSigner> m_external_signers;\n+\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);"
      }
    ]
  },
  {
    "sha": "a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWMxZTRiOWIzOWJmMDhiNTE4MzRhZTNhODk4MDBhNTRhZWIwOTFk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:11:43Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:11Z"
      },
      "message": "[test] add external signer test\n\nIncludes a mock to mimick the HWI interace.",
      "tree": {
        "sha": "cbb21447c7a794b15a7a92c5ccf0e5020057cc7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbb21447c7a794b15a7a92c5ccf0e5020057cc7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTMACgkQV/+b28ww\nEAkoDQ/+Lr+IdThxK8jdGFfb9IpzB5okyEtHdhZOVtEnY0ylBdRWqaTUf1jvVlK2\nix6xUkjy82h3zfr97Sha8MvW25wQU3WW4h5Gl/q0pSznw3IcTouT92yvRwZnkFbg\nLUqfewjfZ3CDQwAwEsGXZ5/T5TzXV/EEEatmLtBJ2Dl385DgZyevhXOZ1p8SNyQT\nIodKa4dGyV151RV04XkZTVQOS0LWzsBeY7zC3/imGy1CDPPPYeGxEr3hyEPth/XO\n3f5T6xOSEmt9lgzfkoIyRq/ebGOCEIXEDwt+vo3M9Ay7DOjWjCvy6EKVm1ztbSw7\nbqJRBq42S+UzNiF49q/dd5SYLis4pLqeiXIP1d0S+YUXbMyHk+Pchht67oy9HGSU\nytLTc93usNAI9nnOrdYlTCO/Rrmdcgydc/pq9kiSb41l61FATioW/nnt/zLerADJ\n0f4rNCmooVNHRsSejtvztt8jJEY3TtQly71cHfU/LG0XkKZAS/YTZsmrU9r3augE\nXr2LXKlHi6UqJlfnjaeru+797U3oyVhtPc6kFZPHBEjljwiXlmUadZxxWa4uJ5yw\ndYuB2BusFsvE7468Ifk9pUuvOSvNFs/O9pKXBaKwI+cmGHUrO32YBex2nIz1ztWg\nGdLwJmcB5OPX9apuS0oaJi7WqPOBNjvW89qbntt3EvbLLvS5n3E=\n=Cfpn\n-----END PGP SIGNATURE-----",
        "payload": "tree cbb21447c7a794b15a7a92c5ccf0e5020057cc7b\nparent f0db4ea44232ff80ad64b50ce5f4553edb65c335\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385103 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816691 +0200\n\n[test] add external signer test\n\nIncludes a mock to mimick the HWI interace.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0db4ea44232ff80ad64b50ce5f4553edb65c335",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0db4ea44232ff80ad64b50ce5f4553edb65c335"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 88,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7edffc5bc8cc27f7a9b80d933a57e76c2a6c811f",
        "filename": "test/functional/mocks/signer.py",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
        "patch": "@@ -0,0 +1,31 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import os\n+import sys\n+import argparse\n+import json\n+\n+def perform_pre_checks():\n+    mock_result_path = os.path.join(os.getcwd(), \"mock_result\")\n+    if(os.path.isfile(mock_result_path)):\n+        f = open(mock_result_path, \"r\", encoding=\"utf8\")\n+        mock_result = f.read()\n+        f.close()\n+        if mock_result[0]:\n+            sys.exit(int(mock_result[0]))\n+\n+parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n+subparsers = parser.add_subparsers()\n+\n+if len(sys.argv) == 1:\n+  args = parser.parse_args(['-h'])\n+  exit()\n+\n+args = parser.parse_args()\n+\n+perform_pre_checks()\n+\n+args.func(args)"
      },
      {
        "sha": "30c12c9ea2eabf6f9186b057985affe293a27481",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
        "patch": "@@ -93,6 +93,7 @@\n     'p2p_timeouts.py',\n     'wallet_dump.py',\n     'wallet_listtransactions.py',\n+    'wallet_signer.py',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n     'wallet_zapwallettxes.py',"
      },
      {
        "sha": "cb5323ca8d581b53b4db6062f99abf27dc16152e",
        "filename": "test/functional/wallet_signer.py",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
        "patch": "@@ -0,0 +1,56 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test external signer.\n+\n+Verify that a bitcoind node can use an external signer command\n+\"\"\"\n+import os\n+import platform\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SignerTest(BitcoinTestFramework):\n+    def mock_signer_path(self):\n+        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'mocks', 'signer.py')\n+        if platform.system() == \"Windows\":\n+            return \"python \" + path\n+        else:\n+            return path\n+\n+    def set_test_params(self):\n+        self.num_nodes = 5\n+\n+        self.extra_args = [\n+            [],\n+            ['-signer=%s' % self.mock_signer_path() , '-addresstype=bech32'],\n+            ['-signer=%s' % self.mock_signer_path(), '-addresstype=p2sh-segwit'],\n+            ['-signer=%s' % self.mock_signer_path(), '-addresstype=legacy'],\n+            ['-signer=%s' % \"fake.py\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_mock_result(self, node, res):\n+        f = open(os.path.join(node.cwd, \"mock_result\"), \"w\", encoding=\"utf8\")\n+        f.write(res)\n+        f.close()\n+\n+    def clear_mock_result(self, node):\n+        os.remove(os.path.join(node.cwd, \"mock_result\"))\n+\n+    def run_test(self):\n+        self.skip_if_no_runcommand(self.nodes[0])\n+        self.log.info('-signer=%s' % self.mock_signer_path())\n+        assert_equal(self.nodes[0].getbalance(), 1250)\n+        assert_equal(self.nodes[1].getbalance(), 1250)\n+\n+if __name__ == '__main__':\n+    SignerTest().main()"
      }
    ]
  },
  {
    "sha": "9b9715beefbf98f3c17a7178aa67df574b424c2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjk3MTViZWVmYmY5OGYzYzE3YTcxNzhhYTY3ZGY1NzRiNDI0YzJm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:11Z"
      },
      "message": "[rpc] add external signer RPC files",
      "tree": {
        "sha": "65d5bb175cc0c0c0a44dd2ec9c8f11a3e8e70ae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65d5bb175cc0c0c0a44dd2ec9c8f11a3e8e70ae0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b9715beefbf98f3c17a7178aa67df574b424c2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTMACgkQV/+b28ww\nEAlxNhAAgmTeUORepyemKnOI5uxWX3oLmuW92j7hXjT99K5XxRyOdB6prhedceVm\nNgJ2oc3MjrYO6l8sBCW8WKDx7RwJCDFzr+DnnHL+eXA8vtOS4qN3MUMQzpsMYrTz\n2yHyEJQLINnyHPXXVd55sxKCOwTaj58lIX+EA2H4pBrnmIgKUNBi0i7VQw6ein76\nzmtu8AAzHNWjnsIiBMAJcwdBqPYLwIwfmQ2C5KIeCLHZNKWU+tz6iczFQGvCSue9\n3WlbCX3AdocilZDkBnj291FsXSMSImyJvg3++fP49/HTeK3PVzlkgBrL79Mko0qZ\nuJKDhtiaeu8lpZ/3Z7625vKhdGKOltZ8gvXWux0YNaI6IAnXww+FlRoHSBtHO8NX\n9AlJlKr2Q2drWguHNF6xhia5fVBz1Y4WkVxEQnZ2yPOgD3jsemDqcbZjJJrjiFkx\nnF2R/J2WSBUqGF/7qAhN4gyjcUmSGpLCetgMCXYe6r6/7sLsX/h9lEgpqH+72nv5\nnvptqsqb0k1o2QLa+dSlNPY6axVSlWc/IvEAu2FceiN0VRXjQE2aN40rp0weW+8s\nJwwdcY4IiLr5LPM93mblHvi6wCbsGv4MA452HspngD7mOnoYDGIVkb8B0lh0k8OF\nBmGc8+UbhaXa+0VQRwFa6iwcCEKR4HWHYS2Q1OwD0nUM5pSsBDk=\n=AOD3\n-----END PGP SIGNATURE-----",
        "payload": "tree 65d5bb175cc0c0c0a44dd2ec9c8f11a3e8e70ae0\nparent a5c1e4b9b39bf08b51834ae3a89800a54aeb091d\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816691 +0200\n\n[rpc] add external signer RPC files\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b9715beefbf98f3c17a7178aa67df574b424c2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b9715beefbf98f3c17a7178aa67df574b424c2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b9715beefbf98f3c17a7178aa67df574b424c2f/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5c1e4b9b39bf08b51834ae3a89800a54aeb091d"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 60,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2fc91dc21aa57d8f46e29dc4383c6bf5fc62c594",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "patch": "@@ -230,6 +230,7 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/psbtwallet.h \\\n+  wallet/rpcsigner.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -339,6 +340,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/load.cpp \\\n   wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n+  wallet/rpcsigner.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\"
      },
      {
        "sha": "da4221ed1a7e5edbe9acc485f02372a1ed2dfdc3",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "patch": "@@ -20,6 +20,7 @@\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n #include <wallet/ismine.h>\n+#include <wallet/rpcsigner.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/load.h>\n #include <wallet/wallet.h>\n@@ -498,7 +499,12 @@ class WalletClientImpl : public ChainClient\n         : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n     {\n     }\n-    void registerRpcs() override { return RegisterWalletRPCCommands(m_chain, m_rpc_handlers); }\n+    void registerRpcs() override {\n+    RegisterWalletRPCCommands(m_chain, m_rpc_handlers);\n+#ifdef HAVE_BOOST_PROCESS\n+    RegisterSignerRPCCommands(m_chain, m_rpc_handlers);\n+#endif\n+    }\n     bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n     bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }\n     void start(CScheduler& scheduler) override { return StartWallets(scheduler); }"
      },
      {
        "sha": "2c286a6f5ce78ac8369cfd9e438cf137d8b79df0",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/server.h>\n+#include <util/strencodings.h>\n+#include <wallet/rpcsigner.h>\n+#include <wallet/wallet.h>\n+\n+#ifdef HAVE_BOOST_PROCESS\n+\n+// clang-format off\n+static const CRPCCommand commands[] =\n+{ //  category              name                                actor (function)                argNames\n+    //  --------------------- ------------------------          -----------------------         ----------\n+};\n+// clang-format on\n+\n+void RegisterSignerRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        handlers.emplace_back(chain.handleRpc(commands[vcidx]));\n+}\n+#endif // HAVE_BOOST_PROCESS"
      },
      {
        "sha": "3953f632e8e4585ccbd74015fcc91034307381aa",
        "filename": "src/wallet/rpcsigner.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/wallet/rpcsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b9715beefbf98f3c17a7178aa67df574b424c2f/src/wallet/rpcsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.h?ref=9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_RPCSIGNER_H\n+#define BITCOIN_WALLET_RPCSIGNER_H\n+\n+#include <util/system.h>\n+#include <vector>\n+\n+#ifdef HAVE_BOOST_PROCESS\n+\n+class CRPCTable;\n+\n+namespace interfaces {\n+class Chain;\n+class Handler;\n+}\n+\n+void RegisterSignerRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers);\n+\n+#endif // BOOST_VERSION\n+\n+#endif //BITCOIN_WALLET_RPCSIGNER_H"
      },
      {
        "sha": "6f976ed6ae49b4e29ad91b8cfb4fae857f97aba9",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b9715beefbf98f3c17a7178aa67df574b424c2f/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b9715beefbf98f3c17a7178aa67df574b424c2f/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "patch": "@@ -37,11 +37,12 @@ def test_categories(self):\n \n         if self.is_wallet_compiled():\n             components.append('Wallet')\n+            components.append('Signer')\n \n         if self.is_zmq_compiled():\n             components.append('Zmq')\n \n-        assert_equal(titles, components)\n+        assert_equal(titles, sorted(components))\n \n     def dump_help(self):\n         dump_dir = os.path.join(self.options.tmpdir, 'rpc_help_dump')"
      },
      {
        "sha": "299701cddd3b0b52a2328d7330ff2532c667424e",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b9715beefbf98f3c17a7178aa67df574b424c2f/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b9715beefbf98f3c17a7178aa67df574b424c2f/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "patch": "@@ -17,6 +17,7 @@\n     \"src/rpc/misc.cpp\",\n     \"src/rpc/net.cpp\",\n     \"src/rpc/rawtransaction.cpp\",\n+    \"src/wallet/rpcsigner.cpp\",\n     \"src/wallet/rpcwallet.cpp\",\n ]\n # Source file (relative to root) containing conversion mapping"
      }
    ]
  },
  {
    "sha": "86969aaf836691ac5848165bb0d777fd88bfba1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Njk2OWFhZjgzNjY5MWFjNTg0ODE2NWJiMGQ3NzdmZDg4YmZiYTFh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:11Z"
      },
      "message": "[rpc] signer: add enumeratesigners to list external signers",
      "tree": {
        "sha": "b452bab15e40474d1137a16f272d599602284acb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b452bab15e40474d1137a16f272d599602284acb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86969aaf836691ac5848165bb0d777fd88bfba1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTMACgkQV/+b28ww\nEAkbiRAAoU54eKTBba5oDOV2evkrkQz8uD1J4ZkznlVPvzjXFPxf/rTWrkuvEbp2\nXBY505++sZa9Ts6Y5joSdHguDIr5rBexOQ+bP39hB+CE+DbwX1qUpAg/D4fAkveU\nIkvE5Yaoyg0o0NsjtAPyZb0/TKerH9rgvJatYbkTl2DLNnw550CU1rZn/jg+ISk1\nx1EBz0Nfr7uJ0g2TVzm5xfRBFbgvx6G3Hl6YiwWvJeoZueG8JNAJz6S6h9xHsbr+\nMP9YWnGl4p+bByXApR0sFTKdeBsNsInRDZTF0p6BcySt+VlR1gG7JDa3FZr4ukpb\nvHvlCza2+b4CJcWU55NgILoqJoiwq2hjSAc0LvdjwnlCBHaQUrpa+qNCLW4PSzYB\nEWqrU/GjI5VohhfIKJ3yX9FArRng8XPTS6IVp7jNyJNqGf5GYQxttEvhTIdI5GEz\nz7U/CK2lYOWGzU/TlAygyZWLOMh1Z1pgquN/Wzu45uxTl3bpDhF9CbjFMEH++W0A\nrcpXPXue8xV5ULMjerw2inNhj41Tsg/Ti/mzCh0o8k/KBd/glI86R37kW27xd58O\nd7QvDgPe+hulWTam+44bIRIhBuUjjEjnuBwjKMyCX5HKyRrpOh17Nq0Wibyz/Sdn\nyqVmoNZbOwohzUPV/eSJ3N8O4+dasBTTyudm9cEZRwdfs0CApo4=\n=AwRC\n-----END PGP SIGNATURE-----",
        "payload": "tree b452bab15e40474d1137a16f272d599602284acb\nparent 9b9715beefbf98f3c17a7178aa67df574b424c2f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816691 +0200\n\n[rpc] signer: add enumeratesigners to list external signers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86969aaf836691ac5848165bb0d777fd88bfba1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86969aaf836691ac5848165bb0d777fd88bfba1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86969aaf836691ac5848165bb0d777fd88bfba1a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b9715beefbf98f3c17a7178aa67df574b424c2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b9715beefbf98f3c17a7178aa67df574b424c2f"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 127,
      "deletions": 3
    },
    "files": [
      {
        "sha": "64f58d1aec955b031c98e32e99415fa0674458cb",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86969aaf836691ac5848165bb0d777fd88bfba1a/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86969aaf836691ac5848165bb0d777fd88bfba1a/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=86969aaf836691ac5848165bb0d777fd88bfba1a",
        "patch": "@@ -3,6 +3,31 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <wallet/externalsigner.h>\n-#include <util/system.h>\n \n-ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint): m_command(command), m_fingerprint(fingerprint) {}\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet) {}\n+\n+#ifdef HAVE_BOOST_PROCESS\n+\n+UniValue ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet)\n+{\n+    // Call <command> enumerate\n+    const UniValue result = runCommandParseJSON(command + \" enumerate\");\n+    if (!result.isArray())\n+        throw ExternalSignerException(strprintf(\"'%s' received invalid response, expected array of signers\", command));\n+    for (UniValue signer : result.getValues()) {\n+        const UniValue& fingerprint = find_value(signer, \"fingerprint\");\n+        if (result.isNull())\n+            throw ExternalSignerException(strprintf(\"'%s' received invalid response, missing signer fingerprint\", command));\n+        std::string fingerprintStr = fingerprint.get_str();\n+        // Skip duplicate signer\n+        bool duplicate = false;\n+        for (ExternalSigner signer : signers) {\n+            if (signer.m_fingerprint.compare(fingerprintStr) == 0) duplicate = true;\n+        }\n+        if (duplicate) break;\n+        signers.push_back(ExternalSigner(command, fingerprintStr, mainnet));\n+    }\n+    return result;\n+}\n+\n+#endif"
      },
      {
        "sha": "7f40aba91598d23e59a698ed2a69635853074f0c",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86969aaf836691ac5848165bb0d777fd88bfba1a/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86969aaf836691ac5848165bb0d777fd88bfba1a/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=86969aaf836691ac5848165bb0d777fd88bfba1a",
        "patch": "@@ -8,6 +8,7 @@\n #include <stdexcept>\n #include <string>\n #include <univalue.h>\n+#include <util/system.h>\n \n class ExternalSignerException : public std::runtime_error {\n public:\n@@ -25,10 +26,24 @@ class ExternalSigner\n public:\n     //! @param[in] command      the command which handles interaction with the external signer\n     //! @param[in] fingerprint  master key fingerprint of the signer\n-    ExternalSigner(const std::string& command, const std::string& fingerprint);\n+    //! @param[in] mainnet      Bitcoin mainnet or testnet\n+    ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet);\n \n     //! Master key fingerprint of the signer\n     std::string m_fingerprint;\n+\n+    //! Bitcoin mainnet or testnet\n+    bool m_mainnet;\n+\n+#ifdef HAVE_BOOST_PROCESS\n+    //! Obtain a list of signers. Calls `<command> enumerate`.\n+    //! @param[in]              command the command which handles interaction with the external signer\n+    //! @param[in,out] signers  vector to which new signers (with a unique master key fingerprint) are added\n+    //! @param mainnet          Bitcoin mainnet or testnet\n+    //! @param[out]  UniValue   see doc/external-signer.md\n+    static UniValue Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet = true);\n+\n+#endif\n };\n \n #endif // BITCOIN_WALLET_EXTERNALSIGNER_H"
      },
      {
        "sha": "931e81a62a48dbd17a2ab43ee5fd8da20172a0d3",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86969aaf836691ac5848165bb0d777fd88bfba1a/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86969aaf836691ac5848165bb0d777fd88bfba1a/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=86969aaf836691ac5848165bb0d777fd88bfba1a",
        "patch": "@@ -2,17 +2,66 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparamsbase.h>\n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <util/strencodings.h>\n #include <wallet/rpcsigner.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n #ifdef HAVE_BOOST_PROCESS\n \n+static UniValue enumeratesigners(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"enumeratesigners\\n\",\n+                \"Returns a list of external signers from -signer and associates them\\n\"\n+                \"with the wallet until you stop bitcoind.\\n\",\n+                {},\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"signers\\\" : [                              (json array of objects)\\n\"\n+                    \"    {\\n\"\n+                    \"      \\\"masterkeyfingerprint\\\" : \\\"fingerprint\\\" (string) Master key fingerprint\\n\"\n+                    \"    }\\n\"\n+                    \"    ,...\\n\"\n+                    \"  ]\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        signers = ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"signers\", signers);\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n+    { \"signer\",             \"enumeratesigners\",                 &enumeratesigners,              {} },\n };\n // clang-format on\n "
      },
      {
        "sha": "8ade14bdfe3d2db051e49c3c281855fb912765d7",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86969aaf836691ac5848165bb0d777fd88bfba1a/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86969aaf836691ac5848165bb0d777fd88bfba1a/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=86969aaf836691ac5848165bb0d777fd88bfba1a",
        "patch": "@@ -17,9 +17,15 @@ def perform_pre_checks():\n         if mock_result[0]:\n             sys.exit(int(mock_result[0]))\n \n+def enumerate(args):\n+  sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\"}, {\"fingerprint\": \"00000002\"}]))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n subparsers = parser.add_subparsers()\n \n+parser_enumerate = subparsers.add_parser('enumerate', help='list available signers')\n+parser_enumerate.set_defaults(func=enumerate)\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()"
      },
      {
        "sha": "a56d6e000e77d75ec418e46cc3abe7622512332f",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86969aaf836691ac5848165bb0d777fd88bfba1a/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86969aaf836691ac5848165bb0d777fd88bfba1a/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=86969aaf836691ac5848165bb0d777fd88bfba1a",
        "patch": "@@ -52,5 +52,34 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbalance(), 1250)\n         assert_equal(self.nodes[1].getbalance(), 1250)\n \n+        assert_raises_rpc_error(-4, 'Error: restart bitcoind with -signer=<cmd>',\n+            self.nodes[0].enumeratesigners\n+        )\n+\n+        # Handle script missing:\n+        assert_raises_rpc_error(-1, 'execve failed: No such file or directory',\n+            self.nodes[4].enumeratesigners\n+        )\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[1], \"2\")\n+        assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+            self.nodes[1].enumeratesigners\n+        )\n+        self.clear_mock_result(self.nodes[1])\n+\n+        # Create new wallets with private keys disabled:\n+        self.nodes[1].createwallet('hww1', True)\n+        hww1 = self.nodes[1].get_wallet_rpc('hww1')\n+        self.nodes[2].createwallet('hww2', True)\n+        hww2 = self.nodes[2].get_wallet_rpc('hww2')\n+        self.nodes[3].createwallet('hww3', True)\n+        hww3 = self.nodes[3].get_wallet_rpc('hww3')\n+\n+        result = hww1.enumeratesigners()\n+        assert_equal(len(result['signers']), 2)\n+        hww2.enumeratesigners()\n+        hww3.enumeratesigners()\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "7290ac259798ae88458a67938014dd647502e06f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjkwYWMyNTk3OThhZTg4NDU4YTY3OTM4MDE0ZGQ2NDc1MDJlMDZm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:04:55Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[rpc] make ProcessImport public",
      "tree": {
        "sha": "72fbecee750790beda0a3c02e557b730f65257bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72fbecee750790beda0a3c02e557b730f65257bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7290ac259798ae88458a67938014dd647502e06f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAmP5BAApCDOmZYUw8OUi1fb6ip5ococsm29Hcbc+Xl/5ziyDmQQiM1jYJhqkFaA\niaIrbqRYSkrKJkny3WURvqkuMWG/XqbOUZ68H5Kke85l4FxmKdsF3rmc1VtimqNA\nSxO5lKF9499B/dsJnXyaWMEvZ/kosLJDlC9om8ejrls+60Li3HJUJqtKllnE8oAO\ns3319LKEj7siyADWmNQtRussDUSurepcL4QBqPl56oNbXlu5AV1tAmKWOJOS0mPl\nwDrWwgd6+Z3Abu98Dbc6P+VSIPIgiUK5BUnylRCYy9DidIq4F93Uk1XCxRDfdDkY\ng43pPtHhKeW/P2jmChDSlDdp+ZaDachEXwWoWTd04GNDZUeTHg58KHEgnDJIdJ5v\n4moc8a9xaHdenJ+nmK/OWeQ8SoM9moiBzK8CEXOvWS2Wc/ExzPOAbfDWptlEkC27\n722s2ov56f7qOsCbyHaCxnDZ+KB2U0wkeF6hvqkkk9LIwfON2t/iTKv4DdPXM8KJ\nlYde6J3wJkl7YIb4rkStq5LJpsnPVvGrccheD9H7mYoP1QopqJ8bbweE5LdxtPGN\n2bYPGgybAqqmRVvKghuZeYx+E09KNtRUZGiuW7EYA38a7s4cA5ZvyOKOm9NGMd1T\nm2jR729D1P+sagd8gByQzExfAvvUawk8j+rmZOOeSyELZeFmWI0=\n=C4e6\n-----END PGP SIGNATURE-----",
        "payload": "tree 72fbecee750790beda0a3c02e557b730f65257bf\nparent 86969aaf836691ac5848165bb0d777fd88bfba1a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147495 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[rpc] make ProcessImport public\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7290ac259798ae88458a67938014dd647502e06f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7290ac259798ae88458a67938014dd647502e06f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7290ac259798ae88458a67938014dd647502e06f/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86969aaf836691ac5848165bb0d777fd88bfba1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86969aaf836691ac5848165bb0d777fd88bfba1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86969aaf836691ac5848165bb0d777fd88bfba1a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6927ffe26d0afe2eccd5f4f3fa9af5d4b6433ff8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7290ac259798ae88458a67938014dd647502e06f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7290ac259798ae88458a67938014dd647502e06f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7290ac259798ae88458a67938014dd647502e06f",
        "patch": "@@ -230,6 +230,7 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/psbtwallet.h \\\n+  wallet/rpcdump.h \\\n   wallet/rpcsigner.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\"
      },
      {
        "sha": "fcedd9b473bbb8837ac05625260a711767c0e5ab",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7290ac259798ae88458a67938014dd647502e06f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7290ac259798ae88458a67938014dd647502e06f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7290ac259798ae88458a67938014dd647502e06f",
        "patch": "@@ -17,6 +17,7 @@\n #include <util/system.h>\n #include <util/time.h>\n #include <util/translation.h>\n+#include <wallet/rpcdump.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n@@ -1177,7 +1178,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     return warnings;\n }\n \n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     UniValue warnings(UniValue::VARR);\n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "4860b5a9c3a74409f13281a8fdf527f9c055c537",
        "filename": "src/wallet/rpcdump.h",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7290ac259798ae88458a67938014dd647502e06f/src/wallet/rpcdump.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7290ac259798ae88458a67938014dd647502e06f/src/wallet/rpcdump.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.h?ref=7290ac259798ae88458a67938014dd647502e06f",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_RPCDUMP_H\n+#define BITCOIN_WALLET_RPCDUMP_H\n+\n+#include <wallet/wallet.h>\n+\n+class UniValue;\n+\n+UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet);\n+\n+#endif //BITCOIN_WALLET_RPCDUMP_H"
      }
    ]
  },
  {
    "sha": "3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjBhZTVhNDY0MWZjNmNmYjZiZjRlNTI3OWM4ZmE5MTY4MzQ5MTEx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:06:18Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[rpc] signer: GetSignerForJSONRPCRequest",
      "tree": {
        "sha": "d8ac72016fd05a49832aa82cd3ae752076ed3952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8ac72016fd05a49832aa82cd3ae752076ed3952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAliXw/9EgrFWkGBpmeBkpmt0eDqiN3HF913VindJPbuEBN/K4lsrG1eysNDEnHE\n4rsDm+cLFoHX3Sp6QRnuASrd4/B1DBpWPjnl7OytPM28nGqs/Wesqq74/Lh1WiDi\n60RbsXMmojbDYwWUjnOeBleyJ8ycVJyyTmqRgPzk9rWesi3GSYyDcod+jwek4OJT\nBATz0glc3d4GDSzabK/HNDyWGSaITHLLuPEg9Vy93Qa74veoasySLtV3XHXLRFmb\nM4FiuwP+P5Rk3/yQ4KPs5drF1riEPo9rrllKTykYqP2thMH3SGGM+8P0kNKpo3Br\n0WOnsW9c0hKBunT3jPbbHsyirMyhAUG2xM8Azow/yr6+H3vrfAPwEfnxxhAHKHTt\n/80Hw5rf0zZdGKU8i+0gbJ4FJ29xOFFofqETC/vs1fqurHXNv/REL5nqKTvh5E5r\nVNBEox4EviDmAmDw8itcH60wL9NXKxgZKthfVCm/xbwh1l4uAcDGN/D/H4G62Tie\nJiGWHGmtGIfpSA5ZQYbY0lU6gIaZOabILzu3WXpfr0F4KOACnwcHY/GeX1WMOx7p\nUMfDa3xzRAbETe+1E/zAA21PAaIswaj7PuGT11Lweei8Kxq8q5pzknaGo+IEqcAi\nRklmb707mau8TsPoNy3JBFnlBG5TTHnuqKjzt3u9v11Kd0rs3m8=\n=J4Hy\n-----END PGP SIGNATURE-----",
        "payload": "tree d8ac72016fd05a49832aa82cd3ae752076ed3952\nparent 7290ac259798ae88458a67938014dd647502e06f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147578 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[rpc] signer: GetSignerForJSONRPCRequest\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7290ac259798ae88458a67938014dd647502e06f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7290ac259798ae88458a67938014dd647502e06f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7290ac259798ae88458a67938014dd647502e06f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "22dad396badfcf886d98790c89b7bcbf76e21663",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
        "patch": "@@ -57,6 +57,25 @@ static UniValue enumeratesigners(const JSONRPCRequest& request)\n     return result;\n }\n \n+ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int index, CWallet* pwallet) {\n+    if (pwallet->m_external_signers.empty()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"First call enumeratesigners\");\n+    }\n+\n+    // If no fingerprint is specified, return the only available signer\n+    if (request.params.size() < size_t(index + 1) || request.params[index].isNull()) {\n+        if (pwallet->m_external_signers.size() > 1) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Multiple signers found, please specify which to use\");\n+        }\n+        return &pwallet->m_external_signers.front();\n+    }\n+\n+    const std::string fingerprint = request.params[index].get_str();\n+    for (ExternalSigner &candidate : pwallet->m_external_signers) {\n+        if (candidate.m_fingerprint == fingerprint) return &candidate;\n+    }\n+    throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n+}\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames"
      },
      {
        "sha": "90741d2ba9bdc3b206121b6d86d52c46d826851a",
        "filename": "src/wallet/rpcsigner.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111/src/wallet/rpcsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111/src/wallet/rpcsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.h?ref=3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
        "patch": "@@ -11,6 +11,21 @@\n #ifdef HAVE_BOOST_PROCESS\n \n class CRPCTable;\n+class CWallet;\n+class ExternalSigner;\n+class JSONRPCRequest;\n+\n+/**\n+ * Figures out what external signer to use for a JSONRPCRequest. If no fingerprint\n+ * is specified and there is only one signer, it returns that.\n+ *\n+ * @param[in] request   JSONRPCRequest that wishes to access a signer\n+ * @param[in] index     request.params[index] contains the signer fingerprint\n+ * @param[in] pwallet   CWallet pointer to the wallet\n+ *\n+ * @return nullptr if no signer is found, or a pointer to the ExternalSigner\n+ */\n+ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int index, CWallet* pwallet);\n \n namespace interfaces {\n class Chain;"
      }
    ]
  },
  {
    "sha": "89871c6e5c185d5b3cb0a862056152ab9d7565fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTg3MWM2ZTVjMTg1ZDViM2NiMGE4NjIwNTYxNTJhYjlkNzU2NWZk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:07:12Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[rpc] signer: add ParseDescriptor",
      "tree": {
        "sha": "87b9b97818b27d2ee6fe049e1a6279c83d2b163c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87b9b97818b27d2ee6fe049e1a6279c83d2b163c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89871c6e5c185d5b3cb0a862056152ab9d7565fd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAlSUBAApKpmpDk4tPP9oDnp+8F6ECUQGDcHIKPedX/aoIZ/cNBwiebWg8n7DOGc\nH18AGgzn7O0JUWbLKx3UN/DUk9aMpXit9pcza58GVFhvKbtjrBVih+iAo3TSIekb\nACPAxBJVnYKb+SmvzSuVKypdKIJ/6MMmcWnxCDvPxizA8PufJ3HjouFJ/yHwRAPd\nEaVGdi8tNJMIFmjRwNUVru2oLvnNDy0YVuKYStdWAzjU2ZU6TS9NdeNDNRFvDXYg\nU2OD8QZPqJT9jqRyEDDg14MvC2zRf+jxWl5U8dm59FMtleS7c6INbSlW7ZrTo+lw\n4B1uS/8y/Qpadjl3pTBkuKixUy6KIhZ6O3BhaCRRQzKt7bceryyEQrT24M/Wk8AV\nwn2L9vyQe54ecuJlsof512wp5BVDFAmRImvCWwP5Q6b7Vse0CDHthdUj/cQCQgvi\nEHVGMQ6D95NheEEr4hZ5JzxOaX5RJi8nAB93QFJNbPsm4fumByVtno4x8ehBmyln\nx+zHyN66in+VaaciwCftpqTVwi+uiKo7oXjfAfaEYRGJ0Xem+/Sa5KosWMViHsqa\n+UysQnPUiZtW+mZUGFkHRbb4jFf1q+kP6AS6eyKO3dZva4hESIz96xtX01FTnCAn\nsWpn54I0sSLgrbng6yKwgaZPNE/h7xeEqFMG+5q7gPtfSY7YQ7o=\n=MzJs\n-----END PGP SIGNATURE-----",
        "payload": "tree 87b9b97818b27d2ee6fe049e1a6279c83d2b163c\nparent 3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147632 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[rpc] signer: add ParseDescriptor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89871c6e5c185d5b3cb0a862056152ab9d7565fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89871c6e5c185d5b3cb0a862056152ab9d7565fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89871c6e5c185d5b3cb0a862056152ab9d7565fd/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0ae5a4641fc6cfb6bf4e5279c8fa9168349111"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e0b601bcd6a6af7ae26fa2717a235b00e6c98087",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89871c6e5c185d5b3cb0a862056152ab9d7565fd/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89871c6e5c185d5b3cb0a862056152ab9d7565fd/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=89871c6e5c185d5b3cb0a862056152ab9d7565fd",
        "patch": "@@ -76,6 +76,23 @@ ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int in\n     }\n     throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n }\n+\n+std::unique_ptr<Descriptor> ParseDescriptor(const UniValue &descriptor_val, bool must_be_solveable = true, bool must_be_ranged = false) {\n+    if (!descriptor_val.isStr()) JSONRPCError(RPC_WALLET_ERROR, \"Unexpect result\");\n+    FlatSigningProvider provider;\n+    const std::string desc_str = descriptor_val.getValStr();\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, provider, true);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor: %s\", desc_str));\n+    }\n+    if (!desc->IsRange()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor must be ranged\");\n+    }\n+    if (!desc->IsSolvable()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor must be solvable\");\n+    }\n+    return desc;\n+}\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames"
      }
    ]
  },
  {
    "sha": "1c9c8c759b9280b46f4405546bd407765c2fff39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzljOGM3NTliOTI4MGI0NmY0NDA1NTQ2YmQ0MDc3NjVjMmZmZjM5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-09T16:07:47Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[rpc] signer: add signerfetchkeys to import keys from signer",
      "tree": {
        "sha": "6e2eb1afbad5727a44599fa63d7968cf6b828c94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e2eb1afbad5727a44599fa63d7968cf6b828c94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c9c8c759b9280b46f4405546bd407765c2fff39",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAl1Lw/+PII1RcebjGcwGLmTFyN72ibcMHZnA7ZoNr8XwSx+aY/p7K4hI9IzJ4oX\nyyKuB/d+yfFyeQa5ywuaXOXgU25mki7Q8f248WgRobGua6lP8yJvfLR/U1mnVBCb\nRhcYxmYSGhwZyr61EyDHDmYV91G7mvAvJoyJK5AcV/eFfmSE5g3OzeR5FZPp5Ae4\ncc5zyJyuL0J7XuXLYdZiFoqxyJyv9a7pP2ieimHLeHavEgKhYfMPFi1lHoK80N9T\nokgQKPwsbUC3pKr+Sdn//Rnmvw/S7PUFR0WLtfNJcyG2pATlzDnMbMigMQPr8t9w\nZxFutwwQrNTGsBJzFZRDE0aZy9BbgR6u9OJk5L2hkGepfSeRwrm8j7ROQoaNBsfV\nlkDh/H8OB9Xoc4lPmumhyKCzMx90D+//0+QiEZ5A8YnF/nkdHAhr1Q7q247r5fvT\nIjqoyE8djtS5RS9n/keLTGu/Ji4e323eIm5p47+leThrxfyQRE2VGtd42PDvbImF\nwofevvhAb/5xqZmKrY4GRpRqWZJEI1WUXT0uTO/WGaQNqsFreeC+UfRcUalfzvuI\nVj+AGaLkSano1HGDP5wnemR6xgxVpUgODhmVEB0ROUSZN1RnBRmyjkt3CvTAiiNZ\n5ogFbBzFv0+elX5a2EwSaFWqBOx2lnDfbDUYSVnD0vYCU43FVcU=\n=ekhO\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e2eb1afbad5727a44599fa63d7968cf6b828c94\nparent 89871c6e5c185d5b3cb0a862056152ab9d7565fd\nauthor Sjors Provoost <sjors@sprovoost.nl> 1552147667 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[rpc] signer: add signerfetchkeys to import keys from signer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c9c8c759b9280b46f4405546bd407765c2fff39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c9c8c759b9280b46f4405546bd407765c2fff39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c9c8c759b9280b46f4405546bd407765c2fff39/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89871c6e5c185d5b3cb0a862056152ab9d7565fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89871c6e5c185d5b3cb0a862056152ab9d7565fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89871c6e5c185d5b3cb0a862056152ab9d7565fd"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 260,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c1ed455c99a7544e0ed33061a2540340d7abbec5",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c9c8c759b9280b46f4405546bd407765c2fff39/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c9c8c759b9280b46f4405546bd407765c2fff39/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=1c9c8c759b9280b46f4405546bd407765c2fff39",
        "patch": "@@ -109,6 +109,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n+    { \"signerfetchkeys\", 0, \"account\" },\n     { \"createpsbt\", 0, \"inputs\" },\n     { \"createpsbt\", 1, \"outputs\" },\n     { \"createpsbt\", 2, \"locktime\" },"
      },
      {
        "sha": "5625df8a150f03a702197bee85f78d1449740473",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c9c8c759b9280b46f4405546bd407765c2fff39/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c9c8c759b9280b46f4405546bd407765c2fff39/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=1c9c8c759b9280b46f4405546bd407765c2fff39",
        "patch": "@@ -30,4 +30,9 @@ UniValue ExternalSigner::Enumerate(const std::string& command, std::vector<Exter\n     return result;\n }\n \n+UniValue ExternalSigner::getDescriptors(int account)\n+{\n+    return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getdescriptors --account \" + std::to_string(account));\n+}\n+\n #endif"
      },
      {
        "sha": "942a810f605c9c4a82c88b9cdd8da662480180d2",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c9c8c759b9280b46f4405546bd407765c2fff39/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c9c8c759b9280b46f4405546bd407765c2fff39/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=1c9c8c759b9280b46f4405546bd407765c2fff39",
        "patch": "@@ -43,6 +43,12 @@ class ExternalSigner\n     //! @param[out]  UniValue   see doc/external-signer.md\n     static UniValue Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet = true);\n \n+    //! Get receive and change Descriptor(s) from device for a given account.\n+    //! Calls `<command> getdescriptors --account <account>`\n+    //! @param[in] account  which BIP32 account to use (e.g. `m/44'/0'/account'`)\n+    //! @param[out] UniValue see doc/external-signer.md\n+    UniValue getDescriptors(int account);\n+\n #endif\n };\n "
      },
      {
        "sha": "08910612753d0c55414c8374dd6b8b6b608d0197",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 177,
        "deletions": 1,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c9c8c759b9280b46f4405546bd407765c2fff39/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c9c8c759b9280b46f4405546bd407765c2fff39/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=1c9c8c759b9280b46f4405546bd407765c2fff39",
        "patch": "@@ -5,10 +5,12 @@\n #include <chainparamsbase.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n+#include <script/descriptor.h>\n #include <util/strencodings.h>\n+#include <validation.h>\n+#include <wallet/rpcdump.h>\n #include <wallet/rpcsigner.h>\n #include <wallet/rpcwallet.h>\n-#include <wallet/wallet.h>\n \n #ifdef HAVE_BOOST_PROCESS\n \n@@ -93,11 +95,185 @@ std::unique_ptr<Descriptor> ParseDescriptor(const UniValue &descriptor_val, bool\n     }\n     return desc;\n }\n+\n+UniValue signerfetchkeys(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerfetchkeys\",\n+                \"Obtains keys from external signer and imports them into the wallet.\\n\"\n+                \"Call enumeratesigners before using this.\\n\",\n+                {\n+                    {\"account\",     RPCArg::Type::NUM, /* default_val */ \"0\", \"BIP32 account to use\"},\n+                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"Master key fingerprint of signer\"}\n+                },\n+                RPCResult{\n+                    \"[{ \\\"success\\\": true }\"\n+                },\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 1, pwallet);\n+\n+    int account = 0;\n+    if (!request.params[0].isNull()) {\n+        RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+        account = request.params[0].get_int();\n+    }\n+\n+    UniValue signer_res = signer->getDescriptors(account);\n+    if (!signer_res.isObject()) throw JSONRPCError(RPC_WALLET_ERROR, \"Unexpect result\");\n+    const UniValue& receive_descriptor_vals = find_value(signer_res, \"receive\");\n+    const UniValue& change_descriptor_vals = find_value(signer_res, \"internal\");\n+    if (!receive_descriptor_vals.isArray()) throw JSONRPCError(RPC_WALLET_ERROR, \"Unexpect result\");\n+    if (!change_descriptor_vals.isArray()) throw JSONRPCError(RPC_WALLET_ERROR, \"Unexpect result\");\n+\n+    // Parse and check descriptors\n+    std::vector<std::unique_ptr<Descriptor>> receive_descriptors;\n+    std::vector<std::unique_ptr<Descriptor>> change_descriptors;\n+\n+    for (const UniValue& desc : receive_descriptor_vals.get_array().getValues()) {\n+        receive_descriptors.push_back(ParseDescriptor(desc, true, true));\n+    }\n+\n+    for (const UniValue& desc : change_descriptor_vals.get_array().getValues()) {\n+        change_descriptors.push_back(ParseDescriptor(desc, true, true));\n+    }\n+\n+    // Use importmulti to process the descriptors:\n+    // TODO: extract reusable non-RPC code from importmulti\n+    UniValue importdata(UniValue::VARR);\n+\n+    uint64_t keypool_target_size = 0;\n+    keypool_target_size = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+\n+    if (keypool_target_size == 0) throw JSONRPCError(RPC_WALLET_ERROR, \"-keypool must be > 0\");\n+\n+    UniValue receive_key_data(UniValue::VOBJ);\n+\n+    // Pick receive descriptor based on address_type\n+    // TODO: after #15567, remove desc_prefix stuff and use desc->GetAddressType()\n+    std::string desc_prefix = \"\";\n+    switch (pwallet->m_default_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\";\n+        break;\n+    }\n+    default:\n+        assert(false);\n+    }\n+\n+    std::unique_ptr<Descriptor> match_desc;\n+    for (auto&& desc : receive_descriptors) {\n+        if (desc->ToString().find(desc_prefix) == 0) {\n+            match_desc = std::move(desc);\n+            break;\n+        }\n+    }\n+\n+    if (!match_desc) throw JSONRPCError(RPC_WALLET_ERROR, \"No descriptor found for wallet address type\");\n+    receive_key_data.pushKV(\"desc\", match_desc->ToString());\n+\n+    UniValue receive_range(UniValue::VARR);\n+    // TODO: base range start and end on what's currently in the keypool\n+    receive_range.push_back(0);\n+    receive_range.push_back(keypool_target_size - 1);\n+    receive_key_data.pushKV(\"range\", receive_range);\n+    receive_key_data.pushKV(\"internal\", false);\n+    receive_key_data.pushKV(\"keypool\", true);\n+    receive_key_data.pushKV(\"watchonly\", true);\n+    importdata.push_back(receive_key_data);\n+\n+    UniValue change_key_data(UniValue::VOBJ);\n+\n+    // Pick change descriptor based on address_type\n+    const OutputType change_type = pwallet->m_default_change_type == OutputType::CHANGE_AUTO ? pwallet->m_default_address_type : pwallet->m_default_change_type;\n+\n+    // TODO: after #15567, remove desc_prefix stuff and use desc->GetAddressType()\n+    switch (change_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\";\n+        break;\n+    }\n+    default:\n+        assert(false);\n+    }\n+\n+    match_desc.reset(nullptr);\n+    for (auto&& desc : change_descriptors) {\n+        if (desc->ToString().find(desc_prefix) == 0) {\n+            match_desc = std::move(desc);\n+            break;\n+        }\n+    }\n+\n+    if (!match_desc) throw JSONRPCError(RPC_WALLET_ERROR, \"No descriptor found for wallet change address type\");\n+    change_key_data.pushKV(\"desc\", match_desc->ToString());\n+\n+    UniValue change_range(UniValue::VARR);\n+    // TODO: base range start and end on what's currently in the keypool\n+    change_range.push_back(0);\n+    change_range.push_back(keypool_target_size - 1);\n+    change_key_data.pushKV(\"range\", change_range);\n+    change_key_data.pushKV(\"internal\", true);\n+    change_key_data.pushKV(\"keypool\", true);\n+    change_key_data.pushKV(\"watchonly\", true);\n+    importdata.push_back(change_key_data);\n+\n+    UniValue result(UniValue::VARR);\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        int64_t now = tip_height ? locked_chain->getBlockMedianTimePast(*tip_height) : 0;\n+        LOCK(pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n+        for (const UniValue& data : importdata.getValues()) {\n+            // TODO: prevent inserting the same key twice\n+            result.push_back(ProcessImport(pwallet, data, now));\n+        }\n+    }\n+\n+    // TODO: after the import, fetch a random key from the wallet (part of the import)\n+    // and ask the signer to sign a message (may require user approval on device).\n+    // Check the returned signature.\n+    // This ensures that the device can actually sign with this key and no data\n+    // corruption occured en route.\n+    // Note that this doesn't guarantee the device can sign for any script involving this key.\n+\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n     { \"signer\",             \"enumeratesigners\",                 &enumeratesigners,              {} },\n+    { \"signer\",             \"signerfetchkeys\",                  &signerfetchkeys,               {\"account\", \"fingerprint\"} },\n };\n // clang-format on\n "
      },
      {
        "sha": "bbbaab7e558070a61cbbdb49e8ed1c1ecde624b9",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c9c8c759b9280b46f4405546bd407765c2fff39/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c9c8c759b9280b46f4405546bd407765c2fff39/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=1c9c8c759b9280b46f4405546bd407765c2fff39",
        "patch": "@@ -20,12 +20,35 @@ def perform_pre_checks():\n def enumerate(args):\n   sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\"}, {\"fingerprint\": \"00000002\"}]))\n \n+def getdescriptors(args):\n+    xpub = \"tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\"\n+\n+    sys.stdout.write(json.dumps({\n+        \"receive\": [\n+            \"pkh([00000001/44'/1'/\" + args.account + \"']\" + xpub + \"/0/*)#vt6w3l3j\",\n+            \"sh(wpkh([00000001/49'/1'/\" + args.account + \"']\" + xpub + \"/0/*))#r0grqw5x\",\n+            \"wpkh([00000001/84'/1'/\" + args.account + \"']\" + xpub + \"/0/*)#x30uthjs\"\n+        ],\n+        \"internal\": [\n+            \"pkh([00000001/44'/1'/\" + args.account + \"']\" + xpub + \"/1/*)#all0v2p2\",\n+            \"sh(wpkh([00000001/49'/1'/\" + args.account + \"']\" + xpub + \"/1/*))#kwx4c3pe\",\n+            \"wpkh([00000001/84'/1'/\" + args.account + \"']\" + xpub + \"/1/*)#h92akzzg\"\n+        ]\n+    }))\n+\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n+parser.add_argument('--fingerprint')\n+parser.add_argument('--testnet', action='store_true')\n subparsers = parser.add_subparsers()\n \n parser_enumerate = subparsers.add_parser('enumerate', help='list available signers')\n parser_enumerate.set_defaults(func=enumerate)\n \n+parser_getdescriptors = subparsers.add_parser('getdescriptors')\n+parser_getdescriptors.set_defaults(func=getdescriptors)\n+parser_getdescriptors.add_argument('--account', metavar='account')\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()"
      },
      {
        "sha": "fe0866d4a5d0679270c438df6417869a30f44cf9",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 48,
        "deletions": 1,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c9c8c759b9280b46f4405546bd407765c2fff39/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c9c8c759b9280b46f4405546bd407765c2fff39/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=1c9c8c759b9280b46f4405546bd407765c2fff39",
        "patch": "@@ -51,7 +51,6 @@ def run_test(self):\n         self.log.info('-signer=%s' % self.mock_signer_path())\n         assert_equal(self.nodes[0].getbalance(), 1250)\n         assert_equal(self.nodes[1].getbalance(), 1250)\n-\n         assert_raises_rpc_error(-4, 'Error: restart bitcoind with -signer=<cmd>',\n             self.nodes[0].enumeratesigners\n         )\n@@ -79,7 +78,55 @@ def run_test(self):\n         result = hww1.enumeratesigners()\n         assert_equal(len(result['signers']), 2)\n         hww2.enumeratesigners()\n+        # Delay enumerate on third wallet to test error handling\n+        # hww3.enumeratesigners()\n+\n+        self.log.info('Test signerfetchkeys with bech32, p2sh-segwit and legacy')\n+\n+        result = hww1.signerfetchkeys(0, \"00000001\")\n+        assert_equal(result, [{'success': True}, {'success': True}])\n+        assert_equal(hww1.getwalletinfo()[\"keypoolsize\"], 1)\n+\n+        assert_raises_rpc_error(-4, \"First call enumeratesigners\", hww3.signerfetchkeys)\n         hww3.enumeratesigners()\n \n+        assert_raises_rpc_error(-4, \"Multiple signers found, please specify which to use\", hww3.signerfetchkeys)\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[1], \"2\")\n+        assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+            hww1.signerfetchkeys, 0, \"00000001\"\n+        )\n+        self.clear_mock_result(self.nodes[1])\n+\n+        address1 = hww1.getnewaddress()\n+        assert_equal(address1, \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\")\n+        address_info = hww1.getaddressinfo(address1)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], False)\n+        assert_equal(address_info['hdkeypath'], \"m/84'/1'/0'/0/0\")\n+\n+        result = hww2.signerfetchkeys(0, \"00000001\")\n+        assert_equal(result, [{'success': True}, {'success': True}])\n+        assert_equal(hww2.getwalletinfo()[\"keypoolsize\"], 1)\n+\n+        address2 = hww2.getnewaddress()\n+        assert_equal(address2, \"2N2gQKzjUe47gM8p1JZxaAkTcoHPXV6YyVp\")\n+        address_info = hww2.getaddressinfo(address2)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], False)\n+        assert_equal(address_info['hdkeypath'], \"m/49'/1'/0'/0/0\")\n+\n+        result = hww3.signerfetchkeys(0, \"00000001\")\n+        assert_equal(result, [{'success': True}, {'success': True}])\n+        assert_equal(hww3.getwalletinfo()[\"keypoolsize\"], 1)\n+\n+        address3 = hww3.getnewaddress(\"00000001\")\n+        assert_equal(address3, \"n1LKejAadN6hg2FrBXoU1KrwX4uK16mco9\")\n+        address_info = hww3.getaddressinfo(address3)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], False)\n+        assert_equal(address_info['hdkeypath'], \"m/44'/1'/0'/0/0\")\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "9ee5a08becd74db8b62668e430e6261e6a87c052",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWU1YTA4YmVjZDc0ZGI4YjYyNjY4ZTQzMGU2MjYxZTZhODdjMDUy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[rpc] signer: add signerdissociate",
      "tree": {
        "sha": "cc9eac3df7f4ba632c09ee03ae1cc4cc359d890b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc9eac3df7f4ba632c09ee03ae1cc4cc359d890b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ee5a08becd74db8b62668e430e6261e6a87c052",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAmUOw/+KNm6oVfoU5UoturQBtnOF+9NfbW+xeI8D6z0nJdmO8dfwVDJiQzcx69x\nqiNed8uj0TsU5EQ8eXHOMz9u+c5LuVW87lyIFwDrJCagn6pu6nESdnRwvNRu619h\nBXMLvHjZ+zPTGaG9VJ3N2bl185aPyfemyvktomI+NKygvqNYbVqWPVrseXCAEXW8\nkMnmqS7cBCezwl7szA7gg2lOOSDpFru3uOxtCo31vmrdsnc/PtIYvZ1u/SXR/GLZ\nXmWw3SuqWI0Wr1vIuzoCPtJ1m8Z0o92E/T/R3fRBsbXNZ+Iz3X+0l6mYHWjwvNmG\nJRYvb+f9gEGpalP9WnJ6iSNKd7itWP11FnOb+Ksc+G+KjYBZ/wmIwH9ffuaIirZy\nGNlUZH0NMM9R8HKQiIeCDfQkYoB+9D3EdQ6ZrcYnLDvJb8Y550PhB7+UlrabEZnO\nk9XUGs4ULIM35NcOI+gGV+q4sD1aSeDDmjMyGIzudr4xrsHLPv9YoqYq25JVBkuK\nofdaShnRZONMEy6b7gMm8jwD4+veyZLDlohzIyR4M1Xk7sQeRxoIdJz2QoPx3Qsa\nEjH8o+sfOS+gKNCiQM2z3gWn+29AafNWmx6bLXblZNLmB363kvD6x5Hkb8vwYYio\nvpWpt34jz0W2kGDLJylq7gZbRRHRQunzhxUpCQv3OrAsfYRjM5c=\n=NZCd\n-----END PGP SIGNATURE-----",
        "payload": "tree cc9eac3df7f4ba632c09ee03ae1cc4cc359d890b\nparent 1c9c8c759b9280b46f4405546bd407765c2fff39\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[rpc] signer: add signerdissociate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ee5a08becd74db8b62668e430e6261e6a87c052",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ee5a08becd74db8b62668e430e6261e6a87c052",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ee5a08becd74db8b62668e430e6261e6a87c052/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c9c8c759b9280b46f4405546bd407765c2fff39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c9c8c759b9280b46f4405546bd407765c2fff39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c9c8c759b9280b46f4405546bd407765c2fff39"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 46,
      "deletions": 6
    },
    "files": [
      {
        "sha": "dd661e41423631243bbb4713e17eb0956016233f",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ee5a08becd74db8b62668e430e6261e6a87c052/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ee5a08becd74db8b62668e430e6261e6a87c052/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=9ee5a08becd74db8b62668e430e6261e6a87c052",
        "patch": "@@ -35,6 +35,12 @@ class ExternalSigner\n     //! Bitcoin mainnet or testnet\n     bool m_mainnet;\n \n+    //! Two signers with the same master key fingerprint are considered the same\n+    friend inline bool operator==( const ExternalSigner &a, const ExternalSigner &b )\n+    {\n+         return a.m_fingerprint == b.m_fingerprint;\n+    }\n+\n #ifdef HAVE_BOOST_PROCESS\n     //! Obtain a list of signers. Calls `<command> enumerate`.\n     //! @param[in]              command the command which handles interaction with the external signer"
      },
      {
        "sha": "c6bbeb37d6b73a45b613380ff21f1547d7781a9e",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ee5a08becd74db8b62668e430e6261e6a87c052/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ee5a08becd74db8b62668e430e6261e6a87c052/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=9ee5a08becd74db8b62668e430e6261e6a87c052",
        "patch": "@@ -79,6 +79,37 @@ ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int in\n     throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n }\n \n+UniValue signerdissociate(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerdissociate\",\n+                \"Disossociates external signer from the wallet.\\n\",\n+                {\n+                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"Master key fingerprint of signer\"},\n+                },\n+                RPCResult{\"null\"},\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 0, pwallet);\n+\n+    assert(signer != nullptr);\n+    std::vector<ExternalSigner>::iterator position = std::find(pwallet->m_external_signers.begin(), pwallet->m_external_signers.end(), *signer);\n+    if (position != pwallet->m_external_signers.end()) pwallet->m_external_signers.erase(position);\n+\n+    return NullUniValue;\n+}\n+\n std::unique_ptr<Descriptor> ParseDescriptor(const UniValue &descriptor_val, bool must_be_solveable = true, bool must_be_ranged = false) {\n     if (!descriptor_val.isStr()) JSONRPCError(RPC_WALLET_ERROR, \"Unexpect result\");\n     FlatSigningProvider provider;\n@@ -273,6 +304,7 @@ static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n     { \"signer\",             \"enumeratesigners\",                 &enumeratesigners,              {} },\n+    { \"signer\",             \"signerdissociate\",                 &signerdissociate,              {\"fingerprint\"} },\n     { \"signer\",             \"signerfetchkeys\",                  &signerfetchkeys,               {\"account\", \"fingerprint\"} },\n };\n // clang-format on"
      },
      {
        "sha": "ad0155c748269ecb8dd5ce32154a5e7084e85cf7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ee5a08becd74db8b62668e430e6261e6a87c052/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ee5a08becd74db8b62668e430e6261e6a87c052/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9ee5a08becd74db8b62668e430e6261e6a87c052",
        "patch": "@@ -34,6 +34,7 @@\n #include <wallet/walletutil.h>\n \n #include <stdint.h>\n+#include <algorithm>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "a4707bc675adb87d3f8d2ed6602d02e94a5e5944",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ee5a08becd74db8b62668e430e6261e6a87c052/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ee5a08becd74db8b62668e430e6261e6a87c052/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=9ee5a08becd74db8b62668e430e6261e6a87c052",
        "patch": "@@ -87,11 +87,6 @@ def run_test(self):\n         assert_equal(result, [{'success': True}, {'success': True}])\n         assert_equal(hww1.getwalletinfo()[\"keypoolsize\"], 1)\n \n-        assert_raises_rpc_error(-4, \"First call enumeratesigners\", hww3.signerfetchkeys)\n-        hww3.enumeratesigners()\n-\n-        assert_raises_rpc_error(-4, \"Multiple signers found, please specify which to use\", hww3.signerfetchkeys)\n-\n         # Handle error thrown by script\n         self.set_mock_result(self.nodes[1], \"2\")\n         assert_raises_rpc_error(-1, 'Unable to parse JSON',\n@@ -106,6 +101,9 @@ def run_test(self):\n         assert_equal(address_info['ismine'], False)\n         assert_equal(address_info['hdkeypath'], \"m/84'/1'/0'/0/0\")\n \n+        assert_raises_rpc_error(-4, \"First call enumeratesigners\", hww3.signerfetchkeys)\n+        hww3.enumeratesigners()\n+\n         result = hww2.signerfetchkeys(0, \"00000001\")\n         assert_equal(result, [{'success': True}, {'success': True}])\n         assert_equal(hww2.getwalletinfo()[\"keypoolsize\"], 1)\n@@ -117,7 +115,10 @@ def run_test(self):\n         assert_equal(address_info['ismine'], False)\n         assert_equal(address_info['hdkeypath'], \"m/49'/1'/0'/0/0\")\n \n-        result = hww3.signerfetchkeys(0, \"00000001\")\n+        assert_raises_rpc_error(-4, \"Multiple signers found, please specify which to use\", hww3.signerfetchkeys)\n+        hww3.signerdissociate(\"00000002\")\n+        hww3.signerfetchkeys()\n+\n         assert_equal(result, [{'success': True}, {'success': True}])\n         assert_equal(hww3.getwalletinfo()[\"keypoolsize\"], 1)\n "
      }
    ]
  },
  {
    "sha": "e951fb2b04848d7b94500a678bd59e52e1ad28f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTUxZmIyYjA0ODQ4ZDdiOTQ1MDBhNjc4YmQ1OWU1MmUxYWQyOGYz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:30Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[rpc] signer: add signerdisplayaddress",
      "tree": {
        "sha": "dc0266a6bb07b6d1396fe73bede1efb5cb6f1e08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc0266a6bb07b6d1396fe73bede1efb5cb6f1e08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e951fb2b04848d7b94500a678bd59e52e1ad28f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAmeLw//XFW+tRtfYiXCcYBa3qkqwdvA9Z1tVJbeRVpLqraftjTN1LDfuLk2cf9d\n4gno7ee+s++JsRntfXrXsF/tChF4ZyeIVvEQF4dWdVd6K4ImTI7yymbZN+ZsSmoo\no/umgBSDMn6ngu71/PvX6Jwja8yA+BjLVHIDg8xyoNc0JBIDcHytQGEc35Hb9JBN\ntuZ2nLdJdzO8TmSk10hH+8TYvJRi4+/iiyGq+KFbm99lIQ4d8mzyNJsVvnz6I5nz\n7yfbcwZ5LXu7+qhxtVWoZfweEjahE/LgoME2+Ju5BC0+e39u4v0TSNCItKiZiv0d\n0OpKd3EJabNTRv0esa3/ZWzqxtVD3nIUC4Htx/Th3CHPg2AryExgX89jZJBOkSSf\naPAXrO+Lxv2VoZDOBv/Ob7hUo34thlRLJg8lAYzkzJHHNiPS+J3JqSs7i3rTspmH\np9QEcykBTk7rd6aHDGyOafCS+lWUb6h8h/O5m9H6/y32MGRwB8TrSUB03/jGNhJf\nhLAQVo+KnEgNkowXLXzC7cDbydHFKuhYu7zu8fD4yccUzeuE63pcrcr7Eqzl4owr\nsN1JmYWICf3Q0z9J+zGjtHXBYw4Qo6jMxT/Yjs9EX43cT8dPfXOjq4oGrt8rr3Mp\nDPwq8mTgEB+Lx7173NsTdg9bB0T2ekB/X3CTi77HEwT3X6f/eck=\n=mlBW\n-----END PGP SIGNATURE-----",
        "payload": "tree dc0266a6bb07b6d1396fe73bede1efb5cb6f1e08\nparent 9ee5a08becd74db8b62668e430e6261e6a87c052\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231670 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[rpc] signer: add signerdisplayaddress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e951fb2b04848d7b94500a678bd59e52e1ad28f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e951fb2b04848d7b94500a678bd59e52e1ad28f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e951fb2b04848d7b94500a678bd59e52e1ad28f3/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ee5a08becd74db8b62668e430e6261e6a87c052",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ee5a08becd74db8b62668e430e6261e6a87c052",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ee5a08becd74db8b62668e430e6261e6a87c052"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 88,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c1c83b38c80b15a93b428cdda4147c4a13cf23a0",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e951fb2b04848d7b94500a678bd59e52e1ad28f3/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e951fb2b04848d7b94500a678bd59e52e1ad28f3/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=e951fb2b04848d7b94500a678bd59e52e1ad28f3",
        "patch": "@@ -30,6 +30,11 @@ UniValue ExternalSigner::Enumerate(const std::string& command, std::vector<Exter\n     return result;\n }\n \n+UniValue ExternalSigner::displayAddress(const std::string& descriptor)\n+{\n+    return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" displayaddress --desc \\\"\" + descriptor + \"\\\"\");\n+}\n+\n UniValue ExternalSigner::getDescriptors(int account)\n {\n     return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getdescriptors --account \" + std::to_string(account));"
      },
      {
        "sha": "a3d676a11e8b1055fd8d7b3c5c3c814d431c7ad3",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e951fb2b04848d7b94500a678bd59e52e1ad28f3/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e951fb2b04848d7b94500a678bd59e52e1ad28f3/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=e951fb2b04848d7b94500a678bd59e52e1ad28f3",
        "patch": "@@ -49,6 +49,11 @@ class ExternalSigner\n     //! @param[out]  UniValue   see doc/external-signer.md\n     static UniValue Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, bool mainnet = true);\n \n+    //! Display address on the device. Calls `<command> displayaddress --desc <descriptor>`.\n+    //! @param[in] descriptor Descriptor specifying which address to display.\n+    //!            Must include a public key or xpub, as well as key origin.\n+    UniValue displayAddress(const std::string& descriptor);\n+\n     //! Get receive and change Descriptor(s) from device for a given account.\n     //! Calls `<command> getdescriptors --account <account>`\n     //! @param[in] account  which BIP32 account to use (e.g. `m/44'/0'/account'`)"
      },
      {
        "sha": "67361de74d0b19479c192649d5da4f54466057d9",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e951fb2b04848d7b94500a678bd59e52e1ad28f3/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e951fb2b04848d7b94500a678bd59e52e1ad28f3/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=e951fb2b04848d7b94500a678bd59e52e1ad28f3",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparamsbase.h>\n+#include <key_io.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n@@ -110,6 +111,55 @@ UniValue signerdissociate(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue signerdisplayaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerdisplayaddress\",\n+            \"Display address on an external signer for verification.\\n\",\n+                {\n+                    {\"address\",     RPCArg::Type::STR, RPCArg::Optional::NO, /* default_val */ \"\", \"bitcoin address to display\"},\n+                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"master key fingerprint of signer\"},\n+                },\n+                RPCResult{\"null\"},\n+                RPCExamples{\"\"}\n+            }.ToString()\n+        );\n+    }\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 1, pwallet);\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    auto descriptor = InferDescriptor(scriptPubKey, *pwallet);\n+\n+    if (!descriptor->IsSolvable()) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Key is not solvable\");\n+    }\n+\n+    // TODO: check that fingerprint and BIP32 path is present (new Descriptor method?)\n+    // TODO: check that fingerprint matches signer\n+\n+    signer->displayAddress(descriptor->ToString());\n+\n+    return UniValue(UniValue::VNULL);\n+}\n+\n std::unique_ptr<Descriptor> ParseDescriptor(const UniValue &descriptor_val, bool must_be_solveable = true, bool must_be_ranged = false) {\n     if (!descriptor_val.isStr()) JSONRPCError(RPC_WALLET_ERROR, \"Unexpect result\");\n     FlatSigningProvider provider;\n@@ -305,6 +355,7 @@ static const CRPCCommand commands[] =\n     //  --------------------- ------------------------          -----------------------         ----------\n     { \"signer\",             \"enumeratesigners\",                 &enumeratesigners,              {} },\n     { \"signer\",             \"signerdissociate\",                 &signerdissociate,              {\"fingerprint\"} },\n+    { \"signer\",             \"signerdisplayaddress\",             &signerdisplayaddress,          {\"address\", \"fingerprint\"} },\n     { \"signer\",             \"signerfetchkeys\",                  &signerfetchkeys,               {\"account\", \"fingerprint\"} },\n };\n // clang-format on"
      },
      {
        "sha": "a33f47f87fbebec049069963cee6f682b2b5078b",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e951fb2b04848d7b94500a678bd59e52e1ad28f3/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e951fb2b04848d7b94500a678bd59e52e1ad28f3/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=e951fb2b04848d7b94500a678bd59e52e1ad28f3",
        "patch": "@@ -37,6 +37,18 @@ def getdescriptors(args):\n     }))\n \n \n+def displayaddress(args):\n+    # Several descriptor formats are acceptable, so allowing for potential\n+    # changes to InferDescriptor:\n+    expected_desc = [\n+        \"wpkh([00000001/84'/1'/0'/0/0]0297dc3f4420402e01a113984311bf4a1b8de376cac0bdcfaf1b3ac81f13433c7)\",\n+        \"wpkh([00000001/84'/1'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/0/0)\"\n+    ]\n+    if args.desc not in expected_desc:\n+        return sys.stdout.write(json.dumps({\"error\": \"Unexpected descriptor\", \"desc\": args.desc}))\n+\n+    return sys.stdout.write(json.dumps(None))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n parser.add_argument('--fingerprint')\n parser.add_argument('--testnet', action='store_true')\n@@ -49,6 +61,10 @@ def getdescriptors(args):\n parser_getdescriptors.set_defaults(func=getdescriptors)\n parser_getdescriptors.add_argument('--account', metavar='account')\n \n+parser_displayaddress = subparsers.add_parser('displayaddress', help='display address on signer')\n+parser_displayaddress.add_argument('--desc', metavar='desc')\n+parser_displayaddress.set_defaults(func=displayaddress)\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()"
      },
      {
        "sha": "498fea31b84bd744d4fe9ba4177a3c4d8a452f81",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e951fb2b04848d7b94500a678bd59e52e1ad28f3/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e951fb2b04848d7b94500a678bd59e52e1ad28f3/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=e951fb2b04848d7b94500a678bd59e52e1ad28f3",
        "patch": "@@ -129,5 +129,16 @@ def run_test(self):\n         assert_equal(address_info['ismine'], False)\n         assert_equal(address_info['hdkeypath'], \"m/44'/1'/0'/0/0\")\n \n+        self.log.info('Test signerdisplayaddress')\n+        hww1.signerdisplayaddress(address1, \"00000001\")\n+        hww3.signerdisplayaddress(address3)\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[3], \"2\")\n+        assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+            hww3.signerdisplayaddress, address3\n+        )\n+        self.clear_mock_result(self.nodes[3])\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTJlOWQ4OTljYWE3ZWQ0N2JmZDdjZmQxNTRlMTBlMzBjNDczN2Mw",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:30Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[rpc] signer: add signerprocesspsbt",
      "tree": {
        "sha": "ef455ba118b92eba437ee37769226b5fe5f9e718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef455ba118b92eba437ee37769226b5fe5f9e718"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAm5Nw//aD5y7L0VdcLCavWO+coYA2H52Gw9u8Sj8DP4WgALEc2+K3LQMsk/NLAt\n8MD/t2BlAnRpYakRTY8O5ZXbnt0JQU+7MtidLCdMOQ1O3s6zvqqd83uQ/NfiMqLm\nJ8TE6kIMGWfMKqFixuO3Q1kTw0Z702qerEWp5304HOJExGbvr+TBylQANX5fAnMj\nXS7e58eZMrQxDN/6nq5bDr43we1rZ4Y2ivqO+1Kt8eTkg2BxFDddmdTPZFfPZLMB\nZoCt9KzxJ/QpD+4fnX+m8jqI152PhGHO6jB6k8q+LKOkyjY3f4to3BgesfONzIio\nfPWPC24O0inTlNZ2CCLcGb1N1qkah+MzCxwT+yeqdB8XlmY40c3K45YqdKAu+HnU\nlW/8Z4KQcNofsEIlHtCw+5auM2OgHadp0IE488iZkG3ewp+FW0nv+wxXSNkZIDK8\nWYUjoJ7vIPYvbjbEbkzloKLAInrK45yT0aSjNpFKB+1zEvNn46kg73pOqW0Cx05O\nol0Y/9DQl6FaiiaW1YbgjgyvonKvAI1MB0LdZfcC6aVKkfJiV//epPfvGnjCNLvN\nZhFth9X1Lo84ydIXV66+EkeuXuZPTf+sdkQaUOT57uixr2/M3Vd3dV8bltcxXMIE\n4eyLpsr3xmkC93SJ45m4LpnPOtzJm8K69NCrw1iPtPcHeztzp+w=\n=ng2C\n-----END PGP SIGNATURE-----",
        "payload": "tree ef455ba118b92eba437ee37769226b5fe5f9e718\nparent e951fb2b04848d7b94500a678bd59e52e1ad28f3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231670 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[rpc] signer: add signerprocesspsbt\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e951fb2b04848d7b94500a678bd59e52e1ad28f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e951fb2b04848d7b94500a678bd59e52e1ad28f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e951fb2b04848d7b94500a678bd59e52e1ad28f3"
      }
    ],
    "stats": {
      "total": 338,
      "additions": 297,
      "deletions": 41
    },
    "files": [
      {
        "sha": "0565b36a97306b4c1da129b804aa2a48757d7e00",
        "filename": "src/wallet/externalsigner.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/src/wallet/externalsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/src/wallet/externalsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.cpp?ref=a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <core_io.h>\n+#include <psbt.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n #include <wallet/externalsigner.h>\n \n ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, bool mainnet): m_command(command), m_fingerprint(fingerprint), m_mainnet(mainnet) {}\n@@ -40,4 +44,45 @@ UniValue ExternalSigner::getDescriptors(int account)\n     return runCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \") + \" getdescriptors --account \" + std::to_string(account));\n }\n \n+bool ExternalSigner::signTransaction(PartiallySignedTransaction& psbtx, std::string& error)\n+{\n+    // Check if signer fingerpint matches any input master key fingerprint\n+    bool match = false;\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+        const PSBTInput& input = psbtx.inputs[i];\n+        for (auto entry : input.hd_keypaths) {\n+            if (m_fingerprint == strprintf(\"%08x\", ReadBE32(entry.second.fingerprint))) match = true;\n+        }\n+    }\n+    if (!match) {\n+        error = \"Signer fingerprint does not match any of the inputs\";\n+        return false;\n+    }\n+\n+    // Serialize the PSBT\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+\n+    std::string command = m_command + \" --stdin --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + (m_mainnet ? \"\" : \" --testnet \");\n+    std::string stdinStr = \"signtx \\\"\" + EncodeBase64(ssTx.str()) + \"\\\"\";\n+\n+    const UniValue signer_result = runCommandParseJSON(command, stdinStr);\n+\n+    if (!find_value(signer_result, \"psbt\").isStr()) {\n+        error = \"Unexpected result from signer\";\n+        return false;\n+    }\n+\n+    PartiallySignedTransaction signer_psbtx;\n+    std::string signer_psbt_error;\n+    if (!DecodeBase64PSBT(signer_psbtx, find_value(signer_result, \"psbt\").get_str(), signer_psbt_error)) {\n+        error = strprintf(\"TX decode failed %s\", signer_psbt_error);\n+        return false;\n+    }\n+\n+    psbtx = signer_psbtx;\n+\n+    return true;\n+}\n+\n #endif"
      },
      {
        "sha": "f589413228c45e34009996ac77e1890a5cf9d1d6",
        "filename": "src/wallet/externalsigner.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/src/wallet/externalsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/src/wallet/externalsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/externalsigner.h?ref=a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
        "patch": "@@ -10,6 +10,8 @@\n #include <univalue.h>\n #include <util/system.h>\n \n+struct PartiallySignedTransaction;\n+\n class ExternalSignerException : public std::runtime_error {\n public:\n     using std::runtime_error::runtime_error;\n@@ -60,6 +62,11 @@ class ExternalSigner\n     //! @param[out] UniValue see doc/external-signer.md\n     UniValue getDescriptors(int account);\n \n+    //! Sign PartiallySignedTransaction on the device.\n+    //! Calls `<command> signtransaction` and passes the PSBT via stdin.\n+    //! @param[in,out] psbt  PartiallySignedTransaction to be signed\n+    bool signTransaction(PartiallySignedTransaction& psbt, std::string& error);\n+\n #endif\n };\n "
      },
      {
        "sha": "48de767e3b4520b14a476b80b84b5af6a8112309",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 34,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
        "patch": "@@ -3,7 +3,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparamsbase.h>\n+#include <core_io.h>\n #include <key_io.h>\n+#include <psbt.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n@@ -186,14 +188,18 @@ UniValue signerfetchkeys(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() > 3) {\n         throw std::runtime_error(\n             RPCHelpMan{\"signerfetchkeys\",\n                 \"Obtains keys from external signer and imports them into the wallet.\\n\"\n-                \"Call enumeratesigners before using this.\\n\",\n+                \"For interoperability reasons (BIP 44, 49 and 84), it is recommended that you\\n\"\n+                \"check -addresstype and -changetype settings before calling this.\\n\"\n+                \"It is also recommended that you continue to use the same address type with this\\n\"\n+                \"wallet. Call enumeratesigners first.\\n\",\n                 {\n                     {\"account\",     RPCArg::Type::NUM, /* default_val */ \"0\", \"BIP32 account to use\"},\n-                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"Master key fingerprint of signer\"}\n+                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"Master key fingerprint of signer\"},\n+                    {\"range\", RPCArg::Type::RANGE, /* default */ \"set by -keypool\", \"The range of HD chain indexes to import (either end or [begin,end])\"},\n                 },\n                 RPCResult{\n                     \"[{ \\\"success\\\": true }\"\n@@ -230,31 +236,43 @@ UniValue signerfetchkeys(const JSONRPCRequest& request)\n         change_descriptors.push_back(ParseDescriptor(desc, true, true));\n     }\n \n+    uint64_t keypool_target_size = 0;\n+    keypool_target_size = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+    int64_t range_begin = 0;\n+    int64_t range_end = 0;\n+    if (request.params.size() >= 3 && !request.params[2].isNull()) {\n+        std::tie(range_begin, range_end) = ParseDescriptorRange(request.params[2]);\n+    } else {\n+        range_end = keypool_target_size - 1;\n+    }\n+    UniValue range(UniValue::VARR);\n+    range.push_back(range_begin);\n+    range.push_back(range_end);\n+\n     // Use importmulti to process the descriptors:\n     // TODO: extract reusable non-RPC code from importmulti\n     UniValue importdata(UniValue::VARR);\n \n-    uint64_t keypool_target_size = 0;\n-    keypool_target_size = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n-\n     if (keypool_target_size == 0) throw JSONRPCError(RPC_WALLET_ERROR, \"-keypool must be > 0\");\n \n     UniValue receive_key_data(UniValue::VOBJ);\n \n-    // Pick receive descriptor based on address_type\n-    // TODO: after #15567, remove desc_prefix stuff and use desc->GetAddressType()\n-    std::string desc_prefix = \"\";\n+    // Pick receive descriptor based on -addresstype\n+    AddressType address_type;\n+    bool receive_segwit = false;\n     switch (pwallet->m_default_address_type) {\n-    case OutputType::LEGACY: {\n-        desc_prefix = \"pkh(\";\n+        case OutputType::LEGACY: {\n+        address_type = AddressType::BASE58;\n         break;\n     }\n     case OutputType::P2SH_SEGWIT: {\n-        desc_prefix = \"sh(wpkh(\";\n+        address_type = AddressType::BASE58;\n+        receive_segwit = true;\n         break;\n     }\n     case OutputType::BECH32: {\n-        desc_prefix = \"wpkh(\";\n+        address_type = AddressType::BECH32;\n+        receive_segwit = true;\n         break;\n     }\n     default:\n@@ -263,7 +281,7 @@ UniValue signerfetchkeys(const JSONRPCRequest& request)\n \n     std::unique_ptr<Descriptor> match_desc;\n     for (auto&& desc : receive_descriptors) {\n-        if (desc->ToString().find(desc_prefix) == 0) {\n+        if (desc->GetAddressType() == address_type && desc->IsSegWit() == receive_segwit) {\n             match_desc = std::move(desc);\n             break;\n         }\n@@ -272,33 +290,31 @@ UniValue signerfetchkeys(const JSONRPCRequest& request)\n     if (!match_desc) throw JSONRPCError(RPC_WALLET_ERROR, \"No descriptor found for wallet address type\");\n     receive_key_data.pushKV(\"desc\", match_desc->ToString());\n \n-    UniValue receive_range(UniValue::VARR);\n-    // TODO: base range start and end on what's currently in the keypool\n-    receive_range.push_back(0);\n-    receive_range.push_back(keypool_target_size - 1);\n-    receive_key_data.pushKV(\"range\", receive_range);\n+    receive_key_data.pushKV(\"range\", range);\n     receive_key_data.pushKV(\"internal\", false);\n     receive_key_data.pushKV(\"keypool\", true);\n     receive_key_data.pushKV(\"watchonly\", true);\n     importdata.push_back(receive_key_data);\n \n     UniValue change_key_data(UniValue::VOBJ);\n \n-    // Pick change descriptor based on address_type\n-    const OutputType change_type = pwallet->m_default_change_type == OutputType::CHANGE_AUTO ? pwallet->m_default_address_type : pwallet->m_default_change_type;\n-\n-    // TODO: after #15567, remove desc_prefix stuff and use desc->GetAddressType()\n-    switch (change_type) {\n-    case OutputType::LEGACY: {\n-        desc_prefix = \"pkh(\";\n+    // Pick receive descriptor based on -changetype\n+    const OutputType default_change_type = pwallet->m_default_change_type == OutputType::CHANGE_AUTO ? pwallet->m_default_address_type : pwallet->m_default_change_type;\n+    AddressType change_type;\n+    bool change_segwit = false;\n+    switch (default_change_type) {\n+        case OutputType::LEGACY: {\n+        change_type = AddressType::BASE58;\n         break;\n     }\n     case OutputType::P2SH_SEGWIT: {\n-        desc_prefix = \"sh(wpkh(\";\n+        change_type = AddressType::BASE58;\n+        change_segwit = true;\n         break;\n     }\n     case OutputType::BECH32: {\n-        desc_prefix = \"wpkh(\";\n+        change_type = AddressType::BECH32;\n+        change_segwit = true;\n         break;\n     }\n     default:\n@@ -307,7 +323,7 @@ UniValue signerfetchkeys(const JSONRPCRequest& request)\n \n     match_desc.reset(nullptr);\n     for (auto&& desc : change_descriptors) {\n-        if (desc->ToString().find(desc_prefix) == 0) {\n+        if (desc->GetAddressType() == change_type && desc->IsSegWit() == change_segwit) {\n             match_desc = std::move(desc);\n             break;\n         }\n@@ -316,11 +332,7 @@ UniValue signerfetchkeys(const JSONRPCRequest& request)\n     if (!match_desc) throw JSONRPCError(RPC_WALLET_ERROR, \"No descriptor found for wallet change address type\");\n     change_key_data.pushKV(\"desc\", match_desc->ToString());\n \n-    UniValue change_range(UniValue::VARR);\n-    // TODO: base range start and end on what's currently in the keypool\n-    change_range.push_back(0);\n-    change_range.push_back(keypool_target_size - 1);\n-    change_key_data.pushKV(\"range\", change_range);\n+    change_key_data.pushKV(\"range\", range);\n     change_key_data.pushKV(\"internal\", true);\n     change_key_data.pushKV(\"keypool\", true);\n     change_key_data.pushKV(\"watchonly\", true);\n@@ -349,6 +361,70 @@ UniValue signerfetchkeys(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signerprocesspsbt(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerprocesspsbt\",\n+                \"\\nSign PSBT inputs using external signer\\n\"\n+                \"that we can sign for.\" +\n+                    HelpRequiringPassphrase(pwallet) + \"\\n\",\n+                {\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, /* default_val */ \"\", \"The transaction base64 string\"},\n+                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"master key fingerprint of signer\"},\n+                },\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded network transaction, if complete\\n\"\n+                    \"  \\\"psbt\\\" : \\\"value\\\",          (string) The base64-encoded partially signed transaction\\n\"\n+                    \"  \\\"complete\\\" : true|false,     (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  ]\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"signerprocesspsbt\", \"\\\"psbt\\\"\")\n+                }\n+            }.ToString()\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 1, pwallet);\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"PSBT decode failed %s\", error));\n+    }\n+\n+    if( !signer->signTransaction(psbtx, error)) throw JSONRPCError(RPC_WALLET_ERROR, error);\n+\n+    CMutableTransaction mtx;\n+    bool complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+    CDataStream ssPsbtx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssPsbtx << psbtx;\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (complete) {\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        std::string tx_hex;\n+        ssTx << mtx;\n+        tx_hex = HexStr(ssTx.str());\n+        result.pushKV(\"hex\", tx_hex);\n+    }\n+    result.pushKV(\"psbt\", EncodeBase64(ssPsbtx.str()));\n+    result.pushKV(\"complete\", complete);\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n@@ -357,6 +433,7 @@ static const CRPCCommand commands[] =\n     { \"signer\",             \"signerdissociate\",                 &signerdissociate,              {\"fingerprint\"} },\n     { \"signer\",             \"signerdisplayaddress\",             &signerdisplayaddress,          {\"address\", \"fingerprint\"} },\n     { \"signer\",             \"signerfetchkeys\",                  &signerfetchkeys,               {\"account\", \"fingerprint\"} },\n+    { \"signer\",             \"signerprocesspsbt\",                &signerprocesspsbt,             {\"psbt\", \"fingerprint\"} },\n };\n // clang-format on\n "
      },
      {
        "sha": "555971d91a6b76a45d03603d3ba966356c16ca14",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
        "patch": "@@ -49,8 +49,22 @@ def displayaddress(args):\n \n     return sys.stdout.write(json.dumps(None))\n \n+def signtx(args):\n+    f = open(os.path.join(os.getcwd(), \"mock_psbt\"), \"r\")\n+    mock_psbt = f.read()\n+    f.close()\n+\n+    if args.fingerprint == \"00000001\" :\n+        sys.stdout.write(json.dumps({\n+            \"psbt\": mock_psbt,\n+            \"complete\": True\n+        }))\n+    else:\n+        sys.stdout.write(json.dumps({\"psbt\": args.psbt}))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n parser.add_argument('--fingerprint')\n+parser.add_argument('--stdin', action='store_true')\n parser.add_argument('--testnet', action='store_true')\n subparsers = parser.add_subparsers()\n \n@@ -65,10 +79,20 @@ def displayaddress(args):\n parser_displayaddress.add_argument('--desc', metavar='desc')\n parser_displayaddress.set_defaults(func=displayaddress)\n \n+parser_signtx = subparsers.add_parser('signtx')\n+parser_signtx.add_argument('psbt', metavar='psbt')\n+\n+parser_signtx.set_defaults(func=signtx)\n+\n if len(sys.argv) == 1:\n   args = parser.parse_args(['-h'])\n   exit()\n \n+if not sys.stdin.isatty():\n+    buffer = sys.stdin.read()\n+    if buffer and buffer.rstrip() != \"\":\n+       sys.argv.extend(buffer.rstrip().split(\" \"))\n+\n args = parser.parse_args()\n \n perform_pre_checks()"
      },
      {
        "sha": "2ff1e286ead178431bd188df6b7e62c59973463b",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 110,
        "deletions": 7,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
        "patch": "@@ -12,7 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_rpc_error,\n+    assert_raises_rpc_error\n )\n \n \n@@ -29,9 +29,9 @@ def set_test_params(self):\n \n         self.extra_args = [\n             [],\n-            ['-signer=%s' % self.mock_signer_path() , '-addresstype=bech32'],\n-            ['-signer=%s' % self.mock_signer_path(), '-addresstype=p2sh-segwit'],\n-            ['-signer=%s' % self.mock_signer_path(), '-addresstype=legacy'],\n+            ['-signer=%s' % self.mock_signer_path() , '-addresstype=bech32', '-keypool=10'],\n+            ['-signer=%s' % self.mock_signer_path(), '-addresstype=p2sh-segwit', '-keypool=10'],\n+            ['-signer=%s' % self.mock_signer_path(), '-addresstype=legacy', '-keypool=10'],\n             ['-signer=%s' % \"fake.py\"],\n         ]\n \n@@ -85,7 +85,7 @@ def run_test(self):\n \n         result = hww1.signerfetchkeys(0, \"00000001\")\n         assert_equal(result, [{'success': True}, {'success': True}])\n-        assert_equal(hww1.getwalletinfo()[\"keypoolsize\"], 1)\n+        assert_equal(hww1.getwalletinfo()[\"keypoolsize\"], 10)\n \n         # Handle error thrown by script\n         self.set_mock_result(self.nodes[1], \"2\")\n@@ -106,7 +106,7 @@ def run_test(self):\n \n         result = hww2.signerfetchkeys(0, \"00000001\")\n         assert_equal(result, [{'success': True}, {'success': True}])\n-        assert_equal(hww2.getwalletinfo()[\"keypoolsize\"], 1)\n+        assert_equal(hww2.getwalletinfo()[\"keypoolsize\"], 10)\n \n         address2 = hww2.getnewaddress()\n         assert_equal(address2, \"2N2gQKzjUe47gM8p1JZxaAkTcoHPXV6YyVp\")\n@@ -115,12 +115,22 @@ def run_test(self):\n         assert_equal(address_info['ismine'], False)\n         assert_equal(address_info['hdkeypath'], \"m/49'/1'/0'/0/0\")\n \n+        # signerfetchkeys range argument:\n+        assert_equal(hww2.getwalletinfo()[\"keypoolsize\"], 9)\n+        for _ in range(9):\n+            hww2.getnewaddress()\n+        result = hww2.signerfetchkeys(0, \"00000001\", [10,19])\n+        assert_equal(hww2.getwalletinfo()[\"keypoolsize\"], 10)\n+\n+        address_info = hww2.getaddressinfo(hww2.getnewaddress())\n+        assert_equal(address_info['hdkeypath'], \"m/49'/1'/0'/0/10\")\n+\n         assert_raises_rpc_error(-4, \"Multiple signers found, please specify which to use\", hww3.signerfetchkeys)\n         hww3.signerdissociate(\"00000002\")\n         hww3.signerfetchkeys()\n \n         assert_equal(result, [{'success': True}, {'success': True}])\n-        assert_equal(hww3.getwalletinfo()[\"keypoolsize\"], 1)\n+        assert_equal(hww3.getwalletinfo()[\"keypoolsize\"], 10)\n \n         address3 = hww3.getnewaddress(\"00000001\")\n         assert_equal(address3, \"n1LKejAadN6hg2FrBXoU1KrwX4uK16mco9\")\n@@ -140,5 +150,98 @@ def run_test(self):\n         )\n         self.clear_mock_result(self.nodes[3])\n \n+        self.log.info('Prepare mock PSBT')\n+        self.nodes[0].sendtoaddress(address1, 1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # Create mock PSBT for testing signerprocesspsbt and signersend.\n+\n+        # Load private key into wallet to generate a signed PSBT for the mock\n+        self.nodes[1].createwallet(wallet_name=\"mock\", disable_private_keys=False, blank=True)\n+        mock_wallet = self.nodes[1].get_wallet_rpc(\"mock\")\n+        assert mock_wallet.getwalletinfo()['private_keys_enabled']\n+\n+        result = mock_wallet.importmulti([{\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#rweraev0\",\n+            \"timestamp\": \"now\",\n+            \"range\": [0,1],\n+            \"internal\": False,\n+            \"keypool\": False\n+        },\n+        {\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/0)#0fe3a06x\",\n+            \"timestamp\": \"now\",\n+            \"internal\": True,\n+            \"keypool\": False\n+        }])\n+        assert_equal(result[0], {'success': True})\n+        assert_equal(result[1], {'success': True})\n+        assert_equal(mock_wallet.getwalletinfo()[\"txcount\"], 1)\n+        assert_equal(mock_wallet.getwalletinfo()[\"keypoolsize\"], 0)\n+        change_address = mock_wallet.deriveaddresses(\"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/0)#0fe3a06x\")[0]\n+        dest = self.nodes[0].getnewaddress(address_type='bech32')\n+        mock_psbt = mock_wallet.walletcreatefundedpsbt([], {dest:0.5}, 0, {\"includeWatching\": True, \"changeAddress\": change_address}, True)['psbt']\n+        mock_psbt_signed = mock_wallet.walletprocesspsbt(psbt=mock_psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n+        mock_psbt_final = mock_wallet.finalizepsbt(mock_psbt_signed[\"psbt\"])\n+        mock_tx = mock_psbt_final[\"hex\"]\n+        assert(mock_wallet.testmempoolaccept([mock_tx])[0][\"allowed\"])\n+\n+        # Create two new wallets and populate with specific public keys, in order\n+        # to work with the mock signed PSBT.\n+        self.nodes[1].createwallet(wallet_name=\"hww4\", disable_private_keys=True)\n+        hww4 = self.nodes[1].get_wallet_rpc(\"hww4\")\n+\n+        self.nodes[1].createwallet(wallet_name=\"hww5\", disable_private_keys=True)\n+        hww5 = self.nodes[1].get_wallet_rpc(\"hww5\")\n+\n+        importmulti = [{\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/0/*)#x30uthjs\",\n+            \"timestamp\": \"now\",\n+            \"range\": [0, 1],\n+            \"internal\": False,\n+            \"keypool\": True,\n+            \"watchonly\": True\n+        },\n+        {\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/0)#2k0wtpye\",\n+            \"timestamp\": \"now\",\n+            \"internal\": True,\n+            \"keypool\": True,\n+            \"watchonly\": True\n+        }]\n+\n+        result = hww4.importmulti(importmulti)\n+        assert_equal(result[0], {'success': True})\n+        assert_equal(result[1], {'success': True})\n+        assert_equal(hww4.getwalletinfo()[\"txcount\"], 1)\n+        assert_equal(hww4.getwalletinfo()[\"keypoolsize\"], 1)\n+\n+        result = hww5.importmulti(importmulti)\n+\n+        assert(hww4.testmempoolaccept([mock_tx])[0][\"allowed\"])\n+\n+        f = open(os.path.join(self.nodes[1].cwd, \"mock_psbt\"), \"w\")\n+        f.write(mock_psbt_signed[\"psbt\"])\n+        f.close()\n+\n+        self.log.info('Test signerprocesspsbt PSBT')\n+\n+        hww4.enumeratesigners()\n+        psbt_orig = hww4.walletcreatefundedpsbt([], {dest:0.5}, 0, {\"includeWatching\": True}, True)['psbt']\n+        psbt_processed = hww4.signerprocesspsbt(psbt_orig, \"00000001\")\n+        assert_equal(psbt_processed['complete'], True)\n+        psbt_final = hww4.finalizepsbt(psbt_processed[\"psbt\"])\n+        tx = psbt_final[\"hex\"]\n+        assert_equal(tx, mock_tx)\n+        assert(hww4.testmempoolaccept([tx])[0][\"allowed\"])\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[4], \"2\")\n+        assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+            hww4.signerprocesspsbt, psbt_orig, \"00000001\"\n+        )\n+        self.clear_mock_result(self.nodes[4])\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "3ba77e95829e482f371a60207fef7978d03c4750",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmE3N2U5NTgyOWU0ODJmMzcxYTYwMjA3ZmVmNzk3OGQwM2M0NzUw",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-06-07T13:10:56Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:12Z"
      },
      "message": "[doc] add external-signer.md",
      "tree": {
        "sha": "93b45d8d3ead6660fed9866344458958555ca5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93b45d8d3ead6660fed9866344458958555ca5f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ba77e95829e482f371a60207fef7978d03c4750",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNTQACgkQV/+b28ww\nEAn9bxAAj0fo2DOce4x/mk/ZPDNOzG6aGR8UtqBeqL9Z/XpqsmaUdjJHLBYIv7wK\n2niR0x4oTsHoYHX+o2IgSn2hYZlHeFJahyu1x12Du000Uahz1Wfj4A5XEicJAy1S\nVF4uZJze+cZfQAZTOP0vAKvFbUMRYrfeBSfkl2GRaU7+cOXH9fPS3t3PIvyq72HU\ncd4bxRf9u55MlFR2YKOsfyULg8R3EksEICLOsLrJvKegUx3TV9KNB0wlx/iiKQZl\nVUPm226HBzAB9Y9Tap1NxOZDM/j2vhIHjUI4EhRCM6LoZ8JQDkFnnw4jliXf7Bpu\nl2GjIcU0RvO+Dg4PnLNrkm/seqk6dyYNu7oNisGsdi8SuQjGFGZfetIfDvrn95NZ\nKDpiQ9P5MTyUwu4qNsc2beI3mAhmsT9SsSi8hnZmpNUBWMpECeP2UUQRLwm+mEyy\nqlfN7APc3FaGR5vvaCDRM15D6CDzUP6u6WP1hufkCdOidCL58dsV5SNtCwMuB94i\nNShDw59KCIDNw9DtMltmKub8jwB1pXRQ+FNnI9/UUFgNJtz5MOklKbxHFDqUISiC\nbW+b5mz2Aivbrl8q+iu6a552QEQOo5gebYfGs63SMkzwN5o0UnPoPtv5ytkiGvyE\nskcHnJfQ0+JrUNsDws3LdilTVarTuySAxvrBHnhLO8Nyw34zvA0=\n=kmKq\n-----END PGP SIGNATURE-----",
        "payload": "tree 93b45d8d3ead6660fed9866344458958555ca5f9\nparent a12e9d899caa7ed47bfd7cfd154e10e30c4737c0\nauthor Sjors Provoost <sjors@sprovoost.nl> 1559913056 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816692 +0200\n\n[doc] add external-signer.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba77e95829e482f371a60207fef7978d03c4750",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba77e95829e482f371a60207fef7978d03c4750",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba77e95829e482f371a60207fef7978d03c4750/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a12e9d899caa7ed47bfd7cfd154e10e30c4737c0"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 189,
      "deletions": 0
    },
    "files": [
      {
        "sha": "013b5fb158bc7c02eae7a8291345655b8f0f3638",
        "filename": "doc/external-signer.md",
        "status": "added",
        "additions": 189,
        "deletions": 0,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba77e95829e482f371a60207fef7978d03c4750/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba77e95829e482f371a60207fef7978d03c4750/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=3ba77e95829e482f371a60207fef7978d03c4750",
        "patch": "@@ -0,0 +1,189 @@\n+# Support for signing transactions outside of Bitcoin Core\n+\n+Bitcoin Core can be launched with `-signer=<cmd>` where `<cmd>` is an external tool which can sign transactions and perform other functions. For example, it can be used to communicate with a hardware wallet.\n+\n+## Example usage\n+\n+The following example is based on the [HWI](https://github.com/bitcoin-core/HWI) tool. Although this tool is hosted under the Bitcoin Core Github organization and maintained by Bitcoin Core developers, it should be used with caution. It is considered experimental and has far less review than Bitcoin Core itself. Be particularly careful when running tools such as these on a computer with private keys on it.\n+\n+When using a hardware wallet, consult the manufacturer website for (alternative) software they recommend. As long as their software conforms to the standard below, it should be able to work with Bitcoin Core.\n+\n+Start Bitcoin Core:\n+\n+```sh\n+$ bitcoind -signer=../HWI/hwi.py\n+```\n+\n+### Device setup\n+\n+Follow the hardware manufacturers instructions for the initial device setup, as well as their instructions for creating a backup. Alternatively, for some devices, you can use the `setup`, `restore` and `backup` commands provided by [HWI](https://github.com/bitcoin-core/HWI).\n+\n+### Create wallet and import keys\n+\n+Create a watch-only wallet:\n+\n+```sh\n+$ bitcoin-cli createwallet true\n+\n+# A future PR could allow wallet specific signers:\n+# bitcoin-cli addsigner \"../HWI/hwi.py\"\n+```\n+\n+Get a list of signing devices / services:\n+\n+```\n+$ bitcoin-cli enumeratesigners\n+{\n+  \"signers\": [\n+    {\n+      \"fingerprint\": \"c8df832a\"\n+    }\n+]\n+```\n+\n+The master key fingerprint is used to identify a device.\n+\n+Import the public keys from the hardware device into the new wallet:\n+\n+```\n+$ bitcoin-cli -rpcwallet=<wallet> signerfetchkeys 00000000\n+```\n+\n+Replace `<wallet>` with the name of your new wallet. The fingerprint argument is optional; by default it will use the first available signer.\n+\n+### Verify an address\n+\n+Display an address on the device:\n+\n+```sh\n+$ bitcoin-cli -rpcwallet=<wallet> getnewaddress\n+$ bitcoin-cli -rpcwallet=<wallet> signerdisplayaddress <address>\n+```\n+\n+Replace `<address>` with the result of `getnewaddress`.\n+\n+### Spending\n+\n+In order to send coins you need to create and sign a [Partially Signed Bitcoin Transaction](psbt.md).\n+\n+```sh\n+$ bitcoin-cli -rpcwallet=<wallet> walletcreatefundedpsbt '[]' '[{\"<address>\": <amount>}]' 0 '{\"includeWatching\": true}' true\n+<unsigned_psbt>\n+$ bitcoin-cli -rpcwallet=<wallet> walletprocesspsbt <unsigned_psbt>\n+<tx> or <signed_psbt>\n+```\n+\n+This prompts your hardware wallet to sign, and fail if it's not connected. It then returns the transaction in hex format for you to broadcast.\n+\n+```sh\n+{\"complete\": true, \"hex\": <tx>}\n+$ bitcoin-cli sendrawtransaction <tx>\n+```\n+\n+Alternatively, if the transaction requires additional signatures, `walletprocesspsbt` will return a PSBT.\n+\n+## Signer API\n+\n+In order to be compatible with Bitcoin Core any signer command should conform to the specification below. This specification is subject to change. Ideally a BIP should propose a standard so that other wallets can also make use of it.\n+\n+Prerequisite knowledge:\n+* [Output Descriptors](descriptors.md)\n+* Partially Signed Bitcoin Transaction ([PSBT](psbt.md))\n+\n+### `enumerate` (required)\n+\n+Usage:\n+```\n+$ <cmd> enumerate\n+[\n+    {\n+        \"fingerprint\": \"00000000\"\n+    }\n+]\n+```\n+\n+The command MUST return an (empty) array with at least a `fingerprint` field.\n+\n+A future extension could add an optional return field with device capabilities. Perhaps a descriptor with wildcards. For example: `[\"pkh(\"44'/0'/$'/{0,1}/*\"), sh(wpkh(\"49'/0'/$'/{0,1}/*\")), wpkh(\"84'/0'/$'/{0,1}/*\")]`. This would indicate the device supports legacy, wrapped SegWit and native SegWit. In addition it restricts the derivation paths that can used for those, to maintain compatibility with other wallet software. It also indicates the device, or the driver, doesn't support multisig.\n+\n+A future extension could add an optional return field `reachable`, in case `<cmd>` knows a signer exists but can't currently reach it.\n+\n+### `signtransaction` (required)\n+\n+Usage:\n+```\n+$ <cmd> --fingerprint=<fingerprint> (--testnet) signtransaction <psbt>\n+base64_encode_signed_psbt\n+```\n+\n+The command returns a psbt with any signatures.\n+\n+The `psbt` SHOULD include bip32 derivations. The command SHOULD fail if none of the bip32 derivations match a key owned by the device.\n+\n+The command SHOULD fail if the user cancels (return code?).\n+\n+The command MAY complain if `--testnet` is set, but any of the BIP32 derivation paths contain a coin type other than `1h` (and vice versa).\n+\n+### `getdescriptors` (optional)\n+\n+Usage:\n+\n+```\n+$ <cmd> --fingerprint=<fingerprint> (--testnet) getdescriptors <account>\n+<xpub>\n+```\n+\n+Returns descriptors supported by the device. Example:\n+\n+```\n+$ <cmd> --fingerprint=00000000 --testnet getdescriptors\n+{\n+  \"receive\": [\n+    \"pkh([00000000/44h/0h/0h]xpub6C.../0/*)#fn95jwmg\",\n+    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../0/*))#j4r9hntt\",\n+    \"wpkh([00000000/84h/0h/0h]xpub6C.../0/*)#qw72dxa9\"\n+  ],\n+  \"internal\": [\n+    \"pkh([00000000/44h/0h/0h]xpub6C.../1/*)#c8q40mts\",\n+    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../1/*))#85dn0v75\",\n+    \"wpkh([00000000/84h/0h/0h]xpub6C..../1/*)#36mtsnda\"\n+  ]\n+}\n+```\n+\n+### `displayaddress` (optional)\n+\n+Usage:\n+```\n+<cmd> --fingerprint=<fingerprint> (--testnet) displayaddress --desc descriptor\n+```\n+\n+Example, display the first native SegWit receive address on Testnet:\n+\n+```\n+<cmd> --fingerprint=00000000 --testnet displayaddress --desc \"wpkh([00000000/84h/1h/0h]tpubDDUZ..../0/0)\"\n+```\n+\n+The command MUST be able to figure out the address type from the descriptor.\n+\n+If <descriptor> contains a master key fingerprint, the command MUST fail if it does not match the fingerprint known by the device.\n+\n+If <descriptor> contains an xpub, the command MUST fail if it does not match the xpub known by the device.\n+\n+The command MAY complain if `--testnet` is set, but the BIP32 coin type is not `1h` (and vice versa).\n+\n+## How Bitcoin Core uses the Signer API\n+\n+The `enumeratesigners` RPC simply calls `<cmd> enumerate`.\n+\n+The `signerfetchkeys (00000000)` RPC calls:\n+\n+* `<cmd> --fingerprint=00000000 getdescriptors 0`\n+\n+It then imports the right receive and change descriptor based on `-addresstype` and `-changetype`. With descriptor wallets (e.g. https://github.com/bitcoin/bitcoin/pull/15487) will allow importing descriptors for multiple address types.\n+\n+The descriptors are then expanded and added to the keypool, internally calling code from `importmulti`. The number of keys depends on the keypool size setting.\n+\n+The `displayaddress` RPC reuses some code from `getaddressinfo` on the provided address and obtains the inferred descriptor. It then calls `<cmd> --fingerprint=00000000 displayaddress --desc=<descriptor>`.\n+\n+`signerprocesspsbt` checks `inputs->bip32_derivs` to see if any inputs have the same `master_fingerprint` as the (global / wallet) signer. If so, it calls `<cmd> --fingerprint=00000000 signtransaction <psbt>`. It waits for the device to return a (partially) signed psbt, tries to finalize it and then returns either the PSBT or hex encode transaction."
      }
    ]
  },
  {
    "sha": "3be00f6139538c5f813c5b92bc6c30d5eca5e037",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmUwMGY2MTM5NTM4YzVmODEzYzViOTJiYzZjMzBkNWVjYTVlMDM3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-02T16:20:19Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:53Z"
      },
      "message": "[rpc] move DEFAULT_MAX_RAW_TX_FEE to util",
      "tree": {
        "sha": "36c1327e1fd51cb4a18e37b55c18c1c37ff98b43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36c1327e1fd51cb4a18e37b55c18c1c37ff98b43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3be00f6139538c5f813c5b92bc6c30d5eca5e037",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNV0ACgkQV/+b28ww\nEAkKUQ//aHLioIaj8kinyGWkvpA4Uo+/exQkFOOJJTa3orQWIYkB5kLU79FIQ5nX\n59k8W/fD06Z5romlScaO0WxampcAEChYx9CtEM36XTZQqcf3Ojh+Oa+wrol56SD8\nwZMV0qyQOoxDt58NTYpVxxxkv3g8CWk6m9J1aa9D6Z3G4vNv//aEDdBUIof6uBdX\nnVcuGE5afxE4e458oZ5G0tO/RrrAYcGp6wvccsrip+CWob9WHQxzxVL0hGBTX/AY\n7h5tGAlyGBjyttJHJWG4OsBBZ8yW5v9vpAdG5T3jtAin/gTLVeKXiQ6jgcHdbSTE\n6Xf8CC5uZFJtsAcrsGxpOPpGkrOoHYe8fqFqdBQ+wU0JL6hFjlDOfAQ+rij+LgcK\nil6ufNUtNy8PjduqbZE031kbnFuYQ0wYqDNe3VLag2um9dudb3LB6PWOTUwF++H3\n3ppI/a1HxIth2Np332r+QEk3FO1OvBUgJLSDMI5de1juktCN91gM+ql3nZVAlrFX\nsLdYxbdAElR1Apkz5TzWCfADLtahc2ycOxS/SBwqZD4bpWW1CPxpDbZTSJY7QZsW\nY/X8773MSn7UEWGVz/2cAzcfTw3jfvmT7R9mb7vPyjSA5/Ph2FiwVycbOVNCnLie\nC/+ApAt+911zavOs4AGpPuSoKdgg7/fIp25a0jey21F8G6akxwE=\n=OW+k\n-----END PGP SIGNATURE-----",
        "payload": "tree 36c1327e1fd51cb4a18e37b55c18c1c37ff98b43\nparent 3ba77e95829e482f371a60207fef7978d03c4750\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564762819 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816733 +0200\n\n[rpc] move DEFAULT_MAX_RAW_TX_FEE to util\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3be00f6139538c5f813c5b92bc6c30d5eca5e037",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3be00f6139538c5f813c5b92bc6c30d5eca5e037",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3be00f6139538c5f813c5b92bc6c30d5eca5e037/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ba77e95829e482f371a60207fef7978d03c4750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba77e95829e482f371a60207fef7978d03c4750",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba77e95829e482f371a60207fef7978d03c4750"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "645b14f23ba71bf60594c971cb5b1a090fa02ee9",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3be00f6139538c5f813c5b92bc6c30d5eca5e037/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3be00f6139538c5f813c5b92bc6c30d5eca5e037/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3be00f6139538c5f813c5b92bc6c30d5eca5e037",
        "patch": "@@ -37,12 +37,6 @@\n \n #include <univalue.h>\n \n-/** High fee for sendrawtransaction and testmempoolaccept.\n- * By default, transaction with a fee higher than this will be rejected by the\n- * RPCs. This can be overridden with the maxfeerate argument.\n- */\n-constexpr static CAmount DEFAULT_MAX_RAW_TX_FEE{COIN / 10};\n-\n static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex."
      },
      {
        "sha": "ec4f66c665b592ace24561bb3669c0ba069b5d9a",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3be00f6139538c5f813c5b92bc6c30d5eca5e037/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3be00f6139538c5f813c5b92bc6c30d5eca5e037/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=3be00f6139538c5f813c5b92bc6c30d5eca5e037",
        "patch": "@@ -25,6 +25,12 @@ class CPubKey;\n class CScript;\n struct InitInterfaces;\n \n+/** High fee for sendrawtransaction and testmempoolaccept.\n+ * By default, transaction with a fee higher than this will be rejected by the\n+ * RPCs. This can be overridden with the maxfeerate argument.\n+ */\n+constexpr static CAmount DEFAULT_MAX_RAW_TX_FEE{COIN / 10};\n+\n //! Pointers to interfaces that need to be accessible from RPC methods. Due to\n //! limitations of the RPC framework, there's currently no direct way to pass in\n //! state to RPC method implementations."
      }
    ]
  },
  {
    "sha": "ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDgwZTE4MTI2ZDQ0MmIzMmNmNWVjOTQyNjVmNTJmYmRkZDJiNmU2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-07-12T12:30:10Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:53Z"
      },
      "message": "[rpc] walletcreatefundedpsbt: don't automatically append inputs\n\nWhen the user doesn't specificy inputs, it makes sense to automatically select them. But when the user does specify inputs, we now fail if the amount is insufficient, unless addInputs is set to true.",
      "tree": {
        "sha": "91c0f767264d3b58497193300067803f7ef10f85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91c0f767264d3b58497193300067803f7ef10f85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNV0ACgkQV/+b28ww\nEAn23Q//SVcDBQrDpvYN6us4aAstw29c8trl0lfg5YB5l+Uc5oSjDfhAp3Gw107B\n8WFz5FQbqfVHjjL0jEWhypYl62G1Y0iIrkQtzU0G4aPT5Sv92cDDpsR3nBVwXVCj\njqa2TNqTsElQjrxevYfPCYo2yBCDDdF14fP+jLC+GqVyln8yDNHxwDOpeT8V/rgK\nZcUsEgZz4UJm5RZNR7mcvkak/QW2xp17V95dBSj9J8tmq8oDSoREngjyTiIas/0m\nvf7nPj22SPwymANmenSka0kKyblbA3nOcUEhmcKllsZSnLQbHnr0EbeF6jncLrId\nhyD674+9QGJeleAFBaEwT4xLaJJldLhRNEeyjBUSpTfyYgSM1RHQ27uixsw3srR9\noz3uKLiJ1iSiR0D/aSCAt40wSMNsRbGMhrc0mggr8RwB34QhdDMtY92n36T1IOdL\nFEAlBYC6lj+DEkV5LPDT1UNELAN6mVgXPkJ7H8Ftv8mnGRYsWJsIQS1yS+kZEg2c\n/CznoMR8LSGIAV69VdCcfB0WbBwTnVdzOf8gzda9U82zNf2b3UVjl966YgtmA8uX\nIC5j+QFXfXEVwYUHD90NklHN5umQXuSqe/1dDCvaricS9++Ox2IJuCLtwqxc6XUp\n6EdrNIRM6iO6uCgJbxEfmk9vEIcRDsH4GqHHGC3fh6lPCEJjLHA=\n=xJ6c\n-----END PGP SIGNATURE-----",
        "payload": "tree 91c0f767264d3b58497193300067803f7ef10f85\nparent 3be00f6139538c5f813c5b92bc6c30d5eca5e037\nauthor Sjors Provoost <sjors@sprovoost.nl> 1562934610 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816733 +0200\n\n[rpc] walletcreatefundedpsbt: don't automatically append inputs\n\nWhen the user doesn't specificy inputs, it makes sense to automatically select them. But when the user does specify inputs, we now fail if the amount is insufficient, unless addInputs is set to true.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3be00f6139538c5f813c5b92bc6c30d5eca5e037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3be00f6139538c5f813c5b92bc6c30d5eca5e037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3be00f6139538c5f813c5b92bc6c30d5eca5e037"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 44,
      "deletions": 14
    },
    "files": [
      {
        "sha": "26d899b1fa0839d444875f995f20cee47028880f",
        "filename": "doc/release-notes-16377.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/doc/release-notes-16377.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/doc/release-notes-16377.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16377.md?ref=ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "patch": "@@ -0,0 +1,6 @@\n+RPC changes\n+-----------\n+The `walletcreatefundedpsbt` RPC call will fail with\n+`Insufficient funds` when inputs are manually selected but are not enough to cover\n+the outputs and fee. Additional inputs can automatically be added through a\n+new `add_inputs` option."
      },
      {
        "sha": "ed0668bfb381a746dae40038eb5b8f934e565795",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "patch": "@@ -10,6 +10,7 @@ void CCoinControl::SetNull()\n {\n     destChange = CNoDestination();\n     m_change_type.reset();\n+    m_add_inputs = true;\n     fAllowOtherInputs = false;\n     fAllowWatchOnly = false;\n     m_avoid_partial_spends = gArgs.GetBoolArg(\"-avoidpartialspends\", DEFAULT_AVOIDPARTIALSPENDS);\n@@ -23,4 +24,3 @@ void CCoinControl::SetNull()\n     m_min_depth = DEFAULT_MIN_DEPTH;\n     m_max_depth = DEFAULT_MAX_DEPTH;\n }\n-"
      },
      {
        "sha": "62e2065c47534d7f37c5c7e89da15c3b0b50ddef",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "patch": "@@ -23,6 +23,8 @@ class CCoinControl\n     CTxDestination destChange;\n     //! Override the default change type if set, ignored if destChange is set\n     boost::optional<OutputType> m_change_type;\n+    //! If false, only selected inputs are used\n+    bool m_add_inputs;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which are solvable"
      },
      {
        "sha": "5d73fad8cfb6d2bb2de75e3017c59c423ed4b239",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "patch": "@@ -2967,13 +2967,12 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     return results;\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options)\n+void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    CCoinControl coinControl;\n     change_position = -1;\n     bool lockUnspents = false;\n     UniValue subtractFeeFromOutputs;\n@@ -2988,6 +2987,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         RPCTypeCheckArgument(options, UniValue::VOBJ);\n         RPCTypeCheckObj(options,\n             {\n+                {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n                 {\"changeAddress\", UniValueType(UniValue::VSTR)},\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n@@ -3001,6 +3001,10 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             },\n             true, true);\n \n+        if (options.exists(\"add_inputs\") ) {\n+            coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n+        }\n+\n         if (options.exists(\"changeAddress\")) {\n             CTxDestination dest = DecodeDestination(options[\"changeAddress\"].get_str());\n \n@@ -3170,7 +3174,8 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     CAmount fee;\n     int change_position;\n-    FundTransaction(pwallet, tx, fee, change_position, request.params[1]);\n+    CCoinControl coin_control;\n+    FundTransaction(pwallet, tx, fee, change_position, request.params[1], coin_control);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(tx)));\n@@ -4019,10 +4024,10 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"walletcreatefundedpsbt\",\n-                \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n+                \"\\nCreates and funds a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Leave empty to add inputs automatically. A json array of json objects\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -4053,6 +4058,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                     {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n+                            {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -4109,7 +4115,11 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         rbf = replaceable_arg.isTrue();\n     }\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n-    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3]);\n+    CCoinControl coin_control;\n+    // Automatically select coins, unless at least one is manually selected. Can\n+    // be overriden by options.add_inputs.\n+    coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3], coin_control);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);"
      },
      {
        "sha": "7cb4548f31b733a5d2e76993c67b2560b466c26b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "patch": "@@ -2523,6 +2523,11 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         }\n \n         for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+            // Only consider selected coins if add_inputs is false\n+            if (coinControl && !coinControl->m_add_inputs && !coinControl->IsSelected(COutPoint(entry.first, i))) {\n+                continue;\n+            }\n+\n             if (wtx.tx->vout[i].nValue < nMinimumAmount || wtx.tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n "
      },
      {
        "sha": "089ff2444d9981b20abccb9d1e4e754b40f8cef8",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed80e18126d442b32cf5ec94265f52fbddd2b6e6/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "patch": "@@ -79,6 +79,13 @@ def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']\n \n+        # If inputs are specified, do not automatically add more:\n+        utxo1 = self.nodes[0].listunspent()[0]\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].walletcreatefundedpsbt, [{\"txid\": utxo1['txid'], \"vout\": utxo1['vout']}], {self.nodes[2].getnewaddress():90})\n+\n+        psbtx1 = self.nodes[0].walletcreatefundedpsbt([{\"txid\": utxo1['txid'], \"vout\": utxo1['vout']}], {self.nodes[2].getnewaddress():90}, 0, {\"add_inputs\": True})['psbt']\n+        assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['tx']['vin']), 2)\n+\n         # Node 1 should not be able to add anything to it but still return the psbtx same as before\n         psbtx = self.nodes[1].walletprocesspsbt(psbtx1)['psbt']\n         assert_equal(psbtx1, psbtx)\n@@ -136,13 +143,13 @@ def run_test(self):\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n         # feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000):\n-        res = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 0.1})\n+        res = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_greater_than(res[\"fee\"], 0.05)\n         assert_greater_than(0.06, res[\"fee\"])\n \n         # feeRate of 10 BTC / KB produces a total fee well above -maxtxfee\n         # previously this was silently capped at -maxtxfee\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10})\n+        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10, \"add_inputs\": True})\n \n         # partially sign multisig things with node 1\n         psbtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], {self.nodes[1].getnewaddress():29.99})['psbt']\n@@ -212,31 +219,31 @@ def run_test(self):\n         # replaceable arg\n         block_height = self.nodes[0].getblockcount()\n         unspent = self.nodes[0].listunspent()[0]\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\": False}, False)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\": False, \"add_inputs\": True}, False)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert_greater_than(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" not in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n \n         # Same construction with only locktime set and RBF explicitly enabled\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {\"replaceable\": True}, True)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {\"replaceable\": True, \"add_inputs\": True}, True)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n \n         # Same construction without optional arguments\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n             assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n \n         # Same construction without optional arguments, for a node with -walletrbf=0\n         unspent1 = self.nodes[1].listunspent()[0]\n-        psbtx_info = self.nodes[1].walletcreatefundedpsbt([{\"txid\":unspent1[\"txid\"], \"vout\":unspent1[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent1[\"amount\"]+1}], block_height)\n+        psbtx_info = self.nodes[1].walletcreatefundedpsbt([{\"txid\":unspent1[\"txid\"], \"vout\":unspent1[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent1[\"amount\"]+1}], block_height, {\"add_inputs\": True})\n         decoded_psbt = self.nodes[1].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n             assert_greater_than(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n@@ -246,7 +253,7 @@ def run_test(self):\n         self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"changeAddress\":self.nodes[1].getnewaddress()}, False)\n \n         # Regression test for 14473 (mishandling of already-signed witness transaction):\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], 0, {\"add_inputs\": True})\n         complete_psbt = self.nodes[0].walletprocesspsbt(psbtx_info[\"psbt\"])\n         double_processed_psbt = self.nodes[0].walletprocesspsbt(complete_psbt[\"psbt\"])\n         assert_equal(complete_psbt, double_processed_psbt)"
      }
    ]
  },
  {
    "sha": "5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2VjYzE5YWM0ZTllODBlMGYwODgxZmY5N2UyYWYyMzJiNWRjNzNl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:30Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:53Z"
      },
      "message": "[rpc] signer: add signersend",
      "tree": {
        "sha": "27163e9b208efaed176245df6a5403161e9fce9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27163e9b208efaed176245df6a5403161e9fce9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNV0ACgkQV/+b28ww\nEAl+mA/+LE3hTPqil+dLbyeT02AgGvGxoRznR/PgfJZrFQYuPM4Ip7PyjDIxSuzU\n/pgW996ss82KRrW558m5M2dS3SkUHqVcU3aYAHMeEK/BfbVs3CaA/23rFKc+OlLe\nA0okMtYLX4l5dXlfZUr9C9LEP+gvYFSgqj+AmD+8fMdmXn2BssrskoxKaM0mYovW\noe6I++6w94EK7TJp9aiMI/1TvoRL4cLCHT3F7NECsT5nPu32rTVpnrRGl3fTT28Z\nuHZMzypDwDFdxPr5rVbiqGKdfNiZey+WIl5ou6tE8bnoJ7w8HZ+yxdXhU2uzpvT+\nvsf5dGMc2ETgPKRUfZ2U20ul7kJj+qWJf79bFSQBAAZ/ifC9IEiII8Ma25ucuVVp\nMauTxGRCyedWO/oCK56rzXQaI52BsMCX/PH2bxc27pvmFcqqLzU4dGzHWrYlUGaQ\n5ZpinpBqt/TkyNmu98lRoNYgouUcyi1cS6MIhP3WxNwI+kiCiSAyR+3qnVBA0foz\nQJLxS0UBnL8a6v/XmFVojLb5oiE05qGfbRIgHalN/PGgK0f+mEU+IQJVyQ9UOtuL\nk2E3c2Z49vhtKr9JQ43+e4grjw+WiKwvHCkYPz/PLRme1gHjIYUn3WcwRFo0m1zN\nuxKdJ72m+LiWjadsNVgralMxuf7VA5OMZvCXy83IOWoY5mjeFRI=\n=DCjy\n-----END PGP SIGNATURE-----",
        "payload": "tree 27163e9b208efaed176245df6a5403161e9fce9d\nparent ed80e18126d442b32cf5ec94265f52fbddd2b6e6\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231670 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816733 +0200\n\n[rpc] signer: add signersend\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed80e18126d442b32cf5ec94265f52fbddd2b6e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed80e18126d442b32cf5ec94265f52fbddd2b6e6"
      }
    ],
    "stats": {
      "total": 226,
      "additions": 214,
      "deletions": 12
    },
    "files": [
      {
        "sha": "6dbbd2a208c9ee9f9ca3b0576508822d2f5b6885",
        "filename": "doc/external-signer.md",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
        "patch": "@@ -62,9 +62,9 @@ $ bitcoin-cli -rpcwallet=<wallet> signerdisplayaddress <address>\n \n Replace `<address>` with the result of `getnewaddress`.\n \n-### Spending\n+### Spending the hard way\n \n-In order to send coins you need to create and sign a [Partially Signed Bitcoin Transaction](psbt.md).\n+In order to send coins you need to create and sign a [Partially Signed Bitcoin Transaction](psbt.md), or use the convenience method `signersend` explained in the next section.\n \n ```sh\n $ bitcoin-cli -rpcwallet=<wallet> walletcreatefundedpsbt '[]' '[{\"<address>\": <amount>}]' 0 '{\"includeWatching\": true}' true\n@@ -82,6 +82,18 @@ $ bitcoin-cli sendrawtransaction <tx>\n \n Alternatively, if the transaction requires additional signatures, `walletprocesspsbt` will return a PSBT.\n \n+### Spending the easy way\n+\n+Plug in your device.\n+\n+```sh\n+$ bitcoin-cli -rpcwallet=<wallet> signerspend '[]' '[{\"<address>\": <amount>}]'\n+```\n+\n+Confirm the transaction on your device.\n+\n+If successful, the transaction is broadcast. If not, e.g. if it requires additional signatures, a PSBT is returned.\n+\n ## Signer API\n \n In order to be compatible with Bitcoin Core any signer command should conform to the specification below. This specification is subject to change. Ideally a BIP should propose a standard so that other wallets can also make use of it."
      },
      {
        "sha": "17a3102dcf667672e0d585b04312c737c9721a57",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
        "patch": "@@ -110,6 +110,10 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n     { \"signerfetchkeys\", 0, \"account\" },\n+    { \"signersend\", 0, \"inputs\" },\n+    { \"signersend\", 1, \"outputs\" },\n+    { \"signersend\", 2, \"locktime\" },\n+    { \"signersend\", 3, \"options\" },\n     { \"createpsbt\", 0, \"inputs\" },\n     { \"createpsbt\", 1, \"outputs\" },\n     { \"createpsbt\", 2, \"locktime\" },"
      },
      {
        "sha": "125e9230c5c8dbc75fd2ed689aa9a7338a8c0907",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 177,
        "deletions": 10,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
        "patch": "@@ -5,18 +5,34 @@\n #include <chainparamsbase.h>\n #include <core_io.h>\n #include <key_io.h>\n+#include <node/transaction.h>\n #include <psbt.h>\n+#include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <util/strencodings.h>\n #include <validation.h>\n+#include <wallet/psbtwallet.h>\n #include <wallet/rpcdump.h>\n #include <wallet/rpcsigner.h>\n #include <wallet/rpcwallet.h>\n \n #ifdef HAVE_BOOST_PROCESS\n \n+UniValue getsigners(CWallet *pwallet) {\n+    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+    std::string chain = gArgs.GetChainName();\n+    const bool mainnet = chain == CBaseChainParams::MAIN;\n+    UniValue signers;\n+    try {\n+        return ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n+    } catch (const ExternalSignerException& e) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+    }\n+}\n+\n static UniValue enumeratesigners(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -47,16 +63,7 @@ static UniValue enumeratesigners(const JSONRPCRequest& request)\n         );\n     }\n \n-    const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n-    if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n-    std::string chain = gArgs.GetChainName();\n-    const bool mainnet = chain == CBaseChainParams::MAIN;\n-    UniValue signers;\n-    try {\n-        signers = ExternalSigner::Enumerate(command, pwallet->m_external_signers, mainnet);\n-    } catch (const ExternalSignerException& e) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n-    }\n+    UniValue signers = getsigners(pwallet);\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"signers\", signers);\n     return result;\n@@ -425,6 +432,165 @@ UniValue signerprocesspsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signersend(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signersend\",\n+                \"Creates, funds and broadcasts a transaction.\\n\",\n+                {\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                                },\n+                            },\n+                        },\n+                        },\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                            \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+                            \"                             accepted as second parameter.\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                                },\n+                                },\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                },\n+                            },\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        {\n+                            {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                            \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                            \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                            \"                              If no outputs are specified here, the sender pays the fee.\",\n+                                {\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                                },\n+                            },\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            \"         \\\"UNSET\\\"\\n\"\n+                            \"         \\\"ECONOMICAL\\\"\\n\"\n+                            \"         \\\"CONSERVATIVE\\\"\"},\n+                        },\n+                        \"options\"},\n+                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"master key fingerprint of signer\"}\n+                },\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n+                    \"  \\\"fee\\\":       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n+                    \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\n+                    \"\\nSend 0.1 BTC\\n\"\n+                    + HelpExampleCli(\"signersend\", \"\\\"[]\\\" \\\"[{\\\\\\\"bc1qkallence7tjawwvy0dwt4twc62qjgaw8f4vlhyd006d99f09\\\\\\\": 0.1}]\\\"\")\n+                }\n+            }.ToString()\n+        );\n+\n+    RPCTypeCheck(request.params, {\n+        UniValue::VARR,\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VNUM,\n+        UniValue::VOBJ\n+        }, true\n+    );\n+\n+    // No need to call enumerate first:\n+    if (pwallet->m_external_signers.empty()) {\n+        getsigners(pwallet);\n+    }\n+\n+    CAmount fee;\n+    int change_position;\n+    bool rbf = pwallet->m_signal_rbf;\n+    if (!request.params[3][\"replaceable\"].isNull()) {\n+        rbf = request.params[3][\"replaceable\"].isTrue();\n+    }\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+\n+    CCoinControl coin_control;\n+    coin_control.fAllowWatchOnly = true;\n+    // Automatically select coins, unless at least one is manually selected. Can\n+    // be overriden by options.add_inputs.\n+    coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3], coin_control);\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // Fill transaction with out data but don't sign\n+    bool complete_dummy;\n+\n+    TransactionError fill_psbt_error = FillPSBT(pwallet, psbtx, complete_dummy, 1, false, true);\n+    if (fill_psbt_error != TransactionError::OK) {\n+        throw JSONRPCTransactionError(fill_psbt_error);\n+    }\n+\n+    // TODO: if more than one signer is known and no fingerprint argument is present,\n+    //       loop through inputs to find a matching fingerprint.\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 4, pwallet);\n+\n+    // Send to signer and process result\n+    std::string error;\n+    if( !signer->signTransaction(psbtx, error)) throw JSONRPCError(RPC_WALLET_ERROR, error);\n+\n+    CMutableTransaction mtx;\n+    bool complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    if (complete) {\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        std::string err_string;\n+        UniValue err;\n+        bool success = pwallet->chain().broadcastTransaction(tx, err_string, DEFAULT_MAX_RAW_TX_FEE, /*relay*/ true);\n+        if (!success)throw err_string;\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+    } else {\n+        // Add PSBT to result so the user can pass it on\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    result.pushKV(\"fee\", ValueFromAmount(fee));\n+    result.pushKV(\"changepos\", change_position);\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n@@ -434,6 +600,7 @@ static const CRPCCommand commands[] =\n     { \"signer\",             \"signerdisplayaddress\",             &signerdisplayaddress,          {\"address\", \"fingerprint\"} },\n     { \"signer\",             \"signerfetchkeys\",                  &signerfetchkeys,               {\"account\", \"fingerprint\"} },\n     { \"signer\",             \"signerprocesspsbt\",                &signerprocesspsbt,             {\"psbt\", \"fingerprint\"} },\n+    { \"signer\",             \"signersend\",                       &signersend,                    {\"inputs\",\"outputs\",\"locktime\",\"options\"} },\n };\n // clang-format on\n "
      },
      {
        "sha": "285c0471d5399cf77d618339bcc23b17d8d4e22d",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
        "patch": "@@ -37,4 +37,5 @@ bool EnsureWalletIsAvailable(const CWallet*, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n+void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "dd7186fe96ad2ee87edca69c3fa7a428b5311bb8",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
        "patch": "@@ -9,6 +9,8 @@\n import os\n import platform\n \n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -218,6 +220,10 @@ def run_test(self):\n         assert_equal(hww4.getwalletinfo()[\"keypoolsize\"], 1)\n \n         result = hww5.importmulti(importmulti)\n+        assert_equal(result[0], {'success': True})\n+        assert_equal(result[1], {'success': True})\n+        assert_equal(hww5.getwalletinfo()[\"txcount\"], 1)\n+        assert_equal(hww5.getwalletinfo()[\"keypoolsize\"], 1)\n \n         assert(hww4.testmempoolaccept([mock_tx])[0][\"allowed\"])\n \n@@ -236,6 +242,18 @@ def run_test(self):\n         assert_equal(tx, mock_tx)\n         assert(hww4.testmempoolaccept([tx])[0][\"allowed\"])\n \n+        self.log.info('Test signersend')\n+\n+        res = hww5.signersend([], {dest:0.5}, 0, None, \"00000001\")\n+        assert_equal(res['complete'], True)\n+        txid = res[\"txid\"]\n+\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        node0_tx = self.nodes[0].gettransaction(txid)\n+        assert_equal(node0_tx['hex'], tx)\n+        assert_equal(self.nodes[0].getreceivedbyaddress(dest), Decimal(\"0.5\"))\n+\n         # Handle error thrown by script\n         self.set_mock_result(self.nodes[4], \"2\")\n         assert_raises_rpc_error(-1, 'Unable to parse JSON',"
      }
    ]
  },
  {
    "sha": "83fe48fd5dae1dc1e7e4adb114c016fd01edfdef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2ZlNDhmZDVkYWUxZGMxZTdlNGFkYjExNGMwMTZmZDAxZWRmZGVm",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-24T18:59:58Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-03T07:18:53Z"
      },
      "message": "[rpc] signerbumpfee",
      "tree": {
        "sha": "8f050753fdeca319df7b3c15de3554692949822b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f050753fdeca319df7b3c15de3554692949822b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl1FNV0ACgkQV/+b28ww\nEAn8vw//WzxxgLGYtUYkNfe/s92sghrJ8qSVngGmizPIKnU3V0WqsDQUQzElSItN\nteuo8wosoHkr4LqIVdSqJKDPYutfTlrcg7LTFnS9aKE5HVzgUJa0H0Kq4eeZmgPm\nulrQlCsvbktkYBVyjsWUcWlAWM2pDjugHKVKSmNHm82J88cAlbP6Rfd2Qx6bnIXT\n2Eu1t1J5PNzIBfvq4GVwaL2rvTpQ8UMnHZNTEodGV2tdQ+Ar/KZXIoSHB1VFdgsX\nZH/BkPqSvqBDSjCa00KeH8/YePd2QKLDfr+Zu4qgS6QS+ELiwCz/mnU6V/3vh7eS\nvaE2H+RKAkvo7EE0i2qja1zEy3+BGZoMDMPH9VKwvSDL066LL4rn24KSpxlc3IbK\nUbHLZkw1VxIrZykgEmipB56MjsDE7fRIIPf3tpbZpO/kAG7iEN+4kCnR72DRRSAm\nm/tKzgrm3KpP29wAbYFMAgkggTQjhFAWBx8EESPPeMgF4I4M0PCWbanH6jg+DMOF\nWjyfjTNe5HLUKlMVf1Ut83FtQkKAjmA1whl1HoFvznqg1IAxiiGdrpC+fRjVMCVE\nsDCbPdhFozw8ZsTiJlSO5wQAsbfSl0WooLeS2D8riGJ4848t0tqlNWwhRVEVgDTw\nYJqPu5EB6+OmHL8FSYplQ4MpnuidKB6Az9+oYf0kD7qDALwXx7E=\n=hDp+\n-----END PGP SIGNATURE-----",
        "payload": "tree 8f050753fdeca319df7b3c15de3554692949822b\nparent 5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556132398 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1564816733 +0200\n\n[rpc] signerbumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cecc19ac4e9e80e0f0881ff97e2af232b5dc73e"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 179,
      "deletions": 3
    },
    "files": [
      {
        "sha": "843ed1ba1708eb5bb6d1388df82862d45f801fdc",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=83fe48fd5dae1dc1e7e4adb114c016fd01edfdef",
        "patch": "@@ -109,6 +109,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n+    { \"signerbumpfee\", 1, \"options\" },\n     { \"signerfetchkeys\", 0, \"account\" },\n     { \"signersend\", 0, \"inputs\" },\n     { \"signersend\", 1, \"outputs\" },"
      },
      {
        "sha": "eb672d908273e28a0f3e6fa12386ffafa9f6f780",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=83fe48fd5dae1dc1e7e4adb114c016fd01edfdef",
        "patch": "@@ -48,7 +48,7 @@ static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chai\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_ALL)) {\n         errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n@@ -117,7 +117,7 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n     }\n \n     // calculate the old fee and fee-rate\n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    old_fee = wtx.GetDebit(ISMINE_ALL) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n     // future proof against changes to network wide policy for incremental relay\n@@ -233,7 +233,7 @@ Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCo\n     // Get the fee rate of the original transaction. This is calculated from\n     // the tx fee/vsize, so it may have been rounded down. Add 1 satoshi to the\n     // result.\n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    old_fee = wtx.GetDebit(ISMINE_ALL) - wtx.tx->GetValueOut();\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     // Feerate of thing we are bumping\n     CFeeRate feerate(old_fee, txSize);"
      },
      {
        "sha": "d98c22a10ef9c608a1921885539f0e6307717ecf",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83fe48fd5dae1dc1e7e4adb114c016fd01edfdef/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=83fe48fd5dae1dc1e7e4adb114c016fd01edfdef",
        "patch": "@@ -13,6 +13,10 @@\n #include <script/descriptor.h>\n #include <util/strencodings.h>\n #include <validation.h>\n+#include <util/fees.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/feebumper.h>\n #include <wallet/psbtwallet.h>\n #include <wallet/rpcdump.h>\n #include <wallet/rpcsigner.h>\n@@ -89,6 +93,176 @@ ExternalSigner *GetSignerForJSONRPCRequest(const JSONRPCRequest& request, int in\n     throw JSONRPCError(RPC_WALLET_ERROR, \"Signer fingerprint not found\");\n }\n \n+UniValue signerbumpfee(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"signerbumpfee\",\n+                \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                \"See bumpfee documentation for more details.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        {\n+                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable.\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+            \"         \\\"UNSET\\\"\\n\"\n+            \"         \\\"ECONOMICAL\\\"\\n\"\n+            \"         \\\"CONSERVATIVE\\\"\"},\n+                        },\n+                        \"options\"},\n+                    {\"fingerprint\", RPCArg::Type::STR, /* default_val */ \"\", \"master key fingerprint of signer\"},\n+                },\n+                RPCResult{\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n+            \"}\\n\"\n+                },\n+                RPCExamples{\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+                    HelpExampleCli(\"signerbumpfee\", \"<txid>\")\n+                },\n+            }.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n+\n+    CCoinControl coin_control;\n+    coin_control.fAllowWatchOnly = true;\n+    coin_control.m_signal_bip125_rbf = true;\n+    if (!request.params[1].isNull()) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"feeRate\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"feeRate\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and feeRate options should not both be set. Please provide either a confirmation target for fee estimation or an explicit fee rate for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"], pwallet->chain().estimateMaxBlocks());\n+        } else if (options.exists(\"feeRate\")) {\n+            coin_control.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            coin_control.fOverrideFeeRate = true;\n+        }\n+\n+        if (options.exists(\"replaceable\")) {\n+            coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n+        }\n+        if (options.exists(\"estimate_mode\")) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coin_control.m_fee_mode)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            }\n+        }\n+    }\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    auto locked_chain = pwallet->chain().lock();\n+    LOCK(pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+\n+    std::vector<std::string> errors;\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    feebumper::Result res;\n+    res = feebumper::CreateRateBumpTransaction(pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n+    if (res != feebumper::Result::OK) {\n+        switch(res) {\n+            case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errors[0]);\n+                break;\n+            case feebumper::Result::INVALID_REQUEST:\n+                throw JSONRPCError(RPC_INVALID_REQUEST, errors[0]);\n+                break;\n+            case feebumper::Result::INVALID_PARAMETER:\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, errors[0]);\n+                break;\n+            case feebumper::Result::WALLET_ERROR:\n+                throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n+                break;\n+            default:\n+                throw JSONRPCError(RPC_MISC_ERROR, errors[0]);\n+                break;\n+        }\n+    }\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(mtx);\n+\n+    // Fill transaction with out data but don't sign\n+    bool complete_dummy;\n+\n+    TransactionError fill_psbt_error = FillPSBT(pwallet, psbtx, complete_dummy, 1, false, true);\n+    if (fill_psbt_error != TransactionError::OK) {\n+        throw JSONRPCTransactionError(fill_psbt_error);\n+    }\n+\n+    // TODO: if more than one signer is known and no fingerprint argument is present,\n+    //       loop through inputs to find a matching fingerprint.\n+    ExternalSigner *signer = GetSignerForJSONRPCRequest(request, 2, pwallet);\n+\n+    // Send to signer and process result\n+    std::string error;\n+    if( !signer->signTransaction(psbtx, error)) throw JSONRPCError(RPC_WALLET_ERROR, error);\n+\n+    CMutableTransaction mtx_out;\n+    bool complete = FinalizeAndExtractPSBT(psbtx, mtx_out);\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    if (complete) {\n+        // CTransactionRef tx(MakeTransactionRef(std::move(mtx_out)));\n+        // commit the bumped transaction\n+        uint256 txid;\n+        if (feebumper::CommitTransaction(pwallet, hash, std::move(mtx_out), errors, txid) != feebumper::Result::OK) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n+        }\n+        result.pushKV(\"txid\", txid.GetHex());\n+    } else {\n+        // Add PSBT to result so the user can pass it on\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n+    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n+    result.pushKV(\"complete\", complete);\n+\n+    UniValue result_errors(UniValue::VARR);\n+    for (const std::string& error : errors) {\n+        result_errors.push_back(error);\n+    }\n+    result.pushKV(\"errors\", result_errors);\n+\n+    return result;\n+}\n+\n+\n UniValue signerdissociate(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -596,6 +770,7 @@ static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n     { \"signer\",             \"enumeratesigners\",                 &enumeratesigners,              {} },\n+    { \"signer\",             \"signerbumpfee\",                    &signerbumpfee,                 {\"txid\", \"options\", \"fingerprint\"} },\n     { \"signer\",             \"signerdissociate\",                 &signerdissociate,              {\"fingerprint\"} },\n     { \"signer\",             \"signerdisplayaddress\",             &signerdisplayaddress,          {\"address\", \"fingerprint\"} },\n     { \"signer\",             \"signerfetchkeys\",                  &signerfetchkeys,               {\"account\", \"fingerprint\"} },"
      }
    ]
  }
]