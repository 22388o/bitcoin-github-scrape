[
  {
    "sha": "31ba1af74a0aaec690a01ea061264a6d5039d885",
    "node_id": "C_kwDOABII59oAKDMxYmExYWY3NGEwYWFlYzY5MGEwMWVhMDYxMjY0YTZkNTAzOWQ4ODU",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-06T20:45:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-12-06T21:18:14Z"
      },
      "message": "Remove unused (and broken) functionality in SpanReader\n\nThis removes the ability to set an offset in the SpanReader constructor,\nas the current code is broken. All call sites use pos=0, so it is actually\nunused. If future call sites need it, SpanReader{a, b, c, d} is equivalent\nto SpanReader{a, b, c.subspan(d)}.\n\nIt also removes the ability to deserialize from SpanReader directly from\nthe constructor. This too is unused, and can be more idiomatically\nsimulated using (SpanReader{a, b, c} >> x >> y >> z) instead of\nSpanReader{a, b, c, x, y, z}.",
      "tree": {
        "sha": "9c2d76a9fd160cece7095a8beddb35af586318e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c2d76a9fd160cece7095a8beddb35af586318e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31ba1af74a0aaec690a01ea061264a6d5039d885",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31ba1af74a0aaec690a01ea061264a6d5039d885",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31ba1af74a0aaec690a01ea061264a6d5039d885",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31ba1af74a0aaec690a01ea061264a6d5039d885/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "786ffb3ae488061e13c02ad3fb34a5d2fc785b3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786ffb3ae488061e13c02ad3fb34a5d2fc785b3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/786ffb3ae488061e13c02ad3fb34a5d2fc785b3d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 16,
      "deletions": 35
    },
    "files": [
      {
        "sha": "69d4eacd87c79e5fd77cb55582de750413fe7ced",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -81,7 +81,7 @@ GCSFilter::GCSFilter(const Params& params)\n GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)\n     : m_params(params), m_encoded(std::move(encoded_filter))\n {\n-    SpanReader stream{GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0};\n+    SpanReader stream{GCS_SER_TYPE, GCS_SER_VERSION, m_encoded};\n \n     uint64_t N = ReadCompactSize(stream);\n     m_N = static_cast<uint32_t>(N);\n@@ -133,7 +133,7 @@ GCSFilter::GCSFilter(const Params& params, const ElementSet& elements)\n \n bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const\n {\n-    SpanReader stream{GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0};\n+    SpanReader stream{GCS_SER_TYPE, GCS_SER_VERSION, m_encoded};\n \n     // Seek forward by size of N\n     uint64_t N = ReadCompactSize(stream);"
      },
      {
        "sha": "63668517902dd764fa19aab96f286eceaf8d60f8",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -98,7 +98,7 @@ std::optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& c\n         // no signet solution -- allow this to support OP_TRUE as trivial block challenge\n     } else {\n         try {\n-            SpanReader v{SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0};\n+            SpanReader v{SER_NETWORK, INIT_PROTO_VERSION, signet_solution};\n             v >> tx_spending.vin[0].scriptSig;\n             v >> tx_spending.vin[0].scriptWitness.stack;\n             if (!v.empty()) return std::nullopt; // extraneous data encountered"
      },
      {
        "sha": "98b99b1a620e27b12d164c054c2127920f4c6886",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 21,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -143,28 +143,9 @@ class SpanReader\n      * @param[in]  type Serialization Type\n      * @param[in]  version Serialization Version (including any flags)\n      * @param[in]  data Referenced byte vector to overwrite/append\n-     * @param[in]  pos Starting position. Vector index where reads should start.\n      */\n-    SpanReader(int type, int version, Span<const unsigned char> data, size_t pos)\n-        : m_type(type), m_version(version), m_data(data)\n-    {\n-        if (pos > m_data.size()) {\n-            throw std::ios_base::failure(\"SpanReader(...): end of data (pos > m_data.size())\");\n-        }\n-        data = data.subspan(pos);\n-    }\n-\n-    /**\n-     * (other params same as above)\n-     * @param[in]  args  A list of items to deserialize starting at pos.\n-     */\n-    template <typename... Args>\n-    SpanReader(int type, int version, Span<const unsigned char> data, size_t pos,\n-                  Args&&... args)\n-        : SpanReader(type, version, data, pos)\n-    {\n-        ::UnserializeMany(*this, std::forward<Args>(args)...);\n-    }\n+    SpanReader(int type, int version, Span<const unsigned char> data)\n+        : m_type(type), m_version(version), m_data(data) {}\n \n     template<typename T>\n     SpanReader& operator>>(T&& obj)"
      },
      {
        "sha": "746347ac95a59de7baad57dfa31459da5dd246b9",
        "filename": "src/test/fuzz/golomb_rice.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/fuzz/golomb_rice.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/fuzz/golomb_rice.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/golomb_rice.cpp?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -82,7 +82,7 @@ FUZZ_TARGET(golomb_rice)\n \n     std::vector<uint64_t> decoded_deltas;\n     {\n-        SpanReader stream{SER_NETWORK, 0, golomb_rice_data, 0};\n+        SpanReader stream{SER_NETWORK, 0, golomb_rice_data};\n         BitStreamReader<SpanReader> bitreader{stream};\n         const uint32_t n = static_cast<uint32_t>(ReadCompactSize(stream));\n         for (uint32_t i = 0; i < n; ++i) {\n@@ -94,7 +94,7 @@ FUZZ_TARGET(golomb_rice)\n \n     {\n         const std::vector<uint8_t> random_bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider, 1024);\n-        SpanReader stream{SER_NETWORK, 0, random_bytes, 0};\n+        SpanReader stream{SER_NETWORK, 0, random_bytes};\n         uint32_t n;\n         try {\n             n = static_cast<uint32_t>(ReadCompactSize(stream));"
      },
      {
        "sha": "00a3bed12f044b94a917b55e66c40d6f0fed0247",
        "filename": "src/test/fuzz/script_assets_test_minimizer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/fuzz/script_assets_test_minimizer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/fuzz/script_assets_test_minimizer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_assets_test_minimizer.cpp?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -54,7 +54,7 @@ CMutableTransaction TxFromHex(const std::string& str)\n {\n     CMutableTransaction tx;\n     try {\n-        SpanReader{SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, CheckedParseHex(str), 0} >> tx;\n+        SpanReader{SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, CheckedParseHex(str)} >> tx;\n     } catch (const std::ios_base::failure&) {\n         throw std::runtime_error(\"Tx deserialization failure\");\n     }\n@@ -68,7 +68,7 @@ std::vector<CTxOut> TxOutsFromJSON(const UniValue& univalue)\n     for (size_t i = 0; i < univalue.size(); ++i) {\n         CTxOut txout;\n         try {\n-            SpanReader{SER_DISK, 0, CheckedParseHex(univalue[i].get_str()), 0} >> txout;\n+            SpanReader{SER_DISK, 0, CheckedParseHex(univalue[i].get_str())} >> txout;\n         } catch (const std::ios_base::failure&) {\n             throw std::runtime_error(\"Prevout invalid format\");\n         }"
      },
      {
        "sha": "f1304dfc82330900a5aebcc61f5cad7c642ad300",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -1473,7 +1473,7 @@ BOOST_AUTO_TEST_CASE(script_HasValidOps)\n static CMutableTransaction TxFromHex(const std::string& str)\n {\n     CMutableTransaction tx;\n-    SpanReader{SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, ParseHex(str), 0} >> tx;\n+    SpanReader{SER_DISK, SERIALIZE_TRANSACTION_NO_WITNESS, ParseHex(str)} >> tx;\n     return tx;\n }\n \n@@ -1483,7 +1483,7 @@ static std::vector<CTxOut> TxOutsFromJSON(const UniValue& univalue)\n     std::vector<CTxOut> prevouts;\n     for (size_t i = 0; i < univalue.size(); ++i) {\n         CTxOut txout;\n-        SpanReader{SER_DISK, 0, ParseHex(univalue[i].get_str()), 0} >> txout;\n+        SpanReader{SER_DISK, 0, ParseHex(univalue[i].get_str())} >> txout;\n         prevouts.push_back(std::move(txout));\n     }\n     return prevouts;\n@@ -1754,7 +1754,7 @@ BOOST_AUTO_TEST_CASE(bip341_keypath_test_vectors)\n     for (const auto& vec : vectors.getValues()) {\n         auto txhex = ParseHex(vec[\"given\"][\"rawUnsignedTx\"].get_str());\n         CMutableTransaction tx;\n-        SpanReader{SER_NETWORK, PROTOCOL_VERSION, txhex, 0} >> tx;\n+        SpanReader{SER_NETWORK, PROTOCOL_VERSION, txhex} >> tx;\n         std::vector<CTxOut> utxos;\n         for (const auto& utxo_spent : vec[\"given\"][\"utxosSpent\"].getValues()) {\n             auto script_bytes = ParseHex(utxo_spent[\"scriptPubKey\"].get_str());"
      },
      {
        "sha": "8d44e92f976ed1eb6c9599621cb01cd192f856af",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n {\n     std::vector<unsigned char> vch = {1, 255, 3, 4, 5, 6};\n \n-    SpanReader reader{SER_NETWORK, INIT_PROTO_VERSION, vch, 0};\n+    SpanReader reader{SER_NETWORK, INIT_PROTO_VERSION, vch};\n     BOOST_CHECK_EQUAL(reader.size(), 6U);\n     BOOST_CHECK(!reader.empty());\n \n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n     BOOST_CHECK_THROW(reader >> d, std::ios_base::failure);\n \n     // Read a 4 bytes as a signed int from the beginning of the buffer.\n-    SpanReader new_reader{SER_NETWORK, INIT_PROTO_VERSION, vch, 0};\n+    SpanReader new_reader{SER_NETWORK, INIT_PROTO_VERSION, vch};\n     new_reader >> d;\n     BOOST_CHECK_EQUAL(d, 67370753); // 1,255,3,4 in little-endian base-256\n     BOOST_CHECK_EQUAL(new_reader.size(), 2U);\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader)\n BOOST_AUTO_TEST_CASE(streams_vector_reader_rvalue)\n {\n     std::vector<uint8_t> data{0x82, 0xa7, 0x31};\n-    SpanReader reader{SER_NETWORK, INIT_PROTO_VERSION, data, /* pos= */ 0};\n+    SpanReader reader{SER_NETWORK, INIT_PROTO_VERSION, data};\n     uint32_t varint = 0;\n     // Deserialize into r-value\n     reader >> VARINT(varint);"
      },
      {
        "sha": "8cb3cede9bc04be925dba1fc6020dec000c62d79",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31ba1af74a0aaec690a01ea061264a6d5039d885/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31ba1af74a0aaec690a01ea061264a6d5039d885/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=31ba1af74a0aaec690a01ea061264a6d5039d885",
        "patch": "@@ -682,7 +682,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_descriptor_test, BasicTestingSetup)\n     vw << (int32_t)0;\n     vw << (int32_t)1;\n \n-    SpanReader vr{0, 0, malformed_record, 0};\n+    SpanReader vr{0, 0, malformed_record};\n     WalletDescriptor w_desc;\n     BOOST_CHECK_EXCEPTION(vr >> w_desc, std::ios_base::failure, malformed_descriptor);\n }"
      }
    ]
  }
]