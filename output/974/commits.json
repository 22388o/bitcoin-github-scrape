[
  {
    "sha": "439e1497e130914c2b78eff20c38046d6b1b6d49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzllMTQ5N2UxMzA5MTRjMmI3OGVmZjIwYzM4MDQ2ZDZiMWI2ZDQ5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-22T02:56:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-03-22T22:47:29Z"
      },
      "message": "Introduce explicit -walletupgrade option\n\nDo not automatically change the wallet format unless the user takes an\nexplicit action that implies an upgrade (encrypting, for now), or uses\n-walletupgrade.\n\n-walletupgrade optionally takes an integer argument: the client version\nup to which upgrading is allowed. Without an argument, it is upgraded\nto latest supported version. If an argument to -walletupgrade is\nprovided at the time the wallet is created, the new wallet will initially\nnot use features beyond that version.\n\nThird, the current wallet version number is reported in getinfo.",
      "tree": {
        "sha": "20eef7dba2044093e6a92fdce3f5a62c16f62840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20eef7dba2044093e6a92fdce3f5a62c16f62840"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/439e1497e130914c2b78eff20c38046d6b1b6d49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439e1497e130914c2b78eff20c38046d6b1b6d49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/439e1497e130914c2b78eff20c38046d6b1b6d49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/439e1497e130914c2b78eff20c38046d6b1b6d49/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a17e3e6b947d6ede40e49f77244d880240240cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a17e3e6b947d6ede40e49f77244d880240240cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a17e3e6b947d6ede40e49f77244d880240240cd"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 85,
      "deletions": 22
    },
    "files": [
      {
        "sha": "d8b9782e3e26041f1e0cde54b296cfb52a74fa47",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439e1497e130914c2b78eff20c38046d6b1b6d49/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439e1497e130914c2b78eff20c38046d6b1b6d49/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=439e1497e130914c2b78eff20c38046d6b1b6d49",
        "patch": "@@ -336,6 +336,7 @@ Value getinfo(const Array& params, bool fHelp)\n     Object obj;\n     obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n+    obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));"
      },
      {
        "sha": "4078b7e0cb27a111afd2d6d9fe6c17c8004f2962",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439e1497e130914c2b78eff20c38046d6b1b6d49/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439e1497e130914c2b78eff20c38046d6b1b6d49/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=439e1497e130914c2b78eff20c38046d6b1b6d49",
        "patch": "@@ -222,6 +222,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n             \"  -blocknotify=<cmd> \"     + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n+            \"  -upgradewallet   \\t  \"   + _(\"Upgrade wallet to latest format\") + \"\\n\" +\n             \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\" +\n             \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\") + \"\\n\" +\n             \"  -checkblocks=<n> \\t\\t  \" + _(\"How many blocks to check at startup (default: 2500, 0 = all)\") + \"\\n\" +\n@@ -380,6 +381,36 @@ bool AppInit2(int argc, char* argv[])\n         else\n             strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n     }\n+\n+    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    {\n+        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+        if (nMaxVersion == 0) // the -walletupgrade without argument case\n+        {\n+            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < pwalletMain->GetVersion())\n+            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n+        pwalletMain->SetMaxVersion(nMaxVersion);\n+    }\n+\n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        RandAddSeedPerfmon();\n+\n+        std::vector<unsigned char> newDefaultKey;\n+        if (!pwalletMain->GetKeyFromPool(newDefaultKey, false))\n+            strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n+        pwalletMain->SetDefaultKey(newDefaultKey);\n+        if (!pwalletMain->SetAddressBookName(CBitcoinAddress(pwalletMain->vchDefaultKey), \"\"))\n+            strErrors << _(\"Cannot write default address\") << \"\\n\";\n+    }\n+\n     printf(\"%s\", strErrors.str().c_str());\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n "
      },
      {
        "sha": "27ed7228df279ddfca21b5f108333196b6033f3d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439e1497e130914c2b78eff20c38046d6b1b6d49/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439e1497e130914c2b78eff20c38046d6b1b6d49/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=439e1497e130914c2b78eff20c38046d6b1b6d49",
        "patch": "@@ -17,15 +17,15 @@ using namespace std;\n \n std::vector<unsigned char> CWallet::GenerateNewKey()\n {\n-    bool fCompressed = true; // default to compressed public keys\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     RandAddSeedPerfmon();\n     CKey key;\n     key.MakeNewKey(fCompressed);\n \n     // Compressed public keys were introduced in version 0.6.0\n     if (fCompressed)\n-        SetMinVersion(59900);\n+        SetMinVersion(FEATURE_COMPRPUBKEY);\n \n     if (!AddKey(key))\n         throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n@@ -148,13 +148,20 @@ class CCorruptAddress\n     )\n };\n \n-bool CWallet::SetMinVersion(int nVersion, CWalletDB* pwalletdbIn)\n+bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)\n {\n     if (nWalletVersion >= nVersion)\n         return true;\n \n+    // when doing an explicit upgrade, if we pass the max version permitted, upgrade all the way\n+    if (fExplicit && nVersion > nWalletMaxVersion)\n+            nVersion = FEATURE_LATEST;\n+\n     nWalletVersion = nVersion;\n \n+    if (nVersion > nWalletMaxVersion)\n+        nWalletMaxVersion = nVersion;\n+\n     if (fFileBacked)\n     {\n         CWalletDB* pwalletdb = pwalletdbIn ? pwalletdbIn : new CWalletDB(strWalletFile);\n@@ -174,6 +181,17 @@ bool CWallet::SetMinVersion(int nVersion, CWalletDB* pwalletdbIn)\n     return true;\n }\n \n+bool CWallet::SetMaxVersion(int nVersion)\n+{\n+    // cannot downgrade below current version\n+    if (nWalletVersion > nVersion)\n+        return false;\n+\n+    nWalletMaxVersion = nVersion;\n+\n+    return true;\n+}\n+\n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n {\n     if (IsCrypted())\n@@ -228,7 +246,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         }\n \n         // Encryption was introduced in version 0.4.0\n-        SetMinVersion(40000, pwalletdbEncryption);\n+        SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n \n         if (fFileBacked)\n         {\n@@ -1253,19 +1271,6 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n         return nLoadWalletRet;\n     fFirstRunRet = vchDefaultKey.empty();\n \n-    if (!HaveKey(Hash160(vchDefaultKey)))\n-    {\n-        // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-\n-        std::vector<unsigned char> newDefaultKey;\n-        if (!GetKeyFromPool(newDefaultKey, false))\n-            return DB_LOAD_FAIL;\n-        SetDefaultKey(newDefaultKey);\n-        if (!SetAddressBookName(CBitcoinAddress(vchDefaultKey), \"\"))\n-            return DB_LOAD_FAIL;\n-    }\n-\n     CreateThread(ThreadFlushWalletDB, &strWalletFile);\n     return DB_LOAD_OK;\n }"
      },
      {
        "sha": "6a6ee0c4abbc9b0b459fd0e786c9c6e8decd5f54",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 31,
        "deletions": 5,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/439e1497e130914c2b78eff20c38046d6b1b6d49/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/439e1497e130914c2b78eff20c38046d6b1b6d49/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=439e1497e130914c2b78eff20c38046d6b1b6d49",
        "patch": "@@ -14,6 +14,16 @@ class CWalletTx;\n class CReserveKey;\n class CWalletDB;\n \n+enum WalletFeature\n+{\n+    FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getinfo's clientversion output)\n+\n+    FEATURE_WALLETCRYPT = 40000, // wallet encryption\n+    FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n+\n+    FEATURE_LATEST = 60000\n+};\n+\n // A CWallet is an extension of a keystore, which also maintains a set of\n // transactions and balances, and provides the ability to create new\n // transactions\n@@ -25,8 +35,12 @@ class CWallet : public CCryptoKeyStore\n \n     CWalletDB *pwalletdbEncryption;\n \n+    // the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion;\n \n+    // the maxmimum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n+    int nWalletMaxVersion;\n+\n public:\n     mutable CCriticalSection cs_wallet;\n \n@@ -42,14 +56,16 @@ class CWallet : public CCryptoKeyStore\n \n     CWallet()\n     {\n-        nWalletVersion = 0;\n+        nWalletVersion = FEATURE_BASE;\n+        nWalletMaxVersion = FEATURE_BASE;\n         fFileBacked = false;\n         nMasterKeyMaxID = 0;\n         pwalletdbEncryption = NULL;\n     }\n     CWallet(std::string strWalletFileIn)\n     {\n-        nWalletVersion = 0;\n+        nWalletVersion = FEATURE_BASE;\n+        nWalletMaxVersion = FEATURE_BASE;\n         strWalletFile = strWalletFileIn;\n         fFileBacked = true;\n         nMasterKeyMaxID = 0;\n@@ -65,6 +81,9 @@ class CWallet : public CCryptoKeyStore\n \n     std::vector<unsigned char> vchDefaultKey;\n \n+    // check whether we are allowed to upgrade (or already support) to the named feature\n+    bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }\n+\n     // keystore implementation\n     // Generate a new key\n     std::vector<unsigned char> GenerateNewKey();\n@@ -73,12 +92,12 @@ class CWallet : public CCryptoKeyStore\n     // Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }\n \n-    bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; return true; }\n+    bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n     // Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n+    bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { SetMinVersion(FEATURE_WALLETCRYPT); return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n     bool AddCScript(const CScript& redeemScript);\n     bool LoadCScript(const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(redeemScript); }\n \n@@ -216,7 +235,14 @@ class CWallet : public CCryptoKeyStore\n \n     bool SetDefaultKey(const std::vector<unsigned char> &vchPubKey);\n \n-    bool SetMinVersion(int nVersion, CWalletDB* pwalletdbIn = NULL);\n+    // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n+    bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n+\n+    // change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n+    bool SetMaxVersion(int nVersion);\n+\n+    // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n+    int GetVersion() { return nWalletVersion; }\n };\n \n "
      }
    ]
  }
]