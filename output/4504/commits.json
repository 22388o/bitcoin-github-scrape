[
  {
    "sha": "43f510d37d680ca4347878d2fb6f8b97b54e7611",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2Y1MTBkMzdkNjgwY2E0MzQ3ODc4ZDJmYjZmOGI5N2I1NGU3NjEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-10T10:13:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-17T13:46:25Z"
      },
      "message": "Convert closesocket 'compat wrapper' to function in netbase\n\nSimpler alternative to #4348.\n\nThe current setup with closesocket() is strange. It poses\nas a compatibility wrapper but adds functionality.\n\nRename it and make it a documented utility function in netbase.\n\nCode movement only, zero effect on the functionality.",
      "tree": {
        "sha": "137cb51c1953826cd595584e8371d5fbd4b2ccb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/137cb51c1953826cd595584e8371d5fbd4b2ccb3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43f510d37d680ca4347878d2fb6f8b97b54e7611",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43f510d37d680ca4347878d2fb6f8b97b54e7611",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43f510d37d680ca4347878d2fb6f8b97b54e7611",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43f510d37d680ca4347878d2fb6f8b97b54e7611/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4f11ca9c32a90c57bd26eb38e5a264a95baba41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4f11ca9c32a90c57bd26eb38e5a264a95baba41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4f11ca9c32a90c57bd26eb38e5a264a95baba41"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 45,
      "deletions": 47
    },
    "files": [
      {
        "sha": "1b3a60d11b9747a089d506e59660604d9f7ea639",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=43f510d37d680ca4347878d2fb6f8b97b54e7611",
        "patch": "@@ -59,19 +59,4 @@ typedef u_int SOCKET;\n #define SOCKET_ERROR        -1\n #endif\n \n-inline int myclosesocket(SOCKET& hSocket)\n-{\n-    if (hSocket == INVALID_SOCKET)\n-        return WSAENOTSOCK;\n-#ifdef WIN32\n-    int ret = closesocket(hSocket);\n-#else\n-    int ret = close(hSocket);\n-#endif\n-    hSocket = INVALID_SOCKET;\n-    return ret;\n-}\n-#define closesocket(s)      myclosesocket(s)\n-\n-\n #endif"
      },
      {
        "sha": "441bde3e9094c5b90068aae478c12e574cbea4c0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=43f510d37d680ca4347878d2fb6f8b97b54e7611",
        "patch": "@@ -332,7 +332,7 @@ bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const cha\n             {\n                 if (!RecvLine(hSocket, strLine))\n                 {\n-                    closesocket(hSocket);\n+                    CloseSocket(hSocket);\n                     return false;\n                 }\n                 if (pszKeyword == NULL)\n@@ -343,7 +343,7 @@ bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const cha\n                     break;\n                 }\n             }\n-            closesocket(hSocket);\n+            CloseSocket(hSocket);\n             if (strLine.find(\"<\") != string::npos)\n                 strLine = strLine.substr(0, strLine.find(\"<\"));\n             strLine = strLine.substr(strspn(strLine.c_str(), \" \\t\\n\\r\"));\n@@ -357,7 +357,7 @@ bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const cha\n             return true;\n         }\n     }\n-    closesocket(hSocket);\n+    CloseSocket(hSocket);\n     return error(\"GetMyExternalIP() : connection closed\");\n }\n \n@@ -533,8 +533,7 @@ void CNode::CloseSocketDisconnect()\n     if (hSocket != INVALID_SOCKET)\n     {\n         LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n-        closesocket(hSocket);\n-        hSocket = INVALID_SOCKET;\n+        CloseSocket(hSocket);\n     }\n \n     // in case this fails, we'll empty the recv buffer when the CNode is deleted\n@@ -975,12 +974,12 @@ void ThreadSocketHandler()\n                 }\n                 else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n                 {\n-                    closesocket(hSocket);\n+                    CloseSocket(hSocket);\n                 }\n                 else if (CNode::IsBanned(addr) && !whitelisted)\n                 {\n                     LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n-                    closesocket(hSocket);\n+                    CloseSocket(hSocket);\n                 }\n                 else\n                 {\n@@ -1817,11 +1816,11 @@ class CNetCleanup\n         // Close sockets\n         BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->hSocket != INVALID_SOCKET)\n-                closesocket(pnode->hSocket);\n+                CloseSocket(pnode->hSocket);\n         BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n             if (hListenSocket.socket != INVALID_SOCKET)\n-                if (closesocket(hListenSocket.socket) == SOCKET_ERROR)\n-                    LogPrintf(\"closesocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+                if (!CloseSocket(hListenSocket.socket))\n+                    LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n         // clean up some globals (to help leak detection)\n         BOOST_FOREACH(CNode *pnode, vNodes)"
      },
      {
        "sha": "f029a8d9357a72aee3c170d6ab5266e6f13a9f67",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=43f510d37d680ca4347878d2fb6f8b97b54e7611",
        "patch": "@@ -357,8 +357,7 @@ class CNode\n     {\n         if (hSocket != INVALID_SOCKET)\n         {\n-            closesocket(hSocket);\n-            hSocket = INVALID_SOCKET;\n+            CloseSocket(hSocket);\n         }\n         if (pfilter)\n             delete pfilter;"
      },
      {
        "sha": "e9f3515456fc59fb480bf2e69430b4e0bb61b3d2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 20,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=43f510d37d680ca4347878d2fb6f8b97b54e7611",
        "patch": "@@ -218,7 +218,7 @@ bool static Socks5(string strDest, int port, SOCKET& hSocket)\n     LogPrintf(\"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Hostname too long\");\n     }\n     char pszSocks5Init[] = \"\\5\\1\\0\";\n@@ -227,18 +227,18 @@ bool static Socks5(string strDest, int port, SOCKET& hSocket)\n     ssize_t ret = send(hSocket, pszSocks5Init, nSize, MSG_NOSIGNAL);\n     if (ret != nSize)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet1[2];\n     if (recv(hSocket, pchRet1, 2, 0) != 2)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Error reading proxy response\");\n     }\n     if (pchRet1[0] != 0x05 || pchRet1[1] != 0x00)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n     string strSocks5(\"\\5\\1\");\n@@ -250,23 +250,23 @@ bool static Socks5(string strDest, int port, SOCKET& hSocket)\n     ret = send(hSocket, strSocks5.c_str(), strSocks5.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)strSocks5.size())\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet2[4];\n     if (recv(hSocket, pchRet2, 4, 0) != 4)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Error reading proxy response\");\n     }\n     if (pchRet2[0] != 0x05)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n     if (pchRet2[1] != 0x00)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         switch (pchRet2[1])\n         {\n             case 0x01: return error(\"Proxy error: general failure\");\n@@ -282,7 +282,7 @@ bool static Socks5(string strDest, int port, SOCKET& hSocket)\n     }\n     if (pchRet2[2] != 0x00)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n     char pchRet3[256];\n@@ -294,23 +294,23 @@ bool static Socks5(string strDest, int port, SOCKET& hSocket)\n         {\n             ret = recv(hSocket, pchRet3, 1, 0) != 1;\n             if (ret) {\n-                closesocket(hSocket);\n+                CloseSocket(hSocket);\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n             ret = recv(hSocket, pchRet3, nRecv, 0) != nRecv;\n             break;\n         }\n-        default: closesocket(hSocket); return error(\"Error: malformed proxy response\");\n+        default: CloseSocket(hSocket); return error(\"Error: malformed proxy response\");\n     }\n     if (ret)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n     if (recv(hSocket, pchRet3, 2, 0) != 2)\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n     LogPrintf(\"SOCKS5 connected %s\\n\", strDest);\n@@ -344,7 +344,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     if (fcntl(hSocket, F_SETFL, fFlags | O_NONBLOCK) == -1)\n #endif\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return false;\n     }\n \n@@ -365,13 +365,13 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             if (nRet == 0)\n             {\n                 LogPrint(\"net\", \"connection to %s timeout\\n\", addrConnect.ToString());\n-                closesocket(hSocket);\n+                CloseSocket(hSocket);\n                 return false;\n             }\n             if (nRet == SOCKET_ERROR)\n             {\n                 LogPrintf(\"select() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-                closesocket(hSocket);\n+                CloseSocket(hSocket);\n                 return false;\n             }\n             socklen_t nRetSize = sizeof(nRet);\n@@ -382,13 +382,13 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n #endif\n             {\n                 LogPrintf(\"getsockopt() for %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-                closesocket(hSocket);\n+                CloseSocket(hSocket);\n                 return false;\n             }\n             if (nRet != 0)\n             {\n                 LogPrintf(\"connect() to %s failed after select(): %s\\n\", addrConnect.ToString(), NetworkErrorString(nRet));\n-                closesocket(hSocket);\n+                CloseSocket(hSocket);\n                 return false;\n             }\n         }\n@@ -399,7 +399,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n #endif\n         {\n             LogPrintf(\"connect() to %s failed: %s\\n\", addrConnect.ToString(), NetworkErrorString(WSAGetLastError()));\n-            closesocket(hSocket);\n+            CloseSocket(hSocket);\n             return false;\n         }\n     }\n@@ -415,7 +415,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     if (fcntl(hSocket, F_SETFL, fFlags & ~O_NONBLOCK) == SOCKET_ERROR)\n #endif\n     {\n-        closesocket(hSocket);\n+        CloseSocket(hSocket);\n         return false;\n     }\n \n@@ -1258,3 +1258,16 @@ std::string NetworkErrorString(int err)\n     return strprintf(\"%s (%d)\", s, err);\n }\n #endif\n+\n+bool CloseSocket(SOCKET& hSocket)\n+{\n+    if (hSocket == INVALID_SOCKET)\n+        return false;\n+#ifdef WIN32\n+    int ret = closesocket(hSocket);\n+#else\n+    int ret = close(hSocket);\n+#endif\n+    hSocket = INVALID_SOCKET;\n+    return ret != SOCKET_ERROR;\n+}"
      },
      {
        "sha": "05221a5fde842ebdcdaf52b6b0b0b9272a4d6b5a",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43f510d37d680ca4347878d2fb6f8b97b54e7611/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=43f510d37d680ca4347878d2fb6f8b97b54e7611",
        "patch": "@@ -178,5 +178,7 @@ bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout = nCon\n bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault = 0, int nTimeout = nConnectTimeout);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n+/** Close socket and set hSocket to INVALID_SOCKET */\n+bool CloseSocket(SOCKET& hSocket);\n \n #endif"
      }
    ]
  }
]