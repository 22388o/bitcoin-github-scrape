jonasschnelli,2016-09-10T06:54:26Z,"Impressive changeset!\nGeneral Concept ACK.\n\nInstead of the extending the RPC auth, I could imaging using different RPC endpoints would also work.\n- Accessing RPC at `/` would result in the default wallet.\n- Accessing RPC at `/<walletid>` would result in using the wallet with the id `<walletid>`.\n\nbitcoin-cli could just support a new argument `-walletid`.\nSomething like `bitcoin-cli -wallet",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-246095336,246095336,
luke-jr,2016-09-10T10:22:49Z,"> Instead of the extending the RPC auth, I could imaging using different RPC endpoints would also work.\n\nIndeed, although my main purpose in doing this was to isolate JoinMarket, and it's less isolated if it has auth to my real hotwallet. :)\n\n(Also, endpoints seemed like they'd require more code.)\n\n> Accessing RPC at `/<walletid>` would result in using the wallet with the id `<walletid>`.\n\",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-246104190,246104190,
btcdrak,2016-09-14T21:21:10Z,"Nice, Concept ACK. Will test.\n",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-247158244,247158244,
luke-jr,2017-01-03T22:48:10Z,"Rebased, but please prioritise #8775 review (which this is based on) first. Once that's merged, it may or may not make sense to split the Qt changes out of this.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-270247894,270247894,
gmaxwell,2017-01-07T15:31:24Z,"Concept ACK.\n\nSyntax for the auth field should have a clear way to extend it to support a list of wallets (first being the default, I guess).  I think.  To support things like the path selected wallets suggested above later.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-271090119,271090119,
luke-jr,2017-02-03T05:10:48Z,"Moved RPC/GUI changes out of this, and rebased.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-277166185,277166185,
luke-jr,2017-03-04T03:54:00Z,Rebased and now the next-step in multiwallet integration.,https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-284124924,284124924,
jonasschnelli,2017-03-06T08:34:47Z,"Re-Concept ACK.\nBinaries to play with: https://bitcoin.jonasschnelli.ch/build/PR/8694",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-284332981,284332981,
ryanofsky,2017-03-08T17:00:08Z,(needs another rebase),https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285100437,285100437,
laanwj,2017-03-09T09:22:43Z,Added 0.15.0 milestone.,https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285298597,285298597,
luke-jr,2017-03-09T22:08:27Z,"Significantly rebased. Also fixed minor race conditions surrounding wallet flush (it was bumping the ""have update to flush"" counter before doing the actual update).",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285499326,285499326,
laanwj,2017-03-10T07:40:04Z,"It would be preferable to increment the update counter after committing a database transaction, not after every call to a CWalletDB method.\nSo this would mean the destructor of `CWalletDB` and `TxnCommit()` . Which should be overridden in CWalletDB, or alternatively use composition not inheritance for CDB as I've done in the last commit in #9951.\nThis will simplify these changes (no need to do",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285599692,285599692,
laanwj,2017-03-10T07:46:05Z,"I think the overall approach here is good. This is another step towards multi-wallet support. As it's not anywhere on the API yet, I guess it's too early to ask for a multiwallet test?",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285600713,285600713,
luke-jr,2017-03-10T17:20:05Z,"> It would be preferable to increment the update counter after committing a database transaction, not after every call to a CWalletDB method.\n\nIMO too much for this PR. Just trying to multiwallet here, not refactor stuff that doesn't need it. :)",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285729345,285729345,
laanwj,2017-03-10T18:36:22Z,"> IMO too much for this PR. Just trying to multiwallet here, not refactor stuff that doesn't need it. :)\n\nMaybe my recommendation goes to far but I just think your current approach there is messy. The mutator functions call `WriteIC`/`EraseIC` which call `IncrementUpdateCounter` which calls `IncrementUpdateCounter(strFile)` which indexes into a global map indexed by name. This makes the wallet",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285748918,285748918,
luke-jr,2017-03-11T01:27:36Z,"@laanwj I agree that stuff should be refactored, but I don't think multiwallet needs to depend on it here.\n\n(Why is CWalletDB not just a private parent class of CWallet anyway?)",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285828510,285828510,
laanwj,2017-03-11T07:47:03Z,"> (Why is CWalletDB not just a private parent class of CWallet anyway?)\n\n- It's named wrongly. Because CWalletDB is not a database, it provides access to it. To be exact, it is a database transaction, similar to the CDBBatch in leveldbwrapper.h. It is commited when the object goes out of scope or `TxnCommit()` is called. It is not committed if `TxnAbort()` is called.\n- Should at least use co",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-285850854,285850854,
NicolasDorier,2017-04-12T09:54:17Z,"not blocking, but I think a `CWallets` instead of `vpwallets` it would make the code way easier to read and less error prone.\nWould also make locking easier to get right, and preventing some loop.\n\nIt would impact:\n```\nstd::map<std::string, CWalletDBStateInfo> WalletDBStateInfos\nstd::vector<CWallet_ptr> vpwallets;\nIncrementUpdateCounter()\n```\nThat said, this can be done in a sepa",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-293529526,293529526,
luke-jr,2017-04-18T15:17:24Z,In-scope nits addressed and rebased.,https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-294878238,294878238,
luke-jr,2017-05-21T00:42:28Z,Rebased,https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-302907619,302907619,
jonasschnelli,2017-05-24T08:18:31Z,"Tested a bit and seems to work as intended.\nThe only point I found during testing that needs fixing is the SalvageWallet renaming to ""wallet.%d.bak"".\nStep-debugged the flushing and SyncTransaction.\n\n### Conceptual:\nThis PR mostly goes into a direction that one has to choose the wallets-to-work-with before starting up Core. I miss the pre-work for run-time adding and removing of wallets. ",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-303652612,303652612,
jonasschnelli,2017-05-24T09:22:28Z,Gitian builds are failing (all three platforms): https://bitcoin.jonasschnelli.ch/build/147,https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-303668042,303668042,
gmaxwell,2017-05-25T18:51:18Z,"> zapwallettx, salvagewallet\n\nThese should probably become less visible or go away or move to a separate utility. \n\n> rescan\n\nWe can do this from the rpc now.\n\nNot sure about upgradewallet.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-304092421,304092421,
luke-jr,2017-06-05T22:31:46Z,Rebased and issues addressed,https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-306329076,306329076,
laanwj,2017-06-06T12:39:12Z,"Travis falure:\n```\nRunning 255 test cases...\nunknown location(0): fatal error: in ""wallet_tests/importwallet_rescan"": unknown type\nwallet/test/wallet_tests.cpp(446): last checkpoint: ""importwallet_rescan"" entry.\n*** 1 failure is detected in the test module ""Bitcoin Test Suite""\n```",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-306473476,306473476,
ryanofsky,2017-06-06T12:44:08Z,"> Travis falure:\n\nThe importwallet_rescan test has another pwalletMain usage that needs to be changed to vpwallets.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-306474587,306474587,
jnewbery,2017-06-06T16:10:39Z,"I've had a quick scan and the new commits look generally good, although #10457 seems like a simpler solution to the wallet backup name issue. I don't think it's really worth passing the backup file name around through multiple function calls just so it can be printed in a single warning message.\n\nI'll fully review once the the test has been fixed.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-306536473,306536473,
laanwj,2017-06-12T11:27:35Z,"utACK c237bd7\nSeems ready to merge.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-307762965,307762965,
laanwj,2017-06-12T14:01:17Z,"> I've had a quick scan and the new commits look generally good, although #10457 seems like a simpler solution to the wallet backup name issue. I don't think it's really worth passing the backup file name around through multiple function calls just so it can be printed in a single warning message.\n\nI agree. We should probably revert that part and do #10457 afterward.",https://github.com/bitcoin/bitcoin/pull/8694#issuecomment-307798429,307798429,
MarcoFalke,2016-09-21T09:17:28Z,I like the approach by @jonasschnelli better. Let's keep most of the multiwallet logic in `wallet.cpp`.\n,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r79791358,79791358,src/init.cpp
luke-jr,2017-03-03T23:09:58Z,"It's not in `wallet.cpp` now. Moving it there seems like a good idea, but independent of this PR...",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r104261222,104261222,src/init.cpp
ryanofsky,2017-03-06T16:37:12Z,"Curious, why have a `CWallet_ptr` typedef instead of using `CWallet *`? Is there a plan to switch to a different type of pointer later? Curious, because this seems to make the rest of the code more opaque. For example:\n\n```\nfor (CWallet_ptr pwallet : vpwallets)\n```\n\nBecause this says `CWallet_ptr` instead of `CWallet*` it's unclear whether the copy initialization has extra cost (which ",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r104459247,104459247,src/wallet/wallet.h
ryanofsky,2017-03-06T17:07:04Z,"This thread is created from the non-static method `CWallet::postInitProcess`, so it seems like it makes more sense for it to continue flushing a single wallet, rather than going through the global wallets list. Instead of looping and accessing the global `vpwallet` variable, `ThreadFlushWalletDB` could just take a new `CWallet* pwallet` argument and be invoked with:\n\n```\nthreadGroup.create_t",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r104467005,104467005,src/wallet/walletdb.cpp
ryanofsky,2017-03-06T17:08:37Z,How come the `nLastFlushed` assignment is moving ouside of the `_mi != bitdb.mapFileUseCount.end()` condition? It seems unrelated to this change. Maybe a code comment explaining the assignment would be good here.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r104467401,104467401,src/wallet/walletdb.cpp
luke-jr,2017-03-06T21:08:54Z,"Indeed, a shared_ptr or similar would be needed for when/if we add the ability to close wallets at runtime.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r104522825,104522825,src/wallet/wallet.h
luke-jr,2017-03-06T21:10:00Z,Having a dedicated thread per wallet is just needlessly inefficient.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r104523089,104523089,src/wallet/walletdb.cpp
luke-jr,2017-03-06T21:12:16Z,Because the condition is per-wallet. Maybe nLastFlushed ought to be as well...?,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r104523568,104523568,src/wallet/walletdb.cpp
luke-jr,2017-03-09T22:07:20Z,Sanitised this better in the rebase,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105283157,105283157,src/wallet/walletdb.cpp
laanwj,2017-03-10T07:44:19Z,"I think it is confusing for a ""Set"" function to add something to a list. If anything it should replace it.\nWhat do you need this for, specifically?\nIn the past I've defined [SoftSetMultiArg](https://github.com/laanwj/bitcoin/commit/1024183eff629b758745aa7ebf9329d987179644) to be able to define a whole list argument at once.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105344494,105344494,src/util.cpp
laanwj,2017-03-10T07:44:40Z,Why define pwalletMain here?,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105344527,105344527,src/wallet/test/wallet_test_fixture.cpp
luke-jr,2017-03-10T17:16:56Z,"It can't get here unless the list is currently empty. It's used to initialise `-wallet`, which is accessed as a list only now.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105443469,105443469,src/util.cpp
luke-jr,2017-03-10T17:17:36Z,There's no need to modify the tests to use vpwallets in most cases?,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105443597,105443597,src/wallet/test/wallet_test_fixture.cpp
ryanofsky,2017-03-10T17:44:04Z,"In commit ""Wallet: Replace pwalletMain with a vector of wallet pointers"":\n\nMaybe add a TODO comment for updating the tests to stop referencing pwalletMain, since this will be confusing to someone seeing this who isn't familiar with the pre-multiwallet history of the code.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105449231,105449231,src/wallet/test/wallet_test_fixture.cpp
laanwj,2017-03-10T18:24:08Z,Depends on the reason why they are setting pwalletMain. Generally that is to communicate with stuff in wallet.cpp/walletdb.cpp I'd say.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105457768,105457768,src/wallet/test/wallet_test_fixture.cpp
ryanofsky,2017-03-10T18:39:55Z,"In commit ""Bugfix: wallet: Increment ""update counter"" only after actually making the applicable db changes to avoid potential races"":\n\nI'm probably missing something, but if the first write above succeeds and second write fails, the counter won't be incremented. Is this wrong? Would a possible fix be to drop this line and replace all the Write/Erases above with WriteIC/EraseIC?",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105461051,105461051,src/wallet/walletdb.cpp
ryanofsky,2017-03-10T18:44:00Z,"In commit ""Bugfix: wallet: Increment ""update counter"" only after actually making the applicable db changes to avoid potential races"":\n\nIt seems good not to increment the counter when a write or erase fails. But I don't understand what the ""potential races"" are that could happen if the counter is incremented regardless. If you could clarify / expand the commit message on this point, I think tha",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105461805,105461805,src/wallet/walletdb.cpp
luke-jr,2017-03-11T01:25:50Z,"1. (thread 1) Increment the counter.\n2. (thread 2) DB gets flushed\n3. (thread 1) Actual change happens.\n4. (thread 2) Thinks DB hasn't changed, so doesn't flush again.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105520211,105520211,src/wallet/walletdb.cpp
luke-jr,2017-03-11T01:26:25Z,"Hmm, not sure what we want to happen in that case...",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105520237,105520237,src/wallet/walletdb.cpp
laanwj,2017-03-11T07:42:29Z,This is one of the reasons why I suggested above to only update the update counter if a DB transaction actually hits the database. That's more robust than doing it per operation. It's possible for all the operations to succeed then TxnAbort() to be called and still no update happens.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r105528436,105528436,src/wallet/walletdb.cpp
TheBlueMatt,2017-03-21T00:03:11Z,Why typedef this? Its literally /more/ characters now.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r107046358,107046358,src/wallet/wallet.h
TheBlueMatt,2017-03-21T00:04:28Z,Don't you still need to delete each wallet here?,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r107046516,107046516,src/init.cpp
TheBlueMatt,2017-03-21T00:07:31Z,I believe this is also not correct - other threads may be using mapMultiArgs or the vector in it at the same time,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r107046936,107046936,src/util.cpp
TheBlueMatt,2017-03-28T15:58:43Z,Maybe get @jtimon to do it in #9494 and then just use it here?,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r108462865,108462865,src/util.cpp
laanwj,2017-04-12T09:23:47Z,"Typedef-ing a pointer type doesn't seem that useful to me either. I suppose the rationale is ""what if we want to change it to e.g. std::shared_ptr later"". But a) I think the code is more readable if the kind of pointer is clear from the function/struct/class signatures using it b) You might want to have different kinds of pointers to the same kind of objects in different places.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111102248,111102248,src/wallet/wallet.h
NicolasDorier,2017-04-12T09:42:28Z,I throwing an RPC error like `RPC_METHOD_NOT_FOUND` is better than returning `NULL`.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111106307,111106307,src/wallet/rpcwallet.cpp
NicolasDorier,2017-04-12T09:45:07Z,"`vpwallets.clear()` ?\n\nEDIT: Meh, not really needed, just thought it would be more coherent.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111106832,111106832,src/wallet/wallet.cpp
NicolasDorier,2017-04-12T09:47:31Z,"not sure it make sense either, but if it is done, better naming it to `CWalletRef` to be consistent with `CTransactionRef`",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111107294,111107294,src/wallet/wallet.h
laanwj,2017-04-12T09:55:52Z,"> It can't get here unless the list is currently empty.\n\nGood point",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111109013,111109013,src/util.cpp
laanwj,2017-04-12T09:58:42Z,s/NULL/nullptr?,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111109604,111109604,src/wallet/rpcwallet.cpp
laanwj,2017-04-12T10:17:36Z,"`walletFile.find_first_of(""/\\"")` is not portable. Likely, boost::filesystem::path has a way to check a path for path separators.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111113071,111113071,src/wallet/wallet.cpp
luke-jr,2017-04-18T14:41:59Z,"I agree, but it's outside the scope of this PR. For now, I'll just increment the counter more aggressively (merely reordering the increment to fix the race issue).",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111972028,111972028,src/wallet/walletdb.cpp
luke-jr,2017-04-18T14:47:22Z,"It is not always an error for there to be no wallet (eg, signrawtransaction).",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111973532,111973532,src/wallet/rpcwallet.cpp
luke-jr,2017-04-18T15:15:30Z,"```C++\n        boost::filesystem::path walletFileBoost = walletFile;\n        if (walletFileBoost.has_root_path() || walletFileBoost.has_parent_path()) {\n```\n\nThis would work, but off-topic here since this is existing code.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111981623,111981623,src/wallet/wallet.cpp
luke-jr,2017-04-18T15:16:39Z,@TheBlueMatt I don't see what your concern is... We have the lock here already.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r111981973,111981973,src/util.cpp
jtimon,2017-04-18T16:48:17Z,why clear here? afaik this is only used for unittests now.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r112005561,112005561,src/util.cpp
luke-jr,2017-04-18T18:06:02Z,So that there's only one value in _mapMultiArgs...,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r112024031,112024031,src/util.cpp
TheBlueMatt,2017-04-27T15:24:37Z,We do not take the lock when accessing mapMultiArgs all over the codebase. You cannot write a new entry to this map without updating the various locations in the codebase which access mapMultiArgs to also go through cs_args.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r113726806,113726806,src/util.cpp
ryanofsky,2017-05-22T17:09:16Z,"In commit ""CWalletDB: Store the update counter per wallet""\n\nMight be nice to call this member dbw instead of wrapper for consistency with the wallet member.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r117797621,117797621,src/wallet/walletdb.h
ryanofsky,2017-05-22T17:12:00Z,"In commit ""Bugfix: wallet: Increment ""update counter"" only after actually making the applicable db changes to avoid potential races""\n\nWould be helpful to have a comment mentioning that counter should be updated after the write operation, rather than before to prevent a race where the flush thread could run and store the higher counter value before the database is fully updated.\n\nCould also",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r117798167,117798167,src/wallet/walletdb.h
ryanofsky,2017-05-22T17:21:53Z,"In commit ""Wallet: Replace pwalletMain with a vector of wallet pointers""\n\nIt would be nice if conversion of these values from static variables to per-wallet members happened in the previous commit (""CWalletDB: Store the update counter per wallet"") instead of this one. Would make both commits easier to follow and avoid the unusual intermediate state where globals and per-wallet members are comp",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r117800249,117800249,src/wallet/db.h
ryanofsky,2017-05-22T17:30:01Z,"In commit ""Wallet: Replace pwalletMain with a vector of wallet pointers""\n\nShould initialize these values.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r117801976,117801976,src/wallet/db.h
ryanofsky,2017-05-22T17:32:57Z,"In commit ""CWalletDB: Store the update counter per wallet"":\n\nShould initialize this value.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r117802544,117802544,src/wallet/db.h
ryanofsky,2017-05-22T17:37:14Z,"In commit ""CWalletDB: Store the update counter per wallet""\n\nMaybe call this dbw for consistency with existing wallet code.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r117803568,117803568,src/wallet/walletdb.cpp
jonasschnelli,2017-05-24T07:03:58Z,This redundantly opens/checks the datadir via BDB. Not sure if this is a problem...,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118176576,118176576,src/wallet/wallet.cpp
jonasschnelli,2017-05-24T07:48:26Z,Without a lock we set the assumption that `vpwallets` is immutable.,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118183947,118183947,src/wallet/walletdb.cpp
jonasschnelli,2017-05-24T07:53:54Z,nit: using `Verifying wallet(s)...`?,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118184966,118184966,src/wallet/wallet.cpp
jonasschnelli,2017-05-24T07:57:40Z,"This renames an arbitrary wallet name to ""wallet.%d.bak"", collisions may happen.\n\n`2017-05-24 07:56:04 Renamed test1.dat to wallet.1495612559.bak`",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118185652,118185652,src/wallet/wallet.cpp
jonasschnelli,2017-05-24T07:58:58Z,Maybe we should use `<filename>.<date>.bak` (will result in something like `test1.dat.1495612559.bak` (which is preferable IMO).,https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118185864,118185864,src/wallet/wallet.cpp
jnewbery,2017-05-25T21:15:34Z,"Please update to use braces. You can also combine this line with the one below.\n\nSeveral other if statements below which you can update to use braces.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118586960,118586960,src/wallet/walletdb.cpp
jnewbery,2017-05-29T21:26:28Z,"You've changed `MaybeCompactWalletDB()` to access `CDB::nUpdateCounter` directly, so this function isn't used.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118987521,118987521,src/wallet/db.cpp
jnewbery,2017-05-29T22:50:29Z,I agree with @jonasschnelli . This seems dangerous if `Recover()` or `VerifyDatabaseFile()` is called for multiple wallets. Should be straightforward to update `Recover()` to name the backup file uniquely (the warning string in `VerifyDatabaseFile()` will also need to be updated),https://github.com/bitcoin/bitcoin/pull/8694#discussion_r118991629,118991629,src/wallet/wallet.cpp
luke-jr,2017-06-05T21:11:19Z,"It's an atomic, should have a default constructor?",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120211039,120211039,src/wallet/db.h
ryanofsky,2017-06-05T21:20:24Z,"> It's an atomic, should have a default constructor?\n\nYes but it seems to not initialize the value, see\nhttps://stackoverflow.com/questions/36320008/whats-the-default-value-for-a-stdatomic or http://en.cppreference.com/w/cpp/atomic/atomic/atomic. IMO, adding `= 0` to this line would make the code clearer anyway.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120212883,120212883,src/wallet/db.h
ryanofsky,2017-06-06T14:36:59Z,"In commit ""Replace pwalletMain with a vector of wallet""\n\nThis can probably be removed after the importwallet_rescan test is updated.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120379039,120379039,src/wallet/test/wallet_tests.cpp
ryanofsky,2017-06-06T14:44:02Z,"In commit ""Wallet: Support loading multiple wallets if -wallet used more than once""\n\nRemoving GetUpdateCounter in this commit isn't related to the rest of the changes here. This change was probably meant for the ""CWalletDB: Store the update counter per wallet"" commit.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120381177,120381177,src/wallet/db.cpp
ryanofsky,2017-06-06T14:53:28Z,"In commit ""Wallet: Move multiwallet sanity checks to CWallet::Verify""\n\nConsider squashing this commit into previous commit ""Wallet: Support loading multiple wallets if -wallet used more than once"", because the two commits are making parallel sets changes, and having them separate makes the interaction confusing to think about.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120384212,120384212,src/wallet/wallet.cpp
ryanofsky,2017-06-06T14:56:25Z,"> Should initialize these values.\n\nNote: comment no longer applies. This is now done in two CWalletDBWrapper constructors.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120385084,120385084,src/wallet/db.h
ryanofsky,2017-06-06T15:04:24Z,"In commit ""Bugfix: wallet: Fix warningStr, errorStr argument order""\n\nNote: the bug seems to have been introduced in #8574.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120387244,120387244,src/wallet/walletdb.cpp
achow101,2017-06-07T21:59:27Z,"Here you say that `-salvagewallet` is only for one wallet file, but in `CWallet::Verify()`, the loop through all wallets checks for `-salvagewallet` and recovers all wallets if `-salvagewallet` is set. Which behavior is correct: salvage all wallets, or salvage only if there is one wallet?\n\nFor the latter, the `-salvagewallet` check in `CWallet::Verify()` can be moved out of the loop.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120755919,120755919,src/wallet/wallet.cpp
luke-jr,2017-06-07T22:18:51Z,"Both are correct. If we get to ::Verify, we should salvage all wallets. But for now, we forbid this combination. Moving it out of the loop is error-prone, and creates unnecessary complexity.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r120759494,120759494,src/wallet/wallet.cpp
ryanofsky,2017-06-09T21:06:47Z,"> This can probably be removed after the importwallet_rescan test is updated.\n\nNever mind, it's used by the receiverequests test.",https://github.com/bitcoin/bitcoin/pull/8694#discussion_r121222897,121222897,src/wallet/test/wallet_tests.cpp
