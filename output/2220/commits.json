[
  {
    "sha": "67155d9299ef75cc73272a259dbfbf72632c3020",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzE1NWQ5Mjk5ZWY3NWNjNzMyNzJhMjU5ZGJmYmY3MjYzMmMzMDIw",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-03-22T17:32:49Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-03-22T18:09:08Z"
      },
      "message": "Minimal architectural changes necessary to support multiple wallets in bitcoin-qt\n- This commit is a minimal restructuring necessary to support multiple wallets in the UI. Please see multiwallet-qt.txt for details.",
      "tree": {
        "sha": "e351256ef8c01d40654ef06b40551c9602f31158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e351256ef8c01d40654ef06b40551c9602f31158"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67155d9299ef75cc73272a259dbfbf72632c3020",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67155d9299ef75cc73272a259dbfbf72632c3020",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67155d9299ef75cc73272a259dbfbf72632c3020",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67155d9299ef75cc73272a259dbfbf72632c3020/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfd71bb4509d12c26e630bc671a542ad5bab4945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfd71bb4509d12c26e630bc671a542ad5bab4945",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfd71bb4509d12c26e630bc671a542ad5bab4945"
      }
    ],
    "stats": {
      "total": 1327,
      "additions": 1099,
      "deletions": 228
    },
    "files": [
      {
        "sha": "d518cf3b1696057599eb7169cfd296c1e6f58d17",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -186,6 +186,9 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/transactionfilterproxy.h \\\n     src/qt/transactionview.h \\\n     src/qt/walletmodel.h \\\n+    src/qt/walletview.h \\\n+    src/qt/walletstack.h \\\n+    src/qt/walletframe.h \\\n     src/bitcoinrpc.h \\\n     src/qt/overviewpage.h \\\n     src/qt/csvmodelwriter.h \\\n@@ -250,6 +253,9 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/transactionfilterproxy.cpp \\\n     src/qt/transactionview.cpp \\\n     src/qt/walletmodel.cpp \\\n+    src/qt/walletview.cpp \\\n+    src/qt/walletstack.cpp \\\n+    src/qt/walletframe.cpp \\\n     src/bitcoinrpc.cpp \\\n     src/rpcdump.cpp \\\n     src/rpcnet.cpp \\"
      },
      {
        "sha": "8394080db016830d3845ccb902b7054d3cd01f62",
        "filename": "multiwallet-qt.txt",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/multiwallet-qt.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/multiwallet-qt.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/multiwallet-qt.txt?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -0,0 +1,53 @@\n+Multiwallet Qt Development and Integration Strategy\n+===================================================\n+\n+In order to support loading of multiple wallets in bitcoin-qt, a few changes in the UI architecture will be needed.\n+Fortunately, only four of the files in the existing project are affected by this change.\n+\n+Three new classes have been implemented in three new .h/.cpp file pairs, with much of the functionality that was previously\n+implemented in the BitcoinGUI class moved over to these new classes.\n+\n+The two existing files most affected, by far, are bitcoingui.h and bitcoingui.cpp, as the BitcoinGUI class will require\n+some major retrofitting.\n+\n+Only requiring some minor changes is bitcoin.cpp.\n+\n+Finally, three new headers and source files will have to be added to bitcoin-qt.pro.\n+\n+Changes to class BitcoinGUI\n+---------------------------\n+The principal change to the BitcoinGUI class concerns the QStackedWidget instance called centralWidget.\n+This widget owns five page views: overviewPage, transactionsPage, addressBookPage, receiveCoinsPage, and sendCoinsPage.\n+\n+A new class called *WalletView* inheriting from QStackedWidget has been written to handle all renderings and updates of\n+these page views. In addition to owning these five page views, a WalletView also has a pointer to a WalletModel instance.\n+This allows the construction of multiple WalletView objects, each rendering a distinct wallet.\n+\n+A second class called *WalletStack*, also inheriting from QStackedWidget, has been written to handle switching focus between\n+different loaded wallets. In its current implementation, as a QStackedWidget, only one wallet can be viewed at a time -\n+but this can be changed later.\n+\n+A third class called *WalletFrame* inheriting from QFrame has been written as a container for embedding all wallet-related\n+controls into BitcoinGUI. At present it just contains a WalletStack instance and does little more than passing on messages\n+from BitcoinGUI to the WalletStack, which in turn passes them to the individual WalletViews. It is a WalletFrame instance\n+that takes the place of what used to be centralWidget in BitcoinGUI. The purpose of this class is to allow future\n+refinements of the wallet controls with minimal need for further modifications to BitcoinGUI, thus greatly simplifying\n+merges while reducing the risk of breaking top-level stuff.\n+\n+Changes to bitcoin.cpp\n+----------------------\n+bitcoin.cpp is the entry point into bitcoin-qt, and as such, will require some minor modifications to provide hooks for\n+multiple wallet support. Most importantly will be the way it instantiates WalletModels and passes them to the\n+singleton BitcoinGUI instance called window. Formerly, BitcoinGUI kept a pointer to a single instance of a WalletModel.\n+The initial change required is very simple: rather than calling window.setWalletModel(&walletModel); we perform the\n+following two steps:\n+\n+window.addWallet(\"~Default\", &walletModel);\n+window.setCurrentWallet(\"~Default\");\n+\n+The string parameter is just an arbitrary name given to the default wallet. It's been prepended with a tilde to avoid name\n+collisions in the future with additional wallets.\n+\n+The shutdown call window.setWalletModel(0) has also been removed. In its place is now:\n+\n+window.removeAllWallets();"
      },
      {
        "sha": "346128c0c459053a4560d7423036a6cf256201c4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -232,7 +232,8 @@ int main(int argc, char *argv[])\n                 WalletModel walletModel(pwalletMain, &optionsModel);\n \n                 window.setClientModel(&clientModel);\n-                window.setWalletModel(&walletModel);\n+                window.addWallet(\"~Default\", &walletModel);\n+                window.setCurrentWallet(\"~Default\");\n \n                 // If -min option passed, start window minimized.\n                 if(GetBoolArg(\"-min\"))\n@@ -253,7 +254,7 @@ int main(int argc, char *argv[])\n \n                 window.hide();\n                 window.setClientModel(0);\n-                window.setWalletModel(0);\n+                window.removeAllWallets();\n                 guiref = 0;\n             }\n             // Shutdown the core and its threads, but don't exit Bitcoin-Qt here"
      },
      {
        "sha": "6b6b86eacaebee65521e22e717d5dd64fe75803d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 208,
        "changes": 278,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -10,26 +10,20 @@\n #include \"bitcoingui.h\"\n \n #include \"transactiontablemodel.h\"\n-#include \"addressbookpage.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"signverifymessagedialog.h\"\n #include \"optionsdialog.h\"\n #include \"aboutdialog.h\"\n #include \"clientmodel.h\"\n #include \"walletmodel.h\"\n-#include \"editaddressdialog.h\"\n+#include \"walletframe.h\"\n #include \"optionsmodel.h\"\n #include \"transactiondescdialog.h\"\n-#include \"addresstablemodel.h\"\n-#include \"transactionview.h\"\n-#include \"overviewpage.h\"\n #include \"bitcoinunits.h\"\n #include \"guiconstants.h\"\n-#include \"askpassphrasedialog.h\"\n #include \"notificator.h\"\n #include \"guiutil.h\"\n #include \"rpcconsole.h\"\n #include \"ui_interface.h\"\n+#include \"wallet.h\"\n \n #ifdef Q_OS_MAC\n #include \"macdockiconhandler.h\"\n@@ -54,13 +48,15 @@\n #include <QUrl>\n #include <QMimeData>\n #include <QStyle>\n+#include <QListWidget>\n \n #include <iostream>\n \n+const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n+\n BitcoinGUI::BitcoinGUI(QWidget *parent):\n     QMainWindow(parent),\n     clientModel(0),\n-    walletModel(0),\n     encryptWalletAction(0),\n     changePassphraseAction(0),\n     aboutQtAction(0),\n@@ -93,31 +89,10 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     // Create system tray icon and notification\n     createTrayIcon();\n \n-    // Create tabs\n-    overviewPage = new OverviewPage();\n-\n-    transactionsPage = new QWidget(this);\n-    QVBoxLayout *vbox = new QVBoxLayout();\n-    transactionView = new TransactionView(this);\n-    vbox->addWidget(transactionView);\n-    transactionsPage->setLayout(vbox);\n-\n-    addressBookPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab);\n-\n-    receiveCoinsPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab);\n-\n-    sendCoinsPage = new SendCoinsDialog(this);\n-\n-    signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n-\n-    centralWidget = new QStackedWidget(this);\n-    centralWidget->addWidget(overviewPage);\n-    centralWidget->addWidget(transactionsPage);\n-    centralWidget->addWidget(addressBookPage);\n-    centralWidget->addWidget(receiveCoinsPage);\n-    centralWidget->addWidget(sendCoinsPage);\n-    setCentralWidget(centralWidget);\n-\n+    // Create wallet frame and make it the central widget\n+    walletFrame = new WalletFrame(this);\n+    setCentralWidget(walletFrame);\n+    \n     // Create status bar\n     statusBar();\n \n@@ -162,27 +137,11 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n \n     syncIconMovie = new QMovie(\":/movies/update_spinner\", \"mng\", this);\n \n-    // Clicking on a transaction on the overview page simply sends you to transaction history page\n-    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), this, SLOT(gotoHistoryPage()));\n-    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n-\n-    // Double-clicking on a transaction on the transaction history page shows details\n-    connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n-\n     rpcConsole = new RPCConsole(this);\n     connect(openRPCConsoleAction, SIGNAL(triggered()), rpcConsole, SLOT(show()));\n \n-    // Clicking on \"Send Coins\" in the address book sends you to the send coins tab\n-    connect(addressBookPage, SIGNAL(sendCoins(QString)), this, SLOT(gotoSendCoinsPage(QString)));\n-    // Clicking on \"Verify Message\" in the address book opens the verify message tab in the Sign/Verify Message dialog\n-    connect(addressBookPage, SIGNAL(verifyMessage(QString)), this, SLOT(gotoVerifyMessageTab(QString)));\n-    // Clicking on \"Sign Message\" in the receive coins page opens the sign message tab in the Sign/Verify Message dialog\n-    connect(receiveCoinsPage, SIGNAL(signMessage(QString)), this, SLOT(gotoSignMessageTab(QString)));\n-\n     // Install event filter to be able to catch status tip events (QEvent::StatusTip)\n     this->installEventFilter(this);\n-\n-    gotoOverviewPage();\n }\n \n BitcoinGUI::~BitcoinGUI()\n@@ -243,7 +202,7 @@ void BitcoinGUI::createActions()\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n     connect(addressBookAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(addressBookAction, SIGNAL(triggered()), this, SLOT(gotoAddressBookPage()));\n-\n+    \n     quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n@@ -377,39 +336,23 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         // Receive and report messages from network/worker thread\n         connect(clientModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n \n-        overviewPage->setClientModel(clientModel);\n-        rpcConsole->setClientModel(clientModel);\n-        addressBookPage->setOptionsModel(clientModel->getOptionsModel());\n-        receiveCoinsPage->setOptionsModel(clientModel->getOptionsModel());\n+        walletFrame->setClientModel(clientModel);\n     }\n }\n \n-void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n+bool BitcoinGUI::addWallet(const QString& name, WalletModel *walletModel)\n {\n-    this->walletModel = walletModel;\n-    if(walletModel)\n-    {\n-        // Receive and report messages from wallet thread\n-        connect(walletModel, SIGNAL(message(QString,QString,unsigned int)), this, SLOT(message(QString,QString,unsigned int)));\n-\n-        // Put transaction list in tabs\n-        transactionView->setModel(walletModel);\n-        overviewPage->setWalletModel(walletModel);\n-        addressBookPage->setModel(walletModel->getAddressTableModel());\n-        receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n-        sendCoinsPage->setModel(walletModel);\n-        signVerifyMessageDialog->setModel(walletModel);\n-\n-        setEncryptionStatus(walletModel->getEncryptionStatus());\n-        connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n-\n-        // Balloon pop-up for new transaction\n-        connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n-                this, SLOT(incomingTransaction(QModelIndex,int,int)));\n-\n-        // Ask for passphrase if needed\n-        connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n-    }\n+    return walletFrame->addWallet(name, walletModel);\n+}\n+\n+bool BitcoinGUI::setCurrentWallet(const QString& name)\n+{\n+    return walletFrame->setCurrentWallet(name);\n+}\n+\n+void BitcoinGUI::removeAllWallets()\n+{\n+    walletFrame->removeAllWallets();\n }\n \n void BitcoinGUI::createTrayIcon()\n@@ -484,6 +427,41 @@ void BitcoinGUI::aboutClicked()\n     dlg.exec();\n }\n \n+void BitcoinGUI::gotoOverviewPage()\n+{\n+    if (walletFrame) walletFrame->gotoOverviewPage();\n+}\n+\n+void BitcoinGUI::gotoHistoryPage()\n+{\n+    if (walletFrame) walletFrame->gotoHistoryPage();\n+}\n+\n+void BitcoinGUI::gotoAddressBookPage()\n+{\n+    if (walletFrame) walletFrame->gotoAddressBookPage();\n+}\n+\n+void BitcoinGUI::gotoReceiveCoinsPage()\n+{\n+    if (walletFrame) walletFrame->gotoReceiveCoinsPage();\n+}\n+\n+void BitcoinGUI::gotoSendCoinsPage()\n+{\n+    if (walletFrame) walletFrame->gotoSendCoinsPage();\n+}\n+\n+void BitcoinGUI::gotoSignMessageTab(QString addr)\n+{\n+    if (walletFrame) walletFrame->gotoSignMessageTab(addr);\n+}\n+\n+void BitcoinGUI::gotoVerifyMessageTab(QString addr)\n+{\n+    if (walletFrame) walletFrame->gotoSignMessageTab(addr);\n+}\n+\n void BitcoinGUI::setNumConnections(int count)\n {\n     QString icon;\n@@ -548,7 +526,7 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         tooltip = tr(\"Up to date\") + QString(\".<br>\") + tooltip;\n         labelBlocksIcon->setPixmap(QIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n \n-        overviewPage->showOutOfSyncWarning(false);\n+        walletFrame->showOutOfSyncWarning(false);\n \n         progressBarLabel->setVisible(false);\n         progressBar->setVisible(false);\n@@ -583,7 +561,7 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n             syncIconMovie->jumpToNextFrame();\n         prevBlocks = count;\n \n-        overviewPage->showOutOfSyncWarning(true);\n+        walletFrame->showOutOfSyncWarning(true);\n \n         tooltip += QString(\"<br>\");\n         tooltip += tr(\"Last received block was generated %1 ago.\").arg(timeBehindText);\n@@ -692,104 +670,20 @@ void BitcoinGUI::askFee(qint64 nFeeRequired, bool *payFee)\n     *payFee = (retval == QMessageBox::Yes);\n }\n \n-void BitcoinGUI::incomingTransaction(const QModelIndex& parent, int start, int /*end*/)\n+void BitcoinGUI::incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address)\n {\n-    // Prevent balloon-spam when initial block download is in progress\n-    if(!walletModel || !clientModel || clientModel->inInitialBlockDownload())\n-        return;\n-\n-    TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n-\n-    QString date = ttm->index(start, TransactionTableModel::Date, parent)\n-                     .data().toString();\n-    qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent)\n-                      .data(Qt::EditRole).toULongLong();\n-    QString type = ttm->index(start, TransactionTableModel::Type, parent)\n-                     .data().toString();\n-    QString address = ttm->index(start, TransactionTableModel::ToAddress, parent)\n-                        .data().toString();\n-\n-    // On new transaction, make an info balloon\n+   // On new transaction, make an info balloon\n     message((amount)<0 ? tr(\"Sent transaction\") : tr(\"Incoming transaction\"),\n              tr(\"Date: %1\\n\"\n                 \"Amount: %2\\n\"\n                 \"Type: %3\\n\"\n                 \"Address: %4\\n\")\n                   .arg(date)\n-                  .arg(BitcoinUnits::formatWithUnit(walletModel->getOptionsModel()->getDisplayUnit(), amount, true))\n+                  .arg(BitcoinUnits::formatWithUnit(unit, amount, true))\n                   .arg(type)\n                   .arg(address), CClientUIInterface::MSG_INFORMATION);\n }\n \n-void BitcoinGUI::gotoOverviewPage()\n-{\n-    overviewAction->setChecked(true);\n-    centralWidget->setCurrentWidget(overviewPage);\n-\n-    exportAction->setEnabled(false);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-}\n-\n-void BitcoinGUI::gotoHistoryPage()\n-{\n-    historyAction->setChecked(true);\n-    centralWidget->setCurrentWidget(transactionsPage);\n-\n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), transactionView, SLOT(exportClicked()));\n-}\n-\n-void BitcoinGUI::gotoAddressBookPage()\n-{\n-    addressBookAction->setChecked(true);\n-    centralWidget->setCurrentWidget(addressBookPage);\n-\n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), addressBookPage, SLOT(exportClicked()));\n-}\n-\n-void BitcoinGUI::gotoReceiveCoinsPage()\n-{\n-    receiveCoinsAction->setChecked(true);\n-    centralWidget->setCurrentWidget(receiveCoinsPage);\n-\n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), receiveCoinsPage, SLOT(exportClicked()));\n-}\n-\n-void BitcoinGUI::gotoSendCoinsPage(QString addr)\n-{\n-    sendCoinsAction->setChecked(true);\n-    centralWidget->setCurrentWidget(sendCoinsPage);\n-\n-    exportAction->setEnabled(false);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-\n-    if(!addr.isEmpty())\n-        sendCoinsPage->setAddress(addr);\n-}\n-\n-void BitcoinGUI::gotoSignMessageTab(QString addr)\n-{\n-    // call show() in showTab_SM()\n-    signVerifyMessageDialog->showTab_SM(true);\n-\n-    if(!addr.isEmpty())\n-        signVerifyMessageDialog->setAddress_SM(addr);\n-}\n-\n-void BitcoinGUI::gotoVerifyMessageTab(QString addr)\n-{\n-    // call show() in showTab_VM()\n-    signVerifyMessageDialog->showTab_VM(true);\n-\n-    if(!addr.isEmpty())\n-        signVerifyMessageDialog->setAddress_VM(addr);\n-}\n-\n void BitcoinGUI::dragEnterEvent(QDragEnterEvent *event)\n {\n     // Accept only URIs\n@@ -805,13 +699,13 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n         QList<QUrl> uris = event->mimeData()->urls();\n         foreach(const QUrl &uri, uris)\n         {\n-            if (sendCoinsPage->handleURI(uri.toString()))\n+            if (walletFrame->handleURI(uri.toString()))\n                 nValidUrisFound++;\n         }\n \n         // if valid URIs were found\n         if (nValidUrisFound)\n-            gotoSendCoinsPage();\n+            walletFrame->gotoSendCoinsPage();\n         else\n             message(tr(\"URI handling\"), tr(\"URI can not be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                       CClientUIInterface::ICON_WARNING);\n@@ -835,12 +729,7 @@ bool BitcoinGUI::eventFilter(QObject *object, QEvent *event)\n void BitcoinGUI::handleURI(QString strURI)\n {\n     // URI has to be valid\n-    if (sendCoinsPage->handleURI(strURI))\n-    {\n-        showNormalIfMinimized();\n-        gotoSendCoinsPage();\n-    }\n-    else\n+    if (!walletFrame->handleURI(strURI))\n         message(tr(\"URI handling\"), tr(\"URI can not be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                   CClientUIInterface::ICON_WARNING);\n }\n@@ -876,49 +765,22 @@ void BitcoinGUI::setEncryptionStatus(int status)\n \n void BitcoinGUI::encryptWallet(bool status)\n {\n-    if(!walletModel)\n-        return;\n-    AskPassphraseDialog dlg(status ? AskPassphraseDialog::Encrypt:\n-                                     AskPassphraseDialog::Decrypt, this);\n-    dlg.setModel(walletModel);\n-    dlg.exec();\n-\n-    setEncryptionStatus(walletModel->getEncryptionStatus());\n+    walletFrame->encryptWallet(status);\n }\n \n void BitcoinGUI::backupWallet()\n {\n-    QString saveDir = QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation);\n-    QString filename = QFileDialog::getSaveFileName(this, tr(\"Backup Wallet\"), saveDir, tr(\"Wallet Data (*.dat)\"));\n-    if(!filename.isEmpty()) {\n-        if(!walletModel->backupWallet(filename)) {\n-            message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to the new location.\"),\n-                      CClientUIInterface::MSG_ERROR);\n-        }\n-        else\n-            message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to the new location.\"),\n-                      CClientUIInterface::MSG_INFORMATION);\n-    }\n+    walletFrame->backupWallet();\n }\n \n void BitcoinGUI::changePassphrase()\n {\n-    AskPassphraseDialog dlg(AskPassphraseDialog::ChangePass, this);\n-    dlg.setModel(walletModel);\n-    dlg.exec();\n+    walletFrame->changePassphrase();\n }\n \n void BitcoinGUI::unlockWallet()\n {\n-    if(!walletModel)\n-        return;\n-    // Unlock wallet when requested by wallet model\n-    if(walletModel->getEncryptionStatus() == WalletModel::Locked)\n-    {\n-        AskPassphraseDialog dlg(AskPassphraseDialog::Unlock, this);\n-        dlg.setModel(walletModel);\n-        dlg.exec();\n-    }\n+    walletFrame->unlockWallet();\n }\n \n void BitcoinGUI::showNormalIfMinimized(bool fToggleHidden)"
      },
      {
        "sha": "f9c550035aac41b652cf029f0fccc303187a4aef",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -3,10 +3,14 @@\n \n #include <QMainWindow>\n #include <QSystemTrayIcon>\n+#include <QMap>\n \n class TransactionTableModel;\n+class WalletFrame;\n+class WalletView;\n class ClientModel;\n class WalletModel;\n+class WalletStack;\n class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n@@ -15,11 +19,16 @@ class SignVerifyMessageDialog;\n class Notificator;\n class RPCConsole;\n \n+class CWallet;\n+\n QT_BEGIN_NAMESPACE\n class QLabel;\n class QModelIndex;\n class QProgressBar;\n class QStackedWidget;\n+class QUrl;\n+class QListWidget;\n+class QPushButton;\n QT_END_NAMESPACE\n \n /**\n@@ -31,6 +40,8 @@ class BitcoinGUI : public QMainWindow\n     Q_OBJECT\n \n public:\n+    static const QString DEFAULT_WALLET;\n+    \n     explicit BitcoinGUI(QWidget *parent = 0);\n     ~BitcoinGUI();\n \n@@ -42,7 +53,11 @@ class BitcoinGUI : public QMainWindow\n         The wallet model represents a bitcoin wallet, and offers access to the list of transactions, address book and sending\n         functionality.\n     */\n-    void setWalletModel(WalletModel *walletModel);\n+\n+    bool addWallet(const QString& name, WalletModel *walletModel);\n+    bool setCurrentWallet(const QString& name);\n+    \n+    void removeAllWallets();\n \n protected:\n     void changeEvent(QEvent *e);\n@@ -53,16 +68,7 @@ class BitcoinGUI : public QMainWindow\n \n private:\n     ClientModel *clientModel;\n-    WalletModel *walletModel;\n-\n-    QStackedWidget *centralWidget;\n-\n-    OverviewPage *overviewPage;\n-    QWidget *transactionsPage;\n-    AddressBookPage *addressBookPage;\n-    AddressBookPage *receiveCoinsPage;\n-    SendCoinsDialog *sendCoinsPage;\n-    SignVerifyMessageDialog *signVerifyMessageDialog;\n+    WalletFrame *walletFrame;\n \n     QLabel *labelEncryptionIcon;\n     QLabel *labelConnectionsIcon;\n@@ -88,7 +94,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *changePassphraseAction;\n     QAction *aboutQtAction;\n     QAction *openRPCConsoleAction;\n-\n+    \n     QSystemTrayIcon *trayIcon;\n     Notificator *notificator;\n     TransactionView *transactionView;\n@@ -139,6 +145,9 @@ public slots:\n     void askFee(qint64 nFeeRequired, bool *payFee);\n     void handleURI(QString strURI);\n \n+    /** Show incoming transaction notification for new transactions. */\n+    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+\n private slots:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n@@ -149,7 +158,7 @@ private slots:\n     /** Switch to receive coins page */\n     void gotoReceiveCoinsPage();\n     /** Switch to send coins page */\n-    void gotoSendCoinsPage(QString addr = \"\");\n+    void gotoSendCoinsPage();\n \n     /** Show Sign/Verify Message dialog and switch to sign message tab */\n     void gotoSignMessageTab(QString addr = \"\");\n@@ -164,11 +173,6 @@ private slots:\n     /** Handle tray icon clicked */\n     void trayIconActivated(QSystemTrayIcon::ActivationReason reason);\n #endif\n-    /** Show incoming transaction notification for new transactions.\n-\n-        The new items are those between start and end inclusive, under the given parent item.\n-    */\n-    void incomingTransaction(const QModelIndex& parent, int start, int /*end*/);\n     /** Encrypt the wallet */\n     void encryptWallet(bool status);\n     /** Backup the wallet */"
      },
      {
        "sha": "a53aa65466924ef7307821bffdaa3e26b4f2bcc5",
        "filename": "src/qt/walletframe.cpp",
        "status": "added",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -0,0 +1,129 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#include \"walletframe.h\"\n+#include \"bitcoingui.h\"\n+#include \"walletstack.h\"\n+\n+#include <QVBoxLayout>\n+#include <QMessageBox>\n+\n+#include <stdio.h>\n+\n+WalletFrame::WalletFrame(BitcoinGUI *_gui) :\n+    QFrame(_gui),\n+    gui(_gui),\n+    clientModel(0)\n+{\n+    // Leave HBox hook for adding a list view later\n+    QHBoxLayout *walletFrameLayout = new QHBoxLayout(this);\n+    walletStack = new WalletStack(this);\n+    walletStack->setBitcoinGUI(gui);\n+    walletFrameLayout->addWidget(walletStack);\n+}\n+\n+WalletFrame::~WalletFrame()\n+{\n+}\n+\n+void WalletFrame::setClientModel(ClientModel *clientModel)\n+{\n+    this->clientModel = clientModel;\n+    walletStack->setClientModel(clientModel);\n+}\n+\n+bool WalletFrame::addWallet(const QString& name, WalletModel *walletModel)\n+{\n+    return walletStack->addWallet(name, walletModel);\n+}\n+\n+bool WalletFrame::setCurrentWallet(const QString& name)\n+{\n+    // TODO: Check if valid name\n+    walletStack->setCurrentWallet(name);\n+    return true;\n+}\n+\n+void WalletFrame::removeAllWallets()\n+{\n+    walletStack->removeAllWallets();\n+}\n+\n+bool WalletFrame::handleURI(const QString &uri)\n+{\n+    return walletStack->handleURI(uri);\n+}\n+\n+void WalletFrame::showOutOfSyncWarning(bool fShow)\n+{\n+    if (!walletStack) {\n+        QMessageBox box;\n+        box.setText(\"walletStack is null\");\n+        box.exec();\n+        return;\n+    }\n+    walletStack->showOutOfSyncWarning(fShow);\n+}\n+\n+void WalletFrame::gotoOverviewPage()\n+{\n+    walletStack->gotoOverviewPage();\n+}\n+\n+void WalletFrame::gotoHistoryPage()\n+{\n+    walletStack->gotoHistoryPage();\n+}\n+\n+void WalletFrame::gotoAddressBookPage()\n+{\n+    walletStack->gotoAddressBookPage();\n+}\n+\n+void WalletFrame::gotoReceiveCoinsPage()\n+{\n+    walletStack->gotoReceiveCoinsPage();\n+}\n+\n+void WalletFrame::gotoSendCoinsPage()\n+{\n+    walletStack->gotoSendCoinsPage();\n+}\n+\n+void WalletFrame::gotoSignMessageTab(QString addr)\n+{\n+    walletStack->gotoSignMessageTab(addr);\n+}\n+\n+void WalletFrame::gotoVerifyMessageTab(QString addr)\n+{\n+    walletStack->gotoSignMessageTab(addr);\n+}\n+\n+void WalletFrame::encryptWallet(bool status)\n+{\n+    walletStack->encryptWallet(status);\n+}\n+\n+void WalletFrame::backupWallet()\n+{\n+    walletStack->backupWallet();\n+}\n+\n+void WalletFrame::changePassphrase()\n+{\n+    walletStack->changePassphrase();\n+}\n+\n+void WalletFrame::unlockWallet()\n+{\n+    walletStack->unlockWallet();\n+}\n+\n+void WalletFrame::setEncryptionStatus()\n+{\n+    walletStack->setEncryptionStatus();\n+}"
      },
      {
        "sha": "5b4baf72556f602b752ec52b06f80ca02847c4ad",
        "filename": "src/qt/walletframe.h",
        "status": "added",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#ifndef WALLETFRAME_H\n+#define WALLETFRAME_H\n+\n+#include <QFrame>\n+\n+class BitcoinGUI;\n+class ClientModel;\n+class WalletModel;\n+class WalletStack;\n+\n+class WalletFrame : public QFrame\n+{\n+    Q_OBJECT\n+public:\n+    explicit WalletFrame(BitcoinGUI *_gui);\n+    ~WalletFrame();\n+\n+    void setClientModel(ClientModel *clientModel);\n+\n+    bool addWallet(const QString& name, WalletModel *walletModel);\n+    bool setCurrentWallet(const QString& name);\n+    \n+    void removeAllWallets();\n+\n+    bool handleURI(const QString &uri);\n+\n+    void showOutOfSyncWarning(bool fShow);\n+\n+private:\n+    BitcoinGUI *gui;\n+    ClientModel *clientModel;\n+    WalletStack *walletStack;\n+\n+public slots:\n+    /** Switch to overview (home) page */\n+    void gotoOverviewPage();\n+    /** Switch to history (transactions) page */\n+    void gotoHistoryPage();\n+    /** Switch to address book page */\n+    void gotoAddressBookPage();\n+    /** Switch to receive coins page */\n+    void gotoReceiveCoinsPage();\n+    /** Switch to send coins page */\n+    void gotoSendCoinsPage();\n+\n+    /** Show Sign/Verify Message dialog and switch to sign message tab */\n+    void gotoSignMessageTab(QString addr = \"\");\n+    /** Show Sign/Verify Message dialog and switch to verify message tab */\n+    void gotoVerifyMessageTab(QString addr = \"\");\n+\n+    /** Encrypt the wallet */\n+    void encryptWallet(bool status);\n+    /** Backup the wallet */\n+    void backupWallet();\n+    /** Change encrypted wallet passphrase */\n+    void changePassphrase();\n+    /** Ask for passphrase to unlock wallet temporarily */\n+    void unlockWallet();\n+\n+    /** Set the encryption status as shown in the UI.\n+     @param[in] status            current encryption status\n+     @see WalletModel::EncryptionStatus\n+     */\n+    void setEncryptionStatus();\n+};\n+\n+#endif // WALLETFRAME_H\n\\ No newline at end of file"
      },
      {
        "sha": "271d1c79248f221fdc593d1b0421cc140445b4dc",
        "filename": "src/qt/walletstack.cpp",
        "status": "added",
        "additions": 155,
        "deletions": 0,
        "changes": 155,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletstack.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletstack.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletstack.cpp?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -0,0 +1,155 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#include \"walletstack.h\"\n+#include \"walletview.h\"\n+#include \"bitcoingui.h\"\n+\n+#include <QMap>\n+#include <QMessageBox>\n+\n+WalletStack::WalletStack(QWidget *parent) :\n+    QStackedWidget(parent),\n+    clientModel(0),\n+    bOutOfSync(true)\n+{\n+}\n+\n+WalletStack::~WalletStack()\n+{\n+}\n+\n+bool WalletStack::addWallet(const QString& name, WalletModel *walletModel)\n+{\n+    if (!gui || !clientModel || mapWalletViews.count(name) > 0)\n+        return false;\n+\n+    WalletView *walletView = new WalletView(this, gui);\n+    walletView->setBitcoinGUI(gui);\n+    walletView->setClientModel(clientModel);\n+    walletView->setWalletModel(walletModel);\n+    walletView->showOutOfSyncWarning(bOutOfSync);\n+    addWidget(walletView);\n+    mapWalletViews[name] = walletView;\n+    return true;\n+}\n+\n+bool WalletStack::removeWallet(const QString& name)\n+{\n+    if (mapWalletViews.count(name) == 0) return false;\n+    WalletView *walletView = mapWalletViews.take(name);\n+    removeWidget(walletView);\n+    return true;\n+}\n+\n+void WalletStack::removeAllWallets()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        removeWidget(i.value());\n+    mapWalletViews.clear();\n+}\n+\n+bool WalletStack::handleURI(const QString &uri)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (!walletView) return false;\n+\n+    return walletView->handleURI(uri);\n+}\n+\n+void WalletStack::showOutOfSyncWarning(bool fShow)\n+{\n+    bOutOfSync = fShow;\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->showOutOfSyncWarning(fShow);\n+}\n+\n+void WalletStack::gotoOverviewPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoOverviewPage();\n+}\n+\n+void WalletStack::gotoHistoryPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoHistoryPage();\n+}\n+\n+void WalletStack::gotoAddressBookPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoAddressBookPage();\n+}\n+\n+void WalletStack::gotoReceiveCoinsPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoReceiveCoinsPage();\n+}\n+\n+void WalletStack::gotoSendCoinsPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoSendCoinsPage();\n+}\n+\n+void WalletStack::gotoSignMessageTab(QString addr)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->gotoSignMessageTab(addr);\n+}\n+\n+void WalletStack::gotoVerifyMessageTab(QString addr)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->gotoVerifyMessageTab(addr);\n+}\n+\n+void WalletStack::encryptWallet(bool status)\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->encryptWallet(status);\n+}\n+\n+void WalletStack::backupWallet()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->backupWallet();\n+}\n+\n+void WalletStack::changePassphrase()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->changePassphrase();\n+}\n+\n+void WalletStack::unlockWallet()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->unlockWallet();\n+}\n+\n+void WalletStack::setEncryptionStatus()\n+{\n+    WalletView *walletView = (WalletView*)currentWidget();\n+    if (walletView) walletView->setEncryptionStatus();\n+}\n+\n+void WalletStack::setCurrentWallet(const QString& name)\n+{\n+    if (mapWalletViews.count(name) == 0) return;\n+    WalletView *walletView = mapWalletViews.value(name);\n+    setCurrentWidget(walletView);\n+    walletView->setEncryptionStatus();\n+}"
      },
      {
        "sha": "f3485816e951dbc3e9fb05cfc2ef5019e5914433",
        "filename": "src/qt/walletstack.h",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletstack.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletstack.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletstack.h?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#ifndef WALLETSTACK_H\n+#define WALLETSTACK_H\n+\n+#include <QStackedWidget>\n+#include <QMap>\n+#include <boost/shared_ptr.hpp>\n+\n+class BitcoinGUI;\n+class TransactionTableModel;\n+class ClientModel;\n+class WalletModel;\n+class WalletView;\n+class TransactionView;\n+class OverviewPage;\n+class AddressBookPage;\n+class SendCoinsDialog;\n+class SignVerifyMessageDialog;\n+class Notificator;\n+class RPCConsole;\n+\n+class CWalletManager;\n+\n+QT_BEGIN_NAMESPACE\n+class QLabel;\n+class QModelIndex;\n+QT_END_NAMESPACE\n+\n+/*\n+  WalletStack class. This class is a container for WalletView instances. It takes the place of centralWidget.\n+  It was added to support multiple wallet functionality. It communicates with both the client and the\n+  wallet models to give the user an up-to-date view of the current core state. It manages all the wallet views\n+  it contains and updates them accordingly.\n+ */\n+class WalletStack : public QStackedWidget\n+{\n+    Q_OBJECT\n+public:\n+    explicit WalletStack(QWidget *parent = 0);\n+    ~WalletStack();\n+\n+    void setBitcoinGUI(BitcoinGUI *gui) { this->gui = gui; }\n+    \n+    void setClientModel(ClientModel *clientModel) { this->clientModel = clientModel; }\n+    \n+    bool addWallet(const QString& name, WalletModel *walletModel);\n+    bool removeWallet(const QString& name);\n+    \n+    void removeAllWallets();\n+\n+    bool handleURI(const QString &uri);\n+    \n+    void showOutOfSyncWarning(bool fShow);\n+\n+private:\n+    BitcoinGUI *gui;\n+    ClientModel *clientModel;\n+    QMap<QString, WalletView*> mapWalletViews;\n+\n+    bool bOutOfSync;\n+\n+public slots:\n+    void setCurrentWallet(const QString& name);\n+\n+    /** Switch to overview (home) page */\n+    void gotoOverviewPage();\n+    /** Switch to history (transactions) page */\n+    void gotoHistoryPage();\n+    /** Switch to address book page */\n+    void gotoAddressBookPage();\n+    /** Switch to receive coins page */\n+    void gotoReceiveCoinsPage();\n+    /** Switch to send coins page */\n+    void gotoSendCoinsPage();\n+\n+    /** Show Sign/Verify Message dialog and switch to sign message tab */\n+    void gotoSignMessageTab(QString addr = \"\");\n+    /** Show Sign/Verify Message dialog and switch to verify message tab */\n+    void gotoVerifyMessageTab(QString addr = \"\");\n+\n+    /** Encrypt the wallet */\n+    void encryptWallet(bool status);\n+    /** Backup the wallet */\n+    void backupWallet();\n+    /** Change encrypted wallet passphrase */\n+    void changePassphrase();\n+    /** Ask for passphrase to unlock wallet temporarily */\n+    void unlockWallet();\n+\n+    /** Set the encryption status as shown in the UI.\n+     @param[in] status            current encryption status\n+     @see WalletModel::EncryptionStatus\n+     */\n+    void setEncryptionStatus();\n+};\n+\n+#endif // WALLETSTACK_H"
      },
      {
        "sha": "7dd36234c96ff5940d2a7ffdf4e8043c4a1cdd7b",
        "filename": "src/qt/walletview.cpp",
        "status": "added",
        "additions": 354,
        "deletions": 0,
        "changes": 354,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -0,0 +1,354 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#include \"walletview.h\"\n+#include \"bitcoingui.h\"\n+#include \"transactiontablemodel.h\"\n+#include \"addressbookpage.h\"\n+#include \"sendcoinsdialog.h\"\n+#include \"signverifymessagedialog.h\"\n+#include \"optionsdialog.h\"\n+#include \"aboutdialog.h\"\n+#include \"clientmodel.h\"\n+#include \"walletmodel.h\"\n+#include \"editaddressdialog.h\"\n+#include \"optionsmodel.h\"\n+#include \"transactiondescdialog.h\"\n+#include \"addresstablemodel.h\"\n+#include \"transactionview.h\"\n+#include \"overviewpage.h\"\n+#include \"bitcoinunits.h\"\n+#include \"guiconstants.h\"\n+#include \"askpassphrasedialog.h\"\n+#include \"guiutil.h\"\n+#include \"ui_interface.h\"\n+\n+#include <QVBoxLayout>\n+#include <QActionGroup>\n+#include <QAction>\n+#include <QLabel>\n+#include <QDesktopServices>\n+#include <QFileDialog>\n+\n+WalletView::WalletView(QWidget *parent, BitcoinGUI *_gui):\n+    QStackedWidget(parent),\n+    gui(_gui),\n+    clientModel(0),\n+    walletModel(0),\n+    encryptWalletAction(0),\n+    changePassphraseAction(0)\n+{\n+    // Create actions for the toolbar, menu bar and tray/dock icon\n+    createActions();\n+\n+    // Create tabs\n+    overviewPage = new OverviewPage();\n+\n+    transactionsPage = new QWidget(this);\n+    QVBoxLayout *vbox = new QVBoxLayout();\n+    transactionView = new TransactionView(this);\n+    vbox->addWidget(transactionView);\n+    transactionsPage->setLayout(vbox);\n+\n+    addressBookPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab);\n+\n+    receiveCoinsPage = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab);\n+\n+    sendCoinsPage = new SendCoinsDialog(gui);\n+\n+    signVerifyMessageDialog = new SignVerifyMessageDialog(gui);\n+\n+    addWidget(overviewPage);\n+    addWidget(transactionsPage);\n+    addWidget(addressBookPage);\n+    addWidget(receiveCoinsPage);\n+    addWidget(sendCoinsPage);\n+\n+    // Clicking on a transaction on the overview page simply sends you to transaction history page\n+    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), this, SLOT(gotoHistoryPage()));\n+    connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n+\n+    // Double-clicking on a transaction on the transaction history page shows details\n+    connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n+\n+    // Clicking on \"Verify Message\" in the address book sends you to the verify message tab\n+    connect(addressBookPage, SIGNAL(verifyMessage(QString)), this, SLOT(gotoVerifyMessageTab(QString)));\n+    // Clicking on \"Sign Message\" in the receive coins page sends you to the sign message tab\n+    connect(receiveCoinsPage, SIGNAL(signMessage(QString)), this, SLOT(gotoSignMessageTab(QString)));\n+\n+    gotoOverviewPage();\n+}\n+\n+WalletView::~WalletView()\n+{\n+}\n+\n+void WalletView::createActions()\n+{\n+    QActionGroup *tabGroup = new QActionGroup(this);\n+\n+    overviewAction = new QAction(QIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n+    overviewAction->setStatusTip(tr(\"Show general overview of wallet\"));\n+    overviewAction->setToolTip(overviewAction->statusTip());\n+    overviewAction->setCheckable(true);\n+    overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));\n+    tabGroup->addAction(overviewAction);\n+\n+    sendCoinsAction = new QAction(QIcon(\":/icons/send\"), tr(\"&Send coins\"), this);\n+    sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n+    sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n+    sendCoinsAction->setCheckable(true);\n+    sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n+    tabGroup->addAction(sendCoinsAction);\n+\n+    receiveCoinsAction = new QAction(QIcon(\":/icons/receiving_addresses\"), tr(\"&Receive coins\"), this);\n+    receiveCoinsAction->setStatusTip(tr(\"Show the list of addresses for receiving payments\"));\n+    receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n+    receiveCoinsAction->setCheckable(true);\n+    receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n+    tabGroup->addAction(receiveCoinsAction);\n+\n+    historyAction = new QAction(QIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n+    historyAction->setStatusTip(tr(\"Browse transaction history\"));\n+    historyAction->setToolTip(historyAction->statusTip());\n+    historyAction->setCheckable(true);\n+    historyAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_4));\n+    tabGroup->addAction(historyAction);\n+\n+    addressBookAction = new QAction(QIcon(\":/icons/address-book\"), tr(\"&Address Book\"), this);\n+    addressBookAction->setStatusTip(tr(\"Edit the list of stored addresses and labels\"));\n+    addressBookAction->setToolTip(addressBookAction->statusTip());\n+    addressBookAction->setCheckable(true);\n+    addressBookAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_5));\n+    tabGroup->addAction(addressBookAction);\n+\n+    connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n+    connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n+    connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n+    connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n+    connect(addressBookAction, SIGNAL(triggered()), this, SLOT(gotoAddressBookPage()));\n+\n+    encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n+    encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n+    encryptWalletAction->setCheckable(true);\n+    backupWalletAction = new QAction(QIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n+    backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n+    changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n+    changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n+    signMessageAction = new QAction(QIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n+    signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n+    verifyMessageAction = new QAction(QIcon(\":/icons/transaction_0\"), tr(\"&Verify message...\"), this);\n+    verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n+\n+    exportAction = new QAction(QIcon(\":/icons/export\"), tr(\"&Export...\"), this);\n+    exportAction->setStatusTip(tr(\"Export the data in the current tab to a file\"));\n+    exportAction->setToolTip(exportAction->statusTip());\n+\n+    connect(encryptWalletAction, SIGNAL(triggered(bool)), this, SLOT(encryptWallet(bool)));\n+    connect(backupWalletAction, SIGNAL(triggered()), this, SLOT(backupWallet()));\n+    connect(changePassphraseAction, SIGNAL(triggered()), this, SLOT(changePassphrase()));\n+    connect(signMessageAction, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));\n+    connect(verifyMessageAction, SIGNAL(triggered()), this, SLOT(gotoVerifyMessageTab()));\n+}\n+\n+void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n+{\n+    this->gui = gui;\n+}\n+\n+void WalletView::setClientModel(ClientModel *clientModel)\n+{\n+    this->clientModel = clientModel;\n+    if(clientModel)\n+    {\n+        overviewPage->setClientModel(clientModel);\n+        addressBookPage->setOptionsModel(clientModel->getOptionsModel());\n+        receiveCoinsPage->setOptionsModel(clientModel->getOptionsModel());\n+    }\n+}\n+\n+void WalletView::setWalletModel(WalletModel *walletModel)\n+{\n+    this->walletModel = walletModel;\n+    if(walletModel)\n+    {\n+        // Receive and report messages from wallet thread\n+        connect(walletModel, SIGNAL(message(QString,QString,unsigned int)), gui, SLOT(message(QString,QString,unsigned int)));\n+\n+        // Put transaction list in tabs\n+        transactionView->setModel(walletModel);\n+        overviewPage->setWalletModel(walletModel);\n+        addressBookPage->setModel(walletModel->getAddressTableModel());\n+        receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n+        sendCoinsPage->setModel(walletModel);\n+        signVerifyMessageDialog->setModel(walletModel);\n+\n+        setEncryptionStatus();\n+        connect(walletModel, SIGNAL(encryptionStatusChanged(int)), gui, SLOT(setEncryptionStatus(int)));\n+\n+        // Balloon pop-up for new transaction\n+        connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n+                this, SLOT(incomingTransaction(QModelIndex,int,int)));\n+\n+        // Ask for passphrase if needed\n+        connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+    }\n+}\n+\n+void WalletView::incomingTransaction(const QModelIndex& parent, int start, int /*end*/)\n+{\n+    // Prevent balloon-spam when initial block download is in progress\n+    if(!walletModel || !clientModel || clientModel->inInitialBlockDownload())\n+        return;\n+\n+    TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n+\n+    QString date = ttm->index(start, TransactionTableModel::Date, parent)\n+                     .data().toString();\n+    qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent)\n+                      .data(Qt::EditRole).toULongLong();\n+    QString type = ttm->index(start, TransactionTableModel::Type, parent)\n+                     .data().toString();\n+    QString address = ttm->index(start, TransactionTableModel::ToAddress, parent)\n+                        .data().toString();\n+\n+    gui->incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address);\n+}\n+\n+void WalletView::gotoOverviewPage()\n+{\n+    overviewAction->setChecked(true);\n+    setCurrentWidget(overviewPage);\n+\n+    exportAction->setEnabled(false);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+}\n+\n+void WalletView::gotoHistoryPage()\n+{\n+    historyAction->setChecked(true);\n+    setCurrentWidget(transactionsPage);\n+\n+    exportAction->setEnabled(true);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    connect(exportAction, SIGNAL(triggered()), transactionView, SLOT(exportClicked()));\n+}\n+\n+void WalletView::gotoAddressBookPage()\n+{\n+    addressBookAction->setChecked(true);\n+    setCurrentWidget(addressBookPage);\n+\n+    exportAction->setEnabled(true);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    connect(exportAction, SIGNAL(triggered()), addressBookPage, SLOT(exportClicked()));\n+}\n+\n+void WalletView::gotoReceiveCoinsPage()\n+{\n+    receiveCoinsAction->setChecked(true);\n+    setCurrentWidget(receiveCoinsPage);\n+\n+    exportAction->setEnabled(true);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    connect(exportAction, SIGNAL(triggered()), receiveCoinsPage, SLOT(exportClicked()));\n+}\n+\n+void WalletView::gotoSendCoinsPage()\n+{\n+    sendCoinsAction->setChecked(true);\n+    setCurrentWidget(sendCoinsPage);\n+\n+    exportAction->setEnabled(false);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+}\n+\n+void WalletView::gotoSignMessageTab(QString addr)\n+{\n+    // call show() in showTab_SM()\n+    signVerifyMessageDialog->showTab_SM(true);\n+\n+    if(!addr.isEmpty())\n+        signVerifyMessageDialog->setAddress_SM(addr);\n+}\n+\n+void WalletView::gotoVerifyMessageTab(QString addr)\n+{\n+    // call show() in showTab_VM()\n+    signVerifyMessageDialog->showTab_VM(true);\n+\n+    if(!addr.isEmpty())\n+        signVerifyMessageDialog->setAddress_VM(addr);\n+}\n+\n+bool WalletView::handleURI(const QString& strURI)\n+{\n+    // URI has to be valid\n+    if (sendCoinsPage->handleURI(strURI))\n+    {\n+        gotoSendCoinsPage();\n+        return true;\n+    }\n+    else\n+        return false;\n+}\n+\n+void WalletView::showOutOfSyncWarning(bool fShow)\n+{\n+    overviewPage->showOutOfSyncWarning(fShow);\n+}\n+\n+void WalletView::setEncryptionStatus()\n+{\n+    gui->setEncryptionStatus(walletModel->getEncryptionStatus());\n+}\n+\n+void WalletView::encryptWallet(bool status)\n+{\n+    if(!walletModel)\n+        return;\n+    AskPassphraseDialog dlg(status ? AskPassphraseDialog::Encrypt:\n+                                     AskPassphraseDialog::Decrypt, this);\n+    dlg.setModel(walletModel);\n+    dlg.exec();\n+\n+    setEncryptionStatus();\n+}\n+\n+void WalletView::backupWallet()\n+{\n+    QString saveDir = QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation);\n+    QString filename = QFileDialog::getSaveFileName(this, tr(\"Backup Wallet\"), saveDir, tr(\"Wallet Data (*.dat)\"));\n+    if(!filename.isEmpty()) {\n+        if(!walletModel->backupWallet(filename)) {\n+            gui->message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to the new location.\"),\n+                      CClientUIInterface::MSG_ERROR);\n+        }\n+        else\n+            gui->message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to the new location.\"),\n+                      CClientUIInterface::MSG_INFORMATION);\n+    }\n+}\n+\n+void WalletView::changePassphrase()\n+{\n+    AskPassphraseDialog dlg(AskPassphraseDialog::ChangePass, this);\n+    dlg.setModel(walletModel);\n+    dlg.exec();\n+}\n+\n+void WalletView::unlockWallet()\n+{\n+    if(!walletModel)\n+        return;\n+    // Unlock wallet when requested by wallet model\n+    if(walletModel->getEncryptionStatus() == WalletModel::Locked)\n+    {\n+        AskPassphraseDialog dlg(AskPassphraseDialog::Unlock, this);\n+        dlg.setModel(walletModel);\n+        dlg.exec();\n+    }\n+}"
      },
      {
        "sha": "38eb0227af4ea9dd336ab701fd277f0abc8ad1fa",
        "filename": "src/qt/walletview.h",
        "status": "added",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67155d9299ef75cc73272a259dbfbf72632c3020/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=67155d9299ef75cc73272a259dbfbf72632c3020",
        "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * Qt4 bitcoin GUI.\n+ *\n+ * W.J. van der Laan 2011-2012\n+ * The Bitcoin Developers 2011-2013\n+ */\n+#ifndef WALLETVIEW_H\n+#define WALLETVIEW_H\n+\n+#include <QStackedWidget>\n+\n+class BitcoinGUI;\n+class TransactionTableModel;\n+class ClientModel;\n+class WalletModel;\n+class TransactionView;\n+class OverviewPage;\n+class AddressBookPage;\n+class SendCoinsDialog;\n+class SignVerifyMessageDialog;\n+class Notificator;\n+class RPCConsole;\n+\n+QT_BEGIN_NAMESPACE\n+class QLabel;\n+class QModelIndex;\n+QT_END_NAMESPACE\n+\n+/*\n+  WalletView class. This class represents the view to a single wallet.\n+  It was added to support multiple wallet functionality. Each wallet gets its own WalletView instance.\n+  It communicates with both the client and the wallet models to give the user an up-to-date view of the\n+  current core state.\n+*/\n+class WalletView : public QStackedWidget\n+{\n+    Q_OBJECT\n+public:\n+    explicit WalletView(QWidget *parent, BitcoinGUI *_gui);\n+    ~WalletView();\n+\n+    void setBitcoinGUI(BitcoinGUI *gui);\n+    /** Set the client model.\n+        The client model represents the part of the core that communicates with the P2P network, and is wallet-agnostic.\n+    */\n+    void setClientModel(ClientModel *clientModel);\n+    /** Set the wallet model.\n+        The wallet model represents a bitcoin wallet, and offers access to the list of transactions, address book and sending\n+        functionality.\n+    */\n+    void setWalletModel(WalletModel *walletModel);\n+    \n+    bool handleURI(const QString &uri);\n+    \n+    void showOutOfSyncWarning(bool fShow);\n+\n+private:\n+    BitcoinGUI *gui;\n+    ClientModel *clientModel;\n+    WalletModel *walletModel;\n+\n+    OverviewPage *overviewPage;\n+    QWidget *transactionsPage;\n+    AddressBookPage *addressBookPage;\n+    AddressBookPage *receiveCoinsPage;\n+    SendCoinsDialog *sendCoinsPage;\n+    SignVerifyMessageDialog *signVerifyMessageDialog;\n+\n+    QLabel *labelEncryptionIcon;\n+    QLabel *labelConnectionsIcon;\n+    QLabel *labelBlocksIcon;\n+    QLabel *progressBarLabel;\n+\n+    QAction *overviewAction;\n+    QAction *historyAction;\n+    QAction *quitAction;\n+    QAction *sendCoinsAction;\n+    QAction *addressBookAction;\n+    QAction *signMessageAction;\n+    QAction *verifyMessageAction;\n+    QAction *aboutAction;\n+    QAction *receiveCoinsAction;\n+    QAction *optionsAction;\n+    QAction *toggleHideAction;\n+    QAction *exportAction;\n+    QAction *encryptWalletAction;\n+    QAction *backupWalletAction;\n+    QAction *changePassphraseAction;\n+    QAction *aboutQtAction;\n+    QAction *openRPCConsoleAction;\n+\n+    TransactionView *transactionView;\n+\n+    /** Create the main UI actions. */\n+    void createActions();\n+    /** Create the menu bar and sub-menus. */\n+\n+public slots:\n+    /** Switch to overview (home) page */\n+    void gotoOverviewPage();\n+    /** Switch to history (transactions) page */\n+    void gotoHistoryPage();\n+    /** Switch to address book page */\n+    void gotoAddressBookPage();\n+    /** Switch to receive coins page */\n+    void gotoReceiveCoinsPage();\n+    /** Switch to send coins page */\n+    void gotoSendCoinsPage();\n+\n+    /** Show Sign/Verify Message dialog and switch to sign message tab */\n+    void gotoSignMessageTab(QString addr = \"\");\n+    /** Show Sign/Verify Message dialog and switch to verify message tab */\n+    void gotoVerifyMessageTab(QString addr = \"\");\n+\n+    /** Show incoming transaction notification for new transactions.\n+\n+        The new items are those between start and end inclusive, under the given parent item.\n+    */\n+    void incomingTransaction(const QModelIndex& parent, int start, int /*end*/);\n+    /** Encrypt the wallet */\n+    void encryptWallet(bool status);\n+    /** Backup the wallet */\n+    void backupWallet();\n+    /** Change encrypted wallet passphrase */\n+    void changePassphrase();\n+    /** Ask for passphrase to unlock wallet temporarily */\n+    void unlockWallet();\n+    \n+    void setEncryptionStatus();\n+};\n+\n+#endif // WALLETVIEW_H"
      }
    ]
  }
]