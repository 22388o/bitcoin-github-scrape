[
  {
    "sha": "e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWM2MTY4ODhiNTBiYTFjMzVkZDk5ZTU1MDBlZjJjNGRmZjViNGY5",
    "commit": {
      "author": {
        "name": "Pavlos Antoniou",
        "email": "antoniou-p@hotmail.com",
        "date": "2017-06-07T17:21:29Z"
      },
      "committer": {
        "name": "Pavlos Antoniou",
        "email": "antoniou-p@hotmail.com",
        "date": "2017-06-07T17:21:29Z"
      },
      "message": "Fix instantiation and array accesses in class base_uint<BITS>\n\nThe implementation of base_uint::operator++(int) and base_uint::operator--(int) is now safer.\nArray pn is accessed via index i after bounds checking has been performed on the index, rather than before.\nThe logic of the while loops has also been made more clear.\n\nA compile time assertion has been added in the class constructors to ensure that BITS is a positive multiple of 32.",
      "tree": {
        "sha": "41c26f5d7a875bf9cd072dff559b384ea8df0774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41c26f5d7a875bf9cd072dff559b384ea8df0774"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9/comments",
    "author": {
      "login": "pavlosantoniou",
      "id": 14562480,
      "node_id": "MDQ6VXNlcjE0NTYyNDgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/14562480?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pavlosantoniou",
      "html_url": "https://github.com/pavlosantoniou",
      "followers_url": "https://api.github.com/users/pavlosantoniou/followers",
      "following_url": "https://api.github.com/users/pavlosantoniou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pavlosantoniou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pavlosantoniou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pavlosantoniou/subscriptions",
      "organizations_url": "https://api.github.com/users/pavlosantoniou/orgs",
      "repos_url": "https://api.github.com/users/pavlosantoniou/repos",
      "events_url": "https://api.github.com/users/pavlosantoniou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pavlosantoniou/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pavlosantoniou",
      "id": 14562480,
      "node_id": "MDQ6VXNlcjE0NTYyNDgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/14562480?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pavlosantoniou",
      "html_url": "https://github.com/pavlosantoniou",
      "followers_url": "https://api.github.com/users/pavlosantoniou/followers",
      "following_url": "https://api.github.com/users/pavlosantoniou/following{/other_user}",
      "gists_url": "https://api.github.com/users/pavlosantoniou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pavlosantoniou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pavlosantoniou/subscriptions",
      "organizations_url": "https://api.github.com/users/pavlosantoniou/orgs",
      "repos_url": "https://api.github.com/users/pavlosantoniou/repos",
      "events_url": "https://api.github.com/users/pavlosantoniou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pavlosantoniou/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46311e792f4e4a53b7dc418215b03d890d0594d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46311e792f4e4a53b7dc418215b03d890d0594d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46311e792f4e4a53b7dc418215b03d890d0594d5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b4952af6f48906a29db02ce9a86766e01d7d92ca",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9",
        "patch": "@@ -15,6 +15,8 @@\n template <unsigned int BITS>\n base_uint<BITS>::base_uint(const std::string& str)\n {\n+    static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n+\n     SetHex(str);\n }\n "
      },
      {
        "sha": "c7734035df2e0bdf133598bd4581c0146ce18425",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=e5c616888b50ba1c35dd99e5500ef2c4dff5b4f9",
        "patch": "@@ -31,12 +31,16 @@ class base_uint\n \n     base_uint()\n     {\n+        static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n+\n         for (int i = 0; i < WIDTH; i++)\n             pn[i] = 0;\n     }\n \n     base_uint(const base_uint& b)\n     {\n+        static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n+\n         for (int i = 0; i < WIDTH; i++)\n             pn[i] = b.pn[i];\n     }\n@@ -50,6 +54,8 @@ class base_uint\n \n     base_uint(uint64_t b)\n     {\n+        static_assert(BITS/32 > 0 && BITS%32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n+\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n         for (int i = 2; i < WIDTH; i++)\n@@ -174,7 +180,7 @@ class base_uint\n     {\n         // prefix operator\n         int i = 0;\n-        while (++pn[i] == 0 && i < WIDTH-1)\n+        while (i < WIDTH && ++pn[i] == 0)\n             i++;\n         return *this;\n     }\n@@ -191,7 +197,7 @@ class base_uint\n     {\n         // prefix operator\n         int i = 0;\n-        while (--pn[i] == (uint32_t)-1 && i < WIDTH-1)\n+        while (i < WIDTH && --pn[i] == (uint32_t)-1)\n             i++;\n         return *this;\n     }"
      }
    ]
  }
]