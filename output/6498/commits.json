[
  {
    "sha": "bbe41088c61f2ad328766e851ffe6169aa80935a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmU0MTA4OGM2MWYyYWQzMjg3NjZlODUxZmZlNjE2OWFhODA5MzVh",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-17T10:42:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:37:18Z"
      },
      "message": "Add uint256 support to CRollingBloomFilter",
      "tree": {
        "sha": "c8b48b4f462dccfd11b31d3270b5f9e7123ec40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b48b4f462dccfd11b31d3270b5f9e7123ec40c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbe41088c61f2ad328766e851ffe6169aa80935a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe41088c61f2ad328766e851ffe6169aa80935a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe41088c61f2ad328766e851ffe6169aa80935a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe41088c61f2ad328766e851ffe6169aa80935a/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08e9c57ba2aa808c608daa0b4503f1940a356f8c"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e15bc32f974ba98f07c332eb64397c0dd11c3ba7",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=bbe41088c61f2ad328766e851ffe6169aa80935a",
        "patch": "@@ -234,6 +234,20 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     }\n }\n \n+void CRollingBloomFilter::insert(const uint256& hash)\n+{\n+    if (nInsertions == 0) {\n+        b1.clear();\n+    } else if (nInsertions == nBloomSize / 2) {\n+        b2.clear();\n+    }\n+    b1.insert(hash);\n+    b2.insert(hash);\n+    if (++nInsertions == nBloomSize) {\n+        nInsertions = 0;\n+    }\n+}\n+\n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (nInsertions < nBloomSize / 2) {\n@@ -242,6 +256,14 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return b1.contains(vKey);\n }\n \n+bool CRollingBloomFilter::contains(const uint256& hash) const\n+{\n+    if (nInsertions < nBloomSize / 2) {\n+        return b2.contains(hash);\n+    }\n+    return b1.contains(hash);\n+}\n+\n void CRollingBloomFilter::clear()\n {\n     b1.clear();"
      },
      {
        "sha": "0daa3728ed0e4183a0bb6e850a3fff14a428c6ec",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=bbe41088c61f2ad328766e851ffe6169aa80935a",
        "patch": "@@ -114,7 +114,9 @@ class CRollingBloomFilter\n     CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n \n     void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const uint256& hash) const;\n \n     void clear();\n "
      }
    ]
  },
  {
    "sha": "a3d65fedaa18686f0cc007d0a13dba6545250300",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2Q2NWZlZGFhMTg2ODZmMGNjMDA3ZDBhMTNkYmE2NTQ1MjUwMzAw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:38:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:38:45Z"
      },
      "message": "Reuse vector hashing code for uint256",
      "tree": {
        "sha": "35bcf6a7cd121b5908f28a409c403fedff065fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35bcf6a7cd121b5908f28a409c403fedff065fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3d65fedaa18686f0cc007d0a13dba6545250300",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d65fedaa18686f0cc007d0a13dba6545250300",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d65fedaa18686f0cc007d0a13dba6545250300",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d65fedaa18686f0cc007d0a13dba6545250300/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbe41088c61f2ad328766e851ffe6169aa80935a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe41088c61f2ad328766e851ffe6169aa80935a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe41088c61f2ad328766e851ffe6169aa80935a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 4,
      "deletions": 14
    },
    "files": [
      {
        "sha": "3f50b1da917e0864ba1d21e16ad22f814e2f7759",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3d65fedaa18686f0cc007d0a13dba6545250300/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3d65fedaa18686f0cc007d0a13dba6545250300/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=a3d65fedaa18686f0cc007d0a13dba6545250300",
        "patch": "@@ -236,16 +236,8 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    if (nInsertions == 0) {\n-        b1.clear();\n-    } else if (nInsertions == nBloomSize / 2) {\n-        b2.clear();\n-    }\n-    b1.insert(hash);\n-    b2.insert(hash);\n-    if (++nInsertions == nBloomSize) {\n-        nInsertions = 0;\n-    }\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    insert(data);\n }\n \n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n@@ -258,10 +250,8 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    if (nInsertions < nBloomSize / 2) {\n-        return b2.contains(hash);\n-    }\n-    return b1.contains(hash);\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    return contains(data);\n }\n \n void CRollingBloomFilter::clear()"
      }
    ]
  },
  {
    "sha": "d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmQ3ZWUwZTg2M2IyODZlMWM5ZjljNTQ2NTlkNDk0ZmIwYTc3MTJk",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-19T19:43:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:38:49Z"
      },
      "message": "Make CRollingBloomFilter set nTweak for you\n\nWhile CBloomFilter is usually used with an explicitly set nTweak,\nCRollingBloomFilter is only used internally. Requiring every caller to\nset nTweak is error-prone and redundant; better to have the class handle\nthat for you with a high-quality randomness source.\n\nAdditionally when clearing the filter it makes sense to change nTweak as\nwell to recover from a bad setting, e.g. due to insufficient randomness\nat initialization, so the clear() method is replaced by a reset() method\nthat sets a new, random, nTweak value.",
      "tree": {
        "sha": "b955db39fbb776cb59777a1ac171b4cd842496ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b955db39fbb776cb59777a1ac171b4cd842496ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3d65fedaa18686f0cc007d0a13dba6545250300",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d65fedaa18686f0cc007d0a13dba6545250300",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d65fedaa18686f0cc007d0a13dba6545250300"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 29,
      "deletions": 12
    },
    "files": [
      {
        "sha": "89959d73267970b7609d499b45f6880cd5a14eed",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -8,6 +8,7 @@\n #include \"hash.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"random.h\"\n #include \"streams.h\"\n \n #include <math.h>\n@@ -121,6 +122,12 @@ void CBloomFilter::clear()\n     isEmpty = true;\n }\n \n+void CBloomFilter::reset(unsigned int nNewTweak)\n+{\n+    clear();\n+    nTweak = nNewTweak;\n+}\n+\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n@@ -217,7 +224,8 @@ CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate,\n     // inserted, so at least one always contains the last nElements\n     // inserted.\n     nBloomSize = nElements * 2;\n-    nInsertions = 0;\n+\n+    reset(nTweak);\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -254,9 +262,12 @@ bool CRollingBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n-void CRollingBloomFilter::clear()\n+void CRollingBloomFilter::reset(unsigned int nNewTweak)\n {\n-    b1.clear();\n-    b2.clear();\n+    if (!nNewTweak)\n+        nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n+\n+    b1.reset(nNewTweak);\n+    b2.reset(nNewTweak);\n     nInsertions = 0;\n }"
      },
      {
        "sha": "12bf6d99a88c685afc4062d56e3fc24ddd66a79c",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -89,6 +89,7 @@ class CBloomFilter\n     bool contains(const uint256& hash) const;\n \n     void clear();\n+    void reset(unsigned int nNewTweak);\n \n     //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     //! (catch a filter which was just deserialized which was too big)\n@@ -103,22 +104,27 @@ class CBloomFilter\n \n /**\n  * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n- * Construct it with the number of items to keep track of, and a false-positive rate.\n+ * Construct it with the number of items to keep track of, and a false-positive\n+ * rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically\n+ * secure random value for you. Similarly rather than clear() the method\n+ * reset() is provided, which also changes nTweak to decrease the impact of\n+ * false-positives.\n  *\n  * contains(item) will always return true if item was one of the last N things\n  * insert()'ed ... but may also return true for items that were not inserted.\n  */\n class CRollingBloomFilter\n {\n public:\n-    CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n+    CRollingBloomFilter(unsigned int nElements, double nFPRate,\n+                        unsigned int nTweak = 0);\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n     bool contains(const uint256& hash) const;\n \n-    void clear();\n+    void reset(unsigned int nNewTweak = 0);\n \n private:\n     unsigned int nBloomSize;"
      },
      {
        "sha": "01b62bdf608d8346c01731495084a645e9c73d96",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -4812,7 +4812,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             {\n                 // Periodically clear addrKnown to allow refresh broadcasts\n                 if (nLastRebroadcast)\n-                    pnode->addrKnown.clear();\n+                    pnode->addrKnown.reset();\n \n                 // Rebroadcast our address\n                 AdvertizeLocal(pnode);"
      },
      {
        "sha": "176fd7195ba62603a54b3bfa8152a743e4fe7c76",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -2060,7 +2060,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n-    addrKnown(5000, 0.001, insecure_rand()),\n+    addrKnown(5000, 0.001),\n     setInventoryKnown(SendBufferSize() / 1000)\n {\n     nServices = 0;"
      },
      {
        "sha": "d927be6b8197385ec4cc040073154ef30a1fbdde",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -469,7 +469,7 @@ static std::vector<unsigned char> RandomData()\n BOOST_AUTO_TEST_CASE(rolling_bloom)\n {\n     // last-100-entry, 1% false positive:\n-    CRollingBloomFilter rb1(100, 0.01, 0);\n+    CRollingBloomFilter rb1(100, 0.01, 1);\n \n     // Overfill:\n     static const int DATASIZE=399;\n@@ -500,7 +500,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 175);\n \n     BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n-    rb1.clear();\n+    rb1.reset(1);\n     BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));\n \n     // Now roll through data, make sure last 100 entries\n@@ -527,7 +527,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 100);\n \n     // last-1000-entry, 0.01% false positive:\n-    CRollingBloomFilter rb2(1000, 0.001, 0);\n+    CRollingBloomFilter rb2(1000, 0.001, 1);\n     for (int i = 0; i < DATASIZE; i++) {\n         rb2.insert(data[i]);\n     }"
      }
    ]
  },
  {
    "sha": "d741371d7d27e228aa64c618c50b23fb5449c3e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzQxMzcxZDdkMjdlMjI4YWE2NGM2MThjNTBiMjNmYjU0NDljM2Ux",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:58:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T17:09:39Z"
      },
      "message": "Only use randomly created nonces in CRollingBloomFilter.",
      "tree": {
        "sha": "0b292baaaabe5f9148db4813dad82c893dd04434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b292baaaabe5f9148db4813dad82c893dd04434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d741371d7d27e228aa64c618c50b23fb5449c3e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "de87206592c35b928834ee2f4d637d3e150d9a25",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "patch": "@@ -216,16 +216,17 @@ void CBloomFilter::UpdateEmptyFull()\n     isEmpty = empty;\n }\n \n-CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate, unsigned int nTweak) :\n-    b1(nElements * 2, fpRate, nTweak), b2(nElements * 2, fpRate, nTweak)\n+CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate) :\n+    b1(nElements * 2, fpRate, 0), b2(nElements * 2, fpRate, 0)\n {\n     // Implemented using two bloom filters of 2 * nElements each.\n     // We fill them up, and clear them, staggered, every nElements\n     // inserted, so at least one always contains the last nElements\n     // inserted.\n+    nInsertions = 0;\n     nBloomSize = nElements * 2;\n \n-    reset(nTweak);\n+    reset();\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -262,11 +263,9 @@ bool CRollingBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n-void CRollingBloomFilter::reset(unsigned int nNewTweak)\n+void CRollingBloomFilter::reset()\n {\n-    if (!nNewTweak)\n-        nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n-\n+    unsigned int nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n     b1.reset(nNewTweak);\n     b2.reset(nNewTweak);\n     nInsertions = 0;"
      },
      {
        "sha": "a4dba8cb4f7187251d43dfab96e0435fbf98c481",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "patch": "@@ -116,15 +116,17 @@ class CBloomFilter\n class CRollingBloomFilter\n {\n public:\n-    CRollingBloomFilter(unsigned int nElements, double nFPRate,\n-                        unsigned int nTweak = 0);\n+    // A random bloom filter calls GetRand() at creation time.\n+    // Don't create global CRollingBloomFilter objects, as they may be\n+    // constructed before the randomizer is properly initialized.\n+    CRollingBloomFilter(unsigned int nElements, double nFPRate);\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n     bool contains(const uint256& hash) const;\n \n-    void reset(unsigned int nNewTweak = 0);\n+    void reset();\n \n private:\n     unsigned int nBloomSize;"
      },
      {
        "sha": "6b30d6aa8ae7a0ca65303b7cc92333f0aa75f494",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "patch": "@@ -469,7 +469,7 @@ static std::vector<unsigned char> RandomData()\n BOOST_AUTO_TEST_CASE(rolling_bloom)\n {\n     // last-100-entry, 1% false positive:\n-    CRollingBloomFilter rb1(100, 0.01, 1);\n+    CRollingBloomFilter rb1(100, 0.01);\n \n     // Overfill:\n     static const int DATASIZE=399;\n@@ -500,7 +500,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 175);\n \n     BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n-    rb1.reset(1);\n+    rb1.reset();\n     BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));\n \n     // Now roll through data, make sure last 100 entries\n@@ -527,7 +527,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 100);\n \n     // last-1000-entry, 0.01% false positive:\n-    CRollingBloomFilter rb2(1000, 0.001, 1);\n+    CRollingBloomFilter rb2(1000, 0.001);\n     for (int i = 0; i < DATASIZE; i++) {\n         rb2.insert(data[i]);\n     }"
      }
    ]
  },
  {
    "sha": "0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODQ3ZDljYjVmY2QyZmRkNWEyMWJkZTY5OTk0NGQ5NjZjZjVhZGQ5",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-17T10:46:48Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-28T19:50:13Z"
      },
      "message": "Keep track of recently rejected transactions\n\nNodes can have divergent policies on which transactions they will accept\nand relay.  This can cause you to repeatedly request and reject the same\ntx after its inved to you from various peers which have accepted it.\nHere we add rolling bloom filter to keep track of such rejections,\nclearing the filter every time the chain tip changes.\n\nCredit goes to Alex Morcos, who created the patch that this code is\nbased on.\n\nOriginal code by Peter Todd. Refactored to not construct the\nfilter at startup time by Pieter Wuille.",
      "tree": {
        "sha": "d98c5f3799331cd0d6ac76afa65511bde0682177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d98c5f3799331cd0d6ac76afa65511bde0682177"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJVt9z3XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMjg3MTg3MmU3YWRjY2IzNGE1NGU4ODg2YjNhODA1ODI5\nZGYzYmM0YjVmZmY1MzMvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkfs0kQf+IIDRCSsdtpT+YCnVbKEYx/QM\n6gMmCfzKXpbZ5RCDoWFDR+wrJJIV3gm6dgmd3+qkpkfskQ8QYWw1XVApNmIe68TN\nNUMg4xudqOBA1di9BHkcOv4aDkD0ejAo+aN/365D8khsoiDOrRbPvCrjtROGkW9c\nJ9KNzo823hNjknns2/OqicEVxmMbZPeY2Ous7dIkg5p5XnV+II5EqA0z44jXilMp\nOrZqKN8hL+hje2OxU6KWJCKiYcRO3SUvpzcthDOc2OlCOf+vCgWjUVelrtQv4EsU\nmKTIUIXwfjugxYDYMf+GO/WRO/UwRhfrCBtJdMkcr/GXHQORR54EVTzC85FbIQ==\n=KDd3\n-----END PGP SIGNATURE-----",
        "payload": "tree d98c5f3799331cd0d6ac76afa65511bde0682177\nparent d741371d7d27e228aa64c618c50b23fb5449c3e1\nauthor Peter Todd <pete@petertodd.org> 1437130008 -0400\ncommitter Peter Todd <pete@petertodd.org> 1438113013 -0400\n\nKeep track of recently rejected transactions\n\nNodes can have divergent policies on which transactions they will accept\nand relay.  This can cause you to repeatedly request and reject the same\ntx after its inved to you from various peers which have accepted it.\nHere we add rolling bloom filter to keep track of such rejections,\nclearing the filter every time the chain tip changes.\n\nCredit goes to Alex Morcos, who created the patch that this code is\nbased on.\n\nOriginal code by Peter Todd. Refactored to not construct the\nfilter at startup time by Pieter Wuille.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d741371d7d27e228aa64c618c50b23fb5449c3e1"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 59,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0865ecc5063ecc72508aa8941ef3d69b896c84a5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 9,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0847d9cb5fcd2fdd5a21bde699944d966cf5add9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0847d9cb5fcd2fdd5a21bde699944d966cf5add9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
        "patch": "@@ -162,6 +162,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is reset. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    boost::scoped_ptr<CRollingBloomFilter> recentRejects;\n+    uint256 hashRecentRejectsChainTip;\n+\n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n         uint256 hash;\n@@ -3267,6 +3290,7 @@ void UnloadBlockIndex()\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n     mapNodeState.clear();\n+    recentRejects.reset(NULL);\n \n     BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n         delete entry.second;\n@@ -3320,6 +3344,9 @@ bool InitBlockIndex() {\n         }\n     }\n \n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n     return true;\n }\n \n@@ -3689,10 +3716,20 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n     case MSG_TX:\n         {\n-            bool txInMap = false;\n-            txInMap = mempool.exists(inv.hash);\n-            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n-                pcoinsTip->HaveCoins(inv.hash);\n+            if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n+            {\n+                // If the chain tip has changed previously rejected transactions\n+                // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+                // or a double-spend. Reset the rejects filter and give those\n+                // txs a second chance.\n+                hashRecentRejectsChainTip = chainActive.Tip()->GetBlockHash();\n+                recentRejects->reset();\n+            }\n+\n+            return recentRejects->contains(inv.hash) ||\n+                   mempool.exists(inv.hash) ||\n+                   mapOrphanTransactions.count(inv.hash) ||\n+                   pcoinsTip->HaveCoins(inv.hash);\n         }\n     case MSG_BLOCK:\n         return mapBlockIndex.count(inv.hash);\n@@ -4292,6 +4329,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n+                        recentRejects->insert(orphanHash);\n                     }\n                     mempool.check(pcoinsTip);\n                 }\n@@ -4309,11 +4347,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects->insert(tx.GetHash());\n+            }\n+            if (pfrom->fWhitelisted) {\n+                // Always relay transactions received from whitelisted peers, even\n+                // if they were rejected from the mempool, allowing the node to\n+                // function as a gateway for nodes hidden behind it.\n+                //\n+                // FIXME: This includes invalid transactions, which means a\n+                // whitelisted peer could get us banned! We may want to change\n+                // that.\n+                RelayTransaction(tx);\n+            }\n         }\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))"
      }
    ]
  },
  {
    "sha": "a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGQwNDA3YzRmY2Y3YzRlOGVkMGU4ZWRhYmQyMDRmN2E0ZWZhNDc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T15:55:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T15:58:12Z"
      },
      "message": "Move recentRejects initialization to top of InitBlockIndex\n\nThis avoids that premature return in the condition that a new chain is initialized\nresults in NULL pointer errors due to recentReject not being constructed.\n\nAlso add assertions where it is used.",
      "tree": {
        "sha": "a11ac0a3d552c4c75238376bcf8fea899080356d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a11ac0a3d552c4c75238376bcf8fea899080356d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0847d9cb5fcd2fdd5a21bde699944d966cf5add9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ad41af955296d2f23b52319278b68ba6f088890",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
        "patch": "@@ -3311,6 +3311,10 @@ bool LoadBlockIndex()\n bool InitBlockIndex() {\n     const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n+\n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n         return true;\n@@ -3344,9 +3348,6 @@ bool InitBlockIndex() {\n         }\n     }\n \n-    // Initialize global variables that cannot be constructed at startup.\n-    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n-\n     return true;\n }\n \n@@ -3716,6 +3717,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n     case MSG_TX:\n         {\n+            assert(recentRejects);\n             if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n             {\n                 // If the chain tip has changed previously rejected transactions\n@@ -4329,6 +4331,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n+                        assert(recentRejects);\n                         recentRejects->insert(orphanHash);\n                     }\n                     mempool.check(pcoinsTip);\n@@ -4352,6 +4355,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // already in the mempool; if the tx isn't in the mempool that\n             // means it was rejected and we shouldn't ask for it again.\n             if (!mempool.exists(tx.GetHash())) {\n+                assert(recentRejects);\n                 recentRejects->insert(tx.GetHash());\n             }\n             if (pfrom->fWhitelisted) {"
      }
    ]
  }
]