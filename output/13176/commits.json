[
  {
    "sha": "9aac9f90d5e56752cc6cbfac48063ad29a01143c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWFjOWY5MGQ1ZTU2NzUyY2M2Y2JmYWM0ODA2M2FkMjlhMDExNDNj",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2018-05-06T11:55:33Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2018-05-06T11:55:33Z"
      },
      "message": "replace modulus with FastMod\n\nReplaces the slow modulo operation with a much faster 32bit multiplication & shift. This works\nbecause the hash should be uniformly distributed between 0 and 2^32-1. This speeds up the benchmark\nby a factor of about 1.3:\n\nRollingBloom, 5, 1500000, 3.73733, 4.97569e-07, 4.99002e-07, 4.98372e-07 # before\nRollingBloom, 5, 1500000, 2.86842, 3.81630e-07, 3.83730e-07, 3.82473e-07 # FastMod\n\nBe aware that this changes the position of the bits that are toggled, so this should probably\nnot be used for CBloomFilter which is serialized.",
      "tree": {
        "sha": "d31c9257dcb47c522d20b2859c87e164dd7eb8ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d31c9257dcb47c522d20b2859c87e164dd7eb8ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9aac9f90d5e56752cc6cbfac48063ad29a01143c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aac9f90d5e56752cc6cbfac48063ad29a01143c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9aac9f90d5e56752cc6cbfac48063ad29a01143c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aac9f90d5e56752cc6cbfac48063ad29a01143c/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66cc47be982aa431b72494f5d655c20eea17a0f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66cc47be982aa431b72494f5d655c20eea17a0f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66cc47be982aa431b72494f5d655c20eea17a0f5"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f8e28edded56c185e492c4ad03380ba2b719f184",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aac9f90d5e56752cc6cbfac48063ad29a01143c/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aac9f90d5e56752cc6cbfac48063ad29a01143c/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=9aac9f90d5e56752cc6cbfac48063ad29a01143c",
        "patch": "@@ -245,6 +245,14 @@ static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak,\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n+\n+// A replacement for x % n. This assumes that x and n are 32bit integers, and x is a uniformly random distributed 32bit value\n+// which should be the case for a good hash.\n+// See https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n+static inline uint32_t FastMod(uint32_t x, size_t n) {\n+    return ((uint64_t)x * (uint64_t)n) >> 32;\n+}\n+\n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n     if (nEntriesThisGeneration == nEntriesPerGeneration) {\n@@ -268,7 +276,8 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     for (int n = 0; n < nHashFuncs; n++) {\n         uint32_t h = RollingBloomHash(n, nTweak, vKey);\n         int bit = h & 0x3F;\n-        uint32_t pos = (h >> 6) % data.size();\n+        /* FastMod works with the upper bits of h, so it is safe to ignore that the lower bits of h are already used for bit. */\n+        uint32_t pos = FastMod(h, data.size());\n         /* The lowest bit of pos is ignored, and set to zero for the first bit, and to one for the second. */\n         data[pos & ~1] = (data[pos & ~1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration & 1)) << bit;\n         data[pos | 1] = (data[pos | 1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration >> 1)) << bit;\n@@ -286,7 +295,7 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     for (int n = 0; n < nHashFuncs; n++) {\n         uint32_t h = RollingBloomHash(n, nTweak, vKey);\n         int bit = h & 0x3F;\n-        uint32_t pos = (h >> 6) % data.size();\n+        uint32_t pos = FastMod(h, data.size());\n         /* If the relevant bit is not set in either data[pos & ~1] or data[pos | 1], the filter does not contain vKey */\n         if (!(((data[pos & ~1] | data[pos | 1]) >> bit) & 1)) {\n             return false;"
      }
    ]
  }
]