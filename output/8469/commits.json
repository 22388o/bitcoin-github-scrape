[
  {
    "sha": "7fd92dade83f79d65274eca158c156126a8a58a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmQ5MmRhZGU4M2Y3OWQ2NTI3NGVjYTE1OGMxNTYxMjZhOGE1OGEx",
    "commit": {
      "author": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2016-06-19T18:11:08Z"
      },
      "committer": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2018-03-24T04:53:52Z"
      },
      "message": "Adding rapidcheck dependency, adding CKey properties\n\nAdding rapidcheck dependency, adding CKey properties\n\nSuccessfully compiling bitcoin with rapidcheck dependency\n\nAdding new property file for CKey\n\nSerialization symmetry for CKey -> CBitcoinSecret -> CKey\n\nAdding generators for CPrivKey, CPubKey, and uint256\n\n[depends] Rework rapidcheck.mk\n\nAdding Bloom filter properties and bloom filter generator\n\nAdding serialization symmetry for CBloomFilter\n\nAdding block header serialization property\n\nFixing generator bug where I wasn't setting all fields on a BlockHeader\n\nCreating transaction_gen.h, adding generator for COutPoint and serialization symmetry property for COutPoint\n\nAdding script generator and script_propertes, first property is CScript serialization symmetry\n\nAdding CTransaction generator, adding serialization symmetry property for CTransaction\n\nRemoving 'oneOrMoreInputs' and 'oneOrMoreOutputs' generators in favor of using rapidcheck's gen::nonEmpty function\n\nAdding CTransactionRef and CBlock generators, adding property for CBlock serialization symmetry\n\nAdding Generators outside of the rc name space, adding generator for LoadedBloomFilter\n\nAdding merkleblock_gen.h, merkleblock serialization symmetry test\n\nAdding merkle_block properties\n\nCommitting to try and debug mem leak\n\nRemoving comments, rebasing to master\n\nOnly adding rapidcheck dependency if tests are enabled\n\nRefactoring inclues in generator files, reordering files in Makefile.test.include\n\nUndoing change in merkleblock.cpp\n\nAdding bloom_gen.cpp\n\nReworking BetweenZeroAndOne to use rc::gen::map instead of rc::gen::suchThat, removing some unused imports\n\nAdding signedP2PKTx(), signedP2PKHTx(), signedMultisigTx(), and then a generator called signedP2SHTx() that creates a p2sh output and spends it\n\nAdding witness SPKs and witness spending transactions\n\nMaking sure helpers are functions and not constant values\n\nfixing nits/ugliness\n\nAdding block_gen.cpp\n\nModifying code to be closer to the style guide rules, use const/references, fixing more nits\n\nautotools/depends fixes for rapidcheck\n\nFixes non-depends bitcoin build when rapidcheck is not installed on system,\nby adding --with-rapidcheck config option.\n\nFixes depends build by adding fPIC option and installation steps so the build\nis not empty. Allows property-based tests to be run with:\n\n    make -C depends\n    ./configure --prefix=$PWD/depends/x86_64-pc-linux-gnu\n    make check\n\ndepends: Bump rapidcheck to version 10fc0cb\n\ndepends: Disable RAPIDCHECK by default\n\nrun clang-format\n\nremove trailing white space\n\nremove native ccache in packages.mk",
      "tree": {
        "sha": "531ece348fdda00789321df21da9225cf885d466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/531ece348fdda00789321df21da9225cf885d466"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fd92dade83f79d65274eca158c156126a8a58a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd92dade83f79d65274eca158c156126a8a58a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd92dade83f79d65274eca158c156126a8a58a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd92dade83f79d65274eca158c156126a8a58a1/comments",
    "author": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cead84b72d27517338ac3c49eaaed4db07352f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cead84b72d27517338ac3c49eaaed4db07352f41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cead84b72d27517338ac3c49eaaed4db07352f41"
      }
    ],
    "stats": {
      "total": 1144,
      "additions": 1143,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c863160fb723b37151ced2e2693ee8df36c5f105",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -130,6 +130,12 @@ AC_ARG_ENABLE(gui-tests,\n     [use_gui_tests=$enableval],\n     [use_gui_tests=$use_tests])\n \n+AC_ARG_WITH([rapidcheck],\n+  [AS_HELP_STRING([--with-rapidcheck],\n+  [enable RapidCheck property based tests (default is yes if librapidcheck is found)])],\n+  [use_rapidcheck=$withval],\n+  [use_rapidcheck=auto])\n+\n AC_ARG_ENABLE(bench,\n     AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n@@ -1024,6 +1030,22 @@ AC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT\n ])\n CXXFLAGS=\"${save_CXXFLAGS}\"\n \n+dnl RapidCheck Property Based Testing\n+\n+enable_property_tests=no\n+if test \"x$use_rapidcheck\" = xauto; then\n+    AC_CHECK_HEADERS([rapidcheck.h], [enable_property_tests=yes])\n+elif test \"x$use_rapidcheck\" != xno; then\n+    enable_property_tests=yes\n+fi\n+\n+RAPIDCHECK_LIBS=\n+if test \"x$enable_property_tests\" = xyes; then\n+   RAPIDCHECK_LIBS=-lrapidcheck\n+fi\n+AC_SUBST(RAPIDCHECK_LIBS)\n+AM_CONDITIONAL([ENABLE_PROPERTY_TESTS], [test x$enable_property_tests = xyes])\n+\n dnl univalue check\n \n need_bundled_univalue=yes"
      },
      {
        "sha": "d59b6ddf6617683b0ee6fc6361d4829f92f1680d",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -4,6 +4,7 @@ SOURCES_PATH ?= $(BASEDIR)/sources\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n+RAPIDCHECK ?=\n NO_WALLET ?=\n NO_UPNP ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n@@ -92,13 +93,19 @@ qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n \n+rapidcheck_packages_$(RAPIDCHECK) = $(rapidcheck_packages)\n+\n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n ifneq ($(qt_packages_),)\n native_packages += $(qt_native_packages)\n endif\n \n+ifeq ($(rapidcheck_packages_),)\n+packages += $(rapidcheck_packages)\n+endif\n+\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk"
      },
      {
        "sha": "38e967222ff21d6715e90d6b1215194303c0fc75",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -55,6 +55,7 @@ The following can be set when running make: make FOO=bar\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n+    RAPIDCHECK: build rapidcheck (experimental)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n "
      },
      {
        "sha": "6521a95b035f16d9359d6f8eb6fdfef5bf4c0fa0",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -3,6 +3,8 @@ packages:=boost openssl libevent zeromq\n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf zlib\n \n+rapidcheck_packages = rapidcheck\n+\n qt_x86_64_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_i686_linux_packages:=$(qt_x86_64_linux_packages)\n "
      },
      {
        "sha": "19cf1cae2ec83e95b7a1d00b33476346c9ff199f",
        "filename": "depends/packages/rapidcheck.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/depends/packages/rapidcheck.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/depends/packages/rapidcheck.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/rapidcheck.mk?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,18 @@\n+package=rapidcheck\n+$(package)_version=10fc0cb\n+$(package)_download_path=https://github.com/MarcoFalke/rapidcheck/archive\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=9640926223c00af45bce4c7df8b756b5458a89b2ba74cfe3e404467f13ce26df\n+\n+define $(package)_config_cmds\n+  cmake -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true .\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) && \\\n+  mkdir -p $($(package)_staging_dir)$(host_prefix)/include && \\\n+  cp -a include/* $($(package)_staging_dir)$(host_prefix)/include/ && \\\n+  cp -a extras/boost_test/include/rapidcheck/* $($(package)_staging_dir)$(host_prefix)/include/rapidcheck/ && \\\n+  mkdir -p $($(package)_staging_dir)$(host_prefix)/lib && \\\n+  cp -a librapidcheck.a $($(package)_staging_dir)$(host_prefix)/lib/\n+endef"
      },
      {
        "sha": "1d2723051220777cb01c72f00edcba65db2d581e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -9,6 +9,8 @@ TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n JSON_TEST_FILES = \\\n+  test/data/script_tests.json \\\n+  test/data/base58_keys_valid.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/key_io_valid.json \\\n   test/data/key_io_invalid.json \\\n@@ -88,6 +90,27 @@ BITCOIN_TESTS =\\\n   test/uint256_tests.cpp \\\n   test/util_tests.cpp\n \n+if ENABLE_PROPERTY_TESTS\n+BITCOIN_TESTS += \\\n+  test/gen/crypto_gen.cpp \\\n+  test/gen/crypto_gen.h \\\n+  test/gen/script_gen.cpp \\\n+  test/gen/script_gen.h \\\n+  test/gen/transaction_gen.cpp \\\n+  test/gen/transaction_gen.h \\\n+  test/gen/block_gen.cpp \\\n+  test/gen/block_gen.h \\\n+  test/gen/merkleblock_gen.h \\\n+  test/gen/bloom_gen.cpp \\\n+  test/gen/bloom_gen.h \\\n+  test/key_properties.cpp \\\n+  test/script_properties.cpp \\\n+  test/block_properties.cpp \\\n+  test/merkleblock_properties.cpp \\\n+  test/bloom_properties.cpp \\\n+  test/transaction_properties.cpp\n+endif\n+\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   wallet/test/wallet_test_fixture.cpp \\\n@@ -108,7 +131,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ"
      },
      {
        "sha": "43465f61c6659778e3e37126ec993525998b9c1d",
        "filename": "src/test/block_properties.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/block_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/block_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_properties.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,34 @@\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"test/test_bitcoin.h\"\n+#include \"primitives/block.h\"\n+#include \"test/gen/block_gen.h\"\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(block_properties, BasicTestingSetup)\n+\n+RC_BOOST_PROP(blockheader_serialization_symmetry, (const CBlockHeader& header))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    CBlockHeader header2;\n+    ss >> header2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    ss1 << header2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+\n+RC_BOOST_PROP(block_serialization_symmetry, (const CBlock& block))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << block;\n+    CBlock block2;\n+    ss >> block2;\n+    RC_ASSERT(block.GetHash() == block2.GetHash());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "4ab77ef5074199971a6258e6514a7fe9feac6737",
        "filename": "src/test/bloom_properties.cpp",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/bloom_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/bloom_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_properties.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"test/gen/bloom_gen.h\"\n+#include \"test/gen/crypto_gen.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(bloom_properties, BasicTestingSetup)\n+\n+RC_BOOST_PROP(no_false_negatives, (CBloomFilter bloom_filter, const uint256& hash))\n+{\n+    bloom_filter.insert(hash);\n+    bool result = bloom_filter.contains(hash);\n+    RC_ASSERT(result);\n+}\n+\n+RC_BOOST_PROP(serialization_symmetry, (const CBloomFilter& bloom_filter))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << bloom_filter;\n+    CBloomFilter bloom_filter2;\n+    ss >> bloom_filter2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << bloom_filter;\n+    ss1 << bloom_filter2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "6e6909a497f27313adc9fec67e5d9d833eadd26c",
        "filename": "src/test/gen/block_gen.cpp",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/block_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/block_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/block_gen.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,12 @@\n+#include \"test/gen/block_gen.h\"\n+\n+#include <rapidcheck/Gen.h>\n+\n+/** Generator for the primitives of a block header */\n+rc::Gen<BlockHeaderTup> BlockHeaderPrimitives()\n+{\n+    return rc::gen::tuple(rc::gen::arbitrary<int32_t>(),\n+        rc::gen::arbitrary<uint256>(), rc::gen::arbitrary<uint256>(),\n+        rc::gen::arbitrary<uint32_t>(), rc::gen::arbitrary<uint32_t>(),\n+        rc::gen::arbitrary<uint32_t>());\n+}"
      },
      {
        "sha": "3a2553e356c3ab0ce949fd7464fc0d1a384400ee",
        "filename": "src/test/gen/block_gen.h",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/block_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/block_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/block_gen.h?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,58 @@\n+#ifndef BITCOIN_TEST_GEN_BLOCK_GEN_H\n+#define BITCOIN_TEST_GEN_BLOCK_GEN_H\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"test/gen/transaction_gen.h\"\n+#include \"uint256.h\"\n+#include \"primitives/block.h\"\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+\n+typedef std::tuple<int32_t, uint256, uint256, uint32_t, uint32_t, uint32_t> BlockHeaderTup;\n+\n+/** Generator for the primitives of a block header */\n+rc::Gen<BlockHeaderTup> BlockHeaderPrimitives();\n+\n+namespace rc\n+{\n+/** Generator for a new CBlockHeader */\n+template <>\n+struct Arbitrary<CBlockHeader> {\n+    static Gen<CBlockHeader> arbitrary()\n+    {\n+        return gen::map(BlockHeaderPrimitives(), [](const BlockHeaderTup& primitives) {\n+            int32_t nVersion;\n+            uint256 hashPrevBlock;\n+            uint256 hashMerkleRoot;\n+            uint32_t nTime;\n+            uint32_t nBits;\n+            uint32_t nNonce;\n+            std::tie(nVersion, hashPrevBlock, hashMerkleRoot, nTime, nBits, nNonce) = primitives;\n+            CBlockHeader header;\n+            header.nVersion = nVersion;\n+            header.hashPrevBlock = hashPrevBlock;\n+            header.hashMerkleRoot = hashMerkleRoot;\n+            header.nTime = nTime;\n+            header.nBits = nBits;\n+            header.nNonce = nNonce;\n+            return header;\n+        });\n+    };\n+};\n+\n+/** Generator for a new CBlock */\n+template <>\n+struct Arbitrary<CBlock> {\n+    static Gen<CBlock> arbitrary()\n+    {\n+        return gen::map(gen::nonEmpty<std::vector<CTransactionRef>>(), [](const std::vector<CTransactionRef>& refs) {\n+            CBlock block;\n+            block.vtx = refs;\n+            return block;\n+        });\n+    }\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "9a59311f1c9bd042165057ba8ec7af576ba7199e",
        "filename": "src/test/gen/bloom_gen.cpp",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/bloom_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/bloom_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/bloom_gen.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,59 @@\n+#include \"test/gen/bloom_gen.h\"\n+#include \"test/gen/crypto_gen.h\"\n+\n+#include \"bloom.h\"\n+#include <math.h>\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Tuple.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Container.h>\n+\n+/** Generates a double between [0,1) */\n+rc::Gen<double> BetweenZeroAndOne()\n+{\n+    return rc::gen::map(rc::gen::arbitrary<double>(), [](double x) {\n+        double result = abs(fmod(x, 1));\n+        assert(result >= 0 && result < 1);\n+        return result;\n+    });\n+}\n+\n+rc::Gen<unsigned int> Between1And100()\n+{\n+    return rc::gen::inRange<unsigned int>(1, 100);\n+}\n+/** Generates the C++ primitives used to create a bloom filter */\n+rc::Gen<std::tuple<unsigned int, double, unsigned int, unsigned int>> BloomFilterPrimitives()\n+{\n+    return rc::gen::tuple(Between1And100(),\n+        BetweenZeroAndOne(), rc::gen::arbitrary<unsigned int>(),\n+        rc::gen::inRange<unsigned int>(0, 3));\n+}\n+\n+/** Returns a bloom filter loaded with the given uint256s */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadedBloomFilter()\n+{\n+    return rc::gen::map(rc::gen::pair(rc::gen::arbitrary<CBloomFilter>(), rc::gen::arbitrary<std::vector<uint256>>()),\n+        [](const std::pair<CBloomFilter, const std::vector<uint256>&>& primitives) {\n+            CBloomFilter bloomFilter = primitives.first;\n+            std::vector<uint256> hashes = primitives.second;\n+            for (unsigned int i = 0; i < hashes.size(); i++) {\n+                bloomFilter.insert(hashes[i]);\n+            }\n+            return std::make_pair(bloomFilter, hashes);\n+        });\n+}\n+\n+/** Loads an arbitrary bloom filter with the given hashes */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadBloomFilter(const std::vector<uint256>& hashes)\n+{\n+    return rc::gen::map(rc::gen::arbitrary<CBloomFilter>(), [&hashes](CBloomFilter bloomFilter) {\n+        for (unsigned int i = 0; i < hashes.size(); i++) {\n+            bloomFilter.insert(hashes[i]);\n+        }\n+        return std::make_pair(bloomFilter, hashes);\n+    });\n+}"
      },
      {
        "sha": "8676294024e05d39a26f8e40cc1590060917b8f9",
        "filename": "src/test/gen/bloom_gen.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/bloom_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/bloom_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/bloom_gen.h?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,42 @@\n+#ifndef BITCOIN_TEST_GEN_BLOOM_GEN_H\n+#define BITCOIN_TEST_GEN_BLOOM_GEN_H\n+\n+#include \"bloom.h\"\n+#include \"merkleblock.h\"\n+\n+#include <math.h>\n+\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+\n+/** Generates a double between [0,1) */\n+rc::Gen<double> BetweenZeroAndOne();\n+\n+rc::Gen<std::tuple<unsigned int, double, unsigned int, unsigned int>> BloomFilterPrimitives();\n+\n+namespace rc\n+{\n+/** Generator for a new CBloomFilter*/\n+template <>\n+struct Arbitrary<CBloomFilter> {\n+    static Gen<CBloomFilter> arbitrary()\n+    {\n+        return gen::map(BloomFilterPrimitives(), [](const std::tuple<unsigned int, double, unsigned int, unsigned int>& primitives) {\n+            unsigned int num_elements;\n+            double fp_rate;\n+            unsigned int n_tweak_in;\n+            unsigned int bloom_flag;\n+            std::tie(num_elements, fp_rate, n_tweak_in, bloom_flag) = primitives;\n+            return CBloomFilter(num_elements, fp_rate, n_tweak_in, bloom_flag);\n+        });\n+    };\n+};\n+} //namespace rc\n+\n+/** Returns a bloom filter loaded with the returned uint256s */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadedBloomFilter();\n+\n+/** Loads an arbitrary bloom filter with the given hashes */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadBloomFilter(const std::vector<uint256>& hashes);\n+\n+#endif"
      },
      {
        "sha": "02bf5e39e14b80f67f6ca55be5d4e926d87164c2",
        "filename": "src/test/gen/crypto_gen.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/crypto_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/crypto_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,23 @@\n+#include \"test/gen/crypto_gen.h\"\n+\n+#include \"key.h\"\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Container.h>\n+\n+/** Generates 1 to 20 keys for OP_CHECKMULTISIG */\n+rc::Gen<std::vector<CKey>> MultisigKeys()\n+{\n+    return rc::gen::suchThat(rc::gen::arbitrary<std::vector<CKey>>(), [](const std::vector<CKey>& keys) {\n+        //TODO: Investigate why we can only allow 15 keys. Consensus rules\n+        // dictate we can up to 20 keys\n+        //https://github.com/bitcoin/bitcoin/blob/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/script/script.h#L29\n+        //needs to be <= 16 keys because this assertion fails\n+        //https://github.com/bitcoin/bitcoin/blob/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/script/script.h#L585\n+        //ProduceSignature() fails for p2sh(multisig) if there are >= 16 keys\n+        //this is why we are currently limited to the range >= 1 && <= 15\n+        return keys.size() >= 1 && keys.size() <= 15;\n+    });\n+};"
      },
      {
        "sha": "927f91b1f73bda810e03764294198340d822a973",
        "filename": "src/test/gen/crypto_gen.h",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/crypto_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/crypto_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.h?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,60 @@\n+#ifndef BITCOIN_TEST_GEN_CRYPTO_GEN_H\n+#define BITCOIN_TEST_GEN_CRYPTO_GEN_H\n+\n+#include \"key.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Create.h>\n+#include <rapidcheck/gen/Numeric.h>\n+\n+/** Generates 1 to 15 keys for OP_CHECKMULTISIG */\n+rc::Gen<std::vector<CKey>> MultisigKeys();\n+\n+namespace rc\n+{\n+/** Generator for a new CKey */\n+template <>\n+struct Arbitrary<CKey> {\n+    static Gen<CKey> arbitrary()\n+    {\n+        return rc::gen::map<int>([](int x) {\n+            CKey key;\n+            key.MakeNewKey(true);\n+            return key;\n+        });\n+    };\n+};\n+\n+/** Generator for a CPrivKey */\n+template <>\n+struct Arbitrary<CPrivKey> {\n+    static Gen<CPrivKey> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CKey>(), [](const CKey& key) {\n+            return key.GetPrivKey();\n+        });\n+    };\n+};\n+\n+/** Generator for a new CPubKey */\n+template <>\n+struct Arbitrary<CPubKey> {\n+    static Gen<CPubKey> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CKey>(), [](const CKey& key) {\n+            return key.GetPubKey();\n+        });\n+    };\n+};\n+/** Generates a arbitrary uint256 */\n+template <>\n+struct Arbitrary<uint256> {\n+    static Gen<uint256> arbitrary()\n+    {\n+        return rc::gen::just(GetRandHash());\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "93059bac929409a152977b848ae9c8c57fa43028",
        "filename": "src/test/gen/merkleblock_gen.h",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/merkleblock_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/merkleblock_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/merkleblock_gen.h?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,93 @@\n+#ifndef BITCOIN_TEST_GEN_MERKLEBLOCK_GEN_H\n+#define BITCOIN_TEST_GEN_MERKLEBLOCK_GEN_H\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"merkleblock.h\"\n+#include \"test/gen/block_gen.h\"\n+\n+#include <iostream>\n+namespace rc\n+{\n+/** Returns a CMerkleblock with the hashes that match inside of the CPartialMerkleTree */\n+template <>\n+struct Arbitrary<std::pair<CMerkleBlock, std::set<uint256>>> {\n+    static Gen<std::pair<CMerkleBlock, std::set<uint256>>> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CBlock>(), [](const CBlock& block) {\n+            std::set<uint256> hashes;\n+            for (unsigned int i = 0; i < block.vtx.size(); i++) {\n+                //pretty naive to include every other txid in the merkle block\n+                //but this will work for now.\n+                if (i % 2 == 0) {\n+                    hashes.insert(block.vtx[i]->GetHash());\n+                }\n+            }\n+            return std::make_pair(CMerkleBlock(block, hashes), hashes);\n+        });\n+    };\n+};\n+\n+/** Returns [0,100) uint256s */\n+Gen<std::vector<uint256>> BetweenZeroAnd100()\n+{\n+    return gen::suchThat<std::vector<uint256>>([](const std::vector<uint256>& hashes) {\n+        return hashes.size() <= 100;\n+    });\n+}\n+/** Returns [1,100) uint256s */\n+Gen<std::vector<uint256>> Between1And100()\n+{\n+    return gen::suchThat(BetweenZeroAnd100(), [](const std::vector<uint256>& hashes) {\n+        return hashes.size() > 0 && hashes.size() <= 100;\n+    });\n+}\n+\n+/** Returns an arbitrary CMerkleBlock */\n+template <>\n+struct Arbitrary<CMerkleBlock> {\n+    static Gen<CMerkleBlock> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<std::pair<CMerkleBlock, std::set<uint256>>>(),\n+            [](const std::pair<const CMerkleBlock&, const std::set<uint256>&>& mb_with_txids) {\n+                const CMerkleBlock& mb = mb_with_txids.first;\n+                return mb;\n+            });\n+    };\n+};\n+\n+/** Generates a CPartialMerkleTree and returns the PartialMerkleTree along\n+   * with the txids that should be matched inside of it */\n+template <>\n+struct Arbitrary<std::pair<CPartialMerkleTree, std::vector<uint256>>> {\n+    static Gen<std::pair<CPartialMerkleTree, std::vector<uint256>>> arbitrary()\n+    {\n+        return gen::map(Between1And100(), [](const std::vector<uint256>& txids) {\n+            std::vector<bool> matches;\n+            std::vector<uint256> matched_txs;\n+            for (unsigned int i = 0; i < txids.size(); i++) {\n+                //pretty naive to include every other txid in the merkle block\n+                //but this will work for now.\n+                matches.push_back(i % 2 == 1);\n+                if (i % 2 == 1) {\n+                    matched_txs.push_back(txids[i]);\n+                }\n+            }\n+            return std::make_pair(CPartialMerkleTree(txids, matches), matched_txs);\n+        });\n+    };\n+};\n+\n+template <>\n+struct Arbitrary<CPartialMerkleTree> {\n+    static Gen<CPartialMerkleTree> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<std::pair<CPartialMerkleTree, std::vector<uint256>>>(),\n+            [](const std::pair<const CPartialMerkleTree&, const std::vector<uint256>&>& p) {\n+                return p.first;\n+            });\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "945ece7b6d5b4eab5b69e2c3d15f4887815859b8",
        "filename": "src/test/gen/script_gen.cpp",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/script_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/script_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/script_gen.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,88 @@\n+#include \"test/gen/script_gen.h\"\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n+#include \"base58.h\"\n+#include \"core_io.h\"\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Numeric.h>\n+\n+/** Generates a P2PK/CKey pair */\n+rc::Gen<SPKCKeyPair> P2PKSPK()\n+{\n+    return rc::gen::map(rc::gen::arbitrary<CKey>(), [](const CKey& key) {\n+        const CScript& s = GetScriptForRawPubKey(key.GetPubKey());\n+        std::vector<CKey> keys;\n+        keys.push_back(key);\n+        return std::make_pair(s, keys);\n+    });\n+}\n+/** Generates a P2PKH/CKey pair */\n+rc::Gen<SPKCKeyPair> P2PKHSPK()\n+{\n+    return rc::gen::map(rc::gen::arbitrary<CKey>(), [](const CKey& key) {\n+        CKeyID id = key.GetPubKey().GetID();\n+        std::vector<CKey> keys;\n+        keys.push_back(key);\n+        const CScript& s = GetScriptForDestination(id);\n+        return std::make_pair(s, keys);\n+    });\n+}\n+\n+/** Generates a MultiSigSPK/CKey(s) pair */\n+rc::Gen<SPKCKeyPair> MultisigSPK()\n+{\n+    return rc::gen::mapcat(MultisigKeys(), [](const std::vector<CKey>& keys) {\n+        return rc::gen::map(rc::gen::inRange<int>(1, keys.size()), [keys](int required_sigs) {\n+            std::vector<CPubKey> pub_keys;\n+            for (unsigned int i = 0; i < keys.size(); i++) {\n+                pub_keys.push_back(keys[i].GetPubKey());\n+            }\n+            const CScript& s = GetScriptForMultisig(required_sigs, pub_keys);\n+            return std::make_pair(s, keys);\n+        });\n+    });\n+}\n+\n+rc::Gen<SPKCKeyPair> RawSPK()\n+{\n+    return rc::gen::oneOf(P2PKSPK(), P2PKHSPK(), MultisigSPK(),\n+        P2WPKHSPK());\n+}\n+\n+/** Generates a P2SHSPK/CKey(s) */\n+rc::Gen<SPKCKeyPair> P2SHSPK()\n+{\n+    return rc::gen::map(RawSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& redeemScript = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript& p2sh = GetScriptForDestination(CScriptID(redeemScript));\n+        return std::make_pair(redeemScript, keys);\n+    });\n+}\n+\n+//witness SPKs\n+\n+rc::Gen<SPKCKeyPair> P2WPKHSPK()\n+{\n+    rc::Gen<SPKCKeyPair> spks = rc::gen::oneOf(P2PKSPK(), P2PKHSPK());\n+    return rc::gen::map(spks, [](const SPKCKeyPair& spk_keys) {\n+        const CScript& p2pk = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript& wit_spk = GetScriptForWitness(p2pk);\n+        return std::make_pair(wit_spk, keys);\n+    });\n+}\n+\n+rc::Gen<SPKCKeyPair> P2WSHSPK()\n+{\n+    return rc::gen::map(MultisigSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& p2pk = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript& wit_spk = GetScriptForWitness(p2pk);\n+        return std::make_pair(wit_spk, keys);\n+    });\n+}"
      },
      {
        "sha": "cc2a4a852661ed71cb1501c96598ee4f176ccef3",
        "filename": "src/test/gen/script_gen.h",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/script_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/script_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/script_gen.h?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,44 @@\n+#ifndef BITCOIN_TEST_GEN_SCRIPT_GEN_H\n+#define BITCOIN_TEST_GEN_SCRIPT_GEN_H\n+\n+#include \"script/script.h\"\n+#include \"key.h\"\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Container.h>\n+#include <rapidcheck/gen/Select.h>\n+\n+typedef std::pair<CScript, std::vector<CKey>> SPKCKeyPair;\n+\n+//non witness SPKs\n+rc::Gen<SPKCKeyPair> P2PKSPK();\n+\n+rc::Gen<SPKCKeyPair> P2PKHSPK();\n+\n+rc::Gen<SPKCKeyPair> MultisigSPK();\n+\n+/** Generates a non-P2SH/P2WSH spk */\n+rc::Gen<SPKCKeyPair> RawSPK();\n+\n+rc::Gen<SPKCKeyPair> P2SHSPK();\n+\n+//witness spks\n+\n+rc::Gen<SPKCKeyPair> P2WPKHSPK();\n+\n+rc::Gen<SPKCKeyPair> P2WSHSPK();\n+\n+namespace rc\n+{\n+template <>\n+struct Arbitrary<CScript> {\n+    static Gen<CScript> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<std::vector<unsigned char>>(), [](std::vector<unsigned char> script) {\n+            return CScript(script);\n+        });\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "05a46a7cf736f05d6daf7ea6c448c84cd79e1cf2",
        "filename": "src/test/gen/transaction_gen.cpp",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/transaction_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/transaction_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/transaction_gen.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,133 @@\n+#include \"test/gen/transaction_gen.h\"\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"test/gen/script_gen.h\"\n+\n+#include \"script/sign.h\"\n+#include \"script/script.h\"\n+#include \"primitives/transaction.h\"\n+#include \"core_io.h\"\n+#include \"keystore.h\"\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Select.h>\n+\n+CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = nValue;\n+\n+    return txCredit;\n+}\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CMutableTransaction& txCredit)\n+{\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vin[0].scriptWitness = scriptWitness;\n+    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txSpend.vout.resize(1);\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n+\n+    return txSpend;\n+}\n+\n+/** Helper function to generate a tx that spends a spk */\n+SpendingInfo sign(const SPKCKeyPair& spk_keys, const CScript& redeemScript = CScript())\n+{\n+    const int inputIndex = 0;\n+    const CAmount nValue = 0;\n+    const CScript& spk = spk_keys.first;\n+    const std::vector<CKey>& keys = spk_keys.second;\n+    CBasicKeyStore store;\n+    for (const auto k : keys) {\n+        store.AddKey(k);\n+    }\n+    //add redeem script\n+    store.AddCScript(redeemScript);\n+    CMutableTransaction creditingTx = BuildCreditingTransaction(spk, nValue);\n+    CMutableTransaction spendingTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditingTx);\n+    CTransaction spendingTxConst(spendingTx);\n+    SignatureData sigdata;\n+    TransactionSignatureCreator creator(&store, &spendingTxConst, inputIndex, 0);\n+    assert(ProduceSignature(creator, spk, sigdata));\n+    UpdateTransaction(spendingTx, 0, sigdata);\n+    const CTxOut& output = creditingTx.vout[0];\n+    const CTransaction finalTx = CTransaction(spendingTx);\n+    SpendingInfo tup = std::make_tuple(output, finalTx, inputIndex);\n+    return tup;\n+}\n+\n+/** A signed tx that validly spends a P2PKSPK */\n+rc::Gen<SpendingInfo> SignedP2PKTx()\n+{\n+    return rc::gen::map(P2PKSPK(), [](const SPKCKeyPair& spk_key) {\n+        return sign(spk_key);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2PKHTx()\n+{\n+    return rc::gen::map(P2PKHSPK(), [](const SPKCKeyPair& spk_key) {\n+        return sign(spk_key);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedMultisigTx()\n+{\n+    return rc::gen::map(MultisigSPK(), [](const SPKCKeyPair& spk_key) {\n+        return sign(spk_key);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2SHTx()\n+{\n+    return rc::gen::map(RawSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& redeemScript = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        //hash the spk\n+        const CScript& p2sh = GetScriptForDestination(CScriptID(redeemScript));\n+        return sign(std::make_pair(p2sh, keys), redeemScript);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2WPKHTx()\n+{\n+    return rc::gen::map(P2WPKHSPK(), [](const SPKCKeyPair& spk_keys) {\n+        return sign(spk_keys);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2WSHTx()\n+{\n+    return rc::gen::map(MultisigSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& redeemScript = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript p2wsh = GetScriptForWitness(redeemScript);\n+        return sign(std::make_pair(p2wsh, keys), redeemScript);\n+    });\n+}\n+\n+/** Generates an arbitrary validly signed tx */\n+rc::Gen<SpendingInfo> SignedTx()\n+{\n+    return rc::gen::oneOf(SignedP2PKTx(), SignedP2PKHTx(),\n+        SignedMultisigTx(), SignedP2SHTx(), SignedP2WPKHTx(),\n+        SignedP2WSHTx());\n+}"
      },
      {
        "sha": "2072d6a481c294f56ced4a124bd2a46c4f9f9bba",
        "filename": "src/test/gen/transaction_gen.h",
        "status": "added",
        "additions": 124,
        "deletions": 0,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/transaction_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/gen/transaction_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/transaction_gen.h?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,124 @@\n+#ifndef BITCOIN_TEST_GEN_TRANSACTION_GEN_H\n+#define BITCOIN_TEST_GEN_TRANSACTION_GEN_H\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"test/gen/script_gen.h\"\n+\n+#include \"script/script.h\"\n+#include \"primitives/transaction.h\"\n+#include \"amount.h\"\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+\n+typedef std::tuple<const CTxOut, const CTransaction, const int> SpendingInfo;\n+/** A signed tx that validly spends a P2PKSPK and the input index */\n+rc::Gen<SpendingInfo> SignedP2PKTx();\n+\n+/** A signed tx that validly spends a P2PKHSPK and the input index */\n+rc::Gen<SpendingInfo> SignedP2PKHTx();\n+\n+/** A signed tx that validly spends a MultisigSPK and the input index */\n+rc::Gen<SpendingInfo> SignedMultisigTx();\n+\n+/** A signed tx that validly spends a P2SHSPK and the input index */\n+rc::Gen<SpendingInfo> SignedP2SHTx();\n+\n+/** A signed tx that validly spends a P2WPKH and the input index */\n+rc::Gen<SpendingInfo> SignedP2WPKHTx();\n+\n+/** A signed tx that validly spends a P2WSH output and the input index */\n+rc::Gen<SpendingInfo> SignedP2WSHTx();\n+\n+/** Generates a arbitrary validly signed tx */\n+rc::Gen<SpendingInfo> SignedTx();\n+\n+namespace rc\n+{\n+/** Generator for a COutPoint */\n+template <>\n+struct Arbitrary<COutPoint> {\n+    static Gen<COutPoint> arbitrary()\n+    {\n+        return gen::map(gen::tuple(gen::arbitrary<uint256>(), gen::arbitrary<uint32_t>()), [](std::tuple<uint256, uint32_t> outPointPrimitives) {\n+            uint32_t nIn;\n+            uint256 nHashIn;\n+            std::tie(nHashIn, nIn) = outPointPrimitives;\n+            return COutPoint(nHashIn, nIn);\n+        });\n+    };\n+};\n+\n+/** Generator for a CTxIn */\n+template <>\n+struct Arbitrary<CTxIn> {\n+    static Gen<CTxIn> arbitrary()\n+    {\n+        return gen::map(gen::tuple(gen::arbitrary<COutPoint>(), gen::arbitrary<CScript>(), gen::arbitrary<uint32_t>()), [](const std::tuple<const COutPoint&, const CScript&, uint32_t>& primitives) {\n+            COutPoint outpoint;\n+            CScript script;\n+            uint32_t sequence;\n+            std::tie(outpoint, script, sequence) = primitives;\n+            return CTxIn(outpoint, script, sequence);\n+        });\n+    };\n+};\n+\n+/** Generator for a CAmount */\n+template <>\n+struct Arbitrary<CAmount> {\n+    static Gen<CAmount> arbitrary()\n+    {\n+        //why doesn't this generator call work? It seems to cause an infinite loop.\n+        //return gen::arbitrary<int64_t>();\n+        return gen::inRange<int64_t>(std::numeric_limits<int64_t>::min(), std::numeric_limits<int64_t>::max());\n+    };\n+};\n+\n+/** Generator for CTxOut */\n+template <>\n+struct Arbitrary<CTxOut> {\n+    static Gen<CTxOut> arbitrary()\n+    {\n+        return gen::map(gen::pair(gen::arbitrary<CAmount>(), gen::arbitrary<CScript>()), [](const std::pair<CAmount, CScript>& primitives) {\n+            return CTxOut(primitives.first, primitives.second);\n+        });\n+    };\n+};\n+\n+/** Generator for a CTransaction */\n+template <>\n+struct Arbitrary<CTransaction> {\n+    static Gen<CTransaction> arbitrary()\n+    {\n+        return gen::map(gen::tuple(gen::arbitrary<int32_t>(),\n+                            gen::nonEmpty<std::vector<CTxIn>>(), gen::nonEmpty<std::vector<CTxOut>>(), gen::arbitrary<uint32_t>()),\n+            [](const std::tuple<int32_t, const std::vector<CTxIn>&, const std::vector<CTxOut>&, uint32_t>& primitives) {\n+                CMutableTransaction tx;\n+                int32_t nVersion;\n+                std::vector<CTxIn> vin;\n+                std::vector<CTxOut> vout;\n+                uint32_t locktime;\n+                std::tie(nVersion, vin, vout, locktime) = primitives;\n+                tx.nVersion = nVersion;\n+                tx.vin = vin;\n+                tx.vout = vout;\n+                tx.nLockTime = locktime;\n+                return CTransaction(tx);\n+            });\n+    };\n+};\n+\n+/** Generator for a CTransactionRef */\n+template <>\n+struct Arbitrary<CTransactionRef> {\n+    static Gen<CTransactionRef> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CTransaction>(), [](const CTransaction& tx) {\n+            return MakeTransactionRef(tx);\n+        });\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "988dafe82c44ba6e29c6c0f7d63f491ae51cc5d0",
        "filename": "src/test/key_properties.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/key_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/key_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_properties.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"key.h\"\n+\n+#include \"base58.h\"\n+#include \"script/script.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n+#include <string>\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"test/gen/crypto_gen.h\"\n+\n+BOOST_FIXTURE_TEST_SUITE(key_properties, BasicTestingSetup)\n+\n+/** Check CKey uniqueness */\n+RC_BOOST_PROP(key_uniqueness, (const CKey& key1, const CKey& key2))\n+{\n+    RC_ASSERT(!(key1 == key2));\n+}\n+\n+/** Verify that a private key generates the correct public key */\n+RC_BOOST_PROP(key_generates_correct_pubkey, (const CKey& key))\n+{\n+    CPubKey pubKey = key.GetPubKey();\n+    RC_ASSERT(key.VerifyPubKey(pubKey));\n+}\n+\n+/** Serialization symmetry CKey -> CBitcoinSecret -> CKey */\n+RC_BOOST_PROP(key_bitcoinsecret_symmetry, (const CKey& key))\n+{\n+    CBitcoinSecret secret;\n+    secret.SetKey(key);\n+    RC_ASSERT(secret.GetKey() == key);\n+}\n+\n+/** Create a CKey using the 'Set' function must give us the same key */\n+RC_BOOST_PROP(key_set_symmetry, (const CKey& key))\n+{\n+    CKey key1;\n+    key1.Set(key.begin(), key.end(), key.IsCompressed());\n+    RC_ASSERT(key1 == key);\n+}\n+\n+/** Create a CKey, sign a piece of data, then verify it with the public key */\n+RC_BOOST_PROP(key_sign_symmetry, (const CKey& key, const uint256& hash))\n+{\n+    std::vector<unsigned char> vchSig;\n+    key.Sign(hash, vchSig, 0);\n+    const CPubKey& pubKey = key.GetPubKey();\n+    RC_ASSERT(pubKey.Verify(hash, vchSig));\n+}\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "39240d6e0b64a7059d5a67f7cf9fbadc89eb42a8",
        "filename": "src/test/merkleblock_properties.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/merkleblock_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/merkleblock_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_properties.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,61 @@\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"merkleblock.h\"\n+#include \"test/gen/merkleblock_gen.h\"\n+\n+#include <iostream>\n+BOOST_FIXTURE_TEST_SUITE(merkleblock_properties, BasicTestingSetup)\n+\n+RC_BOOST_PROP(merkleblock_serialization_symmetry, (const CMerkleBlock& mb))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << mb;\n+    CMerkleBlock mb2;\n+    ss >> mb2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << mb;\n+    ss1 << mb2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+\n+/** Should find all txids we inserted in the merkle block */\n+RC_BOOST_PROP(merkle_block_match_symmetry, (std::pair<CMerkleBlock, std::set<uint256>> p))\n+{\n+    const CMerkleBlock& mb = p.first;\n+    const std::set<uint256>& inserted_hashes = p.second;\n+    for (unsigned int i = 0; i < mb.vMatchedTxn.size(); i++) {\n+        const auto& h = mb.vMatchedTxn[i].second;\n+        RC_ASSERT(inserted_hashes.find(h) != inserted_hashes.end());\n+    }\n+}\n+\n+RC_BOOST_PROP(partialmerkletree_serialization_symmetry, (const CPartialMerkleTree& tree))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << tree;\n+    CPartialMerkleTree tree2;\n+    ss >> tree2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << tree;\n+    ss1 << tree2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+\n+\n+/** Should find all txids we inserted in the PartialMerkleTree */\n+RC_BOOST_PROP(partialmerkletree_extract_matches_symmetry, (std::pair<CPartialMerkleTree, std::vector<uint256>> p))\n+{\n+    CPartialMerkleTree& tree = p.first;\n+    const std::vector<uint256>& expectedMatches = p.second;\n+    std::vector<uint256> matches;\n+    std::vector<unsigned int> indices;\n+    tree.ExtractMatches(matches, indices);\n+    RC_ASSERT(matches == expectedMatches);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8d929e351e1793b82ce70d8e5f1bd20c82112861",
        "filename": "src/test/script_properties.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/script_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/script_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_properties.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,26 @@\n+#include <string>\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"test/gen/script_gen.h\"\n+\n+BOOST_FIXTURE_TEST_SUITE(script_properties, BasicTestingSetup)\n+\n+/** Check CScript serialization symmetry */\n+RC_BOOST_PROP(cscript_serialization_symmetry, (const CScript& script))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << static_cast<const CScriptBase&>(script);\n+    std::vector<unsigned char> deserialized;\n+    ss >> deserialized;\n+    CScript script2 = CScript(deserialized.begin(), deserialized.end());\n+    RC_ASSERT(script == script2);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "e9b456f86fd68cb98e5988d700e48c3771796140",
        "filename": "src/test/transaction_properties.cpp",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/transaction_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd92dade83f79d65274eca158c156126a8a58a1/src/test/transaction_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_properties.cpp?ref=7fd92dade83f79d65274eca158c156126a8a58a1",
        "patch": "@@ -0,0 +1,116 @@\n+\n+#include \"test/gen/transaction_gen.h\"\n+\n+#include \"key.h\"\n+#include \"base58.h\"\n+#include \"script/script.h\"\n+#include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"streams.h\"\n+#include <string>\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(transaction_properties, BasicTestingSetup)\n+/** Helper function to run a SpendingInfo through the interpreter to check\n+  * validity of the transaction spending a spk */\n+bool run(SpendingInfo info)\n+{\n+    const CTxOut output = std::get<0>(info);\n+    const CTransaction tx = std::get<1>(info);\n+    const int input_idx = std::get<2>(info);\n+    const CTxIn input = tx.vin[input_idx];\n+    const CScript scriptSig = input.scriptSig;\n+    TransactionSignatureChecker checker(&tx, input_idx, output.nValue);\n+    const CScriptWitness wit = input.scriptWitness;\n+    //run it through the interpreter\n+    bool result = VerifyScript(scriptSig, output.scriptPubKey,\n+        &wit, STANDARD_SCRIPT_VERIFY_FLAGS, checker);\n+    return result;\n+}\n+/** Check COutpoint serialization symmetry */\n+RC_BOOST_PROP(outpoint_serialization_symmetry, (const COutPoint& outpoint))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << outpoint;\n+    COutPoint outpoint2;\n+    ss >> outpoint2;\n+    RC_ASSERT(outpoint2 == outpoint);\n+}\n+/** Check CTxIn serialization symmetry */\n+RC_BOOST_PROP(ctxin_serialization_symmetry, (const CTxIn& txin))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << txin;\n+    CTxIn txin2;\n+    ss >> txin2;\n+    RC_ASSERT(txin == txin2);\n+}\n+\n+/** Check CTxOut serialization symmetry */\n+RC_BOOST_PROP(ctxout_serialization_symmetry, (const CTxOut& txout))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << txout;\n+    CTxOut txout2;\n+    ss >> txout2;\n+    RC_ASSERT(txout == txout2);\n+}\n+\n+/** Check CTransaction serialization symmetry */\n+RC_BOOST_PROP(ctransaction_serialization_symmetry, (const CTransaction& tx))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << tx;\n+    CTransaction tx2(deserialize, ss);\n+    RC_ASSERT(tx == tx2);\n+}\n+\n+/** Check that we can spend a p2pk tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_p2pk_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2PKTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+/** Check that we can spend a p2pkh tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_p2pkh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2PKHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+/** Check that we can spend a multisig tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_multisig_tx, ())\n+{\n+    const SpendingInfo& info = *SignedMultisigTx();\n+    RC_ASSERT(run(info));\n+}\n+/** Check that we can spend a p2sh tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_p2sh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2SHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+RC_BOOST_PROP(spend_p2wpkh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2WPKHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+RC_BOOST_PROP(spend_p2wsh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2WSHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]