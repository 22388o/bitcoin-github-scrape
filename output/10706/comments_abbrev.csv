morcos,2017-07-10T16:45:40Z,Rebased against the updated #10589 and fixed bug as well as improved parameter precedence logic for Coin Control.,https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-314164879,314164879,
morcos,2017-07-11T14:47:13Z,Rebased cleanly so only new commits are left after #10589 was merged,https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-314468238,314468238,
morcos,2017-07-11T17:49:12Z,"Rebased to accomodate #10712 and moved fOverrideFeeRate inside GetMinimumFee\n",https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-314521211,314521211,
TheBlueMatt,2017-07-12T01:29:39Z,utACK fb98c64134a3334d4d892af5ff08bc4291ea7b82,https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-314618408,314618408,
morcos,2017-07-12T18:58:30Z,"Addressed @ryanofsky feedback and added a commit to do proper bounds checking.  boost::none's were just all removed in one commit for simplicity.\n\n([feelogic.ver2](https://github.com/morcos/bitcoin/commits/feelogic.ver2)) -> c494da9 ([feelogic.ver2.squash](https://github.com/morcos/bitcoin/commits/feelogic.ver2.squash))",https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-314864785,314864785,
morcos,2017-07-13T21:13:23Z,@jnewbery See if you like the reorganization of GetMinimumFee and if so I'll squash both commits,https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-315204012,315204012,
jnewbery,2017-07-13T21:34:51Z,"> See if you like the reorganization of GetMinimumFee\n\nI wasn't necessarily advocating for changing the order of the conditionals, just for flattening the nested ifs. I'm happy in either order.\n\nDefinitely like the extra comments referring to which of the 4 branches the blocks match up to.\n\nThe indentation on LL2942-2943 is incorrect. Fix that and I'm happy!",https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-315208619,315208619,
morcos,2017-07-14T15:07:36Z,"addressed @jnewbery nits and slight refactor of logic in `GetMinimumFee` (same end result)\n([feelogic.ver4](https://github.com/morcos/bitcoin/commits/feelogic.ver4)) -> 759db91 ([feelogic.ver4.squash](https://github.com/morcos/bitcoin/commits/feelogic.ver4.squash))",https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-315383901,315383901,
morcos,2017-07-15T03:48:52Z,"Unfortunately this required a bit of a rebase due to conflict with #10769 in `qt/sendcoinsdialog.cpp`\nOther files had clean rebase.\n",https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-315507036,315507036,
TheBlueMatt,2017-07-16T22:18:41Z,re-utACK 11590d39b9888403ead8354302e308eca139ba17,https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-315641589,315641589,
laanwj,2017-07-17T07:25:30Z,utACK 11590d3,https://github.com/bitcoin/bitcoin/pull/10706#issuecomment-315683909,315683909,
TheBlueMatt,2017-07-09T17:02:50Z,"Gah, I'd really rather keep the old magic value of just 0 means default instead of adding boost::optional (and kinda would prefer to skip boost::option in favor of more descriptive names for m_feerate, too).",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126309923,126309923,src/wallet/coincontrol.h
TheBlueMatt,2017-07-09T22:18:41Z,"Can you write out more docs here?\n""m_feerate unset uses global paytxfee (if set) otherwise uses smart fee estimation. m_feerate set to 0 ignores global paytxfee and uses smart fee estimation. m_feerate set skips fee estimation but applies minTxFee and maxTxFee""\n""fOverrideFeeRate overrides all other feerate options (global paytxfee, smart fee estimation, txconfirmtarget, min+maxTxFee, etc) and ",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126316958,126316958,src/wallet/coincontrol.h
TheBlueMatt,2017-07-09T22:25:48Z,"This changes the newTxReplaceable option to fWalletRbf instead of true. Maybe leave it the way it was, or was this on purpose?",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126317135,126317135,src/qt/walletmodel.cpp
morcos,2017-07-10T00:58:47Z,Good catch.  Will fix. I think I just assumed how the code worked and didn't even look at what I was replacing.,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126320980,126320980,src/qt/walletmodel.cpp
morcos,2017-07-10T01:04:54Z,"I hate the magic values of 0.  Actually I think I should make the logic even slightly more clear.\nThere should just be a clear parameter precedence.\n- coin_control.m_feerate\n- coin_control.m_confirm_target\n- ::payTxFee (global)\n- ::nTxConfirmTarget (globa)\n\nIt goes down the list until it fines one that is set and all the first 3 should be boost::optional's.  Why do you not like boost",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126321225,126321225,src/wallet/coincontrol.h
morcos,2017-07-10T01:05:05Z,"(see above, will document when we have a final logic)",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126321230,126321230,src/wallet/coincontrol.h
TheBlueMatt,2017-07-10T01:11:28Z,"Hmm, maybe I shouldnt argue against boost::optional. I'm not a fan of optional types, but they do make sense here. Any further simplification would be nice, this stuff is gross (thanks for cleaning it up!).",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126321560,126321560,src/wallet/coincontrol.h
ryanofsky,2017-07-10T22:58:06Z,"In commit ""Make CoinControl a required argument to CreateTransaction""\n\nWould be nice to make coin control a required argument to AvailableCoins as well. (To get rid of more multiply-defined default values.)",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126557663,126557663,src/wallet/wallet.cpp
ryanofsky,2017-07-10T22:58:24Z,"In commit ""Make CoinControl a required argument to CreateTransaction""\n\nWould be nice if to make coin control a required argument to SelectCoins as well.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126557699,126557699,src/wallet/wallet.cpp
ryanofsky,2017-07-10T23:11:40Z,"In commit ""Refactor to use CoinControl in GetMinimumFee and FeeBumper""\n\nMaybe replace ` = boost::none` with `.reset()` here and other places to remove boost reference and make it a little easier to port to `std::optional` in the future.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126559649,126559649,src/wallet/coincontrol.h
ryanofsky,2017-07-10T23:17:45Z,"In commit ""Refactor to use CoinControl in GetMinimumFee and FeeBumper""\n\nYou should definitely get rid of the `fOverrideFeeRate` member now that `m_feerate` is optional.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126560525,126560525,src/wallet/coincontrol.h
morcos,2017-07-11T00:28:14Z,"Well..  almost\n`fOverrideFeeRate` is used from `fundrawtransaction` and it seems to me that it might make sense that you don't want your specified fee rate subject to clamping by various min fees or the maxTxFee when you are using it from there but you do generally.  \n\nIn any case it would be a change of functionality to change that, so we should do it separately.\n",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126569510,126569510,src/wallet/coincontrol.h
morcos,2017-07-11T00:32:04Z,"I agree, but decided it would make this PR a bit too big.\n\n~Which multiply defined values are you referring to though?~ (edit: i think you just mean too many arguments with default values defined)",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126569962,126569962,src/wallet/wallet.cpp
morcos,2017-07-11T00:32:33Z,will do,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126570021,126570021,src/wallet/coincontrol.h
ryanofsky,2017-07-11T14:20:22Z,"> Which multiply defined values are you referring to though?\n\nI was just referring to the fact that functions accepting null coincontrol pointers have to figure out their own default values instead of using the ones in CoinControl::SetNull.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126702463,126702463,src/wallet/wallet.cpp
morcos,2017-07-11T14:46:38Z,"Actually turns out `.reset()` is deprecated so left it as is.\n",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126710815,126710815,src/wallet/coincontrol.h
ryanofsky,2017-07-11T15:23:49Z,"> Actually turns out .reset() is deprecated so left it as is.\n\n.reset is part of c++17 (http://en.cppreference.com/w/cpp/utility/optional/reset) so I still think it would be better to switch to this. (I don't think we'd be using `boost::optional` at all now if we weren't planning to switch to `std::optional` in the future.)",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126722897,126722897,src/wallet/coincontrol.h
TheBlueMatt,2017-07-11T15:31:04Z,It would be nice to move this check into GetMinimumFee so that everything is ompletely in the same place.,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126725112,126725112,src/wallet/wallet.cpp
morcos,2017-07-11T17:44:19Z,done,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126759774,126759774,src/wallet/wallet.cpp
ryanofsky,2017-07-11T18:28:07Z,"In commit ""Refactor to use CoinControl in GetMinimumFee and FeeBumper""\n\nWhy this fixme? Is the previous comment about upper bound not actually true?",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126771241,126771241,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-11T18:31:58Z,"> fOverrideFeeRate is used from fundrawtransaction\n\nSorry, misread fOverrideFeeRate comment. And this is now pretty clear with fOverrideFeeRate handled in GetMinimumFee.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126772239,126772239,src/wallet/coincontrol.h
ryanofsky,2017-07-11T18:49:00Z,"In commit ""Refactor to use CoinControl in GetMinimumFee and FeeBumper""\n\nMaybe `assert(coinControl->m_confirm_target)` somewhere in this function. The event handling code which sets this seems a little precarious, so it'd be good to know if coinControl hasn't been initialized correctly.\n",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126776291,126776291,src/qt/coincontroldialog.cpp
ryanofsky,2017-07-11T20:31:45Z,"In commit ""Make QT fee displays use GetMinimumFee instead of estimateSmartFee"":\n\nIs this sufficient to know fee estimation succeeded? For example would it be possible for estimate to fail, and then fallbackFee to be less than RequiredFee, so reason would be REQUIRED not FALLBACK?\n\nAlso can you expand commit description to say a little bit about why it's better to display minimum fee instea",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126799924,126799924,src/qt/sendcoinsdialog.cpp
morcos,2017-07-12T15:55:03Z,"Correct, that comment about upper-bound is not true, I don't know why it was put there.\nAt the time I wrote these PR's I had a lot of important stuff I wanted to make sure got in, so I didn't want to fix every last little thing, but I think I could easily add a commit now that checks the bounds everywhere necessary.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126995724,126995724,src/wallet/rpcwallet.cpp
morcos,2017-07-12T16:04:57Z,"I think the behavior in rare edge cases is maybe not precisely correct, but there is likely no harm in it.  The only thing you are missing is a warning that fee estimation is not up to date yet, and before this PR that could already happen if there was a mempool min fee (in which case you wouldn't even get maxed with the fallback fee).  After this PR, you only miss the warning if your fallback fee",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126998630,126998630,src/qt/sendcoinsdialog.cpp
morcos,2017-07-12T16:05:32Z,seems reasonable,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r126998781,126998781,src/qt/coincontroldialog.cpp
ryanofsky,2017-07-12T17:52:18Z,"> I think the behavior in rare edge cases is maybe not precisely correct, but there is likely no harm in it.\n\nI see. This is less significant than I thought because the fee is shown either way, just the labeling is different.\n\n> I can expand commit description, but the idea is the displays should correspond to the fees that your actually about to put on the transaction if you click send. I",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127025140,127025140,src/qt/sendcoinsdialog.cpp
morcos,2017-07-12T18:56:06Z,"this one went away, but addressed a similar one in qt/sendcoinsdialog.cpp",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127041708,127041708,src/qt/coincontroldialog.cpp
jnewbery,2017-07-13T17:44:05Z,"nit: I think this is clearer as:\n\n```\nif {\n    ...\n} else if {\n    ...\n} else {\n    ...\n}\n```\n\nrather than:\n\n```\nif {\n    ...\n} else {\n    if {\n        ...\n    } else {\n        ...\n    }\n}\n```\n\n(to match the logical construction of the comment above)",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127283755,127283755,src/wallet/wallet.cpp
jnewbery,2017-07-13T17:45:06Z,supernit: braces,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127284032,127284032,src/wallet/wallet.cpp
jnewbery,2017-07-13T17:45:21Z,nit: braces,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127284108,127284108,src/wallet/wallet.cpp
jnewbery,2017-07-13T17:55:20Z,The `... unless ` comment doesn't make sense now that you've removed the earlier `use -txconfirmtarget to estimate...` comment. Perhaps just remove the `... unless`?,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127286702,127286702,src/wallet/wallet.cpp
jnewbery,2017-07-13T18:57:20Z,"Why is this in `rpc/mining.cpp`? All of the calls to this function are in `wallet/rpcwallet.cpp`. Can you just put the function there?\n\nAlso the comment is a bit misleading - this function checks confirm target in RPCs, not command line arguments.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127302365,127302365,src/rpc/mining.h
ryanofsky,2017-07-13T19:09:47Z,"I wondered same thing initially, but I think it was written this way to unify the logic behind cases #2 and #4 which are very similar.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127305448,127305448,src/wallet/wallet.cpp
morcos,2017-07-13T19:15:42Z,#10707 adds it to the RPC calls in rpc/mining.cpp and rpcwallet.cpp already includes rpc/mining.h,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127306861,127306861,src/rpc/mining.h
sipa,2017-07-15T18:42:41Z,Perhaps worth pointing out that the result may not be sufficient to be acceptable for the mempool?,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127590540,127590540,src/rpc/mining.cpp
sipa,2017-07-15T18:44:30Z,Nit: `else` on the same line,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127590567,127590567,src/wallet/wallet.cpp
morcos,2017-07-15T18:56:54Z,I think we should at least flag the change in the release notes but I don't think that's necessarily something users need to worry about.  In the event that the tx isn't accepted to the mempool it's still likely'ish to be confirmed within the target by being resubmitted after mempool min fee decays.  Which makes me wonder if we should even be worrying about mempool min fee in the GetMinimumFee log,https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127590811,127590811,src/rpc/mining.cpp
laanwj,2017-07-17T07:24:58Z,"Thanks. Definitely seems an improvement with regard to CCoinControl handling.\nHopefully in a next PR we can finally get rid of this global object too.",https://github.com/bitcoin/bitcoin/pull/10706#discussion_r127644615,127644615,src/qt/sendcoinsdialog.cpp
