[
  {
    "sha": "ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2Q4MWRmYTNjYWU0Y2MxYWUzNjM4YmVjZmJlZmM3NjgyOWFkYTA0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T20:41:55Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:07:18Z"
      },
      "message": "Make CoinControl a required argument to CreateTransaction",
      "tree": {
        "sha": "a33077879778ef5c84ab332b515d8a440269386e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33077879778ef5c84ab332b515d8a440269386e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 27,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1a07d466bfe9e24ed10e684e28b2a9a1b358bd74",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -281,7 +281,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     ctrl.signalRbf = ui->optInRBF->isChecked();\n \n-    prepareStatus = model->prepareTransaction(currentTransaction, &ctrl);\n+    prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,"
      },
      {
        "sha": "3f90860cc1f0524d51e40b03d01e3ca9195c633f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -191,7 +191,7 @@ bool WalletModel::validateAddress(const QString &address)\n     return addressParsed.IsValid();\n }\n \n-WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n+WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl)\n {\n     CAmount total = 0;\n     bool fSubtractFeeFromAmount = false;\n@@ -258,7 +258,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    CAmount nBalance = getBalance(coinControl);\n+    CAmount nBalance = getBalance(&coinControl);\n \n     if(total > nBalance)\n     {"
      },
      {
        "sha": "5258dc669939a2b310e9822def01f17e74c7b920",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -154,7 +154,7 @@ class WalletModel : public QObject\n     };\n \n     // prepare transaction for getting txfee before sending coins\n-    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl = NULL);\n+    SendCoinsReturn prepareTransaction(WalletModelTransaction &transaction, const CCoinControl& coinControl);\n \n     // Send coins to a list of recipients\n     SendCoinsReturn sendCoins(WalletModelTransaction &transaction);"
      },
      {
        "sha": "1916908922099ab7e7a560564cf3e4bc4e8eaefe",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -356,7 +356,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, CCoinControl *coin_control = nullptr)\n+static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, const CCoinControl& coin_control)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -472,7 +472,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, &coin_control);\n+    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -898,7 +898,8 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(pwallet, address.Get(), nAmount, false, wtx);\n+    CCoinControl no_coin_control; // This is a deprecated API\n+    SendMoney(pwallet, address.Get(), nAmount, false, wtx, no_coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -1033,7 +1034,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, &coin_control);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;"
      },
      {
        "sha": "8176a0017c9fe6824a6be1afa0f7b5f238f709b4",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -13,6 +13,7 @@\n #include \"rpc/server.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/test/wallet_test_fixture.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -617,7 +618,8 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CAmount fee;\n         int changePos = -1;\n         std::string error;\n-        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error));\n+        CCoinControl dummy;\n+        BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n         auto it = wallet->mapWallet.find(wtx.GetHash());"
      },
      {
        "sha": "f69ae5268c80c2f0f406a1d591e166d20025769d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -2469,9 +2469,9 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n         return false;\n-\n+    }\n     if (nChangePosInOut != -1)\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, wtx.tx->vout[nChangePosInOut]);\n \n@@ -2502,7 +2502,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n }\n \n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n@@ -2567,20 +2567,17 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n         LOCK2(cs_main, cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(vAvailableCoins, true, coinControl);\n+            AvailableCoins(vAvailableCoins, true, &coin_control);\n \n             // Create change script that will be used if we need change\n             // TODO: pass in scriptChange instead of reservekey so\n             // change transaction isn't always pay-to-bitcoin-address\n             CScript scriptChange;\n \n             // coin control: send change to custom address\n-            if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                scriptChange = GetScriptForDestination(coinControl->destChange);\n-\n-            // no coin control: send change to newly generated address\n-            else\n-            {\n+            if (!boost::get<CNoDestination>(&coin_control.destChange)) {\n+                scriptChange = GetScriptForDestination(coin_control.destChange);\n+            } else { // no coin control: send change to newly generated address\n                 // Note: We use a new key here to keep it from being obvious which side is the change.\n                 //  The drawback is that by not reusing a previous key, the change may be lost if a\n                 //  backup is restored, if the backup doesn't have the new private key for the change.\n@@ -2654,7 +2651,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, &coin_control))\n                     {\n                         strFailReason = _(\"Insufficient funds\");\n                         return false;\n@@ -2705,8 +2702,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 // to avoid conflicting with other possible uses of nSequence,\n                 // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n-                bool rbf = coinControl ? coinControl->signalRbf : fWalletRbf;\n-                const uint32_t nSequence = rbf ? MAX_BIP125_RBF_SEQUENCE : (std::numeric_limits<unsigned int>::max() - 1);\n+                const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (std::numeric_limits<unsigned int>::max() - 1);\n                 for (const auto& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               nSequence));\n@@ -2727,15 +2723,15 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                 // Allow to override the default confirmation target over the CoinControl instance\n                 int currentConfirmationTarget = nTxConfirmTarget;\n-                if (coinControl && coinControl->nConfirmTarget > 0)\n-                    currentConfirmationTarget = coinControl->nConfirmTarget;\n+                if (coin_control.nConfirmTarget > 0)\n+                    currentConfirmationTarget = coin_control.nConfirmTarget;\n \n                 // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET, rbf);\n+                bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n-                if (coinControl && coinControl->fOverrideFeeRate)\n-                    nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n+                if (coin_control.fOverrideFeeRate)\n+                    nFeeNeeded = coin_control.nFeeRate.GetFee(nBytes);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee."
      },
      {
        "sha": "d8717ea179f9ee975a5bdeb8bba8f7ac3d62ac93",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd81dfa3cae4cc1ae3638becfbefc76829ada04/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "patch": "@@ -949,7 +949,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n-                           std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+                           std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);"
      }
    ]
  },
  {
    "sha": "03ee70116189bb358e7c6224ba0ecb745e8161c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2VlNzAxMTYxODliYjM1OGU3YzYyMjRiYTBlY2I3NDVlODE2MWMy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T21:23:46Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:10:58Z"
      },
      "message": "Refactor to use CoinControl in GetMinimumFee and FeeBumper\n\nImprove parameter precedence in coin_control",
      "tree": {
        "sha": "da101ee895880747adc65a5d2d0d439613ce631a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da101ee895880747adc65a5d2d0d439613ce631a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03ee70116189bb358e7c6224ba0ecb745e8161c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd81dfa3cae4cc1ae3638becfbefc76829ada04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd81dfa3cae4cc1ae3638becfbefc76829ada04"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 79,
      "deletions": 73
    },
    "files": [
      {
        "sha": "7d8ef6571f4d84f8d10c6e4249992fe54df54fab",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -512,7 +512,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, *coinControl, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n \n         if (nPayAmount > 0)\n         {\n@@ -587,7 +587,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(*coinControl->m_confirm_target, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "92478fcac6d77bfdd21b2f78263dd27b8dbf2066",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -274,11 +274,11 @@ void SendCoinsDialog::on_sendButton_clicked()\n     CCoinControl ctrl;\n     if (model->getOptionsModel()->getCoinControlFeatures())\n         ctrl = *CoinControlDialog::coinControl;\n-    if (ui->radioSmartFee->isChecked())\n-        ctrl.nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    else\n-        ctrl.nConfirmTarget = 0;\n-\n+    if (ui->radioSmartFee->isChecked()) {\n+        ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    } else {\n+        ctrl.m_confirm_target = boost::none;\n+    }\n     ctrl.signalRbf = ui->optInRBF->isChecked();\n \n     prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n@@ -848,9 +848,9 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n     if (ui->radioSmartFee->isChecked()) {\n-        CoinControlDialog::coinControl->nConfirmTarget = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+        CoinControlDialog::coinControl->m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     } else {\n-        CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n+        CoinControlDialog::coinControl->m_confirm_target = boost::none;\n     }\n     CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n "
      },
      {
        "sha": "ba0e1da0c787104f303f76050f095b01a490d4fb",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -24,6 +24,7 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\" // for GetBoolArg\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\" // for BackupWallet\n@@ -667,8 +668,10 @@ bool WalletModel::bumpFee(uint256 hash)\n {\n     std::unique_ptr<CFeeBumper> feeBump;\n     {\n+        CCoinControl coin_control;\n+        coin_control.signalRbf = true;\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true, FeeEstimateMode::UNSET));\n+        feeBump.reset(new CFeeBumper(wallet, hash, coin_control, 0));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "40c8b764b96993c4b2c24bee2b572b2d0f547124",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -10,6 +10,8 @@\n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n \n+#include <boost/optional.hpp>\n+\n /** Coin Control Features. */\n class CCoinControl\n {\n@@ -19,12 +21,12 @@ class CCoinControl\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n     bool fAllowWatchOnly;\n-    //! Override estimated feerate\n+    //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n-    //! Feerate to use if overrideFeeRate is true\n-    CFeeRate nFeeRate;\n-    //! Override the default confirmation target, 0 = use default\n-    int nConfirmTarget;\n+    //! Override the default payTxFee if set\n+    boost::optional<CFeeRate> m_feerate;\n+    //! Override the default confirmation target if set\n+    boost::optional<unsigned int> m_confirm_target;\n     //! Signal BIP-125 replace by fee.\n     bool signalRbf;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n@@ -41,9 +43,9 @@ class CCoinControl\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();\n-        nFeeRate = CFeeRate(0);\n+        m_feerate = boost::none;\n         fOverrideFeeRate = false;\n-        nConfirmTarget = 0;\n+        m_confirm_target = boost::none;\n         signalRbf = fWalletRbf;\n         m_fee_mode = FeeEstimateMode::UNSET;\n     }"
      },
      {
        "sha": "4bfd8726a54f771b46c1df7fe478ab964a5415e3",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"consensus/validation.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n #include \"policy/fees.h\"\n@@ -66,7 +67,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -165,8 +166,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(fee_mode, newTxReplaceable);\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n@@ -221,7 +221,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     }\n \n     // Mark new tx not replaceable, if requested.\n-    if (!newTxReplaceable) {\n+    if (!coin_control.signalRbf) {\n         for (auto& input : mtx.vin) {\n             if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n         }"
      },
      {
        "sha": "3d64e53c15c850d4c8e839b0c36ad694eb540385",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -10,6 +10,7 @@\n class CWallet;\n class CWalletTx;\n class uint256;\n+class CCoinControl;\n enum class FeeEstimateMode;\n \n enum class BumpFeeResult\n@@ -25,7 +26,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, const CCoinControl& coin_control, CAmount totalFee);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "c636fa8114456d2b6a72886beea49771109bc296",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 21,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -460,7 +460,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.nConfirmTarget = request.params[6].get_int();\n+        coin_control.m_confirm_target = request.params[6].get_int();\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -981,7 +981,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.nConfirmTarget = request.params[6].get_int();\n+        coin_control.m_confirm_target = request.params[6].get_int();\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -2730,13 +2730,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     CCoinControl coinControl;\n-    coinControl.destChange = CNoDestination();\n     int changePosition = -1;\n-    coinControl.fAllowWatchOnly = false;  // include watching\n     bool lockUnspents = false;\n     bool reserveChangeKey = true;\n-    coinControl.nFeeRate = CFeeRate(0);\n-    coinControl.fOverrideFeeRate = false;\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n \n@@ -2788,7 +2784,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n         if (options.exists(\"feeRate\"))\n         {\n-            coinControl.nFeeRate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             coinControl.fOverrideFeeRate = true;\n         }\n \n@@ -2799,7 +2795,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"conf_target\")) {\n-            coinControl.nConfirmTarget = options[\"conf_target\"].get_int();\n+            coinControl.m_confirm_target = options[\"conf_target\"].get_int();\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n@@ -2905,11 +2901,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     hash.SetHex(request.params[0].get_str());\n \n     // optional parameters\n-    bool ignoreGlobalPayTxFee = false;\n-    int newConfirmTarget = nTxConfirmTarget;\n     CAmount totalFee = 0;\n-    bool replaceable = true;\n-    FeeEstimateMode fee_mode = FeeEstimateMode::UNSET;\n+    CCoinControl coin_control;\n+    coin_control.signalRbf = true;\n     if (request.params.size() > 1) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n@@ -2924,14 +2918,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) {\n-            // If the user has explicitly set a confTarget in this rpc call,\n-            // then override the default logic that uses the global payTxFee\n-            // instead of the confirmation target.\n-            ignoreGlobalPayTxFee = true;\n-            newConfirmTarget = options[\"confTarget\"].get_int();\n-            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+            int target = options[\"confTarget\"].get_int();\n+            if (target <= 0) { // FIXME: Check upper bound too\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n             }\n+            coin_control.m_confirm_target = target;\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {\n@@ -2940,10 +2931,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n \n         if (options.exists(\"replaceable\")) {\n-            replaceable = options[\"replaceable\"].get_bool();\n+            coin_control.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"estimate_mode\")) {\n-            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), fee_mode)) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coin_control.m_fee_mode)) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n             }\n         }\n@@ -2952,7 +2943,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable, fee_mode);\n+    CFeeBumper feeBump(pwallet, hash, coin_control, totalFee);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "f010ff0ca168863e736de7df7e78448993cbbd09",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 29,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -2721,17 +2721,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     vin.scriptWitness.SetNull();\n                 }\n \n-                // Allow to override the default confirmation target over the CoinControl instance\n-                int currentConfirmationTarget = nTxConfirmTarget;\n-                if (coin_control.nConfirmTarget > 0)\n-                    currentConfirmationTarget = coin_control.nConfirmTarget;\n-\n-                // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n-\n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n-                if (coin_control.fOverrideFeeRate)\n-                    nFeeNeeded = coin_control.nFeeRate.GetFee(nBytes);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -2756,7 +2746,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     // new inputs. We now know we only need the smaller fee\n                     // (because of reduced tx size) and so we should add a\n                     // change output. Only try this once.\n-                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, currentConfirmationTarget, ::mempool, ::feeEstimator, nullptr, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n+                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, coin_control, ::mempool, ::feeEstimator, nullptr);\n                     CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, ::dustRelayFee);\n                     CAmount max_excess_fee = fee_needed_for_change + minimum_value_for_change;\n                     if (nFeeRet > nFeeNeeded + max_excess_fee && nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n@@ -2932,33 +2922,52 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n {\n-    // payTxFee is the user-set global for desired feerate\n-    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n-    // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n-        // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n-        if (nFeeNeeded == 0) {\n-            nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n+    /* User control of how to calculate fee uses the following parameter precedence:\n+       1. coin_control.m_feerate\n+       2. coin_control.m_confirm_target\n+       3. payTxFee (user-set global variable)\n+       4. nTxConfirmTarget (user-set global variable)\n+       The first parameter that is set is used.\n+    */\n+    CAmount fee_needed;\n+    if (coin_control.m_feerate) { // 1.\n+        fee_needed = coin_control.m_feerate->GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+        // Allow to override automatic min/max check over coin control instance\n+        if (coin_control.fOverrideFeeRate) return fee_needed;\n+    }\n+    else if (!coin_control.m_confirm_target && ::payTxFee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for global payTxFee\n+        fee_needed = ::payTxFee.GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+    }\n+    else { // 2. or 4.\n+        // We will use smart fee estimation\n+        unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n+        // Allow to override the default fee estimate mode over the CoinControl instance\n+        bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n+\n+        fee_needed = estimator.estimateSmartFee(target, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n+        if (fee_needed == 0) {\n+            // if we don't have enough data for estimateSmartFee, then use fallbackFee\n+            fee_needed = fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n-    } else {\n-        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n     }\n+\n     // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    CAmount requiredFee = GetRequiredFee(nTxBytes);\n-    if (requiredFee > nFeeNeeded) {\n-        nFeeNeeded = requiredFee;\n+    CAmount required_fee = GetRequiredFee(nTxBytes);\n+    if (required_fee > fee_needed) {\n+        fee_needed = required_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n     }\n     // But always obey the maximum\n-    if (nFeeNeeded > maxTxFee) {\n-        nFeeNeeded = maxTxFee;\n+    if (fee_needed > maxTxFee) {\n+        fee_needed = maxTxFee;\n         if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;\n     }\n-    return nFeeNeeded;\n+    return fee_needed;\n }\n \n "
      },
      {
        "sha": "3c866776fbc4c1375097c2ead3039bfa8b29af12",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03ee70116189bb358e7c6224ba0ecb745e8161c2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "patch": "@@ -964,7 +964,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "1983ca6cb3d6e741191206b57585a4b88d9ab86e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTgzY2E2Y2IzZDZlNzQxMTkxMjA2YjU3NTg1YTRiODhkOWFiODZl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-28T23:24:28Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:40:33Z"
      },
      "message": "Use CoinControl to pass custom fee setting from QT.\n\nThis fixes buggy behavior where we were temporarily setting and unsetting the\nglobal payTxFee when trying to send a transaction with a custom fee from the\nGUI. The previous behavior was inconsistent depending on the order of using the\nRPC call settxfee and clicking various radio buttons in the sendcoinsdialog.\nThe new behavior is that transactions sent with the GUI will always use either\nthe smartfee slider value or the custom fee set on the GUI and they will not\naffect the global defaults which are only for RPC and initial GUI values.",
      "tree": {
        "sha": "d20778cff042356af12b3eaf8a26b0d4f04f8618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d20778cff042356af12b3eaf8a26b0d4f04f8618"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03ee70116189bb358e7c6224ba0ecb745e8161c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03ee70116189bb358e7c6224ba0ecb745e8161c2"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 25,
      "deletions": 37
    },
    "files": [
      {
        "sha": "d48b3753ba1e03509befb5aa5eea1eb9345758c4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 36,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "patch": "@@ -175,26 +175,20 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n             ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n         }\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));\n-        connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(setMinimumFee()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n-        connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n-        updateGlobalFeeVariables();\n \n         // set default rbf checkbox state\n         ui->optInRBF->setCheckState(model->getDefaultWalletRbf() ? Qt::Checked : Qt::Unchecked);\n@@ -274,12 +268,8 @@ void SendCoinsDialog::on_sendButton_clicked()\n     CCoinControl ctrl;\n     if (model->getOptionsModel()->getCoinControlFeatures())\n         ctrl = *CoinControlDialog::coinControl;\n-    if (ui->radioSmartFee->isChecked()) {\n-        ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    } else {\n-        ctrl.m_confirm_target = boost::none;\n-    }\n-    ctrl.signalRbf = ui->optInRBF->isChecked();\n+\n+    updateCoinControlState(ctrl);\n \n     prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n \n@@ -636,18 +626,6 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n }\n \n-void SendCoinsDialog::updateGlobalFeeVariables()\n-{\n-    if (ui->radioSmartFee->isChecked())\n-    {\n-        payTxFee = CFeeRate(0);\n-    }\n-    else\n-    {\n-        payTxFee = CFeeRate(ui->customFee->value());\n-    }\n-}\n-\n void SendCoinsDialog::updateFeeMinimizedLabel()\n {\n     if(!model || !model->getOptionsModel())\n@@ -669,15 +647,30 @@ void SendCoinsDialog::updateMinFeeLabel()\n         );\n }\n \n+void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n+{\n+    if (ui->radioCustomFee->isChecked()) {\n+        ctrl.m_feerate = CFeeRate(ui->customFee->value());\n+    } else {\n+        ctrl.m_feerate = boost::none;\n+    }\n+    // Avoid using global defaults when sending money from the GUI\n+    // Either custom fee will be used or if not selected, the confirmation target from dropdown box\n+    ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    ctrl.signalRbf = ui->optInRBF->isChecked();\n+}\n+\n void SendCoinsDialog::updateSmartFeeLabel()\n {\n     if(!model || !model->getOptionsModel())\n         return;\n-\n-    int nBlocksToConfirm = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n+    CCoinControl coin_control;\n+    updateCoinControlState(coin_control);\n+    coin_control.m_feerate = boost::none; // Explicitly use only fee estimation rate for smart fee labels\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coin_control.signalRbf);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(*coin_control.m_confirm_target, &feeCalc, ::mempool, conservative_estimate);\n+\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n@@ -752,8 +745,6 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     if (!checked && model) // coin control features disabled\n         CoinControlDialog::coinControl->SetNull();\n \n-    // make sure we set back the confirmation target\n-    updateGlobalFeeVariables();\n     coinControlUpdateLabels();\n }\n \n@@ -844,15 +835,11 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     if (!model || !model->getOptionsModel())\n         return;\n \n+    updateCoinControlState(*CoinControlDialog::coinControl);\n+\n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n     CoinControlDialog::fSubtractFeeFromAmount = false;\n-    if (ui->radioSmartFee->isChecked()) {\n-        CoinControlDialog::coinControl->m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    } else {\n-        CoinControlDialog::coinControl->m_confirm_target = boost::none;\n-    }\n-    CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n \n     for(int i = 0; i < ui->entries->count(); ++i)\n     {"
      },
      {
        "sha": "70b4aa5a03ab3080bfd0924db680604971049db2",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1983ca6cb3d6e741191206b57585a4b88d9ab86e/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "patch": "@@ -68,6 +68,8 @@ public Q_SLOTS:\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     void updateFeeMinimizedLabel();\n+    // Update the passed in CCoinControl with state from the GUI\n+    void updateCoinControlState(CCoinControl& ctrl);\n \n private Q_SLOTS:\n     void on_sendButton_clicked();\n@@ -91,7 +93,6 @@ private Q_SLOTS:\n     void updateFeeSectionControls();\n     void updateMinFeeLabel();\n     void updateSmartFeeLabel();\n-    void updateGlobalFeeVariables();\n \n Q_SIGNALS:\n     // Fired when a message should be reported to the user"
      }
    ]
  },
  {
    "sha": "2fffaa97381f741786fff2e6ff25f4b9a74037fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmZmYWE5NzM4MWY3NDE3ODZmZmYyZTZmZjI1ZjRiOWE3NDAzN2Zl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-29T15:29:34Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:41:37Z"
      },
      "message": "Make QT fee displays use GetMinimumFee instead of estimateSmartFee\n\nRemove helper function (CalculateEstimateType) for determining whether\nestimates should be conservative or not, now that this is only called\nonce from GetMinimumFee and incorporate the logic directly there.",
      "tree": {
        "sha": "f6163fb7a56b3f73bc8858ad1c336db9efb77aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6163fb7a56b3f73bc8858ad1c336db9efb77aac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1983ca6cb3d6e741191206b57585a4b88d9ab86e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1983ca6cb3d6e741191206b57585a4b88d9ab86e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 14,
      "deletions": 35
    },
    "files": [
      {
        "sha": "f3ee0fbe393aeace65b734393481a58623d164f7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -490,8 +490,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coinControl->signalRbf);\n-\n     // calculation\n     if (nQuantity > 0)\n     {\n@@ -583,12 +581,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     QString toolTipDust = tr(\"This label turns red if any recipient receives an amount smaller than the current dust threshold.\");\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n-    double dFeeVary;\n-    if (payTxFee.GetFeePerK() > 0)\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n-    else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(*coinControl->m_confirm_target, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n-    }\n+    double dFeeVary = (double)nPayFee / nBytes;\n+\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);"
      },
      {
        "sha": "a01886c3ea8aefbe9026e04e9c2d3d06e3781700",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -652,7 +652,7 @@ void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n     if (ui->radioCustomFee->isChecked()) {\n         ctrl.m_feerate = CFeeRate(ui->customFee->value());\n     } else {\n-        ctrl.m_feerate = boost::none;\n+        ctrl.m_feerate.reset();\n     }\n     // Avoid using global defaults when sending money from the GUI\n     // Either custom fee will be used or if not selected, the confirmation target from dropdown box\n@@ -666,15 +666,13 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         return;\n     CCoinControl coin_control;\n     updateCoinControlState(coin_control);\n-    coin_control.m_feerate = boost::none; // Explicitly use only fee estimation rate for smart fee labels\n+    coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coin_control.signalRbf);\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(*coin_control.m_confirm_target, &feeCalc, ::mempool, conservative_estimate);\n+    CFeeRate feeRate = CFeeRate(CWallet::GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n \n-    if (feeRate <= CFeeRate(0)) // not enough data => minfee\n-    {\n-        ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n+    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n+\n+    if (feeCalc.reason == FeeReason::FALLBACK) {\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n         ui->fallbackFeeWarningLabel->setVisible(true);\n@@ -685,8 +683,6 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     }\n     else\n     {\n-        ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n         ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", feeCalc.returnedTarget));\n         ui->fallbackFeeWarningLabel->setVisible(false);"
      },
      {
        "sha": "fc0e7c519ed012637f301e7dd8e692848d1f57f2",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -43,9 +43,9 @@ class CCoinControl\n         fAllowOtherInputs = false;\n         fAllowWatchOnly = false;\n         setSelected.clear();\n-        m_feerate = boost::none;\n+        m_feerate.reset();\n         fOverrideFeeRate = false;\n-        m_confirm_target = boost::none;\n+        m_confirm_target.reset();\n         signalRbf = fWalletRbf;\n         m_fee_mode = FeeEstimateMode::UNSET;\n     }"
      },
      {
        "sha": "f7f296bd5213cc2bd81733b9103cae684512e4f3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -2945,8 +2945,11 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n     else { // 2. or 4.\n         // We will use smart fee estimation\n         unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n+        // By default estimates are economical iff we are signaling opt-in-RBF\n+        bool conservative_estimate = !coin_control.signalRbf;\n         // Allow to override the default fee estimate mode over the CoinControl instance\n-        bool conservative_estimate = CalculateEstimateType(coin_control.m_fee_mode, coin_control.signalRbf);\n+        if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n+        else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n         fee_needed = estimator.estimateSmartFee(target, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n         if (fee_needed == 0) {\n@@ -4194,15 +4197,3 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n-\n-bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf) {\n-    switch (mode) {\n-    case FeeEstimateMode::UNSET:\n-        return !opt_in_rbf; // Allow for lower fees if RBF is an option\n-    case FeeEstimateMode::CONSERVATIVE:\n-        return true;\n-    case FeeEstimateMode::ECONOMICAL:\n-        return false;\n-    }\n-    return true;\n-}"
      },
      {
        "sha": "bb9d146a206d78d6692c8fe397c528180623f1f2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fffaa97381f741786fff2e6ff25f4b9a74037fe/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "patch": "@@ -1213,6 +1213,4 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf);\n-\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "fd29d3df299bd06c0e6bb218863e0c855b3b91af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDI5ZDNkZjI5OWJkMDZjMGU2YmIyMTg4NjNlMGM4NTViM2I5MWFm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-29T17:13:23Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:41:40Z"
      },
      "message": "Remove checking of mempool min fee from estimateSmartFee.\n\nThis check has been moved to the wallet logic GetMinimumFee. The rpc call to\nestimatesmartfee will now no longer return a result maxed with the mempool min\nfee, but automated fee calculations from the wallet will produce the same result\nas before and coincontrol and sendcoins dialogs in the GUI will correctly\ndisplay the right prospective fee.\n\nchanges to policy/fees.cpp include a big whitespace indentation change.",
      "tree": {
        "sha": "d0f352d9fcf19a7268586b92a3930a5916eef43b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0f352d9fcf19a7268586b92a3930a5916eef43b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fffaa97381f741786fff2e6ff25f4b9a74037fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fffaa97381f741786fff2e6ff25f4b9a74037fe"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 60,
      "deletions": 73
    },
    "files": [
      {
        "sha": "45f97652319a4062d889541b1dc9bc5328a6aa48",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 59,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -826,89 +826,81 @@ double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget,\n  * estimates, however, required the 95% threshold at 2 * target be met for any\n  * longer time horizons also.\n  */\n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const\n {\n+    LOCK(cs_feeEstimator);\n+\n     if (feeCalc) {\n         feeCalc->desiredTarget = confTarget;\n         feeCalc->returnedTarget = confTarget;\n     }\n \n     double median = -1;\n     EstimationResult tempResult;\n-    {\n-        LOCK(cs_feeEstimator);\n \n-        // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n-            return CFeeRate(0);\n+    // Return failure if trying to analyze a target we're not tracking\n+    if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n+        return CFeeRate(0);\n \n-        // It's not possible to get reasonable estimates for confTarget of 1\n-        if (confTarget == 1)\n-            confTarget = 2;\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget == 1)\n+        confTarget = 2;\n \n-        unsigned int maxUsableEstimate = MaxUsableEstimate();\n-        if (maxUsableEstimate <= 1)\n-            return CFeeRate(0);\n+    unsigned int maxUsableEstimate = MaxUsableEstimate();\n+    if (maxUsableEstimate <= 1)\n+        return CFeeRate(0);\n \n-        if ((unsigned int)confTarget > maxUsableEstimate) {\n-            confTarget = maxUsableEstimate;\n-        }\n+    if ((unsigned int)confTarget > maxUsableEstimate) {\n+        confTarget = maxUsableEstimate;\n+    }\n \n-        assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n-        /** true is passed to estimateCombined fee for target/2 and target so\n-         * that we check the max confirms for shorter time horizons as well.\n-         * This is necessary to preserve monotonically increasing estimates.\n-         * For non-conservative estimates we do the same thing for 2*target, but\n-         * for conservative estimates we want to skip these shorter horizons\n-         * checks for 2*target because we are taking the max over all time\n-         * horizons so we already have monotonically increasing estimates and\n-         * the purpose of conservative estimates is not to let short term\n-         * fluctuations lower our estimates by too much.\n-         */\n-        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true, &tempResult);\n+    assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n+    /** true is passed to estimateCombined fee for target/2 and target so\n+     * that we check the max confirms for shorter time horizons as well.\n+     * This is necessary to preserve monotonically increasing estimates.\n+     * For non-conservative estimates we do the same thing for 2*target, but\n+     * for conservative estimates we want to skip these shorter horizons\n+     * checks for 2*target because we are taking the max over all time\n+     * horizons so we already have monotonically increasing estimates and\n+     * the purpose of conservative estimates is not to let short term\n+     * fluctuations lower our estimates by too much.\n+     */\n+    double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, true, &tempResult);\n+    if (feeCalc) {\n+        feeCalc->est = tempResult;\n+        feeCalc->reason = FeeReason::HALF_ESTIMATE;\n+    }\n+    median = halfEst;\n+    double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true, &tempResult);\n+    if (actualEst > median) {\n+        median = actualEst;\n         if (feeCalc) {\n             feeCalc->est = tempResult;\n-            feeCalc->reason = FeeReason::HALF_ESTIMATE;\n+            feeCalc->reason = FeeReason::FULL_ESTIMATE;\n         }\n-        median = halfEst;\n-        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, true, &tempResult);\n-        if (actualEst > median) {\n-            median = actualEst;\n-            if (feeCalc) {\n-                feeCalc->est = tempResult;\n-                feeCalc->reason = FeeReason::FULL_ESTIMATE;\n-            }\n+    }\n+    double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative, &tempResult);\n+    if (doubleEst > median) {\n+        median = doubleEst;\n+        if (feeCalc) {\n+            feeCalc->est = tempResult;\n+            feeCalc->reason = FeeReason::DOUBLE_ESTIMATE;\n         }\n-        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, !conservative, &tempResult);\n-        if (doubleEst > median) {\n-            median = doubleEst;\n+    }\n+\n+    if (conservative || median == -1) {\n+        double consEst =  estimateConservativeFee(2 * confTarget, &tempResult);\n+        if (consEst > median) {\n+            median = consEst;\n             if (feeCalc) {\n                 feeCalc->est = tempResult;\n-                feeCalc->reason = FeeReason::DOUBLE_ESTIMATE;\n+                feeCalc->reason = FeeReason::CONSERVATIVE;\n             }\n         }\n-\n-        if (conservative || median == -1) {\n-            double consEst =  estimateConservativeFee(2 * confTarget, &tempResult);\n-            if (consEst > median) {\n-                median = consEst;\n-                if (feeCalc) {\n-                    feeCalc->est = tempResult;\n-                    feeCalc->reason = FeeReason::CONSERVATIVE;\n-                }\n-            }\n-        }\n-    } // Must unlock cs_feeEstimator before taking mempool locks\n+    }\n \n     if (feeCalc) feeCalc->returnedTarget = confTarget;\n \n-    // If mempool is limiting txs , return at least the min feerate from the mempool\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-    if (minPoolFee > 0 && minPoolFee > median) {\n-        if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n-        return CFeeRate(minPoolFee);\n-    }\n-\n     if (median < 0)\n         return CFeeRate(0);\n "
      },
      {
        "sha": "f4ef793643076ca22ac8fb726b1717f31304c094",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -208,7 +208,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about"
      },
      {
        "sha": "5dc468e111bed391e24491b17dd46ed386b441d0",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -815,7 +815,6 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"\\n\"\n             \"A negative value is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate for any number of blocks.\\n\"\n-            \"However it will not return a value below the mempool reject fee.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n@@ -831,7 +830,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, ::mempool, conservative);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &feeCalc, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n     return result;"
      },
      {
        "sha": "fd8f7191f4fafbf24e13be6ddbc817c19220953d",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -177,16 +177,6 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     for (int i = 2; i < 9; i++) { // At 9, the original estimate was already at the bottom (b/c scale = 2)\n         BOOST_CHECK(feeEst.estimateFee(i).GetFeePerK() < origFeeEst[i-1] - deltaFee);\n     }\n-\n-    // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n-    mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[5]).Time(GetTime()).Height(blocknum).FromTx(tx));\n-    // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[5]\n-    mpool.TrimToSize(1);\n-    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n-    for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n-    }\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8c4f637306c53c5b25bc80811041f87465707027",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29d3df299bd06c0e6bb218863e0c855b3b91af/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "patch": "@@ -2951,12 +2951,18 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n-        fee_needed = estimator.estimateSmartFee(target, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n+        fee_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate).GetFee(nTxBytes);\n         if (fee_needed == 0) {\n             // if we don't have enough data for estimateSmartFee, then use fallbackFee\n             fee_needed = fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n+        // Obey mempool min fee when using smart fee estimation\n+        CAmount min_mempool_fee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n+        if (fee_needed < min_mempool_fee) {\n+            fee_needed = min_mempool_fee;\n+            if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n+        }\n     }\n \n     // prevent user from paying a fee below minRelayTxFee or minTxFee"
      }
    ]
  },
  {
    "sha": "11590d39b9888403ead8354302e308eca139ba17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTU5MGQzOWI5ODg4NDAzZWFkODM1NDMwMmUzMDhlY2ExMzliYTE3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-12T18:42:57Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-15T03:41:40Z"
      },
      "message": "Properly bound check conf_target in wallet RPC calls",
      "tree": {
        "sha": "8b4a12b1209b00dc08ec71ef2e8db4573842ecd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b4a12b1209b00dc08ec71ef2e8db4573842ecd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11590d39b9888403ead8354302e308eca139ba17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11590d39b9888403ead8354302e308eca139ba17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11590d39b9888403ead8354302e308eca139ba17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11590d39b9888403ead8354302e308eca139ba17/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29d3df299bd06c0e6bb218863e0c855b3b91af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd29d3df299bd06c0e6bb218863e0c855b3b91af"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b8c94d32ecf6a74453364f08198abe10f096d532",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=11590d39b9888403ead8354302e308eca139ba17",
        "patch": "@@ -30,6 +30,16 @@\n \n #include <univalue.h>\n \n+unsigned int ParseConfirmTarget(const UniValue& value)\n+{\n+    int target = value.get_int();\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    if (target < 1 || (unsigned int)target > max_target) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n+    }\n+    return (unsigned int)target;\n+}\n+\n /**\n  * Return average network hashes per second based on the last 'lookup' blocks,\n  * or from the last difficulty change if 'lookup' is nonpositive."
      },
      {
        "sha": "868d7002b5ff465f1c317cc6a5b01e723c5cd28d",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11590d39b9888403ead8354302e308eca139ba17/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=11590d39b9888403ead8354302e308eca139ba17",
        "patch": "@@ -12,4 +12,7 @@\n /** Generate blocks (mine) */\n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n \n+/** Check bounds on a command line confirm target */\n+unsigned int ParseConfirmTarget(const UniValue& value);\n+\n #endif"
      },
      {
        "sha": "f983a61a9f701cf104df292f76449fbb65ce9d66",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11590d39b9888403ead8354302e308eca139ba17/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11590d39b9888403ead8354302e308eca139ba17/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=11590d39b9888403ead8354302e308eca139ba17",
        "patch": "@@ -460,7 +460,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.m_confirm_target = request.params[6].get_int();\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -981,7 +981,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (request.params.size() > 6 && !request.params[6].isNull()) {\n-        coin_control.m_confirm_target = request.params[6].get_int();\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n     }\n \n     if (request.params.size() > 7 && !request.params[7].isNull()) {\n@@ -2795,7 +2795,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"conf_target\")) {\n-            coinControl.m_confirm_target = options[\"conf_target\"].get_int();\n+            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"]);\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n@@ -2917,12 +2917,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n-        } else if (options.exists(\"confTarget\")) {\n-            int target = options[\"confTarget\"].get_int();\n-            if (target <= 0) { // FIXME: Check upper bound too\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n-            }\n-            coin_control.m_confirm_target = target;\n+        } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"]);\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {"
      }
    ]
  }
]