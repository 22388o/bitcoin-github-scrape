[
  {
    "sha": "d358968737c659ae82f4bf42b7565c17f49e9c1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzU4OTY4NzM3YzY1OWFlODJmNGJmNDJiNzU2NWMxN2Y0OWU5YzFh",
    "commit": {
      "author": {
        "name": "plazma48",
        "email": "43354722+plazma48@users.noreply.github.com",
        "date": "2018-09-19T18:02:48Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-09-19T18:02:48Z"
      },
      "message": "Merge pull request #1 from bitcoin/master\n\nmerging",
      "tree": {
        "sha": "a45ac6290c3c430b546c83a6aa5b7e51ffb0d3d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a45ac6290c3c430b546c83a6aa5b7e51ffb0d3d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d358968737c659ae82f4bf42b7565c17f49e9c1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJboo9ICRBK7hj4Ov3rIwAAdHIIAGu2TpJacZMRcF7sQGIq2aJr\nD5M4WkMWWcq9tVFENNUfChsQ9SWFI7rO4E84TqYGP8a/tq+Qa2GrALnAkQWF4Hoq\nGZO3VyXhsxNc3bttycmktT1uAAC9KbMihBa0qqeG3Lg+h0LOA6oKP9gx7nksPKx9\nYmPe5s1owAgK4/ezCtnrO9QBRVXRqu01TR52dOK+hijPNGKaV+QsnzbO9OELHiEP\nnrAPTP570YA6F5tpn7EO07VY2BL+6yxgMRX7MEiZ6gdendmwpStl2920xk9ZerE3\n5EZuawdcMBJoFVgk2v1qJ89PL9qamKd69FGc2TH4AZZrAsG0+B/XTql4x3QlTRU=\n=S2y4\n-----END PGP SIGNATURE-----\n",
        "payload": "tree a45ac6290c3c430b546c83a6aa5b7e51ffb0d3d7\nparent 4901c00792c1dabae4bb01e6373c9b1ed9ef3008\nparent d26278988fbfc71dc558f7b2c60a184e8091450b\nauthor plazma48 <43354722+plazma48@users.noreply.github.com> 1537380168 +0530\ncommitter GitHub <noreply@github.com> 1537380168 +0530\n\nMerge pull request #1 from bitcoin/master\n\nmerging"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d358968737c659ae82f4bf42b7565c17f49e9c1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d358968737c659ae82f4bf42b7565c17f49e9c1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d358968737c659ae82f4bf42b7565c17f49e9c1a/comments",
    "author": {
      "login": "plazma48",
      "id": 43354722,
      "node_id": "MDQ6VXNlcjQzMzU0NzIy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43354722?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/plazma48",
      "html_url": "https://github.com/plazma48",
      "followers_url": "https://api.github.com/users/plazma48/followers",
      "following_url": "https://api.github.com/users/plazma48/following{/other_user}",
      "gists_url": "https://api.github.com/users/plazma48/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/plazma48/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/plazma48/subscriptions",
      "organizations_url": "https://api.github.com/users/plazma48/orgs",
      "repos_url": "https://api.github.com/users/plazma48/repos",
      "events_url": "https://api.github.com/users/plazma48/events{/privacy}",
      "received_events_url": "https://api.github.com/users/plazma48/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4901c00792c1dabae4bb01e6373c9b1ed9ef3008",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4901c00792c1dabae4bb01e6373c9b1ed9ef3008",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4901c00792c1dabae4bb01e6373c9b1ed9ef3008"
      },
      {
        "sha": "d26278988fbfc71dc558f7b2c60a184e8091450b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26278988fbfc71dc558f7b2c60a184e8091450b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d26278988fbfc71dc558f7b2c60a184e8091450b"
      }
    ],
    "stats": {
      "total": 197,
      "additions": 196,
      "deletions": 1
    },
    "files": [
      {
        "sha": "72526f53551b05ee92ccda8c7d7e78c9bb94271f",
        "filename": "doc/release-notes-13152.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358968737c659ae82f4bf42b7565c17f49e9c1a/doc/release-notes-13152.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358968737c659ae82f4bf42b7565c17f49e9c1a/doc/release-notes-13152.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-13152.md?ref=d358968737c659ae82f4bf42b7565c17f49e9c1a",
        "patch": "@@ -0,0 +1,4 @@\n+New RPC methods\n+------------\n+\n+- `getnodeaddresses` returns peer addresses known to this node. It may be used to connect to nodes over TCP without using the DNS seeds.\n\\ No newline at end of file"
      },
      {
        "sha": "2e52d309c2324dbb51c76ce0ade4ea363b3d766b",
        "filename": "doc/release-notes/release-notes-0.16.3.md",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358968737c659ae82f4bf42b7565c17f49e9c1a/doc/release-notes/release-notes-0.16.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358968737c659ae82f4bf42b7565c17f49e9c1a/doc/release-notes/release-notes-0.16.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.16.3.md?ref=d358968737c659ae82f4bf42b7565c17f49e9c1a",
        "patch": "@@ -0,0 +1,88 @@\n+Bitcoin Core version 0.16.3 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.16.3/>\n+\n+This is a new minor version release, with various bugfixes.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading\n+directly from 0.7.x and earlier without re-downloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+Wallets created in 0.16 and later are not compatible with versions prior to 0.16\n+and will not work if you try to use newly created wallets in older versions. Existing\n+wallets that were created with older versions are not affected by this.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notable changes\n+===============\n+\n+Denial-of-Service vulnerability\n+-------------------------------\n+\n+A denial-of-service vulnerability (CVE-2018-17144) exploitable by miners has\n+been discovered in Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended\n+to upgrade any of the vulnerable versions to 0.16.3 as soon as possible.\n+\n+0.16.3 change log\n+------------------\n+\n+### Consensus\n+- #14249 `696b936` Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)\n+\n+### RPC and other APIs\n+- #13547 `212ef1f` Make `signrawtransaction*` give an error when amount is needed but missing (ajtowns)\n+\n+### Miscellaneous\n+- #13655 `1cdbea7` bitcoinconsensus: invalid flags error should be set to `bitcoinconsensus_err` (afk11)\n+\n+### Documentation\n+- #13844 `11b9dbb` correct the help output for -prune (hebasto)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Anthony Towns\n+- Hennadii Stepanov\n+- Matt Corallo\n+- Suhas Daftuar\n+- Thomas Kerin\n+- Wladimir J. van der Laan\n+\n+And to those that reported security issues:\n+\n+- (anonymous reporter)\n+"
      },
      {
        "sha": "649e222c3953e5aebedf0a376bacead9f486986d",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358968737c659ae82f4bf42b7565c17f49e9c1a/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358968737c659ae82f4bf42b7565c17f49e9c1a/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=d358968737c659ae82f4bf42b7565c17f49e9c1a",
        "patch": "@@ -163,6 +163,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"rescanblockchain\", 0, \"start_height\"},\n     { \"rescanblockchain\", 1, \"stop_height\"},\n     { \"createwallet\", 1, \"disable_private_keys\"},\n+    { \"getnodeaddresses\", 0, \"count\"},\n };\n // clang-format on\n "
      },
      {
        "sha": "846d90cd0a8c032cc96e936bc61acfd7454f2854",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358968737c659ae82f4bf42b7565c17f49e9c1a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358968737c659ae82f4bf42b7565c17f49e9c1a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d358968737c659ae82f4bf42b7565c17f49e9c1a",
        "patch": "@@ -626,6 +626,58 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n     return g_connman->GetNetworkActive();\n }\n \n+static UniValue getnodeaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 1) {\n+        throw std::runtime_error(\n+            \"getnodeaddresses ( count )\\n\"\n+            \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"count\\\"    (numeric, optional) How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) +\n+                \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses. (default = 1)\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"time\\\": ttt,                (numeric) Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen\\n\"\n+            \"    \\\"services\\\": n,              (numeric) The services offered\\n\"\n+            \"    \\\"address\\\": \\\"host\\\",          (string) The address of the node\\n\"\n+            \"    \\\"port\\\": n                   (numeric) The port of the node\\n\"\n+            \"  }\\n\"\n+            \"  ,....\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getnodeaddresses\", \"8\")\n+            + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n+        );\n+    }\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    int count = 1;\n+    if (!request.params[0].isNull()) {\n+        count = request.params[0].get_int();\n+        if (count <= 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Address count out of range\");\n+        }\n+    }\n+    // returns a shuffled list of CAddress\n+    std::vector<CAddress> vAddr = g_connman->GetAddresses();\n+    UniValue ret(UniValue::VARR);\n+\n+    int address_return_count = std::min<int>(count, vAddr.size());\n+    for (int i = 0; i < address_return_count; ++i) {\n+        UniValue obj(UniValue::VOBJ);\n+        const CAddress& addr = vAddr[i];\n+        obj.pushKV(\"time\", (int)addr.nTime);\n+        obj.pushKV(\"services\", (uint64_t)addr.nServices);\n+        obj.pushKV(\"address\", addr.ToStringIP());\n+        obj.pushKV(\"port\", addr.GetPort());\n+        ret.push_back(obj);\n+    }\n+    return ret;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n@@ -642,6 +694,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"listbanned\",             &listbanned,             {} },\n     { \"network\",            \"clearbanned\",            &clearbanned,            {} },\n     { \"network\",            \"setnetworkactive\",       &setnetworkactive,       {\"state\"} },\n+    { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n };\n // clang-format on\n "
      },
      {
        "sha": "59c3fb425fe0819e58d7db2eed4eec58cd88a7c4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358968737c659ae82f4bf42b7565c17f49e9c1a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358968737c659ae82f4bf42b7565c17f49e9c1a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d358968737c659ae82f4bf42b7565c17f49e9c1a",
        "patch": "@@ -3122,7 +3122,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n-        if (!CheckTransaction(*tx, state, false))\n+        if (!CheckTransaction(*tx, state, true))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx->GetHash().ToString(), state.GetDebugMessage()));\n "
      },
      {
        "sha": "0678b1a65130d4117ca3678fa1c3bfaf79b171f0",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358968737c659ae82f4bf42b7565c17f49e9c1a/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358968737c659ae82f4bf42b7565c17f49e9c1a/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=d358968737c659ae82f4bf42b7565c17f49e9c1a",
        "patch": "@@ -81,6 +81,16 @@ def run_test(self):\n \n         node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_reason='bad-txns-duplicate')\n \n+        # Check transactions for duplicate inputs\n+        self.log.info(\"Test duplicate input block.\")\n+\n+        block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])\n+        block2_orig.vtx[2].rehash()\n+        block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n+        block2_orig.rehash()\n+        block2_orig.solve()\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason='bad-txns-inputs-duplicate')\n+\n         self.log.info(\"Test very broken block.\")\n \n         block3 = create_block(tip, create_coinbase(height), block_time)"
      },
      {
        "sha": "1e525214fac4b4e7cf0d6c0ed107bc9a4edb2100",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d358968737c659ae82f4bf42b7565c17f49e9c1a/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d358968737c659ae82f4bf42b7565c17f49e9c1a/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=d358968737c659ae82f4bf42b7565c17f49e9c1a",
        "patch": "@@ -13,11 +13,14 @@\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,\n+    assert_greater_than,\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n     p2p_port,\n     wait_until,\n )\n+from test_framework.mininode import P2PInterface\n+from test_framework.messages import CAddress, msg_addr, NODE_NETWORK, NODE_WITNESS\n \n class NetTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -31,6 +34,7 @@ def run_test(self):\n         self._test_getnetworkinginfo()\n         self._test_getaddednodeinfo()\n         self._test_getpeerinfo()\n+        self._test_getnodeaddresses()\n \n     def _test_connection_count(self):\n         # connect_nodes_bi connects each node to the other\n@@ -101,5 +105,40 @@ def _test_getpeerinfo(self):\n         assert_equal(peer_info[0][0]['minfeefilter'], Decimal(\"0.00000500\"))\n         assert_equal(peer_info[1][0]['minfeefilter'], Decimal(\"0.00001000\"))\n \n+    def _test_getnodeaddresses(self):\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # send some addresses to the node via the p2p message addr\n+        msg = msg_addr()\n+        imported_addrs = []\n+        for i in range(256):\n+            a = \"123.123.123.{}\".format(i)\n+            imported_addrs.append(a)\n+            addr = CAddress()\n+            addr.time = 100000000\n+            addr.nServices = NODE_NETWORK | NODE_WITNESS\n+            addr.ip = a\n+            addr.port = 8333\n+            msg.addrs.append(addr)\n+        self.nodes[0].p2p.send_and_ping(msg)\n+\n+        # obtain addresses via rpc call and check they were ones sent in before\n+        REQUEST_COUNT = 10\n+        node_addresses = self.nodes[0].getnodeaddresses(REQUEST_COUNT)\n+        assert_equal(len(node_addresses), REQUEST_COUNT)\n+        for a in node_addresses:\n+            assert_greater_than(a[\"time\"], 1527811200) # 1st June 2018\n+            assert_equal(a[\"services\"], NODE_NETWORK | NODE_WITNESS)\n+            assert a[\"address\"] in imported_addrs\n+            assert_equal(a[\"port\"], 8333)\n+\n+        assert_raises_rpc_error(-8, \"Address count out of range\", self.nodes[0].getnodeaddresses, -1)\n+\n+        # addrman's size cannot be known reliably after insertion, as hash collisions may occur\n+        # so only test that requesting a large number of addresses returns less than that\n+        LARGE_REQUEST_COUNT = 10000\n+        node_addresses = self.nodes[0].getnodeaddresses(LARGE_REQUEST_COUNT)\n+        assert_greater_than(LARGE_REQUEST_COUNT, len(node_addresses))\n+\n if __name__ == '__main__':\n     NetTest().main()"
      }
    ]
  }
]