[
  {
    "sha": "bb8376bbc3d96af727444f90e5f60d47105609dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjgzNzZiYmMzZDk2YWY3Mjc0NDRmOTBlNWY2MGQ0NzEwNTYwOWRj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-29T21:33:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-30T18:17:51Z"
      },
      "message": "Verify DBWrapper iterators are taking snapshots\n\nThe LevelDB docs seem to indicate that an iterator will not take\nsnapshots (even providing instructions on how to do so yourself).\nIn several of the places we use them, we assume snapshots to have\nbeen taken.\n\nIn order to make sure LevelDB doesn't change out from under us\n(and to prevent the next person who reads the docs from having the\nsame fright I did), verify that snapshots are taken in our tests.",
      "tree": {
        "sha": "c77c03c9559a52d645a1ff56e6cb291d368ccdcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c77c03c9559a52d645a1ff56e6cb291d368ccdcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb8376bbc3d96af727444f90e5f60d47105609dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8376bbc3d96af727444f90e5f60d47105609dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8376bbc3d96af727444f90e5f60d47105609dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8376bbc3d96af727444f90e5f60d47105609dc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4cd6075b12fb32b9a906deea3ed033e3f9560a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4cd6075b12fb32b9a906deea3ed033e3f9560a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "efddafe17eac293f1fec0f161c07b53f2bfcb248",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8376bbc3d96af727444f90e5f60d47105609dc/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8376bbc3d96af727444f90e5f60d47105609dc/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=bb8376bbc3d96af727444f90e5f60d47105609dc",
        "patch": "@@ -204,19 +204,31 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n         uint32_t value = x*x;\n-        BOOST_CHECK(dbw.Write(key, value));\n+        if (!(x & 1)) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n+    // Check that creating an iterator creates a snapshot\n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n+\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n     for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n-        for (int x=seek_start; x<256; ++x) {\n+        for (int x=seek_start; x<255; ++x) {\n             uint8_t key;\n             uint32_t value;\n             BOOST_CHECK(it->Valid());\n             if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n                 break;\n             BOOST_CHECK(it->GetKey(key));\n+            if (x & 1) {\n+                BOOST_CHECK_EQUAL(key, x + 1);\n+                continue;\n+            }\n             BOOST_CHECK(it->GetValue(value));\n             BOOST_CHECK_EQUAL(key, x);\n             BOOST_CHECK_EQUAL(value, x*x);"
      }
    ]
  }
]