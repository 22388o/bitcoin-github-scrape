[
  {
    "sha": "8ac2a4e1788426329b842eea7121b8eac7875c76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWMyYTRlMTc4ODQyNjMyOWI4NDJlZWE3MTIxYjhlYWM3ODc1Yzc2",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-03-22T18:07:28Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-05-05T07:40:55Z"
      },
      "message": "RPC: show script verification errors in \"signrawtransaction\" result\n\nIf there are any script verification errors, when using \"signrawtransaction\", they are shown in the RPC result:\n\n```\n// ...\n\nResult:\n{\n  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)\n  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures\n  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)\n    {\n      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction\n      \"vout\" : n,                (numeric) The index of the output to spent and used as input\n      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script\n      \"sequence\" : n,            (numeric) Script sequence number\n      \"error\" : \"text\"           (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n```",
      "tree": {
        "sha": "a98c0c25226c4a8191ffbf7760352c6d9a58bf1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a98c0c25226c4a8191ffbf7760352c6d9a58bf1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ac2a4e1788426329b842eea7121b8eac7875c76",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJVSHQHAAoJEHZ14xz1cZgyLvcQAI3+jYKoKe4k8DH9QyfqpJGv\nrCyISggwCJP/VCOnANyH9nVjJmHyZ7QR/y178fgKirVH7HoLIHCMOvweUc7ggGgi\nM6cni9WhiZetS6cLM/tOaoYdcPDQAEHvappoY+0b+lHuqwiBI7vCVaphfbp5RFIu\nAmycXxdhhxTyqwzWOE64vAASYlY2N9+S26cXWGoZGc0f4qaDUaGSXQaFMTc5pwj5\nNdRToVolOOUHukQtLQ4ASOkPu1F2l5Qu7smRVPcShfnUz2JensuTFvgpjoCOgSho\nI7oQ4Eq4f1CFWHXwZlp6plH4RHjYJiZa0T5TIGTz8+VqnUvfOmhEUcsAh17DtOxj\n4EoXXCIaQ3pQQESyOe93Z9DsEjmfk3bRsQ5YQW0ToMoUrdWKanVPz8S/Abv57vHk\nvuX2O9TwuVxC7K0juYIoY7XQK2WsVEK3Y61r7LcyzfqgpUJRVIq24+0UzW5Lm3Gv\niXzp1/euxMwjdSafnuSYxjTwefAKfte/2heiw+gcD9y9H8JcvFbbw6VW8urgCkRc\nPB32Zi/n2Kkdztwk9HcPO8IM5vSVRo1ruvK/DKdQSi0VvmWl1sZEXjUBepIIZEfo\n6LoLxQTG9WVz84GBEbenhDw7fnBSZJ5Qm10qKCHA09gdeGUuOUKGx+KGgKxPhrrd\nvfK9y6oczcb8mhhMQr8w\n=SqRM\n-----END PGP SIGNATURE-----",
        "payload": "tree a98c0c25226c4a8191ffbf7760352c6d9a58bf1d\nparent f0c4281f845e8f350acb01cd20ac7f4e085455b0\nauthor dexX7 <dexx@bitwatch.co> 1427047648 +0100\ncommitter dexX7 <dexx@bitwatch.co> 1430811655 +0200\n\nRPC: show script verification errors in \"signrawtransaction\" result\n\nIf there are any script verification errors, when using \"signrawtransaction\", they are shown in the RPC result:\n\n```\n// ...\n\nResult:\n{\n  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)\n  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures\n  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)\n    {\n      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction\n      \"vout\" : n,                (numeric) The index of the output to spent and used as input\n      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script\n      \"sequence\" : n,            (numeric) Script sequence number\n      \"error\" : \"text\"           (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ac2a4e1788426329b842eea7121b8eac7875c76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ac2a4e1788426329b842eea7121b8eac7875c76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ac2a4e1788426329b842eea7121b8eac7875c76/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0c4281f845e8f350acb01cd20ac7f4e085455b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c4281f845e8f350acb01cd20ac7f4e085455b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0c4281f845e8f350acb01cd20ac7f4e085455b0"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 38,
      "deletions": 7
    },
    "files": [
      {
        "sha": "e84d2693a22585a8f5660e13bc6016383b778cef",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 7,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ac2a4e1788426329b842eea7121b8eac7875c76/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ac2a4e1788426329b842eea7121b8eac7875c76/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=8ac2a4e1788426329b842eea7121b8eac7875c76",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,6 +13,7 @@\n #include \"net.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n+#include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n@@ -491,6 +492,18 @@ Value decodescript(const Array& params, bool fHelp)\n     return r;\n }\n \n+/** Pushes a JSON object for script verification or signing errors to vErrorsRet. */\n+static void TxInErrorToJSON(const CTxIn& txin, Array& vErrorsRet, const std::string& strMessage)\n+{\n+    Object entry;\n+    entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n+    entry.push_back(Pair(\"vout\", (uint64_t)txin.prevout.n));\n+    entry.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n+    entry.push_back(Pair(\"sequence\", (uint64_t)txin.nSequence));\n+    entry.push_back(Pair(\"error\", strMessage));\n+    vErrorsRet.push_back(entry);\n+}\n+\n Value signrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 4)\n@@ -532,8 +545,18 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"hex\\\": \\\"value\\\",   (string) The raw transaction with signature(s) (hex-encoded string)\\n\"\n-            \"  \\\"complete\\\": true|false       (boolean) if transaction has a complete set of signature\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n             \"}\\n\"\n \n             \"\\nExamples:\\n\"\n@@ -568,7 +591,6 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     // mergedTx will end up with all the signatures; it\n     // starts as a clone of the rawtx:\n     CMutableTransaction mergedTx(txVariants[0]);\n-    bool fComplete = true;\n \n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n@@ -683,12 +705,15 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n \n+    // Script verification errors\n+    Array vErrors;\n+\n     // Sign what we can:\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n         CTxIn& txin = mergedTx.vin[i];\n         const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n         if (coins == NULL || !coins->IsAvailable(txin.prevout.n)) {\n-            fComplete = false;\n+            TxInErrorToJSON(txin, vErrors, \"Input not found or already spent\");\n             continue;\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n@@ -702,13 +727,19 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n-            fComplete = false;\n+        ScriptError serror = SCRIPT_ERR_OK;\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n+            TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n+        }\n     }\n+    bool fComplete = vErrors.empty();\n \n     Object result;\n     result.push_back(Pair(\"hex\", EncodeHexTx(mergedTx)));\n     result.push_back(Pair(\"complete\", fComplete));\n+    if (!vErrors.empty()) {\n+        result.push_back(Pair(\"errors\", vErrors));\n+    }\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzFhYjEwZjk5ZjFkNWFlZDI3YzQ1ZWU1MWNlOTI5NWZhOWU0OWY1",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-03-23T17:16:07Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-05-05T08:09:39Z"
      },
      "message": "QA: add RPC tests for error reporting of \"signrawtransaction\"\n\nTests error reporting of transaction signing via RPC call \"signrawtransaction\".\n\nExpected results:\n\nTest 1: create and sign a valid raw transaction with one input:\n- 1) The transaction has a complete set of signatures\n- 2) No script verification error occurred\n\nTest 2: create and sign a raw transaction with one valid, one invalid and one missing input script:\n- 3) The transaction has no complete set of signatures\n- 4) Two script verification errors occurred\n- 5) Script verification errors have certain properties (\"txid\", \"vout\", \"scriptSig\", \"sequence\", \"error\")\n- 6) The verification errors refer to the invalid (vin 1) and missing input (vin 2)",
      "tree": {
        "sha": "b570789bf4d54aaf2054206f86891daa0d00ac24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b570789bf4d54aaf2054206f86891daa0d00ac24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJVSHrEAAoJEHZ14xz1cZgy4n8P/jQX+BawK738QzGcdYASN9q9\nz/e6Pu+D7AuFHHh20nBqDDmV1TYV7ou5T1EqHXqErHl7tsVWNrFKYyS6I1ZCCJZY\nHaGX+wlXHByV3p47/kg8d7LfS+33BF1BeQdSFvlYBHnlwL1D/exP26tnVhlX2qI7\noT66r4tCNtnkmoD8haRr2Kigc1Ov6NbJyxtwLiDlWLxunb6HfVYggVMgaZiEDrzV\nwTBBYF/9V33pVmI4FuYvj583Jls0BbMzr6eJXw6XXyVn4UY1v6Sw3Mc+8HnqyJKV\nIYJ43wdK7md9+QApmH29fuyiM1sFNlNj8pQqclakrcu8zGCs08ydcuCM6vO1GAPQ\nIcqhQnItYJrgOROXMkJTuDyerkZbMa+FRBisPMMK1lKQtXP7nytGgZGCUcLLkmhW\nYrgG8r0yh0vNlxAHSWPgDumm3nyd9DLUo2bfbveLyO8A9BukvXgLI4J6zeiyDSs4\nWgnrYebqmoYWQFKqI5PcyQsWv7ocOxZSpSvxViLnZSxIkvXxdhIHcDJayrJy6Rjm\nqR8at1VDoLr3rf6E8JwrNRtfaVxC1CWHinA123I3en9zDXNjYW7IsrkOxHrYqnFZ\nL0FEzl3OOTG2i3DJZbg+r94AwD9c/2d5JeITL/cXplfZfH+/s9CoSjPkdtWGNM/S\nwXZceP+jDwxCk/dB/2OW\n=CZeX\n-----END PGP SIGNATURE-----",
        "payload": "tree b570789bf4d54aaf2054206f86891daa0d00ac24\nparent 8ac2a4e1788426329b842eea7121b8eac7875c76\nauthor dexX7 <dexx@bitwatch.co> 1427130967 +0100\ncommitter dexX7 <dexx@bitwatch.co> 1430813379 +0200\n\nQA: add RPC tests for error reporting of \"signrawtransaction\"\n\nTests error reporting of transaction signing via RPC call \"signrawtransaction\".\n\nExpected results:\n\nTest 1: create and sign a valid raw transaction with one input:\n- 1) The transaction has a complete set of signatures\n- 2) No script verification error occurred\n\nTest 2: create and sign a raw transaction with one valid, one invalid and one missing input script:\n- 3) The transaction has no complete set of signatures\n- 4) Two script verification errors occurred\n- 5) Script verification errors have certain properties (\"txid\", \"vout\", \"scriptSig\", \"sequence\", \"error\")\n- 6) The verification errors refer to the invalid (vin 1) and missing input (vin 2)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ac2a4e1788426329b842eea7121b8eac7875c76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ac2a4e1788426329b842eea7121b8eac7875c76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ac2a4e1788426329b842eea7121b8eac7875c76"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 111,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f82263a7a76e64d31e1b42fa92a592c1084df22",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5",
        "patch": "@@ -22,14 +22,15 @@ testScripts=(\n     'txn_doublespend.py'\n     'txn_doublespend.py --mineblock'\n     'getchaintips.py'\n+    'rawtransactions.py'\n     'rest.py'\n     'mempool_spendcoinbase.py'\n     'mempool_coinbase_spends.py'\n     'httpbasics.py'\n     'zapwallettxes.py'\n     'proxy_test.py'\n     'merkle_blocks.py'\n-    'rawtransactions.py'\n+    'signrawtransactions.py'\n #    'forknotify.py'\n     'maxblocksinflight.py'\n     'invalidblockrequest.py'"
      },
      {
        "sha": "943634bd1913afa0ad606435ee9bb254aeee7ec5",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "added",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=a71ab10f99f1d5aed27c45ee51ce9295fa9e49f5",
        "patch": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+\n+class SignRawTransactionsTest(BitcoinTestFramework):\n+    \"\"\"Tests transaction signing via RPC command \"signrawtransaction\".\"\"\"\n+\n+    def setup_chain(self):\n+        print('Initializing test directory ' + self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(1, self.options.tmpdir)\n+        self.is_network_split = False\n+\n+    def successful_signing_test(self):\n+        \"\"\"Creates and signs a valid raw transaction with one input.\n+\n+        Expected results:\n+\n+        1) The transaction has a complete set of signatures\n+        2) No script verification error occurred\"\"\"\n+        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N']\n+\n+        inputs = [\n+            # Valid pay-to-pubkey script\n+            {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 0,\n+             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'}\n+        ]\n+\n+        outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n+\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+\n+        # 1) The transaction has a complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert_equal(rawTxSigned['complete'], True)\n+\n+        # 2) No script verification error occurred\n+        assert 'errors' not in rawTxSigned\n+\n+    def script_verification_error_test(self):\n+        \"\"\"Creates and signs a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n+\n+        Expected results:\n+\n+        3) The transaction has no complete set of signatures\n+        4) Two script verification errors occurred\n+        5) Script verification errors have certain properties (\"txid\", \"vout\", \"scriptSig\", \"sequence\", \"error\")\n+        6) The verification errors refer to the invalid (vin 1) and missing input (vin 2)\"\"\"\n+        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N']\n+\n+        inputs = [\n+            # Valid pay-to-pubkey script\n+            {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 0},\n+            # Invalid script\n+            {'txid': '5b8673686910442c644b1f4993d8f7753c7c8fcb5c87ee40d56eaeef25204547', 'vout': 7},\n+            # Missing scriptPubKey\n+            {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 1},\n+        ]\n+\n+        scripts = [\n+            # Valid pay-to-pubkey script\n+            {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 0,\n+             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'},\n+            # Invalid script\n+            {'txid': '5b8673686910442c644b1f4993d8f7753c7c8fcb5c87ee40d56eaeef25204547', 'vout': 7,\n+             'scriptPubKey': 'badbadbadbad'}\n+        ]\n+\n+        outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n+\n+        rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+\n+        # 3) The transaction has no complete set of signatures\n+        assert 'complete' in rawTxSigned\n+        assert_equal(rawTxSigned['complete'], False)\n+\n+        # 4) Two script verification errors occurred\n+        assert 'errors' in rawTxSigned\n+        assert_equal(len(rawTxSigned['errors']), 2)\n+\n+        # 5) Script verification errors have certain properties\n+        assert 'txid' in rawTxSigned['errors'][0]\n+        assert 'vout' in rawTxSigned['errors'][0]\n+        assert 'scriptSig' in rawTxSigned['errors'][0]\n+        assert 'sequence' in rawTxSigned['errors'][0]\n+        assert 'error' in rawTxSigned['errors'][0]\n+\n+        # 6) The verification errors refer to the invalid (vin 1) and missing input (vin 2)\n+        assert_equal(rawTxSigned['errors'][0]['txid'], inputs[1]['txid'])\n+        assert_equal(rawTxSigned['errors'][0]['vout'], inputs[1]['vout'])\n+        assert_equal(rawTxSigned['errors'][1]['txid'], inputs[2]['txid'])\n+        assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n+\n+    def run_test(self):\n+        self.successful_signing_test()\n+        self.script_verification_error_test()\n+\n+\n+if __name__ == '__main__':\n+    SignRawTransactionsTest().main()"
      }
    ]
  }
]