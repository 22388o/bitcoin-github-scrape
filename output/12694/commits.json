[
  {
    "sha": "6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWY5OTgyNmI5YWIyYzlkOTVlZDRiNTU0MDNkMjIyMjViY2YwODZh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-03-15T06:42:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-03-15T06:42:18Z"
      },
      "message": "Actually disable BnB when there are preset inputs\n\nWe don't want to use BnB when there are preset inputs because there\nis some weirdness with making that work with using the KnapsackSolver\nas the fallback. Currently we say that we haven't used bnb when\nthere are preset inputs, but we don't actually disable BnB. This fixes\nthat.",
      "tree": {
        "sha": "9a9403bc592b6f38cb864625135b35761e4254a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a9403bc592b6f38cb864625135b35761e4254a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef99826b9ab2c9d95ed4b55403d22225bcf086a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e057589dc67f25da6779b60d0e247a3730adbc6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e057589dc67f25da6779b60d0e247a3730adbc6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e057589dc67f25da6779b60d0e247a3730adbc6d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "db63a5a854a81343084d9bd16d542df1ea729efc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef99826b9ab2c9d95ed4b55403d22225bcf086a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef99826b9ab2c9d95ed4b55403d22225bcf086a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
        "patch": "@@ -2493,7 +2493,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     }\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n@@ -2523,6 +2523,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     {\n         // For now, don't use BnB if preset inputs are selected. TODO: Enable this later\n         bnb_used = false;\n+        coin_selection_params.use_bnb = false;\n \n         std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())"
      },
      {
        "sha": "a88da71f91463afc7acfa047a07487bc838ace0d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ef99826b9ab2c9d95ed4b55403d22225bcf086a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ef99826b9ab2c9d95ed4b55403d22225bcf086a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
        "patch": "@@ -674,7 +674,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * if they are not ours\n      */\n     bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n-                    const CCoinControl& coin_control, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n+                    const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n     CWalletDB *pwalletdbEncryption;\n "
      }
    ]
  },
  {
    "sha": "081bf54ee4a282eed72e7de409ad6b9ab97f2987",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODFiZjU0ZWU0YTI4MmVlZDcyZTdkZTQwOWFkNmI5YWI5N2YyOTg3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-03-15T15:25:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-03-15T19:22:31Z"
      },
      "message": "Test that BnB is not used when there are preset inputs",
      "tree": {
        "sha": "09d971a675648ec35005201d315a0247215a37b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09d971a675648ec35005201d315a0247215a37b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/081bf54ee4a282eed72e7de409ad6b9ab97f2987",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081bf54ee4a282eed72e7de409ad6b9ab97f2987",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/081bf54ee4a282eed72e7de409ad6b9ab97f2987",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081bf54ee4a282eed72e7de409ad6b9ab97f2987/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef99826b9ab2c9d95ed4b55403d22225bcf086a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef99826b9ab2c9d95ed4b55403d22225bcf086a"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 23,
      "deletions": 10
    },
    "files": [
      {
        "sha": "6c36e2e965b5f384c3df19047dee89336798a88d",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081bf54ee4a282eed72e7de409ad6b9ab97f2987/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081bf54ee4a282eed72e7de409ad6b9ab97f2987/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=081bf54ee4a282eed72e7de409ad6b9ab97f2987",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"wallet/wallet.h\"\n #include \"wallet/coinselection.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"amount.h\"\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n@@ -27,7 +28,7 @@ std::vector<std::unique_ptr<CWalletTx>> wtxn;\n typedef std::set<CInputCoin> CoinSet;\n \n static std::vector<COutput> vCoins;\n-static const CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n+static CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n static CAmount balance = 0;\n \n CoinEligibilityFilter filter_standard(1, 6, 0);\n@@ -72,6 +73,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n     }\n     COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);\n+    testWallet.AddToWallet(*wtx.get());\n     wtxn.emplace_back(std::move(wtx));\n }\n \n@@ -222,6 +224,18 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(1);\n     vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n     BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+\n+    // Make sure that we aren't using BnB when there are preset inputs\n+    empty_wallet();\n+    add_coin(5 * CENT);\n+    add_coin(3 * CENT);\n+    add_coin(2 * CENT);\n+    CCoinControl coin_control;\n+    coin_control.fAllowOtherInputs = true;\n+    coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n+    BOOST_CHECK(testWallet.SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n+    BOOST_CHECK(!bnb_used);\n+    BOOST_CHECK(!coin_selection_params_bnb.use_bnb);\n }\n \n BOOST_AUTO_TEST_CASE(knapsack_solver_test)"
      },
      {
        "sha": "bb72eb168c86315650bbc33e45c3524437e7c5cd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081bf54ee4a282eed72e7de409ad6b9ab97f2987/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081bf54ee4a282eed72e7de409ad6b9ab97f2987/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=081bf54ee4a282eed72e7de409ad6b9ab97f2987",
        "patch": "@@ -667,15 +667,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::mutex mutexScanning;\n     friend class WalletRescanReserver;\n \n-\n-    /**\n-     * Select a set of coins such that nValueRet >= nTargetValue and at least\n-     * all coins from coinControl are selected; Never select unconfirmed coins\n-     * if they are not ours\n-     */\n-    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n-                    const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n-\n     CWalletDB *pwalletdbEncryption;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n@@ -768,6 +759,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         return *dbw;\n     }\n \n+    /**\n+     * Select a set of coins such that nValueRet >= nTargetValue and at least\n+     * all coins from coinControl are selected; Never select unconfirmed coins\n+     * if they are not ours\n+     */\n+    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n+                    const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n+\n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n     const std::string& GetName() const { return m_name; }"
      }
    ]
  }
]