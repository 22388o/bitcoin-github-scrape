DrahtBot,2019-08-29 23:53:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17783](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17783.html) (util: Fix -norpcwhitelist, -norpcallowip, a",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526402501,526402501,
practicalswift,2019-08-30 12:46:43,Interesting idea: cautious concept ACK -- more redundancy is good and it is hard to see how this would make us worse off in any way as long as the existing P2P logic is kept unchanged. (Intentionally not commenting on the implementation and more specifically the pros and cons of pulling in Rust code: that is an implementation detail that I'm sure will be discussed separately post concept ACK/NACK.,https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526588120,526588120,
TheBlueMatt,2019-08-30 18:33:03,"> Intentionally not commenting on the implementation and more specifically the pros and cons of pulling in Rust code: that is an implementation detail that I'm sure will be discussed separately post concept ACK/NACK\n\nRight, there's a few things that would need to happen to get this in mergeable state (notably buildsystem things), so no need for that just yet.\n\n> Censorship scenarios worth ",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526704470,526704470,
kristapsk,2019-08-30 19:46:50,But why Rust not C++?,https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526725811,526725811,
TheBlueMatt,2019-08-31 05:59:49,"> But why Rust not C++?\n\nBecause we can trivially turn on compile-time checking preventing a ton of classes of vulnerabilities (especially for network-facing code), and runtime checking for many other classes (like buffer overflows, at least those the compiler can't prove aren't possible).",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526803517,526803517,
fanquake,2019-08-31 06:01:14,"I'm fairly Concept ACK on this. It's been in discussion for a little while, and I'm pretty sure it came up at the last Core dev meetup as well?\n\n> But why Rust not C++?\n\n@kristapsk This PR isn't really the place to have that discussion and is only going to distract from what's actually trying to be achieved. Although Matt points out one big advantage:\n\n> plus we can use compile-time ch",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-526803615,526803615,
naumenkogs,2019-09-03 17:04:31,"Concept ACK on adding more redundancy.\nAgree that Tor support is desirable, and also measures suggested by @practicalswift are important, but this feature even before those measures is already a big improvement (without trading any privacy comparing to the current threat model with unencrypted p2p I believe).",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-527549359,527549359,
laanwj,2019-09-04 09:15:40,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-527816563,527816563,
elichai,2019-09-05 06:47:01,"Could we try and use something like https://github.com/dtolnay/no-panic on parts of the code? (if we can, this will give us compile time guarantees of no panics)\n\nAnother Idea, checking nullness at the boundaries and then use https://doc.rust-lang.org/std/ptr/struct.NonNull.html (can even use `NonNull::new()` to check for nullness)\n\nOther than that I like this and would love to review it w",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-528223954,528223954,
TheBlueMatt,2019-09-05 16:53:55,"I'd rather deliberately use panics so that we can enable overflow checking and catch the panics to kill the Rust thread(s) but leave the rest of Core running. Good call on NonNull, will update to use that!",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-528459579,528459579,
TheBlueMatt,2019-09-06 19:19:51,"Aside from the final commit working around one last build issue, I believe this is ready for review. Doesn't make sense to land for 19, but would be nice to land early in the cycle for 20.",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-528981929,528981929,
theuni,2019-09-06 20:53:01,I'm taking a look at a proper fix for the circular dependency.,https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-529010545,529010545,
practicalswift,2019-09-07 05:13:08,"> https://github.com/bitcoin/bitcoin/blob/3f1ceb95edeb9f58b0a702520a2c452012c63974/src/rusty/src/rest_downloader.rs#L254-L262\n\nIs there any particular reason that the Rust code is using a hand-rolled HTTP client implementation?\n\n> https://github.com/bitcoin/bitcoin/blob/3f1ceb95edeb9f58b0a702520a2c452012c63974/src/rusty/src/rest_downloader.rs#L246-L248\n\nTLS support would be more or les",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-529074057,529074057,
TheBlueMatt,2019-09-07 17:33:12,"Rebased.\n\nYea, probably makes sense to switch to a non-handrolled-HTTP-parser eventually, but:\na) I haven't yet had the time to look into existing rust ones to see if I can find anything suitable (ie doesn't pull in a million dependencies, implying its probably not async/tokio based, and easy to review), which in my previous experience implies this may be hard,\nb) if we add any dependencie",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-529128639,529128639,
TheBlueMatt,2019-09-30 23:57:35,"Now based on #16834 instead of the other way around, but otherwise this should be mostly good to go!",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-536799717,536799717,
DrahtBot,2020-01-07 23:43:11,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-571825358,571825358,
luke-jr,2020-01-18 05:08:04,">would be nice to land early in the cycle for 20.\n\nRust is still a concept NACK...",https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-575867541,575867541,
TheBlueMatt,2020-03-05 19:48:04,Closing due to lack of interest.,https://github.com/bitcoin/bitcoin/pull/16762#issuecomment-595413891,595413891,
jonasschnelli,2019-08-30 07:38:07,AFAICS `--start-group` is not supported in clang (https://bitcoinbuilds.org/index.php?ansilog=6ccfb93d-3437-41c0-99d4-3b6653264739.log#l1705),https://github.com/bitcoin/bitcoin/pull/16762#discussion_r319390967,319390967,src/Makefile.am
fanquake,2019-08-30 07:44:25,"@jonasschnelli Yes `ld` on macOS doesn't support `--start-group` or `--end-group`. This was a bit of a hack to fix a circular dependency issue Matt was seeing on his Debian machine. If you want to compile on macOS you should just be able to drop the `-Wl,--start-group` additions, as that has been working for me. We'll need to fix this **properly** soon.",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r319393006,319393006,src/Makefile.am
elichai,2019-09-07 21:10:57,"I think tracking changes to Cargo.lock might be a good thing. (especially if we will have some dependencies in the future)\n\n(I know it's against the official recommendation)",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321983533,321983533,.gitignore
elichai,2019-09-07 21:20:17,"why not use the regular `const char*`? why cast it into an unsigned char pointer?\nYou could then use rust's `CStr` instead of manually looping and offsetting the pointer:\nhttps://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_ptr",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321983747,321983747,src/init.cpp
elichai,2019-09-07 21:28:29,"A. I'm not sure dereferencing a char* casted to *const u8, is safe.\nB. if you pass this as `*const c_char` and then use rust's `CStr` (as I wrote above) you can replace these ~10 lines with:\n```\nlet uri_str = match CStr::from_ptr(uri).to_str() {\n    Ok(r) => r,\n    Err(_) => return false,\n};\n```",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321983940,321983940,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 21:30:28,"currently the test is pretty small, but maybe still feature gate it with `#[cfg(test)]` so that it won't be compiled normally?",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321983986,321983986,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 21:31:50,Could you add a doc explaining what the function is doing?,https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321984009,321984009,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 21:39:18,"Maybe replace with `host_path.starts_with(""/"")`? (which also solves possible utf-8 problems)",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321984146,321984146,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 21:41:36,"Then you can replace this with `host_path = host_path.trim_start_matches(""/"");`",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321984187,321984187,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 21:52:33,"Same, unless we have something that `if !uri.is_ascii() return None;` at the start of the function we should really try and not index into strings",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321984418,321984418,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 21:54:19,and btw you can do `b'['` instead of `'[' as u8` :),https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321984465,321984465,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 22:03:14,"Could we easily log a panic easily somehow? (although this introduces a lot of complications to pass the `datadir` location somehow, could we maybe use some tmp location just as a jump start?)",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321984701,321984701,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 22:06:33,"I think this should be reversed to check if SSL is true.\nBecause if this returns None we might as well also return false and finish this early, because we unwrap this few lines after \n\nBetter yet, run it once and check for `if ssl {return False;}` so that we won't need to run this twice(not that it really matters that much...)",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321984797,321984797,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 22:18:22,maybe add an example of how the uri should be formatted? (especially because currently there's no feedback from `split_uri`),https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321985047,321985047,src/init.cpp
elichai,2019-09-07 22:31:49,"Ideally we would match against the exact error match so that if it returns something like `InvalidData` then there's no need to keep the loop running. (so stop unless it's a timeout, broken pipe, would block etc.)  ",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321985329,321985329,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 22:40:51,Add a comment that this should only ever trip on the *second* connection?,https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321985493,321985493,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 22:41:39,If we're on completely separate chains why reconnect?,https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321985515,321985515,src/rusty/src/rest_downloader.rs
elichai,2019-09-07 22:51:47,`res.as_mut_ptr()` should also work,https://github.com/bitcoin/bitcoin/pull/16762#discussion_r321985689,321985689,src/rusty/src/bridge.rs
TheBlueMatt,2019-09-08 20:37:05,"I think we'll vendor all our dependencies, so hopefully no need, but we can look into it more once we have a dependency.",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322028115,322028115,.gitignore
TheBlueMatt,2019-09-08 20:43:48,Cause I didn't know CStr existed :p,https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322028393,322028393,src/init.cpp
TheBlueMatt,2019-09-09 02:58:45,"The server may also be broken and be returning empty responses, so best to keep trying.",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322050160,322050160,src/rusty/src/rest_downloader.rs
TheBlueMatt,2019-09-09 02:59:39,I mean that seems pretty obvious given the code?,https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322050241,322050241,src/rusty/src/rest_downloader.rs
TheBlueMatt,2019-09-09 03:00:42,"Ehh, I'd rather keep polling. Better to keep polling so that when the rest endpoint fixes their misconfiguration (eg its returning a 500 or 404 or whatever) the downloader picks back up.",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322050361,322050361,src/rusty/src/rest_downloader.rs
TheBlueMatt,2019-09-09 03:02:14,"I went ahead and added the deanonymizingseed.com one, if folks complain I can use example.com.",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322050537,322050537,src/init.cpp
TheBlueMatt,2019-09-09 03:03:34,Hmm? The pattern hers is if let Some() {} else { return; }. It reads a bit weird but its the easiest way to write it out.,https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322050675,322050675,src/rusty/src/rest_downloader.rs
TheBlueMatt,2019-09-09 03:04:15,"Right, it would be really nice to be able to call LogPrintf from rust code, but I'd prefer to leave that to a future PR.",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322050763,322050763,src/rusty/src/rest_downloader.rs
TheBlueMatt,2019-09-09 03:06:12,"Hmm, thats only available in 1.30. For now lets avoid it until we have a clear min version.",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322050941,322050941,src/rusty/src/rest_downloader.rs
elichai,2019-09-09 15:01:43,"So you have `trim_left_matches()` which predates it (is in rust since 1.0)\nhttps://doc.rust-lang.org/std/primitive.str.html#method.trim_left_matches",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322292885,322292885,src/rusty/src/rest_downloader.rs
elichai,2019-09-09 15:04:02,"Great catch :)\nthat way we won't have a dangling pointer at some point",https://github.com/bitcoin/bitcoin/pull/16762#discussion_r322294202,322294202,src/rusty/src/rest_downloader.rs
