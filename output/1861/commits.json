[
  {
    "sha": "fdbb537d263497529c8f9deb0bb98371530839c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGJiNTM3ZDI2MzQ5NzUyOWM4ZjlkZWIwYmI5ODM3MTUzMDgzOWMz",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-09-27T17:52:09Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-11-16T02:11:30Z"
      },
      "message": "Add new RPC \"lockunspent\", to prevent spending of selected outputs\nand associated RPC \"listlockunspent\".\n\nThis is a memory-only filter, which is empty when a node restarts.",
      "tree": {
        "sha": "a18245d2f8858efde12448d67c3db2c63d175f1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a18245d2f8858efde12448d67c3db2c63d175f1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdbb537d263497529c8f9deb0bb98371530839c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdbb537d263497529c8f9deb0bb98371530839c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdbb537d263497529c8f9deb0bb98371530839c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdbb537d263497529c8f9deb0bb98371530839c3/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "6caffb5358b1e403b293846b3c832433fa928e46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caffb5358b1e403b293846b3c832433fa928e46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6caffb5358b1e403b293846b3c832433fa928e46"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 125,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c032c66d7f6f1990cb9f052ab95ae559de516ed8",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbb537d263497529c8f9deb0bb98371530839c3/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbb537d263497529c8f9deb0bb98371530839c3/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=fdbb537d263497529c8f9deb0bb98371530839c3",
        "patch": "@@ -254,6 +254,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"sendrawtransaction\",     &sendrawtransaction,     false,  false },\n     { \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,   false },\n     { \"gettxout\",               &gettxout,               true,   false },\n+    { \"lockunspent\",            &lockunspent,            false,  false },\n+    { \"listlockunspent\",        &listlockunspent,        false,  false },\n };\n \n CRPCTable::CRPCTable()\n@@ -1213,6 +1215,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n     if (strMethod == \"gettxout\"               && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"gettxout\"               && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n \n     return params;\n }"
      },
      {
        "sha": "44050ae1bb4079084d12c3d8d7431c9cb8687651",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbb537d263497529c8f9deb0bb98371530839c3/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbb537d263497529c8f9deb0bb98371530839c3/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=fdbb537d263497529c8f9deb0bb98371530839c3",
        "patch": "@@ -177,6 +177,8 @@ extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value createrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "dc80d84a7db36e83fe140bb5cf1ad2906b97a639",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 1,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbb537d263497529c8f9deb0bb98371530839c3/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbb537d263497529c8f9deb0bb98371530839c3/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=fdbb537d263497529c8f9deb0bb98371530839c3",
        "patch": "@@ -3,14 +3,18 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/assign/list_of.hpp>\n+\n #include \"wallet.h\"\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"init.h\"\n #include \"base58.h\"\n \n-using namespace json_spirit;\n using namespace std;\n+using namespace boost;\n+using namespace boost::assign;\n+using namespace json_spirit;\n \n int64 nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n@@ -1496,3 +1500,74 @@ Value validateaddress(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value lockunspent(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"lockunspent unlock? [array-of-Objects]\\n\"\n+            \"Updates list of temporarily unspendable outputs.\");\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, list_of(bool_type));\n+    else\n+        RPCTypeCheck(params, list_of(bool_type)(array_type));\n+\n+    bool fUnlock = params[0].get_bool();\n+\n+    if (params.size() == 1) {\n+        if (fUnlock)\n+            pwalletMain->UnlockAllCoins();\n+        return true;\n+    }\n+\n+    Array outputs = params[1].get_array();\n+    BOOST_FOREACH(Value& output, outputs)\n+    {\n+        if (output.type() != obj_type)\n+            throw JSONRPCError(-8, \"Invalid parameter, expected object\");\n+        const Object& o = output.get_obj();\n+\n+        RPCTypeCheck(o, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+\n+        string txid = find_value(o, \"txid\").get_str();\n+        if (!IsHex(txid))\n+            throw JSONRPCError(-8, \"Invalid parameter, expected hex txid\");\n+\n+        int nOutput = find_value(o, \"vout\").get_int();\n+        if (nOutput < 0)\n+            throw JSONRPCError(-8, \"Invalid parameter, vout must be positive\");\n+\n+        COutPoint outpt(uint256(txid), nOutput);\n+\n+        if (fUnlock)\n+            pwalletMain->UnlockCoin(outpt);\n+        else\n+            pwalletMain->LockCoin(outpt);\n+    }\n+\n+    return true;\n+}\n+\n+Value listlockunspent(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 0)\n+        throw runtime_error(\n+            \"listlockunspent\\n\"\n+            \"Returns list of temporarily unspendable outputs.\");\n+\n+    vector<COutPoint> vOutpts;\n+    pwalletMain->ListLockedCoins(vOutpts);\n+\n+    Array ret;\n+\n+    BOOST_FOREACH(COutPoint &outpt, vOutpts) {\n+        Object o;\n+\n+        o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n+        o.push_back(Pair(\"vout\", (int)outpt.n));\n+        ret.push_back(o);\n+    }\n+\n+    return ret;\n+}\n+"
      },
      {
        "sha": "af3612d435059fbcd6d8db2b62bf1d21c581d644",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbb537d263497529c8f9deb0bb98371530839c3/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbb537d263497529c8f9deb0bb98371530839c3/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=fdbb537d263497529c8f9deb0bb98371530839c3",
        "patch": "@@ -953,9 +953,11 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const\n             if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n-                if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) && pcoin->vout[i].nValue > 0)\n+            for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n+                if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) &&\n+                    !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0)\n                     vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain()));\n+            }\n         }\n     }\n }\n@@ -1766,3 +1768,35 @@ void CWallet::UpdatedTransaction(const uint256 &hashTx)\n             NotifyTransactionChanged(this, hashTx, CT_UPDATED);\n     }\n }\n+\n+void CWallet::LockCoin(COutPoint& output)\n+{\n+    setLockedCoins.insert(output);\n+}\n+\n+void CWallet::UnlockCoin(COutPoint& output)\n+{\n+    setLockedCoins.erase(output);\n+}\n+\n+void CWallet::UnlockAllCoins()\n+{\n+    setLockedCoins.clear();\n+}\n+\n+bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n+{\n+    COutPoint outpt(hash, n);\n+\n+    return (setLockedCoins.count(outpt) > 0);\n+}\n+\n+void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n+{\n+    for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n+         it != setLockedCoins.end(); it++) {\n+        COutPoint outpt = (*it);\n+        vOutpts.push_back(outpt);\n+    }\n+}\n+"
      },
      {
        "sha": "3a9fdc64d5251fc48987ff24f047f859c05efb12",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdbb537d263497529c8f9deb0bb98371530839c3/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdbb537d263497529c8f9deb0bb98371530839c3/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=fdbb537d263497529c8f9deb0bb98371530839c3",
        "patch": "@@ -119,11 +119,18 @@ class CWallet : public CCryptoKeyStore\n \n     CPubKey vchDefaultKey;\n \n+    std::set<COutPoint> setLockedCoins;\n+\n     // check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true) const;\n     bool SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n+    void LockCoin(COutPoint& output);\n+    void UnlockCoin(COutPoint& output);\n+    void UnlockAllCoins();\n+    void ListLockedCoins(std::vector<COutPoint>& vOutpts);\n \n     // keystore implementation\n     // Generate a new key"
      }
    ]
  }
]