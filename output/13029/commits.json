[
  {
    "sha": "fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkwZjFmNjYyYzQyYTZiYWI5NmYwYzkxZmNjMzY0MTcwYzNhNmY3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-04-20T09:11:22Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-05-30T15:58:49Z"
      },
      "message": "Interpret absense of prune= as prune=1 if there are pruned blocks\n\nbool fPruneMode is replaced by an enum class to include an UNKNOWN state.\nfHavePruned is used to set fPruneNode if argument is not explictly set.",
      "tree": {
        "sha": "235c748e54fd79178e34df0cbcfd37db4d18ad06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/235c748e54fd79178e34df0cbcfd37db4d18ad06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlsOyjwACgkQV/+b28ww\nEAl2+BAAkV+UM+R1skCmVJA2fD89tdWKw0uHb563roiWLGAIfbL/IikUnzRar0DV\nFIqVAL6SbUu4M7eyhZtTHbcRcMszdEI/L5uI2iIDjhaYcTaLBAKi6cCjbfZLbQeq\n7MnnKerH7pSDtbIUkCOmb9sZcKPKDplkKCwc+Jc/rTLtB2FgIxvVe1ODc9DWBjC3\nQ7GFXyQXe4No7LiBpN2uRZdGT72jG/LzIsTpEsBacMxaUtg9QnrLaZoHb9z0eGgo\ngO0Zn0BCO7QNiTtdMWEeVJrVUpqeZPDS/p/e2ireXJMqEcfqj5yPUwWzt3u1QWjc\ngPVZv/Gz/YyGuFrmrCELnixq5OanESEB+PQ0HROwHDNESjKBoNLBjWX2s36zTurK\n/8Q57nF1/aJYzaMk3siywYj/hvtHJUZW3/MGWLFQK/I4e1DULOmrDzMrfwNV4CsL\niIAY4AWLHlgeFUErZGJXA7n5G5BTQ16A0+VSip87VKQyfprN48krI0Gp6FKgdAvu\nEKRmaLIznsAinsH2VUvPtbCPOMj1hx1WjWFVzs1LIWlhLlE2PM9zttRANjDEg3Dv\nz25S0RC13bUc82Sn2729sljLTUv9gBZL7yeFdlND3cMgGnoyXystdzoxf1Vk/A2f\nwmmS/I4a2eQkmgtXl5eIxtkS3K4ajpV75JJjuJJ/EoyM4IHaqgo=\n=B26h\n-----END PGP SIGNATURE-----",
        "payload": "tree 235c748e54fd79178e34df0cbcfd37db4d18ad06\nparent fd96d54f39cf4f66890e0bb40812d47e69728cec\nauthor Sjors Provoost <sjors@sprovoost.nl> 1524215482 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1527695929 +0200\n\nInterpret absense of prune= as prune=1 if there are pruned blocks\n\nbool fPruneMode is replaced by an enum class to include an UNKNOWN state.\nfHavePruned is used to set fPruneNode if argument is not explictly set.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd96d54f39cf4f66890e0bb40812d47e69728cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd96d54f39cf4f66890e0bb40812d47e69728cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd96d54f39cf4f66890e0bb40812d47e69728cec"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 93,
      "deletions": 33
    },
    "files": [
      {
        "sha": "69666ba78b3259b4b46f7f7db2c6b4602e795349",
        "filename": "doc/release-notes-pr13029.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/doc/release-notes-pr13029.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/doc/release-notes-pr13029.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr13029.md?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -0,0 +1,3 @@\n+Low-level RPC changes\n+---------------------\n+- If there are pruned blocks, absence of `prune=` is interpreted as `prune=1`."
      },
      {
        "sha": "6c7f7e125b7c4f481e954bb462a48799e617b862",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 11,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -378,7 +378,7 @@ void SetupServerArgs()\n #endif\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n+            \"(0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB, default: 0, or 1 if there are pruned blocks)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks\", false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n@@ -908,8 +908,9 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\\n\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n-    // if using block pruning, then disallow txindex\n-    if (gArgs.GetArg(\"-prune\", 0)) {\n+    // If using block pruning, then disallow txindex. Because pruning can be\n+    // implictly enabled, this check is repeated once fHavePruned is known.\n+    if (gArgs.IsArgSet(\"-prune\") && gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n     }\n@@ -1034,16 +1035,18 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n     nPruneTarget = (uint64_t) nPruneArg * 1024 * 1024;\n-    if (nPruneArg == 1) {  // manual pruning: -prune=1\n+    if (gArgs.IsArgSet(\"-prune\") && nPruneArg == 0) { // pruning explicitly disabled\n+        fPruneMode = PruneMode::DISABLED;\n+    } else if (nPruneArg == 1) {  // manual pruning: -prune=1\n         LogPrintf(\"Block pruning enabled.  Use RPC call pruneblockchain(height) to manually prune block and undo files.\\n\");\n         nPruneTarget = std::numeric_limits<uint64_t>::max();\n-        fPruneMode = true;\n+        fPruneMode = PruneMode::ENABLED;\n     } else if (nPruneTarget) {\n         if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\n             return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n         }\n         LogPrintf(\"Prune configured to target %uMiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n-        fPruneMode = true;\n+        fPruneMode = PruneMode::ENABLED;\n     }\n \n     nConnectTimeout = gArgs.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n@@ -1436,9 +1439,12 @@ bool AppInitMain()\n \n                 if (fReset) {\n                     pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n+                    // If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n+                    // This is skipped if there are pruned blocks but prune= is currently not set.\n+                    assert(fPruneMode != PruneMode::UNKNOWN || !gArgs.IsArgSet(\"-prune\"));\n+                    if ((fPruneMode != PruneMode::UNKNOWN && gArgs.GetArg(\"-prune\", 0)) || fPruneMode == PruneMode::ENABLED) {\n+                      CleanupBlockRevFiles();\n+                    }\n                 }\n \n                 if (fRequestShutdown) break;\n@@ -1452,6 +1458,24 @@ bool AppInitMain()\n                     break;\n                 }\n \n+                // If prune= is not set but blocks have previously been pruned,\n+                // behave as if prune=1, otherwise behave as if prune=0.\n+                if (fPruneMode == PruneMode::UNKNOWN && !gArgs.IsArgSet(\"-prune\")) {\n+                    if (fHavePruned) {\n+                        fPruneMode = PruneMode::ENABLED;\n+                        // Repeat check from AppInitParameterInteraction:\n+                        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+                            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+                        }\n+                        // Repeat check from WalletInit::AppInitParameterInteraction:\n+                        if (gArgs.GetBoolArg(\"-rescan\", false)) {\n+                            return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n+                        }\n+                    } else {\n+                        fPruneMode = PruneMode::DISABLED;\n+                    }\n+                }\n+\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!mapBlockIndex.empty() && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n@@ -1460,7 +1484,8 @@ bool AppInitMain()\n \n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n+                assert(fPruneMode != PruneMode::UNKNOWN);\n+                if (fHavePruned && fPruneMode == PruneMode::DISABLED) {\n                     strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n                     break;\n                 }\n@@ -1601,7 +1626,8 @@ bool AppInitMain()\n \n     // if pruning, unset the service bit and perform the initial blockstore prune\n     // after any wallet rescanning has taken place.\n-    if (fPruneMode) {\n+    assert(fPruneMode != PruneMode::UNKNOWN);\n+    if (fPruneMode == PruneMode::ENABLED) {\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n         nLocalServices = ServiceFlags(nLocalServices & ~NODE_NETWORK);\n         if (!fReindex) {"
      },
      {
        "sha": "d8d772b5571f4d18908d857114d20989242b667c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -2039,9 +2039,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             // If pruning, don't inv blocks unless we have on disk and are likely to still have\n             // for some reasonable time window (1 hour) that block relay might require.\n+            assert(fPruneMode != PruneMode::UNKNOWN);\n             const int nPrunedBlocksLikelyToHave = MIN_BLOCKS_TO_KEEP - 3600 / chainparams.GetConsensus().nPowTargetSpacing;\n-            if (fPruneMode && (!(pindex->nStatus & BLOCK_HAVE_DATA) || pindex->nHeight <= chainActive.Tip()->nHeight - nPrunedBlocksLikelyToHave))\n-            {\n+            if (fPruneMode == PruneMode::ENABLED && (!(pindex->nStatus & BLOCK_HAVE_DATA) || pindex->nHeight <= chainActive.Tip()->nHeight - nPrunedBlocksLikelyToHave)) {\n                 LogPrint(BCLog::NET, \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n             }"
      },
      {
        "sha": "343dc1f21ec4033dbe91a5aca34bbab3e4d6ebfa",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -924,8 +924,10 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n             + HelpExampleCli(\"pruneblockchain\", \"1000\")\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\"));\n \n-    if (!fPruneMode)\n+    assert(fPruneMode != PruneMode::UNKNOWN);\n+    if (fPruneMode == PruneMode::DISABLED) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n+    }\n \n     LOCK(cs_main);\n \n@@ -1246,8 +1248,9 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.pushKV(\"initialblockdownload\",  IsInitialBlockDownload());\n     obj.pushKV(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex());\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n-    obj.pushKV(\"pruned\",                fPruneMode);\n-    if (fPruneMode) {\n+    assert(fPruneMode != PruneMode::UNKNOWN);\n+    obj.pushKV(\"pruned\",                fPruneMode == PruneMode::ENABLED);\n+    if (fPruneMode == PruneMode::ENABLED) {\n         CBlockIndex* block = chainActive.Tip();\n         assert(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n@@ -1256,6 +1259,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n \n         obj.pushKV(\"pruneheight\",        block->nHeight);\n \n+        assert(fPruneMode != PruneMode::UNKNOWN);\n         // if 0, execution bypasses the whole if block.\n         bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n         obj.pushKV(\"automatic_pruning\",  automatic_pruning);"
      },
      {
        "sha": "f816753123510e3ea438542b73d65b9faa4a1863",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -76,6 +76,9 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         fs::create_directories(pathTemp);\n         gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n \n+        // All tests currently assume an unpruned node:\n+        fPruneMode = PruneMode::DISABLED;\n+\n         // We have to run a scheduler thread to prevent ActivateBestChain\n         // from blocking due to queue overrun.\n         threadGroup.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));"
      },
      {
        "sha": "de79760b5f1ebcdd1b6e908e27099b9b1653ffd1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -225,7 +225,7 @@ int nScriptCheckThreads = 0;\n std::atomic_bool fImporting(false);\n std::atomic_bool fReindex(false);\n bool fHavePruned = false;\n-bool fPruneMode = false;\n+PruneMode fPruneMode = PruneMode::UNKNOWN;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n@@ -2131,7 +2131,8 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n         LOCK(cs_LastBlockFile);\n-        if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n+        assert(fPruneMode != PruneMode::UNKNOWN);\n+        if (fPruneMode == PruneMode::ENABLED && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {\n                 FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n             } else {\n@@ -3042,8 +3043,10 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n         unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n         unsigned int nNewChunks = (vinfoBlockFile[nFile].nSize + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n         if (nNewChunks > nOldChunks) {\n-            if (fPruneMode)\n+            assert(fPruneMode != PruneMode::UNKNOWN);\n+            if (fPruneMode == PruneMode::ENABLED) {\n                 fCheckForPruning = true;\n+            }\n             if (CheckDiskSpace(nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos, true)) {\n                 FILE *file = OpenBlockFile(pos);\n                 if (file) {\n@@ -3075,8 +3078,10 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     unsigned int nOldChunks = (pos.nPos + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n     unsigned int nNewChunks = (nNewSize + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n     if (nNewChunks > nOldChunks) {\n-        if (fPruneMode)\n+        assert(fPruneMode != PruneMode::UNKNOWN);\n+        if (fPruneMode == PruneMode::ENABLED) {\n             fCheckForPruning = true;\n+        }\n         if (CheckDiskSpace(nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos, true)) {\n             FILE *file = OpenUndoFile(pos);\n             if (file) {\n@@ -3671,7 +3676,8 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n /* Calculate the block/rev files to delete based on height specified by user with RPC command pruneblockchain */\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)\n {\n-    assert(fPruneMode && nManualPruneHeight > 0);\n+    assert(fPruneMode != PruneMode::UNKNOWN);\n+    assert(fPruneMode == PruneMode::ENABLED && nManualPruneHeight > 0);\n \n     LOCK2(cs_main, cs_LastBlockFile);\n     if (chainActive.Tip() == nullptr)\n@@ -4008,7 +4014,8 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         uiInterface.ShowProgress(_(\"Verifying blocks...\"), percentageDone, false);\n         if (pindex->nHeight < chainActive.Height()-nCheckDepth)\n             break;\n-        if (fPruneMode && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+        assert(fPruneMode != PruneMode::UNKNOWN);\n+        if (fPruneMode == PruneMode::ENABLED && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n             // If pruning, only go back as far as we have data.\n             LogPrintf(\"VerifyDB(): block verification stopping at height %d (pruning, no data)\\n\", pindex->nHeight);\n             break;\n@@ -4183,7 +4190,8 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     CValidationState state;\n     CBlockIndex* pindex = chainActive.Tip();\n     while (chainActive.Height() >= nHeight) {\n-        if (fPruneMode && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n+        assert(fPruneMode != PruneMode::UNKNOWN);\n+        if (fPruneMode == PruneMode::ENABLED && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n             // If pruning, don't try rewinding past the HAVE_DATA point;\n             // since older blocks can't be served anyway, there's\n             // no need to walk further, and trying to DisconnectTip()"
      },
      {
        "sha": "db1b2cadeb803a91a9d00b49a80b05ed12960617",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -197,10 +197,18 @@ extern CBlockIndex *pindexBestHeader;\n static const uint64_t nMinDiskSpace = 52428800;\n \n /** Pruning-related variables and constants */\n+enum class PruneMode {\n+    UNKNOWN,  // -prune is absent or has not been parsed yet\n+    DISABLED, // -prune=0\n+    ENABLED   // -prune=N or blocks have been pruned in the past\n+};\n+\n+/** Whether we're running in -prune mode */\n+extern PruneMode fPruneMode;\n+\n /** True if any block files have ever been pruned. */\n extern bool fHavePruned;\n-/** True if we're running in -prune mode. */\n-extern bool fPruneMode;\n+\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */"
      },
      {
        "sha": "4d85a4d61d0ea565b5f2cb9ae71b431f6e5094af",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -135,7 +135,9 @@ bool WalletInit::ParameterInteraction() const\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))\n         return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n-    if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n+\n+    // Because pruning can be implictly enabled, this check is repeated once fHavePruned is known.\n+    if (gArgs.IsArgSet(\"-prune\") && gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n         return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n     if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)"
      },
      {
        "sha": "337886d250cb599ee3cb964a4d7bc801339f9e89",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -136,7 +136,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!request.params[2].isNull())\n             fRescan = request.params[2].get_bool();\n \n-        if (fRescan && fPruneMode)\n+        assert(fPruneMode != PruneMode::UNKNOWN);\n+        if (fRescan && fPruneMode == PruneMode::ENABLED)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n         if (fRescan && !reserver.reserve()) {\n@@ -287,7 +288,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    assert(fPruneMode != PruneMode::UNKNOWN);\n+    if (fRescan && fPruneMode == PruneMode::ENABLED)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);\n@@ -470,7 +472,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    assert(fPruneMode != PruneMode::UNKNOWN);\n+    if (fRescan && fPruneMode == PruneMode::ENABLED)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);\n@@ -533,8 +536,10 @@ UniValue importwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n         );\n \n-    if (fPruneMode)\n+      assert(fPruneMode != PruneMode::UNKNOWN);\n+      if (fPruneMode == PruneMode::ENABLED) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n+      }\n \n     WalletRescanReserver reserver(pwallet);\n     if (!reserver.reserve()) {"
      },
      {
        "sha": "f7678b668a8d50e72fa02aca02de29631a1b9b36",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -3854,7 +3854,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     }\n \n     // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n+    assert(fPruneMode != PruneMode::UNKNOWN);\n+    if (fPruneMode == PruneMode::ENABLED) {\n         LOCK(cs_main);\n         CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n         while (block && block->nHeight >= pindexStart->nHeight) {"
      },
      {
        "sha": "a2f34f0c02b15eeaf8593d54dc8d2dff766d66d5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa90f1f662c42a6bab96f0c91fcc364170c3a6f7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa90f1f662c42a6bab96f0c91fcc364170c3a6f7",
        "patch": "@@ -4278,8 +4278,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n-        if (fPruneMode)\n-        {\n+        assert(fPruneMode != PruneMode::UNKNOWN);\n+        if (fPruneMode == PruneMode::ENABLED) {\n             CBlockIndex *block = chainActive.Tip();\n             while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n                 block = block->pprev;"
      }
    ]
  }
]