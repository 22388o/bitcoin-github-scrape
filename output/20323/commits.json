[
  {
    "sha": "7e9e7fe56734d729ed7de39e880577b135dfd368",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTllN2ZlNTY3MzRkNzI5ZWQ3ZGUzOWU4ODA1NzdiMTM1ZGZkMzY4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-28T20:27:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-08T19:22:43Z"
      },
      "message": "qt/test: [FIX] Add forgotten Context setting in RPCNestedTests",
      "tree": {
        "sha": "e8c77282202b2bc27826f46e2158ebd23838785f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8c77282202b2bc27826f46e2158ebd23838785f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e9e7fe56734d729ed7de39e880577b135dfd368",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e9e7fe56734d729ed7de39e880577b135dfd368",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e9e7fe56734d729ed7de39e880577b135dfd368",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e9e7fe56734d729ed7de39e880577b135dfd368/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e98d1d674091681f88c5872f3e3923e37ce81b00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e98d1d674091681f88c5872f3e3923e37ce81b00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e98d1d674091681f88c5872f3e3923e37ce81b00"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "a5c91387986c4e35bc6941b865cd61460685577a",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e9e7fe56734d729ed7de39e880577b135dfd368/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e9e7fe56734d729ed7de39e880577b135dfd368/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=7e9e7fe56734d729ed7de39e880577b135dfd368",
        "patch": "@@ -43,41 +43,41 @@ void RPCNestedTests::rpcNestedTests()\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n \n     TestingSetup test;\n+    m_node.setContext(&test.m_node);\n \n     if (RPCIsInWarmup(nullptr)) SetRPCWarmupFinished();\n \n     std::string result;\n     std::string result2;\n     std::string filtered;\n-    interfaces::Node* node = &m_node;\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n     QVERIFY(result==\"main\");\n     QVERIFY(filtered == \"getblockchaininfo()[chain]\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo\");\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()\");\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n     QVERIFY(result == \"null\");\n \n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed\n-    (RPCConsole::RPCExecuteCommandLine(*node, result2, \"createrawtransaction([],{},0)\")); //parameter in brackets are allowed\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result2, \"createrawtransaction([],{},0)\")); //parameter in brackets are allowed\n     QVERIFY(result == result2);\n-    (RPCConsole::RPCExecuteCommandLine(*node, result2, \"createrawtransaction( [],  {} , 0   )\")); //whitespace between parameters is allowed\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result2, \"createrawtransaction( [],  {} , 0   )\")); //whitespace between parameters is allowed\n     QVERIFY(result == result2);\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getbestblockhash())[tx][0]\", &filtered);\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())[tx][0]\", &filtered);\n     QVERIFY(result == \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\");\n     QVERIFY(filtered == \"getblock(getbestblockhash())[tx][0]\");\n \n@@ -102,35 +102,35 @@ void RPCNestedTests::rpcNestedTests()\n     RPCConsole::RPCParseCommandLine(nullptr, result, \"help(importprivkey(abc), walletpassphrase(def))\", false, &filtered);\n     QVERIFY(filtered == \"help(importprivkey(\u2026), walletpassphrase(\u2026))\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest\");\n     QVERIFY(result == \"[]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest ''\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest ''\");\n     QVERIFY(result == \"[\\\"\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest \\\"\\\"\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest \\\"\\\"\");\n     QVERIFY(result == \"[\\\"\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest '' abc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest '' abc\");\n     QVERIFY(result == \"[\\\"\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc '' abc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc '' abc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc  abc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc  abc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc\\t\\tabc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc\\t\\tabc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc )\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc )\");\n     QVERIFY(result == \"[\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest( abc )\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest( abc )\");\n     QVERIFY(result == \"[\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(   abc   ,   cba )\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(   abc   ,   cba )\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"cba\\\"]\");\n \n     // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n }"
      }
    ]
  },
  {
    "sha": "81137c60fe6234569e1c5e6760f3a6f016956944",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTEzN2M2MGZlNjIzNDU2OWUxYzVlNjc2MGYzYTZmMDE2OTU2OTQ0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-13T20:55:20Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-08T20:00:25Z"
      },
      "message": "test: Add new ChainTestingSetup and use it\n\nPreviously, the validation_chainstatemanager_tests test suite\ninstantiated its own duplicate ChainstateManager on which tests were\nperformed.\n\nThis wasn't a problem for the specific actions performed in\nthat suite. However, the existence of this duplicate ChainstateManager\nand the fact that many of our validation static functions reach for\ng_chainman, ::Chain(state|)Active means we may end up acting on two\ndifferent CChainStates should we write more extensive tests in the\nfuture.\n\nThis change adds a new ChainTestingSetup which performs all\ninitialization previously done by TestingSetup except:\n\n1. RPC command registration\n2. ChainState initialization\n3. Genesis Activation\n4. {Ban,Conn,Peer}Man initialization\n\nMeans that we will no longer need to initialize a duplicate\nChainstateManger in order to test the initialization codepaths of\nCChainState and ChainstateManager.\n\nLastly, this change has the additional benefit of allowing for\nreview-only assertions meant to show correctness to work in future work\nde-globalizing g_chainman.\n\nIn the test chainstatemanager_rebalance_caches, an additional\nLoadGenesisBlock call is added as MaybeReblanaceCaches eventually calls\nFlushBlockFile, which tries to access vinfoBlockFile[nLastBlockFile],\nwhich is out of bounds when LoadGenesisBlock hasn't been called yet.\n\n-----\n\nNote for the future:\n\nThe class con/destructor inheritance structure we have for these\nTestingSetup classes is probably not the most suitable abstraction. In\nparticular, for both TestingSetup and ChainTestingSetup, we need to stop\nthe scheduler first before anything else. Otherwise classes depending on\nthe scheduler may be referenced by the scheduler after said classes are\nfreed. This means that there's no clear parallel between our teardown\ncode and C++'s destructuring order for class hierarchies.\n\nFuture work should strive to coalesce (as much as possible) test and\nnon-test init codepaths and perhaps structure it in a more fail-proof\nway.",
      "tree": {
        "sha": "4a42001467db2fae5d9a086cdeb3131960f3f93f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a42001467db2fae5d9a086cdeb3131960f3f93f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81137c60fe6234569e1c5e6760f3a6f016956944",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81137c60fe6234569e1c5e6760f3a6f016956944",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81137c60fe6234569e1c5e6760f3a6f016956944",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81137c60fe6234569e1c5e6760f3a6f016956944/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e9e7fe56734d729ed7de39e880577b135dfd368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e9e7fe56734d729ed7de39e880577b135dfd368",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e9e7fe56734d729ed7de39e880577b135dfd368"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 56,
      "deletions": 41
    },
    "files": [
      {
        "sha": "55766a60b4daee9be9b960c6615cd06b03b03afb",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 32,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81137c60fe6234569e1c5e6760f3a6f016956944/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81137c60fe6234569e1c5e6760f3a6f016956944/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=81137c60fe6234569e1c5e6760f3a6f016956944",
        "patch": "@@ -125,18 +125,12 @@ BasicTestingSetup::~BasicTestingSetup()\n     ECC_Stop();\n }\n \n-TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n+ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n     : BasicTestingSetup(chainName, extra_args)\n {\n-    const CChainParams& chainparams = Params();\n-    // Ideally we'd move all the RPC tests to the functional testing framework\n-    // instead of unit tests, but for now we need these here.\n-    RegisterAllCoreRPCCommands(tableRPC);\n-\n-    m_node.scheduler = MakeUnique<CScheduler>();\n-\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n+    m_node.scheduler = MakeUnique<CScheduler>();\n     threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n     GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n@@ -146,39 +140,16 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     m_node.mempool = std::make_unique<CTxMemPool>(m_node.fee_estimator.get(), 1);\n \n     m_node.chainman = &::g_chainman;\n-    m_node.chainman->InitializeChainstate(*m_node.mempool);\n-    ::ChainstateActive().InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    assert(!::ChainstateActive().CanFlushToDisk());\n-    ::ChainstateActive().InitCoinsCache(1 << 23);\n-    assert(::ChainstateActive().CanFlushToDisk());\n-    if (!LoadGenesisBlock(chainparams)) {\n-        throw std::runtime_error(\"LoadGenesisBlock failed.\");\n-    }\n-\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n-    }\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n     for (int i = 0; i < script_check_threads; ++i) {\n         threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n     }\n     g_parallel_script_checks = true;\n-\n-    m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peerman = MakeUnique<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n-    {\n-        CConnman::Options options;\n-        options.m_msgproc = m_node.peerman.get();\n-        m_node.connman->Init(options);\n-    }\n }\n \n-TestingSetup::~TestingSetup()\n+ChainTestingSetup::~ChainTestingSetup()\n {\n     if (m_node.scheduler) m_node.scheduler->stop();\n     threadGroup.interrupt_all();\n@@ -196,6 +167,39 @@ TestingSetup::~TestingSetup()\n     pblocktree.reset();\n }\n \n+TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n+    : ChainTestingSetup(chainName, extra_args)\n+{\n+    const CChainParams& chainparams = Params();\n+    // Ideally we'd move all the RPC tests to the functional testing framework\n+    // instead of unit tests, but for now we need these here.\n+    RegisterAllCoreRPCCommands(tableRPC);\n+\n+    m_node.chainman->InitializeChainstate(*m_node.mempool);\n+    ::ChainstateActive().InitCoinsDB(\n+        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+    assert(!::ChainstateActive().CanFlushToDisk());\n+    ::ChainstateActive().InitCoinsCache(1 << 23);\n+    assert(::ChainstateActive().CanFlushToDisk());\n+    if (!LoadGenesisBlock(chainparams)) {\n+        throw std::runtime_error(\"LoadGenesisBlock failed.\");\n+    }\n+\n+    BlockValidationState state;\n+    if (!ActivateBestChain(state, chainparams)) {\n+        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n+    }\n+\n+    m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n+    m_node.peerman = MakeUnique<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n+    {\n+        CConnman::Options options;\n+        options.m_msgproc = m_node.peerman.get();\n+        m_node.connman->Init(options);\n+    }\n+}\n+\n TestChain100Setup::TestChain100Setup()\n {\n     // Generate a 100-block chain:"
      },
      {
        "sha": "0498e7d182d54edc551bf96a32c61fdbc5196624",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81137c60fe6234569e1c5e6760f3a6f016956944/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81137c60fe6234569e1c5e6760f3a6f016956944/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=81137c60fe6234569e1c5e6760f3a6f016956944",
        "patch": "@@ -83,14 +83,21 @@ struct BasicTestingSetup {\n     const fs::path m_path_root;\n };\n \n-/** Testing setup that configures a complete environment.\n- * Included are coins database, script check threads setup.\n+/** Testing setup that performs all steps up until right before\n+ * ChainstateManager gets initialized. Meant for testing ChainstateManager\n+ * initialization behaviour.\n  */\n-struct TestingSetup : public BasicTestingSetup {\n+struct ChainTestingSetup : public BasicTestingSetup {\n     boost::thread_group threadGroup;\n \n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n+    ~ChainTestingSetup();\n+};\n+\n+/** Testing setup that configures a complete environment.\n+ */\n+struct TestingSetup : public ChainTestingSetup {\n     explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n-    ~TestingSetup();\n };\n \n /** Identical to TestingSetup, but chain set to regtest */"
      },
      {
        "sha": "75939e014079b0e97f1a378356c0bfc7ecac7373",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81137c60fe6234569e1c5e6760f3a6f016956944/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81137c60fe6234569e1c5e6760f3a6f016956944/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=81137c60fe6234569e1c5e6760f3a6f016956944",
        "patch": "@@ -15,15 +15,16 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, ChainTestingSetup)\n \n //! Basic tests for ChainstateManager.\n //!\n //! First create a legacy (IBD) chainstate, then create a snapshot chainstate.\n BOOST_AUTO_TEST_CASE(chainstatemanager)\n {\n-    ChainstateManager manager;\n-    CTxMemPool mempool;\n+    ChainstateManager& manager = *m_node.chainman;\n+    CTxMemPool& mempool = *m_node.mempool;\n+\n     std::vector<CChainState*> chainstates;\n     const CChainParams& chainparams = Params();\n \n@@ -104,8 +105,9 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n //! Test rebalancing the caches associated with each chainstate.\n BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n {\n-    ChainstateManager manager;\n-    CTxMemPool mempool;\n+    ChainstateManager& manager = *m_node.chainman;\n+    CTxMemPool& mempool = *m_node.mempool;\n+\n     size_t max_cache = 10000;\n     manager.m_total_coinsdb_cache = max_cache;\n     manager.m_total_coinstip_cache = max_cache;\n@@ -122,6 +124,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     {\n         LOCK(::cs_main);\n         c1.InitCoinsCache(1 << 23);\n+        BOOST_REQUIRE(c1.LoadGenesisBlock(Params()));\n         c1.CoinsTip().SetBestBlock(InsecureRand256());\n         manager.MaybeRebalanceCaches();\n     }\n@@ -139,6 +142,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     {\n         LOCK(::cs_main);\n         c2.InitCoinsCache(1 << 23);\n+        BOOST_REQUIRE(c2.LoadGenesisBlock(Params()));\n         c2.CoinsTip().SetBestBlock(InsecureRand256());\n         manager.MaybeRebalanceCaches();\n     }"
      }
    ]
  }
]