jnewbery,2020-11-05 19:38:36,Concept ACK. Thanks for moving ChainTestingSetup into validation_chainstatemanager_tests.cpp!,https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-722598817,722598817,
practicalswift,2020-11-05 20:05:48,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-722614162,722614162,
DrahtBot,2020-11-05 21:12:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20228 (addrman: Make addrman a top-level component by jnewbery)\n* #20217 (net: Remove g_relay_txes by jnewbery)\n* #1906",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-722648327,722648327,
dongcarl,2020-11-17 17:35:19,"Addressed a few comments.\n\n-----\n\nfuzz CI failing because of https://github.com/bitcoin/bitcoin/pull/20188#issuecomment-728911018.",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-729086084,729086084,
ryanofsky,2020-12-01 16:38:22,"Hopefully as a test-only cleanup PR with a lot of other changes building on top it (#20158), this can be merged soon",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-736669735,736669735,
MarcoFalke,2020-12-01 16:46:26,Reason I didn't merge this is that this overlaps with the test changes here: https://github.com/bitcoin/bitcoin/pull/19425#pullrequestreview-534180561. Though there have been outstanding questions and those questions also apply to this pull (in the extent that they overlap).,https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-736674583,736674583,
jnewbery,2020-12-04 11:31:10,utACK 1319b17e15dfd5a3a6bbf3c67b98fcce72c80812,https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-738734145,738734145,
dongcarl,2020-12-04 21:40:50,"Pushed 1319b17e15dfd5a3a6bbf3c67b98fcce72c80812 -> 11fac8b2c8001e9aee9debb20df09473b9092b8c:\n1. Rebased over master for #20222\n2. Changed `assert`s in tests to `BOOST_REQUIRE` as recommended: https://github.com/bitcoin/bitcoin/pull/20323#discussion_r533584267\n3. Extracted out testing app initialization and destruction logic into `TestingAppInitSequence` and `TestingAppDestructionSequence` to",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-739035976,739035976,
jnewbery,2020-12-07 10:34:43,"I've had a quick look through the new branch and find the `TestingAppInitSequence()` and `TestingAppDestructionSequence()` less clear than the previous version. In general functions that take a bool argument which substantially changes the logic inside that function (in this case `chain_testing_only`), suggest that the abstraction may be wrong.\n\nWas there an actual problem with the previous br",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-739830876,739830876,
dongcarl,2020-12-08 20:10:41,"Thanks everyone for the reviews. The latest push 81137c6 is now rebased over #19485.\n\nThis PR is intended to just move things around a bit for the rest of the `ChainstateManager` de-globalization to work properly. I believe we've gotten a bit stuck on the intricacies of these `TestingSetup` abstractions.\n\nPersonally, I don't particularly care how the abstraction works here. The `TestingSet",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-740960339,740960339,
MarcoFalke,2020-12-09 06:57:38,"Thanks for shuffling this around for over a month\n\nACK 81137c60fe looking excellent now üê©\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 81137c60fe looking excellent now üê©\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjLNQv9G0SWcw2rzIt",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-741575690,741575690,
MarcoFalke,2020-12-09 07:02:09,"> 2. Put ChainTestingSetup back in setup_common so that future tests can use it as requested here. (Sorry John, I knew you weren't the biggest fan of this confused)\n\nOk, let's wait for @jnewbery 's green light before merge",https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-741577830,741577830,
jnewbery,2020-12-09 08:50:48,ACK 81137c60fe6234569e1c5e6760f3a6f016956944,https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-741628388,741628388,
jnewbery,2020-11-10 17:07:12,You don't need these ctor arguments. Just remove them and call `BasicTestingSetup()` (which will use the default arguments for its constructor).,https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726209,520726209,src/test/validation_chainstatemanager_tests.cpp
jnewbery,2020-11-10 17:07:21,Not needed. Remove.,https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726307,520726307,src/test/validation_chainstatemanager_tests.cpp
jnewbery,2020-11-10 17:07:56,"I'd suggest moving this below the ""We have to run..."" comment, since it fits with the code there.",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726677,520726677,src/test/validation_chainstatemanager_tests.cpp
jnewbery,2020-11-10 17:08:06,Remove this line.,https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726782,520726782,src/test/validation_chainstatemanager_tests.cpp
jnewbery,2020-11-10 17:09:05,Remove,https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520727442,520727442,src/test/validation_chainstatemanager_tests.cpp
dongcarl,2020-11-10 18:59:35,"I copied this from `~TestingSetup`, is there a reason why this is needed there and not here?",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520802498,520802498,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2020-11-10 19:11:05,"It's a bit odd to have the low level code copied here, and require modifying `src/test/validation_chainstatemanager_tests.cpp` whenever the testing setup is upgraded.\n\nwouldn't it be possible to simply keep using the `TestingSetup` here, like the tests did previously, and then do specific undo-hacks (hopefully less code) to unload the chainstates (and/or whatever else is required)",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520810288,520810288,src/test/validation_chainstatemanager_tests.cpp
jnewbery,2020-11-10 19:30:47,oops. My mistake. This should be left. I was confusing it with the RPC registration/deregistration.,https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520821707,520821707,src/test/validation_chainstatemanager_tests.cpp
dongcarl,2020-11-17 00:22:20,"@MarcoFalke I assume you mean something like:\n\n```diff\ndiff --git a/src/test/validation_chainstatemanager_tests.cpp b/src/test/validation_chainstatemanager_tests.cpp\nindex 34e5723964..664405fc5e 100644\n--- a/src/test/validation_chainstatemanager_tests.cpp\n+++ b/src/test/validation_chainstatemanager_tests.cpp\n@@ -17,48 +17,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-struct ",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r524803514,524803514,src/test/validation_chainstatemanager_tests.cpp
ryanofsky,2020-12-01 17:17:07,"In commit ""test: Add new ChainTestingSetup and use it"" (43c880afbcafa9796c838518722594940af69b7d)\n\nWould suggest using `BOOST_REQUIRE` instead of `assert` or splitting as `bool loaded = c1.LoadGenesisBlock(Params()); assert(loaded);`. Writing code with side effects in an `assert` adds some ambiguity because behavior will depend on value of NDEBUG",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r533584267,533584267,src/test/validation_chainstatemanager_tests.cpp
dongcarl,2020-12-03 18:24:12,"Oh! Didn't know about `NDEBUG`... So when `NDEBUG` is set, the code inside `assert(...)` may be optimized out? Or is it the case that only the result isn't checked/asserted?",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r535477290,535477290,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2020-12-07 10:45:36,"any reason for the modifications here? reset is idempotent , so doesn't need to be guarded.",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537405985,537405985,src/test/util/setup_common.cpp
MarcoFalke,2020-12-07 10:47:42,"Any reason to add this here and not to setup_common? Moving it to setup_common would allow removing the confusing `TestingAppInitSequence` declarations in the header. Also, it would allow other tests to use the `ChainTestingSetup`.",https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537407409,537407409,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2020-12-07 10:49:06,Agree with john that functions that have a large branch (and a boolean arg) are better split off into two functions,https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537408230,537408230,src/test/util/setup_common.cpp
