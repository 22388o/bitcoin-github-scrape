[
  {
    "sha": "592404f03f2b734351d734f0c9ca1fdce997321b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTI0MDRmMDNmMmI3MzQzNTFkNzM0ZjBjOWNhMWZkY2U5OTczMjFi",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-07-11T09:37:53Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-07T22:36:26Z"
      },
      "message": "Changing &vec[0] to vec.data(), what 9804 missed",
      "tree": {
        "sha": "463d2c31825679c76f11445366b6736702b2824c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/463d2c31825679c76f11445366b6736702b2824c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/592404f03f2b734351d734f0c9ca1fdce997321b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/592404f03f2b734351d734f0c9ca1fdce997321b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/592404f03f2b734351d734f0c9ca1fdce997321b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/592404f03f2b734351d734f0c9ca1fdce997321b/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d81dccf191a48a6b59c3747d7b4ccbe3535dde40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d81dccf191a48a6b59c3747d7b4ccbe3535dde40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d81dccf191a48a6b59c3747d7b4ccbe3535dde40"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 48,
      "deletions": 49
    },
    "files": [
      {
        "sha": "410a08e512cbfbab49e9fabd04dc560e37f1dce3",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -47,7 +47,7 @@ static void SHA256_32b(benchmark::State& state)\n     std::vector<uint8_t> in(32,0);\n     while (state.KeepRunning()) {\n         for (int i = 0; i < 1000000; i++) {\n-            CSHA256().Write(in.data(), in.size()).Finalize(&in[0]);\n+            CSHA256().Write(in.data(), in.size()).Finalize(in.data());\n         }\n     }\n }"
      },
      {
        "sha": "85f4c67036fb8da5b492663ed13cf42a1b6582d7",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -164,7 +164,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     ui->statusLabel_SM->setStyleSheet(\"QLabel { color: green; }\");\n     ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signed.\") + QString(\"</nobr>\"));\n \n-    ui->signatureOut_SM->setText(QString::fromStdString(EncodeBase64(&vchSig[0], vchSig.size())));\n+    ui->signatureOut_SM->setText(QString::fromStdString(EncodeBase64(vchSig.data(), vchSig.size())));\n }\n \n void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()"
      },
      {
        "sha": "273bd1048720ae45b70132bef1199c1b343ebc42",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -24,7 +24,7 @@ X509 *parse_b64der_cert(const char* cert_data)\n {\n     std::vector<unsigned char> data = DecodeBase64(cert_data);\n     assert(data.size() > 0);\n-    const unsigned char* dptr = &data[0];\n+    const unsigned char* dptr = data.data();\n     X509 *cert = d2i_X509(nullptr, &dptr, data.size());\n     assert(cert);\n     return cert;\n@@ -43,7 +43,7 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n     // Write data to a temp file:\n     QTemporaryFile f;\n     f.open();\n-    f.write((const char*)&data[0], data.size());\n+    f.write((const char*)data.data(), data.size());\n     f.close();\n \n     // Create a QObject, install event filter from PaymentServer\n@@ -139,7 +139,7 @@ void PaymentServerTests::paymentServerTests()\n \n     // Contains a testnet paytoaddress, so payment request network doesn't match client network:\n     data = DecodeBase64(paymentrequest1_cert2_BASE64);\n-    byteArray = QByteArray((const char*)&data[0], data.size());\n+    byteArray = QByteArray((const char*)data.data(), data.size());\n     r.paymentRequest.parse(byteArray);\n     // Ensure the request is initialized, because network \"main\" is default, even for\n     // uninitialized payment requests and that will fail our test here.\n@@ -148,7 +148,7 @@ void PaymentServerTests::paymentServerTests()\n \n     // Expired payment request (expires is set to 1 = 1970-01-01 00:00:01):\n     data = DecodeBase64(paymentrequest2_cert2_BASE64);\n-    byteArray = QByteArray((const char*)&data[0], data.size());\n+    byteArray = QByteArray((const char*)data.data(), data.size());\n     r.paymentRequest.parse(byteArray);\n     // Ensure the request is initialized\n     QVERIFY(r.paymentRequest.IsInitialized());\n@@ -159,7 +159,7 @@ void PaymentServerTests::paymentServerTests()\n     // 9223372036854775807 (uint64), 9223372036854775807 (int64_t) and -1 (int32_t)\n     // -1 is 1969-12-31 23:59:59 (for a 32 bit time values)\n     data = DecodeBase64(paymentrequest3_cert2_BASE64);\n-    byteArray = QByteArray((const char*)&data[0], data.size());\n+    byteArray = QByteArray((const char*)data.data(), data.size());\n     r.paymentRequest.parse(byteArray);\n     // Ensure the request is initialized\n     QVERIFY(r.paymentRequest.IsInitialized());\n@@ -170,7 +170,7 @@ void PaymentServerTests::paymentServerTests()\n     // 9223372036854775808 (uint64), -9223372036854775808 (int64_t) and 0 (int32_t)\n     // 0 is 1970-01-01 00:00:00 (for a 32 bit time values)\n     data = DecodeBase64(paymentrequest4_cert2_BASE64);\n-    byteArray = QByteArray((const char*)&data[0], data.size());\n+    byteArray = QByteArray((const char*)data.data(), data.size());\n     r.paymentRequest.parse(byteArray);\n     // Ensure the request is initialized\n     QVERIFY(r.paymentRequest.IsInitialized());\n@@ -190,7 +190,7 @@ void PaymentServerTests::paymentServerTests()\n \n     // Payment request with amount overflow (amount is set to 21000001 BTC):\n     data = DecodeBase64(paymentrequest5_cert2_BASE64);\n-    byteArray = QByteArray((const char*)&data[0], data.size());\n+    byteArray = QByteArray((const char*)data.data(), data.size());\n     r.paymentRequest.parse(byteArray);\n     // Ensure the request is initialized\n     QVERIFY(r.paymentRequest.IsInitialized());"
      },
      {
        "sha": "7d7ce6b3b6f0f63e96c0c7a5515c282a18837e73",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -459,7 +459,7 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     if (!key.SignCompact(ss.GetHash(), vchSig))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n \n-    return EncodeBase64(&vchSig[0], vchSig.size());\n+    return EncodeBase64(vchSig.data(), vchSig.size());\n }\n \n UniValue setmocktime(const JSONRPCRequest& request)"
      },
      {
        "sha": "7315500e3b6d3eabb577b026ef12c658ce276134",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -1366,7 +1366,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n             stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n-            if (memcmp(hashScriptPubKey.begin(), &program[0], 32)) {\n+            if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n         } else if (program.size() == 20) {"
      },
      {
        "sha": "e123c26ad0277c2a42c5902819be2eb6f9733b3c",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -91,7 +91,7 @@ void RunTest(const TestVector &test) {\n     std::vector<unsigned char> seed = ParseHex(test.strHexMaster);\n     CExtKey key;\n     CExtPubKey pubkey;\n-    key.SetMaster(&seed[0], seed.size());\n+    key.SetMaster(seed.data(), seed.size());\n     pubkey = key.Neuter();\n     for (const TestDerivation &derive : test.vDerive) {\n         unsigned char data[74];"
      },
      {
        "sha": "9274ceefcb3ddf1c9c2e4db6a4b5c551108ae78a",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -154,8 +154,8 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n     COutPoint prevOutPoint(uint256S(\"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b\"), 0);\n     {\n         std::vector<unsigned char> data(32 + sizeof(unsigned int));\n-        memcpy(&data[0], prevOutPoint.hash.begin(), 32);\n-        memcpy(&data[32], &prevOutPoint.n, sizeof(unsigned int));\n+        memcpy(data.data(), prevOutPoint.hash.begin(), 32);\n+        memcpy(data.data()+32, &prevOutPoint.n, sizeof(unsigned int));\n         filter.insert(data);\n     }\n     BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), \"Simple Bloom filter didn't match manually serialized COutPoint\");"
      },
      {
        "sha": "c748b2448c3ebb3a034c25f5a1efe3633ad06a76",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -58,12 +58,12 @@ void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVecto\n \n void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n-    TestVector(CHMAC_SHA256(&key[0], key.size()), ParseHex(hexin), ParseHex(hexout));\n+    TestVector(CHMAC_SHA256(key.data(), key.size()), ParseHex(hexin), ParseHex(hexout));\n }\n \n void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n-    TestVector(CHMAC_SHA512(&key[0], key.size()), ParseHex(hexin), ParseHex(hexout));\n+    TestVector(CHMAC_SHA512(key.data(), key.size()), ParseHex(hexin), ParseHex(hexout));\n }\n \n void TestAES128(const std::string &hexkey, const std::string &hexin, const std::string &hexout)\n@@ -76,13 +76,13 @@ void TestAES128(const std::string &hexkey, const std::string &hexin, const std::\n     assert(key.size() == 16);\n     assert(in.size() == 16);\n     assert(correctout.size() == 16);\n-    AES128Encrypt enc(&key[0]);\n+    AES128Encrypt enc(key.data());\n     buf.resize(correctout.size());\n     buf2.resize(correctout.size());\n-    enc.Encrypt(&buf[0], &in[0]);\n+    enc.Encrypt(buf.data(), in.data());\n     BOOST_CHECK_EQUAL(HexStr(buf), HexStr(correctout));\n-    AES128Decrypt dec(&key[0]);\n-    dec.Decrypt(&buf2[0], &buf[0]);\n+    AES128Decrypt dec(key.data());\n+    dec.Decrypt(buf2.data(), buf.data());\n     BOOST_CHECK_EQUAL(HexStr(buf2), HexStr(in));\n }\n \n@@ -96,12 +96,12 @@ void TestAES256(const std::string &hexkey, const std::string &hexin, const std::\n     assert(key.size() == 32);\n     assert(in.size() == 16);\n     assert(correctout.size() == 16);\n-    AES256Encrypt enc(&key[0]);\n+    AES256Encrypt enc(key.data());\n     buf.resize(correctout.size());\n-    enc.Encrypt(&buf[0], &in[0]);\n+    enc.Encrypt(buf.data(), in.data());\n     BOOST_CHECK(buf == correctout);\n-    AES256Decrypt dec(&key[0]);\n-    dec.Decrypt(&buf[0], &buf[0]);\n+    AES256Decrypt dec(key.data());\n+    dec.Decrypt(buf.data(), buf.data());\n     BOOST_CHECK(buf == in);\n }\n \n@@ -114,16 +114,16 @@ void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     std::vector<unsigned char> realout(in.size() + AES_BLOCKSIZE);\n \n     // Encrypt the plaintext and verify that it equals the cipher\n-    AES128CBCEncrypt enc(&key[0], &iv[0], pad);\n-    int size = enc.Encrypt(&in[0], in.size(), &realout[0]);\n+    AES128CBCEncrypt enc(key.data(), iv.data(), pad);\n+    int size = enc.Encrypt(in.data(), in.size(), realout.data());\n     realout.resize(size);\n     BOOST_CHECK(realout.size() == correctout.size());\n     BOOST_CHECK_MESSAGE(realout == correctout, HexStr(realout) + std::string(\" != \") + hexout);\n \n     // Decrypt the cipher and verify that it equals the plaintext\n     std::vector<unsigned char> decrypted(correctout.size());\n-    AES128CBCDecrypt dec(&key[0], &iv[0], pad);\n-    size = dec.Decrypt(&correctout[0], correctout.size(), &decrypted[0]);\n+    AES128CBCDecrypt dec(key.data(), iv.data(), pad);\n+    size = dec.Decrypt(correctout.data(), correctout.size(), decrypted.data());\n     decrypted.resize(size);\n     BOOST_CHECK(decrypted.size() == in.size());\n     BOOST_CHECK_MESSAGE(decrypted == in, HexStr(decrypted) + std::string(\" != \") + hexin);\n@@ -133,12 +133,12 @@ void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     {\n         std::vector<unsigned char> sub(i, in.end());\n         std::vector<unsigned char> subout(sub.size() + AES_BLOCKSIZE);\n-        int _size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n+        int _size = enc.Encrypt(sub.data(), sub.size(), subout.data());\n         if (_size != 0)\n         {\n             subout.resize(_size);\n             std::vector<unsigned char> subdecrypted(subout.size());\n-            _size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n+            _size = dec.Decrypt(subout.data(), subout.size(), subdecrypted.data());\n             subdecrypted.resize(_size);\n             BOOST_CHECK(decrypted.size() == in.size());\n             BOOST_CHECK_MESSAGE(subdecrypted == sub, HexStr(subdecrypted) + std::string(\" != \") + HexStr(sub));\n@@ -155,16 +155,16 @@ void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     std::vector<unsigned char> realout(in.size() + AES_BLOCKSIZE);\n \n     // Encrypt the plaintext and verify that it equals the cipher\n-    AES256CBCEncrypt enc(&key[0], &iv[0], pad);\n-    int size = enc.Encrypt(&in[0], in.size(), &realout[0]);\n+    AES256CBCEncrypt enc(key.data(), iv.data(), pad);\n+    int size = enc.Encrypt(in.data(), in.size(), realout.data());\n     realout.resize(size);\n     BOOST_CHECK(realout.size() == correctout.size());\n     BOOST_CHECK_MESSAGE(realout == correctout, HexStr(realout) + std::string(\" != \") + hexout);\n \n     // Decrypt the cipher and verify that it equals the plaintext\n     std::vector<unsigned char> decrypted(correctout.size());\n-    AES256CBCDecrypt dec(&key[0], &iv[0], pad);\n-    size = dec.Decrypt(&correctout[0], correctout.size(), &decrypted[0]);\n+    AES256CBCDecrypt dec(key.data(), iv.data(), pad);\n+    size = dec.Decrypt(correctout.data(), correctout.size(), decrypted.data());\n     decrypted.resize(size);\n     BOOST_CHECK(decrypted.size() == in.size());\n     BOOST_CHECK_MESSAGE(decrypted == in, HexStr(decrypted) + std::string(\" != \") + hexin);\n@@ -174,12 +174,12 @@ void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad\n     {\n         std::vector<unsigned char> sub(i, in.end());\n         std::vector<unsigned char> subout(sub.size() + AES_BLOCKSIZE);\n-        int _size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n+        int _size = enc.Encrypt(sub.data(), sub.size(), subout.data());\n         if (_size != 0)\n         {\n             subout.resize(_size);\n             std::vector<unsigned char> subdecrypted(subout.size());\n-            _size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n+            _size = dec.Decrypt(subout.data(), subout.size(), subdecrypted.data());\n             subdecrypted.resize(_size);\n             BOOST_CHECK(decrypted.size() == in.size());\n             BOOST_CHECK_MESSAGE(subdecrypted == sub, HexStr(subdecrypted) + std::string(\" != \") + HexStr(sub));"
      },
      {
        "sha": "40f0ecd5f16b99a3d8926b401e62f611a8caa7f9",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -27,7 +27,7 @@ static void ResetArgs(const std::string& strArg)\n     for (std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n-    gArgs.ParseParameters(vecChar.size(), &vecChar[0]);\n+    gArgs.ParseParameters(vecChar.size(), vecChar.data());\n }\n \n BOOST_AUTO_TEST_CASE(boolarg)"
      },
      {
        "sha": "164cbd873feabeb08407a2d162e678b7c7ee5e98",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -39,7 +39,7 @@ BOOST_AUTO_TEST_CASE(skiplist_test)\n \n         BOOST_CHECK(vIndex[SKIPLIST_LENGTH - 1].GetAncestor(from) == &vIndex[from]);\n         BOOST_CHECK(vIndex[from].GetAncestor(to) == &vIndex[to]);\n-        BOOST_CHECK(vIndex[from].GetAncestor(0) == &vIndex[0]);\n+        BOOST_CHECK(vIndex[from].GetAncestor(0) == vIndex.data());\n     }\n }\n \n@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n     for (unsigned int i=0; i<vBlocksSide.size(); i++) {\n         vHashSide[i] = ArithToUint256(i + 50000 + (arith_uint256(1) << 128)); // Add 1<<128 to the hashes, so GetLow64() still returns the height.\n         vBlocksSide[i].nHeight = i + 50000;\n-        vBlocksSide[i].pprev = i ? &vBlocksSide[i - 1] : &vBlocksMain[49999];\n+        vBlocksSide[i].pprev = i ? &vBlocksSide[i - 1] : (vBlocksMain.data()+49999);\n         vBlocksSide[i].phashBlock = &vHashSide[i];\n         vBlocksSide[i].BuildSkip();\n         BOOST_CHECK_EQUAL((int)UintToArith256(vBlocksSide[i].GetBlockHash()).GetLow64(), vBlocksSide[i].nHeight);"
      },
      {
        "sha": "50e4076d0716adcd699dd56f462cdc4597cfca73",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -67,7 +67,7 @@ int do_fuzz()\n     if (buffer.size() < sizeof(uint32_t)) return 0;\n \n     uint32_t test_id = 0xffffffff;\n-    memcpy(&test_id, &buffer[0], sizeof(uint32_t));\n+    memcpy(&test_id, buffer.data(), sizeof(uint32_t));\n     buffer.erase(buffer.begin(), buffer.begin() + sizeof(uint32_t));\n \n     if (test_id >= TEST_ID_END) return 0;"
      },
      {
        "sha": "736a0d4fe2f041b85f60d466829f7f5e3e4123db",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -14,7 +14,7 @@ template <unsigned int BITS>\n base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n {\n     assert(vch.size() == sizeof(data));\n-    memcpy(data, &vch[0], sizeof(data));\n+    memcpy(data, vch.data(), sizeof(data));\n }\n \n template <unsigned int BITS>"
      },
      {
        "sha": "8db3bfd69c3b125e0d933444e675767ce9c5c743",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -27,8 +27,7 @@ int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, cons\n     CSHA512 di;\n \n     di.Write((const unsigned char*)strKeyData.c_str(), strKeyData.size());\n-    if(chSalt.size())\n-        di.Write(&chSalt[0], chSalt.size());\n+    di.Write(chSalt.data(), chSalt.size());\n     di.Finalize(buf);\n \n     for(int i = 0; i != count - 1; i++)\n@@ -82,7 +81,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     vchCiphertext.resize(vchPlaintext.size() + AES_BLOCKSIZE);\n \n     AES256CBCEncrypt enc(vchKey.data(), vchIV.data(), true);\n-    size_t nLen = enc.Encrypt(&vchPlaintext[0], vchPlaintext.size(), &vchCiphertext[0]);\n+    size_t nLen = enc.Encrypt(&vchPlaintext[0], vchPlaintext.size(), vchCiphertext.data());\n     if(nLen < vchPlaintext.size())\n         return false;\n     vchCiphertext.resize(nLen);\n@@ -101,7 +100,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n     vchPlaintext.resize(nLen);\n \n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n-    nLen = dec.Decrypt(&vchCiphertext[0], vchCiphertext.size(), &vchPlaintext[0]);\n+    nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), &vchPlaintext[0]);\n     if(nLen == 0)\n         return false;\n     vchPlaintext.resize(nLen);\n@@ -113,7 +112,7 @@ static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMateri\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n-    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_IV_SIZE);\n+    memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n@@ -123,7 +122,7 @@ static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<u\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n-    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_IV_SIZE);\n+    memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));"
      },
      {
        "sha": "ceaab00ba20e051ec86e4ece48fc1aea15ff1876",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -605,7 +605,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n     if (!key.SignCompact(ss.GetHash(), vchSig))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n \n-    return EncodeBase64(&vchSig[0], vchSig.size());\n+    return EncodeBase64(vchSig.data(), vchSig.size());\n }\n \n UniValue getreceivedbyaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "f4dabc50c0352ec50c4cd3701a9547662997953f",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/592404f03f2b734351d734f0c9ca1fdce997321b/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/592404f03f2b734351d734f0c9ca1fdce997321b/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=592404f03f2b734351d734f0c9ca1fdce997321b",
        "patch": "@@ -80,7 +80,7 @@ BOOST_AUTO_TEST_CASE(passphrase) {\n \n     std::string hash(GetRandHash().ToString());\n     std::vector<unsigned char> vchSalt(8);\n-    GetRandBytes(&vchSalt[0], vchSalt.size());\n+    GetRandBytes(vchSalt.data(), vchSalt.size());\n     uint32_t rounds = InsecureRand32();\n     if (rounds > 30000)\n         rounds = 30000;"
      }
    ]
  }
]