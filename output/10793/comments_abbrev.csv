promag,2017-07-12T23:03:53Z,#9804 should cherry pick this one right?,https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-314922449,314922449,
meshcollider,2017-07-12T23:37:43Z,#9804 has just been merged,https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-314927588,314927588,
jtimon,2017-07-13T20:25:06Z,Fast review ACK modulo nits.,https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-315191919,315191919,
meshcollider,2017-07-13T23:06:32Z,@jtimon this is consistent with how #9804 did it,https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-315225857,315225857,
meshcollider,2017-07-14T10:01:22Z,"Reverted the changes where specific elements were accessed, thanks @jtimon and @dcousens ",https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-315322083,315322083,
meshcollider,2017-08-15T08:58:01Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-322416757,322416757,
meshcollider,2017-08-28T12:07:07Z,Rebased,https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-325335634,325335634,
laanwj,2017-09-05T22:29:15Z,utACK [s]db0e991fb7975c071818b058376644be08ced343[/s]   https://github.com/bitcoin/bitcoin/pull/10793/commits/7d5d19903168bb9452e386ace62b74875c04dae2,https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-327321720,327321720,
laanwj,2017-09-07T21:36:13Z,The commit message is weird now :),https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-327933869,327933869,
meshcollider,2017-09-07T22:37:33Z,"Argh fixed, thanks :)",https://github.com/bitcoin/bitcoin/pull/10793#issuecomment-327945579,327945579,
jtimon,2017-07-13T20:21:48Z,Is this really clearer?,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127321067,127321067,src/rpc/server.cpp
jtimon,2017-07-13T20:22:30Z,same here,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127321229,127321229,src/test/bloom_tests.cpp
jtimon,2017-07-13T20:23:04Z,same here,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127321372,127321372,src/test/skiplist_tests.cpp
jtimon,2017-07-13T20:23:34Z,here you aren't even consistent,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127321484,127321484,src/test/skiplist_tests.cpp
jtimon,2017-07-13T20:24:39Z,"well, you get the idea, if the index was other than 0, it seems to me that the change makes things worse.",https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127321778,127321778,src/test/skiplist_tests.cpp
dcousens,2017-07-13T22:57:07Z,what lacks consistency?,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127351878,127351878,src/test/skiplist_tests.cpp
jtimon,2017-07-13T22:59:23Z,One time vIndex is accessed by ```vIndex.data() + n``` and another with ```vIndex[m]```,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127352181,127352181,src/test/skiplist_tests.cpp
meshcollider,2017-07-13T23:03:31Z,That's because one is accessing the element not a pointer...,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127352765,127352765,src/test/skiplist_tests.cpp
dcousens,2017-07-13T23:24:46Z,"The `.data()` usage here however,  is not really inline with #9804.\n#9804 replaced usage of `&v[0]` and `&v[N]` for specifying a slice/range.\nIn the change here,  you are specifically referring to the memory location of **1** element,  which isn't an rvalue, probably unnecessary to use `.data()`.",https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127355638,127355638,src/test/skiplist_tests.cpp
dcousens,2017-07-13T23:26:02Z,"This is inline with #9804,  and prevents U/B if `data` is empty",https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127355768,127355768,src/test/bloom_tests.cpp
meshcollider,2017-07-13T23:32:16Z,Isn't it still preferable to access the memory location of an element this way?,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127356559,127356559,src/test/skiplist_tests.cpp
dcousens,2017-07-14T00:39:46Z,"@MeshCollider the advantage of `.data()` is that it is defined to return `nullptr` if `.empty()`,  compared to `&v[0]` potentially de-referencing unitialized memory.\nIn the above,  we assume `vIndex` is not empty, as you are de-referencing `vIndex[i]`,  therefore, it is probably not as necessary.\nAs far as the pattern goes,  #9804 introduced `.data()` specifically where `&v[0]` was used to tar",https://github.com/bitcoin/bitcoin/pull/10793#discussion_r127364393,127364393,src/test/skiplist_tests.cpp
laanwj,2017-09-05T22:25:19Z,nit: Please remove space after the case here,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r137130612,137130612,src/qt/test/paymentservertests.cpp
MarcoFalke,2017-09-05T22:33:33Z,@MeshCollider You can pipe the diff through clang-format to prevent such nits in the future. See dev notes.,https://github.com/bitcoin/bitcoin/pull/10793#discussion_r137131902,137131902,src/qt/test/paymentservertests.cpp
meshcollider,2017-09-05T23:08:07Z,"Fixed, thanks :)",https://github.com/bitcoin/bitcoin/pull/10793#discussion_r137137069,137137069,src/qt/test/paymentservertests.cpp
laanwj,2017-09-06T19:04:06Z,"If data is empty, I'd say copying to data()+32 is U/B no matter what.",https://github.com/bitcoin/bitcoin/pull/10793#discussion_r137361636,137361636,src/test/bloom_tests.cpp
laanwj,2017-09-06T22:37:27Z,"Agree with @jtimon here. This PR is titled `Changing &var[0] to var.data()`, this seems to overshoot that scope. Addressing out of an vector is UB no matter what, so this doesn't fix any potential issues, and isn't more readable IMO either.",https://github.com/bitcoin/bitcoin/pull/10793#discussion_r137407758,137407758,src/rpc/server.cpp
