dhruv,2021-08-14 19:38:48,"Concept ACK.\n\nWe have to implement crypto ourselves to keep the surface area small and avoid bringing in large dependencies. Differential fuzzing against a reference implementation is a great addition to testing the reference test vectors.\n\nThank you for your work, and welcome to Bitcoin Core!",https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-898950491,898950491,
fanquake,2021-08-15 03:28:16,@agroce / @guidovranken this may also interest you.,https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-898989809,898989809,
guidovranken,2021-08-15 03:48:35,"Essentially this is already done by Cryptofuzz which compares it against the Botan implementation, and is running on OSS-Fuzz in the bitcoin-core project\n\nhttps://github.com/guidovranken/cryptofuzz/blob/6dddb6bb97a2cd8d7bf915bca00d0411ccf5e1c0/modules/bitcoin/module.cpp#L417-L420",https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-898991078,898991078,
stratospher,2021-08-19 18:48:32,"Oh..I wasn't aware of the differential fuzzing for Bitcoin Core cryptographic libraries being done in Cryptofuzz. Crypofuzz is an incredible project! Could you please elaborate more on where the comparison with Botan implementation is happening?\n\nWould there be incremental value in fuzzing against D.J. Bernstein's reference implementation? And including the Keystream() function too in the Bitc",https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902156184,902156184,
MarcoFalke,2021-08-19 19:02:11,"btw, I don't mind adding the fuzz test here, even if it is redundant with oss-fuzz. Oss-fuzz is just one fuzzing providre, but I also run my own fuzzing servers to not put all eggs into one basket. I am sure others are running the Bitcoin Core fuzz target, too.",https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902164938,902164938,
dhruv,2021-08-19 19:06:03,+1 for what @MarcoFalke said. It'd be nice to be able to run this along with other fuzz targets on personal machines.,https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902167984,902167984,
practicalswift,2021-08-19 21:18:17,Concept ACK for the reasons @MarcoFalke mentioned,https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902254545,902254545,
agroce,2021-08-19 22:34:39,"There are fuzzers (e.g. https://github.com/bitcoin/bitcoin/pull/22585) not available via OSS-Fuzz, also.",https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-902296051,902296051,
stratospher,2021-10-14 04:52:49,"Added `LIMITED_WHILE` and updated `ConsumeIntegralInRange()` to `ConsumeBool()` as per discussion in [comments](https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692403396).\nReady for further review.",https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-942945385,942945385,
DrahtBot,2021-10-21 16:20:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23441](https://github.com/bitcoin/bitcoin/pull/23441) (fuzz: Differential fuzzing for ChaCha20Forward4064-Poly1305@bitco",https://github.com/bitcoin/bitcoin/pull/22704#issuecomment-948773721,948773721,
MarcoFalke,2021-08-19 18:59:42,"how is this different from\n\n```suggestion\n    while (fuzzed_data_provider.ConsumeBool()) {\n```\n\nAlso, could use `LIMITED_WHILE` to avoid unlimited runtime.",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692403396,692403396,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
prakash1512,2021-08-20 06:37:07,"> how is this different from\n\nIncreased the probability of entering the while loop as `ConsumeBool()` has only 50% chance of returning true while `ConsumeIntegralInRange<uint32_t>(0,100) >= 10` will have 90% chance of returning true.\nEssentially we’re trying to get the test running longer for each fuzz seed so multiple functions are exercised per seed, especially since `ChaCha20` maintains a",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692702350,692702350,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
stratospher,2021-08-20 06:57:02,"> Also, could use `LIMITED_WHILE` to avoid unlimited runtime.\n\nGreat suggestion! Added `LIMITED_WHILE`.",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692712329,692712329,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
MarcoFalke,2021-08-20 07:38:43,"> Essentially we’re trying to get the test running longer\n\nDo you have data to support that claim? Fuzzing engines will store inputs that increase coverage data and once the data is stored, for replay it doesn't matter whether it was `ConsumeBool` or `ConsumeIntegralInRange` that evaluated to true.",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r692735180,692735180,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
prakash1512,2021-08-20 21:25:22,"> Do you have data to support that claim?\n\nBacking the claim with data was indeed a great suggestion, so we generated the data and plots to verify it.\nNow we have results to dismiss that claim :)\nSharing our findings here:\n\n<img src=""https://cdn.discordapp.com/attachments/863100385152335883/878387475096170607/unknown.png""\n	title=""Plot"" width=""500"" height=""300"" />\n`x-axis denotes no",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r693226653,693226653,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
siv2r,2021-11-27 20:34:03,"nit: it might be useful to add the definition of `ENCRYPT_ctx` in the comments.\n```\n/* \n * ECRYPT_ctx is the structure containing the representation of the\n * internal state of your cipher. \n */\n```",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r757817842,757817842,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
siv2r,2021-11-27 20:50:53,"```suggestion\nstatic const char sigma[16] = ""expand 32-byte k"";\nstatic const char tau[16] = ""expand 16-byte k"";\n```",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r757818204,757818204,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
siv2r,2021-11-27 22:20:17,"```suggestion\n    a = PLUS(a, b); d = ROTATE(XOR(d, a), 16);   \\n    c = PLUS(c, d); b = ROTATE(XOR(b, c), 12);   \\n    a = PLUS(a, b); d = ROTATE(XOR(d, a), 8);    \\n    c = PLUS(c, d); b = ROTATE(XOR(b, c), 7);\n```\nnit: this pattern of defining the `QUATERROUND` macro is following in many places ([chacha20.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/crypto/chacha20.cpp#L1",https://github.com/bitcoin/bitcoin/pull/22704#discussion_r757818918,757818918,src/test/fuzz/crypto_diff_fuzz_chacha20.cpp
